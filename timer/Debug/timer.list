
timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005080  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08005210  08005210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005418  08005418  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005418  08005418  00015418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005420  08005420  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005420  08005420  00015420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000070  08005498  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08005498  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a23  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe6  00000000  00000000  00030ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00032ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  000339b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b3a  00000000  00000000  000347f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e09  00000000  00000000  0005c332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f590a  00000000  00000000  0006d13b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00162a45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048fc  00000000  00000000  00162a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080051f8 	.word	0x080051f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080051f8 	.word	0x080051f8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <commTask>:

uint8_t cmdbuffer[MAX_BUFFER_LENGTH];
int cmdcount = 0;

int commTask()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 0);
 80005aa:	1db9      	adds	r1, r7, #6
 80005ac:	2300      	movs	r3, #0
 80005ae:	2201      	movs	r2, #1
 80005b0:	481d      	ldr	r0, [pc, #116]	; (8000628 <commTask+0x84>)
 80005b2:	f002 feb5 	bl	8003320 <HAL_UART_Receive>
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK) {
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <commTask+0x20>
		return 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	e02d      	b.n	8000620 <commTask+0x7c>
	}

	if (ch != '\r' && ch != '\n')
 80005c4:	79bb      	ldrb	r3, [r7, #6]
 80005c6:	2b0d      	cmp	r3, #13
 80005c8:	d01a      	beq.n	8000600 <commTask+0x5c>
 80005ca:	79bb      	ldrb	r3, [r7, #6]
 80005cc:	2b0a      	cmp	r3, #10
 80005ce:	d017      	beq.n	8000600 <commTask+0x5c>
	{
		HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);
 80005d0:	1db9      	adds	r1, r7, #6
 80005d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005d6:	2201      	movs	r2, #1
 80005d8:	4813      	ldr	r0, [pc, #76]	; (8000628 <commTask+0x84>)
 80005da:	f002 fe0d 	bl	80031f8 <HAL_UART_Transmit>

		if (cmdcount >= MAX_BUFFER_LENGTH)
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <commTask+0x88>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b63      	cmp	r3, #99	; 0x63
 80005e4:	dd02      	ble.n	80005ec <commTask+0x48>
		{
			cmdcount = 0;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <commTask+0x88>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <commTask+0x88>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	1c5a      	adds	r2, r3, #1
 80005f2:	490e      	ldr	r1, [pc, #56]	; (800062c <commTask+0x88>)
 80005f4:	600a      	str	r2, [r1, #0]
 80005f6:	79b9      	ldrb	r1, [r7, #6]
 80005f8:	4a0d      	ldr	r2, [pc, #52]	; (8000630 <commTask+0x8c>)
 80005fa:	54d1      	strb	r1, [r2, r3]
		return 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	e00f      	b.n	8000620 <commTask+0x7c>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000604:	2202      	movs	r2, #2
 8000606:	490b      	ldr	r1, [pc, #44]	; (8000634 <commTask+0x90>)
 8000608:	4807      	ldr	r0, [pc, #28]	; (8000628 <commTask+0x84>)
 800060a:	f002 fdf5 	bl	80031f8 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <commTask+0x88>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a07      	ldr	r2, [pc, #28]	; (8000630 <commTask+0x8c>)
 8000614:	2100      	movs	r1, #0
 8000616:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <commTask+0x88>)
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
	return 1;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200000d8 	.word	0x200000d8
 800062c:	200001c0 	.word	0x200001c0
 8000630:	2000015c 	.word	0x2000015c
 8000634:	08005210 	.word	0x08005210

08000638 <_write>:

/////////////////////////////////////////////////////////////////////////
// REdirecting printf to UART
/////////////////////////////////////////////////////////////////////////
int _write(int fd, char* ptr, int len)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	b29a      	uxth	r2, r3
 8000648:	f04f 33ff 	mov.w	r3, #4294967295
 800064c:	68b9      	ldr	r1, [r7, #8]
 800064e:	4804      	ldr	r0, [pc, #16]	; (8000660 <_write+0x28>)
 8000650:	f002 fdd2 	bl	80031f8 <HAL_UART_Transmit>
    return len;
 8000654:	687b      	ldr	r3, [r7, #4]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200000d8 	.word	0x200000d8

08000664 <handleCommand>:



void handleCommand()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
  char cmd[20];
  int maxCount;

  int params = sscanf((const char*)cmdbuffer, "%s %d", cmd, &maxCount);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	f107 0208 	add.w	r2, r7, #8
 8000670:	4922      	ldr	r1, [pc, #136]	; (80006fc <handleCommand+0x98>)
 8000672:	4823      	ldr	r0, [pc, #140]	; (8000700 <handleCommand+0x9c>)
 8000674:	f003 fc36 	bl	8003ee4 <siscanf>
 8000678:	61f8      	str	r0, [r7, #28]

  if (params == 0)
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d038      	beq.n	80006f2 <handleCommand+0x8e>
  {
	  return;
  }

  if (strcmp(cmd, "start") == 0)
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	491f      	ldr	r1, [pc, #124]	; (8000704 <handleCommand+0xa0>)
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff fda2 	bl	80001d0 <strcmp>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d118      	bne.n	80006c4 <handleCommand+0x60>
  {
	  HAL_TIM_Base_Start_IT(&htim6);
 8000692:	481d      	ldr	r0, [pc, #116]	; (8000708 <handleCommand+0xa4>)
 8000694:	f002 fa3c 	bl	8002b10 <HAL_TIM_Base_Start_IT>
	  __HAL_TIM_SET_COUNTER(&htim6,0);
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <handleCommand+0xa4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2200      	movs	r2, #0
 800069e:	625a      	str	r2, [r3, #36]	; 0x24
	  __HAL_TIM_SET_AUTORELOAD(&htim6, maxCount*10);
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	4613      	mov	r3, r2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4413      	add	r3, r2
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <handleCommand+0xa4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	4613      	mov	r3, r2
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4413      	add	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	461a      	mov	r2, r3
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <handleCommand+0xa4>)
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	e017      	b.n	80006f4 <handleCommand+0x90>
  }
  else if (strcmp(cmd, "stop") == 0)
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	4910      	ldr	r1, [pc, #64]	; (800070c <handleCommand+0xa8>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff fd80 	bl	80001d0 <strcmp>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d109      	bne.n	80006ea <handleCommand+0x86>
  {
	  HAL_TIM_Base_Stop_IT(&htim6);
 80006d6:	480c      	ldr	r0, [pc, #48]	; (8000708 <handleCommand+0xa4>)
 80006d8:	f002 fa8a 	bl	8002bf0 <HAL_TIM_Base_Stop_IT>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2120      	movs	r1, #32
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f000 fe46 	bl	8001374 <HAL_GPIO_WritePin>
 80006e8:	e004      	b.n	80006f4 <handleCommand+0x90>
  }
  else
  {
	  printf("Invalid command\r\n");
 80006ea:	4809      	ldr	r0, [pc, #36]	; (8000710 <handleCommand+0xac>)
 80006ec:	f003 fbf2 	bl	8003ed4 <puts>
 80006f0:	e000      	b.n	80006f4 <handleCommand+0x90>
	  return;
 80006f2:	bf00      	nop
  }
}
 80006f4:	3720      	adds	r7, #32
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	08005214 	.word	0x08005214
 8000700:	2000015c 	.word	0x2000015c
 8000704:	0800521c 	.word	0x0800521c
 8000708:	2000008c 	.word	0x2000008c
 800070c:	08005224 	.word	0x08005224
 8000710:	0800522c 	.word	0x0800522c

08000714 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin );
 800071c:	2120      	movs	r1, #32
 800071e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000722:	f000 fe3f 	bl	80013a4 <HAL_GPIO_TogglePin>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fae7 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f811 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073a:	f000 f8c9 	bl	80008d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800073e:	f000 f897 	bl	8000870 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000742:	f000 f85d 	bl	8000800 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000746:	2036      	movs	r0, #54	; 0x36
 8000748:	f000 fc4f 	bl	8000fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  	  if (commTask())
 800074c:	f7ff ff2a 	bl	80005a4 <commTask>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d0fa      	beq.n	800074c <main+0x1e>
	  	  {
	  		  handleCommand();
 8000756:	f7ff ff85 	bl	8000664 <handleCommand>
	  	  if (commTask())
 800075a:	e7f7      	b.n	800074c <main+0x1e>

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b096      	sub	sp, #88	; 0x58
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2244      	movs	r2, #68	; 0x44
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f003 fb3c 	bl	8003de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	463b      	mov	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800077e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000782:	f000 fe5b 	bl	800143c <HAL_PWREx_ControlVoltageScaling>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800078c:	f000 f90e 	bl	80009ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000790:	2302      	movs	r3, #2
 8000792:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000798:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079a:	2310      	movs	r3, #16
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a2:	2302      	movs	r3, #2
 80007a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007aa:	230a      	movs	r3, #10
 80007ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007ae:	2307      	movs	r3, #7
 80007b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 fe92 	bl	80014e8 <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007ca:	f000 f8ef 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	230f      	movs	r3, #15
 80007d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2303      	movs	r3, #3
 80007d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007e2:	463b      	mov	r3, r7
 80007e4:	2104      	movs	r1, #4
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fa5a 	bl	8001ca0 <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007f2:	f000 f8db 	bl	80009ac <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3758      	adds	r7, #88	; 0x58
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_TIM6_Init+0x68>)
 8000812:	4a16      	ldr	r2, [pc, #88]	; (800086c <MX_TIM6_Init+0x6c>)
 8000814:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_TIM6_Init+0x68>)
 8000818:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800081c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_TIM6_Init+0x68>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_TIM6_Init+0x68>)
 8000826:	f241 3287 	movw	r2, #4999	; 0x1387
 800082a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082c:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_TIM6_Init+0x68>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000832:	480d      	ldr	r0, [pc, #52]	; (8000868 <MX_TIM6_Init+0x68>)
 8000834:	f002 f914 	bl	8002a60 <HAL_TIM_Base_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800083e:	f000 f8b5 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_TIM6_Init+0x68>)
 8000850:	f002 fbde 	bl	8003010 <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800085a:	f000 f8a7 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000008c 	.word	0x2000008c
 800086c:	40001000 	.word	0x40001000

08000870 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <MX_USART2_UART_Init+0x5c>)
 8000878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008b4:	f002 fc52 	bl	800315c <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008be:	f000 f875 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200000d8 	.word	0x200000d8
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	4b2f      	ldr	r3, [pc, #188]	; (80009a4 <MX_GPIO_Init+0xd4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a2e      	ldr	r2, [pc, #184]	; (80009a4 <MX_GPIO_Init+0xd4>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <MX_GPIO_Init+0xd4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <MX_GPIO_Init+0xd4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a28      	ldr	r2, [pc, #160]	; (80009a4 <MX_GPIO_Init+0xd4>)
 8000904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <MX_GPIO_Init+0xd4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <MX_GPIO_Init+0xd4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a22      	ldr	r2, [pc, #136]	; (80009a4 <MX_GPIO_Init+0xd4>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <MX_GPIO_Init+0xd4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_GPIO_Init+0xd4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a1c      	ldr	r2, [pc, #112]	; (80009a4 <MX_GPIO_Init+0xd4>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_GPIO_Init+0xd4>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2120      	movs	r1, #32
 800094a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094e:	f000 fd11 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000952:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000958:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	480f      	ldr	r0, [pc, #60]	; (80009a8 <MX_GPIO_Init+0xd8>)
 800096a:	f000 fb59 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800096e:	2320      	movs	r3, #32
 8000970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000988:	f000 fb4a 	bl	8001020 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2100      	movs	r1, #0
 8000990:	2028      	movs	r0, #40	; 0x28
 8000992:	f000 fb0e 	bl	8000fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000996:	2028      	movs	r0, #40	; 0x28
 8000998:	f000 fb27 	bl	8000fea <HAL_NVIC_EnableIRQ>

}
 800099c:	bf00      	nop
 800099e:	3728      	adds	r7, #40	; 0x28
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40021000 	.word	0x40021000
 80009a8:	48000800 	.word	0x48000800

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_MspInit+0x44>)
 80009c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c2:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <HAL_MspInit+0x44>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6613      	str	r3, [r2, #96]	; 0x60
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <HAL_MspInit+0x44>)
 80009cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_MspInit+0x44>)
 80009d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <HAL_MspInit+0x44>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	6593      	str	r3, [r2, #88]	; 0x58
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_MspInit+0x44>)
 80009e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <HAL_TIM_Base_MspInit+0x44>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d113      	bne.n	8000a3a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <HAL_TIM_Base_MspInit+0x48>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	4a0c      	ldr	r2, [pc, #48]	; (8000a48 <HAL_TIM_Base_MspInit+0x48>)
 8000a18:	f043 0310 	orr.w	r3, r3, #16
 8000a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <HAL_TIM_Base_MspInit+0x48>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a22:	f003 0310 	and.w	r3, r3, #16
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2036      	movs	r0, #54	; 0x36
 8000a30:	f000 fabf 	bl	8000fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a34:	2036      	movs	r0, #54	; 0x36
 8000a36:	f000 fad8 	bl	8000fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40001000 	.word	0x40001000
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b0ac      	sub	sp, #176	; 0xb0
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2288      	movs	r2, #136	; 0x88
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f003 f9bb 	bl	8003de8 <memset>
  if(huart->Instance==USART2)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a21      	ldr	r2, [pc, #132]	; (8000afc <HAL_UART_MspInit+0xb0>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d13b      	bne.n	8000af4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f001 fb2d 	bl	80020e8 <HAL_RCCEx_PeriphCLKConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a94:	f7ff ff8a 	bl	80009ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <HAL_UART_MspInit+0xb4>)
 8000a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9c:	4a18      	ldr	r2, [pc, #96]	; (8000b00 <HAL_UART_MspInit+0xb4>)
 8000a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <HAL_UART_MspInit+0xb4>)
 8000aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <HAL_UART_MspInit+0xb4>)
 8000ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab4:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <HAL_UART_MspInit+0xb4>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abc:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_UART_MspInit+0xb4>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ac8:	230c      	movs	r3, #12
 8000aca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae0:	2307      	movs	r3, #7
 8000ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aea:	4619      	mov	r1, r3
 8000aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af0:	f000 fa96 	bl	8001020 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000af4:	bf00      	nop
 8000af6:	37b0      	adds	r7, #176	; 0xb0
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40004400 	.word	0x40004400
 8000b00:	40021000 	.word	0x40021000

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <NMI_Handler+0x4>

08000b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <MemManage_Handler+0x4>

08000b16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b50:	f000 f934 	bl	8000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b60:	f000 fc3a 	bl	80013d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <TIM6_DAC_IRQHandler+0x10>)
 8000b6e:	f002 f86e 	bl	8002c4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000008c 	.word	0x2000008c

08000b7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	e00a      	b.n	8000ba4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b8e:	f3af 8000 	nop.w
 8000b92:	4601      	mov	r1, r0
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	60ba      	str	r2, [r7, #8]
 8000b9a:	b2ca      	uxtb	r2, r1
 8000b9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	dbf0      	blt.n	8000b8e <_read+0x12>
	}

return len;
 8000bac:	687b      	ldr	r3, [r7, #4]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	return -1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bde:	605a      	str	r2, [r3, #4]
	return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_isatty>:

int _isatty(int file)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <_sbrk+0x5c>)
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <_sbrk+0x60>)
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_sbrk+0x64>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <_sbrk+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d207      	bcs.n	8000c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c50:	f003 f8a0 	bl	8003d94 <__errno>
 8000c54:	4603      	mov	r3, r0
 8000c56:	220c      	movs	r2, #12
 8000c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5e:	e009      	b.n	8000c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <_sbrk+0x64>)
 8000c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20018000 	.word	0x20018000
 8000c80:	00000400 	.word	0x00000400
 8000c84:	200001c4 	.word	0x200001c4
 8000c88:	200001e0 	.word	0x200001e0

08000c8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb4:	f7ff ffea 	bl	8000c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <LoopForever+0x6>)
  ldr r1, =_edata
 8000cba:	490d      	ldr	r1, [pc, #52]	; (8000cf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <LoopForever+0xe>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd0:	4c0a      	ldr	r4, [pc, #40]	; (8000cfc <LoopForever+0x16>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cde:	f003 f85f 	bl	8003da0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ce2:	f7ff fd24 	bl	800072e <main>

08000ce6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce6:	e7fe      	b.n	8000ce6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cf4:	08005428 	.word	0x08005428
  ldr r2, =_sbss
 8000cf8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cfc:	200001dc 	.word	0x200001dc

08000d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC1_2_IRQHandler>
	...

08000d04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_Init+0x3c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <HAL_Init+0x3c>)
 8000d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d18:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1a:	2003      	movs	r0, #3
 8000d1c:	f000 f93e 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d20:	2000      	movs	r0, #0
 8000d22:	f000 f80f 	bl	8000d44 <HAL_InitTick>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d002      	beq.n	8000d32 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	71fb      	strb	r3, [r7, #7]
 8000d30:	e001      	b.n	8000d36 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d32:	f7ff fe41 	bl	80009b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d36:	79fb      	ldrb	r3, [r7, #7]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40022000 	.word	0x40022000

08000d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d50:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <HAL_InitTick+0x6c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d023      	beq.n	8000da0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <HAL_InitTick+0x70>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <HAL_InitTick+0x6c>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f949 	bl	8001006 <HAL_SYSTICK_Config>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10f      	bne.n	8000d9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d809      	bhi.n	8000d94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d80:	2200      	movs	r2, #0
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f000 f913 	bl	8000fb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <HAL_InitTick+0x74>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	e007      	b.n	8000da4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	e004      	b.n	8000da4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73fb      	strb	r3, [r7, #15]
 8000d9e:	e001      	b.n	8000da4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000000 	.word	0x20000000
 8000db8:	20000004 	.word	0x20000004

08000dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x20>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x24>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_IncTick+0x24>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	200001c8 	.word	0x200001c8

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	200001c8 	.word	0x200001c8

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db0b      	blt.n	8000e8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f003 021f 	and.w	r2, r3, #31
 8000e78:	4907      	ldr	r1, [pc, #28]	; (8000e98 <__NVIC_EnableIRQ+0x38>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	095b      	lsrs	r3, r3, #5
 8000e80:	2001      	movs	r0, #1
 8000e82:	fa00 f202 	lsl.w	r2, r0, r2
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000e100 	.word	0xe000e100

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f7ff ff8e 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff29 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc4:	f7ff ff3e 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000fc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	6978      	ldr	r0, [r7, #20]
 8000fd0:	f7ff ff8e 	bl	8000ef0 <NVIC_EncodePriority>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff5d 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff31 	bl	8000e60 <__NVIC_EnableIRQ>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffa2 	bl	8000f58 <SysTick_Config>
 8001014:	4603      	mov	r3, r0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001020:	b480      	push	{r7}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102e:	e17f      	b.n	8001330 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	2101      	movs	r1, #1
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	4013      	ands	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 8171 	beq.w	800132a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b01      	cmp	r3, #1
 8001052:	d005      	beq.n	8001060 <HAL_GPIO_Init+0x40>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d130      	bne.n	80010c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001096:	2201      	movs	r2, #1
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	f003 0201 	and.w	r2, r3, #1
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d118      	bne.n	8001100 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010d4:	2201      	movs	r2, #1
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	08db      	lsrs	r3, r3, #3
 80010ea:	f003 0201 	and.w	r2, r3, #1
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b03      	cmp	r3, #3
 800110a:	d017      	beq.n	800113c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d123      	bne.n	8001190 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	220f      	movs	r2, #15
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	691a      	ldr	r2, [r3, #16]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	08da      	lsrs	r2, r3, #3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3208      	adds	r2, #8
 800118a:	6939      	ldr	r1, [r7, #16]
 800118c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0203 	and.w	r2, r3, #3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 80ac 	beq.w	800132a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	4b5f      	ldr	r3, [pc, #380]	; (8001350 <HAL_GPIO_Init+0x330>)
 80011d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d6:	4a5e      	ldr	r2, [pc, #376]	; (8001350 <HAL_GPIO_Init+0x330>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6613      	str	r3, [r2, #96]	; 0x60
 80011de:	4b5c      	ldr	r3, [pc, #368]	; (8001350 <HAL_GPIO_Init+0x330>)
 80011e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011ea:	4a5a      	ldr	r2, [pc, #360]	; (8001354 <HAL_GPIO_Init+0x334>)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3302      	adds	r3, #2
 80011f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001214:	d025      	beq.n	8001262 <HAL_GPIO_Init+0x242>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4f      	ldr	r2, [pc, #316]	; (8001358 <HAL_GPIO_Init+0x338>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01f      	beq.n	800125e <HAL_GPIO_Init+0x23e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4e      	ldr	r2, [pc, #312]	; (800135c <HAL_GPIO_Init+0x33c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0x23a>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4d      	ldr	r2, [pc, #308]	; (8001360 <HAL_GPIO_Init+0x340>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x236>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4c      	ldr	r2, [pc, #304]	; (8001364 <HAL_GPIO_Init+0x344>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x232>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4b      	ldr	r2, [pc, #300]	; (8001368 <HAL_GPIO_Init+0x348>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x22e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4a      	ldr	r2, [pc, #296]	; (800136c <HAL_GPIO_Init+0x34c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x22a>
 8001246:	2306      	movs	r3, #6
 8001248:	e00c      	b.n	8001264 <HAL_GPIO_Init+0x244>
 800124a:	2307      	movs	r3, #7
 800124c:	e00a      	b.n	8001264 <HAL_GPIO_Init+0x244>
 800124e:	2305      	movs	r3, #5
 8001250:	e008      	b.n	8001264 <HAL_GPIO_Init+0x244>
 8001252:	2304      	movs	r3, #4
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x244>
 8001256:	2303      	movs	r3, #3
 8001258:	e004      	b.n	8001264 <HAL_GPIO_Init+0x244>
 800125a:	2302      	movs	r3, #2
 800125c:	e002      	b.n	8001264 <HAL_GPIO_Init+0x244>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_GPIO_Init+0x244>
 8001262:	2300      	movs	r3, #0
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	f002 0203 	and.w	r2, r2, #3
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	4093      	lsls	r3, r2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001274:	4937      	ldr	r1, [pc, #220]	; (8001354 <HAL_GPIO_Init+0x334>)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	3302      	adds	r3, #2
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001282:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <HAL_GPIO_Init+0x350>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012a6:	4a32      	ldr	r2, [pc, #200]	; (8001370 <HAL_GPIO_Init+0x350>)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012ac:	4b30      	ldr	r3, [pc, #192]	; (8001370 <HAL_GPIO_Init+0x350>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012d0:	4a27      	ldr	r2, [pc, #156]	; (8001370 <HAL_GPIO_Init+0x350>)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012d6:	4b26      	ldr	r3, [pc, #152]	; (8001370 <HAL_GPIO_Init+0x350>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012fa:	4a1d      	ldr	r2, [pc, #116]	; (8001370 <HAL_GPIO_Init+0x350>)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <HAL_GPIO_Init+0x350>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001324:	4a12      	ldr	r2, [pc, #72]	; (8001370 <HAL_GPIO_Init+0x350>)
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa22 f303 	lsr.w	r3, r2, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	f47f ae78 	bne.w	8001030 <HAL_GPIO_Init+0x10>
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	371c      	adds	r7, #28
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000
 8001354:	40010000 	.word	0x40010000
 8001358:	48000400 	.word	0x48000400
 800135c:	48000800 	.word	0x48000800
 8001360:	48000c00 	.word	0x48000c00
 8001364:	48001000 	.word	0x48001000
 8001368:	48001400 	.word	0x48001400
 800136c:	48001800 	.word	0x48001800
 8001370:	40010400 	.word	0x40010400

08001374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
 8001380:	4613      	mov	r3, r2
 8001382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001390:	e002      	b.n	8001398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4013      	ands	r3, r2
 80013bc:	041a      	lsls	r2, r3, #16
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43d9      	mvns	r1, r3
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	400b      	ands	r3, r1
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e4:	695a      	ldr	r2, [r3, #20]
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d006      	beq.n	80013fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f806 	bl	8001408 <HAL_GPIO_EXTI_Callback>
  }
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40010400 	.word	0x40010400

08001408 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <HAL_PWREx_GetVoltageRange+0x18>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40007000 	.word	0x40007000

0800143c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800144a:	d130      	bne.n	80014ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800144c:	4b23      	ldr	r3, [pc, #140]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001458:	d038      	beq.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001462:	4a1e      	ldr	r2, [pc, #120]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001464:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001468:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2232      	movs	r2, #50	; 0x32
 8001470:	fb02 f303 	mul.w	r3, r2, r3
 8001474:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	0c9b      	lsrs	r3, r3, #18
 800147c:	3301      	adds	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001480:	e002      	b.n	8001488 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	3b01      	subs	r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001494:	d102      	bne.n	800149c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f2      	bne.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a8:	d110      	bne.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e00f      	b.n	80014ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ba:	d007      	beq.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014c4:	4a05      	ldr	r2, [pc, #20]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40007000 	.word	0x40007000
 80014e0:	20000000 	.word	0x20000000
 80014e4:	431bde83 	.word	0x431bde83

080014e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e3ca      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014fa:	4b97      	ldr	r3, [pc, #604]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001504:	4b94      	ldr	r3, [pc, #592]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 80e4 	beq.w	80016e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d007      	beq.n	8001532 <HAL_RCC_OscConfig+0x4a>
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	2b0c      	cmp	r3, #12
 8001526:	f040 808b 	bne.w	8001640 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2b01      	cmp	r3, #1
 800152e:	f040 8087 	bne.w	8001640 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001532:	4b89      	ldr	r3, [pc, #548]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d005      	beq.n	800154a <HAL_RCC_OscConfig+0x62>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e3a2      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1a      	ldr	r2, [r3, #32]
 800154e:	4b82      	ldr	r3, [pc, #520]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d004      	beq.n	8001564 <HAL_RCC_OscConfig+0x7c>
 800155a:	4b7f      	ldr	r3, [pc, #508]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001562:	e005      	b.n	8001570 <HAL_RCC_OscConfig+0x88>
 8001564:	4b7c      	ldr	r3, [pc, #496]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 8001566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800156a:	091b      	lsrs	r3, r3, #4
 800156c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001570:	4293      	cmp	r3, r2
 8001572:	d223      	bcs.n	80015bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	4618      	mov	r0, r3
 800157a:	f000 fd55 	bl	8002028 <RCC_SetFlashLatencyFromMSIRange>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e383      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001588:	4b73      	ldr	r3, [pc, #460]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a72      	ldr	r2, [pc, #456]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 800158e:	f043 0308 	orr.w	r3, r3, #8
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b70      	ldr	r3, [pc, #448]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	496d      	ldr	r1, [pc, #436]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015a6:	4b6c      	ldr	r3, [pc, #432]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	4968      	ldr	r1, [pc, #416]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]
 80015ba:	e025      	b.n	8001608 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015bc:	4b66      	ldr	r3, [pc, #408]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a65      	ldr	r2, [pc, #404]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80015c2:	f043 0308 	orr.w	r3, r3, #8
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b63      	ldr	r3, [pc, #396]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	4960      	ldr	r1, [pc, #384]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015da:	4b5f      	ldr	r3, [pc, #380]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	495b      	ldr	r1, [pc, #364]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d109      	bne.n	8001608 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 fd15 	bl	8002028 <RCC_SetFlashLatencyFromMSIRange>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e343      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001608:	f000 fc4a 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 800160c:	4602      	mov	r2, r0
 800160e:	4b52      	ldr	r3, [pc, #328]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	091b      	lsrs	r3, r3, #4
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	4950      	ldr	r1, [pc, #320]	; (800175c <HAL_RCC_OscConfig+0x274>)
 800161a:	5ccb      	ldrb	r3, [r1, r3]
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	fa22 f303 	lsr.w	r3, r2, r3
 8001624:	4a4e      	ldr	r2, [pc, #312]	; (8001760 <HAL_RCC_OscConfig+0x278>)
 8001626:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001628:	4b4e      	ldr	r3, [pc, #312]	; (8001764 <HAL_RCC_OscConfig+0x27c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fb89 	bl	8000d44 <HAL_InitTick>
 8001632:	4603      	mov	r3, r0
 8001634:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d052      	beq.n	80016e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	e327      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d032      	beq.n	80016ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001648:	4b43      	ldr	r3, [pc, #268]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a42      	ldr	r2, [pc, #264]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001654:	f7ff fbc6 	bl	8000de4 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800165c:	f7ff fbc2 	bl	8000de4 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e310      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800166e:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a36      	ldr	r2, [pc, #216]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 8001680:	f043 0308 	orr.w	r3, r3, #8
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	4931      	ldr	r1, [pc, #196]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 8001694:	4313      	orrs	r3, r2
 8001696:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001698:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	492c      	ldr	r1, [pc, #176]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
 80016ac:	e01a      	b.n	80016e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016ae:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a29      	ldr	r2, [pc, #164]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016ba:	f7ff fb93 	bl	8000de4 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016c2:	f7ff fb8f 	bl	8000de4 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e2dd      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016d4:	4b20      	ldr	r3, [pc, #128]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f0      	bne.n	80016c2 <HAL_RCC_OscConfig+0x1da>
 80016e0:	e000      	b.n	80016e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d074      	beq.n	80017da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d005      	beq.n	8001702 <HAL_RCC_OscConfig+0x21a>
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	2b0c      	cmp	r3, #12
 80016fa:	d10e      	bne.n	800171a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d10b      	bne.n	800171a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d064      	beq.n	80017d8 <HAL_RCC_OscConfig+0x2f0>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d160      	bne.n	80017d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e2ba      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001722:	d106      	bne.n	8001732 <HAL_RCC_OscConfig+0x24a>
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 800172a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	e026      	b.n	8001780 <HAL_RCC_OscConfig+0x298>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800173a:	d115      	bne.n	8001768 <HAL_RCC_OscConfig+0x280>
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a05      	ldr	r2, [pc, #20]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 8001742:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a02      	ldr	r2, [pc, #8]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 800174e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	e014      	b.n	8001780 <HAL_RCC_OscConfig+0x298>
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	0800524c 	.word	0x0800524c
 8001760:	20000000 	.word	0x20000000
 8001764:	20000004 	.word	0x20000004
 8001768:	4ba0      	ldr	r3, [pc, #640]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a9f      	ldr	r2, [pc, #636]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 800176e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b9d      	ldr	r3, [pc, #628]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a9c      	ldr	r2, [pc, #624]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 800177a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d013      	beq.n	80017b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff fb2c 	bl	8000de4 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fb28 	bl	8000de4 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e276      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017a2:	4b92      	ldr	r3, [pc, #584]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x2a8>
 80017ae:	e014      	b.n	80017da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff fb18 	bl	8000de4 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b8:	f7ff fb14 	bl	8000de4 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b64      	cmp	r3, #100	; 0x64
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e262      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ca:	4b88      	ldr	r3, [pc, #544]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x2d0>
 80017d6:	e000      	b.n	80017da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d060      	beq.n	80018a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_OscConfig+0x310>
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2b0c      	cmp	r3, #12
 80017f0:	d119      	bne.n	8001826 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d116      	bne.n	8001826 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f8:	4b7c      	ldr	r3, [pc, #496]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_OscConfig+0x328>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e23f      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001810:	4b76      	ldr	r3, [pc, #472]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	061b      	lsls	r3, r3, #24
 800181e:	4973      	ldr	r1, [pc, #460]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001824:	e040      	b.n	80018a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d023      	beq.n	8001876 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800182e:	4b6f      	ldr	r3, [pc, #444]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a6e      	ldr	r2, [pc, #440]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 8001834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183a:	f7ff fad3 	bl	8000de4 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001842:	f7ff facf 	bl	8000de4 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e21d      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001854:	4b65      	ldr	r3, [pc, #404]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b62      	ldr	r3, [pc, #392]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	061b      	lsls	r3, r3, #24
 800186e:	495f      	ldr	r1, [pc, #380]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
 8001874:	e018      	b.n	80018a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001876:	4b5d      	ldr	r3, [pc, #372]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a5c      	ldr	r2, [pc, #368]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 800187c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff faaf 	bl	8000de4 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188a:	f7ff faab 	bl	8000de4 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e1f9      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800189c:	4b53      	ldr	r3, [pc, #332]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f0      	bne.n	800188a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d03c      	beq.n	800192e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d01c      	beq.n	80018f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018bc:	4b4b      	ldr	r3, [pc, #300]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 80018be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018c2:	4a4a      	ldr	r2, [pc, #296]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018cc:	f7ff fa8a 	bl	8000de4 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d4:	f7ff fa86 	bl	8000de4 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e1d4      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018e6:	4b41      	ldr	r3, [pc, #260]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 80018e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0ef      	beq.n	80018d4 <HAL_RCC_OscConfig+0x3ec>
 80018f4:	e01b      	b.n	800192e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f6:	4b3d      	ldr	r3, [pc, #244]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 80018f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fc:	4a3b      	ldr	r2, [pc, #236]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 80018fe:	f023 0301 	bic.w	r3, r3, #1
 8001902:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001906:	f7ff fa6d 	bl	8000de4 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190e:	f7ff fa69 	bl	8000de4 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e1b7      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001920:	4b32      	ldr	r3, [pc, #200]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 8001922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1ef      	bne.n	800190e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 80a6 	beq.w	8001a88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001940:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 8001942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10d      	bne.n	8001968 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800194c:	4b27      	ldr	r3, [pc, #156]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001950:	4a26      	ldr	r2, [pc, #152]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 8001952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001956:	6593      	str	r3, [r2, #88]	; 0x58
 8001958:	4b24      	ldr	r3, [pc, #144]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001964:	2301      	movs	r3, #1
 8001966:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001968:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <HAL_RCC_OscConfig+0x508>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001970:	2b00      	cmp	r3, #0
 8001972:	d118      	bne.n	80019a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001974:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <HAL_RCC_OscConfig+0x508>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a1d      	ldr	r2, [pc, #116]	; (80019f0 <HAL_RCC_OscConfig+0x508>)
 800197a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001980:	f7ff fa30 	bl	8000de4 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001988:	f7ff fa2c 	bl	8000de4 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e17a      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <HAL_RCC_OscConfig+0x508>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d108      	bne.n	80019c0 <HAL_RCC_OscConfig+0x4d8>
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 80019b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b4:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019be:	e029      	b.n	8001a14 <HAL_RCC_OscConfig+0x52c>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b05      	cmp	r3, #5
 80019c6:	d115      	bne.n	80019f4 <HAL_RCC_OscConfig+0x50c>
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 80019ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ce:	4a07      	ldr	r2, [pc, #28]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 80019da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019de:	4a03      	ldr	r2, [pc, #12]	; (80019ec <HAL_RCC_OscConfig+0x504>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019e8:	e014      	b.n	8001a14 <HAL_RCC_OscConfig+0x52c>
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40007000 	.word	0x40007000
 80019f4:	4b9c      	ldr	r3, [pc, #624]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 80019f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fa:	4a9b      	ldr	r2, [pc, #620]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a04:	4b98      	ldr	r3, [pc, #608]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0a:	4a97      	ldr	r2, [pc, #604]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001a0c:	f023 0304 	bic.w	r3, r3, #4
 8001a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d016      	beq.n	8001a4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1c:	f7ff f9e2 	bl	8000de4 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a24:	f7ff f9de 	bl	8000de4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e12a      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a3a:	4b8b      	ldr	r3, [pc, #556]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0ed      	beq.n	8001a24 <HAL_RCC_OscConfig+0x53c>
 8001a48:	e015      	b.n	8001a76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4a:	f7ff f9cb 	bl	8000de4 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a52:	f7ff f9c7 	bl	8000de4 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e113      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a68:	4b7f      	ldr	r3, [pc, #508]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1ed      	bne.n	8001a52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a76:	7ffb      	ldrb	r3, [r7, #31]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d105      	bne.n	8001a88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7c:	4b7a      	ldr	r3, [pc, #488]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a80:	4a79      	ldr	r2, [pc, #484]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a86:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80fe 	beq.w	8001c8e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	f040 80d0 	bne.w	8001c3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a9c:	4b72      	ldr	r3, [pc, #456]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f003 0203 	and.w	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d130      	bne.n	8001b12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	3b01      	subs	r3, #1
 8001abc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d127      	bne.n	8001b12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001acc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d11f      	bne.n	8001b12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001adc:	2a07      	cmp	r2, #7
 8001ade:	bf14      	ite	ne
 8001ae0:	2201      	movne	r2, #1
 8001ae2:	2200      	moveq	r2, #0
 8001ae4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d113      	bne.n	8001b12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af4:	085b      	lsrs	r3, r3, #1
 8001af6:	3b01      	subs	r3, #1
 8001af8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d109      	bne.n	8001b12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	085b      	lsrs	r3, r3, #1
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d06e      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	2b0c      	cmp	r3, #12
 8001b16:	d069      	beq.n	8001bec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b18:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d105      	bne.n	8001b30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b24:	4b50      	ldr	r3, [pc, #320]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0ad      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b34:	4b4c      	ldr	r3, [pc, #304]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a4b      	ldr	r2, [pc, #300]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b40:	f7ff f950 	bl	8000de4 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff f94c 	bl	8000de4 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e09a      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b5a:	4b43      	ldr	r3, [pc, #268]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b66:	4b40      	ldr	r3, [pc, #256]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	4b40      	ldr	r3, [pc, #256]	; (8001c6c <HAL_RCC_OscConfig+0x784>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b76:	3a01      	subs	r2, #1
 8001b78:	0112      	lsls	r2, r2, #4
 8001b7a:	4311      	orrs	r1, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b80:	0212      	lsls	r2, r2, #8
 8001b82:	4311      	orrs	r1, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b88:	0852      	lsrs	r2, r2, #1
 8001b8a:	3a01      	subs	r2, #1
 8001b8c:	0552      	lsls	r2, r2, #21
 8001b8e:	4311      	orrs	r1, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b94:	0852      	lsrs	r2, r2, #1
 8001b96:	3a01      	subs	r2, #1
 8001b98:	0652      	lsls	r2, r2, #25
 8001b9a:	4311      	orrs	r1, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ba0:	0912      	lsrs	r2, r2, #4
 8001ba2:	0452      	lsls	r2, r2, #17
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	4930      	ldr	r1, [pc, #192]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bac:	4b2e      	ldr	r3, [pc, #184]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a2d      	ldr	r2, [pc, #180]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	4a2a      	ldr	r2, [pc, #168]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bc4:	f7ff f90e 	bl	8000de4 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7ff f90a 	bl	8000de4 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e058      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bde:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bea:	e050      	b.n	8001c8e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e04f      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d148      	bne.n	8001c8e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a19      	ldr	r2, [pc, #100]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c08:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4a16      	ldr	r2, [pc, #88]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c14:	f7ff f8e6 	bl	8000de4 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f8e2 	bl	8000de4 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e030      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x734>
 8001c3a:	e028      	b.n	8001c8e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	2b0c      	cmp	r3, #12
 8001c40:	d023      	beq.n	8001c8a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001c48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4e:	f7ff f8c9 	bl	8000de4 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c54:	e00c      	b.n	8001c70 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c56:	f7ff f8c5 	bl	8000de4 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d905      	bls.n	8001c70 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e013      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_RCC_OscConfig+0x7b0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1ec      	bne.n	8001c56 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_RCC_OscConfig+0x7b0>)
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	4905      	ldr	r1, [pc, #20]	; (8001c98 <HAL_RCC_OscConfig+0x7b0>)
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_RCC_OscConfig+0x7b4>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	60cb      	str	r3, [r1, #12]
 8001c88:	e001      	b.n	8001c8e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3720      	adds	r7, #32
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	feeefffc 	.word	0xfeeefffc

08001ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0e7      	b.n	8001e84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b75      	ldr	r3, [pc, #468]	; (8001e8c <HAL_RCC_ClockConfig+0x1ec>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d910      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b72      	ldr	r3, [pc, #456]	; (8001e8c <HAL_RCC_ClockConfig+0x1ec>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 0207 	bic.w	r2, r3, #7
 8001cca:	4970      	ldr	r1, [pc, #448]	; (8001e8c <HAL_RCC_ClockConfig+0x1ec>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b6e      	ldr	r3, [pc, #440]	; (8001e8c <HAL_RCC_ClockConfig+0x1ec>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0cf      	b.n	8001e84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d010      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	4b66      	ldr	r3, [pc, #408]	; (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d908      	bls.n	8001d12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d00:	4b63      	ldr	r3, [pc, #396]	; (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4960      	ldr	r1, [pc, #384]	; (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d04c      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d107      	bne.n	8001d36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d26:	4b5a      	ldr	r3, [pc, #360]	; (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d121      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e0a6      	b.n	8001e84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d107      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d3e:	4b54      	ldr	r3, [pc, #336]	; (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d115      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e09a      	b.n	8001e84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d56:	4b4e      	ldr	r3, [pc, #312]	; (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d109      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e08e      	b.n	8001e84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d66:	4b4a      	ldr	r3, [pc, #296]	; (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e086      	b.n	8001e84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d76:	4b46      	ldr	r3, [pc, #280]	; (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f023 0203 	bic.w	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4943      	ldr	r1, [pc, #268]	; (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d88:	f7ff f82c 	bl	8000de4 <HAL_GetTick>
 8001d8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d90:	f7ff f828 	bl	8000de4 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e06e      	b.n	8001e84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da6:	4b3a      	ldr	r3, [pc, #232]	; (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 020c 	and.w	r2, r3, #12
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d1eb      	bne.n	8001d90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d010      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d208      	bcs.n	8001de6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd4:	4b2e      	ldr	r3, [pc, #184]	; (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	492b      	ldr	r1, [pc, #172]	; (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001de6:	4b29      	ldr	r3, [pc, #164]	; (8001e8c <HAL_RCC_ClockConfig+0x1ec>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d210      	bcs.n	8001e16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <HAL_RCC_ClockConfig+0x1ec>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f023 0207 	bic.w	r2, r3, #7
 8001dfc:	4923      	ldr	r1, [pc, #140]	; (8001e8c <HAL_RCC_ClockConfig+0x1ec>)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e04:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <HAL_RCC_ClockConfig+0x1ec>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d001      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e036      	b.n	8001e84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d008      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e22:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	4918      	ldr	r1, [pc, #96]	; (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d009      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e40:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4910      	ldr	r1, [pc, #64]	; (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e54:	f000 f824 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	091b      	lsrs	r3, r3, #4
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	490b      	ldr	r1, [pc, #44]	; (8001e94 <HAL_RCC_ClockConfig+0x1f4>)
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e70:	4a09      	ldr	r2, [pc, #36]	; (8001e98 <HAL_RCC_ClockConfig+0x1f8>)
 8001e72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_RCC_ClockConfig+0x1fc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe ff63 	bl	8000d44 <HAL_InitTick>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e82:	7afb      	ldrb	r3, [r7, #11]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40022000 	.word	0x40022000
 8001e90:	40021000 	.word	0x40021000
 8001e94:	0800524c 	.word	0x0800524c
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	20000004 	.word	0x20000004

08001ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eae:	4b3e      	ldr	r3, [pc, #248]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eb8:	4b3b      	ldr	r3, [pc, #236]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	2b0c      	cmp	r3, #12
 8001ecc:	d121      	bne.n	8001f12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d11e      	bne.n	8001f12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ed4:	4b34      	ldr	r3, [pc, #208]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ee0:	4b31      	ldr	r3, [pc, #196]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee6:	0a1b      	lsrs	r3, r3, #8
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	e005      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ef0:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001efc:	4a2b      	ldr	r2, [pc, #172]	; (8001fac <HAL_RCC_GetSysClockFreq+0x10c>)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10d      	bne.n	8001f28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f10:	e00a      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d102      	bne.n	8001f1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f18:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	e004      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f24:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	2b0c      	cmp	r3, #12
 8001f2c:	d134      	bne.n	8001f98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d003      	beq.n	8001f46 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d003      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0xac>
 8001f44:	e005      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f46:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f48:	617b      	str	r3, [r7, #20]
      break;
 8001f4a:	e005      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f4c:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f4e:	617b      	str	r3, [r7, #20]
      break;
 8001f50:	e002      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	617b      	str	r3, [r7, #20]
      break;
 8001f56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	3301      	adds	r3, #1
 8001f64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	0a1b      	lsrs	r3, r3, #8
 8001f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	fb03 f202 	mul.w	r2, r3, r2
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	0e5b      	lsrs	r3, r3, #25
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	3301      	adds	r3, #1
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f98:	69bb      	ldr	r3, [r7, #24]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3724      	adds	r7, #36	; 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	08005264 	.word	0x08005264
 8001fb0:	00f42400 	.word	0x00f42400
 8001fb4:	007a1200 	.word	0x007a1200

08001fb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000000 	.word	0x20000000

08001fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fd4:	f7ff fff0 	bl	8001fb8 <HAL_RCC_GetHCLKFreq>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	4904      	ldr	r1, [pc, #16]	; (8001ff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fe6:	5ccb      	ldrb	r3, [r1, r3]
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	0800525c 	.word	0x0800525c

08001ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002000:	f7ff ffda 	bl	8001fb8 <HAL_RCC_GetHCLKFreq>
 8002004:	4602      	mov	r2, r0
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	0adb      	lsrs	r3, r3, #11
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	4904      	ldr	r1, [pc, #16]	; (8002024 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002012:	5ccb      	ldrb	r3, [r1, r3]
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800201c:	4618      	mov	r0, r3
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	0800525c 	.word	0x0800525c

08002028 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002030:	2300      	movs	r3, #0
 8002032:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002034:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002040:	f7ff f9ee 	bl	8001420 <HAL_PWREx_GetVoltageRange>
 8002044:	6178      	str	r0, [r7, #20]
 8002046:	e014      	b.n	8002072 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002048:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	4a24      	ldr	r2, [pc, #144]	; (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800204e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002052:	6593      	str	r3, [r2, #88]	; 0x58
 8002054:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002060:	f7ff f9de 	bl	8001420 <HAL_PWREx_GetVoltageRange>
 8002064:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002066:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	4a1d      	ldr	r2, [pc, #116]	; (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800206c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002070:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002078:	d10b      	bne.n	8002092 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b80      	cmp	r3, #128	; 0x80
 800207e:	d919      	bls.n	80020b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2ba0      	cmp	r3, #160	; 0xa0
 8002084:	d902      	bls.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002086:	2302      	movs	r3, #2
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	e013      	b.n	80020b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800208c:	2301      	movs	r3, #1
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	e010      	b.n	80020b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b80      	cmp	r3, #128	; 0x80
 8002096:	d902      	bls.n	800209e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002098:	2303      	movs	r3, #3
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	e00a      	b.n	80020b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b80      	cmp	r3, #128	; 0x80
 80020a2:	d102      	bne.n	80020aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020a4:	2302      	movs	r3, #2
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	e004      	b.n	80020b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b70      	cmp	r3, #112	; 0x70
 80020ae:	d101      	bne.n	80020b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020b0:	2301      	movs	r3, #1
 80020b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 0207 	bic.w	r2, r3, #7
 80020bc:	4909      	ldr	r1, [pc, #36]	; (80020e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d001      	beq.n	80020d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40022000 	.word	0x40022000

080020e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020f0:	2300      	movs	r3, #0
 80020f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020f4:	2300      	movs	r3, #0
 80020f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002100:	2b00      	cmp	r3, #0
 8002102:	d041      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002108:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800210c:	d02a      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800210e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002112:	d824      	bhi.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002114:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002118:	d008      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800211a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800211e:	d81e      	bhi.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002124:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002128:	d010      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800212a:	e018      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800212c:	4b86      	ldr	r3, [pc, #536]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4a85      	ldr	r2, [pc, #532]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002136:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002138:	e015      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3304      	adds	r3, #4
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f000 fabb 	bl	80026bc <RCCEx_PLLSAI1_Config>
 8002146:	4603      	mov	r3, r0
 8002148:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800214a:	e00c      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3320      	adds	r3, #32
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fba6 	bl	80028a4 <RCCEx_PLLSAI2_Config>
 8002158:	4603      	mov	r3, r0
 800215a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800215c:	e003      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	74fb      	strb	r3, [r7, #19]
      break;
 8002162:	e000      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002166:	7cfb      	ldrb	r3, [r7, #19]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10b      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800216c:	4b76      	ldr	r3, [pc, #472]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002172:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800217a:	4973      	ldr	r1, [pc, #460]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002182:	e001      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d041      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002198:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800219c:	d02a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800219e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021a2:	d824      	bhi.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021a8:	d008      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021ae:	d81e      	bhi.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00a      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80021b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021b8:	d010      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021ba:	e018      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021bc:	4b62      	ldr	r3, [pc, #392]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4a61      	ldr	r2, [pc, #388]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021c8:	e015      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3304      	adds	r3, #4
 80021ce:	2100      	movs	r1, #0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 fa73 	bl	80026bc <RCCEx_PLLSAI1_Config>
 80021d6:	4603      	mov	r3, r0
 80021d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021da:	e00c      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3320      	adds	r3, #32
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 fb5e 	bl	80028a4 <RCCEx_PLLSAI2_Config>
 80021e8:	4603      	mov	r3, r0
 80021ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021ec:	e003      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	74fb      	strb	r3, [r7, #19]
      break;
 80021f2:	e000      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80021f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021f6:	7cfb      	ldrb	r3, [r7, #19]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10b      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021fc:	4b52      	ldr	r3, [pc, #328]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002202:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800220a:	494f      	ldr	r1, [pc, #316]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002212:	e001      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002214:	7cfb      	ldrb	r3, [r7, #19]
 8002216:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80a0 	beq.w	8002366 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002226:	2300      	movs	r3, #0
 8002228:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800223a:	2300      	movs	r3, #0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00d      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002240:	4b41      	ldr	r3, [pc, #260]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	4a40      	ldr	r2, [pc, #256]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224a:	6593      	str	r3, [r2, #88]	; 0x58
 800224c:	4b3e      	ldr	r3, [pc, #248]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002258:	2301      	movs	r3, #1
 800225a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800225c:	4b3b      	ldr	r3, [pc, #236]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a3a      	ldr	r2, [pc, #232]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002266:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002268:	f7fe fdbc 	bl	8000de4 <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800226e:	e009      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002270:	f7fe fdb8 	bl	8000de4 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d902      	bls.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	74fb      	strb	r3, [r7, #19]
        break;
 8002282:	e005      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002284:	4b31      	ldr	r3, [pc, #196]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0ef      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d15c      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002296:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d01f      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d019      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022b4:	4b24      	ldr	r3, [pc, #144]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022c0:	4b21      	ldr	r3, [pc, #132]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c6:	4a20      	ldr	r2, [pc, #128]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022d0:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d6:	4a1c      	ldr	r2, [pc, #112]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022e0:	4a19      	ldr	r2, [pc, #100]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d016      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f2:	f7fe fd77 	bl	8000de4 <HAL_GetTick>
 80022f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022f8:	e00b      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7fe fd73 	bl	8000de4 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	; 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d902      	bls.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	74fb      	strb	r3, [r7, #19]
            break;
 8002310:	e006      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002312:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0ec      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10c      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002336:	4904      	ldr	r1, [pc, #16]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800233e:	e009      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002340:	7cfb      	ldrb	r3, [r7, #19]
 8002342:	74bb      	strb	r3, [r7, #18]
 8002344:	e006      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000
 800234c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002354:	7c7b      	ldrb	r3, [r7, #17]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d105      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800235a:	4b9e      	ldr	r3, [pc, #632]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	4a9d      	ldr	r2, [pc, #628]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002364:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00a      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002372:	4b98      	ldr	r3, [pc, #608]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002378:	f023 0203 	bic.w	r2, r3, #3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002380:	4994      	ldr	r1, [pc, #592]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00a      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002394:	4b8f      	ldr	r3, [pc, #572]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239a:	f023 020c 	bic.w	r2, r3, #12
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a2:	498c      	ldr	r1, [pc, #560]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023b6:	4b87      	ldr	r3, [pc, #540]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	4983      	ldr	r1, [pc, #524]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023d8:	4b7e      	ldr	r3, [pc, #504]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	497b      	ldr	r1, [pc, #492]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023fa:	4b76      	ldr	r3, [pc, #472]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002408:	4972      	ldr	r1, [pc, #456]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0320 	and.w	r3, r3, #32
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800241c:	4b6d      	ldr	r3, [pc, #436]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002422:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	496a      	ldr	r1, [pc, #424]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800243e:	4b65      	ldr	r3, [pc, #404]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002444:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244c:	4961      	ldr	r1, [pc, #388]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00a      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002460:	4b5c      	ldr	r3, [pc, #368]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246e:	4959      	ldr	r1, [pc, #356]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002482:	4b54      	ldr	r3, [pc, #336]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002488:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002490:	4950      	ldr	r1, [pc, #320]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00a      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024a4:	4b4b      	ldr	r3, [pc, #300]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b2:	4948      	ldr	r1, [pc, #288]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024c6:	4b43      	ldr	r3, [pc, #268]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d4:	493f      	ldr	r1, [pc, #252]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d028      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024e8:	4b3a      	ldr	r3, [pc, #232]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f6:	4937      	ldr	r1, [pc, #220]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002502:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002506:	d106      	bne.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002508:	4b32      	ldr	r3, [pc, #200]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4a31      	ldr	r2, [pc, #196]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002512:	60d3      	str	r3, [r2, #12]
 8002514:	e011      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800251a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800251e:	d10c      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3304      	adds	r3, #4
 8002524:	2101      	movs	r1, #1
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f8c8 	bl	80026bc <RCCEx_PLLSAI1_Config>
 800252c:	4603      	mov	r3, r0
 800252e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002530:	7cfb      	ldrb	r3, [r7, #19]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002536:	7cfb      	ldrb	r3, [r7, #19]
 8002538:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d028      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002546:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	491f      	ldr	r1, [pc, #124]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002564:	d106      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002566:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	4a1a      	ldr	r2, [pc, #104]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002570:	60d3      	str	r3, [r2, #12]
 8002572:	e011      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002578:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800257c:	d10c      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3304      	adds	r3, #4
 8002582:	2101      	movs	r1, #1
 8002584:	4618      	mov	r0, r3
 8002586:	f000 f899 	bl	80026bc <RCCEx_PLLSAI1_Config>
 800258a:	4603      	mov	r3, r0
 800258c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800258e:	7cfb      	ldrb	r3, [r7, #19]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d02b      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b2:	4908      	ldr	r1, [pc, #32]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025c2:	d109      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025c4:	4b03      	ldr	r3, [pc, #12]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4a02      	ldr	r2, [pc, #8]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ce:	60d3      	str	r3, [r2, #12]
 80025d0:	e014      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025e0:	d10c      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3304      	adds	r3, #4
 80025e6:	2101      	movs	r1, #1
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 f867 	bl	80026bc <RCCEx_PLLSAI1_Config>
 80025ee:	4603      	mov	r3, r0
 80025f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025f2:	7cfb      	ldrb	r3, [r7, #19]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d02f      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002608:	4b2b      	ldr	r3, [pc, #172]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002616:	4928      	ldr	r1, [pc, #160]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002626:	d10d      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3304      	adds	r3, #4
 800262c:	2102      	movs	r1, #2
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f844 	bl	80026bc <RCCEx_PLLSAI1_Config>
 8002634:	4603      	mov	r3, r0
 8002636:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002638:	7cfb      	ldrb	r3, [r7, #19]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d014      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800263e:	7cfb      	ldrb	r3, [r7, #19]
 8002640:	74bb      	strb	r3, [r7, #18]
 8002642:	e011      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800264c:	d10c      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3320      	adds	r3, #32
 8002652:	2102      	movs	r1, #2
 8002654:	4618      	mov	r0, r3
 8002656:	f000 f925 	bl	80028a4 <RCCEx_PLLSAI2_Config>
 800265a:	4603      	mov	r3, r0
 800265c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800265e:	7cfb      	ldrb	r3, [r7, #19]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002664:	7cfb      	ldrb	r3, [r7, #19]
 8002666:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002674:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002682:	490d      	ldr	r1, [pc, #52]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00b      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002696:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026a6:	4904      	ldr	r1, [pc, #16]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000

080026bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026ca:	4b75      	ldr	r3, [pc, #468]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d018      	beq.n	8002708 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026d6:	4b72      	ldr	r3, [pc, #456]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0203 	and.w	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d10d      	bne.n	8002702 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
       ||
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026ee:	4b6c      	ldr	r3, [pc, #432]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	091b      	lsrs	r3, r3, #4
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
       ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d047      	beq.n	8002792 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
 8002706:	e044      	b.n	8002792 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b03      	cmp	r3, #3
 800270e:	d018      	beq.n	8002742 <RCCEx_PLLSAI1_Config+0x86>
 8002710:	2b03      	cmp	r3, #3
 8002712:	d825      	bhi.n	8002760 <RCCEx_PLLSAI1_Config+0xa4>
 8002714:	2b01      	cmp	r3, #1
 8002716:	d002      	beq.n	800271e <RCCEx_PLLSAI1_Config+0x62>
 8002718:	2b02      	cmp	r3, #2
 800271a:	d009      	beq.n	8002730 <RCCEx_PLLSAI1_Config+0x74>
 800271c:	e020      	b.n	8002760 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800271e:	4b60      	ldr	r3, [pc, #384]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d11d      	bne.n	8002766 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800272e:	e01a      	b.n	8002766 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002730:	4b5b      	ldr	r3, [pc, #364]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002738:	2b00      	cmp	r3, #0
 800273a:	d116      	bne.n	800276a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002740:	e013      	b.n	800276a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002742:	4b57      	ldr	r3, [pc, #348]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10f      	bne.n	800276e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800274e:	4b54      	ldr	r3, [pc, #336]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800275e:	e006      	b.n	800276e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
      break;
 8002764:	e004      	b.n	8002770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002766:	bf00      	nop
 8002768:	e002      	b.n	8002770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800276a:	bf00      	nop
 800276c:	e000      	b.n	8002770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800276e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10d      	bne.n	8002792 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002776:	4b4a      	ldr	r3, [pc, #296]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6819      	ldr	r1, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	430b      	orrs	r3, r1
 800278c:	4944      	ldr	r1, [pc, #272]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d17d      	bne.n	8002894 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002798:	4b41      	ldr	r3, [pc, #260]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a40      	ldr	r2, [pc, #256]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800279e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a4:	f7fe fb1e 	bl	8000de4 <HAL_GetTick>
 80027a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027aa:	e009      	b.n	80027c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027ac:	f7fe fb1a 	bl	8000de4 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d902      	bls.n	80027c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	73fb      	strb	r3, [r7, #15]
        break;
 80027be:	e005      	b.n	80027cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027c0:	4b37      	ldr	r3, [pc, #220]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1ef      	bne.n	80027ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d160      	bne.n	8002894 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d111      	bne.n	80027fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027d8:	4b31      	ldr	r3, [pc, #196]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6892      	ldr	r2, [r2, #8]
 80027e8:	0211      	lsls	r1, r2, #8
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68d2      	ldr	r2, [r2, #12]
 80027ee:	0912      	lsrs	r2, r2, #4
 80027f0:	0452      	lsls	r2, r2, #17
 80027f2:	430a      	orrs	r2, r1
 80027f4:	492a      	ldr	r1, [pc, #168]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	610b      	str	r3, [r1, #16]
 80027fa:	e027      	b.n	800284c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d112      	bne.n	8002828 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002802:	4b27      	ldr	r3, [pc, #156]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800280a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6892      	ldr	r2, [r2, #8]
 8002812:	0211      	lsls	r1, r2, #8
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6912      	ldr	r2, [r2, #16]
 8002818:	0852      	lsrs	r2, r2, #1
 800281a:	3a01      	subs	r2, #1
 800281c:	0552      	lsls	r2, r2, #21
 800281e:	430a      	orrs	r2, r1
 8002820:	491f      	ldr	r1, [pc, #124]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002822:	4313      	orrs	r3, r2
 8002824:	610b      	str	r3, [r1, #16]
 8002826:	e011      	b.n	800284c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002828:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002830:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6892      	ldr	r2, [r2, #8]
 8002838:	0211      	lsls	r1, r2, #8
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6952      	ldr	r2, [r2, #20]
 800283e:	0852      	lsrs	r2, r2, #1
 8002840:	3a01      	subs	r2, #1
 8002842:	0652      	lsls	r2, r2, #25
 8002844:	430a      	orrs	r2, r1
 8002846:	4916      	ldr	r1, [pc, #88]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002848:	4313      	orrs	r3, r2
 800284a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800284c:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a13      	ldr	r2, [pc, #76]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002852:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002856:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002858:	f7fe fac4 	bl	8000de4 <HAL_GetTick>
 800285c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800285e:	e009      	b.n	8002874 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002860:	f7fe fac0 	bl	8000de4 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d902      	bls.n	8002874 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	73fb      	strb	r3, [r7, #15]
          break;
 8002872:	e005      	b.n	8002880 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002874:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ef      	beq.n	8002860 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002888:	691a      	ldr	r2, [r3, #16]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	4904      	ldr	r1, [pc, #16]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002890:	4313      	orrs	r3, r2
 8002892:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002894:	7bfb      	ldrb	r3, [r7, #15]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40021000 	.word	0x40021000

080028a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028b2:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d018      	beq.n	80028f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028be:	4b67      	ldr	r3, [pc, #412]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 0203 	and.w	r2, r3, #3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d10d      	bne.n	80028ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
       ||
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80028d6:	4b61      	ldr	r3, [pc, #388]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
       ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d047      	beq.n	800297a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
 80028ee:	e044      	b.n	800297a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d018      	beq.n	800292a <RCCEx_PLLSAI2_Config+0x86>
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d825      	bhi.n	8002948 <RCCEx_PLLSAI2_Config+0xa4>
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d002      	beq.n	8002906 <RCCEx_PLLSAI2_Config+0x62>
 8002900:	2b02      	cmp	r3, #2
 8002902:	d009      	beq.n	8002918 <RCCEx_PLLSAI2_Config+0x74>
 8002904:	e020      	b.n	8002948 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002906:	4b55      	ldr	r3, [pc, #340]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d11d      	bne.n	800294e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002916:	e01a      	b.n	800294e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002918:	4b50      	ldr	r3, [pc, #320]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002920:	2b00      	cmp	r3, #0
 8002922:	d116      	bne.n	8002952 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002928:	e013      	b.n	8002952 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800292a:	4b4c      	ldr	r3, [pc, #304]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10f      	bne.n	8002956 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002936:	4b49      	ldr	r3, [pc, #292]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d109      	bne.n	8002956 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002946:	e006      	b.n	8002956 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
      break;
 800294c:	e004      	b.n	8002958 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800294e:	bf00      	nop
 8002950:	e002      	b.n	8002958 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002952:	bf00      	nop
 8002954:	e000      	b.n	8002958 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002956:	bf00      	nop
    }

    if(status == HAL_OK)
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10d      	bne.n	800297a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800295e:	4b3f      	ldr	r3, [pc, #252]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6819      	ldr	r1, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	430b      	orrs	r3, r1
 8002974:	4939      	ldr	r1, [pc, #228]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002976:	4313      	orrs	r3, r2
 8002978:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d167      	bne.n	8002a50 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002980:	4b36      	ldr	r3, [pc, #216]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a35      	ldr	r2, [pc, #212]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800298a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800298c:	f7fe fa2a 	bl	8000de4 <HAL_GetTick>
 8002990:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002992:	e009      	b.n	80029a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002994:	f7fe fa26 	bl	8000de4 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d902      	bls.n	80029a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	73fb      	strb	r3, [r7, #15]
        break;
 80029a6:	e005      	b.n	80029b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029a8:	4b2c      	ldr	r3, [pc, #176]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1ef      	bne.n	8002994 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d14a      	bne.n	8002a50 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d111      	bne.n	80029e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029c0:	4b26      	ldr	r3, [pc, #152]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6892      	ldr	r2, [r2, #8]
 80029d0:	0211      	lsls	r1, r2, #8
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68d2      	ldr	r2, [r2, #12]
 80029d6:	0912      	lsrs	r2, r2, #4
 80029d8:	0452      	lsls	r2, r2, #17
 80029da:	430a      	orrs	r2, r1
 80029dc:	491f      	ldr	r1, [pc, #124]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	614b      	str	r3, [r1, #20]
 80029e2:	e011      	b.n	8002a08 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029e4:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6892      	ldr	r2, [r2, #8]
 80029f4:	0211      	lsls	r1, r2, #8
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6912      	ldr	r2, [r2, #16]
 80029fa:	0852      	lsrs	r2, r2, #1
 80029fc:	3a01      	subs	r2, #1
 80029fe:	0652      	lsls	r2, r2, #25
 8002a00:	430a      	orrs	r2, r1
 8002a02:	4916      	ldr	r1, [pc, #88]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a13      	ldr	r2, [pc, #76]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a14:	f7fe f9e6 	bl	8000de4 <HAL_GetTick>
 8002a18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a1a:	e009      	b.n	8002a30 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a1c:	f7fe f9e2 	bl	8000de4 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d902      	bls.n	8002a30 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a2e:	e005      	b.n	8002a3c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a30:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0ef      	beq.n	8002a1c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a44:	695a      	ldr	r2, [r3, #20]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	4904      	ldr	r1, [pc, #16]	; (8002a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000

08002a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e049      	b.n	8002b06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fd ffba 	bl	8000a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	f000 fa1c 	bl	8002edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d001      	beq.n	8002b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e04f      	b.n	8002bc8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a23      	ldr	r2, [pc, #140]	; (8002bd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01d      	beq.n	8002b86 <HAL_TIM_Base_Start_IT+0x76>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b52:	d018      	beq.n	8002b86 <HAL_TIM_Base_Start_IT+0x76>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a1f      	ldr	r2, [pc, #124]	; (8002bd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <HAL_TIM_Base_Start_IT+0x76>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1e      	ldr	r2, [pc, #120]	; (8002bdc <HAL_TIM_Base_Start_IT+0xcc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00e      	beq.n	8002b86 <HAL_TIM_Base_Start_IT+0x76>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1c      	ldr	r2, [pc, #112]	; (8002be0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d009      	beq.n	8002b86 <HAL_TIM_Base_Start_IT+0x76>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a1b      	ldr	r2, [pc, #108]	; (8002be4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d004      	beq.n	8002b86 <HAL_TIM_Base_Start_IT+0x76>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a19      	ldr	r2, [pc, #100]	; (8002be8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d115      	bne.n	8002bb2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	4b17      	ldr	r3, [pc, #92]	; (8002bec <HAL_TIM_Base_Start_IT+0xdc>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b06      	cmp	r3, #6
 8002b96:	d015      	beq.n	8002bc4 <HAL_TIM_Base_Start_IT+0xb4>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9e:	d011      	beq.n	8002bc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb0:	e008      	b.n	8002bc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f042 0201 	orr.w	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	e000      	b.n	8002bc6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40012c00 	.word	0x40012c00
 8002bd8:	40000400 	.word	0x40000400
 8002bdc:	40000800 	.word	0x40000800
 8002be0:	40000c00 	.word	0x40000c00
 8002be4:	40013400 	.word	0x40013400
 8002be8:	40014000 	.word	0x40014000
 8002bec:	00010007 	.word	0x00010007

08002bf0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0201 	bic.w	r2, r2, #1
 8002c06:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6a1a      	ldr	r2, [r3, #32]
 8002c0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10f      	bne.n	8002c38 <HAL_TIM_Base_Stop_IT+0x48>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6a1a      	ldr	r2, [r3, #32]
 8002c1e:	f240 4344 	movw	r3, #1092	; 0x444
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d107      	bne.n	8002c38 <HAL_TIM_Base_Stop_IT+0x48>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d122      	bne.n	8002caa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d11b      	bne.n	8002caa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f06f 0202 	mvn.w	r2, #2
 8002c7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f905 	bl	8002ea0 <HAL_TIM_IC_CaptureCallback>
 8002c96:	e005      	b.n	8002ca4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f8f7 	bl	8002e8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f908 	bl	8002eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d122      	bne.n	8002cfe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d11b      	bne.n	8002cfe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f06f 0204 	mvn.w	r2, #4
 8002cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f8db 	bl	8002ea0 <HAL_TIM_IC_CaptureCallback>
 8002cea:	e005      	b.n	8002cf8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f8cd 	bl	8002e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f8de 	bl	8002eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d122      	bne.n	8002d52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d11b      	bne.n	8002d52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f06f 0208 	mvn.w	r2, #8
 8002d22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2204      	movs	r2, #4
 8002d28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f8b1 	bl	8002ea0 <HAL_TIM_IC_CaptureCallback>
 8002d3e:	e005      	b.n	8002d4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f8a3 	bl	8002e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f8b4 	bl	8002eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b10      	cmp	r3, #16
 8002d5e:	d122      	bne.n	8002da6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	2b10      	cmp	r3, #16
 8002d6c:	d11b      	bne.n	8002da6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f06f 0210 	mvn.w	r2, #16
 8002d76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2208      	movs	r2, #8
 8002d7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f887 	bl	8002ea0 <HAL_TIM_IC_CaptureCallback>
 8002d92:	e005      	b.n	8002da0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f879 	bl	8002e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f88a 	bl	8002eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d10e      	bne.n	8002dd2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d107      	bne.n	8002dd2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f06f 0201 	mvn.w	r2, #1
 8002dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7fd fca1 	bl	8000714 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ddc:	2b80      	cmp	r3, #128	; 0x80
 8002dde:	d10e      	bne.n	8002dfe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dea:	2b80      	cmp	r3, #128	; 0x80
 8002dec:	d107      	bne.n	8002dfe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f99b 	bl	8003134 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e0c:	d10e      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e18:	2b80      	cmp	r3, #128	; 0x80
 8002e1a:	d107      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f98e 	bl	8003148 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e36:	2b40      	cmp	r3, #64	; 0x40
 8002e38:	d10e      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e44:	2b40      	cmp	r3, #64	; 0x40
 8002e46:	d107      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f838 	bl	8002ec8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	d10e      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	d107      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0220 	mvn.w	r2, #32
 8002e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f94e 	bl	8003120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a40      	ldr	r2, [pc, #256]	; (8002ff0 <TIM_Base_SetConfig+0x114>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d013      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efa:	d00f      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a3d      	ldr	r2, [pc, #244]	; (8002ff4 <TIM_Base_SetConfig+0x118>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d00b      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a3c      	ldr	r2, [pc, #240]	; (8002ff8 <TIM_Base_SetConfig+0x11c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d007      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a3b      	ldr	r2, [pc, #236]	; (8002ffc <TIM_Base_SetConfig+0x120>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d003      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a3a      	ldr	r2, [pc, #232]	; (8003000 <TIM_Base_SetConfig+0x124>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d108      	bne.n	8002f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a2f      	ldr	r2, [pc, #188]	; (8002ff0 <TIM_Base_SetConfig+0x114>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01f      	beq.n	8002f76 <TIM_Base_SetConfig+0x9a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3c:	d01b      	beq.n	8002f76 <TIM_Base_SetConfig+0x9a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a2c      	ldr	r2, [pc, #176]	; (8002ff4 <TIM_Base_SetConfig+0x118>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d017      	beq.n	8002f76 <TIM_Base_SetConfig+0x9a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a2b      	ldr	r2, [pc, #172]	; (8002ff8 <TIM_Base_SetConfig+0x11c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d013      	beq.n	8002f76 <TIM_Base_SetConfig+0x9a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a2a      	ldr	r2, [pc, #168]	; (8002ffc <TIM_Base_SetConfig+0x120>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00f      	beq.n	8002f76 <TIM_Base_SetConfig+0x9a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a29      	ldr	r2, [pc, #164]	; (8003000 <TIM_Base_SetConfig+0x124>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00b      	beq.n	8002f76 <TIM_Base_SetConfig+0x9a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a28      	ldr	r2, [pc, #160]	; (8003004 <TIM_Base_SetConfig+0x128>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d007      	beq.n	8002f76 <TIM_Base_SetConfig+0x9a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a27      	ldr	r2, [pc, #156]	; (8003008 <TIM_Base_SetConfig+0x12c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d003      	beq.n	8002f76 <TIM_Base_SetConfig+0x9a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a26      	ldr	r2, [pc, #152]	; (800300c <TIM_Base_SetConfig+0x130>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d108      	bne.n	8002f88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a10      	ldr	r2, [pc, #64]	; (8002ff0 <TIM_Base_SetConfig+0x114>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00f      	beq.n	8002fd4 <TIM_Base_SetConfig+0xf8>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a12      	ldr	r2, [pc, #72]	; (8003000 <TIM_Base_SetConfig+0x124>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00b      	beq.n	8002fd4 <TIM_Base_SetConfig+0xf8>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a11      	ldr	r2, [pc, #68]	; (8003004 <TIM_Base_SetConfig+0x128>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d007      	beq.n	8002fd4 <TIM_Base_SetConfig+0xf8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a10      	ldr	r2, [pc, #64]	; (8003008 <TIM_Base_SetConfig+0x12c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d003      	beq.n	8002fd4 <TIM_Base_SetConfig+0xf8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a0f      	ldr	r2, [pc, #60]	; (800300c <TIM_Base_SetConfig+0x130>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d103      	bne.n	8002fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	615a      	str	r2, [r3, #20]
}
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40012c00 	.word	0x40012c00
 8002ff4:	40000400 	.word	0x40000400
 8002ff8:	40000800 	.word	0x40000800
 8002ffc:	40000c00 	.word	0x40000c00
 8003000:	40013400 	.word	0x40013400
 8003004:	40014000 	.word	0x40014000
 8003008:	40014400 	.word	0x40014400
 800300c:	40014800 	.word	0x40014800

08003010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003024:	2302      	movs	r3, #2
 8003026:	e068      	b.n	80030fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a2e      	ldr	r2, [pc, #184]	; (8003108 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d004      	beq.n	800305c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a2d      	ldr	r2, [pc, #180]	; (800310c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d108      	bne.n	800306e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003062:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003074:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1e      	ldr	r2, [pc, #120]	; (8003108 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d01d      	beq.n	80030ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309a:	d018      	beq.n	80030ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a1b      	ldr	r2, [pc, #108]	; (8003110 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d013      	beq.n	80030ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1a      	ldr	r2, [pc, #104]	; (8003114 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00e      	beq.n	80030ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a18      	ldr	r2, [pc, #96]	; (8003118 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d009      	beq.n	80030ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a13      	ldr	r2, [pc, #76]	; (800310c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d004      	beq.n	80030ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a14      	ldr	r2, [pc, #80]	; (800311c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d10c      	bne.n	80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40012c00 	.word	0x40012c00
 800310c:	40013400 	.word	0x40013400
 8003110:	40000400 	.word	0x40000400
 8003114:	40000800 	.word	0x40000800
 8003118:	40000c00 	.word	0x40000c00
 800311c:	40014000 	.word	0x40014000

08003120 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e040      	b.n	80031f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7fd fc64 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2224      	movs	r2, #36	; 0x24
 8003188:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0201 	bic.w	r2, r2, #1
 8003198:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f992 	bl	80034c4 <UART_SetConfig>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e022      	b.n	80031f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fc3e 	bl	8003a34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fcc5 	bl	8003b78 <UART_CheckIdleState>
 80031ee:	4603      	mov	r3, r0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	; 0x28
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800320c:	2b20      	cmp	r3, #32
 800320e:	f040 8082 	bne.w	8003316 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <HAL_UART_Transmit+0x26>
 8003218:	88fb      	ldrh	r3, [r7, #6]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e07a      	b.n	8003318 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_UART_Transmit+0x38>
 800322c:	2302      	movs	r3, #2
 800322e:	e073      	b.n	8003318 <HAL_UART_Transmit+0x120>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2221      	movs	r2, #33	; 0x21
 8003244:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003246:	f7fd fdcd 	bl	8000de4 <HAL_GetTick>
 800324a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	88fa      	ldrh	r2, [r7, #6]
 8003250:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	88fa      	ldrh	r2, [r7, #6]
 8003258:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003264:	d108      	bne.n	8003278 <HAL_UART_Transmit+0x80>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d104      	bne.n	8003278 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	e003      	b.n	8003280 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800327c:	2300      	movs	r3, #0
 800327e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003288:	e02d      	b.n	80032e6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2200      	movs	r2, #0
 8003292:	2180      	movs	r1, #128	; 0x80
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 fcb8 	bl	8003c0a <UART_WaitOnFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e039      	b.n	8003318 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10b      	bne.n	80032c2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	881a      	ldrh	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032b6:	b292      	uxth	r2, r2
 80032b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	3302      	adds	r3, #2
 80032be:	61bb      	str	r3, [r7, #24]
 80032c0:	e008      	b.n	80032d4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	781a      	ldrb	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	b292      	uxth	r2, r2
 80032cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3301      	adds	r3, #1
 80032d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1cb      	bne.n	800328a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2200      	movs	r2, #0
 80032fa:	2140      	movs	r1, #64	; 0x40
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fc84 	bl	8003c0a <UART_WaitOnFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e005      	b.n	8003318 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2220      	movs	r2, #32
 8003310:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	e000      	b.n	8003318 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003316:	2302      	movs	r3, #2
  }
}
 8003318:	4618      	mov	r0, r3
 800331a:	3720      	adds	r7, #32
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08a      	sub	sp, #40	; 0x28
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	4613      	mov	r3, r2
 800332e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003334:	2b20      	cmp	r3, #32
 8003336:	f040 80bf 	bne.w	80034b8 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <HAL_UART_Receive+0x26>
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e0b7      	b.n	80034ba <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_UART_Receive+0x38>
 8003354:	2302      	movs	r3, #2
 8003356:	e0b0      	b.n	80034ba <HAL_UART_Receive+0x19a>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2222      	movs	r2, #34	; 0x22
 800336c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003374:	f7fd fd36 	bl	8000de4 <HAL_GetTick>
 8003378:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	88fa      	ldrh	r2, [r7, #6]
 800337e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	88fa      	ldrh	r2, [r7, #6]
 8003386:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003392:	d10e      	bne.n	80033b2 <HAL_UART_Receive+0x92>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d105      	bne.n	80033a8 <HAL_UART_Receive+0x88>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80033a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033a6:	e02d      	b.n	8003404 <HAL_UART_Receive+0xe4>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	22ff      	movs	r2, #255	; 0xff
 80033ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033b0:	e028      	b.n	8003404 <HAL_UART_Receive+0xe4>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10d      	bne.n	80033d6 <HAL_UART_Receive+0xb6>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d104      	bne.n	80033cc <HAL_UART_Receive+0xac>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	22ff      	movs	r2, #255	; 0xff
 80033c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033ca:	e01b      	b.n	8003404 <HAL_UART_Receive+0xe4>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	227f      	movs	r2, #127	; 0x7f
 80033d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033d4:	e016      	b.n	8003404 <HAL_UART_Receive+0xe4>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033de:	d10d      	bne.n	80033fc <HAL_UART_Receive+0xdc>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d104      	bne.n	80033f2 <HAL_UART_Receive+0xd2>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	227f      	movs	r2, #127	; 0x7f
 80033ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033f0:	e008      	b.n	8003404 <HAL_UART_Receive+0xe4>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	223f      	movs	r2, #63	; 0x3f
 80033f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033fa:	e003      	b.n	8003404 <HAL_UART_Receive+0xe4>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800340a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003414:	d108      	bne.n	8003428 <HAL_UART_Receive+0x108>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d104      	bne.n	8003428 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	e003      	b.n	8003430 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800342c:	2300      	movs	r3, #0
 800342e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003438:	e033      	b.n	80034a2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2200      	movs	r2, #0
 8003442:	2120      	movs	r1, #32
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 fbe0 	bl	8003c0a <UART_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e032      	b.n	80034ba <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10c      	bne.n	8003474 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003460:	b29a      	uxth	r2, r3
 8003462:	8a7b      	ldrh	r3, [r7, #18]
 8003464:	4013      	ands	r3, r2
 8003466:	b29a      	uxth	r2, r3
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	3302      	adds	r3, #2
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	e00d      	b.n	8003490 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800347a:	b29b      	uxth	r3, r3
 800347c:	b2da      	uxtb	r2, r3
 800347e:	8a7b      	ldrh	r3, [r7, #18]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	4013      	ands	r3, r2
 8003484:	b2da      	uxtb	r2, r3
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3301      	adds	r3, #1
 800348e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1c5      	bne.n	800343a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2220      	movs	r2, #32
 80034b2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e000      	b.n	80034ba <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80034b8:	2302      	movs	r3, #2
  }
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c8:	b08a      	sub	sp, #40	; 0x28
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	431a      	orrs	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	4ba4      	ldr	r3, [pc, #656]	; (8003784 <UART_SetConfig+0x2c0>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034fc:	430b      	orrs	r3, r1
 80034fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a99      	ldr	r2, [pc, #612]	; (8003788 <UART_SetConfig+0x2c4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d004      	beq.n	8003530 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352c:	4313      	orrs	r3, r2
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003540:	430a      	orrs	r2, r1
 8003542:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a90      	ldr	r2, [pc, #576]	; (800378c <UART_SetConfig+0x2c8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d126      	bne.n	800359c <UART_SetConfig+0xd8>
 800354e:	4b90      	ldr	r3, [pc, #576]	; (8003790 <UART_SetConfig+0x2cc>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b03      	cmp	r3, #3
 800355a:	d81b      	bhi.n	8003594 <UART_SetConfig+0xd0>
 800355c:	a201      	add	r2, pc, #4	; (adr r2, 8003564 <UART_SetConfig+0xa0>)
 800355e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003562:	bf00      	nop
 8003564:	08003575 	.word	0x08003575
 8003568:	08003585 	.word	0x08003585
 800356c:	0800357d 	.word	0x0800357d
 8003570:	0800358d 	.word	0x0800358d
 8003574:	2301      	movs	r3, #1
 8003576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357a:	e116      	b.n	80037aa <UART_SetConfig+0x2e6>
 800357c:	2302      	movs	r3, #2
 800357e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003582:	e112      	b.n	80037aa <UART_SetConfig+0x2e6>
 8003584:	2304      	movs	r3, #4
 8003586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358a:	e10e      	b.n	80037aa <UART_SetConfig+0x2e6>
 800358c:	2308      	movs	r3, #8
 800358e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003592:	e10a      	b.n	80037aa <UART_SetConfig+0x2e6>
 8003594:	2310      	movs	r3, #16
 8003596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800359a:	e106      	b.n	80037aa <UART_SetConfig+0x2e6>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a7c      	ldr	r2, [pc, #496]	; (8003794 <UART_SetConfig+0x2d0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d138      	bne.n	8003618 <UART_SetConfig+0x154>
 80035a6:	4b7a      	ldr	r3, [pc, #488]	; (8003790 <UART_SetConfig+0x2cc>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b0c      	cmp	r3, #12
 80035b2:	d82d      	bhi.n	8003610 <UART_SetConfig+0x14c>
 80035b4:	a201      	add	r2, pc, #4	; (adr r2, 80035bc <UART_SetConfig+0xf8>)
 80035b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ba:	bf00      	nop
 80035bc:	080035f1 	.word	0x080035f1
 80035c0:	08003611 	.word	0x08003611
 80035c4:	08003611 	.word	0x08003611
 80035c8:	08003611 	.word	0x08003611
 80035cc:	08003601 	.word	0x08003601
 80035d0:	08003611 	.word	0x08003611
 80035d4:	08003611 	.word	0x08003611
 80035d8:	08003611 	.word	0x08003611
 80035dc:	080035f9 	.word	0x080035f9
 80035e0:	08003611 	.word	0x08003611
 80035e4:	08003611 	.word	0x08003611
 80035e8:	08003611 	.word	0x08003611
 80035ec:	08003609 	.word	0x08003609
 80035f0:	2300      	movs	r3, #0
 80035f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035f6:	e0d8      	b.n	80037aa <UART_SetConfig+0x2e6>
 80035f8:	2302      	movs	r3, #2
 80035fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035fe:	e0d4      	b.n	80037aa <UART_SetConfig+0x2e6>
 8003600:	2304      	movs	r3, #4
 8003602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003606:	e0d0      	b.n	80037aa <UART_SetConfig+0x2e6>
 8003608:	2308      	movs	r3, #8
 800360a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360e:	e0cc      	b.n	80037aa <UART_SetConfig+0x2e6>
 8003610:	2310      	movs	r3, #16
 8003612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003616:	e0c8      	b.n	80037aa <UART_SetConfig+0x2e6>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a5e      	ldr	r2, [pc, #376]	; (8003798 <UART_SetConfig+0x2d4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d125      	bne.n	800366e <UART_SetConfig+0x1aa>
 8003622:	4b5b      	ldr	r3, [pc, #364]	; (8003790 <UART_SetConfig+0x2cc>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003628:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800362c:	2b30      	cmp	r3, #48	; 0x30
 800362e:	d016      	beq.n	800365e <UART_SetConfig+0x19a>
 8003630:	2b30      	cmp	r3, #48	; 0x30
 8003632:	d818      	bhi.n	8003666 <UART_SetConfig+0x1a2>
 8003634:	2b20      	cmp	r3, #32
 8003636:	d00a      	beq.n	800364e <UART_SetConfig+0x18a>
 8003638:	2b20      	cmp	r3, #32
 800363a:	d814      	bhi.n	8003666 <UART_SetConfig+0x1a2>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <UART_SetConfig+0x182>
 8003640:	2b10      	cmp	r3, #16
 8003642:	d008      	beq.n	8003656 <UART_SetConfig+0x192>
 8003644:	e00f      	b.n	8003666 <UART_SetConfig+0x1a2>
 8003646:	2300      	movs	r3, #0
 8003648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800364c:	e0ad      	b.n	80037aa <UART_SetConfig+0x2e6>
 800364e:	2302      	movs	r3, #2
 8003650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003654:	e0a9      	b.n	80037aa <UART_SetConfig+0x2e6>
 8003656:	2304      	movs	r3, #4
 8003658:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800365c:	e0a5      	b.n	80037aa <UART_SetConfig+0x2e6>
 800365e:	2308      	movs	r3, #8
 8003660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003664:	e0a1      	b.n	80037aa <UART_SetConfig+0x2e6>
 8003666:	2310      	movs	r3, #16
 8003668:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800366c:	e09d      	b.n	80037aa <UART_SetConfig+0x2e6>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a4a      	ldr	r2, [pc, #296]	; (800379c <UART_SetConfig+0x2d8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d125      	bne.n	80036c4 <UART_SetConfig+0x200>
 8003678:	4b45      	ldr	r3, [pc, #276]	; (8003790 <UART_SetConfig+0x2cc>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003682:	2bc0      	cmp	r3, #192	; 0xc0
 8003684:	d016      	beq.n	80036b4 <UART_SetConfig+0x1f0>
 8003686:	2bc0      	cmp	r3, #192	; 0xc0
 8003688:	d818      	bhi.n	80036bc <UART_SetConfig+0x1f8>
 800368a:	2b80      	cmp	r3, #128	; 0x80
 800368c:	d00a      	beq.n	80036a4 <UART_SetConfig+0x1e0>
 800368e:	2b80      	cmp	r3, #128	; 0x80
 8003690:	d814      	bhi.n	80036bc <UART_SetConfig+0x1f8>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <UART_SetConfig+0x1d8>
 8003696:	2b40      	cmp	r3, #64	; 0x40
 8003698:	d008      	beq.n	80036ac <UART_SetConfig+0x1e8>
 800369a:	e00f      	b.n	80036bc <UART_SetConfig+0x1f8>
 800369c:	2300      	movs	r3, #0
 800369e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a2:	e082      	b.n	80037aa <UART_SetConfig+0x2e6>
 80036a4:	2302      	movs	r3, #2
 80036a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036aa:	e07e      	b.n	80037aa <UART_SetConfig+0x2e6>
 80036ac:	2304      	movs	r3, #4
 80036ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036b2:	e07a      	b.n	80037aa <UART_SetConfig+0x2e6>
 80036b4:	2308      	movs	r3, #8
 80036b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ba:	e076      	b.n	80037aa <UART_SetConfig+0x2e6>
 80036bc:	2310      	movs	r3, #16
 80036be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036c2:	e072      	b.n	80037aa <UART_SetConfig+0x2e6>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a35      	ldr	r2, [pc, #212]	; (80037a0 <UART_SetConfig+0x2dc>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d12a      	bne.n	8003724 <UART_SetConfig+0x260>
 80036ce:	4b30      	ldr	r3, [pc, #192]	; (8003790 <UART_SetConfig+0x2cc>)
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036dc:	d01a      	beq.n	8003714 <UART_SetConfig+0x250>
 80036de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036e2:	d81b      	bhi.n	800371c <UART_SetConfig+0x258>
 80036e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e8:	d00c      	beq.n	8003704 <UART_SetConfig+0x240>
 80036ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ee:	d815      	bhi.n	800371c <UART_SetConfig+0x258>
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <UART_SetConfig+0x238>
 80036f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f8:	d008      	beq.n	800370c <UART_SetConfig+0x248>
 80036fa:	e00f      	b.n	800371c <UART_SetConfig+0x258>
 80036fc:	2300      	movs	r3, #0
 80036fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003702:	e052      	b.n	80037aa <UART_SetConfig+0x2e6>
 8003704:	2302      	movs	r3, #2
 8003706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370a:	e04e      	b.n	80037aa <UART_SetConfig+0x2e6>
 800370c:	2304      	movs	r3, #4
 800370e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003712:	e04a      	b.n	80037aa <UART_SetConfig+0x2e6>
 8003714:	2308      	movs	r3, #8
 8003716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371a:	e046      	b.n	80037aa <UART_SetConfig+0x2e6>
 800371c:	2310      	movs	r3, #16
 800371e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003722:	e042      	b.n	80037aa <UART_SetConfig+0x2e6>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a17      	ldr	r2, [pc, #92]	; (8003788 <UART_SetConfig+0x2c4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d13a      	bne.n	80037a4 <UART_SetConfig+0x2e0>
 800372e:	4b18      	ldr	r3, [pc, #96]	; (8003790 <UART_SetConfig+0x2cc>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003734:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003738:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800373c:	d01a      	beq.n	8003774 <UART_SetConfig+0x2b0>
 800373e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003742:	d81b      	bhi.n	800377c <UART_SetConfig+0x2b8>
 8003744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003748:	d00c      	beq.n	8003764 <UART_SetConfig+0x2a0>
 800374a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800374e:	d815      	bhi.n	800377c <UART_SetConfig+0x2b8>
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <UART_SetConfig+0x298>
 8003754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003758:	d008      	beq.n	800376c <UART_SetConfig+0x2a8>
 800375a:	e00f      	b.n	800377c <UART_SetConfig+0x2b8>
 800375c:	2300      	movs	r3, #0
 800375e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003762:	e022      	b.n	80037aa <UART_SetConfig+0x2e6>
 8003764:	2302      	movs	r3, #2
 8003766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800376a:	e01e      	b.n	80037aa <UART_SetConfig+0x2e6>
 800376c:	2304      	movs	r3, #4
 800376e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003772:	e01a      	b.n	80037aa <UART_SetConfig+0x2e6>
 8003774:	2308      	movs	r3, #8
 8003776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800377a:	e016      	b.n	80037aa <UART_SetConfig+0x2e6>
 800377c:	2310      	movs	r3, #16
 800377e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003782:	e012      	b.n	80037aa <UART_SetConfig+0x2e6>
 8003784:	efff69f3 	.word	0xefff69f3
 8003788:	40008000 	.word	0x40008000
 800378c:	40013800 	.word	0x40013800
 8003790:	40021000 	.word	0x40021000
 8003794:	40004400 	.word	0x40004400
 8003798:	40004800 	.word	0x40004800
 800379c:	40004c00 	.word	0x40004c00
 80037a0:	40005000 	.word	0x40005000
 80037a4:	2310      	movs	r3, #16
 80037a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a9f      	ldr	r2, [pc, #636]	; (8003a2c <UART_SetConfig+0x568>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d17a      	bne.n	80038aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d824      	bhi.n	8003806 <UART_SetConfig+0x342>
 80037bc:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <UART_SetConfig+0x300>)
 80037be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c2:	bf00      	nop
 80037c4:	080037e9 	.word	0x080037e9
 80037c8:	08003807 	.word	0x08003807
 80037cc:	080037f1 	.word	0x080037f1
 80037d0:	08003807 	.word	0x08003807
 80037d4:	080037f7 	.word	0x080037f7
 80037d8:	08003807 	.word	0x08003807
 80037dc:	08003807 	.word	0x08003807
 80037e0:	08003807 	.word	0x08003807
 80037e4:	080037ff 	.word	0x080037ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037e8:	f7fe fbf2 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 80037ec:	61f8      	str	r0, [r7, #28]
        break;
 80037ee:	e010      	b.n	8003812 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f0:	4b8f      	ldr	r3, [pc, #572]	; (8003a30 <UART_SetConfig+0x56c>)
 80037f2:	61fb      	str	r3, [r7, #28]
        break;
 80037f4:	e00d      	b.n	8003812 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037f6:	f7fe fb53 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 80037fa:	61f8      	str	r0, [r7, #28]
        break;
 80037fc:	e009      	b.n	8003812 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003802:	61fb      	str	r3, [r7, #28]
        break;
 8003804:	e005      	b.n	8003812 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003810:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80fb 	beq.w	8003a10 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	4413      	add	r3, r2
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	429a      	cmp	r2, r3
 8003828:	d305      	bcc.n	8003836 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	429a      	cmp	r2, r3
 8003834:	d903      	bls.n	800383e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800383c:	e0e8      	b.n	8003a10 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	2200      	movs	r2, #0
 8003842:	461c      	mov	r4, r3
 8003844:	4615      	mov	r5, r2
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	022b      	lsls	r3, r5, #8
 8003850:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003854:	0222      	lsls	r2, r4, #8
 8003856:	68f9      	ldr	r1, [r7, #12]
 8003858:	6849      	ldr	r1, [r1, #4]
 800385a:	0849      	lsrs	r1, r1, #1
 800385c:	2000      	movs	r0, #0
 800385e:	4688      	mov	r8, r1
 8003860:	4681      	mov	r9, r0
 8003862:	eb12 0a08 	adds.w	sl, r2, r8
 8003866:	eb43 0b09 	adc.w	fp, r3, r9
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	603b      	str	r3, [r7, #0]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003878:	4650      	mov	r0, sl
 800387a:	4659      	mov	r1, fp
 800387c:	f7fc fd10 	bl	80002a0 <__aeabi_uldivmod>
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	4613      	mov	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800388e:	d308      	bcc.n	80038a2 <UART_SetConfig+0x3de>
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003896:	d204      	bcs.n	80038a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	60da      	str	r2, [r3, #12]
 80038a0:	e0b6      	b.n	8003a10 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038a8:	e0b2      	b.n	8003a10 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b2:	d15e      	bne.n	8003972 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80038b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d828      	bhi.n	800390e <UART_SetConfig+0x44a>
 80038bc:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <UART_SetConfig+0x400>)
 80038be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c2:	bf00      	nop
 80038c4:	080038e9 	.word	0x080038e9
 80038c8:	080038f1 	.word	0x080038f1
 80038cc:	080038f9 	.word	0x080038f9
 80038d0:	0800390f 	.word	0x0800390f
 80038d4:	080038ff 	.word	0x080038ff
 80038d8:	0800390f 	.word	0x0800390f
 80038dc:	0800390f 	.word	0x0800390f
 80038e0:	0800390f 	.word	0x0800390f
 80038e4:	08003907 	.word	0x08003907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e8:	f7fe fb72 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 80038ec:	61f8      	str	r0, [r7, #28]
        break;
 80038ee:	e014      	b.n	800391a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038f0:	f7fe fb84 	bl	8001ffc <HAL_RCC_GetPCLK2Freq>
 80038f4:	61f8      	str	r0, [r7, #28]
        break;
 80038f6:	e010      	b.n	800391a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038f8:	4b4d      	ldr	r3, [pc, #308]	; (8003a30 <UART_SetConfig+0x56c>)
 80038fa:	61fb      	str	r3, [r7, #28]
        break;
 80038fc:	e00d      	b.n	800391a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038fe:	f7fe facf 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8003902:	61f8      	str	r0, [r7, #28]
        break;
 8003904:	e009      	b.n	800391a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800390a:	61fb      	str	r3, [r7, #28]
        break;
 800390c:	e005      	b.n	800391a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003918:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d077      	beq.n	8003a10 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	005a      	lsls	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	085b      	lsrs	r3, r3, #1
 800392a:	441a      	add	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	fbb2 f3f3 	udiv	r3, r2, r3
 8003934:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b0f      	cmp	r3, #15
 800393a:	d916      	bls.n	800396a <UART_SetConfig+0x4a6>
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003942:	d212      	bcs.n	800396a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	b29b      	uxth	r3, r3
 8003948:	f023 030f 	bic.w	r3, r3, #15
 800394c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	085b      	lsrs	r3, r3, #1
 8003952:	b29b      	uxth	r3, r3
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	b29a      	uxth	r2, r3
 800395a:	8afb      	ldrh	r3, [r7, #22]
 800395c:	4313      	orrs	r3, r2
 800395e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	8afa      	ldrh	r2, [r7, #22]
 8003966:	60da      	str	r2, [r3, #12]
 8003968:	e052      	b.n	8003a10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003970:	e04e      	b.n	8003a10 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003972:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003976:	2b08      	cmp	r3, #8
 8003978:	d827      	bhi.n	80039ca <UART_SetConfig+0x506>
 800397a:	a201      	add	r2, pc, #4	; (adr r2, 8003980 <UART_SetConfig+0x4bc>)
 800397c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003980:	080039a5 	.word	0x080039a5
 8003984:	080039ad 	.word	0x080039ad
 8003988:	080039b5 	.word	0x080039b5
 800398c:	080039cb 	.word	0x080039cb
 8003990:	080039bb 	.word	0x080039bb
 8003994:	080039cb 	.word	0x080039cb
 8003998:	080039cb 	.word	0x080039cb
 800399c:	080039cb 	.word	0x080039cb
 80039a0:	080039c3 	.word	0x080039c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039a4:	f7fe fb14 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 80039a8:	61f8      	str	r0, [r7, #28]
        break;
 80039aa:	e014      	b.n	80039d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039ac:	f7fe fb26 	bl	8001ffc <HAL_RCC_GetPCLK2Freq>
 80039b0:	61f8      	str	r0, [r7, #28]
        break;
 80039b2:	e010      	b.n	80039d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039b4:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <UART_SetConfig+0x56c>)
 80039b6:	61fb      	str	r3, [r7, #28]
        break;
 80039b8:	e00d      	b.n	80039d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ba:	f7fe fa71 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 80039be:	61f8      	str	r0, [r7, #28]
        break;
 80039c0:	e009      	b.n	80039d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039c6:	61fb      	str	r3, [r7, #28]
        break;
 80039c8:	e005      	b.n	80039d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039d4:	bf00      	nop
    }

    if (pclk != 0U)
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d019      	beq.n	8003a10 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	085a      	lsrs	r2, r3, #1
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	441a      	add	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	2b0f      	cmp	r3, #15
 80039f4:	d909      	bls.n	8003a0a <UART_SetConfig+0x546>
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039fc:	d205      	bcs.n	8003a0a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60da      	str	r2, [r3, #12]
 8003a08:	e002      	b.n	8003a10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3728      	adds	r7, #40	; 0x28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40008000 	.word	0x40008000
 8003a30:	00f42400 	.word	0x00f42400

08003a34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00a      	beq.n	8003ae6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01a      	beq.n	8003b4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b32:	d10a      	bne.n	8003b4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	605a      	str	r2, [r3, #4]
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b88:	f7fd f92c 	bl	8000de4 <HAL_GetTick>
 8003b8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d10e      	bne.n	8003bba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f82d 	bl	8003c0a <UART_WaitOnFlagUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e023      	b.n	8003c02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d10e      	bne.n	8003be6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f817 	bl	8003c0a <UART_WaitOnFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e00d      	b.n	8003c02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b09c      	sub	sp, #112	; 0x70
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	603b      	str	r3, [r7, #0]
 8003c16:	4613      	mov	r3, r2
 8003c18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1a:	e0a5      	b.n	8003d68 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c22:	f000 80a1 	beq.w	8003d68 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c26:	f7fd f8dd 	bl	8000de4 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d302      	bcc.n	8003c3c <UART_WaitOnFlagUntilTimeout+0x32>
 8003c36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d13e      	bne.n	8003cba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c50:	667b      	str	r3, [r7, #100]	; 0x64
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c5c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e6      	bne.n	8003c3c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3308      	adds	r3, #8
 8003c74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c78:	e853 3f00 	ldrex	r3, [r3]
 8003c7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c80:	f023 0301 	bic.w	r3, r3, #1
 8003c84:	663b      	str	r3, [r7, #96]	; 0x60
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3308      	adds	r3, #8
 8003c8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c96:	e841 2300 	strex	r3, r2, [r1]
 8003c9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1e5      	bne.n	8003c6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e067      	b.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d04f      	beq.n	8003d68 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd6:	d147      	bne.n	8003d68 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ce0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cea:	e853 3f00 	ldrex	r3, [r3]
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
 8003d02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d08:	e841 2300 	strex	r3, r2, [r1]
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1e6      	bne.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3308      	adds	r3, #8
 8003d1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	e853 3f00 	ldrex	r3, [r3]
 8003d22:	613b      	str	r3, [r7, #16]
   return(result);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3308      	adds	r3, #8
 8003d32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d34:	623a      	str	r2, [r7, #32]
 8003d36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d38:	69f9      	ldr	r1, [r7, #28]
 8003d3a:	6a3a      	ldr	r2, [r7, #32]
 8003d3c:	e841 2300 	strex	r3, r2, [r1]
 8003d40:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e5      	bne.n	8003d14 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2220      	movs	r2, #32
 8003d52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e010      	b.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4013      	ands	r3, r2
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	bf0c      	ite	eq
 8003d78:	2301      	moveq	r3, #1
 8003d7a:	2300      	movne	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	f43f af4a 	beq.w	8003c1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3770      	adds	r7, #112	; 0x70
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <__errno>:
 8003d94:	4b01      	ldr	r3, [pc, #4]	; (8003d9c <__errno+0x8>)
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	2000000c 	.word	0x2000000c

08003da0 <__libc_init_array>:
 8003da0:	b570      	push	{r4, r5, r6, lr}
 8003da2:	4d0d      	ldr	r5, [pc, #52]	; (8003dd8 <__libc_init_array+0x38>)
 8003da4:	4c0d      	ldr	r4, [pc, #52]	; (8003ddc <__libc_init_array+0x3c>)
 8003da6:	1b64      	subs	r4, r4, r5
 8003da8:	10a4      	asrs	r4, r4, #2
 8003daa:	2600      	movs	r6, #0
 8003dac:	42a6      	cmp	r6, r4
 8003dae:	d109      	bne.n	8003dc4 <__libc_init_array+0x24>
 8003db0:	4d0b      	ldr	r5, [pc, #44]	; (8003de0 <__libc_init_array+0x40>)
 8003db2:	4c0c      	ldr	r4, [pc, #48]	; (8003de4 <__libc_init_array+0x44>)
 8003db4:	f001 fa20 	bl	80051f8 <_init>
 8003db8:	1b64      	subs	r4, r4, r5
 8003dba:	10a4      	asrs	r4, r4, #2
 8003dbc:	2600      	movs	r6, #0
 8003dbe:	42a6      	cmp	r6, r4
 8003dc0:	d105      	bne.n	8003dce <__libc_init_array+0x2e>
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
 8003dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dc8:	4798      	blx	r3
 8003dca:	3601      	adds	r6, #1
 8003dcc:	e7ee      	b.n	8003dac <__libc_init_array+0xc>
 8003dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd2:	4798      	blx	r3
 8003dd4:	3601      	adds	r6, #1
 8003dd6:	e7f2      	b.n	8003dbe <__libc_init_array+0x1e>
 8003dd8:	08005420 	.word	0x08005420
 8003ddc:	08005420 	.word	0x08005420
 8003de0:	08005420 	.word	0x08005420
 8003de4:	08005424 	.word	0x08005424

08003de8 <memset>:
 8003de8:	4402      	add	r2, r0
 8003dea:	4603      	mov	r3, r0
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d100      	bne.n	8003df2 <memset+0xa>
 8003df0:	4770      	bx	lr
 8003df2:	f803 1b01 	strb.w	r1, [r3], #1
 8003df6:	e7f9      	b.n	8003dec <memset+0x4>

08003df8 <_puts_r>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	460e      	mov	r6, r1
 8003dfc:	4605      	mov	r5, r0
 8003dfe:	b118      	cbz	r0, 8003e08 <_puts_r+0x10>
 8003e00:	6983      	ldr	r3, [r0, #24]
 8003e02:	b90b      	cbnz	r3, 8003e08 <_puts_r+0x10>
 8003e04:	f000 fadc 	bl	80043c0 <__sinit>
 8003e08:	69ab      	ldr	r3, [r5, #24]
 8003e0a:	68ac      	ldr	r4, [r5, #8]
 8003e0c:	b913      	cbnz	r3, 8003e14 <_puts_r+0x1c>
 8003e0e:	4628      	mov	r0, r5
 8003e10:	f000 fad6 	bl	80043c0 <__sinit>
 8003e14:	4b2c      	ldr	r3, [pc, #176]	; (8003ec8 <_puts_r+0xd0>)
 8003e16:	429c      	cmp	r4, r3
 8003e18:	d120      	bne.n	8003e5c <_puts_r+0x64>
 8003e1a:	686c      	ldr	r4, [r5, #4]
 8003e1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e1e:	07db      	lsls	r3, r3, #31
 8003e20:	d405      	bmi.n	8003e2e <_puts_r+0x36>
 8003e22:	89a3      	ldrh	r3, [r4, #12]
 8003e24:	0598      	lsls	r0, r3, #22
 8003e26:	d402      	bmi.n	8003e2e <_puts_r+0x36>
 8003e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e2a:	f000 fb67 	bl	80044fc <__retarget_lock_acquire_recursive>
 8003e2e:	89a3      	ldrh	r3, [r4, #12]
 8003e30:	0719      	lsls	r1, r3, #28
 8003e32:	d51d      	bpl.n	8003e70 <_puts_r+0x78>
 8003e34:	6923      	ldr	r3, [r4, #16]
 8003e36:	b1db      	cbz	r3, 8003e70 <_puts_r+0x78>
 8003e38:	3e01      	subs	r6, #1
 8003e3a:	68a3      	ldr	r3, [r4, #8]
 8003e3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e40:	3b01      	subs	r3, #1
 8003e42:	60a3      	str	r3, [r4, #8]
 8003e44:	bb39      	cbnz	r1, 8003e96 <_puts_r+0x9e>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	da38      	bge.n	8003ebc <_puts_r+0xc4>
 8003e4a:	4622      	mov	r2, r4
 8003e4c:	210a      	movs	r1, #10
 8003e4e:	4628      	mov	r0, r5
 8003e50:	f000 f8ba 	bl	8003fc8 <__swbuf_r>
 8003e54:	3001      	adds	r0, #1
 8003e56:	d011      	beq.n	8003e7c <_puts_r+0x84>
 8003e58:	250a      	movs	r5, #10
 8003e5a:	e011      	b.n	8003e80 <_puts_r+0x88>
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <_puts_r+0xd4>)
 8003e5e:	429c      	cmp	r4, r3
 8003e60:	d101      	bne.n	8003e66 <_puts_r+0x6e>
 8003e62:	68ac      	ldr	r4, [r5, #8]
 8003e64:	e7da      	b.n	8003e1c <_puts_r+0x24>
 8003e66:	4b1a      	ldr	r3, [pc, #104]	; (8003ed0 <_puts_r+0xd8>)
 8003e68:	429c      	cmp	r4, r3
 8003e6a:	bf08      	it	eq
 8003e6c:	68ec      	ldreq	r4, [r5, #12]
 8003e6e:	e7d5      	b.n	8003e1c <_puts_r+0x24>
 8003e70:	4621      	mov	r1, r4
 8003e72:	4628      	mov	r0, r5
 8003e74:	f000 f90c 	bl	8004090 <__swsetup_r>
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	d0dd      	beq.n	8003e38 <_puts_r+0x40>
 8003e7c:	f04f 35ff 	mov.w	r5, #4294967295
 8003e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e82:	07da      	lsls	r2, r3, #31
 8003e84:	d405      	bmi.n	8003e92 <_puts_r+0x9a>
 8003e86:	89a3      	ldrh	r3, [r4, #12]
 8003e88:	059b      	lsls	r3, r3, #22
 8003e8a:	d402      	bmi.n	8003e92 <_puts_r+0x9a>
 8003e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e8e:	f000 fb36 	bl	80044fe <__retarget_lock_release_recursive>
 8003e92:	4628      	mov	r0, r5
 8003e94:	bd70      	pop	{r4, r5, r6, pc}
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	da04      	bge.n	8003ea4 <_puts_r+0xac>
 8003e9a:	69a2      	ldr	r2, [r4, #24]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	dc06      	bgt.n	8003eae <_puts_r+0xb6>
 8003ea0:	290a      	cmp	r1, #10
 8003ea2:	d004      	beq.n	8003eae <_puts_r+0xb6>
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	6022      	str	r2, [r4, #0]
 8003eaa:	7019      	strb	r1, [r3, #0]
 8003eac:	e7c5      	b.n	8003e3a <_puts_r+0x42>
 8003eae:	4622      	mov	r2, r4
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	f000 f889 	bl	8003fc8 <__swbuf_r>
 8003eb6:	3001      	adds	r0, #1
 8003eb8:	d1bf      	bne.n	8003e3a <_puts_r+0x42>
 8003eba:	e7df      	b.n	8003e7c <_puts_r+0x84>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	250a      	movs	r5, #10
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	6022      	str	r2, [r4, #0]
 8003ec4:	701d      	strb	r5, [r3, #0]
 8003ec6:	e7db      	b.n	8003e80 <_puts_r+0x88>
 8003ec8:	080052b8 	.word	0x080052b8
 8003ecc:	080052d8 	.word	0x080052d8
 8003ed0:	08005298 	.word	0x08005298

08003ed4 <puts>:
 8003ed4:	4b02      	ldr	r3, [pc, #8]	; (8003ee0 <puts+0xc>)
 8003ed6:	4601      	mov	r1, r0
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	f7ff bf8d 	b.w	8003df8 <_puts_r>
 8003ede:	bf00      	nop
 8003ee0:	2000000c 	.word	0x2000000c

08003ee4 <siscanf>:
 8003ee4:	b40e      	push	{r1, r2, r3}
 8003ee6:	b510      	push	{r4, lr}
 8003ee8:	b09f      	sub	sp, #124	; 0x7c
 8003eea:	ac21      	add	r4, sp, #132	; 0x84
 8003eec:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003ef0:	f854 2b04 	ldr.w	r2, [r4], #4
 8003ef4:	9201      	str	r2, [sp, #4]
 8003ef6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8003efa:	9004      	str	r0, [sp, #16]
 8003efc:	9008      	str	r0, [sp, #32]
 8003efe:	f7fc f971 	bl	80001e4 <strlen>
 8003f02:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <siscanf+0x50>)
 8003f04:	9005      	str	r0, [sp, #20]
 8003f06:	9009      	str	r0, [sp, #36]	; 0x24
 8003f08:	930d      	str	r3, [sp, #52]	; 0x34
 8003f0a:	480b      	ldr	r0, [pc, #44]	; (8003f38 <siscanf+0x54>)
 8003f0c:	9a01      	ldr	r2, [sp, #4]
 8003f0e:	6800      	ldr	r0, [r0, #0]
 8003f10:	9403      	str	r4, [sp, #12]
 8003f12:	2300      	movs	r3, #0
 8003f14:	9311      	str	r3, [sp, #68]	; 0x44
 8003f16:	9316      	str	r3, [sp, #88]	; 0x58
 8003f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f1c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003f20:	a904      	add	r1, sp, #16
 8003f22:	4623      	mov	r3, r4
 8003f24:	f000 fc9e 	bl	8004864 <__ssvfiscanf_r>
 8003f28:	b01f      	add	sp, #124	; 0x7c
 8003f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f2e:	b003      	add	sp, #12
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	08003f5f 	.word	0x08003f5f
 8003f38:	2000000c 	.word	0x2000000c

08003f3c <__sread>:
 8003f3c:	b510      	push	{r4, lr}
 8003f3e:	460c      	mov	r4, r1
 8003f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f44:	f000 ff58 	bl	8004df8 <_read_r>
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	bfab      	itete	ge
 8003f4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f4e:	89a3      	ldrhlt	r3, [r4, #12]
 8003f50:	181b      	addge	r3, r3, r0
 8003f52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f56:	bfac      	ite	ge
 8003f58:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f5a:	81a3      	strhlt	r3, [r4, #12]
 8003f5c:	bd10      	pop	{r4, pc}

08003f5e <__seofread>:
 8003f5e:	2000      	movs	r0, #0
 8003f60:	4770      	bx	lr

08003f62 <__swrite>:
 8003f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f66:	461f      	mov	r7, r3
 8003f68:	898b      	ldrh	r3, [r1, #12]
 8003f6a:	05db      	lsls	r3, r3, #23
 8003f6c:	4605      	mov	r5, r0
 8003f6e:	460c      	mov	r4, r1
 8003f70:	4616      	mov	r6, r2
 8003f72:	d505      	bpl.n	8003f80 <__swrite+0x1e>
 8003f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f78:	2302      	movs	r3, #2
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f000 fac0 	bl	8004500 <_lseek_r>
 8003f80:	89a3      	ldrh	r3, [r4, #12]
 8003f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f8a:	81a3      	strh	r3, [r4, #12]
 8003f8c:	4632      	mov	r2, r6
 8003f8e:	463b      	mov	r3, r7
 8003f90:	4628      	mov	r0, r5
 8003f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f96:	f000 b869 	b.w	800406c <_write_r>

08003f9a <__sseek>:
 8003f9a:	b510      	push	{r4, lr}
 8003f9c:	460c      	mov	r4, r1
 8003f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa2:	f000 faad 	bl	8004500 <_lseek_r>
 8003fa6:	1c43      	adds	r3, r0, #1
 8003fa8:	89a3      	ldrh	r3, [r4, #12]
 8003faa:	bf15      	itete	ne
 8003fac:	6560      	strne	r0, [r4, #84]	; 0x54
 8003fae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003fb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003fb6:	81a3      	strheq	r3, [r4, #12]
 8003fb8:	bf18      	it	ne
 8003fba:	81a3      	strhne	r3, [r4, #12]
 8003fbc:	bd10      	pop	{r4, pc}

08003fbe <__sclose>:
 8003fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fc2:	f000 b8d3 	b.w	800416c <_close_r>
	...

08003fc8 <__swbuf_r>:
 8003fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fca:	460e      	mov	r6, r1
 8003fcc:	4614      	mov	r4, r2
 8003fce:	4605      	mov	r5, r0
 8003fd0:	b118      	cbz	r0, 8003fda <__swbuf_r+0x12>
 8003fd2:	6983      	ldr	r3, [r0, #24]
 8003fd4:	b90b      	cbnz	r3, 8003fda <__swbuf_r+0x12>
 8003fd6:	f000 f9f3 	bl	80043c0 <__sinit>
 8003fda:	4b21      	ldr	r3, [pc, #132]	; (8004060 <__swbuf_r+0x98>)
 8003fdc:	429c      	cmp	r4, r3
 8003fde:	d12b      	bne.n	8004038 <__swbuf_r+0x70>
 8003fe0:	686c      	ldr	r4, [r5, #4]
 8003fe2:	69a3      	ldr	r3, [r4, #24]
 8003fe4:	60a3      	str	r3, [r4, #8]
 8003fe6:	89a3      	ldrh	r3, [r4, #12]
 8003fe8:	071a      	lsls	r2, r3, #28
 8003fea:	d52f      	bpl.n	800404c <__swbuf_r+0x84>
 8003fec:	6923      	ldr	r3, [r4, #16]
 8003fee:	b36b      	cbz	r3, 800404c <__swbuf_r+0x84>
 8003ff0:	6923      	ldr	r3, [r4, #16]
 8003ff2:	6820      	ldr	r0, [r4, #0]
 8003ff4:	1ac0      	subs	r0, r0, r3
 8003ff6:	6963      	ldr	r3, [r4, #20]
 8003ff8:	b2f6      	uxtb	r6, r6
 8003ffa:	4283      	cmp	r3, r0
 8003ffc:	4637      	mov	r7, r6
 8003ffe:	dc04      	bgt.n	800400a <__swbuf_r+0x42>
 8004000:	4621      	mov	r1, r4
 8004002:	4628      	mov	r0, r5
 8004004:	f000 f948 	bl	8004298 <_fflush_r>
 8004008:	bb30      	cbnz	r0, 8004058 <__swbuf_r+0x90>
 800400a:	68a3      	ldr	r3, [r4, #8]
 800400c:	3b01      	subs	r3, #1
 800400e:	60a3      	str	r3, [r4, #8]
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	1c5a      	adds	r2, r3, #1
 8004014:	6022      	str	r2, [r4, #0]
 8004016:	701e      	strb	r6, [r3, #0]
 8004018:	6963      	ldr	r3, [r4, #20]
 800401a:	3001      	adds	r0, #1
 800401c:	4283      	cmp	r3, r0
 800401e:	d004      	beq.n	800402a <__swbuf_r+0x62>
 8004020:	89a3      	ldrh	r3, [r4, #12]
 8004022:	07db      	lsls	r3, r3, #31
 8004024:	d506      	bpl.n	8004034 <__swbuf_r+0x6c>
 8004026:	2e0a      	cmp	r6, #10
 8004028:	d104      	bne.n	8004034 <__swbuf_r+0x6c>
 800402a:	4621      	mov	r1, r4
 800402c:	4628      	mov	r0, r5
 800402e:	f000 f933 	bl	8004298 <_fflush_r>
 8004032:	b988      	cbnz	r0, 8004058 <__swbuf_r+0x90>
 8004034:	4638      	mov	r0, r7
 8004036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004038:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <__swbuf_r+0x9c>)
 800403a:	429c      	cmp	r4, r3
 800403c:	d101      	bne.n	8004042 <__swbuf_r+0x7a>
 800403e:	68ac      	ldr	r4, [r5, #8]
 8004040:	e7cf      	b.n	8003fe2 <__swbuf_r+0x1a>
 8004042:	4b09      	ldr	r3, [pc, #36]	; (8004068 <__swbuf_r+0xa0>)
 8004044:	429c      	cmp	r4, r3
 8004046:	bf08      	it	eq
 8004048:	68ec      	ldreq	r4, [r5, #12]
 800404a:	e7ca      	b.n	8003fe2 <__swbuf_r+0x1a>
 800404c:	4621      	mov	r1, r4
 800404e:	4628      	mov	r0, r5
 8004050:	f000 f81e 	bl	8004090 <__swsetup_r>
 8004054:	2800      	cmp	r0, #0
 8004056:	d0cb      	beq.n	8003ff0 <__swbuf_r+0x28>
 8004058:	f04f 37ff 	mov.w	r7, #4294967295
 800405c:	e7ea      	b.n	8004034 <__swbuf_r+0x6c>
 800405e:	bf00      	nop
 8004060:	080052b8 	.word	0x080052b8
 8004064:	080052d8 	.word	0x080052d8
 8004068:	08005298 	.word	0x08005298

0800406c <_write_r>:
 800406c:	b538      	push	{r3, r4, r5, lr}
 800406e:	4d07      	ldr	r5, [pc, #28]	; (800408c <_write_r+0x20>)
 8004070:	4604      	mov	r4, r0
 8004072:	4608      	mov	r0, r1
 8004074:	4611      	mov	r1, r2
 8004076:	2200      	movs	r2, #0
 8004078:	602a      	str	r2, [r5, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	f7fc fadc 	bl	8000638 <_write>
 8004080:	1c43      	adds	r3, r0, #1
 8004082:	d102      	bne.n	800408a <_write_r+0x1e>
 8004084:	682b      	ldr	r3, [r5, #0]
 8004086:	b103      	cbz	r3, 800408a <_write_r+0x1e>
 8004088:	6023      	str	r3, [r4, #0]
 800408a:	bd38      	pop	{r3, r4, r5, pc}
 800408c:	200001d8 	.word	0x200001d8

08004090 <__swsetup_r>:
 8004090:	4b32      	ldr	r3, [pc, #200]	; (800415c <__swsetup_r+0xcc>)
 8004092:	b570      	push	{r4, r5, r6, lr}
 8004094:	681d      	ldr	r5, [r3, #0]
 8004096:	4606      	mov	r6, r0
 8004098:	460c      	mov	r4, r1
 800409a:	b125      	cbz	r5, 80040a6 <__swsetup_r+0x16>
 800409c:	69ab      	ldr	r3, [r5, #24]
 800409e:	b913      	cbnz	r3, 80040a6 <__swsetup_r+0x16>
 80040a0:	4628      	mov	r0, r5
 80040a2:	f000 f98d 	bl	80043c0 <__sinit>
 80040a6:	4b2e      	ldr	r3, [pc, #184]	; (8004160 <__swsetup_r+0xd0>)
 80040a8:	429c      	cmp	r4, r3
 80040aa:	d10f      	bne.n	80040cc <__swsetup_r+0x3c>
 80040ac:	686c      	ldr	r4, [r5, #4]
 80040ae:	89a3      	ldrh	r3, [r4, #12]
 80040b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040b4:	0719      	lsls	r1, r3, #28
 80040b6:	d42c      	bmi.n	8004112 <__swsetup_r+0x82>
 80040b8:	06dd      	lsls	r5, r3, #27
 80040ba:	d411      	bmi.n	80040e0 <__swsetup_r+0x50>
 80040bc:	2309      	movs	r3, #9
 80040be:	6033      	str	r3, [r6, #0]
 80040c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80040c4:	81a3      	strh	r3, [r4, #12]
 80040c6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ca:	e03e      	b.n	800414a <__swsetup_r+0xba>
 80040cc:	4b25      	ldr	r3, [pc, #148]	; (8004164 <__swsetup_r+0xd4>)
 80040ce:	429c      	cmp	r4, r3
 80040d0:	d101      	bne.n	80040d6 <__swsetup_r+0x46>
 80040d2:	68ac      	ldr	r4, [r5, #8]
 80040d4:	e7eb      	b.n	80040ae <__swsetup_r+0x1e>
 80040d6:	4b24      	ldr	r3, [pc, #144]	; (8004168 <__swsetup_r+0xd8>)
 80040d8:	429c      	cmp	r4, r3
 80040da:	bf08      	it	eq
 80040dc:	68ec      	ldreq	r4, [r5, #12]
 80040de:	e7e6      	b.n	80040ae <__swsetup_r+0x1e>
 80040e0:	0758      	lsls	r0, r3, #29
 80040e2:	d512      	bpl.n	800410a <__swsetup_r+0x7a>
 80040e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040e6:	b141      	cbz	r1, 80040fa <__swsetup_r+0x6a>
 80040e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040ec:	4299      	cmp	r1, r3
 80040ee:	d002      	beq.n	80040f6 <__swsetup_r+0x66>
 80040f0:	4630      	mov	r0, r6
 80040f2:	f000 fa7d 	bl	80045f0 <_free_r>
 80040f6:	2300      	movs	r3, #0
 80040f8:	6363      	str	r3, [r4, #52]	; 0x34
 80040fa:	89a3      	ldrh	r3, [r4, #12]
 80040fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004100:	81a3      	strh	r3, [r4, #12]
 8004102:	2300      	movs	r3, #0
 8004104:	6063      	str	r3, [r4, #4]
 8004106:	6923      	ldr	r3, [r4, #16]
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	89a3      	ldrh	r3, [r4, #12]
 800410c:	f043 0308 	orr.w	r3, r3, #8
 8004110:	81a3      	strh	r3, [r4, #12]
 8004112:	6923      	ldr	r3, [r4, #16]
 8004114:	b94b      	cbnz	r3, 800412a <__swsetup_r+0x9a>
 8004116:	89a3      	ldrh	r3, [r4, #12]
 8004118:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800411c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004120:	d003      	beq.n	800412a <__swsetup_r+0x9a>
 8004122:	4621      	mov	r1, r4
 8004124:	4630      	mov	r0, r6
 8004126:	f000 fa23 	bl	8004570 <__smakebuf_r>
 800412a:	89a0      	ldrh	r0, [r4, #12]
 800412c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004130:	f010 0301 	ands.w	r3, r0, #1
 8004134:	d00a      	beq.n	800414c <__swsetup_r+0xbc>
 8004136:	2300      	movs	r3, #0
 8004138:	60a3      	str	r3, [r4, #8]
 800413a:	6963      	ldr	r3, [r4, #20]
 800413c:	425b      	negs	r3, r3
 800413e:	61a3      	str	r3, [r4, #24]
 8004140:	6923      	ldr	r3, [r4, #16]
 8004142:	b943      	cbnz	r3, 8004156 <__swsetup_r+0xc6>
 8004144:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004148:	d1ba      	bne.n	80040c0 <__swsetup_r+0x30>
 800414a:	bd70      	pop	{r4, r5, r6, pc}
 800414c:	0781      	lsls	r1, r0, #30
 800414e:	bf58      	it	pl
 8004150:	6963      	ldrpl	r3, [r4, #20]
 8004152:	60a3      	str	r3, [r4, #8]
 8004154:	e7f4      	b.n	8004140 <__swsetup_r+0xb0>
 8004156:	2000      	movs	r0, #0
 8004158:	e7f7      	b.n	800414a <__swsetup_r+0xba>
 800415a:	bf00      	nop
 800415c:	2000000c 	.word	0x2000000c
 8004160:	080052b8 	.word	0x080052b8
 8004164:	080052d8 	.word	0x080052d8
 8004168:	08005298 	.word	0x08005298

0800416c <_close_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	4d06      	ldr	r5, [pc, #24]	; (8004188 <_close_r+0x1c>)
 8004170:	2300      	movs	r3, #0
 8004172:	4604      	mov	r4, r0
 8004174:	4608      	mov	r0, r1
 8004176:	602b      	str	r3, [r5, #0]
 8004178:	f7fc fd1d 	bl	8000bb6 <_close>
 800417c:	1c43      	adds	r3, r0, #1
 800417e:	d102      	bne.n	8004186 <_close_r+0x1a>
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	b103      	cbz	r3, 8004186 <_close_r+0x1a>
 8004184:	6023      	str	r3, [r4, #0]
 8004186:	bd38      	pop	{r3, r4, r5, pc}
 8004188:	200001d8 	.word	0x200001d8

0800418c <__sflush_r>:
 800418c:	898a      	ldrh	r2, [r1, #12]
 800418e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004192:	4605      	mov	r5, r0
 8004194:	0710      	lsls	r0, r2, #28
 8004196:	460c      	mov	r4, r1
 8004198:	d458      	bmi.n	800424c <__sflush_r+0xc0>
 800419a:	684b      	ldr	r3, [r1, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	dc05      	bgt.n	80041ac <__sflush_r+0x20>
 80041a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	dc02      	bgt.n	80041ac <__sflush_r+0x20>
 80041a6:	2000      	movs	r0, #0
 80041a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041ae:	2e00      	cmp	r6, #0
 80041b0:	d0f9      	beq.n	80041a6 <__sflush_r+0x1a>
 80041b2:	2300      	movs	r3, #0
 80041b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041b8:	682f      	ldr	r7, [r5, #0]
 80041ba:	602b      	str	r3, [r5, #0]
 80041bc:	d032      	beq.n	8004224 <__sflush_r+0x98>
 80041be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	075a      	lsls	r2, r3, #29
 80041c4:	d505      	bpl.n	80041d2 <__sflush_r+0x46>
 80041c6:	6863      	ldr	r3, [r4, #4]
 80041c8:	1ac0      	subs	r0, r0, r3
 80041ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041cc:	b10b      	cbz	r3, 80041d2 <__sflush_r+0x46>
 80041ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041d0:	1ac0      	subs	r0, r0, r3
 80041d2:	2300      	movs	r3, #0
 80041d4:	4602      	mov	r2, r0
 80041d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041d8:	6a21      	ldr	r1, [r4, #32]
 80041da:	4628      	mov	r0, r5
 80041dc:	47b0      	blx	r6
 80041de:	1c43      	adds	r3, r0, #1
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	d106      	bne.n	80041f2 <__sflush_r+0x66>
 80041e4:	6829      	ldr	r1, [r5, #0]
 80041e6:	291d      	cmp	r1, #29
 80041e8:	d82c      	bhi.n	8004244 <__sflush_r+0xb8>
 80041ea:	4a2a      	ldr	r2, [pc, #168]	; (8004294 <__sflush_r+0x108>)
 80041ec:	40ca      	lsrs	r2, r1
 80041ee:	07d6      	lsls	r6, r2, #31
 80041f0:	d528      	bpl.n	8004244 <__sflush_r+0xb8>
 80041f2:	2200      	movs	r2, #0
 80041f4:	6062      	str	r2, [r4, #4]
 80041f6:	04d9      	lsls	r1, r3, #19
 80041f8:	6922      	ldr	r2, [r4, #16]
 80041fa:	6022      	str	r2, [r4, #0]
 80041fc:	d504      	bpl.n	8004208 <__sflush_r+0x7c>
 80041fe:	1c42      	adds	r2, r0, #1
 8004200:	d101      	bne.n	8004206 <__sflush_r+0x7a>
 8004202:	682b      	ldr	r3, [r5, #0]
 8004204:	b903      	cbnz	r3, 8004208 <__sflush_r+0x7c>
 8004206:	6560      	str	r0, [r4, #84]	; 0x54
 8004208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800420a:	602f      	str	r7, [r5, #0]
 800420c:	2900      	cmp	r1, #0
 800420e:	d0ca      	beq.n	80041a6 <__sflush_r+0x1a>
 8004210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004214:	4299      	cmp	r1, r3
 8004216:	d002      	beq.n	800421e <__sflush_r+0x92>
 8004218:	4628      	mov	r0, r5
 800421a:	f000 f9e9 	bl	80045f0 <_free_r>
 800421e:	2000      	movs	r0, #0
 8004220:	6360      	str	r0, [r4, #52]	; 0x34
 8004222:	e7c1      	b.n	80041a8 <__sflush_r+0x1c>
 8004224:	6a21      	ldr	r1, [r4, #32]
 8004226:	2301      	movs	r3, #1
 8004228:	4628      	mov	r0, r5
 800422a:	47b0      	blx	r6
 800422c:	1c41      	adds	r1, r0, #1
 800422e:	d1c7      	bne.n	80041c0 <__sflush_r+0x34>
 8004230:	682b      	ldr	r3, [r5, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0c4      	beq.n	80041c0 <__sflush_r+0x34>
 8004236:	2b1d      	cmp	r3, #29
 8004238:	d001      	beq.n	800423e <__sflush_r+0xb2>
 800423a:	2b16      	cmp	r3, #22
 800423c:	d101      	bne.n	8004242 <__sflush_r+0xb6>
 800423e:	602f      	str	r7, [r5, #0]
 8004240:	e7b1      	b.n	80041a6 <__sflush_r+0x1a>
 8004242:	89a3      	ldrh	r3, [r4, #12]
 8004244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004248:	81a3      	strh	r3, [r4, #12]
 800424a:	e7ad      	b.n	80041a8 <__sflush_r+0x1c>
 800424c:	690f      	ldr	r7, [r1, #16]
 800424e:	2f00      	cmp	r7, #0
 8004250:	d0a9      	beq.n	80041a6 <__sflush_r+0x1a>
 8004252:	0793      	lsls	r3, r2, #30
 8004254:	680e      	ldr	r6, [r1, #0]
 8004256:	bf08      	it	eq
 8004258:	694b      	ldreq	r3, [r1, #20]
 800425a:	600f      	str	r7, [r1, #0]
 800425c:	bf18      	it	ne
 800425e:	2300      	movne	r3, #0
 8004260:	eba6 0807 	sub.w	r8, r6, r7
 8004264:	608b      	str	r3, [r1, #8]
 8004266:	f1b8 0f00 	cmp.w	r8, #0
 800426a:	dd9c      	ble.n	80041a6 <__sflush_r+0x1a>
 800426c:	6a21      	ldr	r1, [r4, #32]
 800426e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004270:	4643      	mov	r3, r8
 8004272:	463a      	mov	r2, r7
 8004274:	4628      	mov	r0, r5
 8004276:	47b0      	blx	r6
 8004278:	2800      	cmp	r0, #0
 800427a:	dc06      	bgt.n	800428a <__sflush_r+0xfe>
 800427c:	89a3      	ldrh	r3, [r4, #12]
 800427e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004282:	81a3      	strh	r3, [r4, #12]
 8004284:	f04f 30ff 	mov.w	r0, #4294967295
 8004288:	e78e      	b.n	80041a8 <__sflush_r+0x1c>
 800428a:	4407      	add	r7, r0
 800428c:	eba8 0800 	sub.w	r8, r8, r0
 8004290:	e7e9      	b.n	8004266 <__sflush_r+0xda>
 8004292:	bf00      	nop
 8004294:	20400001 	.word	0x20400001

08004298 <_fflush_r>:
 8004298:	b538      	push	{r3, r4, r5, lr}
 800429a:	690b      	ldr	r3, [r1, #16]
 800429c:	4605      	mov	r5, r0
 800429e:	460c      	mov	r4, r1
 80042a0:	b913      	cbnz	r3, 80042a8 <_fflush_r+0x10>
 80042a2:	2500      	movs	r5, #0
 80042a4:	4628      	mov	r0, r5
 80042a6:	bd38      	pop	{r3, r4, r5, pc}
 80042a8:	b118      	cbz	r0, 80042b2 <_fflush_r+0x1a>
 80042aa:	6983      	ldr	r3, [r0, #24]
 80042ac:	b90b      	cbnz	r3, 80042b2 <_fflush_r+0x1a>
 80042ae:	f000 f887 	bl	80043c0 <__sinit>
 80042b2:	4b14      	ldr	r3, [pc, #80]	; (8004304 <_fflush_r+0x6c>)
 80042b4:	429c      	cmp	r4, r3
 80042b6:	d11b      	bne.n	80042f0 <_fflush_r+0x58>
 80042b8:	686c      	ldr	r4, [r5, #4]
 80042ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0ef      	beq.n	80042a2 <_fflush_r+0xa>
 80042c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042c4:	07d0      	lsls	r0, r2, #31
 80042c6:	d404      	bmi.n	80042d2 <_fflush_r+0x3a>
 80042c8:	0599      	lsls	r1, r3, #22
 80042ca:	d402      	bmi.n	80042d2 <_fflush_r+0x3a>
 80042cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042ce:	f000 f915 	bl	80044fc <__retarget_lock_acquire_recursive>
 80042d2:	4628      	mov	r0, r5
 80042d4:	4621      	mov	r1, r4
 80042d6:	f7ff ff59 	bl	800418c <__sflush_r>
 80042da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042dc:	07da      	lsls	r2, r3, #31
 80042de:	4605      	mov	r5, r0
 80042e0:	d4e0      	bmi.n	80042a4 <_fflush_r+0xc>
 80042e2:	89a3      	ldrh	r3, [r4, #12]
 80042e4:	059b      	lsls	r3, r3, #22
 80042e6:	d4dd      	bmi.n	80042a4 <_fflush_r+0xc>
 80042e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042ea:	f000 f908 	bl	80044fe <__retarget_lock_release_recursive>
 80042ee:	e7d9      	b.n	80042a4 <_fflush_r+0xc>
 80042f0:	4b05      	ldr	r3, [pc, #20]	; (8004308 <_fflush_r+0x70>)
 80042f2:	429c      	cmp	r4, r3
 80042f4:	d101      	bne.n	80042fa <_fflush_r+0x62>
 80042f6:	68ac      	ldr	r4, [r5, #8]
 80042f8:	e7df      	b.n	80042ba <_fflush_r+0x22>
 80042fa:	4b04      	ldr	r3, [pc, #16]	; (800430c <_fflush_r+0x74>)
 80042fc:	429c      	cmp	r4, r3
 80042fe:	bf08      	it	eq
 8004300:	68ec      	ldreq	r4, [r5, #12]
 8004302:	e7da      	b.n	80042ba <_fflush_r+0x22>
 8004304:	080052b8 	.word	0x080052b8
 8004308:	080052d8 	.word	0x080052d8
 800430c:	08005298 	.word	0x08005298

08004310 <std>:
 8004310:	2300      	movs	r3, #0
 8004312:	b510      	push	{r4, lr}
 8004314:	4604      	mov	r4, r0
 8004316:	e9c0 3300 	strd	r3, r3, [r0]
 800431a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800431e:	6083      	str	r3, [r0, #8]
 8004320:	8181      	strh	r1, [r0, #12]
 8004322:	6643      	str	r3, [r0, #100]	; 0x64
 8004324:	81c2      	strh	r2, [r0, #14]
 8004326:	6183      	str	r3, [r0, #24]
 8004328:	4619      	mov	r1, r3
 800432a:	2208      	movs	r2, #8
 800432c:	305c      	adds	r0, #92	; 0x5c
 800432e:	f7ff fd5b 	bl	8003de8 <memset>
 8004332:	4b05      	ldr	r3, [pc, #20]	; (8004348 <std+0x38>)
 8004334:	6263      	str	r3, [r4, #36]	; 0x24
 8004336:	4b05      	ldr	r3, [pc, #20]	; (800434c <std+0x3c>)
 8004338:	62a3      	str	r3, [r4, #40]	; 0x28
 800433a:	4b05      	ldr	r3, [pc, #20]	; (8004350 <std+0x40>)
 800433c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <std+0x44>)
 8004340:	6224      	str	r4, [r4, #32]
 8004342:	6323      	str	r3, [r4, #48]	; 0x30
 8004344:	bd10      	pop	{r4, pc}
 8004346:	bf00      	nop
 8004348:	08003f3d 	.word	0x08003f3d
 800434c:	08003f63 	.word	0x08003f63
 8004350:	08003f9b 	.word	0x08003f9b
 8004354:	08003fbf 	.word	0x08003fbf

08004358 <_cleanup_r>:
 8004358:	4901      	ldr	r1, [pc, #4]	; (8004360 <_cleanup_r+0x8>)
 800435a:	f000 b8af 	b.w	80044bc <_fwalk_reent>
 800435e:	bf00      	nop
 8004360:	08004299 	.word	0x08004299

08004364 <__sfmoreglue>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	2268      	movs	r2, #104	; 0x68
 8004368:	1e4d      	subs	r5, r1, #1
 800436a:	4355      	muls	r5, r2
 800436c:	460e      	mov	r6, r1
 800436e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004372:	f000 f9a9 	bl	80046c8 <_malloc_r>
 8004376:	4604      	mov	r4, r0
 8004378:	b140      	cbz	r0, 800438c <__sfmoreglue+0x28>
 800437a:	2100      	movs	r1, #0
 800437c:	e9c0 1600 	strd	r1, r6, [r0]
 8004380:	300c      	adds	r0, #12
 8004382:	60a0      	str	r0, [r4, #8]
 8004384:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004388:	f7ff fd2e 	bl	8003de8 <memset>
 800438c:	4620      	mov	r0, r4
 800438e:	bd70      	pop	{r4, r5, r6, pc}

08004390 <__sfp_lock_acquire>:
 8004390:	4801      	ldr	r0, [pc, #4]	; (8004398 <__sfp_lock_acquire+0x8>)
 8004392:	f000 b8b3 	b.w	80044fc <__retarget_lock_acquire_recursive>
 8004396:	bf00      	nop
 8004398:	200001cd 	.word	0x200001cd

0800439c <__sfp_lock_release>:
 800439c:	4801      	ldr	r0, [pc, #4]	; (80043a4 <__sfp_lock_release+0x8>)
 800439e:	f000 b8ae 	b.w	80044fe <__retarget_lock_release_recursive>
 80043a2:	bf00      	nop
 80043a4:	200001cd 	.word	0x200001cd

080043a8 <__sinit_lock_acquire>:
 80043a8:	4801      	ldr	r0, [pc, #4]	; (80043b0 <__sinit_lock_acquire+0x8>)
 80043aa:	f000 b8a7 	b.w	80044fc <__retarget_lock_acquire_recursive>
 80043ae:	bf00      	nop
 80043b0:	200001ce 	.word	0x200001ce

080043b4 <__sinit_lock_release>:
 80043b4:	4801      	ldr	r0, [pc, #4]	; (80043bc <__sinit_lock_release+0x8>)
 80043b6:	f000 b8a2 	b.w	80044fe <__retarget_lock_release_recursive>
 80043ba:	bf00      	nop
 80043bc:	200001ce 	.word	0x200001ce

080043c0 <__sinit>:
 80043c0:	b510      	push	{r4, lr}
 80043c2:	4604      	mov	r4, r0
 80043c4:	f7ff fff0 	bl	80043a8 <__sinit_lock_acquire>
 80043c8:	69a3      	ldr	r3, [r4, #24]
 80043ca:	b11b      	cbz	r3, 80043d4 <__sinit+0x14>
 80043cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043d0:	f7ff bff0 	b.w	80043b4 <__sinit_lock_release>
 80043d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80043d8:	6523      	str	r3, [r4, #80]	; 0x50
 80043da:	4b13      	ldr	r3, [pc, #76]	; (8004428 <__sinit+0x68>)
 80043dc:	4a13      	ldr	r2, [pc, #76]	; (800442c <__sinit+0x6c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80043e2:	42a3      	cmp	r3, r4
 80043e4:	bf04      	itt	eq
 80043e6:	2301      	moveq	r3, #1
 80043e8:	61a3      	streq	r3, [r4, #24]
 80043ea:	4620      	mov	r0, r4
 80043ec:	f000 f820 	bl	8004430 <__sfp>
 80043f0:	6060      	str	r0, [r4, #4]
 80043f2:	4620      	mov	r0, r4
 80043f4:	f000 f81c 	bl	8004430 <__sfp>
 80043f8:	60a0      	str	r0, [r4, #8]
 80043fa:	4620      	mov	r0, r4
 80043fc:	f000 f818 	bl	8004430 <__sfp>
 8004400:	2200      	movs	r2, #0
 8004402:	60e0      	str	r0, [r4, #12]
 8004404:	2104      	movs	r1, #4
 8004406:	6860      	ldr	r0, [r4, #4]
 8004408:	f7ff ff82 	bl	8004310 <std>
 800440c:	68a0      	ldr	r0, [r4, #8]
 800440e:	2201      	movs	r2, #1
 8004410:	2109      	movs	r1, #9
 8004412:	f7ff ff7d 	bl	8004310 <std>
 8004416:	68e0      	ldr	r0, [r4, #12]
 8004418:	2202      	movs	r2, #2
 800441a:	2112      	movs	r1, #18
 800441c:	f7ff ff78 	bl	8004310 <std>
 8004420:	2301      	movs	r3, #1
 8004422:	61a3      	str	r3, [r4, #24]
 8004424:	e7d2      	b.n	80043cc <__sinit+0xc>
 8004426:	bf00      	nop
 8004428:	08005294 	.word	0x08005294
 800442c:	08004359 	.word	0x08004359

08004430 <__sfp>:
 8004430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004432:	4607      	mov	r7, r0
 8004434:	f7ff ffac 	bl	8004390 <__sfp_lock_acquire>
 8004438:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <__sfp+0x84>)
 800443a:	681e      	ldr	r6, [r3, #0]
 800443c:	69b3      	ldr	r3, [r6, #24]
 800443e:	b913      	cbnz	r3, 8004446 <__sfp+0x16>
 8004440:	4630      	mov	r0, r6
 8004442:	f7ff ffbd 	bl	80043c0 <__sinit>
 8004446:	3648      	adds	r6, #72	; 0x48
 8004448:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800444c:	3b01      	subs	r3, #1
 800444e:	d503      	bpl.n	8004458 <__sfp+0x28>
 8004450:	6833      	ldr	r3, [r6, #0]
 8004452:	b30b      	cbz	r3, 8004498 <__sfp+0x68>
 8004454:	6836      	ldr	r6, [r6, #0]
 8004456:	e7f7      	b.n	8004448 <__sfp+0x18>
 8004458:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800445c:	b9d5      	cbnz	r5, 8004494 <__sfp+0x64>
 800445e:	4b16      	ldr	r3, [pc, #88]	; (80044b8 <__sfp+0x88>)
 8004460:	60e3      	str	r3, [r4, #12]
 8004462:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004466:	6665      	str	r5, [r4, #100]	; 0x64
 8004468:	f000 f847 	bl	80044fa <__retarget_lock_init_recursive>
 800446c:	f7ff ff96 	bl	800439c <__sfp_lock_release>
 8004470:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004474:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004478:	6025      	str	r5, [r4, #0]
 800447a:	61a5      	str	r5, [r4, #24]
 800447c:	2208      	movs	r2, #8
 800447e:	4629      	mov	r1, r5
 8004480:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004484:	f7ff fcb0 	bl	8003de8 <memset>
 8004488:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800448c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004490:	4620      	mov	r0, r4
 8004492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004494:	3468      	adds	r4, #104	; 0x68
 8004496:	e7d9      	b.n	800444c <__sfp+0x1c>
 8004498:	2104      	movs	r1, #4
 800449a:	4638      	mov	r0, r7
 800449c:	f7ff ff62 	bl	8004364 <__sfmoreglue>
 80044a0:	4604      	mov	r4, r0
 80044a2:	6030      	str	r0, [r6, #0]
 80044a4:	2800      	cmp	r0, #0
 80044a6:	d1d5      	bne.n	8004454 <__sfp+0x24>
 80044a8:	f7ff ff78 	bl	800439c <__sfp_lock_release>
 80044ac:	230c      	movs	r3, #12
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	e7ee      	b.n	8004490 <__sfp+0x60>
 80044b2:	bf00      	nop
 80044b4:	08005294 	.word	0x08005294
 80044b8:	ffff0001 	.word	0xffff0001

080044bc <_fwalk_reent>:
 80044bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044c0:	4606      	mov	r6, r0
 80044c2:	4688      	mov	r8, r1
 80044c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044c8:	2700      	movs	r7, #0
 80044ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044ce:	f1b9 0901 	subs.w	r9, r9, #1
 80044d2:	d505      	bpl.n	80044e0 <_fwalk_reent+0x24>
 80044d4:	6824      	ldr	r4, [r4, #0]
 80044d6:	2c00      	cmp	r4, #0
 80044d8:	d1f7      	bne.n	80044ca <_fwalk_reent+0xe>
 80044da:	4638      	mov	r0, r7
 80044dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044e0:	89ab      	ldrh	r3, [r5, #12]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d907      	bls.n	80044f6 <_fwalk_reent+0x3a>
 80044e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044ea:	3301      	adds	r3, #1
 80044ec:	d003      	beq.n	80044f6 <_fwalk_reent+0x3a>
 80044ee:	4629      	mov	r1, r5
 80044f0:	4630      	mov	r0, r6
 80044f2:	47c0      	blx	r8
 80044f4:	4307      	orrs	r7, r0
 80044f6:	3568      	adds	r5, #104	; 0x68
 80044f8:	e7e9      	b.n	80044ce <_fwalk_reent+0x12>

080044fa <__retarget_lock_init_recursive>:
 80044fa:	4770      	bx	lr

080044fc <__retarget_lock_acquire_recursive>:
 80044fc:	4770      	bx	lr

080044fe <__retarget_lock_release_recursive>:
 80044fe:	4770      	bx	lr

08004500 <_lseek_r>:
 8004500:	b538      	push	{r3, r4, r5, lr}
 8004502:	4d07      	ldr	r5, [pc, #28]	; (8004520 <_lseek_r+0x20>)
 8004504:	4604      	mov	r4, r0
 8004506:	4608      	mov	r0, r1
 8004508:	4611      	mov	r1, r2
 800450a:	2200      	movs	r2, #0
 800450c:	602a      	str	r2, [r5, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	f7fc fb78 	bl	8000c04 <_lseek>
 8004514:	1c43      	adds	r3, r0, #1
 8004516:	d102      	bne.n	800451e <_lseek_r+0x1e>
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	b103      	cbz	r3, 800451e <_lseek_r+0x1e>
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	bd38      	pop	{r3, r4, r5, pc}
 8004520:	200001d8 	.word	0x200001d8

08004524 <__swhatbuf_r>:
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	460e      	mov	r6, r1
 8004528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800452c:	2900      	cmp	r1, #0
 800452e:	b096      	sub	sp, #88	; 0x58
 8004530:	4614      	mov	r4, r2
 8004532:	461d      	mov	r5, r3
 8004534:	da08      	bge.n	8004548 <__swhatbuf_r+0x24>
 8004536:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	602a      	str	r2, [r5, #0]
 800453e:	061a      	lsls	r2, r3, #24
 8004540:	d410      	bmi.n	8004564 <__swhatbuf_r+0x40>
 8004542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004546:	e00e      	b.n	8004566 <__swhatbuf_r+0x42>
 8004548:	466a      	mov	r2, sp
 800454a:	f000 fde1 	bl	8005110 <_fstat_r>
 800454e:	2800      	cmp	r0, #0
 8004550:	dbf1      	blt.n	8004536 <__swhatbuf_r+0x12>
 8004552:	9a01      	ldr	r2, [sp, #4]
 8004554:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004558:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800455c:	425a      	negs	r2, r3
 800455e:	415a      	adcs	r2, r3
 8004560:	602a      	str	r2, [r5, #0]
 8004562:	e7ee      	b.n	8004542 <__swhatbuf_r+0x1e>
 8004564:	2340      	movs	r3, #64	; 0x40
 8004566:	2000      	movs	r0, #0
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	b016      	add	sp, #88	; 0x58
 800456c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004570 <__smakebuf_r>:
 8004570:	898b      	ldrh	r3, [r1, #12]
 8004572:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004574:	079d      	lsls	r5, r3, #30
 8004576:	4606      	mov	r6, r0
 8004578:	460c      	mov	r4, r1
 800457a:	d507      	bpl.n	800458c <__smakebuf_r+0x1c>
 800457c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	6123      	str	r3, [r4, #16]
 8004584:	2301      	movs	r3, #1
 8004586:	6163      	str	r3, [r4, #20]
 8004588:	b002      	add	sp, #8
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	ab01      	add	r3, sp, #4
 800458e:	466a      	mov	r2, sp
 8004590:	f7ff ffc8 	bl	8004524 <__swhatbuf_r>
 8004594:	9900      	ldr	r1, [sp, #0]
 8004596:	4605      	mov	r5, r0
 8004598:	4630      	mov	r0, r6
 800459a:	f000 f895 	bl	80046c8 <_malloc_r>
 800459e:	b948      	cbnz	r0, 80045b4 <__smakebuf_r+0x44>
 80045a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045a4:	059a      	lsls	r2, r3, #22
 80045a6:	d4ef      	bmi.n	8004588 <__smakebuf_r+0x18>
 80045a8:	f023 0303 	bic.w	r3, r3, #3
 80045ac:	f043 0302 	orr.w	r3, r3, #2
 80045b0:	81a3      	strh	r3, [r4, #12]
 80045b2:	e7e3      	b.n	800457c <__smakebuf_r+0xc>
 80045b4:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <__smakebuf_r+0x7c>)
 80045b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80045b8:	89a3      	ldrh	r3, [r4, #12]
 80045ba:	6020      	str	r0, [r4, #0]
 80045bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c0:	81a3      	strh	r3, [r4, #12]
 80045c2:	9b00      	ldr	r3, [sp, #0]
 80045c4:	6163      	str	r3, [r4, #20]
 80045c6:	9b01      	ldr	r3, [sp, #4]
 80045c8:	6120      	str	r0, [r4, #16]
 80045ca:	b15b      	cbz	r3, 80045e4 <__smakebuf_r+0x74>
 80045cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045d0:	4630      	mov	r0, r6
 80045d2:	f000 fdaf 	bl	8005134 <_isatty_r>
 80045d6:	b128      	cbz	r0, 80045e4 <__smakebuf_r+0x74>
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	f023 0303 	bic.w	r3, r3, #3
 80045de:	f043 0301 	orr.w	r3, r3, #1
 80045e2:	81a3      	strh	r3, [r4, #12]
 80045e4:	89a0      	ldrh	r0, [r4, #12]
 80045e6:	4305      	orrs	r5, r0
 80045e8:	81a5      	strh	r5, [r4, #12]
 80045ea:	e7cd      	b.n	8004588 <__smakebuf_r+0x18>
 80045ec:	08004359 	.word	0x08004359

080045f0 <_free_r>:
 80045f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045f2:	2900      	cmp	r1, #0
 80045f4:	d044      	beq.n	8004680 <_free_r+0x90>
 80045f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045fa:	9001      	str	r0, [sp, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f1a1 0404 	sub.w	r4, r1, #4
 8004602:	bfb8      	it	lt
 8004604:	18e4      	addlt	r4, r4, r3
 8004606:	f000 fdb3 	bl	8005170 <__malloc_lock>
 800460a:	4a1e      	ldr	r2, [pc, #120]	; (8004684 <_free_r+0x94>)
 800460c:	9801      	ldr	r0, [sp, #4]
 800460e:	6813      	ldr	r3, [r2, #0]
 8004610:	b933      	cbnz	r3, 8004620 <_free_r+0x30>
 8004612:	6063      	str	r3, [r4, #4]
 8004614:	6014      	str	r4, [r2, #0]
 8004616:	b003      	add	sp, #12
 8004618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800461c:	f000 bdae 	b.w	800517c <__malloc_unlock>
 8004620:	42a3      	cmp	r3, r4
 8004622:	d908      	bls.n	8004636 <_free_r+0x46>
 8004624:	6825      	ldr	r5, [r4, #0]
 8004626:	1961      	adds	r1, r4, r5
 8004628:	428b      	cmp	r3, r1
 800462a:	bf01      	itttt	eq
 800462c:	6819      	ldreq	r1, [r3, #0]
 800462e:	685b      	ldreq	r3, [r3, #4]
 8004630:	1949      	addeq	r1, r1, r5
 8004632:	6021      	streq	r1, [r4, #0]
 8004634:	e7ed      	b.n	8004612 <_free_r+0x22>
 8004636:	461a      	mov	r2, r3
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	b10b      	cbz	r3, 8004640 <_free_r+0x50>
 800463c:	42a3      	cmp	r3, r4
 800463e:	d9fa      	bls.n	8004636 <_free_r+0x46>
 8004640:	6811      	ldr	r1, [r2, #0]
 8004642:	1855      	adds	r5, r2, r1
 8004644:	42a5      	cmp	r5, r4
 8004646:	d10b      	bne.n	8004660 <_free_r+0x70>
 8004648:	6824      	ldr	r4, [r4, #0]
 800464a:	4421      	add	r1, r4
 800464c:	1854      	adds	r4, r2, r1
 800464e:	42a3      	cmp	r3, r4
 8004650:	6011      	str	r1, [r2, #0]
 8004652:	d1e0      	bne.n	8004616 <_free_r+0x26>
 8004654:	681c      	ldr	r4, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	6053      	str	r3, [r2, #4]
 800465a:	4421      	add	r1, r4
 800465c:	6011      	str	r1, [r2, #0]
 800465e:	e7da      	b.n	8004616 <_free_r+0x26>
 8004660:	d902      	bls.n	8004668 <_free_r+0x78>
 8004662:	230c      	movs	r3, #12
 8004664:	6003      	str	r3, [r0, #0]
 8004666:	e7d6      	b.n	8004616 <_free_r+0x26>
 8004668:	6825      	ldr	r5, [r4, #0]
 800466a:	1961      	adds	r1, r4, r5
 800466c:	428b      	cmp	r3, r1
 800466e:	bf04      	itt	eq
 8004670:	6819      	ldreq	r1, [r3, #0]
 8004672:	685b      	ldreq	r3, [r3, #4]
 8004674:	6063      	str	r3, [r4, #4]
 8004676:	bf04      	itt	eq
 8004678:	1949      	addeq	r1, r1, r5
 800467a:	6021      	streq	r1, [r4, #0]
 800467c:	6054      	str	r4, [r2, #4]
 800467e:	e7ca      	b.n	8004616 <_free_r+0x26>
 8004680:	b003      	add	sp, #12
 8004682:	bd30      	pop	{r4, r5, pc}
 8004684:	200001d0 	.word	0x200001d0

08004688 <sbrk_aligned>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4e0e      	ldr	r6, [pc, #56]	; (80046c4 <sbrk_aligned+0x3c>)
 800468c:	460c      	mov	r4, r1
 800468e:	6831      	ldr	r1, [r6, #0]
 8004690:	4605      	mov	r5, r0
 8004692:	b911      	cbnz	r1, 800469a <sbrk_aligned+0x12>
 8004694:	f000 fbc2 	bl	8004e1c <_sbrk_r>
 8004698:	6030      	str	r0, [r6, #0]
 800469a:	4621      	mov	r1, r4
 800469c:	4628      	mov	r0, r5
 800469e:	f000 fbbd 	bl	8004e1c <_sbrk_r>
 80046a2:	1c43      	adds	r3, r0, #1
 80046a4:	d00a      	beq.n	80046bc <sbrk_aligned+0x34>
 80046a6:	1cc4      	adds	r4, r0, #3
 80046a8:	f024 0403 	bic.w	r4, r4, #3
 80046ac:	42a0      	cmp	r0, r4
 80046ae:	d007      	beq.n	80046c0 <sbrk_aligned+0x38>
 80046b0:	1a21      	subs	r1, r4, r0
 80046b2:	4628      	mov	r0, r5
 80046b4:	f000 fbb2 	bl	8004e1c <_sbrk_r>
 80046b8:	3001      	adds	r0, #1
 80046ba:	d101      	bne.n	80046c0 <sbrk_aligned+0x38>
 80046bc:	f04f 34ff 	mov.w	r4, #4294967295
 80046c0:	4620      	mov	r0, r4
 80046c2:	bd70      	pop	{r4, r5, r6, pc}
 80046c4:	200001d4 	.word	0x200001d4

080046c8 <_malloc_r>:
 80046c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046cc:	1ccd      	adds	r5, r1, #3
 80046ce:	f025 0503 	bic.w	r5, r5, #3
 80046d2:	3508      	adds	r5, #8
 80046d4:	2d0c      	cmp	r5, #12
 80046d6:	bf38      	it	cc
 80046d8:	250c      	movcc	r5, #12
 80046da:	2d00      	cmp	r5, #0
 80046dc:	4607      	mov	r7, r0
 80046de:	db01      	blt.n	80046e4 <_malloc_r+0x1c>
 80046e0:	42a9      	cmp	r1, r5
 80046e2:	d905      	bls.n	80046f0 <_malloc_r+0x28>
 80046e4:	230c      	movs	r3, #12
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	2600      	movs	r6, #0
 80046ea:	4630      	mov	r0, r6
 80046ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046f0:	4e2e      	ldr	r6, [pc, #184]	; (80047ac <_malloc_r+0xe4>)
 80046f2:	f000 fd3d 	bl	8005170 <__malloc_lock>
 80046f6:	6833      	ldr	r3, [r6, #0]
 80046f8:	461c      	mov	r4, r3
 80046fa:	bb34      	cbnz	r4, 800474a <_malloc_r+0x82>
 80046fc:	4629      	mov	r1, r5
 80046fe:	4638      	mov	r0, r7
 8004700:	f7ff ffc2 	bl	8004688 <sbrk_aligned>
 8004704:	1c43      	adds	r3, r0, #1
 8004706:	4604      	mov	r4, r0
 8004708:	d14d      	bne.n	80047a6 <_malloc_r+0xde>
 800470a:	6834      	ldr	r4, [r6, #0]
 800470c:	4626      	mov	r6, r4
 800470e:	2e00      	cmp	r6, #0
 8004710:	d140      	bne.n	8004794 <_malloc_r+0xcc>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	4631      	mov	r1, r6
 8004716:	4638      	mov	r0, r7
 8004718:	eb04 0803 	add.w	r8, r4, r3
 800471c:	f000 fb7e 	bl	8004e1c <_sbrk_r>
 8004720:	4580      	cmp	r8, r0
 8004722:	d13a      	bne.n	800479a <_malloc_r+0xd2>
 8004724:	6821      	ldr	r1, [r4, #0]
 8004726:	3503      	adds	r5, #3
 8004728:	1a6d      	subs	r5, r5, r1
 800472a:	f025 0503 	bic.w	r5, r5, #3
 800472e:	3508      	adds	r5, #8
 8004730:	2d0c      	cmp	r5, #12
 8004732:	bf38      	it	cc
 8004734:	250c      	movcc	r5, #12
 8004736:	4629      	mov	r1, r5
 8004738:	4638      	mov	r0, r7
 800473a:	f7ff ffa5 	bl	8004688 <sbrk_aligned>
 800473e:	3001      	adds	r0, #1
 8004740:	d02b      	beq.n	800479a <_malloc_r+0xd2>
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	442b      	add	r3, r5
 8004746:	6023      	str	r3, [r4, #0]
 8004748:	e00e      	b.n	8004768 <_malloc_r+0xa0>
 800474a:	6822      	ldr	r2, [r4, #0]
 800474c:	1b52      	subs	r2, r2, r5
 800474e:	d41e      	bmi.n	800478e <_malloc_r+0xc6>
 8004750:	2a0b      	cmp	r2, #11
 8004752:	d916      	bls.n	8004782 <_malloc_r+0xba>
 8004754:	1961      	adds	r1, r4, r5
 8004756:	42a3      	cmp	r3, r4
 8004758:	6025      	str	r5, [r4, #0]
 800475a:	bf18      	it	ne
 800475c:	6059      	strne	r1, [r3, #4]
 800475e:	6863      	ldr	r3, [r4, #4]
 8004760:	bf08      	it	eq
 8004762:	6031      	streq	r1, [r6, #0]
 8004764:	5162      	str	r2, [r4, r5]
 8004766:	604b      	str	r3, [r1, #4]
 8004768:	4638      	mov	r0, r7
 800476a:	f104 060b 	add.w	r6, r4, #11
 800476e:	f000 fd05 	bl	800517c <__malloc_unlock>
 8004772:	f026 0607 	bic.w	r6, r6, #7
 8004776:	1d23      	adds	r3, r4, #4
 8004778:	1af2      	subs	r2, r6, r3
 800477a:	d0b6      	beq.n	80046ea <_malloc_r+0x22>
 800477c:	1b9b      	subs	r3, r3, r6
 800477e:	50a3      	str	r3, [r4, r2]
 8004780:	e7b3      	b.n	80046ea <_malloc_r+0x22>
 8004782:	6862      	ldr	r2, [r4, #4]
 8004784:	42a3      	cmp	r3, r4
 8004786:	bf0c      	ite	eq
 8004788:	6032      	streq	r2, [r6, #0]
 800478a:	605a      	strne	r2, [r3, #4]
 800478c:	e7ec      	b.n	8004768 <_malloc_r+0xa0>
 800478e:	4623      	mov	r3, r4
 8004790:	6864      	ldr	r4, [r4, #4]
 8004792:	e7b2      	b.n	80046fa <_malloc_r+0x32>
 8004794:	4634      	mov	r4, r6
 8004796:	6876      	ldr	r6, [r6, #4]
 8004798:	e7b9      	b.n	800470e <_malloc_r+0x46>
 800479a:	230c      	movs	r3, #12
 800479c:	603b      	str	r3, [r7, #0]
 800479e:	4638      	mov	r0, r7
 80047a0:	f000 fcec 	bl	800517c <__malloc_unlock>
 80047a4:	e7a1      	b.n	80046ea <_malloc_r+0x22>
 80047a6:	6025      	str	r5, [r4, #0]
 80047a8:	e7de      	b.n	8004768 <_malloc_r+0xa0>
 80047aa:	bf00      	nop
 80047ac:	200001d0 	.word	0x200001d0

080047b0 <_sungetc_r>:
 80047b0:	b538      	push	{r3, r4, r5, lr}
 80047b2:	1c4b      	adds	r3, r1, #1
 80047b4:	4614      	mov	r4, r2
 80047b6:	d103      	bne.n	80047c0 <_sungetc_r+0x10>
 80047b8:	f04f 35ff 	mov.w	r5, #4294967295
 80047bc:	4628      	mov	r0, r5
 80047be:	bd38      	pop	{r3, r4, r5, pc}
 80047c0:	8993      	ldrh	r3, [r2, #12]
 80047c2:	f023 0320 	bic.w	r3, r3, #32
 80047c6:	8193      	strh	r3, [r2, #12]
 80047c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047ca:	6852      	ldr	r2, [r2, #4]
 80047cc:	b2cd      	uxtb	r5, r1
 80047ce:	b18b      	cbz	r3, 80047f4 <_sungetc_r+0x44>
 80047d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047d2:	4293      	cmp	r3, r2
 80047d4:	dd08      	ble.n	80047e8 <_sungetc_r+0x38>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	1e5a      	subs	r2, r3, #1
 80047da:	6022      	str	r2, [r4, #0]
 80047dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80047e0:	6863      	ldr	r3, [r4, #4]
 80047e2:	3301      	adds	r3, #1
 80047e4:	6063      	str	r3, [r4, #4]
 80047e6:	e7e9      	b.n	80047bc <_sungetc_r+0xc>
 80047e8:	4621      	mov	r1, r4
 80047ea:	f000 fc57 	bl	800509c <__submore>
 80047ee:	2800      	cmp	r0, #0
 80047f0:	d0f1      	beq.n	80047d6 <_sungetc_r+0x26>
 80047f2:	e7e1      	b.n	80047b8 <_sungetc_r+0x8>
 80047f4:	6921      	ldr	r1, [r4, #16]
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	b151      	cbz	r1, 8004810 <_sungetc_r+0x60>
 80047fa:	4299      	cmp	r1, r3
 80047fc:	d208      	bcs.n	8004810 <_sungetc_r+0x60>
 80047fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004802:	42a9      	cmp	r1, r5
 8004804:	d104      	bne.n	8004810 <_sungetc_r+0x60>
 8004806:	3b01      	subs	r3, #1
 8004808:	3201      	adds	r2, #1
 800480a:	6023      	str	r3, [r4, #0]
 800480c:	6062      	str	r2, [r4, #4]
 800480e:	e7d5      	b.n	80047bc <_sungetc_r+0xc>
 8004810:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004818:	6363      	str	r3, [r4, #52]	; 0x34
 800481a:	2303      	movs	r3, #3
 800481c:	63a3      	str	r3, [r4, #56]	; 0x38
 800481e:	4623      	mov	r3, r4
 8004820:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	2301      	movs	r3, #1
 8004828:	e7dc      	b.n	80047e4 <_sungetc_r+0x34>

0800482a <__ssrefill_r>:
 800482a:	b510      	push	{r4, lr}
 800482c:	460c      	mov	r4, r1
 800482e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004830:	b169      	cbz	r1, 800484e <__ssrefill_r+0x24>
 8004832:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004836:	4299      	cmp	r1, r3
 8004838:	d001      	beq.n	800483e <__ssrefill_r+0x14>
 800483a:	f7ff fed9 	bl	80045f0 <_free_r>
 800483e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004840:	6063      	str	r3, [r4, #4]
 8004842:	2000      	movs	r0, #0
 8004844:	6360      	str	r0, [r4, #52]	; 0x34
 8004846:	b113      	cbz	r3, 800484e <__ssrefill_r+0x24>
 8004848:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800484a:	6023      	str	r3, [r4, #0]
 800484c:	bd10      	pop	{r4, pc}
 800484e:	6923      	ldr	r3, [r4, #16]
 8004850:	6023      	str	r3, [r4, #0]
 8004852:	2300      	movs	r3, #0
 8004854:	6063      	str	r3, [r4, #4]
 8004856:	89a3      	ldrh	r3, [r4, #12]
 8004858:	f043 0320 	orr.w	r3, r3, #32
 800485c:	81a3      	strh	r3, [r4, #12]
 800485e:	f04f 30ff 	mov.w	r0, #4294967295
 8004862:	e7f3      	b.n	800484c <__ssrefill_r+0x22>

08004864 <__ssvfiscanf_r>:
 8004864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004868:	460c      	mov	r4, r1
 800486a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800486e:	2100      	movs	r1, #0
 8004870:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004874:	49a6      	ldr	r1, [pc, #664]	; (8004b10 <__ssvfiscanf_r+0x2ac>)
 8004876:	91a0      	str	r1, [sp, #640]	; 0x280
 8004878:	f10d 0804 	add.w	r8, sp, #4
 800487c:	49a5      	ldr	r1, [pc, #660]	; (8004b14 <__ssvfiscanf_r+0x2b0>)
 800487e:	4fa6      	ldr	r7, [pc, #664]	; (8004b18 <__ssvfiscanf_r+0x2b4>)
 8004880:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004b1c <__ssvfiscanf_r+0x2b8>
 8004884:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004888:	4606      	mov	r6, r0
 800488a:	91a1      	str	r1, [sp, #644]	; 0x284
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	7813      	ldrb	r3, [r2, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 815a 	beq.w	8004b4a <__ssvfiscanf_r+0x2e6>
 8004896:	5dd9      	ldrb	r1, [r3, r7]
 8004898:	f011 0108 	ands.w	r1, r1, #8
 800489c:	f102 0501 	add.w	r5, r2, #1
 80048a0:	d019      	beq.n	80048d6 <__ssvfiscanf_r+0x72>
 80048a2:	6863      	ldr	r3, [r4, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	dd0f      	ble.n	80048c8 <__ssvfiscanf_r+0x64>
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	781a      	ldrb	r2, [r3, #0]
 80048ac:	5cba      	ldrb	r2, [r7, r2]
 80048ae:	0712      	lsls	r2, r2, #28
 80048b0:	d401      	bmi.n	80048b6 <__ssvfiscanf_r+0x52>
 80048b2:	462a      	mov	r2, r5
 80048b4:	e7eb      	b.n	800488e <__ssvfiscanf_r+0x2a>
 80048b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80048b8:	3201      	adds	r2, #1
 80048ba:	9245      	str	r2, [sp, #276]	; 0x114
 80048bc:	6862      	ldr	r2, [r4, #4]
 80048be:	3301      	adds	r3, #1
 80048c0:	3a01      	subs	r2, #1
 80048c2:	6062      	str	r2, [r4, #4]
 80048c4:	6023      	str	r3, [r4, #0]
 80048c6:	e7ec      	b.n	80048a2 <__ssvfiscanf_r+0x3e>
 80048c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80048ca:	4621      	mov	r1, r4
 80048cc:	4630      	mov	r0, r6
 80048ce:	4798      	blx	r3
 80048d0:	2800      	cmp	r0, #0
 80048d2:	d0e9      	beq.n	80048a8 <__ssvfiscanf_r+0x44>
 80048d4:	e7ed      	b.n	80048b2 <__ssvfiscanf_r+0x4e>
 80048d6:	2b25      	cmp	r3, #37	; 0x25
 80048d8:	d012      	beq.n	8004900 <__ssvfiscanf_r+0x9c>
 80048da:	469a      	mov	sl, r3
 80048dc:	6863      	ldr	r3, [r4, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f340 8091 	ble.w	8004a06 <__ssvfiscanf_r+0x1a2>
 80048e4:	6822      	ldr	r2, [r4, #0]
 80048e6:	7813      	ldrb	r3, [r2, #0]
 80048e8:	4553      	cmp	r3, sl
 80048ea:	f040 812e 	bne.w	8004b4a <__ssvfiscanf_r+0x2e6>
 80048ee:	6863      	ldr	r3, [r4, #4]
 80048f0:	3b01      	subs	r3, #1
 80048f2:	6063      	str	r3, [r4, #4]
 80048f4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80048f6:	3201      	adds	r2, #1
 80048f8:	3301      	adds	r3, #1
 80048fa:	6022      	str	r2, [r4, #0]
 80048fc:	9345      	str	r3, [sp, #276]	; 0x114
 80048fe:	e7d8      	b.n	80048b2 <__ssvfiscanf_r+0x4e>
 8004900:	9141      	str	r1, [sp, #260]	; 0x104
 8004902:	9143      	str	r1, [sp, #268]	; 0x10c
 8004904:	7853      	ldrb	r3, [r2, #1]
 8004906:	2b2a      	cmp	r3, #42	; 0x2a
 8004908:	bf02      	ittt	eq
 800490a:	2310      	moveq	r3, #16
 800490c:	1c95      	addeq	r5, r2, #2
 800490e:	9341      	streq	r3, [sp, #260]	; 0x104
 8004910:	220a      	movs	r2, #10
 8004912:	46aa      	mov	sl, r5
 8004914:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004918:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800491c:	2b09      	cmp	r3, #9
 800491e:	d91d      	bls.n	800495c <__ssvfiscanf_r+0xf8>
 8004920:	487e      	ldr	r0, [pc, #504]	; (8004b1c <__ssvfiscanf_r+0x2b8>)
 8004922:	2203      	movs	r2, #3
 8004924:	f7fb fc6c 	bl	8000200 <memchr>
 8004928:	b140      	cbz	r0, 800493c <__ssvfiscanf_r+0xd8>
 800492a:	2301      	movs	r3, #1
 800492c:	eba0 0009 	sub.w	r0, r0, r9
 8004930:	fa03 f000 	lsl.w	r0, r3, r0
 8004934:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004936:	4318      	orrs	r0, r3
 8004938:	9041      	str	r0, [sp, #260]	; 0x104
 800493a:	4655      	mov	r5, sl
 800493c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004940:	2b78      	cmp	r3, #120	; 0x78
 8004942:	d806      	bhi.n	8004952 <__ssvfiscanf_r+0xee>
 8004944:	2b57      	cmp	r3, #87	; 0x57
 8004946:	d810      	bhi.n	800496a <__ssvfiscanf_r+0x106>
 8004948:	2b25      	cmp	r3, #37	; 0x25
 800494a:	d0c6      	beq.n	80048da <__ssvfiscanf_r+0x76>
 800494c:	d856      	bhi.n	80049fc <__ssvfiscanf_r+0x198>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d064      	beq.n	8004a1c <__ssvfiscanf_r+0x1b8>
 8004952:	2303      	movs	r3, #3
 8004954:	9347      	str	r3, [sp, #284]	; 0x11c
 8004956:	230a      	movs	r3, #10
 8004958:	9342      	str	r3, [sp, #264]	; 0x108
 800495a:	e071      	b.n	8004a40 <__ssvfiscanf_r+0x1dc>
 800495c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800495e:	fb02 1103 	mla	r1, r2, r3, r1
 8004962:	3930      	subs	r1, #48	; 0x30
 8004964:	9143      	str	r1, [sp, #268]	; 0x10c
 8004966:	4655      	mov	r5, sl
 8004968:	e7d3      	b.n	8004912 <__ssvfiscanf_r+0xae>
 800496a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800496e:	2a20      	cmp	r2, #32
 8004970:	d8ef      	bhi.n	8004952 <__ssvfiscanf_r+0xee>
 8004972:	a101      	add	r1, pc, #4	; (adr r1, 8004978 <__ssvfiscanf_r+0x114>)
 8004974:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004978:	08004a2b 	.word	0x08004a2b
 800497c:	08004953 	.word	0x08004953
 8004980:	08004953 	.word	0x08004953
 8004984:	08004a89 	.word	0x08004a89
 8004988:	08004953 	.word	0x08004953
 800498c:	08004953 	.word	0x08004953
 8004990:	08004953 	.word	0x08004953
 8004994:	08004953 	.word	0x08004953
 8004998:	08004953 	.word	0x08004953
 800499c:	08004953 	.word	0x08004953
 80049a0:	08004953 	.word	0x08004953
 80049a4:	08004a9f 	.word	0x08004a9f
 80049a8:	08004a75 	.word	0x08004a75
 80049ac:	08004a03 	.word	0x08004a03
 80049b0:	08004a03 	.word	0x08004a03
 80049b4:	08004a03 	.word	0x08004a03
 80049b8:	08004953 	.word	0x08004953
 80049bc:	08004a79 	.word	0x08004a79
 80049c0:	08004953 	.word	0x08004953
 80049c4:	08004953 	.word	0x08004953
 80049c8:	08004953 	.word	0x08004953
 80049cc:	08004953 	.word	0x08004953
 80049d0:	08004aaf 	.word	0x08004aaf
 80049d4:	08004a81 	.word	0x08004a81
 80049d8:	08004a23 	.word	0x08004a23
 80049dc:	08004953 	.word	0x08004953
 80049e0:	08004953 	.word	0x08004953
 80049e4:	08004aab 	.word	0x08004aab
 80049e8:	08004953 	.word	0x08004953
 80049ec:	08004a75 	.word	0x08004a75
 80049f0:	08004953 	.word	0x08004953
 80049f4:	08004953 	.word	0x08004953
 80049f8:	08004a2b 	.word	0x08004a2b
 80049fc:	3b45      	subs	r3, #69	; 0x45
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d8a7      	bhi.n	8004952 <__ssvfiscanf_r+0xee>
 8004a02:	2305      	movs	r3, #5
 8004a04:	e01b      	b.n	8004a3e <__ssvfiscanf_r+0x1da>
 8004a06:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004a08:	4621      	mov	r1, r4
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	4798      	blx	r3
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	f43f af68 	beq.w	80048e4 <__ssvfiscanf_r+0x80>
 8004a14:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004a16:	2800      	cmp	r0, #0
 8004a18:	f040 808d 	bne.w	8004b36 <__ssvfiscanf_r+0x2d2>
 8004a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a20:	e08f      	b.n	8004b42 <__ssvfiscanf_r+0x2de>
 8004a22:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004a24:	f042 0220 	orr.w	r2, r2, #32
 8004a28:	9241      	str	r2, [sp, #260]	; 0x104
 8004a2a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a30:	9241      	str	r2, [sp, #260]	; 0x104
 8004a32:	2210      	movs	r2, #16
 8004a34:	2b6f      	cmp	r3, #111	; 0x6f
 8004a36:	9242      	str	r2, [sp, #264]	; 0x108
 8004a38:	bf34      	ite	cc
 8004a3a:	2303      	movcc	r3, #3
 8004a3c:	2304      	movcs	r3, #4
 8004a3e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004a40:	6863      	ldr	r3, [r4, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	dd42      	ble.n	8004acc <__ssvfiscanf_r+0x268>
 8004a46:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004a48:	0659      	lsls	r1, r3, #25
 8004a4a:	d404      	bmi.n	8004a56 <__ssvfiscanf_r+0x1f2>
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	781a      	ldrb	r2, [r3, #0]
 8004a50:	5cba      	ldrb	r2, [r7, r2]
 8004a52:	0712      	lsls	r2, r2, #28
 8004a54:	d441      	bmi.n	8004ada <__ssvfiscanf_r+0x276>
 8004a56:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	dc50      	bgt.n	8004afe <__ssvfiscanf_r+0x29a>
 8004a5c:	466b      	mov	r3, sp
 8004a5e:	4622      	mov	r2, r4
 8004a60:	a941      	add	r1, sp, #260	; 0x104
 8004a62:	4630      	mov	r0, r6
 8004a64:	f000 f876 	bl	8004b54 <_scanf_chars>
 8004a68:	2801      	cmp	r0, #1
 8004a6a:	d06e      	beq.n	8004b4a <__ssvfiscanf_r+0x2e6>
 8004a6c:	2802      	cmp	r0, #2
 8004a6e:	f47f af20 	bne.w	80048b2 <__ssvfiscanf_r+0x4e>
 8004a72:	e7cf      	b.n	8004a14 <__ssvfiscanf_r+0x1b0>
 8004a74:	220a      	movs	r2, #10
 8004a76:	e7dd      	b.n	8004a34 <__ssvfiscanf_r+0x1d0>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	9342      	str	r3, [sp, #264]	; 0x108
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e7de      	b.n	8004a3e <__ssvfiscanf_r+0x1da>
 8004a80:	2308      	movs	r3, #8
 8004a82:	9342      	str	r3, [sp, #264]	; 0x108
 8004a84:	2304      	movs	r3, #4
 8004a86:	e7da      	b.n	8004a3e <__ssvfiscanf_r+0x1da>
 8004a88:	4629      	mov	r1, r5
 8004a8a:	4640      	mov	r0, r8
 8004a8c:	f000 f9d6 	bl	8004e3c <__sccl>
 8004a90:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a96:	9341      	str	r3, [sp, #260]	; 0x104
 8004a98:	4605      	mov	r5, r0
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e7cf      	b.n	8004a3e <__ssvfiscanf_r+0x1da>
 8004a9e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aa4:	9341      	str	r3, [sp, #260]	; 0x104
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	e7c9      	b.n	8004a3e <__ssvfiscanf_r+0x1da>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e7c7      	b.n	8004a3e <__ssvfiscanf_r+0x1da>
 8004aae:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004ab0:	06c3      	lsls	r3, r0, #27
 8004ab2:	f53f aefe 	bmi.w	80048b2 <__ssvfiscanf_r+0x4e>
 8004ab6:	9b00      	ldr	r3, [sp, #0]
 8004ab8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004aba:	1d19      	adds	r1, r3, #4
 8004abc:	9100      	str	r1, [sp, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f010 0f01 	tst.w	r0, #1
 8004ac4:	bf14      	ite	ne
 8004ac6:	801a      	strhne	r2, [r3, #0]
 8004ac8:	601a      	streq	r2, [r3, #0]
 8004aca:	e6f2      	b.n	80048b2 <__ssvfiscanf_r+0x4e>
 8004acc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004ace:	4621      	mov	r1, r4
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	4798      	blx	r3
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	d0b6      	beq.n	8004a46 <__ssvfiscanf_r+0x1e2>
 8004ad8:	e79c      	b.n	8004a14 <__ssvfiscanf_r+0x1b0>
 8004ada:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004adc:	3201      	adds	r2, #1
 8004ade:	9245      	str	r2, [sp, #276]	; 0x114
 8004ae0:	6862      	ldr	r2, [r4, #4]
 8004ae2:	3a01      	subs	r2, #1
 8004ae4:	2a00      	cmp	r2, #0
 8004ae6:	6062      	str	r2, [r4, #4]
 8004ae8:	dd02      	ble.n	8004af0 <__ssvfiscanf_r+0x28c>
 8004aea:	3301      	adds	r3, #1
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	e7ad      	b.n	8004a4c <__ssvfiscanf_r+0x1e8>
 8004af0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004af2:	4621      	mov	r1, r4
 8004af4:	4630      	mov	r0, r6
 8004af6:	4798      	blx	r3
 8004af8:	2800      	cmp	r0, #0
 8004afa:	d0a7      	beq.n	8004a4c <__ssvfiscanf_r+0x1e8>
 8004afc:	e78a      	b.n	8004a14 <__ssvfiscanf_r+0x1b0>
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	dc0e      	bgt.n	8004b20 <__ssvfiscanf_r+0x2bc>
 8004b02:	466b      	mov	r3, sp
 8004b04:	4622      	mov	r2, r4
 8004b06:	a941      	add	r1, sp, #260	; 0x104
 8004b08:	4630      	mov	r0, r6
 8004b0a:	f000 f87d 	bl	8004c08 <_scanf_i>
 8004b0e:	e7ab      	b.n	8004a68 <__ssvfiscanf_r+0x204>
 8004b10:	080047b1 	.word	0x080047b1
 8004b14:	0800482b 	.word	0x0800482b
 8004b18:	08005318 	.word	0x08005318
 8004b1c:	080052f8 	.word	0x080052f8
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <__ssvfiscanf_r+0x2ec>)
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f43f aec5 	beq.w	80048b2 <__ssvfiscanf_r+0x4e>
 8004b28:	466b      	mov	r3, sp
 8004b2a:	4622      	mov	r2, r4
 8004b2c:	a941      	add	r1, sp, #260	; 0x104
 8004b2e:	4630      	mov	r0, r6
 8004b30:	f3af 8000 	nop.w
 8004b34:	e798      	b.n	8004a68 <__ssvfiscanf_r+0x204>
 8004b36:	89a3      	ldrh	r3, [r4, #12]
 8004b38:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004b3c:	bf18      	it	ne
 8004b3e:	f04f 30ff 	movne.w	r0, #4294967295
 8004b42:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8004b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b4a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004b4c:	e7f9      	b.n	8004b42 <__ssvfiscanf_r+0x2de>
 8004b4e:	bf00      	nop
 8004b50:	00000000 	.word	0x00000000

08004b54 <_scanf_chars>:
 8004b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b58:	4615      	mov	r5, r2
 8004b5a:	688a      	ldr	r2, [r1, #8]
 8004b5c:	4680      	mov	r8, r0
 8004b5e:	460c      	mov	r4, r1
 8004b60:	b932      	cbnz	r2, 8004b70 <_scanf_chars+0x1c>
 8004b62:	698a      	ldr	r2, [r1, #24]
 8004b64:	2a00      	cmp	r2, #0
 8004b66:	bf0c      	ite	eq
 8004b68:	2201      	moveq	r2, #1
 8004b6a:	f04f 32ff 	movne.w	r2, #4294967295
 8004b6e:	608a      	str	r2, [r1, #8]
 8004b70:	6822      	ldr	r2, [r4, #0]
 8004b72:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004c04 <_scanf_chars+0xb0>
 8004b76:	06d1      	lsls	r1, r2, #27
 8004b78:	bf5f      	itttt	pl
 8004b7a:	681a      	ldrpl	r2, [r3, #0]
 8004b7c:	1d11      	addpl	r1, r2, #4
 8004b7e:	6019      	strpl	r1, [r3, #0]
 8004b80:	6816      	ldrpl	r6, [r2, #0]
 8004b82:	2700      	movs	r7, #0
 8004b84:	69a0      	ldr	r0, [r4, #24]
 8004b86:	b188      	cbz	r0, 8004bac <_scanf_chars+0x58>
 8004b88:	2801      	cmp	r0, #1
 8004b8a:	d107      	bne.n	8004b9c <_scanf_chars+0x48>
 8004b8c:	682a      	ldr	r2, [r5, #0]
 8004b8e:	7811      	ldrb	r1, [r2, #0]
 8004b90:	6962      	ldr	r2, [r4, #20]
 8004b92:	5c52      	ldrb	r2, [r2, r1]
 8004b94:	b952      	cbnz	r2, 8004bac <_scanf_chars+0x58>
 8004b96:	2f00      	cmp	r7, #0
 8004b98:	d031      	beq.n	8004bfe <_scanf_chars+0xaa>
 8004b9a:	e022      	b.n	8004be2 <_scanf_chars+0x8e>
 8004b9c:	2802      	cmp	r0, #2
 8004b9e:	d120      	bne.n	8004be2 <_scanf_chars+0x8e>
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	f813 3009 	ldrb.w	r3, [r3, r9]
 8004ba8:	071b      	lsls	r3, r3, #28
 8004baa:	d41a      	bmi.n	8004be2 <_scanf_chars+0x8e>
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	06da      	lsls	r2, r3, #27
 8004bb0:	bf5e      	ittt	pl
 8004bb2:	682b      	ldrpl	r3, [r5, #0]
 8004bb4:	781b      	ldrbpl	r3, [r3, #0]
 8004bb6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004bba:	682a      	ldr	r2, [r5, #0]
 8004bbc:	686b      	ldr	r3, [r5, #4]
 8004bbe:	3201      	adds	r2, #1
 8004bc0:	602a      	str	r2, [r5, #0]
 8004bc2:	68a2      	ldr	r2, [r4, #8]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	3a01      	subs	r2, #1
 8004bc8:	606b      	str	r3, [r5, #4]
 8004bca:	3701      	adds	r7, #1
 8004bcc:	60a2      	str	r2, [r4, #8]
 8004bce:	b142      	cbz	r2, 8004be2 <_scanf_chars+0x8e>
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	dcd7      	bgt.n	8004b84 <_scanf_chars+0x30>
 8004bd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004bd8:	4629      	mov	r1, r5
 8004bda:	4640      	mov	r0, r8
 8004bdc:	4798      	blx	r3
 8004bde:	2800      	cmp	r0, #0
 8004be0:	d0d0      	beq.n	8004b84 <_scanf_chars+0x30>
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	f013 0310 	ands.w	r3, r3, #16
 8004be8:	d105      	bne.n	8004bf6 <_scanf_chars+0xa2>
 8004bea:	68e2      	ldr	r2, [r4, #12]
 8004bec:	3201      	adds	r2, #1
 8004bee:	60e2      	str	r2, [r4, #12]
 8004bf0:	69a2      	ldr	r2, [r4, #24]
 8004bf2:	b102      	cbz	r2, 8004bf6 <_scanf_chars+0xa2>
 8004bf4:	7033      	strb	r3, [r6, #0]
 8004bf6:	6923      	ldr	r3, [r4, #16]
 8004bf8:	443b      	add	r3, r7
 8004bfa:	6123      	str	r3, [r4, #16]
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c02:	bf00      	nop
 8004c04:	08005318 	.word	0x08005318

08004c08 <_scanf_i>:
 8004c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c0c:	4698      	mov	r8, r3
 8004c0e:	4b76      	ldr	r3, [pc, #472]	; (8004de8 <_scanf_i+0x1e0>)
 8004c10:	460c      	mov	r4, r1
 8004c12:	4682      	mov	sl, r0
 8004c14:	4616      	mov	r6, r2
 8004c16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	ab03      	add	r3, sp, #12
 8004c1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004c22:	4b72      	ldr	r3, [pc, #456]	; (8004dec <_scanf_i+0x1e4>)
 8004c24:	69a1      	ldr	r1, [r4, #24]
 8004c26:	4a72      	ldr	r2, [pc, #456]	; (8004df0 <_scanf_i+0x1e8>)
 8004c28:	2903      	cmp	r1, #3
 8004c2a:	bf18      	it	ne
 8004c2c:	461a      	movne	r2, r3
 8004c2e:	68a3      	ldr	r3, [r4, #8]
 8004c30:	9201      	str	r2, [sp, #4]
 8004c32:	1e5a      	subs	r2, r3, #1
 8004c34:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004c38:	bf88      	it	hi
 8004c3a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004c3e:	4627      	mov	r7, r4
 8004c40:	bf82      	ittt	hi
 8004c42:	eb03 0905 	addhi.w	r9, r3, r5
 8004c46:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004c4a:	60a3      	strhi	r3, [r4, #8]
 8004c4c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004c50:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004c54:	bf98      	it	ls
 8004c56:	f04f 0900 	movls.w	r9, #0
 8004c5a:	6023      	str	r3, [r4, #0]
 8004c5c:	463d      	mov	r5, r7
 8004c5e:	f04f 0b00 	mov.w	fp, #0
 8004c62:	6831      	ldr	r1, [r6, #0]
 8004c64:	ab03      	add	r3, sp, #12
 8004c66:	7809      	ldrb	r1, [r1, #0]
 8004c68:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	f7fb fac7 	bl	8000200 <memchr>
 8004c72:	b328      	cbz	r0, 8004cc0 <_scanf_i+0xb8>
 8004c74:	f1bb 0f01 	cmp.w	fp, #1
 8004c78:	d159      	bne.n	8004d2e <_scanf_i+0x126>
 8004c7a:	6862      	ldr	r2, [r4, #4]
 8004c7c:	b92a      	cbnz	r2, 8004c8a <_scanf_i+0x82>
 8004c7e:	6822      	ldr	r2, [r4, #0]
 8004c80:	2308      	movs	r3, #8
 8004c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c86:	6063      	str	r3, [r4, #4]
 8004c88:	6022      	str	r2, [r4, #0]
 8004c8a:	6822      	ldr	r2, [r4, #0]
 8004c8c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004c90:	6022      	str	r2, [r4, #0]
 8004c92:	68a2      	ldr	r2, [r4, #8]
 8004c94:	1e51      	subs	r1, r2, #1
 8004c96:	60a1      	str	r1, [r4, #8]
 8004c98:	b192      	cbz	r2, 8004cc0 <_scanf_i+0xb8>
 8004c9a:	6832      	ldr	r2, [r6, #0]
 8004c9c:	1c51      	adds	r1, r2, #1
 8004c9e:	6031      	str	r1, [r6, #0]
 8004ca0:	7812      	ldrb	r2, [r2, #0]
 8004ca2:	f805 2b01 	strb.w	r2, [r5], #1
 8004ca6:	6872      	ldr	r2, [r6, #4]
 8004ca8:	3a01      	subs	r2, #1
 8004caa:	2a00      	cmp	r2, #0
 8004cac:	6072      	str	r2, [r6, #4]
 8004cae:	dc07      	bgt.n	8004cc0 <_scanf_i+0xb8>
 8004cb0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004cb4:	4631      	mov	r1, r6
 8004cb6:	4650      	mov	r0, sl
 8004cb8:	4790      	blx	r2
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	f040 8085 	bne.w	8004dca <_scanf_i+0x1c2>
 8004cc0:	f10b 0b01 	add.w	fp, fp, #1
 8004cc4:	f1bb 0f03 	cmp.w	fp, #3
 8004cc8:	d1cb      	bne.n	8004c62 <_scanf_i+0x5a>
 8004cca:	6863      	ldr	r3, [r4, #4]
 8004ccc:	b90b      	cbnz	r3, 8004cd2 <_scanf_i+0xca>
 8004cce:	230a      	movs	r3, #10
 8004cd0:	6063      	str	r3, [r4, #4]
 8004cd2:	6863      	ldr	r3, [r4, #4]
 8004cd4:	4947      	ldr	r1, [pc, #284]	; (8004df4 <_scanf_i+0x1ec>)
 8004cd6:	6960      	ldr	r0, [r4, #20]
 8004cd8:	1ac9      	subs	r1, r1, r3
 8004cda:	f000 f8af 	bl	8004e3c <__sccl>
 8004cde:	f04f 0b00 	mov.w	fp, #0
 8004ce2:	68a3      	ldr	r3, [r4, #8]
 8004ce4:	6822      	ldr	r2, [r4, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d03d      	beq.n	8004d66 <_scanf_i+0x15e>
 8004cea:	6831      	ldr	r1, [r6, #0]
 8004cec:	6960      	ldr	r0, [r4, #20]
 8004cee:	f891 c000 	ldrb.w	ip, [r1]
 8004cf2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	d035      	beq.n	8004d66 <_scanf_i+0x15e>
 8004cfa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004cfe:	d124      	bne.n	8004d4a <_scanf_i+0x142>
 8004d00:	0510      	lsls	r0, r2, #20
 8004d02:	d522      	bpl.n	8004d4a <_scanf_i+0x142>
 8004d04:	f10b 0b01 	add.w	fp, fp, #1
 8004d08:	f1b9 0f00 	cmp.w	r9, #0
 8004d0c:	d003      	beq.n	8004d16 <_scanf_i+0x10e>
 8004d0e:	3301      	adds	r3, #1
 8004d10:	f109 39ff 	add.w	r9, r9, #4294967295
 8004d14:	60a3      	str	r3, [r4, #8]
 8004d16:	6873      	ldr	r3, [r6, #4]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	6073      	str	r3, [r6, #4]
 8004d1e:	dd1b      	ble.n	8004d58 <_scanf_i+0x150>
 8004d20:	6833      	ldr	r3, [r6, #0]
 8004d22:	3301      	adds	r3, #1
 8004d24:	6033      	str	r3, [r6, #0]
 8004d26:	68a3      	ldr	r3, [r4, #8]
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	60a3      	str	r3, [r4, #8]
 8004d2c:	e7d9      	b.n	8004ce2 <_scanf_i+0xda>
 8004d2e:	f1bb 0f02 	cmp.w	fp, #2
 8004d32:	d1ae      	bne.n	8004c92 <_scanf_i+0x8a>
 8004d34:	6822      	ldr	r2, [r4, #0]
 8004d36:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004d3a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004d3e:	d1bf      	bne.n	8004cc0 <_scanf_i+0xb8>
 8004d40:	2310      	movs	r3, #16
 8004d42:	6063      	str	r3, [r4, #4]
 8004d44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d48:	e7a2      	b.n	8004c90 <_scanf_i+0x88>
 8004d4a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004d4e:	6022      	str	r2, [r4, #0]
 8004d50:	780b      	ldrb	r3, [r1, #0]
 8004d52:	f805 3b01 	strb.w	r3, [r5], #1
 8004d56:	e7de      	b.n	8004d16 <_scanf_i+0x10e>
 8004d58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004d5c:	4631      	mov	r1, r6
 8004d5e:	4650      	mov	r0, sl
 8004d60:	4798      	blx	r3
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d0df      	beq.n	8004d26 <_scanf_i+0x11e>
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	05db      	lsls	r3, r3, #23
 8004d6a:	d50d      	bpl.n	8004d88 <_scanf_i+0x180>
 8004d6c:	42bd      	cmp	r5, r7
 8004d6e:	d909      	bls.n	8004d84 <_scanf_i+0x17c>
 8004d70:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004d74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d78:	4632      	mov	r2, r6
 8004d7a:	4650      	mov	r0, sl
 8004d7c:	4798      	blx	r3
 8004d7e:	f105 39ff 	add.w	r9, r5, #4294967295
 8004d82:	464d      	mov	r5, r9
 8004d84:	42bd      	cmp	r5, r7
 8004d86:	d02d      	beq.n	8004de4 <_scanf_i+0x1dc>
 8004d88:	6822      	ldr	r2, [r4, #0]
 8004d8a:	f012 0210 	ands.w	r2, r2, #16
 8004d8e:	d113      	bne.n	8004db8 <_scanf_i+0x1b0>
 8004d90:	702a      	strb	r2, [r5, #0]
 8004d92:	6863      	ldr	r3, [r4, #4]
 8004d94:	9e01      	ldr	r6, [sp, #4]
 8004d96:	4639      	mov	r1, r7
 8004d98:	4650      	mov	r0, sl
 8004d9a:	47b0      	blx	r6
 8004d9c:	6821      	ldr	r1, [r4, #0]
 8004d9e:	f8d8 3000 	ldr.w	r3, [r8]
 8004da2:	f011 0f20 	tst.w	r1, #32
 8004da6:	d013      	beq.n	8004dd0 <_scanf_i+0x1c8>
 8004da8:	1d1a      	adds	r2, r3, #4
 8004daa:	f8c8 2000 	str.w	r2, [r8]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6018      	str	r0, [r3, #0]
 8004db2:	68e3      	ldr	r3, [r4, #12]
 8004db4:	3301      	adds	r3, #1
 8004db6:	60e3      	str	r3, [r4, #12]
 8004db8:	1bed      	subs	r5, r5, r7
 8004dba:	44ab      	add	fp, r5
 8004dbc:	6925      	ldr	r5, [r4, #16]
 8004dbe:	445d      	add	r5, fp
 8004dc0:	6125      	str	r5, [r4, #16]
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	b007      	add	sp, #28
 8004dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dca:	f04f 0b00 	mov.w	fp, #0
 8004dce:	e7ca      	b.n	8004d66 <_scanf_i+0x15e>
 8004dd0:	1d1a      	adds	r2, r3, #4
 8004dd2:	f8c8 2000 	str.w	r2, [r8]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f011 0f01 	tst.w	r1, #1
 8004ddc:	bf14      	ite	ne
 8004dde:	8018      	strhne	r0, [r3, #0]
 8004de0:	6018      	streq	r0, [r3, #0]
 8004de2:	e7e6      	b.n	8004db2 <_scanf_i+0x1aa>
 8004de4:	2001      	movs	r0, #1
 8004de6:	e7ed      	b.n	8004dc4 <_scanf_i+0x1bc>
 8004de8:	08005240 	.word	0x08005240
 8004dec:	08005099 	.word	0x08005099
 8004df0:	08004fb1 	.word	0x08004fb1
 8004df4:	08005315 	.word	0x08005315

08004df8 <_read_r>:
 8004df8:	b538      	push	{r3, r4, r5, lr}
 8004dfa:	4d07      	ldr	r5, [pc, #28]	; (8004e18 <_read_r+0x20>)
 8004dfc:	4604      	mov	r4, r0
 8004dfe:	4608      	mov	r0, r1
 8004e00:	4611      	mov	r1, r2
 8004e02:	2200      	movs	r2, #0
 8004e04:	602a      	str	r2, [r5, #0]
 8004e06:	461a      	mov	r2, r3
 8004e08:	f7fb feb8 	bl	8000b7c <_read>
 8004e0c:	1c43      	adds	r3, r0, #1
 8004e0e:	d102      	bne.n	8004e16 <_read_r+0x1e>
 8004e10:	682b      	ldr	r3, [r5, #0]
 8004e12:	b103      	cbz	r3, 8004e16 <_read_r+0x1e>
 8004e14:	6023      	str	r3, [r4, #0]
 8004e16:	bd38      	pop	{r3, r4, r5, pc}
 8004e18:	200001d8 	.word	0x200001d8

08004e1c <_sbrk_r>:
 8004e1c:	b538      	push	{r3, r4, r5, lr}
 8004e1e:	4d06      	ldr	r5, [pc, #24]	; (8004e38 <_sbrk_r+0x1c>)
 8004e20:	2300      	movs	r3, #0
 8004e22:	4604      	mov	r4, r0
 8004e24:	4608      	mov	r0, r1
 8004e26:	602b      	str	r3, [r5, #0]
 8004e28:	f7fb fefa 	bl	8000c20 <_sbrk>
 8004e2c:	1c43      	adds	r3, r0, #1
 8004e2e:	d102      	bne.n	8004e36 <_sbrk_r+0x1a>
 8004e30:	682b      	ldr	r3, [r5, #0]
 8004e32:	b103      	cbz	r3, 8004e36 <_sbrk_r+0x1a>
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	bd38      	pop	{r3, r4, r5, pc}
 8004e38:	200001d8 	.word	0x200001d8

08004e3c <__sccl>:
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	780b      	ldrb	r3, [r1, #0]
 8004e40:	4604      	mov	r4, r0
 8004e42:	2b5e      	cmp	r3, #94	; 0x5e
 8004e44:	bf0b      	itete	eq
 8004e46:	784b      	ldrbeq	r3, [r1, #1]
 8004e48:	1c48      	addne	r0, r1, #1
 8004e4a:	1c88      	addeq	r0, r1, #2
 8004e4c:	2200      	movne	r2, #0
 8004e4e:	bf08      	it	eq
 8004e50:	2201      	moveq	r2, #1
 8004e52:	1e61      	subs	r1, r4, #1
 8004e54:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004e58:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004e5c:	42a9      	cmp	r1, r5
 8004e5e:	d1fb      	bne.n	8004e58 <__sccl+0x1c>
 8004e60:	b90b      	cbnz	r3, 8004e66 <__sccl+0x2a>
 8004e62:	3801      	subs	r0, #1
 8004e64:	bd70      	pop	{r4, r5, r6, pc}
 8004e66:	f082 0201 	eor.w	r2, r2, #1
 8004e6a:	54e2      	strb	r2, [r4, r3]
 8004e6c:	4605      	mov	r5, r0
 8004e6e:	4628      	mov	r0, r5
 8004e70:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004e74:	292d      	cmp	r1, #45	; 0x2d
 8004e76:	d006      	beq.n	8004e86 <__sccl+0x4a>
 8004e78:	295d      	cmp	r1, #93	; 0x5d
 8004e7a:	d0f3      	beq.n	8004e64 <__sccl+0x28>
 8004e7c:	b909      	cbnz	r1, 8004e82 <__sccl+0x46>
 8004e7e:	4628      	mov	r0, r5
 8004e80:	e7f0      	b.n	8004e64 <__sccl+0x28>
 8004e82:	460b      	mov	r3, r1
 8004e84:	e7f1      	b.n	8004e6a <__sccl+0x2e>
 8004e86:	786e      	ldrb	r6, [r5, #1]
 8004e88:	2e5d      	cmp	r6, #93	; 0x5d
 8004e8a:	d0fa      	beq.n	8004e82 <__sccl+0x46>
 8004e8c:	42b3      	cmp	r3, r6
 8004e8e:	dcf8      	bgt.n	8004e82 <__sccl+0x46>
 8004e90:	3502      	adds	r5, #2
 8004e92:	4619      	mov	r1, r3
 8004e94:	3101      	adds	r1, #1
 8004e96:	428e      	cmp	r6, r1
 8004e98:	5462      	strb	r2, [r4, r1]
 8004e9a:	dcfb      	bgt.n	8004e94 <__sccl+0x58>
 8004e9c:	1af1      	subs	r1, r6, r3
 8004e9e:	3901      	subs	r1, #1
 8004ea0:	1c58      	adds	r0, r3, #1
 8004ea2:	42b3      	cmp	r3, r6
 8004ea4:	bfa8      	it	ge
 8004ea6:	2100      	movge	r1, #0
 8004ea8:	1843      	adds	r3, r0, r1
 8004eaa:	e7e0      	b.n	8004e6e <__sccl+0x32>

08004eac <_strtol_l.constprop.0>:
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb2:	d001      	beq.n	8004eb8 <_strtol_l.constprop.0+0xc>
 8004eb4:	2b24      	cmp	r3, #36	; 0x24
 8004eb6:	d906      	bls.n	8004ec6 <_strtol_l.constprop.0+0x1a>
 8004eb8:	f7fe ff6c 	bl	8003d94 <__errno>
 8004ebc:	2316      	movs	r3, #22
 8004ebe:	6003      	str	r3, [r0, #0]
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004fac <_strtol_l.constprop.0+0x100>
 8004eca:	460d      	mov	r5, r1
 8004ecc:	462e      	mov	r6, r5
 8004ece:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ed2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004ed6:	f017 0708 	ands.w	r7, r7, #8
 8004eda:	d1f7      	bne.n	8004ecc <_strtol_l.constprop.0+0x20>
 8004edc:	2c2d      	cmp	r4, #45	; 0x2d
 8004ede:	d132      	bne.n	8004f46 <_strtol_l.constprop.0+0x9a>
 8004ee0:	782c      	ldrb	r4, [r5, #0]
 8004ee2:	2701      	movs	r7, #1
 8004ee4:	1cb5      	adds	r5, r6, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d05b      	beq.n	8004fa2 <_strtol_l.constprop.0+0xf6>
 8004eea:	2b10      	cmp	r3, #16
 8004eec:	d109      	bne.n	8004f02 <_strtol_l.constprop.0+0x56>
 8004eee:	2c30      	cmp	r4, #48	; 0x30
 8004ef0:	d107      	bne.n	8004f02 <_strtol_l.constprop.0+0x56>
 8004ef2:	782c      	ldrb	r4, [r5, #0]
 8004ef4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004ef8:	2c58      	cmp	r4, #88	; 0x58
 8004efa:	d14d      	bne.n	8004f98 <_strtol_l.constprop.0+0xec>
 8004efc:	786c      	ldrb	r4, [r5, #1]
 8004efe:	2310      	movs	r3, #16
 8004f00:	3502      	adds	r5, #2
 8004f02:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004f06:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f0a:	f04f 0c00 	mov.w	ip, #0
 8004f0e:	fbb8 f9f3 	udiv	r9, r8, r3
 8004f12:	4666      	mov	r6, ip
 8004f14:	fb03 8a19 	mls	sl, r3, r9, r8
 8004f18:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004f1c:	f1be 0f09 	cmp.w	lr, #9
 8004f20:	d816      	bhi.n	8004f50 <_strtol_l.constprop.0+0xa4>
 8004f22:	4674      	mov	r4, lr
 8004f24:	42a3      	cmp	r3, r4
 8004f26:	dd24      	ble.n	8004f72 <_strtol_l.constprop.0+0xc6>
 8004f28:	f1bc 0f00 	cmp.w	ip, #0
 8004f2c:	db1e      	blt.n	8004f6c <_strtol_l.constprop.0+0xc0>
 8004f2e:	45b1      	cmp	r9, r6
 8004f30:	d31c      	bcc.n	8004f6c <_strtol_l.constprop.0+0xc0>
 8004f32:	d101      	bne.n	8004f38 <_strtol_l.constprop.0+0x8c>
 8004f34:	45a2      	cmp	sl, r4
 8004f36:	db19      	blt.n	8004f6c <_strtol_l.constprop.0+0xc0>
 8004f38:	fb06 4603 	mla	r6, r6, r3, r4
 8004f3c:	f04f 0c01 	mov.w	ip, #1
 8004f40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f44:	e7e8      	b.n	8004f18 <_strtol_l.constprop.0+0x6c>
 8004f46:	2c2b      	cmp	r4, #43	; 0x2b
 8004f48:	bf04      	itt	eq
 8004f4a:	782c      	ldrbeq	r4, [r5, #0]
 8004f4c:	1cb5      	addeq	r5, r6, #2
 8004f4e:	e7ca      	b.n	8004ee6 <_strtol_l.constprop.0+0x3a>
 8004f50:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004f54:	f1be 0f19 	cmp.w	lr, #25
 8004f58:	d801      	bhi.n	8004f5e <_strtol_l.constprop.0+0xb2>
 8004f5a:	3c37      	subs	r4, #55	; 0x37
 8004f5c:	e7e2      	b.n	8004f24 <_strtol_l.constprop.0+0x78>
 8004f5e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004f62:	f1be 0f19 	cmp.w	lr, #25
 8004f66:	d804      	bhi.n	8004f72 <_strtol_l.constprop.0+0xc6>
 8004f68:	3c57      	subs	r4, #87	; 0x57
 8004f6a:	e7db      	b.n	8004f24 <_strtol_l.constprop.0+0x78>
 8004f6c:	f04f 3cff 	mov.w	ip, #4294967295
 8004f70:	e7e6      	b.n	8004f40 <_strtol_l.constprop.0+0x94>
 8004f72:	f1bc 0f00 	cmp.w	ip, #0
 8004f76:	da05      	bge.n	8004f84 <_strtol_l.constprop.0+0xd8>
 8004f78:	2322      	movs	r3, #34	; 0x22
 8004f7a:	6003      	str	r3, [r0, #0]
 8004f7c:	4646      	mov	r6, r8
 8004f7e:	b942      	cbnz	r2, 8004f92 <_strtol_l.constprop.0+0xe6>
 8004f80:	4630      	mov	r0, r6
 8004f82:	e79e      	b.n	8004ec2 <_strtol_l.constprop.0+0x16>
 8004f84:	b107      	cbz	r7, 8004f88 <_strtol_l.constprop.0+0xdc>
 8004f86:	4276      	negs	r6, r6
 8004f88:	2a00      	cmp	r2, #0
 8004f8a:	d0f9      	beq.n	8004f80 <_strtol_l.constprop.0+0xd4>
 8004f8c:	f1bc 0f00 	cmp.w	ip, #0
 8004f90:	d000      	beq.n	8004f94 <_strtol_l.constprop.0+0xe8>
 8004f92:	1e69      	subs	r1, r5, #1
 8004f94:	6011      	str	r1, [r2, #0]
 8004f96:	e7f3      	b.n	8004f80 <_strtol_l.constprop.0+0xd4>
 8004f98:	2430      	movs	r4, #48	; 0x30
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1b1      	bne.n	8004f02 <_strtol_l.constprop.0+0x56>
 8004f9e:	2308      	movs	r3, #8
 8004fa0:	e7af      	b.n	8004f02 <_strtol_l.constprop.0+0x56>
 8004fa2:	2c30      	cmp	r4, #48	; 0x30
 8004fa4:	d0a5      	beq.n	8004ef2 <_strtol_l.constprop.0+0x46>
 8004fa6:	230a      	movs	r3, #10
 8004fa8:	e7ab      	b.n	8004f02 <_strtol_l.constprop.0+0x56>
 8004faa:	bf00      	nop
 8004fac:	08005318 	.word	0x08005318

08004fb0 <_strtol_r>:
 8004fb0:	f7ff bf7c 	b.w	8004eac <_strtol_l.constprop.0>

08004fb4 <_strtoul_l.constprop.0>:
 8004fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fb8:	4f36      	ldr	r7, [pc, #216]	; (8005094 <_strtoul_l.constprop.0+0xe0>)
 8004fba:	4686      	mov	lr, r0
 8004fbc:	460d      	mov	r5, r1
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004fc4:	5de6      	ldrb	r6, [r4, r7]
 8004fc6:	f016 0608 	ands.w	r6, r6, #8
 8004fca:	d1f8      	bne.n	8004fbe <_strtoul_l.constprop.0+0xa>
 8004fcc:	2c2d      	cmp	r4, #45	; 0x2d
 8004fce:	d12f      	bne.n	8005030 <_strtoul_l.constprop.0+0x7c>
 8004fd0:	782c      	ldrb	r4, [r5, #0]
 8004fd2:	2601      	movs	r6, #1
 8004fd4:	1c85      	adds	r5, r0, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d057      	beq.n	800508a <_strtoul_l.constprop.0+0xd6>
 8004fda:	2b10      	cmp	r3, #16
 8004fdc:	d109      	bne.n	8004ff2 <_strtoul_l.constprop.0+0x3e>
 8004fde:	2c30      	cmp	r4, #48	; 0x30
 8004fe0:	d107      	bne.n	8004ff2 <_strtoul_l.constprop.0+0x3e>
 8004fe2:	7828      	ldrb	r0, [r5, #0]
 8004fe4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004fe8:	2858      	cmp	r0, #88	; 0x58
 8004fea:	d149      	bne.n	8005080 <_strtoul_l.constprop.0+0xcc>
 8004fec:	786c      	ldrb	r4, [r5, #1]
 8004fee:	2310      	movs	r3, #16
 8004ff0:	3502      	adds	r5, #2
 8004ff2:	f04f 38ff 	mov.w	r8, #4294967295
 8004ff6:	2700      	movs	r7, #0
 8004ff8:	fbb8 f8f3 	udiv	r8, r8, r3
 8004ffc:	fb03 f908 	mul.w	r9, r3, r8
 8005000:	ea6f 0909 	mvn.w	r9, r9
 8005004:	4638      	mov	r0, r7
 8005006:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800500a:	f1bc 0f09 	cmp.w	ip, #9
 800500e:	d814      	bhi.n	800503a <_strtoul_l.constprop.0+0x86>
 8005010:	4664      	mov	r4, ip
 8005012:	42a3      	cmp	r3, r4
 8005014:	dd22      	ble.n	800505c <_strtoul_l.constprop.0+0xa8>
 8005016:	2f00      	cmp	r7, #0
 8005018:	db1d      	blt.n	8005056 <_strtoul_l.constprop.0+0xa2>
 800501a:	4580      	cmp	r8, r0
 800501c:	d31b      	bcc.n	8005056 <_strtoul_l.constprop.0+0xa2>
 800501e:	d101      	bne.n	8005024 <_strtoul_l.constprop.0+0x70>
 8005020:	45a1      	cmp	r9, r4
 8005022:	db18      	blt.n	8005056 <_strtoul_l.constprop.0+0xa2>
 8005024:	fb00 4003 	mla	r0, r0, r3, r4
 8005028:	2701      	movs	r7, #1
 800502a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800502e:	e7ea      	b.n	8005006 <_strtoul_l.constprop.0+0x52>
 8005030:	2c2b      	cmp	r4, #43	; 0x2b
 8005032:	bf04      	itt	eq
 8005034:	782c      	ldrbeq	r4, [r5, #0]
 8005036:	1c85      	addeq	r5, r0, #2
 8005038:	e7cd      	b.n	8004fd6 <_strtoul_l.constprop.0+0x22>
 800503a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800503e:	f1bc 0f19 	cmp.w	ip, #25
 8005042:	d801      	bhi.n	8005048 <_strtoul_l.constprop.0+0x94>
 8005044:	3c37      	subs	r4, #55	; 0x37
 8005046:	e7e4      	b.n	8005012 <_strtoul_l.constprop.0+0x5e>
 8005048:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800504c:	f1bc 0f19 	cmp.w	ip, #25
 8005050:	d804      	bhi.n	800505c <_strtoul_l.constprop.0+0xa8>
 8005052:	3c57      	subs	r4, #87	; 0x57
 8005054:	e7dd      	b.n	8005012 <_strtoul_l.constprop.0+0x5e>
 8005056:	f04f 37ff 	mov.w	r7, #4294967295
 800505a:	e7e6      	b.n	800502a <_strtoul_l.constprop.0+0x76>
 800505c:	2f00      	cmp	r7, #0
 800505e:	da07      	bge.n	8005070 <_strtoul_l.constprop.0+0xbc>
 8005060:	2322      	movs	r3, #34	; 0x22
 8005062:	f8ce 3000 	str.w	r3, [lr]
 8005066:	f04f 30ff 	mov.w	r0, #4294967295
 800506a:	b932      	cbnz	r2, 800507a <_strtoul_l.constprop.0+0xc6>
 800506c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005070:	b106      	cbz	r6, 8005074 <_strtoul_l.constprop.0+0xc0>
 8005072:	4240      	negs	r0, r0
 8005074:	2a00      	cmp	r2, #0
 8005076:	d0f9      	beq.n	800506c <_strtoul_l.constprop.0+0xb8>
 8005078:	b107      	cbz	r7, 800507c <_strtoul_l.constprop.0+0xc8>
 800507a:	1e69      	subs	r1, r5, #1
 800507c:	6011      	str	r1, [r2, #0]
 800507e:	e7f5      	b.n	800506c <_strtoul_l.constprop.0+0xb8>
 8005080:	2430      	movs	r4, #48	; 0x30
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1b5      	bne.n	8004ff2 <_strtoul_l.constprop.0+0x3e>
 8005086:	2308      	movs	r3, #8
 8005088:	e7b3      	b.n	8004ff2 <_strtoul_l.constprop.0+0x3e>
 800508a:	2c30      	cmp	r4, #48	; 0x30
 800508c:	d0a9      	beq.n	8004fe2 <_strtoul_l.constprop.0+0x2e>
 800508e:	230a      	movs	r3, #10
 8005090:	e7af      	b.n	8004ff2 <_strtoul_l.constprop.0+0x3e>
 8005092:	bf00      	nop
 8005094:	08005318 	.word	0x08005318

08005098 <_strtoul_r>:
 8005098:	f7ff bf8c 	b.w	8004fb4 <_strtoul_l.constprop.0>

0800509c <__submore>:
 800509c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a0:	460c      	mov	r4, r1
 80050a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80050a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050a8:	4299      	cmp	r1, r3
 80050aa:	d11d      	bne.n	80050e8 <__submore+0x4c>
 80050ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050b0:	f7ff fb0a 	bl	80046c8 <_malloc_r>
 80050b4:	b918      	cbnz	r0, 80050be <__submore+0x22>
 80050b6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050c2:	63a3      	str	r3, [r4, #56]	; 0x38
 80050c4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80050c8:	6360      	str	r0, [r4, #52]	; 0x34
 80050ca:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80050ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80050d2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80050d6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80050da:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80050de:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80050e2:	6020      	str	r0, [r4, #0]
 80050e4:	2000      	movs	r0, #0
 80050e6:	e7e8      	b.n	80050ba <__submore+0x1e>
 80050e8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80050ea:	0077      	lsls	r7, r6, #1
 80050ec:	463a      	mov	r2, r7
 80050ee:	f000 f84b 	bl	8005188 <_realloc_r>
 80050f2:	4605      	mov	r5, r0
 80050f4:	2800      	cmp	r0, #0
 80050f6:	d0de      	beq.n	80050b6 <__submore+0x1a>
 80050f8:	eb00 0806 	add.w	r8, r0, r6
 80050fc:	4601      	mov	r1, r0
 80050fe:	4632      	mov	r2, r6
 8005100:	4640      	mov	r0, r8
 8005102:	f000 f827 	bl	8005154 <memcpy>
 8005106:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800510a:	f8c4 8000 	str.w	r8, [r4]
 800510e:	e7e9      	b.n	80050e4 <__submore+0x48>

08005110 <_fstat_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4d07      	ldr	r5, [pc, #28]	; (8005130 <_fstat_r+0x20>)
 8005114:	2300      	movs	r3, #0
 8005116:	4604      	mov	r4, r0
 8005118:	4608      	mov	r0, r1
 800511a:	4611      	mov	r1, r2
 800511c:	602b      	str	r3, [r5, #0]
 800511e:	f7fb fd56 	bl	8000bce <_fstat>
 8005122:	1c43      	adds	r3, r0, #1
 8005124:	d102      	bne.n	800512c <_fstat_r+0x1c>
 8005126:	682b      	ldr	r3, [r5, #0]
 8005128:	b103      	cbz	r3, 800512c <_fstat_r+0x1c>
 800512a:	6023      	str	r3, [r4, #0]
 800512c:	bd38      	pop	{r3, r4, r5, pc}
 800512e:	bf00      	nop
 8005130:	200001d8 	.word	0x200001d8

08005134 <_isatty_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	4d06      	ldr	r5, [pc, #24]	; (8005150 <_isatty_r+0x1c>)
 8005138:	2300      	movs	r3, #0
 800513a:	4604      	mov	r4, r0
 800513c:	4608      	mov	r0, r1
 800513e:	602b      	str	r3, [r5, #0]
 8005140:	f7fb fd55 	bl	8000bee <_isatty>
 8005144:	1c43      	adds	r3, r0, #1
 8005146:	d102      	bne.n	800514e <_isatty_r+0x1a>
 8005148:	682b      	ldr	r3, [r5, #0]
 800514a:	b103      	cbz	r3, 800514e <_isatty_r+0x1a>
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	bd38      	pop	{r3, r4, r5, pc}
 8005150:	200001d8 	.word	0x200001d8

08005154 <memcpy>:
 8005154:	440a      	add	r2, r1
 8005156:	4291      	cmp	r1, r2
 8005158:	f100 33ff 	add.w	r3, r0, #4294967295
 800515c:	d100      	bne.n	8005160 <memcpy+0xc>
 800515e:	4770      	bx	lr
 8005160:	b510      	push	{r4, lr}
 8005162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005166:	f803 4f01 	strb.w	r4, [r3, #1]!
 800516a:	4291      	cmp	r1, r2
 800516c:	d1f9      	bne.n	8005162 <memcpy+0xe>
 800516e:	bd10      	pop	{r4, pc}

08005170 <__malloc_lock>:
 8005170:	4801      	ldr	r0, [pc, #4]	; (8005178 <__malloc_lock+0x8>)
 8005172:	f7ff b9c3 	b.w	80044fc <__retarget_lock_acquire_recursive>
 8005176:	bf00      	nop
 8005178:	200001cc 	.word	0x200001cc

0800517c <__malloc_unlock>:
 800517c:	4801      	ldr	r0, [pc, #4]	; (8005184 <__malloc_unlock+0x8>)
 800517e:	f7ff b9be 	b.w	80044fe <__retarget_lock_release_recursive>
 8005182:	bf00      	nop
 8005184:	200001cc 	.word	0x200001cc

08005188 <_realloc_r>:
 8005188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800518c:	4680      	mov	r8, r0
 800518e:	4614      	mov	r4, r2
 8005190:	460e      	mov	r6, r1
 8005192:	b921      	cbnz	r1, 800519e <_realloc_r+0x16>
 8005194:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005198:	4611      	mov	r1, r2
 800519a:	f7ff ba95 	b.w	80046c8 <_malloc_r>
 800519e:	b92a      	cbnz	r2, 80051ac <_realloc_r+0x24>
 80051a0:	f7ff fa26 	bl	80045f0 <_free_r>
 80051a4:	4625      	mov	r5, r4
 80051a6:	4628      	mov	r0, r5
 80051a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051ac:	f000 f81b 	bl	80051e6 <_malloc_usable_size_r>
 80051b0:	4284      	cmp	r4, r0
 80051b2:	4607      	mov	r7, r0
 80051b4:	d802      	bhi.n	80051bc <_realloc_r+0x34>
 80051b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051ba:	d812      	bhi.n	80051e2 <_realloc_r+0x5a>
 80051bc:	4621      	mov	r1, r4
 80051be:	4640      	mov	r0, r8
 80051c0:	f7ff fa82 	bl	80046c8 <_malloc_r>
 80051c4:	4605      	mov	r5, r0
 80051c6:	2800      	cmp	r0, #0
 80051c8:	d0ed      	beq.n	80051a6 <_realloc_r+0x1e>
 80051ca:	42bc      	cmp	r4, r7
 80051cc:	4622      	mov	r2, r4
 80051ce:	4631      	mov	r1, r6
 80051d0:	bf28      	it	cs
 80051d2:	463a      	movcs	r2, r7
 80051d4:	f7ff ffbe 	bl	8005154 <memcpy>
 80051d8:	4631      	mov	r1, r6
 80051da:	4640      	mov	r0, r8
 80051dc:	f7ff fa08 	bl	80045f0 <_free_r>
 80051e0:	e7e1      	b.n	80051a6 <_realloc_r+0x1e>
 80051e2:	4635      	mov	r5, r6
 80051e4:	e7df      	b.n	80051a6 <_realloc_r+0x1e>

080051e6 <_malloc_usable_size_r>:
 80051e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ea:	1f18      	subs	r0, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	bfbc      	itt	lt
 80051f0:	580b      	ldrlt	r3, [r1, r0]
 80051f2:	18c0      	addlt	r0, r0, r3
 80051f4:	4770      	bx	lr
	...

080051f8 <_init>:
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fa:	bf00      	nop
 80051fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fe:	bc08      	pop	{r3}
 8005200:	469e      	mov	lr, r3
 8005202:	4770      	bx	lr

08005204 <_fini>:
 8005204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005206:	bf00      	nop
 8005208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520a:	bc08      	pop	{r3}
 800520c:	469e      	mov	lr, r3
 800520e:	4770      	bx	lr
