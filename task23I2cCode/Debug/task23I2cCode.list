
task23I2cCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007800  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08007990  08007990  00017990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c3c  08007c3c  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  08007c3c  08007c3c  00017c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c44  08007c44  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c44  08007c44  00017c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c48  08007c48  00017c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08007c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000130  08007d7c  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08007d7c  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001799d  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f2c  00000000  00000000  00037afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003aa30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  0003be08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028948  00000000  00000000  0003d0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ecb  00000000  00000000  000659f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7001  00000000  00000000  0007d8bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001748bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d38  00000000  00000000  0017490c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000130 	.word	0x20000130
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007978 	.word	0x08007978

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000134 	.word	0x20000134
 80001cc:	08007978 	.word	0x08007978

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <buzzerInit>:
int noteJonatan []= {255 , 303,  303,  286, 340, 340, 390, 340, 303, 286, 255, 255, 255, 255 , 303,  303,  286, 340, 340 ,390, 303, 255, 255,390};
int periodeJonatan[]={250, 250,  500,  250, 250, 500, 250, 250, 250, 250, 500, 250, 250, 250,  250,  500,  250, 250, 500, 250, 250, 250 ,500,250};


void buzzerInit(BUZZER* buzzer)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	buzzer->state = MUSIC_OFF;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	701a      	strb	r2, [r3, #0]
	buzzer->sizeOfMusic = (sizeof(noteJonatan) / sizeof(noteJonatan[0]));
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2218      	movs	r2, #24
 80005b6:	605a      	str	r2, [r3, #4]
	buzzer->currentNote= 0;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
	buzzer->counter = 0;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
	buzzer->Maxcount = periodeJonatan[0];
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <buzzerInit+0x34>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	611a      	str	r2, [r3, #16]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	20000060 	.word	0x20000060

080005dc <playNote>:

void playNote(BUZZER* buzzer)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <playNote+0x54>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2200      	movs	r2, #0
 80005ea:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim3, noteJonatan[buzzer->currentNote]);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	4a10      	ldr	r2, [pc, #64]	; (8000634 <playNote+0x58>)
 80005f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <playNote+0x54>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	4a0c      	ldr	r2, [pc, #48]	; (8000634 <playNote+0x58>)
 8000602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000606:	461a      	mov	r2, r3
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <playNote+0x54>)
 800060a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (noteJonatan[buzzer->currentNote]/2));
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	4a08      	ldr	r2, [pc, #32]	; (8000634 <playNote+0x58>)
 8000612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000616:	0fda      	lsrs	r2, r3, #31
 8000618:	4413      	add	r3, r2
 800061a:	105b      	asrs	r3, r3, #1
 800061c:	461a      	mov	r2, r3
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <playNote+0x54>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	635a      	str	r2, [r3, #52]	; 0x34

}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	200001a0 	.word	0x200001a0
 8000634:	20000000 	.word	0x20000000

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063c:	f000 feba 	bl	80013b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000640:	f000 f80d 	bl	800065e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000644:	f000 f95e 	bl	8000904 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000648:	f000 f92c 	bl	80008a4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800064c:	f000 f858 	bl	8000700 <MX_I2C1_Init>
  MX_TIM6_Init();
 8000650:	f000 f8f0 	bl	8000834 <MX_TIM6_Init>
  MX_TIM3_Init();
 8000654:	f000 f894 	bl	8000780 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  mainloop();
 8000658:	f000 fb34 	bl	8000cc4 <mainloop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065c:	e7fe      	b.n	800065c <main+0x24>

0800065e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b096      	sub	sp, #88	; 0x58
 8000662:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	2244      	movs	r2, #68	; 0x44
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f005 ff7b 	bl	8006568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000672:	463b      	mov	r3, r7
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000680:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000684:	f002 f886 	bl	8002794 <HAL_PWREx_ControlVoltageScaling>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800068e:	f000 f9a7 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000692:	2302      	movs	r3, #2
 8000694:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ac:	230a      	movs	r3, #10
 80006ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006b0:	2307      	movs	r3, #7
 80006b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 f8bd 	bl	8002840 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006cc:	f000 f988 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2303      	movs	r3, #3
 80006d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	2104      	movs	r1, #4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 fc85 	bl	8002ff8 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006f4:	f000 f974 	bl	80009e0 <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3758      	adds	r7, #88	; 0x58
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_I2C1_Init+0x74>)
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <MX_I2C1_Init+0x78>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_I2C1_Init+0x74>)
 800070c:	4a1b      	ldr	r2, [pc, #108]	; (800077c <MX_I2C1_Init+0x7c>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_I2C1_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_I2C1_Init+0x74>)
 8000718:	2201      	movs	r2, #1
 800071a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_I2C1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_I2C1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_I2C1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800073a:	480e      	ldr	r0, [pc, #56]	; (8000774 <MX_I2C1_Init+0x74>)
 800073c:	f001 fa20 	bl	8001b80 <HAL_I2C_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000746:	f000 f94b 	bl	80009e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800074a:	2100      	movs	r1, #0
 800074c:	4809      	ldr	r0, [pc, #36]	; (8000774 <MX_I2C1_Init+0x74>)
 800074e:	f001 ff7b 	bl	8002648 <HAL_I2CEx_ConfigAnalogFilter>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000758:	f000 f942 	bl	80009e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800075c:	2100      	movs	r1, #0
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_I2C1_Init+0x74>)
 8000760:	f001 ffbd 	bl	80026de <HAL_I2CEx_ConfigDigitalFilter>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800076a:	f000 f939 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2000014c 	.word	0x2000014c
 8000778:	40005400 	.word	0x40005400
 800077c:	10909cec 	.word	0x10909cec

08000780 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000792:	463b      	mov	r3, r7
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
 80007a0:	615a      	str	r2, [r3, #20]
 80007a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_TIM3_Init+0xac>)
 80007a6:	4a22      	ldr	r2, [pc, #136]	; (8000830 <MX_TIM3_Init+0xb0>)
 80007a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000;
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <MX_TIM3_Init+0xac>)
 80007ac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80007b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b2:	4b1e      	ldr	r3, [pc, #120]	; (800082c <MX_TIM3_Init+0xac>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_TIM3_Init+0xac>)
 80007ba:	2232      	movs	r2, #50	; 0x32
 80007bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007be:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_TIM3_Init+0xac>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_TIM3_Init+0xac>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007ca:	4818      	ldr	r0, [pc, #96]	; (800082c <MX_TIM3_Init+0xac>)
 80007cc:	f003 fc4c 	bl	8004068 <HAL_TIM_PWM_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80007d6:	f000 f903 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	4810      	ldr	r0, [pc, #64]	; (800082c <MX_TIM3_Init+0xac>)
 80007ea:	f004 fc23 	bl	8005034 <HAL_TIMEx_MasterConfigSynchronization>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80007f4:	f000 f8f4 	bl	80009e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f8:	2360      	movs	r3, #96	; 0x60
 80007fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 25;
 80007fc:	2319      	movs	r3, #25
 80007fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000808:	463b      	mov	r3, r7
 800080a:	2200      	movs	r2, #0
 800080c:	4619      	mov	r1, r3
 800080e:	4807      	ldr	r0, [pc, #28]	; (800082c <MX_TIM3_Init+0xac>)
 8000810:	f003 ff3e 	bl	8004690 <HAL_TIM_PWM_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800081a:	f000 f8e1 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800081e:	4803      	ldr	r0, [pc, #12]	; (800082c <MX_TIM3_Init+0xac>)
 8000820:	f000 fc22 	bl	8001068 <HAL_TIM_MspPostInit>

}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200001a0 	.word	0x200001a0
 8000830:	40000400 	.word	0x40000400

08000834 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_TIM6_Init+0x68>)
 8000846:	4a16      	ldr	r2, [pc, #88]	; (80008a0 <MX_TIM6_Init+0x6c>)
 8000848:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_TIM6_Init+0x68>)
 800084c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000850:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_TIM6_Init+0x68>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8000858:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_TIM6_Init+0x68>)
 800085a:	f241 3287 	movw	r2, #4999	; 0x1387
 800085e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_TIM6_Init+0x68>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000866:	480d      	ldr	r0, [pc, #52]	; (800089c <MX_TIM6_Init+0x68>)
 8000868:	f003 faa6 	bl	8003db8 <HAL_TIM_Base_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000872:	f000 f8b5 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	4619      	mov	r1, r3
 8000882:	4806      	ldr	r0, [pc, #24]	; (800089c <MX_TIM6_Init+0x68>)
 8000884:	f004 fbd6 	bl	8005034 <HAL_TIMEx_MasterConfigSynchronization>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800088e:	f000 f8a7 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200001ec 	.word	0x200001ec
 80008a0:	40001000 	.word	0x40001000

080008a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008aa:	4a15      	ldr	r2, [pc, #84]	; (8000900 <MX_USART2_UART_Init+0x5c>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008e8:	f004 fc4a 	bl	8005180 <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008f2:	f000 f875 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000238 	.word	0x20000238
 8000900:	40004400 	.word	0x40004400

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <MX_GPIO_Init+0xd4>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a2e      	ldr	r2, [pc, #184]	; (80009d8 <MX_GPIO_Init+0xd4>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <MX_GPIO_Init+0xd4>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <MX_GPIO_Init+0xd4>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a28      	ldr	r2, [pc, #160]	; (80009d8 <MX_GPIO_Init+0xd4>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <MX_GPIO_Init+0xd4>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <MX_GPIO_Init+0xd4>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a22      	ldr	r2, [pc, #136]	; (80009d8 <MX_GPIO_Init+0xd4>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <MX_GPIO_Init+0xd4>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_GPIO_Init+0xd4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	4a1c      	ldr	r2, [pc, #112]	; (80009d8 <MX_GPIO_Init+0xd4>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096e:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_GPIO_Init+0xd4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2160      	movs	r1, #96	; 0x60
 800097e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000982:	f001 f8cd 	bl	8001b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000986:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800098c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	480f      	ldr	r0, [pc, #60]	; (80009dc <MX_GPIO_Init+0xd8>)
 800099e:	f000 ff15 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD1_Pin;
 80009a2:	2360      	movs	r3, #96	; 0x60
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009bc:	f000 ff06 	bl	80017cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2100      	movs	r1, #0
 80009c4:	2028      	movs	r0, #40	; 0x28
 80009c6:	f000 fe4c 	bl	8001662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009ca:	2028      	movs	r0, #40	; 0x28
 80009cc:	f000 fe65 	bl	800169a <HAL_NVIC_EnableIRQ>

}
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	; 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000800 	.word	0x48000800

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <_write>:


BUZZER buzzer;

int _write(int fd, char* ptr, int len)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000a00:	68b9      	ldr	r1, [r7, #8]
 8000a02:	4804      	ldr	r0, [pc, #16]	; (8000a14 <_write+0x28>)
 8000a04:	f004 fc0a 	bl	800521c <HAL_UART_Transmit>
	return len;
 8000a08:	687b      	ldr	r3, [r7, #4]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000238 	.word	0x20000238

08000a18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(&htim3);
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a22:	f003 fa89 	bl	8003f38 <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000a26:	2100      	movs	r1, #0
 8000a28:	4807      	ldr	r0, [pc, #28]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a2a:	f003 fc7b 	bl	8004324 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2120      	movs	r1, #32
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a36:	f001 f873 	bl	8001b20 <HAL_GPIO_WritePin>
	rtcOnTimerInterrupt();
 8000a3a:	f000 f997 	bl	8000d6c <rtcOnTimerInterrupt>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200001a0 	.word	0x200001a0

08000a4c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	80fb      	strh	r3, [r7, #6]

}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
	...

08000a64 <commTask>:
int cmdcount = 0;
int cmdprint = 0;
int flagSystemLoock = 0;

int commTask()
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0

	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8000a6a:	1db9      	adds	r1, r7, #6
 8000a6c:	230a      	movs	r3, #10
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4837      	ldr	r0, [pc, #220]	; (8000b50 <commTask+0xec>)
 8000a72:	f004 fc67 	bl	8005344 <HAL_UART_Receive>
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d020      	beq.n	8000ac2 <commTask+0x5e>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 8000a80:	4b33      	ldr	r3, [pc, #204]	; (8000b50 <commTask+0xec>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d011      	beq.n	8000ab2 <commTask+0x4e>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000a8e:	4b30      	ldr	r3, [pc, #192]	; (8000b50 <commTask+0xec>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2208      	movs	r2, #8
 8000a94:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 8000a96:	e00c      	b.n	8000ab2 <commTask+0x4e>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000a98:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <commTask+0xf0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	1c5a      	adds	r2, r3, #1
 8000a9e:	492d      	ldr	r1, [pc, #180]	; (8000b54 <commTask+0xf0>)
 8000aa0:	600a      	str	r2, [r1, #0]
 8000aa2:	4a2d      	ldr	r2, [pc, #180]	; (8000b58 <commTask+0xf4>)
 8000aa4:	1899      	adds	r1, r3, r2
 8000aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4828      	ldr	r0, [pc, #160]	; (8000b50 <commTask+0xec>)
 8000aae:	f004 fbb5 	bl	800521c <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 8000ab2:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <commTask+0xf0>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4b29      	ldr	r3, [pc, #164]	; (8000b5c <commTask+0xf8>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	dbec      	blt.n	8000a98 <commTask+0x34>
		}

		return 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e042      	b.n	8000b48 <commTask+0xe4>
	}

	if (ch != '\r' && ch != '\n')
 8000ac2:	79bb      	ldrb	r3, [r7, #6]
 8000ac4:	2b0d      	cmp	r3, #13
 8000ac6:	d026      	beq.n	8000b16 <commTask+0xb2>
 8000ac8:	79bb      	ldrb	r3, [r7, #6]
 8000aca:	2b0a      	cmp	r3, #10
 8000acc:	d023      	beq.n	8000b16 <commTask+0xb2>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 8000ace:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <commTask+0xf8>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b63      	cmp	r3, #99	; 0x63
 8000ad4:	dd05      	ble.n	8000ae2 <commTask+0x7e>
		{
			cmdcount = 0;
 8000ad6:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <commTask+0xf8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <commTask+0xf0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8000ae2:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <commTask+0xf8>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	491c      	ldr	r1, [pc, #112]	; (8000b5c <commTask+0xf8>)
 8000aea:	600a      	str	r2, [r1, #0]
 8000aec:	79b9      	ldrb	r1, [r7, #6]
 8000aee:	4a1a      	ldr	r2, [pc, #104]	; (8000b58 <commTask+0xf4>)
 8000af0:	54d1      	strb	r1, [r2, r3]
		return 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	e028      	b.n	8000b48 <commTask+0xe4>

	// here we have a time to print the command
	while (cmdprint < cmdcount)
	{

		     HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <commTask+0xf0>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	1c5a      	adds	r2, r3, #1
 8000afc:	4915      	ldr	r1, [pc, #84]	; (8000b54 <commTask+0xf0>)
 8000afe:	600a      	str	r2, [r1, #0]
 8000b00:	4a15      	ldr	r2, [pc, #84]	; (8000b58 <commTask+0xf4>)
 8000b02:	1899      	adds	r1, r3, r2
 8000b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4811      	ldr	r0, [pc, #68]	; (8000b50 <commTask+0xec>)
 8000b0c:	f004 fb86 	bl	800521c <HAL_UART_Transmit>
			printf("The system lock \r\n");
 8000b10:	4813      	ldr	r0, [pc, #76]	; (8000b60 <commTask+0xfc>)
 8000b12:	f005 fd9f 	bl	8006654 <puts>
	while (cmdprint < cmdcount)
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <commTask+0xf0>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <commTask+0xf8>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	dbe9      	blt.n	8000af6 <commTask+0x92>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000b22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b26:	2202      	movs	r2, #2
 8000b28:	490e      	ldr	r1, [pc, #56]	; (8000b64 <commTask+0x100>)
 8000b2a:	4809      	ldr	r0, [pc, #36]	; (8000b50 <commTask+0xec>)
 8000b2c:	f004 fb76 	bl	800521c <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <commTask+0xf8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <commTask+0xf4>)
 8000b36:	2100      	movs	r1, #0
 8000b38:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <commTask+0xf8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <commTask+0xf0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
	return 1;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000238 	.word	0x20000238
 8000b54:	20000338 	.word	0x20000338
 8000b58:	200002d0 	.word	0x200002d0
 8000b5c:	20000334 	.word	0x20000334
 8000b60:	08007990 	.word	0x08007990
 8000b64:	080079a4 	.word	0x080079a4

08000b68 <handleCommand>:


void handleCommand()
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
    uint32_t pass;
    static int Lock3min = 0;
    static int Lock5min = 0;


  int params = sscanf((const char*)cmdbuffer, "%s %lu", cmd, &pass);
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	f107 0208 	add.w	r2, r7, #8
 8000b74:	4944      	ldr	r1, [pc, #272]	; (8000c88 <handleCommand+0x120>)
 8000b76:	4845      	ldr	r0, [pc, #276]	; (8000c8c <handleCommand+0x124>)
 8000b78:	f005 fd74 	bl	8006664 <siscanf>
 8000b7c:	61f8      	str	r0, [r7, #28]
  if (params == 0){
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d07d      	beq.n	8000c80 <handleCommand+0x118>
	  return;
  }
  lockOrOpen();
 8000b84:	f000 f97c 	bl	8000e80 <lockOrOpen>
  if (flagSystemLoock == 1){
 8000b88:	4b41      	ldr	r3, [pc, #260]	; (8000c90 <handleCommand+0x128>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d103      	bne.n	8000b98 <handleCommand+0x30>
	  printf("The system is lock \r\n");
 8000b90:	4840      	ldr	r0, [pc, #256]	; (8000c94 <handleCommand+0x12c>)
 8000b92:	f005 fd5f 	bl	8006654 <puts>
  	  return;
 8000b96:	e074      	b.n	8000c82 <handleCommand+0x11a>
  }

  if (strcmp(cmd, "code") == 0){
 8000b98:	f107 0308 	add.w	r3, r7, #8
 8000b9c:	493e      	ldr	r1, [pc, #248]	; (8000c98 <handleCommand+0x130>)
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fb16 	bl	80001d0 <strcmp>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d155      	bne.n	8000c56 <handleCommand+0xee>
	  if(getCode(pass)){
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f8bd 	bl	8000d2c <getCode>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d00f      	beq.n	8000bd8 <handleCommand+0x70>
		  printf("password ok\r\n");
 8000bb8:	4838      	ldr	r0, [pc, #224]	; (8000c9c <handleCommand+0x134>)
 8000bba:	f005 fd4b 	bl	8006654 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2120      	movs	r1, #32
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc6:	f000 ffab 	bl	8001b20 <HAL_GPIO_WritePin>
		  Lock3min = 0 ;
 8000bca:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <handleCommand+0x138>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
		  Lock5min = 0 ;
 8000bd0:	4b34      	ldr	r3, [pc, #208]	; (8000ca4 <handleCommand+0x13c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	e054      	b.n	8000c82 <handleCommand+0x11a>
	  }
	  else{
		  HAL_TIM_Base_Start(&htim3);
 8000bd8:	4833      	ldr	r0, [pc, #204]	; (8000ca8 <handleCommand+0x140>)
 8000bda:	f003 f945 	bl	8003e68 <HAL_TIM_Base_Start>
		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000bde:	2100      	movs	r1, #0
 8000be0:	4831      	ldr	r0, [pc, #196]	; (8000ca8 <handleCommand+0x140>)
 8000be2:	f003 fa99 	bl	8004118 <HAL_TIM_PWM_Start>
		  playNote(&buzzer);
 8000be6:	4831      	ldr	r0, [pc, #196]	; (8000cac <handleCommand+0x144>)
 8000be8:	f7ff fcf8 	bl	80005dc <playNote>
		  if(Lock3min<2){
 8000bec:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <handleCommand+0x138>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	dc0d      	bgt.n	8000c10 <handleCommand+0xa8>
			 Lock3min++;
 8000bf4:	4b2a      	ldr	r3, [pc, #168]	; (8000ca0 <handleCommand+0x138>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	4a29      	ldr	r2, [pc, #164]	; (8000ca0 <handleCommand+0x138>)
 8000bfc:	6013      	str	r3, [r2, #0]
			 Lock5min++;
 8000bfe:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <handleCommand+0x13c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	3301      	adds	r3, #1
 8000c04:	4a27      	ldr	r2, [pc, #156]	; (8000ca4 <handleCommand+0x13c>)
 8000c06:	6013      	str	r3, [r2, #0]
			 printf("wrong password \r\n");
 8000c08:	4829      	ldr	r0, [pc, #164]	; (8000cb0 <handleCommand+0x148>)
 8000c0a:	f005 fd23 	bl	8006654 <puts>
 8000c0e:	e038      	b.n	8000c82 <handleCommand+0x11a>
		  }
		  else{
			 if(Lock5min > 5){
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <handleCommand+0x13c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b05      	cmp	r3, #5
 8000c16:	dd0e      	ble.n	8000c36 <handleCommand+0xce>
				 lockSystem5min();
 8000c18:	f000 f916 	bl	8000e48 <lockSystem5min>
				 HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2140      	movs	r1, #64	; 0x40
 8000c20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c24:	f000 ff7c 	bl	8001b20 <HAL_GPIO_WritePin>
				 printf("wrong password. try again for 5 min \r\n");
 8000c28:	4822      	ldr	r0, [pc, #136]	; (8000cb4 <handleCommand+0x14c>)
 8000c2a:	f005 fd13 	bl	8006654 <puts>
				 Lock5min = 0;
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <handleCommand+0x13c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	e025      	b.n	8000c82 <handleCommand+0x11a>
			 }
			 else{
				 flagSystemLoock = 1 ;
 8000c36:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <handleCommand+0x128>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	601a      	str	r2, [r3, #0]
				 HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2140      	movs	r1, #64	; 0x40
 8000c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c44:	f000 ff6c 	bl	8001b20 <HAL_GPIO_WritePin>
				 printf("wrong password. try again for 30 seconds \r\n");
 8000c48:	481b      	ldr	r0, [pc, #108]	; (8000cb8 <handleCommand+0x150>)
 8000c4a:	f005 fd03 	bl	8006654 <puts>
				 Lock3min = 0 ;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <handleCommand+0x138>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	e015      	b.n	8000c82 <handleCommand+0x11a>

		  }
	  }
  }

  else if (strcmp(cmd, "stop") == 0){
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	4918      	ldr	r1, [pc, #96]	; (8000cbc <handleCommand+0x154>)
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fab7 	bl	80001d0 <strcmp>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d107      	bne.n	8000c78 <handleCommand+0x110>
	  HAL_TIM_Base_Stop(&htim3);
 8000c68:	480f      	ldr	r0, [pc, #60]	; (8000ca8 <handleCommand+0x140>)
 8000c6a:	f003 f965 	bl	8003f38 <HAL_TIM_Base_Stop>
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000c6e:	2100      	movs	r1, #0
 8000c70:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <handleCommand+0x140>)
 8000c72:	f003 fb57 	bl	8004324 <HAL_TIM_PWM_Stop>
 8000c76:	e004      	b.n	8000c82 <handleCommand+0x11a>
  }
  else{
	  printf("Invalid command\r\n");
 8000c78:	4811      	ldr	r0, [pc, #68]	; (8000cc0 <handleCommand+0x158>)
 8000c7a:	f005 fceb 	bl	8006654 <puts>
 8000c7e:	e000      	b.n	8000c82 <handleCommand+0x11a>
	  return;
 8000c80:	bf00      	nop
  }
}
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	080079a8 	.word	0x080079a8
 8000c8c:	200002d0 	.word	0x200002d0
 8000c90:	2000033c 	.word	0x2000033c
 8000c94:	080079b0 	.word	0x080079b0
 8000c98:	080079c8 	.word	0x080079c8
 8000c9c:	080079d0 	.word	0x080079d0
 8000ca0:	20000340 	.word	0x20000340
 8000ca4:	20000344 	.word	0x20000344
 8000ca8:	200001a0 	.word	0x200001a0
 8000cac:	200002bc 	.word	0x200002bc
 8000cb0:	080079e0 	.word	0x080079e0
 8000cb4:	080079f4 	.word	0x080079f4
 8000cb8:	08007a1c 	.word	0x08007a1c
 8000cbc:	08007a48 	.word	0x08007a48
 8000cc0:	08007a50 	.word	0x08007a50

08000cc4 <mainloop>:




void mainloop()
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc8:	2036      	movs	r0, #54	; 0x36
 8000cca:	f000 fce6 	bl	800169a <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim6);
 8000cce:	480a      	ldr	r0, [pc, #40]	; (8000cf8 <mainloop+0x34>)
 8000cd0:	f003 f95a 	bl	8003f88 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000cd4:	2012      	movs	r0, #18
 8000cd6:	f000 fce0 	bl	800169a <HAL_NVIC_EnableIRQ>
	buzzerInit(&buzzer);
 8000cda:	4808      	ldr	r0, [pc, #32]	; (8000cfc <mainloop+0x38>)
 8000cdc:	f7ff fc62 	bl	80005a4 <buzzerInit>
	setCode(1234);
 8000ce0:	f240 40d2 	movw	r0, #1234	; 0x4d2
 8000ce4:	f000 f80c 	bl	8000d00 <setCode>

	while (1) {

		if (commTask()) {
 8000ce8:	f7ff febc 	bl	8000a64 <commTask>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d0fa      	beq.n	8000ce8 <mainloop+0x24>
			handleCommand();
 8000cf2:	f7ff ff39 	bl	8000b68 <handleCommand>
		if (commTask()) {
 8000cf6:	e7f7      	b.n	8000ce8 <mainloop+0x24>
 8000cf8:	200001ec 	.word	0x200001ec
 8000cfc:	200002bc 	.word	0x200002bc

08000d00 <setCode>:
#include "rtc.h"

extern I2C_HandleTypeDef hi2c1;
extern int flagSystemLoock;

void setCode(uint32_t MainCode){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af04      	add	r7, sp, #16
 8000d06:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, 208, 8, 1, (uint8_t *)&MainCode, sizeof(MainCode), 0xff);
 8000d08:	23ff      	movs	r3, #255	; 0xff
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2301      	movs	r3, #1
 8000d16:	2208      	movs	r2, #8
 8000d18:	21d0      	movs	r1, #208	; 0xd0
 8000d1a:	4803      	ldr	r0, [pc, #12]	; (8000d28 <setCode+0x28>)
 8000d1c:	f000 ffc0 	bl	8001ca0 <HAL_I2C_Mem_Write>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	2000014c 	.word	0x2000014c

08000d2c <getCode>:

uint32_t code;
int getCode(uint32_t pass){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af04      	add	r7, sp, #16
 8000d32:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 208, 8, 1, (uint8_t *)&code, sizeof(code), 0xff);
 8000d34:	23ff      	movs	r3, #255	; 0xff
 8000d36:	9302      	str	r3, [sp, #8]
 8000d38:	2304      	movs	r3, #4
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <getCode+0x38>)
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2301      	movs	r3, #1
 8000d42:	2208      	movs	r2, #8
 8000d44:	21d0      	movs	r1, #208	; 0xd0
 8000d46:	4808      	ldr	r0, [pc, #32]	; (8000d68 <getCode+0x3c>)
 8000d48:	f001 f8be 	bl	8001ec8 <HAL_I2C_Mem_Read>
	if (pass == code){
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <getCode+0x38>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d101      	bne.n	8000d5a <getCode+0x2e>
		return 1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <getCode+0x30>
	}
	return 0;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000348 	.word	0x20000348
 8000d68:	2000014c 	.word	0x2000014c

08000d6c <rtcOnTimerInterrupt>:

int counterTimeEror = 0;
void rtcOnTimerInterrupt(){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	if (flagSystemLoock == 1){
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <rtcOnTimerInterrupt+0x3c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d115      	bne.n	8000da4 <rtcOnTimerInterrupt+0x38>
		if (counterTimeEror > 10){
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <rtcOnTimerInterrupt+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b0a      	cmp	r3, #10
 8000d7e:	dd0c      	ble.n	8000d9a <rtcOnTimerInterrupt+0x2e>
			counterTimeEror = 0;
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <rtcOnTimerInterrupt+0x40>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
			flagSystemLoock = 0;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <rtcOnTimerInterrupt+0x3c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2140      	movs	r1, #64	; 0x40
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f000 fec4 	bl	8001b20 <HAL_GPIO_WritePin>
		}
		else{
			counterTimeEror++;
		}
	}
}
 8000d98:	e004      	b.n	8000da4 <rtcOnTimerInterrupt+0x38>
			counterTimeEror++;
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <rtcOnTimerInterrupt+0x40>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	4a02      	ldr	r2, [pc, #8]	; (8000dac <rtcOnTimerInterrupt+0x40>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2000033c 	.word	0x2000033c
 8000dac:	2000034c 	.word	0x2000034c

08000db0 <timeInSec>:
	uint8_t setDateBuff[]={0,0,0,1,1,1,0};
	HAL_I2C_Mem_Write(&hi2c1, 208, 0, 1, setDateBuff, 7, 0xff);
}


uint8_t timeInSec(){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af04      	add	r7, sp, #16
 uint8_t readBuff[7];
 uint8_t timeOfSec= 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, 208, 0, 1, readBuff, 7, 0xff);
 8000dba:	23ff      	movs	r3, #255	; 0xff
 8000dbc:	9302      	str	r3, [sp, #8]
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	2200      	movs	r2, #0
 8000dca:	21d0      	movs	r1, #208	; 0xd0
 8000dcc:	481d      	ldr	r0, [pc, #116]	; (8000e44 <timeInSec+0x94>)
 8000dce:	f001 f87b 	bl	8001ec8 <HAL_I2C_Mem_Read>

  timeOfSec = ((readBuff[0] & 15) + (readBuff[0] >> 4)*10 )
 8000dd2:	783b      	ldrb	r3, [r7, #0]
 8000dd4:	f003 030f 	and.w	r3, r3, #15
 8000dd8:	b2da      	uxtb	r2, r3
            + ((readBuff[1] & 15) + (readBuff[1] >>4)*10 ) * 60
 8000dda:	787b      	ldrb	r3, [r7, #1]
 8000ddc:	f003 010f 	and.w	r1, r3, #15
 8000de0:	787b      	ldrb	r3, [r7, #1]
 8000de2:	091b      	lsrs	r3, r3, #4
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	4603      	mov	r3, r0
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4403      	add	r3, r0
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	440b      	add	r3, r1
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	4619      	mov	r1, r3
 8000df6:	0109      	lsls	r1, r1, #4
 8000df8:	1acb      	subs	r3, r1, r3
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	b2d9      	uxtb	r1, r3
  timeOfSec = ((readBuff[0] & 15) + (readBuff[0] >> 4)*10 )
 8000dfe:	783b      	ldrb	r3, [r7, #0]
            + ((readBuff[1] & 15) + (readBuff[1] >>4)*10 ) * 60
 8000e00:	091b      	lsrs	r3, r3, #4
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	4618      	mov	r0, r3
 8000e06:	0080      	lsls	r0, r0, #2
 8000e08:	4403      	add	r3, r0
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	440b      	add	r3, r1
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	4413      	add	r3, r2
 8000e14:	b2da      	uxtb	r2, r3
            + ((readBuff[2] & 15) + (readBuff[2] >>4)*10 ) * 60 * 60 ;
 8000e16:	78bb      	ldrb	r3, [r7, #2]
 8000e18:	f003 010f 	and.w	r1, r3, #15
 8000e1c:	78bb      	ldrb	r3, [r7, #2]
 8000e1e:	091b      	lsrs	r3, r3, #4
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	4603      	mov	r3, r0
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4403      	add	r3, r0
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	440b      	add	r3, r1
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	011b      	lsls	r3, r3, #4
 8000e32:	b2db      	uxtb	r3, r3
  timeOfSec = ((readBuff[0] & 15) + (readBuff[0] >> 4)*10 )
 8000e34:	4413      	add	r3, r2
 8000e36:	71fb      	strb	r3, [r7, #7]


  return timeOfSec;
 8000e38:	79fb      	ldrb	r3, [r7, #7]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	2000014c 	.word	0x2000014c

08000e48 <lockSystem5min>:

void lockSystem5min(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af04      	add	r7, sp, #16
	uint8_t currentime;
	currentime = timeInSec() + 300;
 8000e4e:	f7ff ffaf 	bl	8000db0 <timeInSec>
 8000e52:	4603      	mov	r3, r0
 8000e54:	332c      	adds	r3, #44	; 0x2c
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 208, 20, 1, (uint8_t *)&currentime, sizeof(currentime), 0xff);
 8000e5a:	23ff      	movs	r3, #255	; 0xff
 8000e5c:	9302      	str	r3, [sp, #8]
 8000e5e:	2301      	movs	r3, #1
 8000e60:	9301      	str	r3, [sp, #4]
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	2301      	movs	r3, #1
 8000e68:	2214      	movs	r2, #20
 8000e6a:	21d0      	movs	r1, #208	; 0xd0
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <lockSystem5min+0x34>)
 8000e6e:	f000 ff17 	bl	8001ca0 <HAL_I2C_Mem_Write>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000014c 	.word	0x2000014c

08000e80 <lockOrOpen>:

void lockOrOpen(){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af04      	add	r7, sp, #16
	uint8_t currentime;
	HAL_I2C_Mem_Read(&hi2c1, 208, 20, 1, (uint8_t *)&currentime, sizeof(currentime), 0xff);
 8000e86:	23ff      	movs	r3, #255	; 0xff
 8000e88:	9302      	str	r3, [sp, #8]
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2301      	movs	r3, #1
 8000e94:	2214      	movs	r2, #20
 8000e96:	21d0      	movs	r1, #208	; 0xd0
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <lockOrOpen+0x50>)
 8000e9a:	f001 f815 	bl	8001ec8 <HAL_I2C_Mem_Read>
	if(timeInSec() <= currentime){
 8000e9e:	f7ff ff87 	bl	8000db0 <timeInSec>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d803      	bhi.n	8000eb4 <lockOrOpen+0x34>
		flagSystemLoock = 1;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <lockOrOpen+0x54>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
	else{
	   flagSystemLoock = 0;
	   HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
	}

}
 8000eb2:	e008      	b.n	8000ec6 <lockOrOpen+0x46>
	   flagSystemLoock = 0;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <lockOrOpen+0x54>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
	   HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2140      	movs	r1, #64	; 0x40
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec2:	f000 fe2d 	bl	8001b20 <HAL_GPIO_WritePin>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000014c 	.word	0x2000014c
 8000ed4:	2000033c 	.word	0x2000033c

08000ed8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_MspInit+0x44>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <HAL_MspInit+0x44>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_MspInit+0x44>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_MspInit+0x44>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_MspInit+0x44>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	6593      	str	r3, [r2, #88]	; 0x58
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_MspInit+0x44>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000

08000f20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b0ac      	sub	sp, #176	; 0xb0
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2288      	movs	r2, #136	; 0x88
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f005 fb11 	bl	8006568 <memset>
  if(hi2c->Instance==I2C1)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <HAL_I2C_MspInit+0xb0>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d13b      	bne.n	8000fc8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f50:	2340      	movs	r3, #64	; 0x40
 8000f52:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f002 fa6f 	bl	8003440 <HAL_RCCEx_PeriphCLKConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f68:	f7ff fd3a 	bl	80009e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <HAL_I2C_MspInit+0xb4>)
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f70:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <HAL_I2C_MspInit+0xb4>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <HAL_I2C_MspInit+0xb4>)
 8000f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f8c:	2312      	movs	r3, #18
 8000f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <HAL_I2C_MspInit+0xb8>)
 8000fac:	f000 fc0e 	bl	80017cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_I2C_MspInit+0xb4>)
 8000fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <HAL_I2C_MspInit+0xb4>)
 8000fb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fba:	6593      	str	r3, [r2, #88]	; 0x58
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_I2C_MspInit+0xb4>)
 8000fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fc8:	bf00      	nop
 8000fca:	37b0      	adds	r7, #176	; 0xb0
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40005400 	.word	0x40005400
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	48000400 	.word	0x48000400

08000fdc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <HAL_TIM_PWM_MspInit+0x38>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d10b      	bne.n	8001006 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	4a09      	ldr	r2, [pc, #36]	; (8001018 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001006:	bf00      	nop
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40000400 	.word	0x40000400
 8001018:	40021000 	.word	0x40021000

0800101c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0d      	ldr	r2, [pc, #52]	; (8001060 <HAL_TIM_Base_MspInit+0x44>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d113      	bne.n	8001056 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_TIM_Base_MspInit+0x48>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001032:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <HAL_TIM_Base_MspInit+0x48>)
 8001034:	f043 0310 	orr.w	r3, r3, #16
 8001038:	6593      	str	r3, [r2, #88]	; 0x58
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_TIM_Base_MspInit+0x48>)
 800103c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103e:	f003 0310 	and.w	r3, r3, #16
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	2036      	movs	r0, #54	; 0x36
 800104c:	f000 fb09 	bl	8001662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001050:	2036      	movs	r0, #54	; 0x36
 8001052:	f000 fb22 	bl	800169a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40001000 	.word	0x40001000
 8001064:	40021000 	.word	0x40021000

08001068 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a11      	ldr	r2, [pc, #68]	; (80010cc <HAL_TIM_MspPostInit+0x64>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d11b      	bne.n	80010c2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_TIM_MspPostInit+0x68>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <HAL_TIM_MspPostInit+0x68>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_TIM_MspPostInit+0x68>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010a2:	2310      	movs	r3, #16
 80010a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010b2:	2302      	movs	r3, #2
 80010b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <HAL_TIM_MspPostInit+0x6c>)
 80010be:	f000 fb85 	bl	80017cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010c2:	bf00      	nop
 80010c4:	3720      	adds	r7, #32
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40000400 	.word	0x40000400
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48000400 	.word	0x48000400

080010d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b0ac      	sub	sp, #176	; 0xb0
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2288      	movs	r2, #136	; 0x88
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f005 fa35 	bl	8006568 <memset>
  if(huart->Instance==USART2)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a25      	ldr	r2, [pc, #148]	; (8001198 <HAL_UART_MspInit+0xc0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d143      	bne.n	8001190 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001108:	2302      	movs	r3, #2
 800110a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800110c:	2300      	movs	r3, #0
 800110e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4618      	mov	r0, r3
 8001116:	f002 f993 	bl	8003440 <HAL_RCCEx_PeriphCLKConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001120:	f7ff fc5e 	bl	80009e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001124:	4b1d      	ldr	r3, [pc, #116]	; (800119c <HAL_UART_MspInit+0xc4>)
 8001126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001128:	4a1c      	ldr	r2, [pc, #112]	; (800119c <HAL_UART_MspInit+0xc4>)
 800112a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112e:	6593      	str	r3, [r2, #88]	; 0x58
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <HAL_UART_MspInit+0xc4>)
 8001132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_UART_MspInit+0xc4>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001140:	4a16      	ldr	r2, [pc, #88]	; (800119c <HAL_UART_MspInit+0xc4>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_UART_MspInit+0xc4>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001154:	230c      	movs	r3, #12
 8001156:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800116c:	2307      	movs	r3, #7
 800116e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001176:	4619      	mov	r1, r3
 8001178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117c:	f000 fb26 	bl	80017cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	2026      	movs	r0, #38	; 0x26
 8001186:	f000 fa6c 	bl	8001662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800118a:	2026      	movs	r0, #38	; 0x26
 800118c:	f000 fa85 	bl	800169a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	37b0      	adds	r7, #176	; 0xb0
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40004400 	.word	0x40004400
 800119c:	40021000 	.word	0x40021000

080011a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <NMI_Handler+0x4>

080011a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <HardFault_Handler+0x4>

080011ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <MemManage_Handler+0x4>

080011b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <BusFault_Handler+0x4>

080011b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <UsageFault_Handler+0x4>

080011be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ec:	f000 f93e 	bl	800146c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <USART2_IRQHandler+0x10>)
 80011fa:	f004 f975 	bl	80054e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000238 	.word	0x20000238

08001208 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800120c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001210:	f000 fc9e 	bl	8001b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}

08001218 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <TIM6_DAC_IRQHandler+0x10>)
 800121e:	f003 f917 	bl	8004450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200001ec 	.word	0x200001ec

0800122c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e00a      	b.n	8001254 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800123e:	f3af 8000 	nop.w
 8001242:	4601      	mov	r1, r0
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	60ba      	str	r2, [r7, #8]
 800124a:	b2ca      	uxtb	r2, r1
 800124c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3301      	adds	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	429a      	cmp	r2, r3
 800125a:	dbf0      	blt.n	800123e <_read+0x12>
	}

return len;
 800125c:	687b      	ldr	r3, [r7, #4]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
	return -1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001272:	4618      	mov	r0, r3
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800128e:	605a      	str	r2, [r3, #4]
	return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <_isatty>:

int _isatty(int file)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
	return 1;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
	return 0;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d8:	4a14      	ldr	r2, [pc, #80]	; (800132c <_sbrk+0x5c>)
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <_sbrk+0x60>)
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <_sbrk+0x64>)
 80012ee:	4a12      	ldr	r2, [pc, #72]	; (8001338 <_sbrk+0x68>)
 80012f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d207      	bcs.n	8001310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001300:	f005 f908 	bl	8006514 <__errno>
 8001304:	4603      	mov	r3, r0
 8001306:	220c      	movs	r2, #12
 8001308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	e009      	b.n	8001324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001316:	4b07      	ldr	r3, [pc, #28]	; (8001334 <_sbrk+0x64>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <_sbrk+0x64>)
 8001320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001322:	68fb      	ldr	r3, [r7, #12]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20018000 	.word	0x20018000
 8001330:	00000400 	.word	0x00000400
 8001334:	20000350 	.word	0x20000350
 8001338:	20000368 	.word	0x20000368

0800133c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <SystemInit+0x20>)
 8001342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001346:	4a05      	ldr	r2, [pc, #20]	; (800135c <SystemInit+0x20>)
 8001348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800134c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001398 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001364:	f7ff ffea 	bl	800133c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <LoopForever+0x6>)
  ldr r1, =_edata
 800136a:	490d      	ldr	r1, [pc, #52]	; (80013a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <LoopForever+0xe>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001380:	4c0a      	ldr	r4, [pc, #40]	; (80013ac <LoopForever+0x16>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138e:	f005 f8c7 	bl	8006520 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001392:	f7ff f951 	bl	8000638 <main>

08001396 <LoopForever>:

LoopForever:
    b LoopForever
 8001396:	e7fe      	b.n	8001396 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001398:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a0:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 80013a4:	08007c4c 	.word	0x08007c4c
  ldr r2, =_sbss
 80013a8:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 80013ac:	20000368 	.word	0x20000368

080013b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC1_2_IRQHandler>
	...

080013b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_Init+0x3c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <HAL_Init+0x3c>)
 80013c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ca:	2003      	movs	r0, #3
 80013cc:	f000 f93e 	bl	800164c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013d0:	2000      	movs	r0, #0
 80013d2:	f000 f80f 	bl	80013f4 <HAL_InitTick>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d002      	beq.n	80013e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	71fb      	strb	r3, [r7, #7]
 80013e0:	e001      	b.n	80013e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013e2:	f7ff fd79 	bl	8000ed8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013e6:	79fb      	ldrb	r3, [r7, #7]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40022000 	.word	0x40022000

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <HAL_InitTick+0x6c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d023      	beq.n	8001450 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_InitTick+0x70>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_InitTick+0x6c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001416:	fbb3 f3f1 	udiv	r3, r3, r1
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f949 	bl	80016b6 <HAL_SYSTICK_Config>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10f      	bne.n	800144a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	d809      	bhi.n	8001444 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001430:	2200      	movs	r2, #0
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f000 f913 	bl	8001662 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800143c:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <HAL_InitTick+0x74>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e007      	b.n	8001454 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	e004      	b.n	8001454 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	e001      	b.n	8001454 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001454:	7bfb      	ldrb	r3, [r7, #15]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200000c8 	.word	0x200000c8
 8001464:	200000c0 	.word	0x200000c0
 8001468:	200000c4 	.word	0x200000c4

0800146c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x20>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_IncTick+0x24>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a04      	ldr	r2, [pc, #16]	; (8001490 <HAL_IncTick+0x24>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	200000c8 	.word	0x200000c8
 8001490:	20000354 	.word	0x20000354

08001494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <HAL_GetTick+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000354 	.word	0x20000354

080014ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	db0b      	blt.n	800153a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	f003 021f 	and.w	r2, r3, #31
 8001528:	4907      	ldr	r1, [pc, #28]	; (8001548 <__NVIC_EnableIRQ+0x38>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	095b      	lsrs	r3, r3, #5
 8001530:	2001      	movs	r0, #1
 8001532:	fa00 f202 	lsl.w	r2, r0, r2
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000e100 	.word	0xe000e100

0800154c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	2b00      	cmp	r3, #0
 800155e:	db0a      	blt.n	8001576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	490c      	ldr	r1, [pc, #48]	; (8001598 <__NVIC_SetPriority+0x4c>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	0112      	lsls	r2, r2, #4
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	440b      	add	r3, r1
 8001570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001574:	e00a      	b.n	800158c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4908      	ldr	r1, [pc, #32]	; (800159c <__NVIC_SetPriority+0x50>)
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	3b04      	subs	r3, #4
 8001584:	0112      	lsls	r2, r2, #4
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	440b      	add	r3, r1
 800158a:	761a      	strb	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000e100 	.word	0xe000e100
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f1c3 0307 	rsb	r3, r3, #7
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	bf28      	it	cs
 80015be:	2304      	movcs	r3, #4
 80015c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3304      	adds	r3, #4
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d902      	bls.n	80015d0 <NVIC_EncodePriority+0x30>
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3b03      	subs	r3, #3
 80015ce:	e000      	b.n	80015d2 <NVIC_EncodePriority+0x32>
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	401a      	ands	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	43d9      	mvns	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	4313      	orrs	r3, r2
         );
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3724      	adds	r7, #36	; 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001618:	d301      	bcc.n	800161e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161a:	2301      	movs	r3, #1
 800161c:	e00f      	b.n	800163e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <SysTick_Config+0x40>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001626:	210f      	movs	r1, #15
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f7ff ff8e 	bl	800154c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <SysTick_Config+0x40>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <SysTick_Config+0x40>)
 8001638:	2207      	movs	r2, #7
 800163a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	e000e010 	.word	0xe000e010

0800164c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff29 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
 800166e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001674:	f7ff ff3e 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 8001678:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	6978      	ldr	r0, [r7, #20]
 8001680:	f7ff ff8e 	bl	80015a0 <NVIC_EncodePriority>
 8001684:	4602      	mov	r2, r0
 8001686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff5d 	bl	800154c <__NVIC_SetPriority>
}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff31 	bl	8001510 <__NVIC_EnableIRQ>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffa2 	bl	8001608 <SysTick_Config>
 80016c4:	4603      	mov	r3, r0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b085      	sub	sp, #20
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d008      	beq.n	80016f8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2204      	movs	r2, #4
 80016ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e022      	b.n	800173e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 020e 	bic.w	r2, r2, #14
 8001706:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0201 	bic.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171c:	f003 021c 	and.w	r2, r3, #28
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	2101      	movs	r1, #1
 8001726:	fa01 f202 	lsl.w	r2, r1, r2
 800172a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800173c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800173e:	4618      	mov	r0, r3
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b084      	sub	sp, #16
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d005      	beq.n	800176e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2204      	movs	r2, #4
 8001766:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
 800176c:	e029      	b.n	80017c2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 020e 	bic.w	r2, r2, #14
 800177c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0201 	bic.w	r2, r2, #1
 800178c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	f003 021c 	and.w	r2, r3, #28
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	2101      	movs	r1, #1
 800179c:	fa01 f202 	lsl.w	r2, r1, r2
 80017a0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	4798      	blx	r3
    }
  }
  return status;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017da:	e17f      	b.n	8001adc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2101      	movs	r1, #1
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	4013      	ands	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 8171 	beq.w	8001ad6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d005      	beq.n	800180c <HAL_GPIO_Init+0x40>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d130      	bne.n	800186e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	2203      	movs	r2, #3
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001842:	2201      	movs	r2, #1
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	091b      	lsrs	r3, r3, #4
 8001858:	f003 0201 	and.w	r2, r3, #1
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b03      	cmp	r3, #3
 8001878:	d118      	bne.n	80018ac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001880:	2201      	movs	r2, #1
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	08db      	lsrs	r3, r3, #3
 8001896:	f003 0201 	and.w	r2, r3, #1
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d017      	beq.n	80018e8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	2203      	movs	r2, #3
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d123      	bne.n	800193c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	08da      	lsrs	r2, r3, #3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3208      	adds	r2, #8
 80018fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	220f      	movs	r2, #15
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	691a      	ldr	r2, [r3, #16]
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	08da      	lsrs	r2, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3208      	adds	r2, #8
 8001936:	6939      	ldr	r1, [r7, #16]
 8001938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2203      	movs	r2, #3
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0203 	and.w	r2, r3, #3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80ac 	beq.w	8001ad6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	4b5f      	ldr	r3, [pc, #380]	; (8001afc <HAL_GPIO_Init+0x330>)
 8001980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001982:	4a5e      	ldr	r2, [pc, #376]	; (8001afc <HAL_GPIO_Init+0x330>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6613      	str	r3, [r2, #96]	; 0x60
 800198a:	4b5c      	ldr	r3, [pc, #368]	; (8001afc <HAL_GPIO_Init+0x330>)
 800198c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001996:	4a5a      	ldr	r2, [pc, #360]	; (8001b00 <HAL_GPIO_Init+0x334>)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3302      	adds	r3, #2
 800199e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	220f      	movs	r2, #15
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019c0:	d025      	beq.n	8001a0e <HAL_GPIO_Init+0x242>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4f      	ldr	r2, [pc, #316]	; (8001b04 <HAL_GPIO_Init+0x338>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d01f      	beq.n	8001a0a <HAL_GPIO_Init+0x23e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a4e      	ldr	r2, [pc, #312]	; (8001b08 <HAL_GPIO_Init+0x33c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d019      	beq.n	8001a06 <HAL_GPIO_Init+0x23a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4d      	ldr	r2, [pc, #308]	; (8001b0c <HAL_GPIO_Init+0x340>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d013      	beq.n	8001a02 <HAL_GPIO_Init+0x236>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4c      	ldr	r2, [pc, #304]	; (8001b10 <HAL_GPIO_Init+0x344>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d00d      	beq.n	80019fe <HAL_GPIO_Init+0x232>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4b      	ldr	r2, [pc, #300]	; (8001b14 <HAL_GPIO_Init+0x348>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d007      	beq.n	80019fa <HAL_GPIO_Init+0x22e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4a      	ldr	r2, [pc, #296]	; (8001b18 <HAL_GPIO_Init+0x34c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d101      	bne.n	80019f6 <HAL_GPIO_Init+0x22a>
 80019f2:	2306      	movs	r3, #6
 80019f4:	e00c      	b.n	8001a10 <HAL_GPIO_Init+0x244>
 80019f6:	2307      	movs	r3, #7
 80019f8:	e00a      	b.n	8001a10 <HAL_GPIO_Init+0x244>
 80019fa:	2305      	movs	r3, #5
 80019fc:	e008      	b.n	8001a10 <HAL_GPIO_Init+0x244>
 80019fe:	2304      	movs	r3, #4
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x244>
 8001a02:	2303      	movs	r3, #3
 8001a04:	e004      	b.n	8001a10 <HAL_GPIO_Init+0x244>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e002      	b.n	8001a10 <HAL_GPIO_Init+0x244>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_GPIO_Init+0x244>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	f002 0203 	and.w	r2, r2, #3
 8001a16:	0092      	lsls	r2, r2, #2
 8001a18:	4093      	lsls	r3, r2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a20:	4937      	ldr	r1, [pc, #220]	; (8001b00 <HAL_GPIO_Init+0x334>)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a2e:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <HAL_GPIO_Init+0x350>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a52:	4a32      	ldr	r2, [pc, #200]	; (8001b1c <HAL_GPIO_Init+0x350>)
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a58:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <HAL_GPIO_Init+0x350>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a7c:	4a27      	ldr	r2, [pc, #156]	; (8001b1c <HAL_GPIO_Init+0x350>)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a82:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <HAL_GPIO_Init+0x350>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aa6:	4a1d      	ldr	r2, [pc, #116]	; (8001b1c <HAL_GPIO_Init+0x350>)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_GPIO_Init+0x350>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ad0:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <HAL_GPIO_Init+0x350>)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f47f ae78 	bne.w	80017dc <HAL_GPIO_Init+0x10>
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	371c      	adds	r7, #28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40010000 	.word	0x40010000
 8001b04:	48000400 	.word	0x48000400
 8001b08:	48000800 	.word	0x48000800
 8001b0c:	48000c00 	.word	0x48000c00
 8001b10:	48001000 	.word	0x48001000
 8001b14:	48001400 	.word	0x48001400
 8001b18:	48001800 	.word	0x48001800
 8001b1c:	40010400 	.word	0x40010400

08001b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b30:	787b      	ldrb	r3, [r7, #1]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b36:	887a      	ldrh	r2, [r7, #2]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b3c:	e002      	b.n	8001b44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d006      	beq.n	8001b74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b6c:	88fb      	ldrh	r3, [r7, #6]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe ff6c 	bl	8000a4c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40010400 	.word	0x40010400

08001b80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e081      	b.n	8001c96 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d106      	bne.n	8001bac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff f9ba 	bl	8000f20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2224      	movs	r2, #36	; 0x24
 8001bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bd0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001be0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d107      	bne.n	8001bfa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	e006      	b.n	8001c08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d104      	bne.n	8001c1a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69d9      	ldr	r1, [r3, #28]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1a      	ldr	r2, [r3, #32]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2220      	movs	r2, #32
 8001c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	4608      	mov	r0, r1
 8001caa:	4611      	mov	r1, r2
 8001cac:	461a      	mov	r2, r3
 8001cae:	4603      	mov	r3, r0
 8001cb0:	817b      	strh	r3, [r7, #10]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	813b      	strh	r3, [r7, #8]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	f040 80f9 	bne.w	8001eba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <HAL_I2C_Mem_Write+0x34>
 8001cce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d105      	bne.n	8001ce0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cda:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0ed      	b.n	8001ebc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_I2C_Mem_Write+0x4e>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e0e6      	b.n	8001ebc <HAL_I2C_Mem_Write+0x21c>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cf6:	f7ff fbcd 	bl	8001494 <HAL_GetTick>
 8001cfa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2319      	movs	r3, #25
 8001d02:	2201      	movs	r2, #1
 8001d04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 fac3 	bl	8002294 <I2C_WaitOnFlagUntilTimeout>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0d1      	b.n	8001ebc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2221      	movs	r2, #33	; 0x21
 8001d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2240      	movs	r2, #64	; 0x40
 8001d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a3a      	ldr	r2, [r7, #32]
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d40:	88f8      	ldrh	r0, [r7, #6]
 8001d42:	893a      	ldrh	r2, [r7, #8]
 8001d44:	8979      	ldrh	r1, [r7, #10]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	4603      	mov	r3, r0
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 f9d3 	bl	80020fc <I2C_RequestMemoryWrite>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0a9      	b.n	8001ebc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	2bff      	cmp	r3, #255	; 0xff
 8001d70:	d90e      	bls.n	8001d90 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	22ff      	movs	r2, #255	; 0xff
 8001d76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	8979      	ldrh	r1, [r7, #10]
 8001d80:	2300      	movs	r3, #0
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 fc2b 	bl	80025e4 <I2C_TransferConfig>
 8001d8e:	e00f      	b.n	8001db0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	8979      	ldrh	r1, [r7, #10]
 8001da2:	2300      	movs	r3, #0
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 fc1a 	bl	80025e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 faad 	bl	8002314 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e07b      	b.n	8001ebc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	781a      	ldrb	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d034      	beq.n	8001e68 <HAL_I2C_Mem_Write+0x1c8>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d130      	bne.n	8001e68 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2180      	movs	r1, #128	; 0x80
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 fa3f 	bl	8002294 <I2C_WaitOnFlagUntilTimeout>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e04d      	b.n	8001ebc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	2bff      	cmp	r3, #255	; 0xff
 8001e28:	d90e      	bls.n	8001e48 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	22ff      	movs	r2, #255	; 0xff
 8001e2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	8979      	ldrh	r1, [r7, #10]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 fbcf 	bl	80025e4 <I2C_TransferConfig>
 8001e46:	e00f      	b.n	8001e68 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	8979      	ldrh	r1, [r7, #10]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 fbbe 	bl	80025e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d19e      	bne.n	8001db0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 fa8c 	bl	8002394 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e01a      	b.n	8001ebc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_I2C_Mem_Write+0x224>)
 8001e9a:	400b      	ands	r3, r1
 8001e9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e000      	b.n	8001ebc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001eba:	2302      	movs	r3, #2
  }
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	fe00e800 	.word	0xfe00e800

08001ec8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	4608      	mov	r0, r1
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	817b      	strh	r3, [r7, #10]
 8001eda:	460b      	mov	r3, r1
 8001edc:	813b      	strh	r3, [r7, #8]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b20      	cmp	r3, #32
 8001eec:	f040 80fd 	bne.w	80020ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_I2C_Mem_Read+0x34>
 8001ef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0f1      	b.n	80020ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_I2C_Mem_Read+0x4e>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e0ea      	b.n	80020ec <HAL_I2C_Mem_Read+0x224>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f1e:	f7ff fab9 	bl	8001494 <HAL_GetTick>
 8001f22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2319      	movs	r3, #25
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 f9af 	bl	8002294 <I2C_WaitOnFlagUntilTimeout>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0d5      	b.n	80020ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2222      	movs	r2, #34	; 0x22
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2240      	movs	r2, #64	; 0x40
 8001f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6a3a      	ldr	r2, [r7, #32]
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f68:	88f8      	ldrh	r0, [r7, #6]
 8001f6a:	893a      	ldrh	r2, [r7, #8]
 8001f6c:	8979      	ldrh	r1, [r7, #10]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	4603      	mov	r3, r0
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 f913 	bl	80021a4 <I2C_RequestMemoryRead>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0ad      	b.n	80020ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2bff      	cmp	r3, #255	; 0xff
 8001f98:	d90e      	bls.n	8001fb8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	22ff      	movs	r2, #255	; 0xff
 8001f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	8979      	ldrh	r1, [r7, #10]
 8001fa8:	4b52      	ldr	r3, [pc, #328]	; (80020f4 <HAL_I2C_Mem_Read+0x22c>)
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 fb17 	bl	80025e4 <I2C_TransferConfig>
 8001fb6:	e00f      	b.n	8001fd8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	8979      	ldrh	r1, [r7, #10]
 8001fca:	4b4a      	ldr	r3, [pc, #296]	; (80020f4 <HAL_I2C_Mem_Read+0x22c>)
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 fb06 	bl	80025e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2104      	movs	r1, #4
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 f956 	bl	8002294 <I2C_WaitOnFlagUntilTimeout>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e07c      	b.n	80020ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200e:	3b01      	subs	r3, #1
 8002010:	b29a      	uxth	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201a:	b29b      	uxth	r3, r3
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002028:	b29b      	uxth	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d034      	beq.n	8002098 <HAL_I2C_Mem_Read+0x1d0>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002032:	2b00      	cmp	r3, #0
 8002034:	d130      	bne.n	8002098 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203c:	2200      	movs	r2, #0
 800203e:	2180      	movs	r1, #128	; 0x80
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 f927 	bl	8002294 <I2C_WaitOnFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e04d      	b.n	80020ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002054:	b29b      	uxth	r3, r3
 8002056:	2bff      	cmp	r3, #255	; 0xff
 8002058:	d90e      	bls.n	8002078 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	22ff      	movs	r2, #255	; 0xff
 800205e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	b2da      	uxtb	r2, r3
 8002066:	8979      	ldrh	r1, [r7, #10]
 8002068:	2300      	movs	r3, #0
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 fab7 	bl	80025e4 <I2C_TransferConfig>
 8002076:	e00f      	b.n	8002098 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002086:	b2da      	uxtb	r2, r3
 8002088:	8979      	ldrh	r1, [r7, #10]
 800208a:	2300      	movs	r3, #0
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 faa6 	bl	80025e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209c:	b29b      	uxth	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d19a      	bne.n	8001fd8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f974 	bl	8002394 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e01a      	b.n	80020ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2220      	movs	r2, #32
 80020bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_I2C_Mem_Read+0x230>)
 80020ca:	400b      	ands	r3, r1
 80020cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2220      	movs	r2, #32
 80020d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e000      	b.n	80020ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80020ea:	2302      	movs	r3, #2
  }
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	80002400 	.word	0x80002400
 80020f8:	fe00e800 	.word	0xfe00e800

080020fc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af02      	add	r7, sp, #8
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	4608      	mov	r0, r1
 8002106:	4611      	mov	r1, r2
 8002108:	461a      	mov	r2, r3
 800210a:	4603      	mov	r3, r0
 800210c:	817b      	strh	r3, [r7, #10]
 800210e:	460b      	mov	r3, r1
 8002110:	813b      	strh	r3, [r7, #8]
 8002112:	4613      	mov	r3, r2
 8002114:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	b2da      	uxtb	r2, r3
 800211a:	8979      	ldrh	r1, [r7, #10]
 800211c:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <I2C_RequestMemoryWrite+0xa4>)
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 fa5d 	bl	80025e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	69b9      	ldr	r1, [r7, #24]
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f8f0 	bl	8002314 <I2C_WaitOnTXISFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e02c      	b.n	8002198 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002144:	893b      	ldrh	r3, [r7, #8]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	629a      	str	r2, [r3, #40]	; 0x28
 800214e:	e015      	b.n	800217c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002150:	893b      	ldrh	r3, [r7, #8]
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	b29b      	uxth	r3, r3
 8002156:	b2da      	uxtb	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	69b9      	ldr	r1, [r7, #24]
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 f8d6 	bl	8002314 <I2C_WaitOnTXISFlagUntilTimeout>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e012      	b.n	8002198 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002172:	893b      	ldrh	r3, [r7, #8]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2200      	movs	r2, #0
 8002184:	2180      	movs	r1, #128	; 0x80
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 f884 	bl	8002294 <I2C_WaitOnFlagUntilTimeout>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	80002000 	.word	0x80002000

080021a4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	4608      	mov	r0, r1
 80021ae:	4611      	mov	r1, r2
 80021b0:	461a      	mov	r2, r3
 80021b2:	4603      	mov	r3, r0
 80021b4:	817b      	strh	r3, [r7, #10]
 80021b6:	460b      	mov	r3, r1
 80021b8:	813b      	strh	r3, [r7, #8]
 80021ba:	4613      	mov	r3, r2
 80021bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	8979      	ldrh	r1, [r7, #10]
 80021c4:	4b20      	ldr	r3, [pc, #128]	; (8002248 <I2C_RequestMemoryRead+0xa4>)
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2300      	movs	r3, #0
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 fa0a 	bl	80025e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	69b9      	ldr	r1, [r7, #24]
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 f89d 	bl	8002314 <I2C_WaitOnTXISFlagUntilTimeout>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e02c      	b.n	800223e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d105      	bne.n	80021f6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021ea:	893b      	ldrh	r3, [r7, #8]
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	629a      	str	r2, [r3, #40]	; 0x28
 80021f4:	e015      	b.n	8002222 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021f6:	893b      	ldrh	r3, [r7, #8]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002204:	69fa      	ldr	r2, [r7, #28]
 8002206:	69b9      	ldr	r1, [r7, #24]
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f883 	bl	8002314 <I2C_WaitOnTXISFlagUntilTimeout>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e012      	b.n	800223e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002218:	893b      	ldrh	r3, [r7, #8]
 800221a:	b2da      	uxtb	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	2200      	movs	r2, #0
 800222a:	2140      	movs	r1, #64	; 0x40
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 f831 	bl	8002294 <I2C_WaitOnFlagUntilTimeout>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	80002000 	.word	0x80002000

0800224c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b02      	cmp	r3, #2
 8002260:	d103      	bne.n	800226a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2200      	movs	r2, #0
 8002268:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d007      	beq.n	8002288 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	619a      	str	r2, [r3, #24]
  }
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022a4:	e022      	b.n	80022ec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ac:	d01e      	beq.n	80022ec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ae:	f7ff f8f1 	bl	8001494 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d302      	bcc.n	80022c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d113      	bne.n	80022ec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c8:	f043 0220 	orr.w	r2, r3, #32
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e00f      	b.n	800230c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699a      	ldr	r2, [r3, #24]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	4013      	ands	r3, r2
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	bf0c      	ite	eq
 80022fc:	2301      	moveq	r3, #1
 80022fe:	2300      	movne	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	429a      	cmp	r2, r3
 8002308:	d0cd      	beq.n	80022a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002320:	e02c      	b.n	800237c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f870 	bl	800240c <I2C_IsErrorOccurred>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e02a      	b.n	800238c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d01e      	beq.n	800237c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800233e:	f7ff f8a9 	bl	8001494 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	429a      	cmp	r2, r3
 800234c:	d302      	bcc.n	8002354 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d113      	bne.n	800237c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002358:	f043 0220 	orr.w	r2, r3, #32
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e007      	b.n	800238c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b02      	cmp	r3, #2
 8002388:	d1cb      	bne.n	8002322 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023a0:	e028      	b.n	80023f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f830 	bl	800240c <I2C_IsErrorOccurred>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e026      	b.n	8002404 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b6:	f7ff f86d 	bl	8001494 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d302      	bcc.n	80023cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d113      	bne.n	80023f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d0:	f043 0220 	orr.w	r2, r3, #32
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e007      	b.n	8002404 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b20      	cmp	r3, #32
 8002400:	d1cf      	bne.n	80023a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	; 0x28
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b00      	cmp	r3, #0
 8002436:	d075      	beq.n	8002524 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2210      	movs	r2, #16
 800243e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002440:	e056      	b.n	80024f0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d052      	beq.n	80024f0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800244a:	f7ff f823 	bl	8001494 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <I2C_IsErrorOccurred+0x54>
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d147      	bne.n	80024f0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002472:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800247e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002482:	d12e      	bne.n	80024e2 <I2C_IsErrorOccurred+0xd6>
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800248a:	d02a      	beq.n	80024e2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800248c:	7cfb      	ldrb	r3, [r7, #19]
 800248e:	2b20      	cmp	r3, #32
 8002490:	d027      	beq.n	80024e2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80024a2:	f7fe fff7 	bl	8001494 <HAL_GetTick>
 80024a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024a8:	e01b      	b.n	80024e2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80024aa:	f7fe fff3 	bl	8001494 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b19      	cmp	r3, #25
 80024b6:	d914      	bls.n	80024e2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	f043 0220 	orr.w	r2, r3, #32
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	2b20      	cmp	r3, #32
 80024ee:	d1dc      	bne.n	80024aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	d003      	beq.n	8002506 <I2C_IsErrorOccurred+0xfa>
 80024fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002502:	2b00      	cmp	r3, #0
 8002504:	d09d      	beq.n	8002442 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800250a:	2b00      	cmp	r3, #0
 800250c:	d103      	bne.n	8002516 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2220      	movs	r2, #32
 8002514:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00b      	beq.n	800254e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002546:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00b      	beq.n	8002570 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	f043 0308 	orr.w	r3, r3, #8
 800255e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002568:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00b      	beq.n	8002592 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800257a:	6a3b      	ldr	r3, [r7, #32]
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800258a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002592:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002596:	2b00      	cmp	r3, #0
 8002598:	d01c      	beq.n	80025d4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f7ff fe56 	bl	800224c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6859      	ldr	r1, [r3, #4]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <I2C_IsErrorOccurred+0x1d4>)
 80025ac:	400b      	ands	r3, r1
 80025ae:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80025d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3728      	adds	r7, #40	; 0x28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	fe00e800 	.word	0xfe00e800

080025e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	607b      	str	r3, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	817b      	strh	r3, [r7, #10]
 80025f2:	4613      	mov	r3, r2
 80025f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025f6:	897b      	ldrh	r3, [r7, #10]
 80025f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025fc:	7a7b      	ldrb	r3, [r7, #9]
 80025fe:	041b      	lsls	r3, r3, #16
 8002600:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002604:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	4313      	orrs	r3, r2
 800260e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002612:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	0d5b      	lsrs	r3, r3, #21
 800261e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <I2C_TransferConfig+0x60>)
 8002624:	430b      	orrs	r3, r1
 8002626:	43db      	mvns	r3, r3
 8002628:	ea02 0103 	and.w	r1, r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002636:	bf00      	nop
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	03ff63ff 	.word	0x03ff63ff

08002648 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b20      	cmp	r3, #32
 800265c:	d138      	bne.n	80026d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002668:	2302      	movs	r3, #2
 800266a:	e032      	b.n	80026d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2224      	movs	r2, #36	; 0x24
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800269a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6819      	ldr	r1, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	e000      	b.n	80026d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026d0:	2302      	movs	r3, #2
  }
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d139      	bne.n	8002768 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026fe:	2302      	movs	r3, #2
 8002700:	e033      	b.n	800276a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2224      	movs	r2, #36	; 0x24
 800270e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0201 	bic.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002730:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	e000      	b.n	800276a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002768:	2302      	movs	r3, #2
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800277c:	4b04      	ldr	r3, [pc, #16]	; (8002790 <HAL_PWREx_GetVoltageRange+0x18>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40007000 	.word	0x40007000

08002794 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027a2:	d130      	bne.n	8002806 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027a4:	4b23      	ldr	r3, [pc, #140]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027b0:	d038      	beq.n	8002824 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027b2:	4b20      	ldr	r3, [pc, #128]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027ba:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027c2:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2232      	movs	r2, #50	; 0x32
 80027c8:	fb02 f303 	mul.w	r3, r2, r3
 80027cc:	4a1b      	ldr	r2, [pc, #108]	; (800283c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	0c9b      	lsrs	r3, r3, #18
 80027d4:	3301      	adds	r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027d8:	e002      	b.n	80027e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	3b01      	subs	r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027e0:	4b14      	ldr	r3, [pc, #80]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ec:	d102      	bne.n	80027f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f2      	bne.n	80027da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027f4:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002800:	d110      	bne.n	8002824 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e00f      	b.n	8002826 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002806:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800280e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002812:	d007      	beq.n	8002824 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002814:	4b07      	ldr	r3, [pc, #28]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800281c:	4a05      	ldr	r2, [pc, #20]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800281e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002822:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40007000 	.word	0x40007000
 8002838:	200000c0 	.word	0x200000c0
 800283c:	431bde83 	.word	0x431bde83

08002840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e3ca      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002852:	4b97      	ldr	r3, [pc, #604]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800285c:	4b94      	ldr	r3, [pc, #592]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 80e4 	beq.w	8002a3c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d007      	beq.n	800288a <HAL_RCC_OscConfig+0x4a>
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	2b0c      	cmp	r3, #12
 800287e:	f040 808b 	bne.w	8002998 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2b01      	cmp	r3, #1
 8002886:	f040 8087 	bne.w	8002998 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800288a:	4b89      	ldr	r3, [pc, #548]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d005      	beq.n	80028a2 <HAL_RCC_OscConfig+0x62>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e3a2      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1a      	ldr	r2, [r3, #32]
 80028a6:	4b82      	ldr	r3, [pc, #520]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d004      	beq.n	80028bc <HAL_RCC_OscConfig+0x7c>
 80028b2:	4b7f      	ldr	r3, [pc, #508]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ba:	e005      	b.n	80028c8 <HAL_RCC_OscConfig+0x88>
 80028bc:	4b7c      	ldr	r3, [pc, #496]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80028be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d223      	bcs.n	8002914 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 fd55 	bl	8003380 <RCC_SetFlashLatencyFromMSIRange>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e383      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028e0:	4b73      	ldr	r3, [pc, #460]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a72      	ldr	r2, [pc, #456]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80028e6:	f043 0308 	orr.w	r3, r3, #8
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	4b70      	ldr	r3, [pc, #448]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	496d      	ldr	r1, [pc, #436]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028fe:	4b6c      	ldr	r3, [pc, #432]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	021b      	lsls	r3, r3, #8
 800290c:	4968      	ldr	r1, [pc, #416]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 800290e:	4313      	orrs	r3, r2
 8002910:	604b      	str	r3, [r1, #4]
 8002912:	e025      	b.n	8002960 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002914:	4b66      	ldr	r3, [pc, #408]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a65      	ldr	r2, [pc, #404]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 800291a:	f043 0308 	orr.w	r3, r3, #8
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b63      	ldr	r3, [pc, #396]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	4960      	ldr	r1, [pc, #384]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 800292e:	4313      	orrs	r3, r2
 8002930:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002932:	4b5f      	ldr	r3, [pc, #380]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	495b      	ldr	r1, [pc, #364]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002942:	4313      	orrs	r3, r2
 8002944:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fd15 	bl	8003380 <RCC_SetFlashLatencyFromMSIRange>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e343      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002960:	f000 fc4a 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 8002964:	4602      	mov	r2, r0
 8002966:	4b52      	ldr	r3, [pc, #328]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	091b      	lsrs	r3, r3, #4
 800296c:	f003 030f 	and.w	r3, r3, #15
 8002970:	4950      	ldr	r1, [pc, #320]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
 800297c:	4a4e      	ldr	r2, [pc, #312]	; (8002ab8 <HAL_RCC_OscConfig+0x278>)
 800297e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002980:	4b4e      	ldr	r3, [pc, #312]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe fd35 	bl	80013f4 <HAL_InitTick>
 800298a:	4603      	mov	r3, r0
 800298c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d052      	beq.n	8002a3a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	e327      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d032      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029a0:	4b43      	ldr	r3, [pc, #268]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a42      	ldr	r2, [pc, #264]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029ac:	f7fe fd72 	bl	8001494 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029b4:	f7fe fd6e 	bl	8001494 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e310      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029c6:	4b3a      	ldr	r3, [pc, #232]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029d2:	4b37      	ldr	r3, [pc, #220]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a36      	ldr	r2, [pc, #216]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80029d8:	f043 0308 	orr.w	r3, r3, #8
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	4b34      	ldr	r3, [pc, #208]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	4931      	ldr	r1, [pc, #196]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029f0:	4b2f      	ldr	r3, [pc, #188]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	492c      	ldr	r1, [pc, #176]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
 8002a04:	e01a      	b.n	8002a3c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a06:	4b2a      	ldr	r3, [pc, #168]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a29      	ldr	r2, [pc, #164]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002a0c:	f023 0301 	bic.w	r3, r3, #1
 8002a10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a12:	f7fe fd3f 	bl	8001494 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a1a:	f7fe fd3b 	bl	8001494 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e2dd      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a2c:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1f0      	bne.n	8002a1a <HAL_RCC_OscConfig+0x1da>
 8002a38:	e000      	b.n	8002a3c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a3a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d074      	beq.n	8002b32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d005      	beq.n	8002a5a <HAL_RCC_OscConfig+0x21a>
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b0c      	cmp	r3, #12
 8002a52:	d10e      	bne.n	8002a72 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d10b      	bne.n	8002a72 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d064      	beq.n	8002b30 <HAL_RCC_OscConfig+0x2f0>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d160      	bne.n	8002b30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e2ba      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCC_OscConfig+0x24a>
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a0b      	ldr	r2, [pc, #44]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	e026      	b.n	8002ad8 <HAL_RCC_OscConfig+0x298>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a92:	d115      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x280>
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a05      	ldr	r2, [pc, #20]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002a9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a02      	ldr	r2, [pc, #8]	; (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	e014      	b.n	8002ad8 <HAL_RCC_OscConfig+0x298>
 8002aae:	bf00      	nop
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	08007a70 	.word	0x08007a70
 8002ab8:	200000c0 	.word	0x200000c0
 8002abc:	200000c4 	.word	0x200000c4
 8002ac0:	4ba0      	ldr	r3, [pc, #640]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a9f      	ldr	r2, [pc, #636]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b9d      	ldr	r3, [pc, #628]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a9c      	ldr	r2, [pc, #624]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fcd8 	bl	8001494 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7fe fcd4 	bl	8001494 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	; 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e276      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002afa:	4b92      	ldr	r3, [pc, #584]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x2a8>
 8002b06:	e014      	b.n	8002b32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe fcc4 	bl	8001494 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe fcc0 	bl	8001494 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e262      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b22:	4b88      	ldr	r3, [pc, #544]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x2d0>
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d060      	beq.n	8002c00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_OscConfig+0x310>
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d119      	bne.n	8002b7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d116      	bne.n	8002b7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b50:	4b7c      	ldr	r3, [pc, #496]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_OscConfig+0x328>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e23f      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b68:	4b76      	ldr	r3, [pc, #472]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	061b      	lsls	r3, r3, #24
 8002b76:	4973      	ldr	r1, [pc, #460]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b7c:	e040      	b.n	8002c00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d023      	beq.n	8002bce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b86:	4b6f      	ldr	r3, [pc, #444]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a6e      	ldr	r2, [pc, #440]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b92:	f7fe fc7f 	bl	8001494 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b9a:	f7fe fc7b 	bl	8001494 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e21d      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bac:	4b65      	ldr	r3, [pc, #404]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb8:	4b62      	ldr	r3, [pc, #392]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	061b      	lsls	r3, r3, #24
 8002bc6:	495f      	ldr	r1, [pc, #380]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	604b      	str	r3, [r1, #4]
 8002bcc:	e018      	b.n	8002c00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bce:	4b5d      	ldr	r3, [pc, #372]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a5c      	ldr	r2, [pc, #368]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bda:	f7fe fc5b 	bl	8001494 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be2:	f7fe fc57 	bl	8001494 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e1f9      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf4:	4b53      	ldr	r3, [pc, #332]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f0      	bne.n	8002be2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d03c      	beq.n	8002c86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d01c      	beq.n	8002c4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c14:	4b4b      	ldr	r3, [pc, #300]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c1a:	4a4a      	ldr	r2, [pc, #296]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c24:	f7fe fc36 	bl	8001494 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2c:	f7fe fc32 	bl	8001494 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e1d4      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c3e:	4b41      	ldr	r3, [pc, #260]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0ef      	beq.n	8002c2c <HAL_RCC_OscConfig+0x3ec>
 8002c4c:	e01b      	b.n	8002c86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4e:	4b3d      	ldr	r3, [pc, #244]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c54:	4a3b      	ldr	r2, [pc, #236]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5e:	f7fe fc19 	bl	8001494 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c66:	f7fe fc15 	bl	8001494 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e1b7      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c78:	4b32      	ldr	r3, [pc, #200]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1ef      	bne.n	8002c66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80a6 	beq.w	8002de0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c94:	2300      	movs	r3, #0
 8002c96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c98:	4b2a      	ldr	r3, [pc, #168]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10d      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca4:	4b27      	ldr	r3, [pc, #156]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca8:	4a26      	ldr	r2, [pc, #152]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cae:	6593      	str	r3, [r2, #88]	; 0x58
 8002cb0:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc0:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <HAL_RCC_OscConfig+0x508>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d118      	bne.n	8002cfe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ccc:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <HAL_RCC_OscConfig+0x508>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <HAL_RCC_OscConfig+0x508>)
 8002cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd8:	f7fe fbdc 	bl	8001494 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce0:	f7fe fbd8 	bl	8001494 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e17a      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cf2:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <HAL_RCC_OscConfig+0x508>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d108      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4d8>
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0c:	4a0d      	ldr	r2, [pc, #52]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d16:	e029      	b.n	8002d6c <HAL_RCC_OscConfig+0x52c>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b05      	cmp	r3, #5
 8002d1e:	d115      	bne.n	8002d4c <HAL_RCC_OscConfig+0x50c>
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d26:	4a07      	ldr	r2, [pc, #28]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002d28:	f043 0304 	orr.w	r3, r3, #4
 8002d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d30:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d36:	4a03      	ldr	r2, [pc, #12]	; (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d40:	e014      	b.n	8002d6c <HAL_RCC_OscConfig+0x52c>
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40007000 	.word	0x40007000
 8002d4c:	4b9c      	ldr	r3, [pc, #624]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	4a9b      	ldr	r2, [pc, #620]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d5c:	4b98      	ldr	r3, [pc, #608]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d62:	4a97      	ldr	r2, [pc, #604]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002d64:	f023 0304 	bic.w	r3, r3, #4
 8002d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d016      	beq.n	8002da2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d74:	f7fe fb8e 	bl	8001494 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d7a:	e00a      	b.n	8002d92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7c:	f7fe fb8a 	bl	8001494 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e12a      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d92:	4b8b      	ldr	r3, [pc, #556]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0ed      	beq.n	8002d7c <HAL_RCC_OscConfig+0x53c>
 8002da0:	e015      	b.n	8002dce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da2:	f7fe fb77 	bl	8001494 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7fe fb73 	bl	8001494 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e113      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dc0:	4b7f      	ldr	r3, [pc, #508]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1ed      	bne.n	8002daa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dce:	7ffb      	ldrb	r3, [r7, #31]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d105      	bne.n	8002de0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd4:	4b7a      	ldr	r3, [pc, #488]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd8:	4a79      	ldr	r2, [pc, #484]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dde:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80fe 	beq.w	8002fe6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	f040 80d0 	bne.w	8002f94 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002df4:	4b72      	ldr	r3, [pc, #456]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f003 0203 	and.w	r2, r3, #3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d130      	bne.n	8002e6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	3b01      	subs	r3, #1
 8002e14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d127      	bne.n	8002e6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e24:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d11f      	bne.n	8002e6a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e34:	2a07      	cmp	r2, #7
 8002e36:	bf14      	ite	ne
 8002e38:	2201      	movne	r2, #1
 8002e3a:	2200      	moveq	r2, #0
 8002e3c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d113      	bne.n	8002e6a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4c:	085b      	lsrs	r3, r3, #1
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d109      	bne.n	8002e6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	085b      	lsrs	r3, r3, #1
 8002e62:	3b01      	subs	r3, #1
 8002e64:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d06e      	beq.n	8002f48 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	2b0c      	cmp	r3, #12
 8002e6e:	d069      	beq.n	8002f44 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e70:	4b53      	ldr	r3, [pc, #332]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d105      	bne.n	8002e88 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e7c:	4b50      	ldr	r3, [pc, #320]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0ad      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e8c:	4b4c      	ldr	r3, [pc, #304]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a4b      	ldr	r2, [pc, #300]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e96:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e98:	f7fe fafc 	bl	8001494 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fe faf8 	bl	8001494 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e09a      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb2:	4b43      	ldr	r3, [pc, #268]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ebe:	4b40      	ldr	r3, [pc, #256]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	4b40      	ldr	r3, [pc, #256]	; (8002fc4 <HAL_RCC_OscConfig+0x784>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ece:	3a01      	subs	r2, #1
 8002ed0:	0112      	lsls	r2, r2, #4
 8002ed2:	4311      	orrs	r1, r2
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ed8:	0212      	lsls	r2, r2, #8
 8002eda:	4311      	orrs	r1, r2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ee0:	0852      	lsrs	r2, r2, #1
 8002ee2:	3a01      	subs	r2, #1
 8002ee4:	0552      	lsls	r2, r2, #21
 8002ee6:	4311      	orrs	r1, r2
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002eec:	0852      	lsrs	r2, r2, #1
 8002eee:	3a01      	subs	r2, #1
 8002ef0:	0652      	lsls	r2, r2, #25
 8002ef2:	4311      	orrs	r1, r2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ef8:	0912      	lsrs	r2, r2, #4
 8002efa:	0452      	lsls	r2, r2, #17
 8002efc:	430a      	orrs	r2, r1
 8002efe:	4930      	ldr	r1, [pc, #192]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f04:	4b2e      	ldr	r3, [pc, #184]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a2d      	ldr	r2, [pc, #180]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f10:	4b2b      	ldr	r3, [pc, #172]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	4a2a      	ldr	r2, [pc, #168]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f1c:	f7fe faba 	bl	8001494 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fe fab6 	bl	8001494 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e058      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f36:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f42:	e050      	b.n	8002fe6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e04f      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f48:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d148      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f54:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a19      	ldr	r2, [pc, #100]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f60:	4b17      	ldr	r3, [pc, #92]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4a16      	ldr	r2, [pc, #88]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f6c:	f7fe fa92 	bl	8001494 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f74:	f7fe fa8e 	bl	8001494 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e030      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0x734>
 8002f92:	e028      	b.n	8002fe6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	2b0c      	cmp	r3, #12
 8002f98:	d023      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a08      	ldr	r2, [pc, #32]	; (8002fc0 <HAL_RCC_OscConfig+0x780>)
 8002fa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa6:	f7fe fa75 	bl	8001494 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fac:	e00c      	b.n	8002fc8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fae:	f7fe fa71 	bl	8001494 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d905      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e013      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc8:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <HAL_RCC_OscConfig+0x7b0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1ec      	bne.n	8002fae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_RCC_OscConfig+0x7b0>)
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	4905      	ldr	r1, [pc, #20]	; (8002ff0 <HAL_RCC_OscConfig+0x7b0>)
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_RCC_OscConfig+0x7b4>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60cb      	str	r3, [r1, #12]
 8002fe0:	e001      	b.n	8002fe6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3720      	adds	r7, #32
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	feeefffc 	.word	0xfeeefffc

08002ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0e7      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800300c:	4b75      	ldr	r3, [pc, #468]	; (80031e4 <HAL_RCC_ClockConfig+0x1ec>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d910      	bls.n	800303c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	4b72      	ldr	r3, [pc, #456]	; (80031e4 <HAL_RCC_ClockConfig+0x1ec>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 0207 	bic.w	r2, r3, #7
 8003022:	4970      	ldr	r1, [pc, #448]	; (80031e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b6e      	ldr	r3, [pc, #440]	; (80031e4 <HAL_RCC_ClockConfig+0x1ec>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0cf      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d010      	beq.n	800306a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	4b66      	ldr	r3, [pc, #408]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003054:	429a      	cmp	r2, r3
 8003056:	d908      	bls.n	800306a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003058:	4b63      	ldr	r3, [pc, #396]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	4960      	ldr	r1, [pc, #384]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d04c      	beq.n	8003110 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d107      	bne.n	800308e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800307e:	4b5a      	ldr	r3, [pc, #360]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d121      	bne.n	80030ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e0a6      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d107      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003096:	4b54      	ldr	r3, [pc, #336]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d115      	bne.n	80030ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e09a      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d107      	bne.n	80030be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ae:	4b4e      	ldr	r3, [pc, #312]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e08e      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030be:	4b4a      	ldr	r3, [pc, #296]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e086      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030ce:	4b46      	ldr	r3, [pc, #280]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f023 0203 	bic.w	r2, r3, #3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	4943      	ldr	r1, [pc, #268]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e0:	f7fe f9d8 	bl	8001494 <HAL_GetTick>
 80030e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e6:	e00a      	b.n	80030fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e8:	f7fe f9d4 	bl	8001494 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e06e      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fe:	4b3a      	ldr	r3, [pc, #232]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 020c 	and.w	r2, r3, #12
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	429a      	cmp	r2, r3
 800310e:	d1eb      	bne.n	80030e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d010      	beq.n	800313e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003128:	429a      	cmp	r2, r3
 800312a:	d208      	bcs.n	800313e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800312c:	4b2e      	ldr	r3, [pc, #184]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	492b      	ldr	r1, [pc, #172]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 800313a:	4313      	orrs	r3, r2
 800313c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800313e:	4b29      	ldr	r3, [pc, #164]	; (80031e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d210      	bcs.n	800316e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314c:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <HAL_RCC_ClockConfig+0x1ec>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f023 0207 	bic.w	r2, r3, #7
 8003154:	4923      	ldr	r1, [pc, #140]	; (80031e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	4313      	orrs	r3, r2
 800315a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315c:	4b21      	ldr	r3, [pc, #132]	; (80031e4 <HAL_RCC_ClockConfig+0x1ec>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d001      	beq.n	800316e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e036      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800317a:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	4918      	ldr	r1, [pc, #96]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003188:	4313      	orrs	r3, r2
 800318a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d009      	beq.n	80031ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003198:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	4910      	ldr	r1, [pc, #64]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031ac:	f000 f824 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	091b      	lsrs	r3, r3, #4
 80031b8:	f003 030f 	and.w	r3, r3, #15
 80031bc:	490b      	ldr	r1, [pc, #44]	; (80031ec <HAL_RCC_ClockConfig+0x1f4>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	f003 031f 	and.w	r3, r3, #31
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
 80031c8:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <HAL_RCC_ClockConfig+0x1f8>)
 80031ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCC_ClockConfig+0x1fc>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fe f90f 	bl	80013f4 <HAL_InitTick>
 80031d6:	4603      	mov	r3, r0
 80031d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80031da:	7afb      	ldrb	r3, [r7, #11]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40022000 	.word	0x40022000
 80031e8:	40021000 	.word	0x40021000
 80031ec:	08007a70 	.word	0x08007a70
 80031f0:	200000c0 	.word	0x200000c0
 80031f4:	200000c4 	.word	0x200000c4

080031f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	; 0x24
 80031fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	2300      	movs	r3, #0
 8003204:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003206:	4b3e      	ldr	r3, [pc, #248]	; (8003300 <HAL_RCC_GetSysClockFreq+0x108>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003210:	4b3b      	ldr	r3, [pc, #236]	; (8003300 <HAL_RCC_GetSysClockFreq+0x108>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x34>
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	2b0c      	cmp	r3, #12
 8003224:	d121      	bne.n	800326a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d11e      	bne.n	800326a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800322c:	4b34      	ldr	r3, [pc, #208]	; (8003300 <HAL_RCC_GetSysClockFreq+0x108>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d107      	bne.n	8003248 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003238:	4b31      	ldr	r3, [pc, #196]	; (8003300 <HAL_RCC_GetSysClockFreq+0x108>)
 800323a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	61fb      	str	r3, [r7, #28]
 8003246:	e005      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003248:	4b2d      	ldr	r3, [pc, #180]	; (8003300 <HAL_RCC_GetSysClockFreq+0x108>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003254:	4a2b      	ldr	r2, [pc, #172]	; (8003304 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10d      	bne.n	8003280 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b04      	cmp	r3, #4
 800326e:	d102      	bne.n	8003276 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003270:	4b25      	ldr	r3, [pc, #148]	; (8003308 <HAL_RCC_GetSysClockFreq+0x110>)
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	e004      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	2b08      	cmp	r3, #8
 800327a:	d101      	bne.n	8003280 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800327c:	4b23      	ldr	r3, [pc, #140]	; (800330c <HAL_RCC_GetSysClockFreq+0x114>)
 800327e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	2b0c      	cmp	r3, #12
 8003284:	d134      	bne.n	80032f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003286:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <HAL_RCC_GetSysClockFreq+0x108>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d003      	beq.n	800329e <HAL_RCC_GetSysClockFreq+0xa6>
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b03      	cmp	r3, #3
 800329a:	d003      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0xac>
 800329c:	e005      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800329e:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <HAL_RCC_GetSysClockFreq+0x110>)
 80032a0:	617b      	str	r3, [r7, #20]
      break;
 80032a2:	e005      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_RCC_GetSysClockFreq+0x114>)
 80032a6:	617b      	str	r3, [r7, #20]
      break;
 80032a8:	e002      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	617b      	str	r3, [r7, #20]
      break;
 80032ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032b0:	4b13      	ldr	r3, [pc, #76]	; (8003300 <HAL_RCC_GetSysClockFreq+0x108>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	3301      	adds	r3, #1
 80032bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032be:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	0a1b      	lsrs	r3, r3, #8
 80032c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	fb03 f202 	mul.w	r2, r3, r2
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <HAL_RCC_GetSysClockFreq+0x108>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	0e5b      	lsrs	r3, r3, #25
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	3301      	adds	r3, #1
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032f0:	69bb      	ldr	r3, [r7, #24]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3724      	adds	r7, #36	; 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000
 8003304:	08007a88 	.word	0x08007a88
 8003308:	00f42400 	.word	0x00f42400
 800330c:	007a1200 	.word	0x007a1200

08003310 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003314:	4b03      	ldr	r3, [pc, #12]	; (8003324 <HAL_RCC_GetHCLKFreq+0x14>)
 8003316:	681b      	ldr	r3, [r3, #0]
}
 8003318:	4618      	mov	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	200000c0 	.word	0x200000c0

08003328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800332c:	f7ff fff0 	bl	8003310 <HAL_RCC_GetHCLKFreq>
 8003330:	4602      	mov	r2, r0
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	4904      	ldr	r1, [pc, #16]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x28>)
 800333e:	5ccb      	ldrb	r3, [r1, r3]
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003348:	4618      	mov	r0, r3
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021000 	.word	0x40021000
 8003350:	08007a80 	.word	0x08007a80

08003354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003358:	f7ff ffda 	bl	8003310 <HAL_RCC_GetHCLKFreq>
 800335c:	4602      	mov	r2, r0
 800335e:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	0adb      	lsrs	r3, r3, #11
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	4904      	ldr	r1, [pc, #16]	; (800337c <HAL_RCC_GetPCLK2Freq+0x28>)
 800336a:	5ccb      	ldrb	r3, [r1, r3]
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000
 800337c:	08007a80 	.word	0x08007a80

08003380 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003388:	2300      	movs	r3, #0
 800338a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800338c:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800338e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003398:	f7ff f9ee 	bl	8002778 <HAL_PWREx_GetVoltageRange>
 800339c:	6178      	str	r0, [r7, #20]
 800339e:	e014      	b.n	80033ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033a0:	4b25      	ldr	r3, [pc, #148]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	4a24      	ldr	r2, [pc, #144]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033aa:	6593      	str	r3, [r2, #88]	; 0x58
 80033ac:	4b22      	ldr	r3, [pc, #136]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033b8:	f7ff f9de 	bl	8002778 <HAL_PWREx_GetVoltageRange>
 80033bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033be:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	4a1d      	ldr	r2, [pc, #116]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d0:	d10b      	bne.n	80033ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b80      	cmp	r3, #128	; 0x80
 80033d6:	d919      	bls.n	800340c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2ba0      	cmp	r3, #160	; 0xa0
 80033dc:	d902      	bls.n	80033e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033de:	2302      	movs	r3, #2
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	e013      	b.n	800340c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033e4:	2301      	movs	r3, #1
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	e010      	b.n	800340c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b80      	cmp	r3, #128	; 0x80
 80033ee:	d902      	bls.n	80033f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033f0:	2303      	movs	r3, #3
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	e00a      	b.n	800340c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b80      	cmp	r3, #128	; 0x80
 80033fa:	d102      	bne.n	8003402 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033fc:	2302      	movs	r3, #2
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	e004      	b.n	800340c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b70      	cmp	r3, #112	; 0x70
 8003406:	d101      	bne.n	800340c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003408:	2301      	movs	r3, #1
 800340a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f023 0207 	bic.w	r2, r3, #7
 8003414:	4909      	ldr	r1, [pc, #36]	; (800343c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800341c:	4b07      	ldr	r3, [pc, #28]	; (800343c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	429a      	cmp	r2, r3
 8003428:	d001      	beq.n	800342e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40021000 	.word	0x40021000
 800343c:	40022000 	.word	0x40022000

08003440 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003448:	2300      	movs	r3, #0
 800344a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800344c:	2300      	movs	r3, #0
 800344e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003458:	2b00      	cmp	r3, #0
 800345a:	d041      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003460:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003464:	d02a      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003466:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800346a:	d824      	bhi.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800346c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003470:	d008      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003472:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003476:	d81e      	bhi.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800347c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003480:	d010      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003482:	e018      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003484:	4b86      	ldr	r3, [pc, #536]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4a85      	ldr	r2, [pc, #532]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800348a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003490:	e015      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3304      	adds	r3, #4
 8003496:	2100      	movs	r1, #0
 8003498:	4618      	mov	r0, r3
 800349a:	f000 fabb 	bl	8003a14 <RCCEx_PLLSAI1_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034a2:	e00c      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3320      	adds	r3, #32
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fba6 	bl	8003bfc <RCCEx_PLLSAI2_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034b4:	e003      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	74fb      	strb	r3, [r7, #19]
      break;
 80034ba:	e000      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034be:	7cfb      	ldrb	r3, [r7, #19]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10b      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034c4:	4b76      	ldr	r3, [pc, #472]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034d2:	4973      	ldr	r1, [pc, #460]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034da:	e001      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034dc:	7cfb      	ldrb	r3, [r7, #19]
 80034de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d041      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034f4:	d02a      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80034f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034fa:	d824      	bhi.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003500:	d008      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003502:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003506:	d81e      	bhi.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800350c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003510:	d010      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003512:	e018      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003514:	4b62      	ldr	r3, [pc, #392]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4a61      	ldr	r2, [pc, #388]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003520:	e015      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3304      	adds	r3, #4
 8003526:	2100      	movs	r1, #0
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fa73 	bl	8003a14 <RCCEx_PLLSAI1_Config>
 800352e:	4603      	mov	r3, r0
 8003530:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003532:	e00c      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3320      	adds	r3, #32
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fb5e 	bl	8003bfc <RCCEx_PLLSAI2_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003544:	e003      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	74fb      	strb	r3, [r7, #19]
      break;
 800354a:	e000      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800354c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800354e:	7cfb      	ldrb	r3, [r7, #19]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10b      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003554:	4b52      	ldr	r3, [pc, #328]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003562:	494f      	ldr	r1, [pc, #316]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800356a:	e001      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356c:	7cfb      	ldrb	r3, [r7, #19]
 800356e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80a0 	beq.w	80036be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800357e:	2300      	movs	r3, #0
 8003580:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003582:	4b47      	ldr	r3, [pc, #284]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003592:	2300      	movs	r3, #0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00d      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003598:	4b41      	ldr	r3, [pc, #260]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359c:	4a40      	ldr	r2, [pc, #256]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a2:	6593      	str	r3, [r2, #88]	; 0x58
 80035a4:	4b3e      	ldr	r3, [pc, #248]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b0:	2301      	movs	r3, #1
 80035b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035b4:	4b3b      	ldr	r3, [pc, #236]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a3a      	ldr	r2, [pc, #232]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035c0:	f7fd ff68 	bl	8001494 <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035c6:	e009      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c8:	f7fd ff64 	bl	8001494 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d902      	bls.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	74fb      	strb	r3, [r7, #19]
        break;
 80035da:	e005      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035dc:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0ef      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80035e8:	7cfb      	ldrb	r3, [r7, #19]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d15c      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035ee:	4b2c      	ldr	r3, [pc, #176]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d01f      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	429a      	cmp	r2, r3
 800360a:	d019      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800360c:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003616:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003618:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361e:	4a20      	ldr	r2, [pc, #128]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003628:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362e:	4a1c      	ldr	r2, [pc, #112]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003638:	4a19      	ldr	r2, [pc, #100]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d016      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364a:	f7fd ff23 	bl	8001494 <HAL_GetTick>
 800364e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003650:	e00b      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fd ff1f 	bl	8001494 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003660:	4293      	cmp	r3, r2
 8003662:	d902      	bls.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	74fb      	strb	r3, [r7, #19]
            break;
 8003668:	e006      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800366a:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800366c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0ec      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10c      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800367e:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800368e:	4904      	ldr	r1, [pc, #16]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003696:	e009      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003698:	7cfb      	ldrb	r3, [r7, #19]
 800369a:	74bb      	strb	r3, [r7, #18]
 800369c:	e006      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ac:	7c7b      	ldrb	r3, [r7, #17]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d105      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b2:	4b9e      	ldr	r3, [pc, #632]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b6:	4a9d      	ldr	r2, [pc, #628]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036ca:	4b98      	ldr	r3, [pc, #608]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d0:	f023 0203 	bic.w	r2, r3, #3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	4994      	ldr	r1, [pc, #592]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036ec:	4b8f      	ldr	r3, [pc, #572]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f2:	f023 020c 	bic.w	r2, r3, #12
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fa:	498c      	ldr	r1, [pc, #560]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800370e:	4b87      	ldr	r3, [pc, #540]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003714:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	4983      	ldr	r1, [pc, #524]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003730:	4b7e      	ldr	r3, [pc, #504]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	497b      	ldr	r1, [pc, #492]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003752:	4b76      	ldr	r3, [pc, #472]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003758:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003760:	4972      	ldr	r1, [pc, #456]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003774:	4b6d      	ldr	r3, [pc, #436]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003782:	496a      	ldr	r1, [pc, #424]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003796:	4b65      	ldr	r3, [pc, #404]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a4:	4961      	ldr	r1, [pc, #388]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037b8:	4b5c      	ldr	r3, [pc, #368]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c6:	4959      	ldr	r1, [pc, #356]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037da:	4b54      	ldr	r3, [pc, #336]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e8:	4950      	ldr	r1, [pc, #320]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037fc:	4b4b      	ldr	r3, [pc, #300]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003802:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380a:	4948      	ldr	r1, [pc, #288]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800381e:	4b43      	ldr	r3, [pc, #268]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003824:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382c:	493f      	ldr	r1, [pc, #252]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d028      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003840:	4b3a      	ldr	r3, [pc, #232]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800384e:	4937      	ldr	r1, [pc, #220]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800385a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800385e:	d106      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003860:	4b32      	ldr	r3, [pc, #200]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4a31      	ldr	r2, [pc, #196]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800386a:	60d3      	str	r3, [r2, #12]
 800386c:	e011      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003872:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003876:	d10c      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3304      	adds	r3, #4
 800387c:	2101      	movs	r1, #1
 800387e:	4618      	mov	r0, r3
 8003880:	f000 f8c8 	bl	8003a14 <RCCEx_PLLSAI1_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003888:	7cfb      	ldrb	r3, [r7, #19]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800388e:	7cfb      	ldrb	r3, [r7, #19]
 8003890:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d028      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800389e:	4b23      	ldr	r3, [pc, #140]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ac:	491f      	ldr	r1, [pc, #124]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038bc:	d106      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038be:	4b1b      	ldr	r3, [pc, #108]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	4a1a      	ldr	r2, [pc, #104]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038c8:	60d3      	str	r3, [r2, #12]
 80038ca:	e011      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038d4:	d10c      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3304      	adds	r3, #4
 80038da:	2101      	movs	r1, #1
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 f899 	bl	8003a14 <RCCEx_PLLSAI1_Config>
 80038e2:	4603      	mov	r3, r0
 80038e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038e6:	7cfb      	ldrb	r3, [r7, #19]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80038ec:	7cfb      	ldrb	r3, [r7, #19]
 80038ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d02b      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800390a:	4908      	ldr	r1, [pc, #32]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003916:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800391a:	d109      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800391c:	4b03      	ldr	r3, [pc, #12]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4a02      	ldr	r2, [pc, #8]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003926:	60d3      	str	r3, [r2, #12]
 8003928:	e014      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003934:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003938:	d10c      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3304      	adds	r3, #4
 800393e:	2101      	movs	r1, #1
 8003940:	4618      	mov	r0, r3
 8003942:	f000 f867 	bl	8003a14 <RCCEx_PLLSAI1_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800394a:	7cfb      	ldrb	r3, [r7, #19]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d02f      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003960:	4b2b      	ldr	r3, [pc, #172]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003966:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800396e:	4928      	ldr	r1, [pc, #160]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800397a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800397e:	d10d      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3304      	adds	r3, #4
 8003984:	2102      	movs	r1, #2
 8003986:	4618      	mov	r0, r3
 8003988:	f000 f844 	bl	8003a14 <RCCEx_PLLSAI1_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003990:	7cfb      	ldrb	r3, [r7, #19]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d014      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003996:	7cfb      	ldrb	r3, [r7, #19]
 8003998:	74bb      	strb	r3, [r7, #18]
 800399a:	e011      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a4:	d10c      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3320      	adds	r3, #32
 80039aa:	2102      	movs	r1, #2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 f925 	bl	8003bfc <RCCEx_PLLSAI2_Config>
 80039b2:	4603      	mov	r3, r0
 80039b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039b6:	7cfb      	ldrb	r3, [r7, #19]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039bc:	7cfb      	ldrb	r3, [r7, #19]
 80039be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039cc:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039da:	490d      	ldr	r1, [pc, #52]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039ee:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039fe:	4904      	ldr	r1, [pc, #16]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a06:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40021000 	.word	0x40021000

08003a14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a22:	4b75      	ldr	r3, [pc, #468]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d018      	beq.n	8003a60 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a2e:	4b72      	ldr	r3, [pc, #456]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 0203 	and.w	r2, r3, #3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d10d      	bne.n	8003a5a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
       ||
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a46:	4b6c      	ldr	r3, [pc, #432]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	091b      	lsrs	r3, r3, #4
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
       ||
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d047      	beq.n	8003aea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	73fb      	strb	r3, [r7, #15]
 8003a5e:	e044      	b.n	8003aea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d018      	beq.n	8003a9a <RCCEx_PLLSAI1_Config+0x86>
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d825      	bhi.n	8003ab8 <RCCEx_PLLSAI1_Config+0xa4>
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d002      	beq.n	8003a76 <RCCEx_PLLSAI1_Config+0x62>
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d009      	beq.n	8003a88 <RCCEx_PLLSAI1_Config+0x74>
 8003a74:	e020      	b.n	8003ab8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a76:	4b60      	ldr	r3, [pc, #384]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d11d      	bne.n	8003abe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a86:	e01a      	b.n	8003abe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a88:	4b5b      	ldr	r3, [pc, #364]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d116      	bne.n	8003ac2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a98:	e013      	b.n	8003ac2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a9a:	4b57      	ldr	r3, [pc, #348]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10f      	bne.n	8003ac6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aa6:	4b54      	ldr	r3, [pc, #336]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ab6:	e006      	b.n	8003ac6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
      break;
 8003abc:	e004      	b.n	8003ac8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e002      	b.n	8003ac8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e000      	b.n	8003ac8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ac6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10d      	bne.n	8003aea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ace:	4b4a      	ldr	r3, [pc, #296]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6819      	ldr	r1, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	4944      	ldr	r1, [pc, #272]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d17d      	bne.n	8003bec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003af0:	4b41      	ldr	r3, [pc, #260]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a40      	ldr	r2, [pc, #256]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003afc:	f7fd fcca 	bl	8001494 <HAL_GetTick>
 8003b00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b02:	e009      	b.n	8003b18 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b04:	f7fd fcc6 	bl	8001494 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d902      	bls.n	8003b18 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	73fb      	strb	r3, [r7, #15]
        break;
 8003b16:	e005      	b.n	8003b24 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b18:	4b37      	ldr	r3, [pc, #220]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1ef      	bne.n	8003b04 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d160      	bne.n	8003bec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d111      	bne.n	8003b54 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b30:	4b31      	ldr	r3, [pc, #196]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6892      	ldr	r2, [r2, #8]
 8003b40:	0211      	lsls	r1, r2, #8
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68d2      	ldr	r2, [r2, #12]
 8003b46:	0912      	lsrs	r2, r2, #4
 8003b48:	0452      	lsls	r2, r2, #17
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	492a      	ldr	r1, [pc, #168]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	610b      	str	r3, [r1, #16]
 8003b52:	e027      	b.n	8003ba4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d112      	bne.n	8003b80 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b5a:	4b27      	ldr	r3, [pc, #156]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6892      	ldr	r2, [r2, #8]
 8003b6a:	0211      	lsls	r1, r2, #8
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6912      	ldr	r2, [r2, #16]
 8003b70:	0852      	lsrs	r2, r2, #1
 8003b72:	3a01      	subs	r2, #1
 8003b74:	0552      	lsls	r2, r2, #21
 8003b76:	430a      	orrs	r2, r1
 8003b78:	491f      	ldr	r1, [pc, #124]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	610b      	str	r3, [r1, #16]
 8003b7e:	e011      	b.n	8003ba4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b80:	4b1d      	ldr	r3, [pc, #116]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6892      	ldr	r2, [r2, #8]
 8003b90:	0211      	lsls	r1, r2, #8
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6952      	ldr	r2, [r2, #20]
 8003b96:	0852      	lsrs	r2, r2, #1
 8003b98:	3a01      	subs	r2, #1
 8003b9a:	0652      	lsls	r2, r2, #25
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	4916      	ldr	r1, [pc, #88]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ba4:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a13      	ldr	r2, [pc, #76]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003baa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb0:	f7fd fc70 	bl	8001494 <HAL_GetTick>
 8003bb4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bb6:	e009      	b.n	8003bcc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bb8:	f7fd fc6c 	bl	8001494 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d902      	bls.n	8003bcc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	73fb      	strb	r3, [r7, #15]
          break;
 8003bca:	e005      	b.n	8003bd8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bcc:	4b0a      	ldr	r3, [pc, #40]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0ef      	beq.n	8003bb8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d106      	bne.n	8003bec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bde:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	4904      	ldr	r1, [pc, #16]	; (8003bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40021000 	.word	0x40021000

08003bfc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c0a:	4b6a      	ldr	r3, [pc, #424]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d018      	beq.n	8003c48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c16:	4b67      	ldr	r3, [pc, #412]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0203 	and.w	r2, r3, #3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d10d      	bne.n	8003c42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
       ||
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c2e:	4b61      	ldr	r3, [pc, #388]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	091b      	lsrs	r3, r3, #4
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
       ||
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d047      	beq.n	8003cd2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
 8003c46:	e044      	b.n	8003cd2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d018      	beq.n	8003c82 <RCCEx_PLLSAI2_Config+0x86>
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d825      	bhi.n	8003ca0 <RCCEx_PLLSAI2_Config+0xa4>
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d002      	beq.n	8003c5e <RCCEx_PLLSAI2_Config+0x62>
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d009      	beq.n	8003c70 <RCCEx_PLLSAI2_Config+0x74>
 8003c5c:	e020      	b.n	8003ca0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c5e:	4b55      	ldr	r3, [pc, #340]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d11d      	bne.n	8003ca6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c6e:	e01a      	b.n	8003ca6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c70:	4b50      	ldr	r3, [pc, #320]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d116      	bne.n	8003caa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c80:	e013      	b.n	8003caa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c82:	4b4c      	ldr	r3, [pc, #304]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10f      	bne.n	8003cae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c8e:	4b49      	ldr	r3, [pc, #292]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c9e:	e006      	b.n	8003cae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca4:	e004      	b.n	8003cb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ca6:	bf00      	nop
 8003ca8:	e002      	b.n	8003cb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003caa:	bf00      	nop
 8003cac:	e000      	b.n	8003cb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cae:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10d      	bne.n	8003cd2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cb6:	4b3f      	ldr	r3, [pc, #252]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6819      	ldr	r1, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	4939      	ldr	r1, [pc, #228]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d167      	bne.n	8003da8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003cd8:	4b36      	ldr	r3, [pc, #216]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a35      	ldr	r2, [pc, #212]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce4:	f7fd fbd6 	bl	8001494 <HAL_GetTick>
 8003ce8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cea:	e009      	b.n	8003d00 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cec:	f7fd fbd2 	bl	8001494 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d902      	bls.n	8003d00 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	73fb      	strb	r3, [r7, #15]
        break;
 8003cfe:	e005      	b.n	8003d0c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d00:	4b2c      	ldr	r3, [pc, #176]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1ef      	bne.n	8003cec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d14a      	bne.n	8003da8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d111      	bne.n	8003d3c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d18:	4b26      	ldr	r3, [pc, #152]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6892      	ldr	r2, [r2, #8]
 8003d28:	0211      	lsls	r1, r2, #8
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	68d2      	ldr	r2, [r2, #12]
 8003d2e:	0912      	lsrs	r2, r2, #4
 8003d30:	0452      	lsls	r2, r2, #17
 8003d32:	430a      	orrs	r2, r1
 8003d34:	491f      	ldr	r1, [pc, #124]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	614b      	str	r3, [r1, #20]
 8003d3a:	e011      	b.n	8003d60 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d3c:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6892      	ldr	r2, [r2, #8]
 8003d4c:	0211      	lsls	r1, r2, #8
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6912      	ldr	r2, [r2, #16]
 8003d52:	0852      	lsrs	r2, r2, #1
 8003d54:	3a01      	subs	r2, #1
 8003d56:	0652      	lsls	r2, r2, #25
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	4916      	ldr	r1, [pc, #88]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d60:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a13      	ldr	r2, [pc, #76]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6c:	f7fd fb92 	bl	8001494 <HAL_GetTick>
 8003d70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d72:	e009      	b.n	8003d88 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d74:	f7fd fb8e 	bl	8001494 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d902      	bls.n	8003d88 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	73fb      	strb	r3, [r7, #15]
          break;
 8003d86:	e005      	b.n	8003d94 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d88:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0ef      	beq.n	8003d74 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d9a:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	4904      	ldr	r1, [pc, #16]	; (8003db4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40021000 	.word	0x40021000

08003db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e049      	b.n	8003e5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fd f91c 	bl	800101c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f000 fd86 	bl	8004908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d001      	beq.n	8003e80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e047      	b.n	8003f10 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a23      	ldr	r2, [pc, #140]	; (8003f1c <HAL_TIM_Base_Start+0xb4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01d      	beq.n	8003ece <HAL_TIM_Base_Start+0x66>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9a:	d018      	beq.n	8003ece <HAL_TIM_Base_Start+0x66>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1f      	ldr	r2, [pc, #124]	; (8003f20 <HAL_TIM_Base_Start+0xb8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d013      	beq.n	8003ece <HAL_TIM_Base_Start+0x66>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1e      	ldr	r2, [pc, #120]	; (8003f24 <HAL_TIM_Base_Start+0xbc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00e      	beq.n	8003ece <HAL_TIM_Base_Start+0x66>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1c      	ldr	r2, [pc, #112]	; (8003f28 <HAL_TIM_Base_Start+0xc0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d009      	beq.n	8003ece <HAL_TIM_Base_Start+0x66>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1b      	ldr	r2, [pc, #108]	; (8003f2c <HAL_TIM_Base_Start+0xc4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d004      	beq.n	8003ece <HAL_TIM_Base_Start+0x66>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a19      	ldr	r2, [pc, #100]	; (8003f30 <HAL_TIM_Base_Start+0xc8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d115      	bne.n	8003efa <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	4b17      	ldr	r3, [pc, #92]	; (8003f34 <HAL_TIM_Base_Start+0xcc>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b06      	cmp	r3, #6
 8003ede:	d015      	beq.n	8003f0c <HAL_TIM_Base_Start+0xa4>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee6:	d011      	beq.n	8003f0c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef8:	e008      	b.n	8003f0c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0201 	orr.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	e000      	b.n	8003f0e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	40012c00 	.word	0x40012c00
 8003f20:	40000400 	.word	0x40000400
 8003f24:	40000800 	.word	0x40000800
 8003f28:	40000c00 	.word	0x40000c00
 8003f2c:	40013400 	.word	0x40013400
 8003f30:	40014000 	.word	0x40014000
 8003f34:	00010007 	.word	0x00010007

08003f38 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6a1a      	ldr	r2, [r3, #32]
 8003f46:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10f      	bne.n	8003f70 <HAL_TIM_Base_Stop+0x38>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6a1a      	ldr	r2, [r3, #32]
 8003f56:	f240 4344 	movw	r3, #1092	; 0x444
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d107      	bne.n	8003f70 <HAL_TIM_Base_Stop+0x38>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0201 	bic.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d001      	beq.n	8003fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e04f      	b.n	8004040 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a23      	ldr	r2, [pc, #140]	; (800404c <HAL_TIM_Base_Start_IT+0xc4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d01d      	beq.n	8003ffe <HAL_TIM_Base_Start_IT+0x76>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fca:	d018      	beq.n	8003ffe <HAL_TIM_Base_Start_IT+0x76>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1f      	ldr	r2, [pc, #124]	; (8004050 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d013      	beq.n	8003ffe <HAL_TIM_Base_Start_IT+0x76>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a1e      	ldr	r2, [pc, #120]	; (8004054 <HAL_TIM_Base_Start_IT+0xcc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00e      	beq.n	8003ffe <HAL_TIM_Base_Start_IT+0x76>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a1c      	ldr	r2, [pc, #112]	; (8004058 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d009      	beq.n	8003ffe <HAL_TIM_Base_Start_IT+0x76>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a1b      	ldr	r2, [pc, #108]	; (800405c <HAL_TIM_Base_Start_IT+0xd4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <HAL_TIM_Base_Start_IT+0x76>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a19      	ldr	r2, [pc, #100]	; (8004060 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d115      	bne.n	800402a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	4b17      	ldr	r3, [pc, #92]	; (8004064 <HAL_TIM_Base_Start_IT+0xdc>)
 8004006:	4013      	ands	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b06      	cmp	r3, #6
 800400e:	d015      	beq.n	800403c <HAL_TIM_Base_Start_IT+0xb4>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004016:	d011      	beq.n	800403c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004028:	e008      	b.n	800403c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0201 	orr.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e000      	b.n	800403e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	40012c00 	.word	0x40012c00
 8004050:	40000400 	.word	0x40000400
 8004054:	40000800 	.word	0x40000800
 8004058:	40000c00 	.word	0x40000c00
 800405c:	40013400 	.word	0x40013400
 8004060:	40014000 	.word	0x40014000
 8004064:	00010007 	.word	0x00010007

08004068 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e049      	b.n	800410e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7fc ffa4 	bl	8000fdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4619      	mov	r1, r3
 80040a6:	4610      	mov	r0, r2
 80040a8:	f000 fc2e 	bl	8004908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d109      	bne.n	800413c <HAL_TIM_PWM_Start+0x24>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b01      	cmp	r3, #1
 8004132:	bf14      	ite	ne
 8004134:	2301      	movne	r3, #1
 8004136:	2300      	moveq	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	e03c      	b.n	80041b6 <HAL_TIM_PWM_Start+0x9e>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b04      	cmp	r3, #4
 8004140:	d109      	bne.n	8004156 <HAL_TIM_PWM_Start+0x3e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b01      	cmp	r3, #1
 800414c:	bf14      	ite	ne
 800414e:	2301      	movne	r3, #1
 8004150:	2300      	moveq	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	e02f      	b.n	80041b6 <HAL_TIM_PWM_Start+0x9e>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d109      	bne.n	8004170 <HAL_TIM_PWM_Start+0x58>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b01      	cmp	r3, #1
 8004166:	bf14      	ite	ne
 8004168:	2301      	movne	r3, #1
 800416a:	2300      	moveq	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	e022      	b.n	80041b6 <HAL_TIM_PWM_Start+0x9e>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b0c      	cmp	r3, #12
 8004174:	d109      	bne.n	800418a <HAL_TIM_PWM_Start+0x72>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b01      	cmp	r3, #1
 8004180:	bf14      	ite	ne
 8004182:	2301      	movne	r3, #1
 8004184:	2300      	moveq	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	e015      	b.n	80041b6 <HAL_TIM_PWM_Start+0x9e>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b10      	cmp	r3, #16
 800418e:	d109      	bne.n	80041a4 <HAL_TIM_PWM_Start+0x8c>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b01      	cmp	r3, #1
 800419a:	bf14      	ite	ne
 800419c:	2301      	movne	r3, #1
 800419e:	2300      	moveq	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	e008      	b.n	80041b6 <HAL_TIM_PWM_Start+0x9e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	bf14      	ite	ne
 80041b0:	2301      	movne	r3, #1
 80041b2:	2300      	moveq	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e09c      	b.n	80042f8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d104      	bne.n	80041ce <HAL_TIM_PWM_Start+0xb6>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041cc:	e023      	b.n	8004216 <HAL_TIM_PWM_Start+0xfe>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d104      	bne.n	80041de <HAL_TIM_PWM_Start+0xc6>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041dc:	e01b      	b.n	8004216 <HAL_TIM_PWM_Start+0xfe>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d104      	bne.n	80041ee <HAL_TIM_PWM_Start+0xd6>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041ec:	e013      	b.n	8004216 <HAL_TIM_PWM_Start+0xfe>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b0c      	cmp	r3, #12
 80041f2:	d104      	bne.n	80041fe <HAL_TIM_PWM_Start+0xe6>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041fc:	e00b      	b.n	8004216 <HAL_TIM_PWM_Start+0xfe>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b10      	cmp	r3, #16
 8004202:	d104      	bne.n	800420e <HAL_TIM_PWM_Start+0xf6>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800420c:	e003      	b.n	8004216 <HAL_TIM_PWM_Start+0xfe>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2202      	movs	r2, #2
 8004212:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2201      	movs	r2, #1
 800421c:	6839      	ldr	r1, [r7, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fee2 	bl	8004fe8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a35      	ldr	r2, [pc, #212]	; (8004300 <HAL_TIM_PWM_Start+0x1e8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <HAL_TIM_PWM_Start+0x13e>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a34      	ldr	r2, [pc, #208]	; (8004304 <HAL_TIM_PWM_Start+0x1ec>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00e      	beq.n	8004256 <HAL_TIM_PWM_Start+0x13e>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a32      	ldr	r2, [pc, #200]	; (8004308 <HAL_TIM_PWM_Start+0x1f0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d009      	beq.n	8004256 <HAL_TIM_PWM_Start+0x13e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a31      	ldr	r2, [pc, #196]	; (800430c <HAL_TIM_PWM_Start+0x1f4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <HAL_TIM_PWM_Start+0x13e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a2f      	ldr	r2, [pc, #188]	; (8004310 <HAL_TIM_PWM_Start+0x1f8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d101      	bne.n	800425a <HAL_TIM_PWM_Start+0x142>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <HAL_TIM_PWM_Start+0x144>
 800425a:	2300      	movs	r3, #0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d007      	beq.n	8004270 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800426e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a22      	ldr	r2, [pc, #136]	; (8004300 <HAL_TIM_PWM_Start+0x1e8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d01d      	beq.n	80042b6 <HAL_TIM_PWM_Start+0x19e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004282:	d018      	beq.n	80042b6 <HAL_TIM_PWM_Start+0x19e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a22      	ldr	r2, [pc, #136]	; (8004314 <HAL_TIM_PWM_Start+0x1fc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d013      	beq.n	80042b6 <HAL_TIM_PWM_Start+0x19e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a21      	ldr	r2, [pc, #132]	; (8004318 <HAL_TIM_PWM_Start+0x200>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00e      	beq.n	80042b6 <HAL_TIM_PWM_Start+0x19e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1f      	ldr	r2, [pc, #124]	; (800431c <HAL_TIM_PWM_Start+0x204>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d009      	beq.n	80042b6 <HAL_TIM_PWM_Start+0x19e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a17      	ldr	r2, [pc, #92]	; (8004304 <HAL_TIM_PWM_Start+0x1ec>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d004      	beq.n	80042b6 <HAL_TIM_PWM_Start+0x19e>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <HAL_TIM_PWM_Start+0x1f0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d115      	bne.n	80042e2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	4b18      	ldr	r3, [pc, #96]	; (8004320 <HAL_TIM_PWM_Start+0x208>)
 80042be:	4013      	ands	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2b06      	cmp	r3, #6
 80042c6:	d015      	beq.n	80042f4 <HAL_TIM_PWM_Start+0x1dc>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ce:	d011      	beq.n	80042f4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e0:	e008      	b.n	80042f4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 0201 	orr.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e000      	b.n	80042f6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40012c00 	.word	0x40012c00
 8004304:	40013400 	.word	0x40013400
 8004308:	40014000 	.word	0x40014000
 800430c:	40014400 	.word	0x40014400
 8004310:	40014800 	.word	0x40014800
 8004314:	40000400 	.word	0x40000400
 8004318:	40000800 	.word	0x40000800
 800431c:	40000c00 	.word	0x40000c00
 8004320:	00010007 	.word	0x00010007

08004324 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2200      	movs	r2, #0
 8004334:	6839      	ldr	r1, [r7, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fe56 	bl	8004fe8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a3e      	ldr	r2, [pc, #248]	; (800443c <HAL_TIM_PWM_Stop+0x118>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d013      	beq.n	800436e <HAL_TIM_PWM_Stop+0x4a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a3d      	ldr	r2, [pc, #244]	; (8004440 <HAL_TIM_PWM_Stop+0x11c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00e      	beq.n	800436e <HAL_TIM_PWM_Stop+0x4a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a3b      	ldr	r2, [pc, #236]	; (8004444 <HAL_TIM_PWM_Stop+0x120>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d009      	beq.n	800436e <HAL_TIM_PWM_Stop+0x4a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a3a      	ldr	r2, [pc, #232]	; (8004448 <HAL_TIM_PWM_Stop+0x124>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d004      	beq.n	800436e <HAL_TIM_PWM_Stop+0x4a>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a38      	ldr	r2, [pc, #224]	; (800444c <HAL_TIM_PWM_Stop+0x128>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d101      	bne.n	8004372 <HAL_TIM_PWM_Stop+0x4e>
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <HAL_TIM_PWM_Stop+0x50>
 8004372:	2300      	movs	r3, #0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d017      	beq.n	80043a8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6a1a      	ldr	r2, [r3, #32]
 800437e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004382:	4013      	ands	r3, r2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10f      	bne.n	80043a8 <HAL_TIM_PWM_Stop+0x84>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6a1a      	ldr	r2, [r3, #32]
 800438e:	f240 4344 	movw	r3, #1092	; 0x444
 8004392:	4013      	ands	r3, r2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d107      	bne.n	80043a8 <HAL_TIM_PWM_Stop+0x84>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6a1a      	ldr	r2, [r3, #32]
 80043ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10f      	bne.n	80043d8 <HAL_TIM_PWM_Stop+0xb4>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6a1a      	ldr	r2, [r3, #32]
 80043be:	f240 4344 	movw	r3, #1092	; 0x444
 80043c2:	4013      	ands	r3, r2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d107      	bne.n	80043d8 <HAL_TIM_PWM_Stop+0xb4>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d104      	bne.n	80043e8 <HAL_TIM_PWM_Stop+0xc4>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043e6:	e023      	b.n	8004430 <HAL_TIM_PWM_Stop+0x10c>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d104      	bne.n	80043f8 <HAL_TIM_PWM_Stop+0xd4>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043f6:	e01b      	b.n	8004430 <HAL_TIM_PWM_Stop+0x10c>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2b08      	cmp	r3, #8
 80043fc:	d104      	bne.n	8004408 <HAL_TIM_PWM_Stop+0xe4>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004406:	e013      	b.n	8004430 <HAL_TIM_PWM_Stop+0x10c>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2b0c      	cmp	r3, #12
 800440c:	d104      	bne.n	8004418 <HAL_TIM_PWM_Stop+0xf4>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004416:	e00b      	b.n	8004430 <HAL_TIM_PWM_Stop+0x10c>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b10      	cmp	r3, #16
 800441c:	d104      	bne.n	8004428 <HAL_TIM_PWM_Stop+0x104>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004426:	e003      	b.n	8004430 <HAL_TIM_PWM_Stop+0x10c>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40012c00 	.word	0x40012c00
 8004440:	40013400 	.word	0x40013400
 8004444:	40014000 	.word	0x40014000
 8004448:	40014400 	.word	0x40014400
 800444c:	40014800 	.word	0x40014800

08004450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b02      	cmp	r3, #2
 8004464:	d122      	bne.n	80044ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b02      	cmp	r3, #2
 8004472:	d11b      	bne.n	80044ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0202 	mvn.w	r2, #2
 800447c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fa1a 	bl	80048cc <HAL_TIM_IC_CaptureCallback>
 8004498:	e005      	b.n	80044a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fa0c 	bl	80048b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fa1d 	bl	80048e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d122      	bne.n	8004500 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d11b      	bne.n	8004500 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0204 	mvn.w	r2, #4
 80044d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2202      	movs	r2, #2
 80044d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f9f0 	bl	80048cc <HAL_TIM_IC_CaptureCallback>
 80044ec:	e005      	b.n	80044fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f9e2 	bl	80048b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f9f3 	bl	80048e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b08      	cmp	r3, #8
 800450c:	d122      	bne.n	8004554 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b08      	cmp	r3, #8
 800451a:	d11b      	bne.n	8004554 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0208 	mvn.w	r2, #8
 8004524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2204      	movs	r2, #4
 800452a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f9c6 	bl	80048cc <HAL_TIM_IC_CaptureCallback>
 8004540:	e005      	b.n	800454e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f9b8 	bl	80048b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f9c9 	bl	80048e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2b10      	cmp	r3, #16
 8004560:	d122      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b10      	cmp	r3, #16
 800456e:	d11b      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0210 	mvn.w	r2, #16
 8004578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2208      	movs	r2, #8
 800457e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f99c 	bl	80048cc <HAL_TIM_IC_CaptureCallback>
 8004594:	e005      	b.n	80045a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f98e 	bl	80048b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f99f 	bl	80048e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d10e      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d107      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f06f 0201 	mvn.w	r2, #1
 80045cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7fc fa22 	bl	8000a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045de:	2b80      	cmp	r3, #128	; 0x80
 80045e0:	d10e      	bne.n	8004600 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ec:	2b80      	cmp	r3, #128	; 0x80
 80045ee:	d107      	bne.n	8004600 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fdac 	bl	8005158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800460e:	d10e      	bne.n	800462e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461a:	2b80      	cmp	r3, #128	; 0x80
 800461c:	d107      	bne.n	800462e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fd9f 	bl	800516c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004638:	2b40      	cmp	r3, #64	; 0x40
 800463a:	d10e      	bne.n	800465a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004646:	2b40      	cmp	r3, #64	; 0x40
 8004648:	d107      	bne.n	800465a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f94d 	bl	80048f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b20      	cmp	r3, #32
 8004666:	d10e      	bne.n	8004686 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b20      	cmp	r3, #32
 8004674:	d107      	bne.n	8004686 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f06f 0220 	mvn.w	r2, #32
 800467e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 fd5f 	bl	8005144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e0ff      	b.n	80048ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b14      	cmp	r3, #20
 80046ba:	f200 80f0 	bhi.w	800489e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046be:	a201      	add	r2, pc, #4	; (adr r2, 80046c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c4:	08004719 	.word	0x08004719
 80046c8:	0800489f 	.word	0x0800489f
 80046cc:	0800489f 	.word	0x0800489f
 80046d0:	0800489f 	.word	0x0800489f
 80046d4:	08004759 	.word	0x08004759
 80046d8:	0800489f 	.word	0x0800489f
 80046dc:	0800489f 	.word	0x0800489f
 80046e0:	0800489f 	.word	0x0800489f
 80046e4:	0800479b 	.word	0x0800479b
 80046e8:	0800489f 	.word	0x0800489f
 80046ec:	0800489f 	.word	0x0800489f
 80046f0:	0800489f 	.word	0x0800489f
 80046f4:	080047db 	.word	0x080047db
 80046f8:	0800489f 	.word	0x0800489f
 80046fc:	0800489f 	.word	0x0800489f
 8004700:	0800489f 	.word	0x0800489f
 8004704:	0800481d 	.word	0x0800481d
 8004708:	0800489f 	.word	0x0800489f
 800470c:	0800489f 	.word	0x0800489f
 8004710:	0800489f 	.word	0x0800489f
 8004714:	0800485d 	.word	0x0800485d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f98c 	bl	8004a3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0208 	orr.w	r2, r2, #8
 8004732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0204 	bic.w	r2, r2, #4
 8004742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6999      	ldr	r1, [r3, #24]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	619a      	str	r2, [r3, #24]
      break;
 8004756:	e0a5      	b.n	80048a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	4618      	mov	r0, r3
 8004760:	f000 f9fc 	bl	8004b5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6999      	ldr	r1, [r3, #24]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	021a      	lsls	r2, r3, #8
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	619a      	str	r2, [r3, #24]
      break;
 8004798:	e084      	b.n	80048a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fa65 	bl	8004c70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0208 	orr.w	r2, r2, #8
 80047b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0204 	bic.w	r2, r2, #4
 80047c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69d9      	ldr	r1, [r3, #28]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	61da      	str	r2, [r3, #28]
      break;
 80047d8:	e064      	b.n	80048a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 facd 	bl	8004d80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69d9      	ldr	r1, [r3, #28]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	021a      	lsls	r2, r3, #8
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	61da      	str	r2, [r3, #28]
      break;
 800481a:	e043      	b.n	80048a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fb16 	bl	8004e54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0208 	orr.w	r2, r2, #8
 8004836:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0204 	bic.w	r2, r2, #4
 8004846:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	691a      	ldr	r2, [r3, #16]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800485a:	e023      	b.n	80048a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fb5a 	bl	8004f1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004876:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004886:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	021a      	lsls	r2, r3, #8
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800489c:	e002      	b.n	80048a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	75fb      	strb	r3, [r7, #23]
      break;
 80048a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop

080048b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a40      	ldr	r2, [pc, #256]	; (8004a1c <TIM_Base_SetConfig+0x114>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d013      	beq.n	8004948 <TIM_Base_SetConfig+0x40>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004926:	d00f      	beq.n	8004948 <TIM_Base_SetConfig+0x40>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a3d      	ldr	r2, [pc, #244]	; (8004a20 <TIM_Base_SetConfig+0x118>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d00b      	beq.n	8004948 <TIM_Base_SetConfig+0x40>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a3c      	ldr	r2, [pc, #240]	; (8004a24 <TIM_Base_SetConfig+0x11c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d007      	beq.n	8004948 <TIM_Base_SetConfig+0x40>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a3b      	ldr	r2, [pc, #236]	; (8004a28 <TIM_Base_SetConfig+0x120>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d003      	beq.n	8004948 <TIM_Base_SetConfig+0x40>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a3a      	ldr	r2, [pc, #232]	; (8004a2c <TIM_Base_SetConfig+0x124>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d108      	bne.n	800495a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a2f      	ldr	r2, [pc, #188]	; (8004a1c <TIM_Base_SetConfig+0x114>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d01f      	beq.n	80049a2 <TIM_Base_SetConfig+0x9a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004968:	d01b      	beq.n	80049a2 <TIM_Base_SetConfig+0x9a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a2c      	ldr	r2, [pc, #176]	; (8004a20 <TIM_Base_SetConfig+0x118>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d017      	beq.n	80049a2 <TIM_Base_SetConfig+0x9a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a2b      	ldr	r2, [pc, #172]	; (8004a24 <TIM_Base_SetConfig+0x11c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <TIM_Base_SetConfig+0x9a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a2a      	ldr	r2, [pc, #168]	; (8004a28 <TIM_Base_SetConfig+0x120>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00f      	beq.n	80049a2 <TIM_Base_SetConfig+0x9a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a29      	ldr	r2, [pc, #164]	; (8004a2c <TIM_Base_SetConfig+0x124>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00b      	beq.n	80049a2 <TIM_Base_SetConfig+0x9a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a28      	ldr	r2, [pc, #160]	; (8004a30 <TIM_Base_SetConfig+0x128>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d007      	beq.n	80049a2 <TIM_Base_SetConfig+0x9a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a27      	ldr	r2, [pc, #156]	; (8004a34 <TIM_Base_SetConfig+0x12c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d003      	beq.n	80049a2 <TIM_Base_SetConfig+0x9a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a26      	ldr	r2, [pc, #152]	; (8004a38 <TIM_Base_SetConfig+0x130>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d108      	bne.n	80049b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a10      	ldr	r2, [pc, #64]	; (8004a1c <TIM_Base_SetConfig+0x114>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00f      	beq.n	8004a00 <TIM_Base_SetConfig+0xf8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a12      	ldr	r2, [pc, #72]	; (8004a2c <TIM_Base_SetConfig+0x124>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d00b      	beq.n	8004a00 <TIM_Base_SetConfig+0xf8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a11      	ldr	r2, [pc, #68]	; (8004a30 <TIM_Base_SetConfig+0x128>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d007      	beq.n	8004a00 <TIM_Base_SetConfig+0xf8>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a10      	ldr	r2, [pc, #64]	; (8004a34 <TIM_Base_SetConfig+0x12c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d003      	beq.n	8004a00 <TIM_Base_SetConfig+0xf8>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a0f      	ldr	r2, [pc, #60]	; (8004a38 <TIM_Base_SetConfig+0x130>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d103      	bne.n	8004a08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	615a      	str	r2, [r3, #20]
}
 8004a0e:	bf00      	nop
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40012c00 	.word	0x40012c00
 8004a20:	40000400 	.word	0x40000400
 8004a24:	40000800 	.word	0x40000800
 8004a28:	40000c00 	.word	0x40000c00
 8004a2c:	40013400 	.word	0x40013400
 8004a30:	40014000 	.word	0x40014000
 8004a34:	40014400 	.word	0x40014400
 8004a38:	40014800 	.word	0x40014800

08004a3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	f023 0201 	bic.w	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0303 	bic.w	r3, r3, #3
 8004a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f023 0302 	bic.w	r3, r3, #2
 8004a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a2c      	ldr	r2, [pc, #176]	; (8004b48 <TIM_OC1_SetConfig+0x10c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00f      	beq.n	8004abc <TIM_OC1_SetConfig+0x80>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a2b      	ldr	r2, [pc, #172]	; (8004b4c <TIM_OC1_SetConfig+0x110>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00b      	beq.n	8004abc <TIM_OC1_SetConfig+0x80>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a2a      	ldr	r2, [pc, #168]	; (8004b50 <TIM_OC1_SetConfig+0x114>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d007      	beq.n	8004abc <TIM_OC1_SetConfig+0x80>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a29      	ldr	r2, [pc, #164]	; (8004b54 <TIM_OC1_SetConfig+0x118>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d003      	beq.n	8004abc <TIM_OC1_SetConfig+0x80>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a28      	ldr	r2, [pc, #160]	; (8004b58 <TIM_OC1_SetConfig+0x11c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d10c      	bne.n	8004ad6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f023 0308 	bic.w	r3, r3, #8
 8004ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f023 0304 	bic.w	r3, r3, #4
 8004ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a1b      	ldr	r2, [pc, #108]	; (8004b48 <TIM_OC1_SetConfig+0x10c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00f      	beq.n	8004afe <TIM_OC1_SetConfig+0xc2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a1a      	ldr	r2, [pc, #104]	; (8004b4c <TIM_OC1_SetConfig+0x110>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00b      	beq.n	8004afe <TIM_OC1_SetConfig+0xc2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a19      	ldr	r2, [pc, #100]	; (8004b50 <TIM_OC1_SetConfig+0x114>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d007      	beq.n	8004afe <TIM_OC1_SetConfig+0xc2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a18      	ldr	r2, [pc, #96]	; (8004b54 <TIM_OC1_SetConfig+0x118>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d003      	beq.n	8004afe <TIM_OC1_SetConfig+0xc2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a17      	ldr	r2, [pc, #92]	; (8004b58 <TIM_OC1_SetConfig+0x11c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d111      	bne.n	8004b22 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	621a      	str	r2, [r3, #32]
}
 8004b3c:	bf00      	nop
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	40012c00 	.word	0x40012c00
 8004b4c:	40013400 	.word	0x40013400
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40014400 	.word	0x40014400
 8004b58:	40014800 	.word	0x40014800

08004b5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	f023 0210 	bic.w	r2, r3, #16
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	021b      	lsls	r3, r3, #8
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f023 0320 	bic.w	r3, r3, #32
 8004baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a28      	ldr	r2, [pc, #160]	; (8004c5c <TIM_OC2_SetConfig+0x100>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d003      	beq.n	8004bc8 <TIM_OC2_SetConfig+0x6c>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a27      	ldr	r2, [pc, #156]	; (8004c60 <TIM_OC2_SetConfig+0x104>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d10d      	bne.n	8004be4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a1d      	ldr	r2, [pc, #116]	; (8004c5c <TIM_OC2_SetConfig+0x100>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00f      	beq.n	8004c0c <TIM_OC2_SetConfig+0xb0>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a1c      	ldr	r2, [pc, #112]	; (8004c60 <TIM_OC2_SetConfig+0x104>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00b      	beq.n	8004c0c <TIM_OC2_SetConfig+0xb0>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a1b      	ldr	r2, [pc, #108]	; (8004c64 <TIM_OC2_SetConfig+0x108>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d007      	beq.n	8004c0c <TIM_OC2_SetConfig+0xb0>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a1a      	ldr	r2, [pc, #104]	; (8004c68 <TIM_OC2_SetConfig+0x10c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d003      	beq.n	8004c0c <TIM_OC2_SetConfig+0xb0>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a19      	ldr	r2, [pc, #100]	; (8004c6c <TIM_OC2_SetConfig+0x110>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d113      	bne.n	8004c34 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	621a      	str	r2, [r3, #32]
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40012c00 	.word	0x40012c00
 8004c60:	40013400 	.word	0x40013400
 8004c64:	40014000 	.word	0x40014000
 8004c68:	40014400 	.word	0x40014400
 8004c6c:	40014800 	.word	0x40014800

08004c70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a27      	ldr	r2, [pc, #156]	; (8004d6c <TIM_OC3_SetConfig+0xfc>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_OC3_SetConfig+0x6a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a26      	ldr	r2, [pc, #152]	; (8004d70 <TIM_OC3_SetConfig+0x100>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d10d      	bne.n	8004cf6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a1c      	ldr	r2, [pc, #112]	; (8004d6c <TIM_OC3_SetConfig+0xfc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00f      	beq.n	8004d1e <TIM_OC3_SetConfig+0xae>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a1b      	ldr	r2, [pc, #108]	; (8004d70 <TIM_OC3_SetConfig+0x100>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00b      	beq.n	8004d1e <TIM_OC3_SetConfig+0xae>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a1a      	ldr	r2, [pc, #104]	; (8004d74 <TIM_OC3_SetConfig+0x104>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d007      	beq.n	8004d1e <TIM_OC3_SetConfig+0xae>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a19      	ldr	r2, [pc, #100]	; (8004d78 <TIM_OC3_SetConfig+0x108>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d003      	beq.n	8004d1e <TIM_OC3_SetConfig+0xae>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a18      	ldr	r2, [pc, #96]	; (8004d7c <TIM_OC3_SetConfig+0x10c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d113      	bne.n	8004d46 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	621a      	str	r2, [r3, #32]
}
 8004d60:	bf00      	nop
 8004d62:	371c      	adds	r7, #28
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	40013400 	.word	0x40013400
 8004d74:	40014000 	.word	0x40014000
 8004d78:	40014400 	.word	0x40014400
 8004d7c:	40014800 	.word	0x40014800

08004d80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	031b      	lsls	r3, r3, #12
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a18      	ldr	r2, [pc, #96]	; (8004e40 <TIM_OC4_SetConfig+0xc0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00f      	beq.n	8004e04 <TIM_OC4_SetConfig+0x84>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a17      	ldr	r2, [pc, #92]	; (8004e44 <TIM_OC4_SetConfig+0xc4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00b      	beq.n	8004e04 <TIM_OC4_SetConfig+0x84>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a16      	ldr	r2, [pc, #88]	; (8004e48 <TIM_OC4_SetConfig+0xc8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d007      	beq.n	8004e04 <TIM_OC4_SetConfig+0x84>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a15      	ldr	r2, [pc, #84]	; (8004e4c <TIM_OC4_SetConfig+0xcc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_OC4_SetConfig+0x84>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a14      	ldr	r2, [pc, #80]	; (8004e50 <TIM_OC4_SetConfig+0xd0>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d109      	bne.n	8004e18 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	019b      	lsls	r3, r3, #6
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	621a      	str	r2, [r3, #32]
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40012c00 	.word	0x40012c00
 8004e44:	40013400 	.word	0x40013400
 8004e48:	40014000 	.word	0x40014000
 8004e4c:	40014400 	.word	0x40014400
 8004e50:	40014800 	.word	0x40014800

08004e54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	041b      	lsls	r3, r3, #16
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a17      	ldr	r2, [pc, #92]	; (8004f08 <TIM_OC5_SetConfig+0xb4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00f      	beq.n	8004ece <TIM_OC5_SetConfig+0x7a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a16      	ldr	r2, [pc, #88]	; (8004f0c <TIM_OC5_SetConfig+0xb8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00b      	beq.n	8004ece <TIM_OC5_SetConfig+0x7a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a15      	ldr	r2, [pc, #84]	; (8004f10 <TIM_OC5_SetConfig+0xbc>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d007      	beq.n	8004ece <TIM_OC5_SetConfig+0x7a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a14      	ldr	r2, [pc, #80]	; (8004f14 <TIM_OC5_SetConfig+0xc0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <TIM_OC5_SetConfig+0x7a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a13      	ldr	r2, [pc, #76]	; (8004f18 <TIM_OC5_SetConfig+0xc4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d109      	bne.n	8004ee2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	621a      	str	r2, [r3, #32]
}
 8004efc:	bf00      	nop
 8004efe:	371c      	adds	r7, #28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	40012c00 	.word	0x40012c00
 8004f0c:	40013400 	.word	0x40013400
 8004f10:	40014000 	.word	0x40014000
 8004f14:	40014400 	.word	0x40014400
 8004f18:	40014800 	.word	0x40014800

08004f1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	021b      	lsls	r3, r3, #8
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	051b      	lsls	r3, r3, #20
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a18      	ldr	r2, [pc, #96]	; (8004fd4 <TIM_OC6_SetConfig+0xb8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00f      	beq.n	8004f98 <TIM_OC6_SetConfig+0x7c>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a17      	ldr	r2, [pc, #92]	; (8004fd8 <TIM_OC6_SetConfig+0xbc>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00b      	beq.n	8004f98 <TIM_OC6_SetConfig+0x7c>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a16      	ldr	r2, [pc, #88]	; (8004fdc <TIM_OC6_SetConfig+0xc0>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d007      	beq.n	8004f98 <TIM_OC6_SetConfig+0x7c>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a15      	ldr	r2, [pc, #84]	; (8004fe0 <TIM_OC6_SetConfig+0xc4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d003      	beq.n	8004f98 <TIM_OC6_SetConfig+0x7c>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a14      	ldr	r2, [pc, #80]	; (8004fe4 <TIM_OC6_SetConfig+0xc8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d109      	bne.n	8004fac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	029b      	lsls	r3, r3, #10
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	621a      	str	r2, [r3, #32]
}
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	40013400 	.word	0x40013400
 8004fdc:	40014000 	.word	0x40014000
 8004fe0:	40014400 	.word	0x40014400
 8004fe4:	40014800 	.word	0x40014800

08004fe8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8005000:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a1a      	ldr	r2, [r3, #32]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	43db      	mvns	r3, r3
 800500a:	401a      	ands	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a1a      	ldr	r2, [r3, #32]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f003 031f 	and.w	r3, r3, #31
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	fa01 f303 	lsl.w	r3, r1, r3
 8005020:	431a      	orrs	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	621a      	str	r2, [r3, #32]
}
 8005026:	bf00      	nop
 8005028:	371c      	adds	r7, #28
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005048:	2302      	movs	r3, #2
 800504a:	e068      	b.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a2e      	ldr	r2, [pc, #184]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d004      	beq.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a2d      	ldr	r2, [pc, #180]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d108      	bne.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005086:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005098:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1e      	ldr	r2, [pc, #120]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d01d      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050be:	d018      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1b      	ldr	r2, [pc, #108]	; (8005134 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d013      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1a      	ldr	r2, [pc, #104]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00e      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a18      	ldr	r2, [pc, #96]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d009      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a13      	ldr	r2, [pc, #76]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a14      	ldr	r2, [pc, #80]	; (8005140 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d10c      	bne.n	800510c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	4313      	orrs	r3, r2
 8005102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40012c00 	.word	0x40012c00
 8005130:	40013400 	.word	0x40013400
 8005134:	40000400 	.word	0x40000400
 8005138:	40000800 	.word	0x40000800
 800513c:	40000c00 	.word	0x40000c00
 8005140:	40014000 	.word	0x40014000

08005144 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e040      	b.n	8005214 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005196:	2b00      	cmp	r3, #0
 8005198:	d106      	bne.n	80051a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7fb ff98 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2224      	movs	r2, #36	; 0x24
 80051ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0201 	bic.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fc94 	bl	8005aec <UART_SetConfig>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e022      	b.n	8005214 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 ff40 	bl	800605c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0201 	orr.w	r2, r2, #1
 800520a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 ffc7 	bl	80061a0 <UART_CheckIdleState>
 8005212:	4603      	mov	r3, r0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08a      	sub	sp, #40	; 0x28
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	603b      	str	r3, [r7, #0]
 8005228:	4613      	mov	r3, r2
 800522a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005230:	2b20      	cmp	r3, #32
 8005232:	f040 8082 	bne.w	800533a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <HAL_UART_Transmit+0x26>
 800523c:	88fb      	ldrh	r3, [r7, #6]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e07a      	b.n	800533c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <HAL_UART_Transmit+0x38>
 8005250:	2302      	movs	r3, #2
 8005252:	e073      	b.n	800533c <HAL_UART_Transmit+0x120>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2221      	movs	r2, #33	; 0x21
 8005268:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800526a:	f7fc f913 	bl	8001494 <HAL_GetTick>
 800526e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	88fa      	ldrh	r2, [r7, #6]
 8005274:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	88fa      	ldrh	r2, [r7, #6]
 800527c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005288:	d108      	bne.n	800529c <HAL_UART_Transmit+0x80>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d104      	bne.n	800529c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	e003      	b.n	80052a4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80052ac:	e02d      	b.n	800530a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2200      	movs	r2, #0
 80052b6:	2180      	movs	r1, #128	; 0x80
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 ffba 	bl	8006232 <UART_WaitOnFlagUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e039      	b.n	800533c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	881a      	ldrh	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052da:	b292      	uxth	r2, r2
 80052dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	3302      	adds	r3, #2
 80052e2:	61bb      	str	r3, [r7, #24]
 80052e4:	e008      	b.n	80052f8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	781a      	ldrb	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	b292      	uxth	r2, r2
 80052f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	3301      	adds	r3, #1
 80052f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052fe:	b29b      	uxth	r3, r3
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1cb      	bne.n	80052ae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2200      	movs	r2, #0
 800531e:	2140      	movs	r1, #64	; 0x40
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 ff86 	bl	8006232 <UART_WaitOnFlagUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e005      	b.n	800533c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2220      	movs	r2, #32
 8005334:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	e000      	b.n	800533c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800533a:	2302      	movs	r3, #2
  }
}
 800533c:	4618      	mov	r0, r3
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08a      	sub	sp, #40	; 0x28
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	4613      	mov	r3, r2
 8005352:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005358:	2b20      	cmp	r3, #32
 800535a:	f040 80bf 	bne.w	80054dc <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_UART_Receive+0x26>
 8005364:	88fb      	ldrh	r3, [r7, #6]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e0b7      	b.n	80054de <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_UART_Receive+0x38>
 8005378:	2302      	movs	r3, #2
 800537a:	e0b0      	b.n	80054de <HAL_UART_Receive+0x19a>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2222      	movs	r2, #34	; 0x22
 8005390:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005398:	f7fc f87c 	bl	8001494 <HAL_GetTick>
 800539c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	88fa      	ldrh	r2, [r7, #6]
 80053a2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	88fa      	ldrh	r2, [r7, #6]
 80053aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b6:	d10e      	bne.n	80053d6 <HAL_UART_Receive+0x92>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d105      	bne.n	80053cc <HAL_UART_Receive+0x88>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80053c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053ca:	e02d      	b.n	8005428 <HAL_UART_Receive+0xe4>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	22ff      	movs	r2, #255	; 0xff
 80053d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053d4:	e028      	b.n	8005428 <HAL_UART_Receive+0xe4>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10d      	bne.n	80053fa <HAL_UART_Receive+0xb6>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d104      	bne.n	80053f0 <HAL_UART_Receive+0xac>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	22ff      	movs	r2, #255	; 0xff
 80053ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053ee:	e01b      	b.n	8005428 <HAL_UART_Receive+0xe4>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	227f      	movs	r2, #127	; 0x7f
 80053f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053f8:	e016      	b.n	8005428 <HAL_UART_Receive+0xe4>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005402:	d10d      	bne.n	8005420 <HAL_UART_Receive+0xdc>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d104      	bne.n	8005416 <HAL_UART_Receive+0xd2>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	227f      	movs	r2, #127	; 0x7f
 8005410:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005414:	e008      	b.n	8005428 <HAL_UART_Receive+0xe4>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	223f      	movs	r2, #63	; 0x3f
 800541a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800541e:	e003      	b.n	8005428 <HAL_UART_Receive+0xe4>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800542e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005438:	d108      	bne.n	800544c <HAL_UART_Receive+0x108>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d104      	bne.n	800544c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005442:	2300      	movs	r3, #0
 8005444:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	61bb      	str	r3, [r7, #24]
 800544a:	e003      	b.n	8005454 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005450:	2300      	movs	r3, #0
 8005452:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800545c:	e033      	b.n	80054c6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2200      	movs	r2, #0
 8005466:	2120      	movs	r1, #32
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 fee2 	bl	8006232 <UART_WaitOnFlagUntilTimeout>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e032      	b.n	80054de <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10c      	bne.n	8005498 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005484:	b29a      	uxth	r2, r3
 8005486:	8a7b      	ldrh	r3, [r7, #18]
 8005488:	4013      	ands	r3, r2
 800548a:	b29a      	uxth	r2, r3
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	3302      	adds	r3, #2
 8005494:	61bb      	str	r3, [r7, #24]
 8005496:	e00d      	b.n	80054b4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800549e:	b29b      	uxth	r3, r3
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	8a7b      	ldrh	r3, [r7, #18]
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	4013      	ands	r3, r2
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	3301      	adds	r3, #1
 80054b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1c5      	bne.n	800545e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2220      	movs	r2, #32
 80054d6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	e000      	b.n	80054de <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80054dc:	2302      	movs	r3, #2
  }
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3720      	adds	r7, #32
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b0ba      	sub	sp, #232	; 0xe8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800550e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005512:	f640 030f 	movw	r3, #2063	; 0x80f
 8005516:	4013      	ands	r3, r2
 8005518:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800551c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d115      	bne.n	8005550 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005528:	f003 0320 	and.w	r3, r3, #32
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00f      	beq.n	8005550 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005534:	f003 0320 	and.w	r3, r3, #32
 8005538:	2b00      	cmp	r3, #0
 800553a:	d009      	beq.n	8005550 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 82a6 	beq.w	8005a92 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	4798      	blx	r3
      }
      return;
 800554e:	e2a0      	b.n	8005a92 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005550:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 8117 	beq.w	8005788 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800555a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005566:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800556a:	4b85      	ldr	r3, [pc, #532]	; (8005780 <HAL_UART_IRQHandler+0x298>)
 800556c:	4013      	ands	r3, r2
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 810a 	beq.w	8005788 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d011      	beq.n	80055a4 <HAL_UART_IRQHandler+0xbc>
 8005580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00b      	beq.n	80055a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2201      	movs	r2, #1
 8005592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800559a:	f043 0201 	orr.w	r2, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d011      	beq.n	80055d4 <HAL_UART_IRQHandler+0xec>
 80055b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00b      	beq.n	80055d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2202      	movs	r2, #2
 80055c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ca:	f043 0204 	orr.w	r2, r3, #4
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d011      	beq.n	8005604 <HAL_UART_IRQHandler+0x11c>
 80055e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00b      	beq.n	8005604 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2204      	movs	r2, #4
 80055f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055fa:	f043 0202 	orr.w	r2, r3, #2
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b00      	cmp	r3, #0
 800560e:	d017      	beq.n	8005640 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005614:	f003 0320 	and.w	r3, r3, #32
 8005618:	2b00      	cmp	r3, #0
 800561a:	d105      	bne.n	8005628 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800561c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005620:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00b      	beq.n	8005640 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2208      	movs	r2, #8
 800562e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005636:	f043 0208 	orr.w	r2, r3, #8
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005648:	2b00      	cmp	r3, #0
 800564a:	d012      	beq.n	8005672 <HAL_UART_IRQHandler+0x18a>
 800564c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005650:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00c      	beq.n	8005672 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005660:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005668:	f043 0220 	orr.w	r2, r3, #32
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 820c 	beq.w	8005a96 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800567e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00d      	beq.n	80056a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800568a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b00      	cmp	r3, #0
 8005694:	d007      	beq.n	80056a6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b40      	cmp	r3, #64	; 0x40
 80056bc:	d005      	beq.n	80056ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d04f      	beq.n	800576a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fe75 	bl	80063ba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056da:	2b40      	cmp	r3, #64	; 0x40
 80056dc:	d141      	bne.n	8005762 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3308      	adds	r3, #8
 80056e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3308      	adds	r3, #8
 8005706:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800570a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800570e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005716:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800571a:	e841 2300 	strex	r3, r2, [r1]
 800571e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1d9      	bne.n	80056de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572e:	2b00      	cmp	r3, #0
 8005730:	d013      	beq.n	800575a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005736:	4a13      	ldr	r2, [pc, #76]	; (8005784 <HAL_UART_IRQHandler+0x29c>)
 8005738:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573e:	4618      	mov	r0, r3
 8005740:	f7fc f803 	bl	800174a <HAL_DMA_Abort_IT>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d017      	beq.n	800577a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005754:	4610      	mov	r0, r2
 8005756:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005758:	e00f      	b.n	800577a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f9b0 	bl	8005ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005760:	e00b      	b.n	800577a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f9ac 	bl	8005ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005768:	e007      	b.n	800577a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f9a8 	bl	8005ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005778:	e18d      	b.n	8005a96 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800577a:	bf00      	nop
    return;
 800577c:	e18b      	b.n	8005a96 <HAL_UART_IRQHandler+0x5ae>
 800577e:	bf00      	nop
 8005780:	04000120 	.word	0x04000120
 8005784:	08006481 	.word	0x08006481

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800578c:	2b01      	cmp	r3, #1
 800578e:	f040 8146 	bne.w	8005a1e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005796:	f003 0310 	and.w	r3, r3, #16
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 813f 	beq.w	8005a1e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 8138 	beq.w	8005a1e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2210      	movs	r2, #16
 80057b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c0:	2b40      	cmp	r3, #64	; 0x40
 80057c2:	f040 80b4 	bne.w	800592e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 815f 	beq.w	8005a9a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057e6:	429a      	cmp	r2, r3
 80057e8:	f080 8157 	bcs.w	8005a9a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b00      	cmp	r3, #0
 8005804:	f040 8085 	bne.w	8005912 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005810:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005814:	e853 3f00 	ldrex	r3, [r3]
 8005818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800581c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005824:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	461a      	mov	r2, r3
 800582e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005832:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005836:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800583e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800584a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1da      	bne.n	8005808 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3308      	adds	r3, #8
 8005858:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800585c:	e853 3f00 	ldrex	r3, [r3]
 8005860:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005864:	f023 0301 	bic.w	r3, r3, #1
 8005868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3308      	adds	r3, #8
 8005872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005876:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800587a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800587e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e1      	bne.n	8005852 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3308      	adds	r3, #8
 8005894:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800589e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3308      	adds	r3, #8
 80058ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e3      	bne.n	800588e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2220      	movs	r2, #32
 80058ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e2:	f023 0310 	bic.w	r3, r3, #16
 80058e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80058f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058fc:	e841 2300 	strex	r3, r2, [r1]
 8005900:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e4      	bne.n	80058d2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590c:	4618      	mov	r0, r3
 800590e:	f7fb fede 	bl	80016ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800591e:	b29b      	uxth	r3, r3
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	b29b      	uxth	r3, r3
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f8d4 	bl	8005ad4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800592c:	e0b5      	b.n	8005a9a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800593a:	b29b      	uxth	r3, r3
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 80a7 	beq.w	8005a9e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005950:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 80a2 	beq.w	8005a9e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800596e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800597c:	647b      	str	r3, [r7, #68]	; 0x44
 800597e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800598a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e4      	bne.n	800595a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3308      	adds	r3, #8
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	e853 3f00 	ldrex	r3, [r3]
 800599e:	623b      	str	r3, [r7, #32]
   return(result);
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	f023 0301 	bic.w	r3, r3, #1
 80059a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3308      	adds	r3, #8
 80059b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059b4:	633a      	str	r2, [r7, #48]	; 0x30
 80059b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e3      	bne.n	8005990 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2220      	movs	r2, #32
 80059cc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0310 	bic.w	r3, r3, #16
 80059ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80059fc:	61fb      	str	r3, [r7, #28]
 80059fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	69b9      	ldr	r1, [r7, #24]
 8005a02:	69fa      	ldr	r2, [r7, #28]
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	617b      	str	r3, [r7, #20]
   return(result);
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e4      	bne.n	80059da <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a14:	4619      	mov	r1, r3
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f85c 	bl	8005ad4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a1c:	e03f      	b.n	8005a9e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00e      	beq.n	8005a48 <HAL_UART_IRQHandler+0x560>
 8005a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d008      	beq.n	8005a48 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fd5d 	bl	8006500 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a46:	e02d      	b.n	8005aa4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00e      	beq.n	8005a72 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d008      	beq.n	8005a72 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d01c      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	4798      	blx	r3
    }
    return;
 8005a70:	e017      	b.n	8005aa2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d012      	beq.n	8005aa4 <HAL_UART_IRQHandler+0x5bc>
 8005a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00c      	beq.n	8005aa4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fd0e 	bl	80064ac <UART_EndTransmit_IT>
    return;
 8005a90:	e008      	b.n	8005aa4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005a92:	bf00      	nop
 8005a94:	e006      	b.n	8005aa4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005a96:	bf00      	nop
 8005a98:	e004      	b.n	8005aa4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005a9a:	bf00      	nop
 8005a9c:	e002      	b.n	8005aa4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005a9e:	bf00      	nop
 8005aa0:	e000      	b.n	8005aa4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005aa2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005aa4:	37e8      	adds	r7, #232	; 0xe8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop

08005aac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	460b      	mov	r3, r1
 8005ade:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005af0:	b08a      	sub	sp, #40	; 0x28
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	431a      	orrs	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	4ba4      	ldr	r3, [pc, #656]	; (8005dac <UART_SetConfig+0x2c0>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	6812      	ldr	r2, [r2, #0]
 8005b22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b24:	430b      	orrs	r3, r1
 8005b26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a99      	ldr	r2, [pc, #612]	; (8005db0 <UART_SetConfig+0x2c4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d004      	beq.n	8005b58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b54:	4313      	orrs	r3, r2
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a90      	ldr	r2, [pc, #576]	; (8005db4 <UART_SetConfig+0x2c8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d126      	bne.n	8005bc4 <UART_SetConfig+0xd8>
 8005b76:	4b90      	ldr	r3, [pc, #576]	; (8005db8 <UART_SetConfig+0x2cc>)
 8005b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7c:	f003 0303 	and.w	r3, r3, #3
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	d81b      	bhi.n	8005bbc <UART_SetConfig+0xd0>
 8005b84:	a201      	add	r2, pc, #4	; (adr r2, 8005b8c <UART_SetConfig+0xa0>)
 8005b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8a:	bf00      	nop
 8005b8c:	08005b9d 	.word	0x08005b9d
 8005b90:	08005bad 	.word	0x08005bad
 8005b94:	08005ba5 	.word	0x08005ba5
 8005b98:	08005bb5 	.word	0x08005bb5
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ba2:	e116      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005baa:	e112      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005bac:	2304      	movs	r3, #4
 8005bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bb2:	e10e      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005bb4:	2308      	movs	r3, #8
 8005bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bba:	e10a      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005bbc:	2310      	movs	r3, #16
 8005bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bc2:	e106      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a7c      	ldr	r2, [pc, #496]	; (8005dbc <UART_SetConfig+0x2d0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d138      	bne.n	8005c40 <UART_SetConfig+0x154>
 8005bce:	4b7a      	ldr	r3, [pc, #488]	; (8005db8 <UART_SetConfig+0x2cc>)
 8005bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd4:	f003 030c 	and.w	r3, r3, #12
 8005bd8:	2b0c      	cmp	r3, #12
 8005bda:	d82d      	bhi.n	8005c38 <UART_SetConfig+0x14c>
 8005bdc:	a201      	add	r2, pc, #4	; (adr r2, 8005be4 <UART_SetConfig+0xf8>)
 8005bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be2:	bf00      	nop
 8005be4:	08005c19 	.word	0x08005c19
 8005be8:	08005c39 	.word	0x08005c39
 8005bec:	08005c39 	.word	0x08005c39
 8005bf0:	08005c39 	.word	0x08005c39
 8005bf4:	08005c29 	.word	0x08005c29
 8005bf8:	08005c39 	.word	0x08005c39
 8005bfc:	08005c39 	.word	0x08005c39
 8005c00:	08005c39 	.word	0x08005c39
 8005c04:	08005c21 	.word	0x08005c21
 8005c08:	08005c39 	.word	0x08005c39
 8005c0c:	08005c39 	.word	0x08005c39
 8005c10:	08005c39 	.word	0x08005c39
 8005c14:	08005c31 	.word	0x08005c31
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c1e:	e0d8      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005c20:	2302      	movs	r3, #2
 8005c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c26:	e0d4      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005c28:	2304      	movs	r3, #4
 8005c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c2e:	e0d0      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005c30:	2308      	movs	r3, #8
 8005c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c36:	e0cc      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005c38:	2310      	movs	r3, #16
 8005c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c3e:	e0c8      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a5e      	ldr	r2, [pc, #376]	; (8005dc0 <UART_SetConfig+0x2d4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d125      	bne.n	8005c96 <UART_SetConfig+0x1aa>
 8005c4a:	4b5b      	ldr	r3, [pc, #364]	; (8005db8 <UART_SetConfig+0x2cc>)
 8005c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c54:	2b30      	cmp	r3, #48	; 0x30
 8005c56:	d016      	beq.n	8005c86 <UART_SetConfig+0x19a>
 8005c58:	2b30      	cmp	r3, #48	; 0x30
 8005c5a:	d818      	bhi.n	8005c8e <UART_SetConfig+0x1a2>
 8005c5c:	2b20      	cmp	r3, #32
 8005c5e:	d00a      	beq.n	8005c76 <UART_SetConfig+0x18a>
 8005c60:	2b20      	cmp	r3, #32
 8005c62:	d814      	bhi.n	8005c8e <UART_SetConfig+0x1a2>
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <UART_SetConfig+0x182>
 8005c68:	2b10      	cmp	r3, #16
 8005c6a:	d008      	beq.n	8005c7e <UART_SetConfig+0x192>
 8005c6c:	e00f      	b.n	8005c8e <UART_SetConfig+0x1a2>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c74:	e0ad      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005c76:	2302      	movs	r3, #2
 8005c78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c7c:	e0a9      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005c7e:	2304      	movs	r3, #4
 8005c80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c84:	e0a5      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005c86:	2308      	movs	r3, #8
 8005c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c8c:	e0a1      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005c8e:	2310      	movs	r3, #16
 8005c90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c94:	e09d      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a4a      	ldr	r2, [pc, #296]	; (8005dc4 <UART_SetConfig+0x2d8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d125      	bne.n	8005cec <UART_SetConfig+0x200>
 8005ca0:	4b45      	ldr	r3, [pc, #276]	; (8005db8 <UART_SetConfig+0x2cc>)
 8005ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005caa:	2bc0      	cmp	r3, #192	; 0xc0
 8005cac:	d016      	beq.n	8005cdc <UART_SetConfig+0x1f0>
 8005cae:	2bc0      	cmp	r3, #192	; 0xc0
 8005cb0:	d818      	bhi.n	8005ce4 <UART_SetConfig+0x1f8>
 8005cb2:	2b80      	cmp	r3, #128	; 0x80
 8005cb4:	d00a      	beq.n	8005ccc <UART_SetConfig+0x1e0>
 8005cb6:	2b80      	cmp	r3, #128	; 0x80
 8005cb8:	d814      	bhi.n	8005ce4 <UART_SetConfig+0x1f8>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <UART_SetConfig+0x1d8>
 8005cbe:	2b40      	cmp	r3, #64	; 0x40
 8005cc0:	d008      	beq.n	8005cd4 <UART_SetConfig+0x1e8>
 8005cc2:	e00f      	b.n	8005ce4 <UART_SetConfig+0x1f8>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cca:	e082      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cd2:	e07e      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cda:	e07a      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005cdc:	2308      	movs	r3, #8
 8005cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ce2:	e076      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005ce4:	2310      	movs	r3, #16
 8005ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cea:	e072      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a35      	ldr	r2, [pc, #212]	; (8005dc8 <UART_SetConfig+0x2dc>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d12a      	bne.n	8005d4c <UART_SetConfig+0x260>
 8005cf6:	4b30      	ldr	r3, [pc, #192]	; (8005db8 <UART_SetConfig+0x2cc>)
 8005cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d04:	d01a      	beq.n	8005d3c <UART_SetConfig+0x250>
 8005d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d0a:	d81b      	bhi.n	8005d44 <UART_SetConfig+0x258>
 8005d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d10:	d00c      	beq.n	8005d2c <UART_SetConfig+0x240>
 8005d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d16:	d815      	bhi.n	8005d44 <UART_SetConfig+0x258>
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <UART_SetConfig+0x238>
 8005d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d20:	d008      	beq.n	8005d34 <UART_SetConfig+0x248>
 8005d22:	e00f      	b.n	8005d44 <UART_SetConfig+0x258>
 8005d24:	2300      	movs	r3, #0
 8005d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d2a:	e052      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d32:	e04e      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005d34:	2304      	movs	r3, #4
 8005d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d3a:	e04a      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005d3c:	2308      	movs	r3, #8
 8005d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d42:	e046      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005d44:	2310      	movs	r3, #16
 8005d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d4a:	e042      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a17      	ldr	r2, [pc, #92]	; (8005db0 <UART_SetConfig+0x2c4>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d13a      	bne.n	8005dcc <UART_SetConfig+0x2e0>
 8005d56:	4b18      	ldr	r3, [pc, #96]	; (8005db8 <UART_SetConfig+0x2cc>)
 8005d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d64:	d01a      	beq.n	8005d9c <UART_SetConfig+0x2b0>
 8005d66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d6a:	d81b      	bhi.n	8005da4 <UART_SetConfig+0x2b8>
 8005d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d70:	d00c      	beq.n	8005d8c <UART_SetConfig+0x2a0>
 8005d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d76:	d815      	bhi.n	8005da4 <UART_SetConfig+0x2b8>
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <UART_SetConfig+0x298>
 8005d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d80:	d008      	beq.n	8005d94 <UART_SetConfig+0x2a8>
 8005d82:	e00f      	b.n	8005da4 <UART_SetConfig+0x2b8>
 8005d84:	2300      	movs	r3, #0
 8005d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d8a:	e022      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d92:	e01e      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005d94:	2304      	movs	r3, #4
 8005d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d9a:	e01a      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005d9c:	2308      	movs	r3, #8
 8005d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005da2:	e016      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005da4:	2310      	movs	r3, #16
 8005da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005daa:	e012      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005dac:	efff69f3 	.word	0xefff69f3
 8005db0:	40008000 	.word	0x40008000
 8005db4:	40013800 	.word	0x40013800
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	40004400 	.word	0x40004400
 8005dc0:	40004800 	.word	0x40004800
 8005dc4:	40004c00 	.word	0x40004c00
 8005dc8:	40005000 	.word	0x40005000
 8005dcc:	2310      	movs	r3, #16
 8005dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a9f      	ldr	r2, [pc, #636]	; (8006054 <UART_SetConfig+0x568>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d17a      	bne.n	8005ed2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ddc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d824      	bhi.n	8005e2e <UART_SetConfig+0x342>
 8005de4:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <UART_SetConfig+0x300>)
 8005de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dea:	bf00      	nop
 8005dec:	08005e11 	.word	0x08005e11
 8005df0:	08005e2f 	.word	0x08005e2f
 8005df4:	08005e19 	.word	0x08005e19
 8005df8:	08005e2f 	.word	0x08005e2f
 8005dfc:	08005e1f 	.word	0x08005e1f
 8005e00:	08005e2f 	.word	0x08005e2f
 8005e04:	08005e2f 	.word	0x08005e2f
 8005e08:	08005e2f 	.word	0x08005e2f
 8005e0c:	08005e27 	.word	0x08005e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e10:	f7fd fa8a 	bl	8003328 <HAL_RCC_GetPCLK1Freq>
 8005e14:	61f8      	str	r0, [r7, #28]
        break;
 8005e16:	e010      	b.n	8005e3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e18:	4b8f      	ldr	r3, [pc, #572]	; (8006058 <UART_SetConfig+0x56c>)
 8005e1a:	61fb      	str	r3, [r7, #28]
        break;
 8005e1c:	e00d      	b.n	8005e3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e1e:	f7fd f9eb 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 8005e22:	61f8      	str	r0, [r7, #28]
        break;
 8005e24:	e009      	b.n	8005e3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e2a:	61fb      	str	r3, [r7, #28]
        break;
 8005e2c:	e005      	b.n	8005e3a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 80fb 	beq.w	8006038 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	4413      	add	r3, r2
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d305      	bcc.n	8005e5e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d903      	bls.n	8005e66 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e64:	e0e8      	b.n	8006038 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	461c      	mov	r4, r3
 8005e6c:	4615      	mov	r5, r2
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	f04f 0300 	mov.w	r3, #0
 8005e76:	022b      	lsls	r3, r5, #8
 8005e78:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005e7c:	0222      	lsls	r2, r4, #8
 8005e7e:	68f9      	ldr	r1, [r7, #12]
 8005e80:	6849      	ldr	r1, [r1, #4]
 8005e82:	0849      	lsrs	r1, r1, #1
 8005e84:	2000      	movs	r0, #0
 8005e86:	4688      	mov	r8, r1
 8005e88:	4681      	mov	r9, r0
 8005e8a:	eb12 0a08 	adds.w	sl, r2, r8
 8005e8e:	eb43 0b09 	adc.w	fp, r3, r9
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	603b      	str	r3, [r7, #0]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ea0:	4650      	mov	r0, sl
 8005ea2:	4659      	mov	r1, fp
 8005ea4:	f7fa f9fc 	bl	80002a0 <__aeabi_uldivmod>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4613      	mov	r3, r2
 8005eae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eb6:	d308      	bcc.n	8005eca <UART_SetConfig+0x3de>
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ebe:	d204      	bcs.n	8005eca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	60da      	str	r2, [r3, #12]
 8005ec8:	e0b6      	b.n	8006038 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ed0:	e0b2      	b.n	8006038 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eda:	d15e      	bne.n	8005f9a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005edc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d828      	bhi.n	8005f36 <UART_SetConfig+0x44a>
 8005ee4:	a201      	add	r2, pc, #4	; (adr r2, 8005eec <UART_SetConfig+0x400>)
 8005ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eea:	bf00      	nop
 8005eec:	08005f11 	.word	0x08005f11
 8005ef0:	08005f19 	.word	0x08005f19
 8005ef4:	08005f21 	.word	0x08005f21
 8005ef8:	08005f37 	.word	0x08005f37
 8005efc:	08005f27 	.word	0x08005f27
 8005f00:	08005f37 	.word	0x08005f37
 8005f04:	08005f37 	.word	0x08005f37
 8005f08:	08005f37 	.word	0x08005f37
 8005f0c:	08005f2f 	.word	0x08005f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f10:	f7fd fa0a 	bl	8003328 <HAL_RCC_GetPCLK1Freq>
 8005f14:	61f8      	str	r0, [r7, #28]
        break;
 8005f16:	e014      	b.n	8005f42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f18:	f7fd fa1c 	bl	8003354 <HAL_RCC_GetPCLK2Freq>
 8005f1c:	61f8      	str	r0, [r7, #28]
        break;
 8005f1e:	e010      	b.n	8005f42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f20:	4b4d      	ldr	r3, [pc, #308]	; (8006058 <UART_SetConfig+0x56c>)
 8005f22:	61fb      	str	r3, [r7, #28]
        break;
 8005f24:	e00d      	b.n	8005f42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f26:	f7fd f967 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 8005f2a:	61f8      	str	r0, [r7, #28]
        break;
 8005f2c:	e009      	b.n	8005f42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f32:	61fb      	str	r3, [r7, #28]
        break;
 8005f34:	e005      	b.n	8005f42 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d077      	beq.n	8006038 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	005a      	lsls	r2, r3, #1
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	085b      	lsrs	r3, r3, #1
 8005f52:	441a      	add	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	2b0f      	cmp	r3, #15
 8005f62:	d916      	bls.n	8005f92 <UART_SetConfig+0x4a6>
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f6a:	d212      	bcs.n	8005f92 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	f023 030f 	bic.w	r3, r3, #15
 8005f74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	085b      	lsrs	r3, r3, #1
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	8afb      	ldrh	r3, [r7, #22]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	8afa      	ldrh	r2, [r7, #22]
 8005f8e:	60da      	str	r2, [r3, #12]
 8005f90:	e052      	b.n	8006038 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f98:	e04e      	b.n	8006038 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	d827      	bhi.n	8005ff2 <UART_SetConfig+0x506>
 8005fa2:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <UART_SetConfig+0x4bc>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005fd5 	.word	0x08005fd5
 8005fb0:	08005fdd 	.word	0x08005fdd
 8005fb4:	08005ff3 	.word	0x08005ff3
 8005fb8:	08005fe3 	.word	0x08005fe3
 8005fbc:	08005ff3 	.word	0x08005ff3
 8005fc0:	08005ff3 	.word	0x08005ff3
 8005fc4:	08005ff3 	.word	0x08005ff3
 8005fc8:	08005feb 	.word	0x08005feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f7fd f9ac 	bl	8003328 <HAL_RCC_GetPCLK1Freq>
 8005fd0:	61f8      	str	r0, [r7, #28]
        break;
 8005fd2:	e014      	b.n	8005ffe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd4:	f7fd f9be 	bl	8003354 <HAL_RCC_GetPCLK2Freq>
 8005fd8:	61f8      	str	r0, [r7, #28]
        break;
 8005fda:	e010      	b.n	8005ffe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fdc:	4b1e      	ldr	r3, [pc, #120]	; (8006058 <UART_SetConfig+0x56c>)
 8005fde:	61fb      	str	r3, [r7, #28]
        break;
 8005fe0:	e00d      	b.n	8005ffe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fe2:	f7fd f909 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 8005fe6:	61f8      	str	r0, [r7, #28]
        break;
 8005fe8:	e009      	b.n	8005ffe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fee:	61fb      	str	r3, [r7, #28]
        break;
 8005ff0:	e005      	b.n	8005ffe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ffc:	bf00      	nop
    }

    if (pclk != 0U)
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d019      	beq.n	8006038 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	085a      	lsrs	r2, r3, #1
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	441a      	add	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	fbb2 f3f3 	udiv	r3, r2, r3
 8006016:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	2b0f      	cmp	r3, #15
 800601c:	d909      	bls.n	8006032 <UART_SetConfig+0x546>
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006024:	d205      	bcs.n	8006032 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60da      	str	r2, [r3, #12]
 8006030:	e002      	b.n	8006038 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006044:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006048:	4618      	mov	r0, r3
 800604a:	3728      	adds	r7, #40	; 0x28
 800604c:	46bd      	mov	sp, r7
 800604e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006052:	bf00      	nop
 8006054:	40008000 	.word	0x40008000
 8006058:	00f42400 	.word	0x00f42400

0800605c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00a      	beq.n	8006086 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00a      	beq.n	80060ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	f003 0308 	and.w	r3, r3, #8
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	f003 0310 	and.w	r3, r3, #16
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00a      	beq.n	800610e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	430a      	orrs	r2, r1
 800610c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	f003 0320 	and.w	r3, r3, #32
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00a      	beq.n	8006130 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01a      	beq.n	8006172 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800615a:	d10a      	bne.n	8006172 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	605a      	str	r2, [r3, #4]
  }
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af02      	add	r7, sp, #8
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061b0:	f7fb f970 	bl	8001494 <HAL_GetTick>
 80061b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d10e      	bne.n	80061e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f82d 	bl	8006232 <UART_WaitOnFlagUntilTimeout>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e023      	b.n	800622a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d10e      	bne.n	800620e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f817 	bl	8006232 <UART_WaitOnFlagUntilTimeout>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e00d      	b.n	800622a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2220      	movs	r2, #32
 8006212:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2220      	movs	r2, #32
 8006218:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b09c      	sub	sp, #112	; 0x70
 8006236:	af00      	add	r7, sp, #0
 8006238:	60f8      	str	r0, [r7, #12]
 800623a:	60b9      	str	r1, [r7, #8]
 800623c:	603b      	str	r3, [r7, #0]
 800623e:	4613      	mov	r3, r2
 8006240:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006242:	e0a5      	b.n	8006390 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624a:	f000 80a1 	beq.w	8006390 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800624e:	f7fb f921 	bl	8001494 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800625a:	429a      	cmp	r2, r3
 800625c:	d302      	bcc.n	8006264 <UART_WaitOnFlagUntilTimeout+0x32>
 800625e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006260:	2b00      	cmp	r3, #0
 8006262:	d13e      	bne.n	80062e2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006274:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006278:	667b      	str	r3, [r7, #100]	; 0x64
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006282:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006284:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006288:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e6      	bne.n	8006264 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3308      	adds	r3, #8
 800629c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a8:	f023 0301 	bic.w	r3, r3, #1
 80062ac:	663b      	str	r3, [r7, #96]	; 0x60
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3308      	adds	r3, #8
 80062b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80062b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1e5      	bne.n	8006296 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2220      	movs	r2, #32
 80062ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2220      	movs	r2, #32
 80062d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e067      	b.n	80063b2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d04f      	beq.n	8006390 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062fe:	d147      	bne.n	8006390 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006308:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	e853 3f00 	ldrex	r3, [r3]
 8006316:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800631e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	461a      	mov	r2, r3
 8006326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006328:	637b      	str	r3, [r7, #52]	; 0x34
 800632a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800632e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e6      	bne.n	800630a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3308      	adds	r3, #8
 8006342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	e853 3f00 	ldrex	r3, [r3]
 800634a:	613b      	str	r3, [r7, #16]
   return(result);
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f023 0301 	bic.w	r3, r3, #1
 8006352:	66bb      	str	r3, [r7, #104]	; 0x68
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3308      	adds	r3, #8
 800635a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800635c:	623a      	str	r2, [r7, #32]
 800635e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006360:	69f9      	ldr	r1, [r7, #28]
 8006362:	6a3a      	ldr	r2, [r7, #32]
 8006364:	e841 2300 	strex	r3, r2, [r1]
 8006368:	61bb      	str	r3, [r7, #24]
   return(result);
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1e5      	bne.n	800633c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2220      	movs	r2, #32
 8006374:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2220      	movs	r2, #32
 800637a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2220      	movs	r2, #32
 8006380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e010      	b.n	80063b2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	69da      	ldr	r2, [r3, #28]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	4013      	ands	r3, r2
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	429a      	cmp	r2, r3
 800639e:	bf0c      	ite	eq
 80063a0:	2301      	moveq	r3, #1
 80063a2:	2300      	movne	r3, #0
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	461a      	mov	r2, r3
 80063a8:	79fb      	ldrb	r3, [r7, #7]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	f43f af4a 	beq.w	8006244 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3770      	adds	r7, #112	; 0x70
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b095      	sub	sp, #84	; 0x54
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	461a      	mov	r2, r3
 80063de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e0:	643b      	str	r3, [r7, #64]	; 0x40
 80063e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e6      	bne.n	80063c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3308      	adds	r3, #8
 80063fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	61fb      	str	r3, [r7, #28]
   return(result);
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	f023 0301 	bic.w	r3, r3, #1
 800640a:	64bb      	str	r3, [r7, #72]	; 0x48
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3308      	adds	r3, #8
 8006412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006414:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800641a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e5      	bne.n	80063f4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800642c:	2b01      	cmp	r3, #1
 800642e:	d118      	bne.n	8006462 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	60bb      	str	r3, [r7, #8]
   return(result);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f023 0310 	bic.w	r3, r3, #16
 8006444:	647b      	str	r3, [r7, #68]	; 0x44
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800644e:	61bb      	str	r3, [r7, #24]
 8006450:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	6979      	ldr	r1, [r7, #20]
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	613b      	str	r3, [r7, #16]
   return(result);
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e6      	bne.n	8006430 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2220      	movs	r2, #32
 8006466:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006474:	bf00      	nop
 8006476:	3754      	adds	r7, #84	; 0x54
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f7ff fb0e 	bl	8005ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064a4:	bf00      	nop
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c8:	61fb      	str	r3, [r7, #28]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	61bb      	str	r3, [r7, #24]
 80064d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	6979      	ldr	r1, [r7, #20]
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	613b      	str	r3, [r7, #16]
   return(result);
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1e6      	bne.n	80064b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7ff fada 	bl	8005aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064f8:	bf00      	nop
 80064fa:	3720      	adds	r7, #32
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <__errno>:
 8006514:	4b01      	ldr	r3, [pc, #4]	; (800651c <__errno+0x8>)
 8006516:	6818      	ldr	r0, [r3, #0]
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	200000cc 	.word	0x200000cc

08006520 <__libc_init_array>:
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	4d0d      	ldr	r5, [pc, #52]	; (8006558 <__libc_init_array+0x38>)
 8006524:	4c0d      	ldr	r4, [pc, #52]	; (800655c <__libc_init_array+0x3c>)
 8006526:	1b64      	subs	r4, r4, r5
 8006528:	10a4      	asrs	r4, r4, #2
 800652a:	2600      	movs	r6, #0
 800652c:	42a6      	cmp	r6, r4
 800652e:	d109      	bne.n	8006544 <__libc_init_array+0x24>
 8006530:	4d0b      	ldr	r5, [pc, #44]	; (8006560 <__libc_init_array+0x40>)
 8006532:	4c0c      	ldr	r4, [pc, #48]	; (8006564 <__libc_init_array+0x44>)
 8006534:	f001 fa20 	bl	8007978 <_init>
 8006538:	1b64      	subs	r4, r4, r5
 800653a:	10a4      	asrs	r4, r4, #2
 800653c:	2600      	movs	r6, #0
 800653e:	42a6      	cmp	r6, r4
 8006540:	d105      	bne.n	800654e <__libc_init_array+0x2e>
 8006542:	bd70      	pop	{r4, r5, r6, pc}
 8006544:	f855 3b04 	ldr.w	r3, [r5], #4
 8006548:	4798      	blx	r3
 800654a:	3601      	adds	r6, #1
 800654c:	e7ee      	b.n	800652c <__libc_init_array+0xc>
 800654e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006552:	4798      	blx	r3
 8006554:	3601      	adds	r6, #1
 8006556:	e7f2      	b.n	800653e <__libc_init_array+0x1e>
 8006558:	08007c44 	.word	0x08007c44
 800655c:	08007c44 	.word	0x08007c44
 8006560:	08007c44 	.word	0x08007c44
 8006564:	08007c48 	.word	0x08007c48

08006568 <memset>:
 8006568:	4402      	add	r2, r0
 800656a:	4603      	mov	r3, r0
 800656c:	4293      	cmp	r3, r2
 800656e:	d100      	bne.n	8006572 <memset+0xa>
 8006570:	4770      	bx	lr
 8006572:	f803 1b01 	strb.w	r1, [r3], #1
 8006576:	e7f9      	b.n	800656c <memset+0x4>

08006578 <_puts_r>:
 8006578:	b570      	push	{r4, r5, r6, lr}
 800657a:	460e      	mov	r6, r1
 800657c:	4605      	mov	r5, r0
 800657e:	b118      	cbz	r0, 8006588 <_puts_r+0x10>
 8006580:	6983      	ldr	r3, [r0, #24]
 8006582:	b90b      	cbnz	r3, 8006588 <_puts_r+0x10>
 8006584:	f000 fadc 	bl	8006b40 <__sinit>
 8006588:	69ab      	ldr	r3, [r5, #24]
 800658a:	68ac      	ldr	r4, [r5, #8]
 800658c:	b913      	cbnz	r3, 8006594 <_puts_r+0x1c>
 800658e:	4628      	mov	r0, r5
 8006590:	f000 fad6 	bl	8006b40 <__sinit>
 8006594:	4b2c      	ldr	r3, [pc, #176]	; (8006648 <_puts_r+0xd0>)
 8006596:	429c      	cmp	r4, r3
 8006598:	d120      	bne.n	80065dc <_puts_r+0x64>
 800659a:	686c      	ldr	r4, [r5, #4]
 800659c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800659e:	07db      	lsls	r3, r3, #31
 80065a0:	d405      	bmi.n	80065ae <_puts_r+0x36>
 80065a2:	89a3      	ldrh	r3, [r4, #12]
 80065a4:	0598      	lsls	r0, r3, #22
 80065a6:	d402      	bmi.n	80065ae <_puts_r+0x36>
 80065a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065aa:	f000 fb67 	bl	8006c7c <__retarget_lock_acquire_recursive>
 80065ae:	89a3      	ldrh	r3, [r4, #12]
 80065b0:	0719      	lsls	r1, r3, #28
 80065b2:	d51d      	bpl.n	80065f0 <_puts_r+0x78>
 80065b4:	6923      	ldr	r3, [r4, #16]
 80065b6:	b1db      	cbz	r3, 80065f0 <_puts_r+0x78>
 80065b8:	3e01      	subs	r6, #1
 80065ba:	68a3      	ldr	r3, [r4, #8]
 80065bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065c0:	3b01      	subs	r3, #1
 80065c2:	60a3      	str	r3, [r4, #8]
 80065c4:	bb39      	cbnz	r1, 8006616 <_puts_r+0x9e>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	da38      	bge.n	800663c <_puts_r+0xc4>
 80065ca:	4622      	mov	r2, r4
 80065cc:	210a      	movs	r1, #10
 80065ce:	4628      	mov	r0, r5
 80065d0:	f000 f8ba 	bl	8006748 <__swbuf_r>
 80065d4:	3001      	adds	r0, #1
 80065d6:	d011      	beq.n	80065fc <_puts_r+0x84>
 80065d8:	250a      	movs	r5, #10
 80065da:	e011      	b.n	8006600 <_puts_r+0x88>
 80065dc:	4b1b      	ldr	r3, [pc, #108]	; (800664c <_puts_r+0xd4>)
 80065de:	429c      	cmp	r4, r3
 80065e0:	d101      	bne.n	80065e6 <_puts_r+0x6e>
 80065e2:	68ac      	ldr	r4, [r5, #8]
 80065e4:	e7da      	b.n	800659c <_puts_r+0x24>
 80065e6:	4b1a      	ldr	r3, [pc, #104]	; (8006650 <_puts_r+0xd8>)
 80065e8:	429c      	cmp	r4, r3
 80065ea:	bf08      	it	eq
 80065ec:	68ec      	ldreq	r4, [r5, #12]
 80065ee:	e7d5      	b.n	800659c <_puts_r+0x24>
 80065f0:	4621      	mov	r1, r4
 80065f2:	4628      	mov	r0, r5
 80065f4:	f000 f90c 	bl	8006810 <__swsetup_r>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d0dd      	beq.n	80065b8 <_puts_r+0x40>
 80065fc:	f04f 35ff 	mov.w	r5, #4294967295
 8006600:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006602:	07da      	lsls	r2, r3, #31
 8006604:	d405      	bmi.n	8006612 <_puts_r+0x9a>
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	059b      	lsls	r3, r3, #22
 800660a:	d402      	bmi.n	8006612 <_puts_r+0x9a>
 800660c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800660e:	f000 fb36 	bl	8006c7e <__retarget_lock_release_recursive>
 8006612:	4628      	mov	r0, r5
 8006614:	bd70      	pop	{r4, r5, r6, pc}
 8006616:	2b00      	cmp	r3, #0
 8006618:	da04      	bge.n	8006624 <_puts_r+0xac>
 800661a:	69a2      	ldr	r2, [r4, #24]
 800661c:	429a      	cmp	r2, r3
 800661e:	dc06      	bgt.n	800662e <_puts_r+0xb6>
 8006620:	290a      	cmp	r1, #10
 8006622:	d004      	beq.n	800662e <_puts_r+0xb6>
 8006624:	6823      	ldr	r3, [r4, #0]
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	6022      	str	r2, [r4, #0]
 800662a:	7019      	strb	r1, [r3, #0]
 800662c:	e7c5      	b.n	80065ba <_puts_r+0x42>
 800662e:	4622      	mov	r2, r4
 8006630:	4628      	mov	r0, r5
 8006632:	f000 f889 	bl	8006748 <__swbuf_r>
 8006636:	3001      	adds	r0, #1
 8006638:	d1bf      	bne.n	80065ba <_puts_r+0x42>
 800663a:	e7df      	b.n	80065fc <_puts_r+0x84>
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	250a      	movs	r5, #10
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	6022      	str	r2, [r4, #0]
 8006644:	701d      	strb	r5, [r3, #0]
 8006646:	e7db      	b.n	8006600 <_puts_r+0x88>
 8006648:	08007adc 	.word	0x08007adc
 800664c:	08007afc 	.word	0x08007afc
 8006650:	08007abc 	.word	0x08007abc

08006654 <puts>:
 8006654:	4b02      	ldr	r3, [pc, #8]	; (8006660 <puts+0xc>)
 8006656:	4601      	mov	r1, r0
 8006658:	6818      	ldr	r0, [r3, #0]
 800665a:	f7ff bf8d 	b.w	8006578 <_puts_r>
 800665e:	bf00      	nop
 8006660:	200000cc 	.word	0x200000cc

08006664 <siscanf>:
 8006664:	b40e      	push	{r1, r2, r3}
 8006666:	b510      	push	{r4, lr}
 8006668:	b09f      	sub	sp, #124	; 0x7c
 800666a:	ac21      	add	r4, sp, #132	; 0x84
 800666c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006670:	f854 2b04 	ldr.w	r2, [r4], #4
 8006674:	9201      	str	r2, [sp, #4]
 8006676:	f8ad 101c 	strh.w	r1, [sp, #28]
 800667a:	9004      	str	r0, [sp, #16]
 800667c:	9008      	str	r0, [sp, #32]
 800667e:	f7f9 fdb1 	bl	80001e4 <strlen>
 8006682:	4b0c      	ldr	r3, [pc, #48]	; (80066b4 <siscanf+0x50>)
 8006684:	9005      	str	r0, [sp, #20]
 8006686:	9009      	str	r0, [sp, #36]	; 0x24
 8006688:	930d      	str	r3, [sp, #52]	; 0x34
 800668a:	480b      	ldr	r0, [pc, #44]	; (80066b8 <siscanf+0x54>)
 800668c:	9a01      	ldr	r2, [sp, #4]
 800668e:	6800      	ldr	r0, [r0, #0]
 8006690:	9403      	str	r4, [sp, #12]
 8006692:	2300      	movs	r3, #0
 8006694:	9311      	str	r3, [sp, #68]	; 0x44
 8006696:	9316      	str	r3, [sp, #88]	; 0x58
 8006698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800669c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80066a0:	a904      	add	r1, sp, #16
 80066a2:	4623      	mov	r3, r4
 80066a4:	f000 fc9e 	bl	8006fe4 <__ssvfiscanf_r>
 80066a8:	b01f      	add	sp, #124	; 0x7c
 80066aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066ae:	b003      	add	sp, #12
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	080066df 	.word	0x080066df
 80066b8:	200000cc 	.word	0x200000cc

080066bc <__sread>:
 80066bc:	b510      	push	{r4, lr}
 80066be:	460c      	mov	r4, r1
 80066c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c4:	f000 ff58 	bl	8007578 <_read_r>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	bfab      	itete	ge
 80066cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066ce:	89a3      	ldrhlt	r3, [r4, #12]
 80066d0:	181b      	addge	r3, r3, r0
 80066d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066d6:	bfac      	ite	ge
 80066d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80066da:	81a3      	strhlt	r3, [r4, #12]
 80066dc:	bd10      	pop	{r4, pc}

080066de <__seofread>:
 80066de:	2000      	movs	r0, #0
 80066e0:	4770      	bx	lr

080066e2 <__swrite>:
 80066e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066e6:	461f      	mov	r7, r3
 80066e8:	898b      	ldrh	r3, [r1, #12]
 80066ea:	05db      	lsls	r3, r3, #23
 80066ec:	4605      	mov	r5, r0
 80066ee:	460c      	mov	r4, r1
 80066f0:	4616      	mov	r6, r2
 80066f2:	d505      	bpl.n	8006700 <__swrite+0x1e>
 80066f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066f8:	2302      	movs	r3, #2
 80066fa:	2200      	movs	r2, #0
 80066fc:	f000 fac0 	bl	8006c80 <_lseek_r>
 8006700:	89a3      	ldrh	r3, [r4, #12]
 8006702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800670a:	81a3      	strh	r3, [r4, #12]
 800670c:	4632      	mov	r2, r6
 800670e:	463b      	mov	r3, r7
 8006710:	4628      	mov	r0, r5
 8006712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006716:	f000 b869 	b.w	80067ec <_write_r>

0800671a <__sseek>:
 800671a:	b510      	push	{r4, lr}
 800671c:	460c      	mov	r4, r1
 800671e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006722:	f000 faad 	bl	8006c80 <_lseek_r>
 8006726:	1c43      	adds	r3, r0, #1
 8006728:	89a3      	ldrh	r3, [r4, #12]
 800672a:	bf15      	itete	ne
 800672c:	6560      	strne	r0, [r4, #84]	; 0x54
 800672e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006732:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006736:	81a3      	strheq	r3, [r4, #12]
 8006738:	bf18      	it	ne
 800673a:	81a3      	strhne	r3, [r4, #12]
 800673c:	bd10      	pop	{r4, pc}

0800673e <__sclose>:
 800673e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006742:	f000 b8d3 	b.w	80068ec <_close_r>
	...

08006748 <__swbuf_r>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	460e      	mov	r6, r1
 800674c:	4614      	mov	r4, r2
 800674e:	4605      	mov	r5, r0
 8006750:	b118      	cbz	r0, 800675a <__swbuf_r+0x12>
 8006752:	6983      	ldr	r3, [r0, #24]
 8006754:	b90b      	cbnz	r3, 800675a <__swbuf_r+0x12>
 8006756:	f000 f9f3 	bl	8006b40 <__sinit>
 800675a:	4b21      	ldr	r3, [pc, #132]	; (80067e0 <__swbuf_r+0x98>)
 800675c:	429c      	cmp	r4, r3
 800675e:	d12b      	bne.n	80067b8 <__swbuf_r+0x70>
 8006760:	686c      	ldr	r4, [r5, #4]
 8006762:	69a3      	ldr	r3, [r4, #24]
 8006764:	60a3      	str	r3, [r4, #8]
 8006766:	89a3      	ldrh	r3, [r4, #12]
 8006768:	071a      	lsls	r2, r3, #28
 800676a:	d52f      	bpl.n	80067cc <__swbuf_r+0x84>
 800676c:	6923      	ldr	r3, [r4, #16]
 800676e:	b36b      	cbz	r3, 80067cc <__swbuf_r+0x84>
 8006770:	6923      	ldr	r3, [r4, #16]
 8006772:	6820      	ldr	r0, [r4, #0]
 8006774:	1ac0      	subs	r0, r0, r3
 8006776:	6963      	ldr	r3, [r4, #20]
 8006778:	b2f6      	uxtb	r6, r6
 800677a:	4283      	cmp	r3, r0
 800677c:	4637      	mov	r7, r6
 800677e:	dc04      	bgt.n	800678a <__swbuf_r+0x42>
 8006780:	4621      	mov	r1, r4
 8006782:	4628      	mov	r0, r5
 8006784:	f000 f948 	bl	8006a18 <_fflush_r>
 8006788:	bb30      	cbnz	r0, 80067d8 <__swbuf_r+0x90>
 800678a:	68a3      	ldr	r3, [r4, #8]
 800678c:	3b01      	subs	r3, #1
 800678e:	60a3      	str	r3, [r4, #8]
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	6022      	str	r2, [r4, #0]
 8006796:	701e      	strb	r6, [r3, #0]
 8006798:	6963      	ldr	r3, [r4, #20]
 800679a:	3001      	adds	r0, #1
 800679c:	4283      	cmp	r3, r0
 800679e:	d004      	beq.n	80067aa <__swbuf_r+0x62>
 80067a0:	89a3      	ldrh	r3, [r4, #12]
 80067a2:	07db      	lsls	r3, r3, #31
 80067a4:	d506      	bpl.n	80067b4 <__swbuf_r+0x6c>
 80067a6:	2e0a      	cmp	r6, #10
 80067a8:	d104      	bne.n	80067b4 <__swbuf_r+0x6c>
 80067aa:	4621      	mov	r1, r4
 80067ac:	4628      	mov	r0, r5
 80067ae:	f000 f933 	bl	8006a18 <_fflush_r>
 80067b2:	b988      	cbnz	r0, 80067d8 <__swbuf_r+0x90>
 80067b4:	4638      	mov	r0, r7
 80067b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b8:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <__swbuf_r+0x9c>)
 80067ba:	429c      	cmp	r4, r3
 80067bc:	d101      	bne.n	80067c2 <__swbuf_r+0x7a>
 80067be:	68ac      	ldr	r4, [r5, #8]
 80067c0:	e7cf      	b.n	8006762 <__swbuf_r+0x1a>
 80067c2:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <__swbuf_r+0xa0>)
 80067c4:	429c      	cmp	r4, r3
 80067c6:	bf08      	it	eq
 80067c8:	68ec      	ldreq	r4, [r5, #12]
 80067ca:	e7ca      	b.n	8006762 <__swbuf_r+0x1a>
 80067cc:	4621      	mov	r1, r4
 80067ce:	4628      	mov	r0, r5
 80067d0:	f000 f81e 	bl	8006810 <__swsetup_r>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d0cb      	beq.n	8006770 <__swbuf_r+0x28>
 80067d8:	f04f 37ff 	mov.w	r7, #4294967295
 80067dc:	e7ea      	b.n	80067b4 <__swbuf_r+0x6c>
 80067de:	bf00      	nop
 80067e0:	08007adc 	.word	0x08007adc
 80067e4:	08007afc 	.word	0x08007afc
 80067e8:	08007abc 	.word	0x08007abc

080067ec <_write_r>:
 80067ec:	b538      	push	{r3, r4, r5, lr}
 80067ee:	4d07      	ldr	r5, [pc, #28]	; (800680c <_write_r+0x20>)
 80067f0:	4604      	mov	r4, r0
 80067f2:	4608      	mov	r0, r1
 80067f4:	4611      	mov	r1, r2
 80067f6:	2200      	movs	r2, #0
 80067f8:	602a      	str	r2, [r5, #0]
 80067fa:	461a      	mov	r2, r3
 80067fc:	f7fa f8f6 	bl	80009ec <_write>
 8006800:	1c43      	adds	r3, r0, #1
 8006802:	d102      	bne.n	800680a <_write_r+0x1e>
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	b103      	cbz	r3, 800680a <_write_r+0x1e>
 8006808:	6023      	str	r3, [r4, #0]
 800680a:	bd38      	pop	{r3, r4, r5, pc}
 800680c:	20000364 	.word	0x20000364

08006810 <__swsetup_r>:
 8006810:	4b32      	ldr	r3, [pc, #200]	; (80068dc <__swsetup_r+0xcc>)
 8006812:	b570      	push	{r4, r5, r6, lr}
 8006814:	681d      	ldr	r5, [r3, #0]
 8006816:	4606      	mov	r6, r0
 8006818:	460c      	mov	r4, r1
 800681a:	b125      	cbz	r5, 8006826 <__swsetup_r+0x16>
 800681c:	69ab      	ldr	r3, [r5, #24]
 800681e:	b913      	cbnz	r3, 8006826 <__swsetup_r+0x16>
 8006820:	4628      	mov	r0, r5
 8006822:	f000 f98d 	bl	8006b40 <__sinit>
 8006826:	4b2e      	ldr	r3, [pc, #184]	; (80068e0 <__swsetup_r+0xd0>)
 8006828:	429c      	cmp	r4, r3
 800682a:	d10f      	bne.n	800684c <__swsetup_r+0x3c>
 800682c:	686c      	ldr	r4, [r5, #4]
 800682e:	89a3      	ldrh	r3, [r4, #12]
 8006830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006834:	0719      	lsls	r1, r3, #28
 8006836:	d42c      	bmi.n	8006892 <__swsetup_r+0x82>
 8006838:	06dd      	lsls	r5, r3, #27
 800683a:	d411      	bmi.n	8006860 <__swsetup_r+0x50>
 800683c:	2309      	movs	r3, #9
 800683e:	6033      	str	r3, [r6, #0]
 8006840:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006844:	81a3      	strh	r3, [r4, #12]
 8006846:	f04f 30ff 	mov.w	r0, #4294967295
 800684a:	e03e      	b.n	80068ca <__swsetup_r+0xba>
 800684c:	4b25      	ldr	r3, [pc, #148]	; (80068e4 <__swsetup_r+0xd4>)
 800684e:	429c      	cmp	r4, r3
 8006850:	d101      	bne.n	8006856 <__swsetup_r+0x46>
 8006852:	68ac      	ldr	r4, [r5, #8]
 8006854:	e7eb      	b.n	800682e <__swsetup_r+0x1e>
 8006856:	4b24      	ldr	r3, [pc, #144]	; (80068e8 <__swsetup_r+0xd8>)
 8006858:	429c      	cmp	r4, r3
 800685a:	bf08      	it	eq
 800685c:	68ec      	ldreq	r4, [r5, #12]
 800685e:	e7e6      	b.n	800682e <__swsetup_r+0x1e>
 8006860:	0758      	lsls	r0, r3, #29
 8006862:	d512      	bpl.n	800688a <__swsetup_r+0x7a>
 8006864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006866:	b141      	cbz	r1, 800687a <__swsetup_r+0x6a>
 8006868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800686c:	4299      	cmp	r1, r3
 800686e:	d002      	beq.n	8006876 <__swsetup_r+0x66>
 8006870:	4630      	mov	r0, r6
 8006872:	f000 fa7d 	bl	8006d70 <_free_r>
 8006876:	2300      	movs	r3, #0
 8006878:	6363      	str	r3, [r4, #52]	; 0x34
 800687a:	89a3      	ldrh	r3, [r4, #12]
 800687c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006880:	81a3      	strh	r3, [r4, #12]
 8006882:	2300      	movs	r3, #0
 8006884:	6063      	str	r3, [r4, #4]
 8006886:	6923      	ldr	r3, [r4, #16]
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	89a3      	ldrh	r3, [r4, #12]
 800688c:	f043 0308 	orr.w	r3, r3, #8
 8006890:	81a3      	strh	r3, [r4, #12]
 8006892:	6923      	ldr	r3, [r4, #16]
 8006894:	b94b      	cbnz	r3, 80068aa <__swsetup_r+0x9a>
 8006896:	89a3      	ldrh	r3, [r4, #12]
 8006898:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800689c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068a0:	d003      	beq.n	80068aa <__swsetup_r+0x9a>
 80068a2:	4621      	mov	r1, r4
 80068a4:	4630      	mov	r0, r6
 80068a6:	f000 fa23 	bl	8006cf0 <__smakebuf_r>
 80068aa:	89a0      	ldrh	r0, [r4, #12]
 80068ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068b0:	f010 0301 	ands.w	r3, r0, #1
 80068b4:	d00a      	beq.n	80068cc <__swsetup_r+0xbc>
 80068b6:	2300      	movs	r3, #0
 80068b8:	60a3      	str	r3, [r4, #8]
 80068ba:	6963      	ldr	r3, [r4, #20]
 80068bc:	425b      	negs	r3, r3
 80068be:	61a3      	str	r3, [r4, #24]
 80068c0:	6923      	ldr	r3, [r4, #16]
 80068c2:	b943      	cbnz	r3, 80068d6 <__swsetup_r+0xc6>
 80068c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068c8:	d1ba      	bne.n	8006840 <__swsetup_r+0x30>
 80068ca:	bd70      	pop	{r4, r5, r6, pc}
 80068cc:	0781      	lsls	r1, r0, #30
 80068ce:	bf58      	it	pl
 80068d0:	6963      	ldrpl	r3, [r4, #20]
 80068d2:	60a3      	str	r3, [r4, #8]
 80068d4:	e7f4      	b.n	80068c0 <__swsetup_r+0xb0>
 80068d6:	2000      	movs	r0, #0
 80068d8:	e7f7      	b.n	80068ca <__swsetup_r+0xba>
 80068da:	bf00      	nop
 80068dc:	200000cc 	.word	0x200000cc
 80068e0:	08007adc 	.word	0x08007adc
 80068e4:	08007afc 	.word	0x08007afc
 80068e8:	08007abc 	.word	0x08007abc

080068ec <_close_r>:
 80068ec:	b538      	push	{r3, r4, r5, lr}
 80068ee:	4d06      	ldr	r5, [pc, #24]	; (8006908 <_close_r+0x1c>)
 80068f0:	2300      	movs	r3, #0
 80068f2:	4604      	mov	r4, r0
 80068f4:	4608      	mov	r0, r1
 80068f6:	602b      	str	r3, [r5, #0]
 80068f8:	f7fa fcb5 	bl	8001266 <_close>
 80068fc:	1c43      	adds	r3, r0, #1
 80068fe:	d102      	bne.n	8006906 <_close_r+0x1a>
 8006900:	682b      	ldr	r3, [r5, #0]
 8006902:	b103      	cbz	r3, 8006906 <_close_r+0x1a>
 8006904:	6023      	str	r3, [r4, #0]
 8006906:	bd38      	pop	{r3, r4, r5, pc}
 8006908:	20000364 	.word	0x20000364

0800690c <__sflush_r>:
 800690c:	898a      	ldrh	r2, [r1, #12]
 800690e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006912:	4605      	mov	r5, r0
 8006914:	0710      	lsls	r0, r2, #28
 8006916:	460c      	mov	r4, r1
 8006918:	d458      	bmi.n	80069cc <__sflush_r+0xc0>
 800691a:	684b      	ldr	r3, [r1, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	dc05      	bgt.n	800692c <__sflush_r+0x20>
 8006920:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006922:	2b00      	cmp	r3, #0
 8006924:	dc02      	bgt.n	800692c <__sflush_r+0x20>
 8006926:	2000      	movs	r0, #0
 8006928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800692c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800692e:	2e00      	cmp	r6, #0
 8006930:	d0f9      	beq.n	8006926 <__sflush_r+0x1a>
 8006932:	2300      	movs	r3, #0
 8006934:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006938:	682f      	ldr	r7, [r5, #0]
 800693a:	602b      	str	r3, [r5, #0]
 800693c:	d032      	beq.n	80069a4 <__sflush_r+0x98>
 800693e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006940:	89a3      	ldrh	r3, [r4, #12]
 8006942:	075a      	lsls	r2, r3, #29
 8006944:	d505      	bpl.n	8006952 <__sflush_r+0x46>
 8006946:	6863      	ldr	r3, [r4, #4]
 8006948:	1ac0      	subs	r0, r0, r3
 800694a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800694c:	b10b      	cbz	r3, 8006952 <__sflush_r+0x46>
 800694e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006950:	1ac0      	subs	r0, r0, r3
 8006952:	2300      	movs	r3, #0
 8006954:	4602      	mov	r2, r0
 8006956:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006958:	6a21      	ldr	r1, [r4, #32]
 800695a:	4628      	mov	r0, r5
 800695c:	47b0      	blx	r6
 800695e:	1c43      	adds	r3, r0, #1
 8006960:	89a3      	ldrh	r3, [r4, #12]
 8006962:	d106      	bne.n	8006972 <__sflush_r+0x66>
 8006964:	6829      	ldr	r1, [r5, #0]
 8006966:	291d      	cmp	r1, #29
 8006968:	d82c      	bhi.n	80069c4 <__sflush_r+0xb8>
 800696a:	4a2a      	ldr	r2, [pc, #168]	; (8006a14 <__sflush_r+0x108>)
 800696c:	40ca      	lsrs	r2, r1
 800696e:	07d6      	lsls	r6, r2, #31
 8006970:	d528      	bpl.n	80069c4 <__sflush_r+0xb8>
 8006972:	2200      	movs	r2, #0
 8006974:	6062      	str	r2, [r4, #4]
 8006976:	04d9      	lsls	r1, r3, #19
 8006978:	6922      	ldr	r2, [r4, #16]
 800697a:	6022      	str	r2, [r4, #0]
 800697c:	d504      	bpl.n	8006988 <__sflush_r+0x7c>
 800697e:	1c42      	adds	r2, r0, #1
 8006980:	d101      	bne.n	8006986 <__sflush_r+0x7a>
 8006982:	682b      	ldr	r3, [r5, #0]
 8006984:	b903      	cbnz	r3, 8006988 <__sflush_r+0x7c>
 8006986:	6560      	str	r0, [r4, #84]	; 0x54
 8006988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800698a:	602f      	str	r7, [r5, #0]
 800698c:	2900      	cmp	r1, #0
 800698e:	d0ca      	beq.n	8006926 <__sflush_r+0x1a>
 8006990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006994:	4299      	cmp	r1, r3
 8006996:	d002      	beq.n	800699e <__sflush_r+0x92>
 8006998:	4628      	mov	r0, r5
 800699a:	f000 f9e9 	bl	8006d70 <_free_r>
 800699e:	2000      	movs	r0, #0
 80069a0:	6360      	str	r0, [r4, #52]	; 0x34
 80069a2:	e7c1      	b.n	8006928 <__sflush_r+0x1c>
 80069a4:	6a21      	ldr	r1, [r4, #32]
 80069a6:	2301      	movs	r3, #1
 80069a8:	4628      	mov	r0, r5
 80069aa:	47b0      	blx	r6
 80069ac:	1c41      	adds	r1, r0, #1
 80069ae:	d1c7      	bne.n	8006940 <__sflush_r+0x34>
 80069b0:	682b      	ldr	r3, [r5, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0c4      	beq.n	8006940 <__sflush_r+0x34>
 80069b6:	2b1d      	cmp	r3, #29
 80069b8:	d001      	beq.n	80069be <__sflush_r+0xb2>
 80069ba:	2b16      	cmp	r3, #22
 80069bc:	d101      	bne.n	80069c2 <__sflush_r+0xb6>
 80069be:	602f      	str	r7, [r5, #0]
 80069c0:	e7b1      	b.n	8006926 <__sflush_r+0x1a>
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069c8:	81a3      	strh	r3, [r4, #12]
 80069ca:	e7ad      	b.n	8006928 <__sflush_r+0x1c>
 80069cc:	690f      	ldr	r7, [r1, #16]
 80069ce:	2f00      	cmp	r7, #0
 80069d0:	d0a9      	beq.n	8006926 <__sflush_r+0x1a>
 80069d2:	0793      	lsls	r3, r2, #30
 80069d4:	680e      	ldr	r6, [r1, #0]
 80069d6:	bf08      	it	eq
 80069d8:	694b      	ldreq	r3, [r1, #20]
 80069da:	600f      	str	r7, [r1, #0]
 80069dc:	bf18      	it	ne
 80069de:	2300      	movne	r3, #0
 80069e0:	eba6 0807 	sub.w	r8, r6, r7
 80069e4:	608b      	str	r3, [r1, #8]
 80069e6:	f1b8 0f00 	cmp.w	r8, #0
 80069ea:	dd9c      	ble.n	8006926 <__sflush_r+0x1a>
 80069ec:	6a21      	ldr	r1, [r4, #32]
 80069ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069f0:	4643      	mov	r3, r8
 80069f2:	463a      	mov	r2, r7
 80069f4:	4628      	mov	r0, r5
 80069f6:	47b0      	blx	r6
 80069f8:	2800      	cmp	r0, #0
 80069fa:	dc06      	bgt.n	8006a0a <__sflush_r+0xfe>
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a02:	81a3      	strh	r3, [r4, #12]
 8006a04:	f04f 30ff 	mov.w	r0, #4294967295
 8006a08:	e78e      	b.n	8006928 <__sflush_r+0x1c>
 8006a0a:	4407      	add	r7, r0
 8006a0c:	eba8 0800 	sub.w	r8, r8, r0
 8006a10:	e7e9      	b.n	80069e6 <__sflush_r+0xda>
 8006a12:	bf00      	nop
 8006a14:	20400001 	.word	0x20400001

08006a18 <_fflush_r>:
 8006a18:	b538      	push	{r3, r4, r5, lr}
 8006a1a:	690b      	ldr	r3, [r1, #16]
 8006a1c:	4605      	mov	r5, r0
 8006a1e:	460c      	mov	r4, r1
 8006a20:	b913      	cbnz	r3, 8006a28 <_fflush_r+0x10>
 8006a22:	2500      	movs	r5, #0
 8006a24:	4628      	mov	r0, r5
 8006a26:	bd38      	pop	{r3, r4, r5, pc}
 8006a28:	b118      	cbz	r0, 8006a32 <_fflush_r+0x1a>
 8006a2a:	6983      	ldr	r3, [r0, #24]
 8006a2c:	b90b      	cbnz	r3, 8006a32 <_fflush_r+0x1a>
 8006a2e:	f000 f887 	bl	8006b40 <__sinit>
 8006a32:	4b14      	ldr	r3, [pc, #80]	; (8006a84 <_fflush_r+0x6c>)
 8006a34:	429c      	cmp	r4, r3
 8006a36:	d11b      	bne.n	8006a70 <_fflush_r+0x58>
 8006a38:	686c      	ldr	r4, [r5, #4]
 8006a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0ef      	beq.n	8006a22 <_fflush_r+0xa>
 8006a42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a44:	07d0      	lsls	r0, r2, #31
 8006a46:	d404      	bmi.n	8006a52 <_fflush_r+0x3a>
 8006a48:	0599      	lsls	r1, r3, #22
 8006a4a:	d402      	bmi.n	8006a52 <_fflush_r+0x3a>
 8006a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a4e:	f000 f915 	bl	8006c7c <__retarget_lock_acquire_recursive>
 8006a52:	4628      	mov	r0, r5
 8006a54:	4621      	mov	r1, r4
 8006a56:	f7ff ff59 	bl	800690c <__sflush_r>
 8006a5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a5c:	07da      	lsls	r2, r3, #31
 8006a5e:	4605      	mov	r5, r0
 8006a60:	d4e0      	bmi.n	8006a24 <_fflush_r+0xc>
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	059b      	lsls	r3, r3, #22
 8006a66:	d4dd      	bmi.n	8006a24 <_fflush_r+0xc>
 8006a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a6a:	f000 f908 	bl	8006c7e <__retarget_lock_release_recursive>
 8006a6e:	e7d9      	b.n	8006a24 <_fflush_r+0xc>
 8006a70:	4b05      	ldr	r3, [pc, #20]	; (8006a88 <_fflush_r+0x70>)
 8006a72:	429c      	cmp	r4, r3
 8006a74:	d101      	bne.n	8006a7a <_fflush_r+0x62>
 8006a76:	68ac      	ldr	r4, [r5, #8]
 8006a78:	e7df      	b.n	8006a3a <_fflush_r+0x22>
 8006a7a:	4b04      	ldr	r3, [pc, #16]	; (8006a8c <_fflush_r+0x74>)
 8006a7c:	429c      	cmp	r4, r3
 8006a7e:	bf08      	it	eq
 8006a80:	68ec      	ldreq	r4, [r5, #12]
 8006a82:	e7da      	b.n	8006a3a <_fflush_r+0x22>
 8006a84:	08007adc 	.word	0x08007adc
 8006a88:	08007afc 	.word	0x08007afc
 8006a8c:	08007abc 	.word	0x08007abc

08006a90 <std>:
 8006a90:	2300      	movs	r3, #0
 8006a92:	b510      	push	{r4, lr}
 8006a94:	4604      	mov	r4, r0
 8006a96:	e9c0 3300 	strd	r3, r3, [r0]
 8006a9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a9e:	6083      	str	r3, [r0, #8]
 8006aa0:	8181      	strh	r1, [r0, #12]
 8006aa2:	6643      	str	r3, [r0, #100]	; 0x64
 8006aa4:	81c2      	strh	r2, [r0, #14]
 8006aa6:	6183      	str	r3, [r0, #24]
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	2208      	movs	r2, #8
 8006aac:	305c      	adds	r0, #92	; 0x5c
 8006aae:	f7ff fd5b 	bl	8006568 <memset>
 8006ab2:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <std+0x38>)
 8006ab4:	6263      	str	r3, [r4, #36]	; 0x24
 8006ab6:	4b05      	ldr	r3, [pc, #20]	; (8006acc <std+0x3c>)
 8006ab8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006aba:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <std+0x40>)
 8006abc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006abe:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <std+0x44>)
 8006ac0:	6224      	str	r4, [r4, #32]
 8006ac2:	6323      	str	r3, [r4, #48]	; 0x30
 8006ac4:	bd10      	pop	{r4, pc}
 8006ac6:	bf00      	nop
 8006ac8:	080066bd 	.word	0x080066bd
 8006acc:	080066e3 	.word	0x080066e3
 8006ad0:	0800671b 	.word	0x0800671b
 8006ad4:	0800673f 	.word	0x0800673f

08006ad8 <_cleanup_r>:
 8006ad8:	4901      	ldr	r1, [pc, #4]	; (8006ae0 <_cleanup_r+0x8>)
 8006ada:	f000 b8af 	b.w	8006c3c <_fwalk_reent>
 8006ade:	bf00      	nop
 8006ae0:	08006a19 	.word	0x08006a19

08006ae4 <__sfmoreglue>:
 8006ae4:	b570      	push	{r4, r5, r6, lr}
 8006ae6:	2268      	movs	r2, #104	; 0x68
 8006ae8:	1e4d      	subs	r5, r1, #1
 8006aea:	4355      	muls	r5, r2
 8006aec:	460e      	mov	r6, r1
 8006aee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006af2:	f000 f9a9 	bl	8006e48 <_malloc_r>
 8006af6:	4604      	mov	r4, r0
 8006af8:	b140      	cbz	r0, 8006b0c <__sfmoreglue+0x28>
 8006afa:	2100      	movs	r1, #0
 8006afc:	e9c0 1600 	strd	r1, r6, [r0]
 8006b00:	300c      	adds	r0, #12
 8006b02:	60a0      	str	r0, [r4, #8]
 8006b04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b08:	f7ff fd2e 	bl	8006568 <memset>
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}

08006b10 <__sfp_lock_acquire>:
 8006b10:	4801      	ldr	r0, [pc, #4]	; (8006b18 <__sfp_lock_acquire+0x8>)
 8006b12:	f000 b8b3 	b.w	8006c7c <__retarget_lock_acquire_recursive>
 8006b16:	bf00      	nop
 8006b18:	20000359 	.word	0x20000359

08006b1c <__sfp_lock_release>:
 8006b1c:	4801      	ldr	r0, [pc, #4]	; (8006b24 <__sfp_lock_release+0x8>)
 8006b1e:	f000 b8ae 	b.w	8006c7e <__retarget_lock_release_recursive>
 8006b22:	bf00      	nop
 8006b24:	20000359 	.word	0x20000359

08006b28 <__sinit_lock_acquire>:
 8006b28:	4801      	ldr	r0, [pc, #4]	; (8006b30 <__sinit_lock_acquire+0x8>)
 8006b2a:	f000 b8a7 	b.w	8006c7c <__retarget_lock_acquire_recursive>
 8006b2e:	bf00      	nop
 8006b30:	2000035a 	.word	0x2000035a

08006b34 <__sinit_lock_release>:
 8006b34:	4801      	ldr	r0, [pc, #4]	; (8006b3c <__sinit_lock_release+0x8>)
 8006b36:	f000 b8a2 	b.w	8006c7e <__retarget_lock_release_recursive>
 8006b3a:	bf00      	nop
 8006b3c:	2000035a 	.word	0x2000035a

08006b40 <__sinit>:
 8006b40:	b510      	push	{r4, lr}
 8006b42:	4604      	mov	r4, r0
 8006b44:	f7ff fff0 	bl	8006b28 <__sinit_lock_acquire>
 8006b48:	69a3      	ldr	r3, [r4, #24]
 8006b4a:	b11b      	cbz	r3, 8006b54 <__sinit+0x14>
 8006b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b50:	f7ff bff0 	b.w	8006b34 <__sinit_lock_release>
 8006b54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b58:	6523      	str	r3, [r4, #80]	; 0x50
 8006b5a:	4b13      	ldr	r3, [pc, #76]	; (8006ba8 <__sinit+0x68>)
 8006b5c:	4a13      	ldr	r2, [pc, #76]	; (8006bac <__sinit+0x6c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b62:	42a3      	cmp	r3, r4
 8006b64:	bf04      	itt	eq
 8006b66:	2301      	moveq	r3, #1
 8006b68:	61a3      	streq	r3, [r4, #24]
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f000 f820 	bl	8006bb0 <__sfp>
 8006b70:	6060      	str	r0, [r4, #4]
 8006b72:	4620      	mov	r0, r4
 8006b74:	f000 f81c 	bl	8006bb0 <__sfp>
 8006b78:	60a0      	str	r0, [r4, #8]
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f000 f818 	bl	8006bb0 <__sfp>
 8006b80:	2200      	movs	r2, #0
 8006b82:	60e0      	str	r0, [r4, #12]
 8006b84:	2104      	movs	r1, #4
 8006b86:	6860      	ldr	r0, [r4, #4]
 8006b88:	f7ff ff82 	bl	8006a90 <std>
 8006b8c:	68a0      	ldr	r0, [r4, #8]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	2109      	movs	r1, #9
 8006b92:	f7ff ff7d 	bl	8006a90 <std>
 8006b96:	68e0      	ldr	r0, [r4, #12]
 8006b98:	2202      	movs	r2, #2
 8006b9a:	2112      	movs	r1, #18
 8006b9c:	f7ff ff78 	bl	8006a90 <std>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	61a3      	str	r3, [r4, #24]
 8006ba4:	e7d2      	b.n	8006b4c <__sinit+0xc>
 8006ba6:	bf00      	nop
 8006ba8:	08007ab8 	.word	0x08007ab8
 8006bac:	08006ad9 	.word	0x08006ad9

08006bb0 <__sfp>:
 8006bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb2:	4607      	mov	r7, r0
 8006bb4:	f7ff ffac 	bl	8006b10 <__sfp_lock_acquire>
 8006bb8:	4b1e      	ldr	r3, [pc, #120]	; (8006c34 <__sfp+0x84>)
 8006bba:	681e      	ldr	r6, [r3, #0]
 8006bbc:	69b3      	ldr	r3, [r6, #24]
 8006bbe:	b913      	cbnz	r3, 8006bc6 <__sfp+0x16>
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	f7ff ffbd 	bl	8006b40 <__sinit>
 8006bc6:	3648      	adds	r6, #72	; 0x48
 8006bc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	d503      	bpl.n	8006bd8 <__sfp+0x28>
 8006bd0:	6833      	ldr	r3, [r6, #0]
 8006bd2:	b30b      	cbz	r3, 8006c18 <__sfp+0x68>
 8006bd4:	6836      	ldr	r6, [r6, #0]
 8006bd6:	e7f7      	b.n	8006bc8 <__sfp+0x18>
 8006bd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006bdc:	b9d5      	cbnz	r5, 8006c14 <__sfp+0x64>
 8006bde:	4b16      	ldr	r3, [pc, #88]	; (8006c38 <__sfp+0x88>)
 8006be0:	60e3      	str	r3, [r4, #12]
 8006be2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006be6:	6665      	str	r5, [r4, #100]	; 0x64
 8006be8:	f000 f847 	bl	8006c7a <__retarget_lock_init_recursive>
 8006bec:	f7ff ff96 	bl	8006b1c <__sfp_lock_release>
 8006bf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006bf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006bf8:	6025      	str	r5, [r4, #0]
 8006bfa:	61a5      	str	r5, [r4, #24]
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	4629      	mov	r1, r5
 8006c00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c04:	f7ff fcb0 	bl	8006568 <memset>
 8006c08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c10:	4620      	mov	r0, r4
 8006c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c14:	3468      	adds	r4, #104	; 0x68
 8006c16:	e7d9      	b.n	8006bcc <__sfp+0x1c>
 8006c18:	2104      	movs	r1, #4
 8006c1a:	4638      	mov	r0, r7
 8006c1c:	f7ff ff62 	bl	8006ae4 <__sfmoreglue>
 8006c20:	4604      	mov	r4, r0
 8006c22:	6030      	str	r0, [r6, #0]
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d1d5      	bne.n	8006bd4 <__sfp+0x24>
 8006c28:	f7ff ff78 	bl	8006b1c <__sfp_lock_release>
 8006c2c:	230c      	movs	r3, #12
 8006c2e:	603b      	str	r3, [r7, #0]
 8006c30:	e7ee      	b.n	8006c10 <__sfp+0x60>
 8006c32:	bf00      	nop
 8006c34:	08007ab8 	.word	0x08007ab8
 8006c38:	ffff0001 	.word	0xffff0001

08006c3c <_fwalk_reent>:
 8006c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c40:	4606      	mov	r6, r0
 8006c42:	4688      	mov	r8, r1
 8006c44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c48:	2700      	movs	r7, #0
 8006c4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c4e:	f1b9 0901 	subs.w	r9, r9, #1
 8006c52:	d505      	bpl.n	8006c60 <_fwalk_reent+0x24>
 8006c54:	6824      	ldr	r4, [r4, #0]
 8006c56:	2c00      	cmp	r4, #0
 8006c58:	d1f7      	bne.n	8006c4a <_fwalk_reent+0xe>
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c60:	89ab      	ldrh	r3, [r5, #12]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d907      	bls.n	8006c76 <_fwalk_reent+0x3a>
 8006c66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	d003      	beq.n	8006c76 <_fwalk_reent+0x3a>
 8006c6e:	4629      	mov	r1, r5
 8006c70:	4630      	mov	r0, r6
 8006c72:	47c0      	blx	r8
 8006c74:	4307      	orrs	r7, r0
 8006c76:	3568      	adds	r5, #104	; 0x68
 8006c78:	e7e9      	b.n	8006c4e <_fwalk_reent+0x12>

08006c7a <__retarget_lock_init_recursive>:
 8006c7a:	4770      	bx	lr

08006c7c <__retarget_lock_acquire_recursive>:
 8006c7c:	4770      	bx	lr

08006c7e <__retarget_lock_release_recursive>:
 8006c7e:	4770      	bx	lr

08006c80 <_lseek_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4d07      	ldr	r5, [pc, #28]	; (8006ca0 <_lseek_r+0x20>)
 8006c84:	4604      	mov	r4, r0
 8006c86:	4608      	mov	r0, r1
 8006c88:	4611      	mov	r1, r2
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	602a      	str	r2, [r5, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f7fa fb10 	bl	80012b4 <_lseek>
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	d102      	bne.n	8006c9e <_lseek_r+0x1e>
 8006c98:	682b      	ldr	r3, [r5, #0]
 8006c9a:	b103      	cbz	r3, 8006c9e <_lseek_r+0x1e>
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ca0:	20000364 	.word	0x20000364

08006ca4 <__swhatbuf_r>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	460e      	mov	r6, r1
 8006ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cac:	2900      	cmp	r1, #0
 8006cae:	b096      	sub	sp, #88	; 0x58
 8006cb0:	4614      	mov	r4, r2
 8006cb2:	461d      	mov	r5, r3
 8006cb4:	da08      	bge.n	8006cc8 <__swhatbuf_r+0x24>
 8006cb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	602a      	str	r2, [r5, #0]
 8006cbe:	061a      	lsls	r2, r3, #24
 8006cc0:	d410      	bmi.n	8006ce4 <__swhatbuf_r+0x40>
 8006cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cc6:	e00e      	b.n	8006ce6 <__swhatbuf_r+0x42>
 8006cc8:	466a      	mov	r2, sp
 8006cca:	f000 fde1 	bl	8007890 <_fstat_r>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	dbf1      	blt.n	8006cb6 <__swhatbuf_r+0x12>
 8006cd2:	9a01      	ldr	r2, [sp, #4]
 8006cd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006cd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006cdc:	425a      	negs	r2, r3
 8006cde:	415a      	adcs	r2, r3
 8006ce0:	602a      	str	r2, [r5, #0]
 8006ce2:	e7ee      	b.n	8006cc2 <__swhatbuf_r+0x1e>
 8006ce4:	2340      	movs	r3, #64	; 0x40
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	b016      	add	sp, #88	; 0x58
 8006cec:	bd70      	pop	{r4, r5, r6, pc}
	...

08006cf0 <__smakebuf_r>:
 8006cf0:	898b      	ldrh	r3, [r1, #12]
 8006cf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cf4:	079d      	lsls	r5, r3, #30
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	460c      	mov	r4, r1
 8006cfa:	d507      	bpl.n	8006d0c <__smakebuf_r+0x1c>
 8006cfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	6123      	str	r3, [r4, #16]
 8006d04:	2301      	movs	r3, #1
 8006d06:	6163      	str	r3, [r4, #20]
 8006d08:	b002      	add	sp, #8
 8006d0a:	bd70      	pop	{r4, r5, r6, pc}
 8006d0c:	ab01      	add	r3, sp, #4
 8006d0e:	466a      	mov	r2, sp
 8006d10:	f7ff ffc8 	bl	8006ca4 <__swhatbuf_r>
 8006d14:	9900      	ldr	r1, [sp, #0]
 8006d16:	4605      	mov	r5, r0
 8006d18:	4630      	mov	r0, r6
 8006d1a:	f000 f895 	bl	8006e48 <_malloc_r>
 8006d1e:	b948      	cbnz	r0, 8006d34 <__smakebuf_r+0x44>
 8006d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d24:	059a      	lsls	r2, r3, #22
 8006d26:	d4ef      	bmi.n	8006d08 <__smakebuf_r+0x18>
 8006d28:	f023 0303 	bic.w	r3, r3, #3
 8006d2c:	f043 0302 	orr.w	r3, r3, #2
 8006d30:	81a3      	strh	r3, [r4, #12]
 8006d32:	e7e3      	b.n	8006cfc <__smakebuf_r+0xc>
 8006d34:	4b0d      	ldr	r3, [pc, #52]	; (8006d6c <__smakebuf_r+0x7c>)
 8006d36:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	6020      	str	r0, [r4, #0]
 8006d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d40:	81a3      	strh	r3, [r4, #12]
 8006d42:	9b00      	ldr	r3, [sp, #0]
 8006d44:	6163      	str	r3, [r4, #20]
 8006d46:	9b01      	ldr	r3, [sp, #4]
 8006d48:	6120      	str	r0, [r4, #16]
 8006d4a:	b15b      	cbz	r3, 8006d64 <__smakebuf_r+0x74>
 8006d4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d50:	4630      	mov	r0, r6
 8006d52:	f000 fdaf 	bl	80078b4 <_isatty_r>
 8006d56:	b128      	cbz	r0, 8006d64 <__smakebuf_r+0x74>
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	f023 0303 	bic.w	r3, r3, #3
 8006d5e:	f043 0301 	orr.w	r3, r3, #1
 8006d62:	81a3      	strh	r3, [r4, #12]
 8006d64:	89a0      	ldrh	r0, [r4, #12]
 8006d66:	4305      	orrs	r5, r0
 8006d68:	81a5      	strh	r5, [r4, #12]
 8006d6a:	e7cd      	b.n	8006d08 <__smakebuf_r+0x18>
 8006d6c:	08006ad9 	.word	0x08006ad9

08006d70 <_free_r>:
 8006d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d72:	2900      	cmp	r1, #0
 8006d74:	d044      	beq.n	8006e00 <_free_r+0x90>
 8006d76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d7a:	9001      	str	r0, [sp, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d82:	bfb8      	it	lt
 8006d84:	18e4      	addlt	r4, r4, r3
 8006d86:	f000 fdb3 	bl	80078f0 <__malloc_lock>
 8006d8a:	4a1e      	ldr	r2, [pc, #120]	; (8006e04 <_free_r+0x94>)
 8006d8c:	9801      	ldr	r0, [sp, #4]
 8006d8e:	6813      	ldr	r3, [r2, #0]
 8006d90:	b933      	cbnz	r3, 8006da0 <_free_r+0x30>
 8006d92:	6063      	str	r3, [r4, #4]
 8006d94:	6014      	str	r4, [r2, #0]
 8006d96:	b003      	add	sp, #12
 8006d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d9c:	f000 bdae 	b.w	80078fc <__malloc_unlock>
 8006da0:	42a3      	cmp	r3, r4
 8006da2:	d908      	bls.n	8006db6 <_free_r+0x46>
 8006da4:	6825      	ldr	r5, [r4, #0]
 8006da6:	1961      	adds	r1, r4, r5
 8006da8:	428b      	cmp	r3, r1
 8006daa:	bf01      	itttt	eq
 8006dac:	6819      	ldreq	r1, [r3, #0]
 8006dae:	685b      	ldreq	r3, [r3, #4]
 8006db0:	1949      	addeq	r1, r1, r5
 8006db2:	6021      	streq	r1, [r4, #0]
 8006db4:	e7ed      	b.n	8006d92 <_free_r+0x22>
 8006db6:	461a      	mov	r2, r3
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	b10b      	cbz	r3, 8006dc0 <_free_r+0x50>
 8006dbc:	42a3      	cmp	r3, r4
 8006dbe:	d9fa      	bls.n	8006db6 <_free_r+0x46>
 8006dc0:	6811      	ldr	r1, [r2, #0]
 8006dc2:	1855      	adds	r5, r2, r1
 8006dc4:	42a5      	cmp	r5, r4
 8006dc6:	d10b      	bne.n	8006de0 <_free_r+0x70>
 8006dc8:	6824      	ldr	r4, [r4, #0]
 8006dca:	4421      	add	r1, r4
 8006dcc:	1854      	adds	r4, r2, r1
 8006dce:	42a3      	cmp	r3, r4
 8006dd0:	6011      	str	r1, [r2, #0]
 8006dd2:	d1e0      	bne.n	8006d96 <_free_r+0x26>
 8006dd4:	681c      	ldr	r4, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	6053      	str	r3, [r2, #4]
 8006dda:	4421      	add	r1, r4
 8006ddc:	6011      	str	r1, [r2, #0]
 8006dde:	e7da      	b.n	8006d96 <_free_r+0x26>
 8006de0:	d902      	bls.n	8006de8 <_free_r+0x78>
 8006de2:	230c      	movs	r3, #12
 8006de4:	6003      	str	r3, [r0, #0]
 8006de6:	e7d6      	b.n	8006d96 <_free_r+0x26>
 8006de8:	6825      	ldr	r5, [r4, #0]
 8006dea:	1961      	adds	r1, r4, r5
 8006dec:	428b      	cmp	r3, r1
 8006dee:	bf04      	itt	eq
 8006df0:	6819      	ldreq	r1, [r3, #0]
 8006df2:	685b      	ldreq	r3, [r3, #4]
 8006df4:	6063      	str	r3, [r4, #4]
 8006df6:	bf04      	itt	eq
 8006df8:	1949      	addeq	r1, r1, r5
 8006dfa:	6021      	streq	r1, [r4, #0]
 8006dfc:	6054      	str	r4, [r2, #4]
 8006dfe:	e7ca      	b.n	8006d96 <_free_r+0x26>
 8006e00:	b003      	add	sp, #12
 8006e02:	bd30      	pop	{r4, r5, pc}
 8006e04:	2000035c 	.word	0x2000035c

08006e08 <sbrk_aligned>:
 8006e08:	b570      	push	{r4, r5, r6, lr}
 8006e0a:	4e0e      	ldr	r6, [pc, #56]	; (8006e44 <sbrk_aligned+0x3c>)
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	6831      	ldr	r1, [r6, #0]
 8006e10:	4605      	mov	r5, r0
 8006e12:	b911      	cbnz	r1, 8006e1a <sbrk_aligned+0x12>
 8006e14:	f000 fbc2 	bl	800759c <_sbrk_r>
 8006e18:	6030      	str	r0, [r6, #0]
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f000 fbbd 	bl	800759c <_sbrk_r>
 8006e22:	1c43      	adds	r3, r0, #1
 8006e24:	d00a      	beq.n	8006e3c <sbrk_aligned+0x34>
 8006e26:	1cc4      	adds	r4, r0, #3
 8006e28:	f024 0403 	bic.w	r4, r4, #3
 8006e2c:	42a0      	cmp	r0, r4
 8006e2e:	d007      	beq.n	8006e40 <sbrk_aligned+0x38>
 8006e30:	1a21      	subs	r1, r4, r0
 8006e32:	4628      	mov	r0, r5
 8006e34:	f000 fbb2 	bl	800759c <_sbrk_r>
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d101      	bne.n	8006e40 <sbrk_aligned+0x38>
 8006e3c:	f04f 34ff 	mov.w	r4, #4294967295
 8006e40:	4620      	mov	r0, r4
 8006e42:	bd70      	pop	{r4, r5, r6, pc}
 8006e44:	20000360 	.word	0x20000360

08006e48 <_malloc_r>:
 8006e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e4c:	1ccd      	adds	r5, r1, #3
 8006e4e:	f025 0503 	bic.w	r5, r5, #3
 8006e52:	3508      	adds	r5, #8
 8006e54:	2d0c      	cmp	r5, #12
 8006e56:	bf38      	it	cc
 8006e58:	250c      	movcc	r5, #12
 8006e5a:	2d00      	cmp	r5, #0
 8006e5c:	4607      	mov	r7, r0
 8006e5e:	db01      	blt.n	8006e64 <_malloc_r+0x1c>
 8006e60:	42a9      	cmp	r1, r5
 8006e62:	d905      	bls.n	8006e70 <_malloc_r+0x28>
 8006e64:	230c      	movs	r3, #12
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	2600      	movs	r6, #0
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e70:	4e2e      	ldr	r6, [pc, #184]	; (8006f2c <_malloc_r+0xe4>)
 8006e72:	f000 fd3d 	bl	80078f0 <__malloc_lock>
 8006e76:	6833      	ldr	r3, [r6, #0]
 8006e78:	461c      	mov	r4, r3
 8006e7a:	bb34      	cbnz	r4, 8006eca <_malloc_r+0x82>
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	4638      	mov	r0, r7
 8006e80:	f7ff ffc2 	bl	8006e08 <sbrk_aligned>
 8006e84:	1c43      	adds	r3, r0, #1
 8006e86:	4604      	mov	r4, r0
 8006e88:	d14d      	bne.n	8006f26 <_malloc_r+0xde>
 8006e8a:	6834      	ldr	r4, [r6, #0]
 8006e8c:	4626      	mov	r6, r4
 8006e8e:	2e00      	cmp	r6, #0
 8006e90:	d140      	bne.n	8006f14 <_malloc_r+0xcc>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	4631      	mov	r1, r6
 8006e96:	4638      	mov	r0, r7
 8006e98:	eb04 0803 	add.w	r8, r4, r3
 8006e9c:	f000 fb7e 	bl	800759c <_sbrk_r>
 8006ea0:	4580      	cmp	r8, r0
 8006ea2:	d13a      	bne.n	8006f1a <_malloc_r+0xd2>
 8006ea4:	6821      	ldr	r1, [r4, #0]
 8006ea6:	3503      	adds	r5, #3
 8006ea8:	1a6d      	subs	r5, r5, r1
 8006eaa:	f025 0503 	bic.w	r5, r5, #3
 8006eae:	3508      	adds	r5, #8
 8006eb0:	2d0c      	cmp	r5, #12
 8006eb2:	bf38      	it	cc
 8006eb4:	250c      	movcc	r5, #12
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	4638      	mov	r0, r7
 8006eba:	f7ff ffa5 	bl	8006e08 <sbrk_aligned>
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	d02b      	beq.n	8006f1a <_malloc_r+0xd2>
 8006ec2:	6823      	ldr	r3, [r4, #0]
 8006ec4:	442b      	add	r3, r5
 8006ec6:	6023      	str	r3, [r4, #0]
 8006ec8:	e00e      	b.n	8006ee8 <_malloc_r+0xa0>
 8006eca:	6822      	ldr	r2, [r4, #0]
 8006ecc:	1b52      	subs	r2, r2, r5
 8006ece:	d41e      	bmi.n	8006f0e <_malloc_r+0xc6>
 8006ed0:	2a0b      	cmp	r2, #11
 8006ed2:	d916      	bls.n	8006f02 <_malloc_r+0xba>
 8006ed4:	1961      	adds	r1, r4, r5
 8006ed6:	42a3      	cmp	r3, r4
 8006ed8:	6025      	str	r5, [r4, #0]
 8006eda:	bf18      	it	ne
 8006edc:	6059      	strne	r1, [r3, #4]
 8006ede:	6863      	ldr	r3, [r4, #4]
 8006ee0:	bf08      	it	eq
 8006ee2:	6031      	streq	r1, [r6, #0]
 8006ee4:	5162      	str	r2, [r4, r5]
 8006ee6:	604b      	str	r3, [r1, #4]
 8006ee8:	4638      	mov	r0, r7
 8006eea:	f104 060b 	add.w	r6, r4, #11
 8006eee:	f000 fd05 	bl	80078fc <__malloc_unlock>
 8006ef2:	f026 0607 	bic.w	r6, r6, #7
 8006ef6:	1d23      	adds	r3, r4, #4
 8006ef8:	1af2      	subs	r2, r6, r3
 8006efa:	d0b6      	beq.n	8006e6a <_malloc_r+0x22>
 8006efc:	1b9b      	subs	r3, r3, r6
 8006efe:	50a3      	str	r3, [r4, r2]
 8006f00:	e7b3      	b.n	8006e6a <_malloc_r+0x22>
 8006f02:	6862      	ldr	r2, [r4, #4]
 8006f04:	42a3      	cmp	r3, r4
 8006f06:	bf0c      	ite	eq
 8006f08:	6032      	streq	r2, [r6, #0]
 8006f0a:	605a      	strne	r2, [r3, #4]
 8006f0c:	e7ec      	b.n	8006ee8 <_malloc_r+0xa0>
 8006f0e:	4623      	mov	r3, r4
 8006f10:	6864      	ldr	r4, [r4, #4]
 8006f12:	e7b2      	b.n	8006e7a <_malloc_r+0x32>
 8006f14:	4634      	mov	r4, r6
 8006f16:	6876      	ldr	r6, [r6, #4]
 8006f18:	e7b9      	b.n	8006e8e <_malloc_r+0x46>
 8006f1a:	230c      	movs	r3, #12
 8006f1c:	603b      	str	r3, [r7, #0]
 8006f1e:	4638      	mov	r0, r7
 8006f20:	f000 fcec 	bl	80078fc <__malloc_unlock>
 8006f24:	e7a1      	b.n	8006e6a <_malloc_r+0x22>
 8006f26:	6025      	str	r5, [r4, #0]
 8006f28:	e7de      	b.n	8006ee8 <_malloc_r+0xa0>
 8006f2a:	bf00      	nop
 8006f2c:	2000035c 	.word	0x2000035c

08006f30 <_sungetc_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	1c4b      	adds	r3, r1, #1
 8006f34:	4614      	mov	r4, r2
 8006f36:	d103      	bne.n	8006f40 <_sungetc_r+0x10>
 8006f38:	f04f 35ff 	mov.w	r5, #4294967295
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	bd38      	pop	{r3, r4, r5, pc}
 8006f40:	8993      	ldrh	r3, [r2, #12]
 8006f42:	f023 0320 	bic.w	r3, r3, #32
 8006f46:	8193      	strh	r3, [r2, #12]
 8006f48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f4a:	6852      	ldr	r2, [r2, #4]
 8006f4c:	b2cd      	uxtb	r5, r1
 8006f4e:	b18b      	cbz	r3, 8006f74 <_sungetc_r+0x44>
 8006f50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006f52:	4293      	cmp	r3, r2
 8006f54:	dd08      	ble.n	8006f68 <_sungetc_r+0x38>
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	1e5a      	subs	r2, r3, #1
 8006f5a:	6022      	str	r2, [r4, #0]
 8006f5c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006f60:	6863      	ldr	r3, [r4, #4]
 8006f62:	3301      	adds	r3, #1
 8006f64:	6063      	str	r3, [r4, #4]
 8006f66:	e7e9      	b.n	8006f3c <_sungetc_r+0xc>
 8006f68:	4621      	mov	r1, r4
 8006f6a:	f000 fc57 	bl	800781c <__submore>
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	d0f1      	beq.n	8006f56 <_sungetc_r+0x26>
 8006f72:	e7e1      	b.n	8006f38 <_sungetc_r+0x8>
 8006f74:	6921      	ldr	r1, [r4, #16]
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	b151      	cbz	r1, 8006f90 <_sungetc_r+0x60>
 8006f7a:	4299      	cmp	r1, r3
 8006f7c:	d208      	bcs.n	8006f90 <_sungetc_r+0x60>
 8006f7e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006f82:	42a9      	cmp	r1, r5
 8006f84:	d104      	bne.n	8006f90 <_sungetc_r+0x60>
 8006f86:	3b01      	subs	r3, #1
 8006f88:	3201      	adds	r2, #1
 8006f8a:	6023      	str	r3, [r4, #0]
 8006f8c:	6062      	str	r2, [r4, #4]
 8006f8e:	e7d5      	b.n	8006f3c <_sungetc_r+0xc>
 8006f90:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006f94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f98:	6363      	str	r3, [r4, #52]	; 0x34
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	63a3      	str	r3, [r4, #56]	; 0x38
 8006f9e:	4623      	mov	r3, r4
 8006fa0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006fa4:	6023      	str	r3, [r4, #0]
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e7dc      	b.n	8006f64 <_sungetc_r+0x34>

08006faa <__ssrefill_r>:
 8006faa:	b510      	push	{r4, lr}
 8006fac:	460c      	mov	r4, r1
 8006fae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006fb0:	b169      	cbz	r1, 8006fce <__ssrefill_r+0x24>
 8006fb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fb6:	4299      	cmp	r1, r3
 8006fb8:	d001      	beq.n	8006fbe <__ssrefill_r+0x14>
 8006fba:	f7ff fed9 	bl	8006d70 <_free_r>
 8006fbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fc0:	6063      	str	r3, [r4, #4]
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	6360      	str	r0, [r4, #52]	; 0x34
 8006fc6:	b113      	cbz	r3, 8006fce <__ssrefill_r+0x24>
 8006fc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006fca:	6023      	str	r3, [r4, #0]
 8006fcc:	bd10      	pop	{r4, pc}
 8006fce:	6923      	ldr	r3, [r4, #16]
 8006fd0:	6023      	str	r3, [r4, #0]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	6063      	str	r3, [r4, #4]
 8006fd6:	89a3      	ldrh	r3, [r4, #12]
 8006fd8:	f043 0320 	orr.w	r3, r3, #32
 8006fdc:	81a3      	strh	r3, [r4, #12]
 8006fde:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe2:	e7f3      	b.n	8006fcc <__ssrefill_r+0x22>

08006fe4 <__ssvfiscanf_r>:
 8006fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe8:	460c      	mov	r4, r1
 8006fea:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006fee:	2100      	movs	r1, #0
 8006ff0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006ff4:	49a6      	ldr	r1, [pc, #664]	; (8007290 <__ssvfiscanf_r+0x2ac>)
 8006ff6:	91a0      	str	r1, [sp, #640]	; 0x280
 8006ff8:	f10d 0804 	add.w	r8, sp, #4
 8006ffc:	49a5      	ldr	r1, [pc, #660]	; (8007294 <__ssvfiscanf_r+0x2b0>)
 8006ffe:	4fa6      	ldr	r7, [pc, #664]	; (8007298 <__ssvfiscanf_r+0x2b4>)
 8007000:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800729c <__ssvfiscanf_r+0x2b8>
 8007004:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007008:	4606      	mov	r6, r0
 800700a:	91a1      	str	r1, [sp, #644]	; 0x284
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	7813      	ldrb	r3, [r2, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 815a 	beq.w	80072ca <__ssvfiscanf_r+0x2e6>
 8007016:	5dd9      	ldrb	r1, [r3, r7]
 8007018:	f011 0108 	ands.w	r1, r1, #8
 800701c:	f102 0501 	add.w	r5, r2, #1
 8007020:	d019      	beq.n	8007056 <__ssvfiscanf_r+0x72>
 8007022:	6863      	ldr	r3, [r4, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	dd0f      	ble.n	8007048 <__ssvfiscanf_r+0x64>
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	781a      	ldrb	r2, [r3, #0]
 800702c:	5cba      	ldrb	r2, [r7, r2]
 800702e:	0712      	lsls	r2, r2, #28
 8007030:	d401      	bmi.n	8007036 <__ssvfiscanf_r+0x52>
 8007032:	462a      	mov	r2, r5
 8007034:	e7eb      	b.n	800700e <__ssvfiscanf_r+0x2a>
 8007036:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007038:	3201      	adds	r2, #1
 800703a:	9245      	str	r2, [sp, #276]	; 0x114
 800703c:	6862      	ldr	r2, [r4, #4]
 800703e:	3301      	adds	r3, #1
 8007040:	3a01      	subs	r2, #1
 8007042:	6062      	str	r2, [r4, #4]
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	e7ec      	b.n	8007022 <__ssvfiscanf_r+0x3e>
 8007048:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800704a:	4621      	mov	r1, r4
 800704c:	4630      	mov	r0, r6
 800704e:	4798      	blx	r3
 8007050:	2800      	cmp	r0, #0
 8007052:	d0e9      	beq.n	8007028 <__ssvfiscanf_r+0x44>
 8007054:	e7ed      	b.n	8007032 <__ssvfiscanf_r+0x4e>
 8007056:	2b25      	cmp	r3, #37	; 0x25
 8007058:	d012      	beq.n	8007080 <__ssvfiscanf_r+0x9c>
 800705a:	469a      	mov	sl, r3
 800705c:	6863      	ldr	r3, [r4, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	f340 8091 	ble.w	8007186 <__ssvfiscanf_r+0x1a2>
 8007064:	6822      	ldr	r2, [r4, #0]
 8007066:	7813      	ldrb	r3, [r2, #0]
 8007068:	4553      	cmp	r3, sl
 800706a:	f040 812e 	bne.w	80072ca <__ssvfiscanf_r+0x2e6>
 800706e:	6863      	ldr	r3, [r4, #4]
 8007070:	3b01      	subs	r3, #1
 8007072:	6063      	str	r3, [r4, #4]
 8007074:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007076:	3201      	adds	r2, #1
 8007078:	3301      	adds	r3, #1
 800707a:	6022      	str	r2, [r4, #0]
 800707c:	9345      	str	r3, [sp, #276]	; 0x114
 800707e:	e7d8      	b.n	8007032 <__ssvfiscanf_r+0x4e>
 8007080:	9141      	str	r1, [sp, #260]	; 0x104
 8007082:	9143      	str	r1, [sp, #268]	; 0x10c
 8007084:	7853      	ldrb	r3, [r2, #1]
 8007086:	2b2a      	cmp	r3, #42	; 0x2a
 8007088:	bf02      	ittt	eq
 800708a:	2310      	moveq	r3, #16
 800708c:	1c95      	addeq	r5, r2, #2
 800708e:	9341      	streq	r3, [sp, #260]	; 0x104
 8007090:	220a      	movs	r2, #10
 8007092:	46aa      	mov	sl, r5
 8007094:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007098:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800709c:	2b09      	cmp	r3, #9
 800709e:	d91d      	bls.n	80070dc <__ssvfiscanf_r+0xf8>
 80070a0:	487e      	ldr	r0, [pc, #504]	; (800729c <__ssvfiscanf_r+0x2b8>)
 80070a2:	2203      	movs	r2, #3
 80070a4:	f7f9 f8ac 	bl	8000200 <memchr>
 80070a8:	b140      	cbz	r0, 80070bc <__ssvfiscanf_r+0xd8>
 80070aa:	2301      	movs	r3, #1
 80070ac:	eba0 0009 	sub.w	r0, r0, r9
 80070b0:	fa03 f000 	lsl.w	r0, r3, r0
 80070b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80070b6:	4318      	orrs	r0, r3
 80070b8:	9041      	str	r0, [sp, #260]	; 0x104
 80070ba:	4655      	mov	r5, sl
 80070bc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80070c0:	2b78      	cmp	r3, #120	; 0x78
 80070c2:	d806      	bhi.n	80070d2 <__ssvfiscanf_r+0xee>
 80070c4:	2b57      	cmp	r3, #87	; 0x57
 80070c6:	d810      	bhi.n	80070ea <__ssvfiscanf_r+0x106>
 80070c8:	2b25      	cmp	r3, #37	; 0x25
 80070ca:	d0c6      	beq.n	800705a <__ssvfiscanf_r+0x76>
 80070cc:	d856      	bhi.n	800717c <__ssvfiscanf_r+0x198>
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d064      	beq.n	800719c <__ssvfiscanf_r+0x1b8>
 80070d2:	2303      	movs	r3, #3
 80070d4:	9347      	str	r3, [sp, #284]	; 0x11c
 80070d6:	230a      	movs	r3, #10
 80070d8:	9342      	str	r3, [sp, #264]	; 0x108
 80070da:	e071      	b.n	80071c0 <__ssvfiscanf_r+0x1dc>
 80070dc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80070de:	fb02 1103 	mla	r1, r2, r3, r1
 80070e2:	3930      	subs	r1, #48	; 0x30
 80070e4:	9143      	str	r1, [sp, #268]	; 0x10c
 80070e6:	4655      	mov	r5, sl
 80070e8:	e7d3      	b.n	8007092 <__ssvfiscanf_r+0xae>
 80070ea:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80070ee:	2a20      	cmp	r2, #32
 80070f0:	d8ef      	bhi.n	80070d2 <__ssvfiscanf_r+0xee>
 80070f2:	a101      	add	r1, pc, #4	; (adr r1, 80070f8 <__ssvfiscanf_r+0x114>)
 80070f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80070f8:	080071ab 	.word	0x080071ab
 80070fc:	080070d3 	.word	0x080070d3
 8007100:	080070d3 	.word	0x080070d3
 8007104:	08007209 	.word	0x08007209
 8007108:	080070d3 	.word	0x080070d3
 800710c:	080070d3 	.word	0x080070d3
 8007110:	080070d3 	.word	0x080070d3
 8007114:	080070d3 	.word	0x080070d3
 8007118:	080070d3 	.word	0x080070d3
 800711c:	080070d3 	.word	0x080070d3
 8007120:	080070d3 	.word	0x080070d3
 8007124:	0800721f 	.word	0x0800721f
 8007128:	080071f5 	.word	0x080071f5
 800712c:	08007183 	.word	0x08007183
 8007130:	08007183 	.word	0x08007183
 8007134:	08007183 	.word	0x08007183
 8007138:	080070d3 	.word	0x080070d3
 800713c:	080071f9 	.word	0x080071f9
 8007140:	080070d3 	.word	0x080070d3
 8007144:	080070d3 	.word	0x080070d3
 8007148:	080070d3 	.word	0x080070d3
 800714c:	080070d3 	.word	0x080070d3
 8007150:	0800722f 	.word	0x0800722f
 8007154:	08007201 	.word	0x08007201
 8007158:	080071a3 	.word	0x080071a3
 800715c:	080070d3 	.word	0x080070d3
 8007160:	080070d3 	.word	0x080070d3
 8007164:	0800722b 	.word	0x0800722b
 8007168:	080070d3 	.word	0x080070d3
 800716c:	080071f5 	.word	0x080071f5
 8007170:	080070d3 	.word	0x080070d3
 8007174:	080070d3 	.word	0x080070d3
 8007178:	080071ab 	.word	0x080071ab
 800717c:	3b45      	subs	r3, #69	; 0x45
 800717e:	2b02      	cmp	r3, #2
 8007180:	d8a7      	bhi.n	80070d2 <__ssvfiscanf_r+0xee>
 8007182:	2305      	movs	r3, #5
 8007184:	e01b      	b.n	80071be <__ssvfiscanf_r+0x1da>
 8007186:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007188:	4621      	mov	r1, r4
 800718a:	4630      	mov	r0, r6
 800718c:	4798      	blx	r3
 800718e:	2800      	cmp	r0, #0
 8007190:	f43f af68 	beq.w	8007064 <__ssvfiscanf_r+0x80>
 8007194:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007196:	2800      	cmp	r0, #0
 8007198:	f040 808d 	bne.w	80072b6 <__ssvfiscanf_r+0x2d2>
 800719c:	f04f 30ff 	mov.w	r0, #4294967295
 80071a0:	e08f      	b.n	80072c2 <__ssvfiscanf_r+0x2de>
 80071a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80071a4:	f042 0220 	orr.w	r2, r2, #32
 80071a8:	9241      	str	r2, [sp, #260]	; 0x104
 80071aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80071ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071b0:	9241      	str	r2, [sp, #260]	; 0x104
 80071b2:	2210      	movs	r2, #16
 80071b4:	2b6f      	cmp	r3, #111	; 0x6f
 80071b6:	9242      	str	r2, [sp, #264]	; 0x108
 80071b8:	bf34      	ite	cc
 80071ba:	2303      	movcc	r3, #3
 80071bc:	2304      	movcs	r3, #4
 80071be:	9347      	str	r3, [sp, #284]	; 0x11c
 80071c0:	6863      	ldr	r3, [r4, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	dd42      	ble.n	800724c <__ssvfiscanf_r+0x268>
 80071c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80071c8:	0659      	lsls	r1, r3, #25
 80071ca:	d404      	bmi.n	80071d6 <__ssvfiscanf_r+0x1f2>
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	781a      	ldrb	r2, [r3, #0]
 80071d0:	5cba      	ldrb	r2, [r7, r2]
 80071d2:	0712      	lsls	r2, r2, #28
 80071d4:	d441      	bmi.n	800725a <__ssvfiscanf_r+0x276>
 80071d6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80071d8:	2b02      	cmp	r3, #2
 80071da:	dc50      	bgt.n	800727e <__ssvfiscanf_r+0x29a>
 80071dc:	466b      	mov	r3, sp
 80071de:	4622      	mov	r2, r4
 80071e0:	a941      	add	r1, sp, #260	; 0x104
 80071e2:	4630      	mov	r0, r6
 80071e4:	f000 f876 	bl	80072d4 <_scanf_chars>
 80071e8:	2801      	cmp	r0, #1
 80071ea:	d06e      	beq.n	80072ca <__ssvfiscanf_r+0x2e6>
 80071ec:	2802      	cmp	r0, #2
 80071ee:	f47f af20 	bne.w	8007032 <__ssvfiscanf_r+0x4e>
 80071f2:	e7cf      	b.n	8007194 <__ssvfiscanf_r+0x1b0>
 80071f4:	220a      	movs	r2, #10
 80071f6:	e7dd      	b.n	80071b4 <__ssvfiscanf_r+0x1d0>
 80071f8:	2300      	movs	r3, #0
 80071fa:	9342      	str	r3, [sp, #264]	; 0x108
 80071fc:	2303      	movs	r3, #3
 80071fe:	e7de      	b.n	80071be <__ssvfiscanf_r+0x1da>
 8007200:	2308      	movs	r3, #8
 8007202:	9342      	str	r3, [sp, #264]	; 0x108
 8007204:	2304      	movs	r3, #4
 8007206:	e7da      	b.n	80071be <__ssvfiscanf_r+0x1da>
 8007208:	4629      	mov	r1, r5
 800720a:	4640      	mov	r0, r8
 800720c:	f000 f9d6 	bl	80075bc <__sccl>
 8007210:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007216:	9341      	str	r3, [sp, #260]	; 0x104
 8007218:	4605      	mov	r5, r0
 800721a:	2301      	movs	r3, #1
 800721c:	e7cf      	b.n	80071be <__ssvfiscanf_r+0x1da>
 800721e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007224:	9341      	str	r3, [sp, #260]	; 0x104
 8007226:	2300      	movs	r3, #0
 8007228:	e7c9      	b.n	80071be <__ssvfiscanf_r+0x1da>
 800722a:	2302      	movs	r3, #2
 800722c:	e7c7      	b.n	80071be <__ssvfiscanf_r+0x1da>
 800722e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007230:	06c3      	lsls	r3, r0, #27
 8007232:	f53f aefe 	bmi.w	8007032 <__ssvfiscanf_r+0x4e>
 8007236:	9b00      	ldr	r3, [sp, #0]
 8007238:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800723a:	1d19      	adds	r1, r3, #4
 800723c:	9100      	str	r1, [sp, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f010 0f01 	tst.w	r0, #1
 8007244:	bf14      	ite	ne
 8007246:	801a      	strhne	r2, [r3, #0]
 8007248:	601a      	streq	r2, [r3, #0]
 800724a:	e6f2      	b.n	8007032 <__ssvfiscanf_r+0x4e>
 800724c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800724e:	4621      	mov	r1, r4
 8007250:	4630      	mov	r0, r6
 8007252:	4798      	blx	r3
 8007254:	2800      	cmp	r0, #0
 8007256:	d0b6      	beq.n	80071c6 <__ssvfiscanf_r+0x1e2>
 8007258:	e79c      	b.n	8007194 <__ssvfiscanf_r+0x1b0>
 800725a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800725c:	3201      	adds	r2, #1
 800725e:	9245      	str	r2, [sp, #276]	; 0x114
 8007260:	6862      	ldr	r2, [r4, #4]
 8007262:	3a01      	subs	r2, #1
 8007264:	2a00      	cmp	r2, #0
 8007266:	6062      	str	r2, [r4, #4]
 8007268:	dd02      	ble.n	8007270 <__ssvfiscanf_r+0x28c>
 800726a:	3301      	adds	r3, #1
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	e7ad      	b.n	80071cc <__ssvfiscanf_r+0x1e8>
 8007270:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007272:	4621      	mov	r1, r4
 8007274:	4630      	mov	r0, r6
 8007276:	4798      	blx	r3
 8007278:	2800      	cmp	r0, #0
 800727a:	d0a7      	beq.n	80071cc <__ssvfiscanf_r+0x1e8>
 800727c:	e78a      	b.n	8007194 <__ssvfiscanf_r+0x1b0>
 800727e:	2b04      	cmp	r3, #4
 8007280:	dc0e      	bgt.n	80072a0 <__ssvfiscanf_r+0x2bc>
 8007282:	466b      	mov	r3, sp
 8007284:	4622      	mov	r2, r4
 8007286:	a941      	add	r1, sp, #260	; 0x104
 8007288:	4630      	mov	r0, r6
 800728a:	f000 f87d 	bl	8007388 <_scanf_i>
 800728e:	e7ab      	b.n	80071e8 <__ssvfiscanf_r+0x204>
 8007290:	08006f31 	.word	0x08006f31
 8007294:	08006fab 	.word	0x08006fab
 8007298:	08007b3c 	.word	0x08007b3c
 800729c:	08007b1c 	.word	0x08007b1c
 80072a0:	4b0b      	ldr	r3, [pc, #44]	; (80072d0 <__ssvfiscanf_r+0x2ec>)
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f43f aec5 	beq.w	8007032 <__ssvfiscanf_r+0x4e>
 80072a8:	466b      	mov	r3, sp
 80072aa:	4622      	mov	r2, r4
 80072ac:	a941      	add	r1, sp, #260	; 0x104
 80072ae:	4630      	mov	r0, r6
 80072b0:	f3af 8000 	nop.w
 80072b4:	e798      	b.n	80071e8 <__ssvfiscanf_r+0x204>
 80072b6:	89a3      	ldrh	r3, [r4, #12]
 80072b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80072bc:	bf18      	it	ne
 80072be:	f04f 30ff 	movne.w	r0, #4294967295
 80072c2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80072c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ca:	9844      	ldr	r0, [sp, #272]	; 0x110
 80072cc:	e7f9      	b.n	80072c2 <__ssvfiscanf_r+0x2de>
 80072ce:	bf00      	nop
 80072d0:	00000000 	.word	0x00000000

080072d4 <_scanf_chars>:
 80072d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072d8:	4615      	mov	r5, r2
 80072da:	688a      	ldr	r2, [r1, #8]
 80072dc:	4680      	mov	r8, r0
 80072de:	460c      	mov	r4, r1
 80072e0:	b932      	cbnz	r2, 80072f0 <_scanf_chars+0x1c>
 80072e2:	698a      	ldr	r2, [r1, #24]
 80072e4:	2a00      	cmp	r2, #0
 80072e6:	bf0c      	ite	eq
 80072e8:	2201      	moveq	r2, #1
 80072ea:	f04f 32ff 	movne.w	r2, #4294967295
 80072ee:	608a      	str	r2, [r1, #8]
 80072f0:	6822      	ldr	r2, [r4, #0]
 80072f2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007384 <_scanf_chars+0xb0>
 80072f6:	06d1      	lsls	r1, r2, #27
 80072f8:	bf5f      	itttt	pl
 80072fa:	681a      	ldrpl	r2, [r3, #0]
 80072fc:	1d11      	addpl	r1, r2, #4
 80072fe:	6019      	strpl	r1, [r3, #0]
 8007300:	6816      	ldrpl	r6, [r2, #0]
 8007302:	2700      	movs	r7, #0
 8007304:	69a0      	ldr	r0, [r4, #24]
 8007306:	b188      	cbz	r0, 800732c <_scanf_chars+0x58>
 8007308:	2801      	cmp	r0, #1
 800730a:	d107      	bne.n	800731c <_scanf_chars+0x48>
 800730c:	682a      	ldr	r2, [r5, #0]
 800730e:	7811      	ldrb	r1, [r2, #0]
 8007310:	6962      	ldr	r2, [r4, #20]
 8007312:	5c52      	ldrb	r2, [r2, r1]
 8007314:	b952      	cbnz	r2, 800732c <_scanf_chars+0x58>
 8007316:	2f00      	cmp	r7, #0
 8007318:	d031      	beq.n	800737e <_scanf_chars+0xaa>
 800731a:	e022      	b.n	8007362 <_scanf_chars+0x8e>
 800731c:	2802      	cmp	r0, #2
 800731e:	d120      	bne.n	8007362 <_scanf_chars+0x8e>
 8007320:	682b      	ldr	r3, [r5, #0]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007328:	071b      	lsls	r3, r3, #28
 800732a:	d41a      	bmi.n	8007362 <_scanf_chars+0x8e>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	06da      	lsls	r2, r3, #27
 8007330:	bf5e      	ittt	pl
 8007332:	682b      	ldrpl	r3, [r5, #0]
 8007334:	781b      	ldrbpl	r3, [r3, #0]
 8007336:	f806 3b01 	strbpl.w	r3, [r6], #1
 800733a:	682a      	ldr	r2, [r5, #0]
 800733c:	686b      	ldr	r3, [r5, #4]
 800733e:	3201      	adds	r2, #1
 8007340:	602a      	str	r2, [r5, #0]
 8007342:	68a2      	ldr	r2, [r4, #8]
 8007344:	3b01      	subs	r3, #1
 8007346:	3a01      	subs	r2, #1
 8007348:	606b      	str	r3, [r5, #4]
 800734a:	3701      	adds	r7, #1
 800734c:	60a2      	str	r2, [r4, #8]
 800734e:	b142      	cbz	r2, 8007362 <_scanf_chars+0x8e>
 8007350:	2b00      	cmp	r3, #0
 8007352:	dcd7      	bgt.n	8007304 <_scanf_chars+0x30>
 8007354:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007358:	4629      	mov	r1, r5
 800735a:	4640      	mov	r0, r8
 800735c:	4798      	blx	r3
 800735e:	2800      	cmp	r0, #0
 8007360:	d0d0      	beq.n	8007304 <_scanf_chars+0x30>
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	f013 0310 	ands.w	r3, r3, #16
 8007368:	d105      	bne.n	8007376 <_scanf_chars+0xa2>
 800736a:	68e2      	ldr	r2, [r4, #12]
 800736c:	3201      	adds	r2, #1
 800736e:	60e2      	str	r2, [r4, #12]
 8007370:	69a2      	ldr	r2, [r4, #24]
 8007372:	b102      	cbz	r2, 8007376 <_scanf_chars+0xa2>
 8007374:	7033      	strb	r3, [r6, #0]
 8007376:	6923      	ldr	r3, [r4, #16]
 8007378:	443b      	add	r3, r7
 800737a:	6123      	str	r3, [r4, #16]
 800737c:	2000      	movs	r0, #0
 800737e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007382:	bf00      	nop
 8007384:	08007b3c 	.word	0x08007b3c

08007388 <_scanf_i>:
 8007388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738c:	4698      	mov	r8, r3
 800738e:	4b76      	ldr	r3, [pc, #472]	; (8007568 <_scanf_i+0x1e0>)
 8007390:	460c      	mov	r4, r1
 8007392:	4682      	mov	sl, r0
 8007394:	4616      	mov	r6, r2
 8007396:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800739a:	b087      	sub	sp, #28
 800739c:	ab03      	add	r3, sp, #12
 800739e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80073a2:	4b72      	ldr	r3, [pc, #456]	; (800756c <_scanf_i+0x1e4>)
 80073a4:	69a1      	ldr	r1, [r4, #24]
 80073a6:	4a72      	ldr	r2, [pc, #456]	; (8007570 <_scanf_i+0x1e8>)
 80073a8:	2903      	cmp	r1, #3
 80073aa:	bf18      	it	ne
 80073ac:	461a      	movne	r2, r3
 80073ae:	68a3      	ldr	r3, [r4, #8]
 80073b0:	9201      	str	r2, [sp, #4]
 80073b2:	1e5a      	subs	r2, r3, #1
 80073b4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80073b8:	bf88      	it	hi
 80073ba:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80073be:	4627      	mov	r7, r4
 80073c0:	bf82      	ittt	hi
 80073c2:	eb03 0905 	addhi.w	r9, r3, r5
 80073c6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80073ca:	60a3      	strhi	r3, [r4, #8]
 80073cc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80073d0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80073d4:	bf98      	it	ls
 80073d6:	f04f 0900 	movls.w	r9, #0
 80073da:	6023      	str	r3, [r4, #0]
 80073dc:	463d      	mov	r5, r7
 80073de:	f04f 0b00 	mov.w	fp, #0
 80073e2:	6831      	ldr	r1, [r6, #0]
 80073e4:	ab03      	add	r3, sp, #12
 80073e6:	7809      	ldrb	r1, [r1, #0]
 80073e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80073ec:	2202      	movs	r2, #2
 80073ee:	f7f8 ff07 	bl	8000200 <memchr>
 80073f2:	b328      	cbz	r0, 8007440 <_scanf_i+0xb8>
 80073f4:	f1bb 0f01 	cmp.w	fp, #1
 80073f8:	d159      	bne.n	80074ae <_scanf_i+0x126>
 80073fa:	6862      	ldr	r2, [r4, #4]
 80073fc:	b92a      	cbnz	r2, 800740a <_scanf_i+0x82>
 80073fe:	6822      	ldr	r2, [r4, #0]
 8007400:	2308      	movs	r3, #8
 8007402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007406:	6063      	str	r3, [r4, #4]
 8007408:	6022      	str	r2, [r4, #0]
 800740a:	6822      	ldr	r2, [r4, #0]
 800740c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007410:	6022      	str	r2, [r4, #0]
 8007412:	68a2      	ldr	r2, [r4, #8]
 8007414:	1e51      	subs	r1, r2, #1
 8007416:	60a1      	str	r1, [r4, #8]
 8007418:	b192      	cbz	r2, 8007440 <_scanf_i+0xb8>
 800741a:	6832      	ldr	r2, [r6, #0]
 800741c:	1c51      	adds	r1, r2, #1
 800741e:	6031      	str	r1, [r6, #0]
 8007420:	7812      	ldrb	r2, [r2, #0]
 8007422:	f805 2b01 	strb.w	r2, [r5], #1
 8007426:	6872      	ldr	r2, [r6, #4]
 8007428:	3a01      	subs	r2, #1
 800742a:	2a00      	cmp	r2, #0
 800742c:	6072      	str	r2, [r6, #4]
 800742e:	dc07      	bgt.n	8007440 <_scanf_i+0xb8>
 8007430:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007434:	4631      	mov	r1, r6
 8007436:	4650      	mov	r0, sl
 8007438:	4790      	blx	r2
 800743a:	2800      	cmp	r0, #0
 800743c:	f040 8085 	bne.w	800754a <_scanf_i+0x1c2>
 8007440:	f10b 0b01 	add.w	fp, fp, #1
 8007444:	f1bb 0f03 	cmp.w	fp, #3
 8007448:	d1cb      	bne.n	80073e2 <_scanf_i+0x5a>
 800744a:	6863      	ldr	r3, [r4, #4]
 800744c:	b90b      	cbnz	r3, 8007452 <_scanf_i+0xca>
 800744e:	230a      	movs	r3, #10
 8007450:	6063      	str	r3, [r4, #4]
 8007452:	6863      	ldr	r3, [r4, #4]
 8007454:	4947      	ldr	r1, [pc, #284]	; (8007574 <_scanf_i+0x1ec>)
 8007456:	6960      	ldr	r0, [r4, #20]
 8007458:	1ac9      	subs	r1, r1, r3
 800745a:	f000 f8af 	bl	80075bc <__sccl>
 800745e:	f04f 0b00 	mov.w	fp, #0
 8007462:	68a3      	ldr	r3, [r4, #8]
 8007464:	6822      	ldr	r2, [r4, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d03d      	beq.n	80074e6 <_scanf_i+0x15e>
 800746a:	6831      	ldr	r1, [r6, #0]
 800746c:	6960      	ldr	r0, [r4, #20]
 800746e:	f891 c000 	ldrb.w	ip, [r1]
 8007472:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007476:	2800      	cmp	r0, #0
 8007478:	d035      	beq.n	80074e6 <_scanf_i+0x15e>
 800747a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800747e:	d124      	bne.n	80074ca <_scanf_i+0x142>
 8007480:	0510      	lsls	r0, r2, #20
 8007482:	d522      	bpl.n	80074ca <_scanf_i+0x142>
 8007484:	f10b 0b01 	add.w	fp, fp, #1
 8007488:	f1b9 0f00 	cmp.w	r9, #0
 800748c:	d003      	beq.n	8007496 <_scanf_i+0x10e>
 800748e:	3301      	adds	r3, #1
 8007490:	f109 39ff 	add.w	r9, r9, #4294967295
 8007494:	60a3      	str	r3, [r4, #8]
 8007496:	6873      	ldr	r3, [r6, #4]
 8007498:	3b01      	subs	r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	6073      	str	r3, [r6, #4]
 800749e:	dd1b      	ble.n	80074d8 <_scanf_i+0x150>
 80074a0:	6833      	ldr	r3, [r6, #0]
 80074a2:	3301      	adds	r3, #1
 80074a4:	6033      	str	r3, [r6, #0]
 80074a6:	68a3      	ldr	r3, [r4, #8]
 80074a8:	3b01      	subs	r3, #1
 80074aa:	60a3      	str	r3, [r4, #8]
 80074ac:	e7d9      	b.n	8007462 <_scanf_i+0xda>
 80074ae:	f1bb 0f02 	cmp.w	fp, #2
 80074b2:	d1ae      	bne.n	8007412 <_scanf_i+0x8a>
 80074b4:	6822      	ldr	r2, [r4, #0]
 80074b6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80074ba:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80074be:	d1bf      	bne.n	8007440 <_scanf_i+0xb8>
 80074c0:	2310      	movs	r3, #16
 80074c2:	6063      	str	r3, [r4, #4]
 80074c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074c8:	e7a2      	b.n	8007410 <_scanf_i+0x88>
 80074ca:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80074ce:	6022      	str	r2, [r4, #0]
 80074d0:	780b      	ldrb	r3, [r1, #0]
 80074d2:	f805 3b01 	strb.w	r3, [r5], #1
 80074d6:	e7de      	b.n	8007496 <_scanf_i+0x10e>
 80074d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80074dc:	4631      	mov	r1, r6
 80074de:	4650      	mov	r0, sl
 80074e0:	4798      	blx	r3
 80074e2:	2800      	cmp	r0, #0
 80074e4:	d0df      	beq.n	80074a6 <_scanf_i+0x11e>
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	05db      	lsls	r3, r3, #23
 80074ea:	d50d      	bpl.n	8007508 <_scanf_i+0x180>
 80074ec:	42bd      	cmp	r5, r7
 80074ee:	d909      	bls.n	8007504 <_scanf_i+0x17c>
 80074f0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80074f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074f8:	4632      	mov	r2, r6
 80074fa:	4650      	mov	r0, sl
 80074fc:	4798      	blx	r3
 80074fe:	f105 39ff 	add.w	r9, r5, #4294967295
 8007502:	464d      	mov	r5, r9
 8007504:	42bd      	cmp	r5, r7
 8007506:	d02d      	beq.n	8007564 <_scanf_i+0x1dc>
 8007508:	6822      	ldr	r2, [r4, #0]
 800750a:	f012 0210 	ands.w	r2, r2, #16
 800750e:	d113      	bne.n	8007538 <_scanf_i+0x1b0>
 8007510:	702a      	strb	r2, [r5, #0]
 8007512:	6863      	ldr	r3, [r4, #4]
 8007514:	9e01      	ldr	r6, [sp, #4]
 8007516:	4639      	mov	r1, r7
 8007518:	4650      	mov	r0, sl
 800751a:	47b0      	blx	r6
 800751c:	6821      	ldr	r1, [r4, #0]
 800751e:	f8d8 3000 	ldr.w	r3, [r8]
 8007522:	f011 0f20 	tst.w	r1, #32
 8007526:	d013      	beq.n	8007550 <_scanf_i+0x1c8>
 8007528:	1d1a      	adds	r2, r3, #4
 800752a:	f8c8 2000 	str.w	r2, [r8]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6018      	str	r0, [r3, #0]
 8007532:	68e3      	ldr	r3, [r4, #12]
 8007534:	3301      	adds	r3, #1
 8007536:	60e3      	str	r3, [r4, #12]
 8007538:	1bed      	subs	r5, r5, r7
 800753a:	44ab      	add	fp, r5
 800753c:	6925      	ldr	r5, [r4, #16]
 800753e:	445d      	add	r5, fp
 8007540:	6125      	str	r5, [r4, #16]
 8007542:	2000      	movs	r0, #0
 8007544:	b007      	add	sp, #28
 8007546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800754a:	f04f 0b00 	mov.w	fp, #0
 800754e:	e7ca      	b.n	80074e6 <_scanf_i+0x15e>
 8007550:	1d1a      	adds	r2, r3, #4
 8007552:	f8c8 2000 	str.w	r2, [r8]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f011 0f01 	tst.w	r1, #1
 800755c:	bf14      	ite	ne
 800755e:	8018      	strhne	r0, [r3, #0]
 8007560:	6018      	streq	r0, [r3, #0]
 8007562:	e7e6      	b.n	8007532 <_scanf_i+0x1aa>
 8007564:	2001      	movs	r0, #1
 8007566:	e7ed      	b.n	8007544 <_scanf_i+0x1bc>
 8007568:	08007a64 	.word	0x08007a64
 800756c:	08007819 	.word	0x08007819
 8007570:	08007731 	.word	0x08007731
 8007574:	08007b39 	.word	0x08007b39

08007578 <_read_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	4d07      	ldr	r5, [pc, #28]	; (8007598 <_read_r+0x20>)
 800757c:	4604      	mov	r4, r0
 800757e:	4608      	mov	r0, r1
 8007580:	4611      	mov	r1, r2
 8007582:	2200      	movs	r2, #0
 8007584:	602a      	str	r2, [r5, #0]
 8007586:	461a      	mov	r2, r3
 8007588:	f7f9 fe50 	bl	800122c <_read>
 800758c:	1c43      	adds	r3, r0, #1
 800758e:	d102      	bne.n	8007596 <_read_r+0x1e>
 8007590:	682b      	ldr	r3, [r5, #0]
 8007592:	b103      	cbz	r3, 8007596 <_read_r+0x1e>
 8007594:	6023      	str	r3, [r4, #0]
 8007596:	bd38      	pop	{r3, r4, r5, pc}
 8007598:	20000364 	.word	0x20000364

0800759c <_sbrk_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4d06      	ldr	r5, [pc, #24]	; (80075b8 <_sbrk_r+0x1c>)
 80075a0:	2300      	movs	r3, #0
 80075a2:	4604      	mov	r4, r0
 80075a4:	4608      	mov	r0, r1
 80075a6:	602b      	str	r3, [r5, #0]
 80075a8:	f7f9 fe92 	bl	80012d0 <_sbrk>
 80075ac:	1c43      	adds	r3, r0, #1
 80075ae:	d102      	bne.n	80075b6 <_sbrk_r+0x1a>
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	b103      	cbz	r3, 80075b6 <_sbrk_r+0x1a>
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	bd38      	pop	{r3, r4, r5, pc}
 80075b8:	20000364 	.word	0x20000364

080075bc <__sccl>:
 80075bc:	b570      	push	{r4, r5, r6, lr}
 80075be:	780b      	ldrb	r3, [r1, #0]
 80075c0:	4604      	mov	r4, r0
 80075c2:	2b5e      	cmp	r3, #94	; 0x5e
 80075c4:	bf0b      	itete	eq
 80075c6:	784b      	ldrbeq	r3, [r1, #1]
 80075c8:	1c48      	addne	r0, r1, #1
 80075ca:	1c88      	addeq	r0, r1, #2
 80075cc:	2200      	movne	r2, #0
 80075ce:	bf08      	it	eq
 80075d0:	2201      	moveq	r2, #1
 80075d2:	1e61      	subs	r1, r4, #1
 80075d4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80075d8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80075dc:	42a9      	cmp	r1, r5
 80075de:	d1fb      	bne.n	80075d8 <__sccl+0x1c>
 80075e0:	b90b      	cbnz	r3, 80075e6 <__sccl+0x2a>
 80075e2:	3801      	subs	r0, #1
 80075e4:	bd70      	pop	{r4, r5, r6, pc}
 80075e6:	f082 0201 	eor.w	r2, r2, #1
 80075ea:	54e2      	strb	r2, [r4, r3]
 80075ec:	4605      	mov	r5, r0
 80075ee:	4628      	mov	r0, r5
 80075f0:	f810 1b01 	ldrb.w	r1, [r0], #1
 80075f4:	292d      	cmp	r1, #45	; 0x2d
 80075f6:	d006      	beq.n	8007606 <__sccl+0x4a>
 80075f8:	295d      	cmp	r1, #93	; 0x5d
 80075fa:	d0f3      	beq.n	80075e4 <__sccl+0x28>
 80075fc:	b909      	cbnz	r1, 8007602 <__sccl+0x46>
 80075fe:	4628      	mov	r0, r5
 8007600:	e7f0      	b.n	80075e4 <__sccl+0x28>
 8007602:	460b      	mov	r3, r1
 8007604:	e7f1      	b.n	80075ea <__sccl+0x2e>
 8007606:	786e      	ldrb	r6, [r5, #1]
 8007608:	2e5d      	cmp	r6, #93	; 0x5d
 800760a:	d0fa      	beq.n	8007602 <__sccl+0x46>
 800760c:	42b3      	cmp	r3, r6
 800760e:	dcf8      	bgt.n	8007602 <__sccl+0x46>
 8007610:	3502      	adds	r5, #2
 8007612:	4619      	mov	r1, r3
 8007614:	3101      	adds	r1, #1
 8007616:	428e      	cmp	r6, r1
 8007618:	5462      	strb	r2, [r4, r1]
 800761a:	dcfb      	bgt.n	8007614 <__sccl+0x58>
 800761c:	1af1      	subs	r1, r6, r3
 800761e:	3901      	subs	r1, #1
 8007620:	1c58      	adds	r0, r3, #1
 8007622:	42b3      	cmp	r3, r6
 8007624:	bfa8      	it	ge
 8007626:	2100      	movge	r1, #0
 8007628:	1843      	adds	r3, r0, r1
 800762a:	e7e0      	b.n	80075ee <__sccl+0x32>

0800762c <_strtol_l.constprop.0>:
 800762c:	2b01      	cmp	r3, #1
 800762e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007632:	d001      	beq.n	8007638 <_strtol_l.constprop.0+0xc>
 8007634:	2b24      	cmp	r3, #36	; 0x24
 8007636:	d906      	bls.n	8007646 <_strtol_l.constprop.0+0x1a>
 8007638:	f7fe ff6c 	bl	8006514 <__errno>
 800763c:	2316      	movs	r3, #22
 800763e:	6003      	str	r3, [r0, #0]
 8007640:	2000      	movs	r0, #0
 8007642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007646:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800772c <_strtol_l.constprop.0+0x100>
 800764a:	460d      	mov	r5, r1
 800764c:	462e      	mov	r6, r5
 800764e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007652:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007656:	f017 0708 	ands.w	r7, r7, #8
 800765a:	d1f7      	bne.n	800764c <_strtol_l.constprop.0+0x20>
 800765c:	2c2d      	cmp	r4, #45	; 0x2d
 800765e:	d132      	bne.n	80076c6 <_strtol_l.constprop.0+0x9a>
 8007660:	782c      	ldrb	r4, [r5, #0]
 8007662:	2701      	movs	r7, #1
 8007664:	1cb5      	adds	r5, r6, #2
 8007666:	2b00      	cmp	r3, #0
 8007668:	d05b      	beq.n	8007722 <_strtol_l.constprop.0+0xf6>
 800766a:	2b10      	cmp	r3, #16
 800766c:	d109      	bne.n	8007682 <_strtol_l.constprop.0+0x56>
 800766e:	2c30      	cmp	r4, #48	; 0x30
 8007670:	d107      	bne.n	8007682 <_strtol_l.constprop.0+0x56>
 8007672:	782c      	ldrb	r4, [r5, #0]
 8007674:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007678:	2c58      	cmp	r4, #88	; 0x58
 800767a:	d14d      	bne.n	8007718 <_strtol_l.constprop.0+0xec>
 800767c:	786c      	ldrb	r4, [r5, #1]
 800767e:	2310      	movs	r3, #16
 8007680:	3502      	adds	r5, #2
 8007682:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007686:	f108 38ff 	add.w	r8, r8, #4294967295
 800768a:	f04f 0c00 	mov.w	ip, #0
 800768e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007692:	4666      	mov	r6, ip
 8007694:	fb03 8a19 	mls	sl, r3, r9, r8
 8007698:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800769c:	f1be 0f09 	cmp.w	lr, #9
 80076a0:	d816      	bhi.n	80076d0 <_strtol_l.constprop.0+0xa4>
 80076a2:	4674      	mov	r4, lr
 80076a4:	42a3      	cmp	r3, r4
 80076a6:	dd24      	ble.n	80076f2 <_strtol_l.constprop.0+0xc6>
 80076a8:	f1bc 0f00 	cmp.w	ip, #0
 80076ac:	db1e      	blt.n	80076ec <_strtol_l.constprop.0+0xc0>
 80076ae:	45b1      	cmp	r9, r6
 80076b0:	d31c      	bcc.n	80076ec <_strtol_l.constprop.0+0xc0>
 80076b2:	d101      	bne.n	80076b8 <_strtol_l.constprop.0+0x8c>
 80076b4:	45a2      	cmp	sl, r4
 80076b6:	db19      	blt.n	80076ec <_strtol_l.constprop.0+0xc0>
 80076b8:	fb06 4603 	mla	r6, r6, r3, r4
 80076bc:	f04f 0c01 	mov.w	ip, #1
 80076c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076c4:	e7e8      	b.n	8007698 <_strtol_l.constprop.0+0x6c>
 80076c6:	2c2b      	cmp	r4, #43	; 0x2b
 80076c8:	bf04      	itt	eq
 80076ca:	782c      	ldrbeq	r4, [r5, #0]
 80076cc:	1cb5      	addeq	r5, r6, #2
 80076ce:	e7ca      	b.n	8007666 <_strtol_l.constprop.0+0x3a>
 80076d0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80076d4:	f1be 0f19 	cmp.w	lr, #25
 80076d8:	d801      	bhi.n	80076de <_strtol_l.constprop.0+0xb2>
 80076da:	3c37      	subs	r4, #55	; 0x37
 80076dc:	e7e2      	b.n	80076a4 <_strtol_l.constprop.0+0x78>
 80076de:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80076e2:	f1be 0f19 	cmp.w	lr, #25
 80076e6:	d804      	bhi.n	80076f2 <_strtol_l.constprop.0+0xc6>
 80076e8:	3c57      	subs	r4, #87	; 0x57
 80076ea:	e7db      	b.n	80076a4 <_strtol_l.constprop.0+0x78>
 80076ec:	f04f 3cff 	mov.w	ip, #4294967295
 80076f0:	e7e6      	b.n	80076c0 <_strtol_l.constprop.0+0x94>
 80076f2:	f1bc 0f00 	cmp.w	ip, #0
 80076f6:	da05      	bge.n	8007704 <_strtol_l.constprop.0+0xd8>
 80076f8:	2322      	movs	r3, #34	; 0x22
 80076fa:	6003      	str	r3, [r0, #0]
 80076fc:	4646      	mov	r6, r8
 80076fe:	b942      	cbnz	r2, 8007712 <_strtol_l.constprop.0+0xe6>
 8007700:	4630      	mov	r0, r6
 8007702:	e79e      	b.n	8007642 <_strtol_l.constprop.0+0x16>
 8007704:	b107      	cbz	r7, 8007708 <_strtol_l.constprop.0+0xdc>
 8007706:	4276      	negs	r6, r6
 8007708:	2a00      	cmp	r2, #0
 800770a:	d0f9      	beq.n	8007700 <_strtol_l.constprop.0+0xd4>
 800770c:	f1bc 0f00 	cmp.w	ip, #0
 8007710:	d000      	beq.n	8007714 <_strtol_l.constprop.0+0xe8>
 8007712:	1e69      	subs	r1, r5, #1
 8007714:	6011      	str	r1, [r2, #0]
 8007716:	e7f3      	b.n	8007700 <_strtol_l.constprop.0+0xd4>
 8007718:	2430      	movs	r4, #48	; 0x30
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1b1      	bne.n	8007682 <_strtol_l.constprop.0+0x56>
 800771e:	2308      	movs	r3, #8
 8007720:	e7af      	b.n	8007682 <_strtol_l.constprop.0+0x56>
 8007722:	2c30      	cmp	r4, #48	; 0x30
 8007724:	d0a5      	beq.n	8007672 <_strtol_l.constprop.0+0x46>
 8007726:	230a      	movs	r3, #10
 8007728:	e7ab      	b.n	8007682 <_strtol_l.constprop.0+0x56>
 800772a:	bf00      	nop
 800772c:	08007b3c 	.word	0x08007b3c

08007730 <_strtol_r>:
 8007730:	f7ff bf7c 	b.w	800762c <_strtol_l.constprop.0>

08007734 <_strtoul_l.constprop.0>:
 8007734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007738:	4f36      	ldr	r7, [pc, #216]	; (8007814 <_strtoul_l.constprop.0+0xe0>)
 800773a:	4686      	mov	lr, r0
 800773c:	460d      	mov	r5, r1
 800773e:	4628      	mov	r0, r5
 8007740:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007744:	5de6      	ldrb	r6, [r4, r7]
 8007746:	f016 0608 	ands.w	r6, r6, #8
 800774a:	d1f8      	bne.n	800773e <_strtoul_l.constprop.0+0xa>
 800774c:	2c2d      	cmp	r4, #45	; 0x2d
 800774e:	d12f      	bne.n	80077b0 <_strtoul_l.constprop.0+0x7c>
 8007750:	782c      	ldrb	r4, [r5, #0]
 8007752:	2601      	movs	r6, #1
 8007754:	1c85      	adds	r5, r0, #2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d057      	beq.n	800780a <_strtoul_l.constprop.0+0xd6>
 800775a:	2b10      	cmp	r3, #16
 800775c:	d109      	bne.n	8007772 <_strtoul_l.constprop.0+0x3e>
 800775e:	2c30      	cmp	r4, #48	; 0x30
 8007760:	d107      	bne.n	8007772 <_strtoul_l.constprop.0+0x3e>
 8007762:	7828      	ldrb	r0, [r5, #0]
 8007764:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007768:	2858      	cmp	r0, #88	; 0x58
 800776a:	d149      	bne.n	8007800 <_strtoul_l.constprop.0+0xcc>
 800776c:	786c      	ldrb	r4, [r5, #1]
 800776e:	2310      	movs	r3, #16
 8007770:	3502      	adds	r5, #2
 8007772:	f04f 38ff 	mov.w	r8, #4294967295
 8007776:	2700      	movs	r7, #0
 8007778:	fbb8 f8f3 	udiv	r8, r8, r3
 800777c:	fb03 f908 	mul.w	r9, r3, r8
 8007780:	ea6f 0909 	mvn.w	r9, r9
 8007784:	4638      	mov	r0, r7
 8007786:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800778a:	f1bc 0f09 	cmp.w	ip, #9
 800778e:	d814      	bhi.n	80077ba <_strtoul_l.constprop.0+0x86>
 8007790:	4664      	mov	r4, ip
 8007792:	42a3      	cmp	r3, r4
 8007794:	dd22      	ble.n	80077dc <_strtoul_l.constprop.0+0xa8>
 8007796:	2f00      	cmp	r7, #0
 8007798:	db1d      	blt.n	80077d6 <_strtoul_l.constprop.0+0xa2>
 800779a:	4580      	cmp	r8, r0
 800779c:	d31b      	bcc.n	80077d6 <_strtoul_l.constprop.0+0xa2>
 800779e:	d101      	bne.n	80077a4 <_strtoul_l.constprop.0+0x70>
 80077a0:	45a1      	cmp	r9, r4
 80077a2:	db18      	blt.n	80077d6 <_strtoul_l.constprop.0+0xa2>
 80077a4:	fb00 4003 	mla	r0, r0, r3, r4
 80077a8:	2701      	movs	r7, #1
 80077aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077ae:	e7ea      	b.n	8007786 <_strtoul_l.constprop.0+0x52>
 80077b0:	2c2b      	cmp	r4, #43	; 0x2b
 80077b2:	bf04      	itt	eq
 80077b4:	782c      	ldrbeq	r4, [r5, #0]
 80077b6:	1c85      	addeq	r5, r0, #2
 80077b8:	e7cd      	b.n	8007756 <_strtoul_l.constprop.0+0x22>
 80077ba:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80077be:	f1bc 0f19 	cmp.w	ip, #25
 80077c2:	d801      	bhi.n	80077c8 <_strtoul_l.constprop.0+0x94>
 80077c4:	3c37      	subs	r4, #55	; 0x37
 80077c6:	e7e4      	b.n	8007792 <_strtoul_l.constprop.0+0x5e>
 80077c8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80077cc:	f1bc 0f19 	cmp.w	ip, #25
 80077d0:	d804      	bhi.n	80077dc <_strtoul_l.constprop.0+0xa8>
 80077d2:	3c57      	subs	r4, #87	; 0x57
 80077d4:	e7dd      	b.n	8007792 <_strtoul_l.constprop.0+0x5e>
 80077d6:	f04f 37ff 	mov.w	r7, #4294967295
 80077da:	e7e6      	b.n	80077aa <_strtoul_l.constprop.0+0x76>
 80077dc:	2f00      	cmp	r7, #0
 80077de:	da07      	bge.n	80077f0 <_strtoul_l.constprop.0+0xbc>
 80077e0:	2322      	movs	r3, #34	; 0x22
 80077e2:	f8ce 3000 	str.w	r3, [lr]
 80077e6:	f04f 30ff 	mov.w	r0, #4294967295
 80077ea:	b932      	cbnz	r2, 80077fa <_strtoul_l.constprop.0+0xc6>
 80077ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077f0:	b106      	cbz	r6, 80077f4 <_strtoul_l.constprop.0+0xc0>
 80077f2:	4240      	negs	r0, r0
 80077f4:	2a00      	cmp	r2, #0
 80077f6:	d0f9      	beq.n	80077ec <_strtoul_l.constprop.0+0xb8>
 80077f8:	b107      	cbz	r7, 80077fc <_strtoul_l.constprop.0+0xc8>
 80077fa:	1e69      	subs	r1, r5, #1
 80077fc:	6011      	str	r1, [r2, #0]
 80077fe:	e7f5      	b.n	80077ec <_strtoul_l.constprop.0+0xb8>
 8007800:	2430      	movs	r4, #48	; 0x30
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1b5      	bne.n	8007772 <_strtoul_l.constprop.0+0x3e>
 8007806:	2308      	movs	r3, #8
 8007808:	e7b3      	b.n	8007772 <_strtoul_l.constprop.0+0x3e>
 800780a:	2c30      	cmp	r4, #48	; 0x30
 800780c:	d0a9      	beq.n	8007762 <_strtoul_l.constprop.0+0x2e>
 800780e:	230a      	movs	r3, #10
 8007810:	e7af      	b.n	8007772 <_strtoul_l.constprop.0+0x3e>
 8007812:	bf00      	nop
 8007814:	08007b3c 	.word	0x08007b3c

08007818 <_strtoul_r>:
 8007818:	f7ff bf8c 	b.w	8007734 <_strtoul_l.constprop.0>

0800781c <__submore>:
 800781c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007820:	460c      	mov	r4, r1
 8007822:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007828:	4299      	cmp	r1, r3
 800782a:	d11d      	bne.n	8007868 <__submore+0x4c>
 800782c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007830:	f7ff fb0a 	bl	8006e48 <_malloc_r>
 8007834:	b918      	cbnz	r0, 800783e <__submore+0x22>
 8007836:	f04f 30ff 	mov.w	r0, #4294967295
 800783a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800783e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007842:	63a3      	str	r3, [r4, #56]	; 0x38
 8007844:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007848:	6360      	str	r0, [r4, #52]	; 0x34
 800784a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800784e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007852:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007856:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800785a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800785e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007862:	6020      	str	r0, [r4, #0]
 8007864:	2000      	movs	r0, #0
 8007866:	e7e8      	b.n	800783a <__submore+0x1e>
 8007868:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800786a:	0077      	lsls	r7, r6, #1
 800786c:	463a      	mov	r2, r7
 800786e:	f000 f84b 	bl	8007908 <_realloc_r>
 8007872:	4605      	mov	r5, r0
 8007874:	2800      	cmp	r0, #0
 8007876:	d0de      	beq.n	8007836 <__submore+0x1a>
 8007878:	eb00 0806 	add.w	r8, r0, r6
 800787c:	4601      	mov	r1, r0
 800787e:	4632      	mov	r2, r6
 8007880:	4640      	mov	r0, r8
 8007882:	f000 f827 	bl	80078d4 <memcpy>
 8007886:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800788a:	f8c4 8000 	str.w	r8, [r4]
 800788e:	e7e9      	b.n	8007864 <__submore+0x48>

08007890 <_fstat_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	4d07      	ldr	r5, [pc, #28]	; (80078b0 <_fstat_r+0x20>)
 8007894:	2300      	movs	r3, #0
 8007896:	4604      	mov	r4, r0
 8007898:	4608      	mov	r0, r1
 800789a:	4611      	mov	r1, r2
 800789c:	602b      	str	r3, [r5, #0]
 800789e:	f7f9 fcee 	bl	800127e <_fstat>
 80078a2:	1c43      	adds	r3, r0, #1
 80078a4:	d102      	bne.n	80078ac <_fstat_r+0x1c>
 80078a6:	682b      	ldr	r3, [r5, #0]
 80078a8:	b103      	cbz	r3, 80078ac <_fstat_r+0x1c>
 80078aa:	6023      	str	r3, [r4, #0]
 80078ac:	bd38      	pop	{r3, r4, r5, pc}
 80078ae:	bf00      	nop
 80078b0:	20000364 	.word	0x20000364

080078b4 <_isatty_r>:
 80078b4:	b538      	push	{r3, r4, r5, lr}
 80078b6:	4d06      	ldr	r5, [pc, #24]	; (80078d0 <_isatty_r+0x1c>)
 80078b8:	2300      	movs	r3, #0
 80078ba:	4604      	mov	r4, r0
 80078bc:	4608      	mov	r0, r1
 80078be:	602b      	str	r3, [r5, #0]
 80078c0:	f7f9 fced 	bl	800129e <_isatty>
 80078c4:	1c43      	adds	r3, r0, #1
 80078c6:	d102      	bne.n	80078ce <_isatty_r+0x1a>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	b103      	cbz	r3, 80078ce <_isatty_r+0x1a>
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	bd38      	pop	{r3, r4, r5, pc}
 80078d0:	20000364 	.word	0x20000364

080078d4 <memcpy>:
 80078d4:	440a      	add	r2, r1
 80078d6:	4291      	cmp	r1, r2
 80078d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80078dc:	d100      	bne.n	80078e0 <memcpy+0xc>
 80078de:	4770      	bx	lr
 80078e0:	b510      	push	{r4, lr}
 80078e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078ea:	4291      	cmp	r1, r2
 80078ec:	d1f9      	bne.n	80078e2 <memcpy+0xe>
 80078ee:	bd10      	pop	{r4, pc}

080078f0 <__malloc_lock>:
 80078f0:	4801      	ldr	r0, [pc, #4]	; (80078f8 <__malloc_lock+0x8>)
 80078f2:	f7ff b9c3 	b.w	8006c7c <__retarget_lock_acquire_recursive>
 80078f6:	bf00      	nop
 80078f8:	20000358 	.word	0x20000358

080078fc <__malloc_unlock>:
 80078fc:	4801      	ldr	r0, [pc, #4]	; (8007904 <__malloc_unlock+0x8>)
 80078fe:	f7ff b9be 	b.w	8006c7e <__retarget_lock_release_recursive>
 8007902:	bf00      	nop
 8007904:	20000358 	.word	0x20000358

08007908 <_realloc_r>:
 8007908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800790c:	4680      	mov	r8, r0
 800790e:	4614      	mov	r4, r2
 8007910:	460e      	mov	r6, r1
 8007912:	b921      	cbnz	r1, 800791e <_realloc_r+0x16>
 8007914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007918:	4611      	mov	r1, r2
 800791a:	f7ff ba95 	b.w	8006e48 <_malloc_r>
 800791e:	b92a      	cbnz	r2, 800792c <_realloc_r+0x24>
 8007920:	f7ff fa26 	bl	8006d70 <_free_r>
 8007924:	4625      	mov	r5, r4
 8007926:	4628      	mov	r0, r5
 8007928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800792c:	f000 f81b 	bl	8007966 <_malloc_usable_size_r>
 8007930:	4284      	cmp	r4, r0
 8007932:	4607      	mov	r7, r0
 8007934:	d802      	bhi.n	800793c <_realloc_r+0x34>
 8007936:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800793a:	d812      	bhi.n	8007962 <_realloc_r+0x5a>
 800793c:	4621      	mov	r1, r4
 800793e:	4640      	mov	r0, r8
 8007940:	f7ff fa82 	bl	8006e48 <_malloc_r>
 8007944:	4605      	mov	r5, r0
 8007946:	2800      	cmp	r0, #0
 8007948:	d0ed      	beq.n	8007926 <_realloc_r+0x1e>
 800794a:	42bc      	cmp	r4, r7
 800794c:	4622      	mov	r2, r4
 800794e:	4631      	mov	r1, r6
 8007950:	bf28      	it	cs
 8007952:	463a      	movcs	r2, r7
 8007954:	f7ff ffbe 	bl	80078d4 <memcpy>
 8007958:	4631      	mov	r1, r6
 800795a:	4640      	mov	r0, r8
 800795c:	f7ff fa08 	bl	8006d70 <_free_r>
 8007960:	e7e1      	b.n	8007926 <_realloc_r+0x1e>
 8007962:	4635      	mov	r5, r6
 8007964:	e7df      	b.n	8007926 <_realloc_r+0x1e>

08007966 <_malloc_usable_size_r>:
 8007966:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800796a:	1f18      	subs	r0, r3, #4
 800796c:	2b00      	cmp	r3, #0
 800796e:	bfbc      	itt	lt
 8007970:	580b      	ldrlt	r3, [r1, r0]
 8007972:	18c0      	addlt	r0, r0, r3
 8007974:	4770      	bx	lr
	...

08007978 <_init>:
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	bf00      	nop
 800797c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800797e:	bc08      	pop	{r3}
 8007980:	469e      	mov	lr, r3
 8007982:	4770      	bx	lr

08007984 <_fini>:
 8007984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007986:	bf00      	nop
 8007988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798a:	bc08      	pop	{r3}
 800798c:	469e      	mov	lr, r3
 800798e:	4770      	bx	lr
