
myproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  080060b8  080060b8  000160b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006334  08006334  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006334  08006334  00016334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800633c  0800633c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800633c  0800633c  0001633c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006340  08006340  00016340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000070  080063b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080063b4  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127e4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002630  00000000  00000000  00032884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00034eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00035f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002822e  00000000  00000000  00036ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e64  00000000  00000000  0005f0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5f11  00000000  00000000  00071f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00167e73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed0  00000000  00000000  00167ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060a0 	.word	0x080060a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080060a0 	.word	0x080060a0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <UART_Transmit>:
#define OPTION1 "1. Start LED blinking\n\r"
#define OPTION2 "2. Stop LED blinking\n\r"
#define PROMPT "Select Option >\n\r"

int UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, size_t len)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
	if (HAL_UART_Transmit_IT(huart, pData, len) != HAL_OK) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	68b9      	ldr	r1, [r7, #8]
 80005b8:	68f8      	ldr	r0, [r7, #12]
 80005ba:	f002 ff87 	bl	80034cc <HAL_UART_Transmit_IT>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d009      	beq.n	80005d8 <UART_Transmit+0x34>
		if (!RingBuffer_Write(&txrb, pData, len)) {
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	68b9      	ldr	r1, [r7, #8]
 80005c8:	4806      	ldr	r0, [pc, #24]	; (80005e4 <UART_Transmit+0x40>)
 80005ca:	f000 faed 	bl	8000ba8 <RingBuffer_Write>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d101      	bne.n	80005d8 <UART_Transmit+0x34>
			return 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	e000      	b.n	80005da <UART_Transmit+0x36>
		}
	}
	return 1;
 80005d8:	2301      	movs	r3, #1
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2000015c 	.word	0x2000015c

080005e8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	uint8_t txData;
	if (!RingBuffer_IsEmpty(&txrb)) {
 80005f0:	480b      	ldr	r0, [pc, #44]	; (8000620 <HAL_UART_TxCpltCallback+0x38>)
 80005f2:	f000 faa8 	bl	8000b46 <RingBuffer_IsEmpty>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d10d      	bne.n	8000618 <HAL_UART_TxCpltCallback+0x30>
		RingBuffer_Read(&txrb, &txData, 1);
 80005fc:	f107 030f 	add.w	r3, r7, #15
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	4806      	ldr	r0, [pc, #24]	; (8000620 <HAL_UART_TxCpltCallback+0x38>)
 8000606:	f000 fb09 	bl	8000c1c <RingBuffer_Read>
		HAL_UART_Transmit_IT(huart, &txData, 1);
 800060a:	f107 030f 	add.w	r3, r7, #15
 800060e:	2201      	movs	r2, #1
 8000610:	4619      	mov	r1, r3
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f002 ff5a 	bl	80034cc <HAL_UART_Transmit_IT>
	}
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000015c 	.word	0x2000015c

08000624 <printMessages2>:
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)OPTION1, strlen(OPTION1));
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)OPTION2, strlen(OPTION2));
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)PROMPT, strlen(PROMPT));
}

void printMessages2(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	UART_Transmit(&huart2, (uint8_t*)WELCOME_MSG, strlen(WELCOME_MSG));
 8000628:	2216      	movs	r2, #22
 800062a:	490d      	ldr	r1, [pc, #52]	; (8000660 <printMessages2+0x3c>)
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <printMessages2+0x40>)
 800062e:	f7ff ffb9 	bl	80005a4 <UART_Transmit>
	UART_Transmit(&huart2, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU));
 8000632:	2214      	movs	r2, #20
 8000634:	490c      	ldr	r1, [pc, #48]	; (8000668 <printMessages2+0x44>)
 8000636:	480b      	ldr	r0, [pc, #44]	; (8000664 <printMessages2+0x40>)
 8000638:	f7ff ffb4 	bl	80005a4 <UART_Transmit>
	UART_Transmit(&huart2, (uint8_t*)OPTION1, strlen(OPTION1));
 800063c:	2217      	movs	r2, #23
 800063e:	490b      	ldr	r1, [pc, #44]	; (800066c <printMessages2+0x48>)
 8000640:	4808      	ldr	r0, [pc, #32]	; (8000664 <printMessages2+0x40>)
 8000642:	f7ff ffaf 	bl	80005a4 <UART_Transmit>
	UART_Transmit(&huart2, (uint8_t*)OPTION2, strlen(OPTION2));
 8000646:	2216      	movs	r2, #22
 8000648:	4909      	ldr	r1, [pc, #36]	; (8000670 <printMessages2+0x4c>)
 800064a:	4806      	ldr	r0, [pc, #24]	; (8000664 <printMessages2+0x40>)
 800064c:	f7ff ffaa 	bl	80005a4 <UART_Transmit>
	UART_Transmit(&huart2, (uint8_t*)PROMPT, strlen(PROMPT));
 8000650:	2211      	movs	r2, #17
 8000652:	4908      	ldr	r1, [pc, #32]	; (8000674 <printMessages2+0x50>)
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <printMessages2+0x40>)
 8000656:	f7ff ffa5 	bl	80005a4 <UART_Transmit>
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	080060b8 	.word	0x080060b8
 8000664:	200000d8 	.word	0x200000d8
 8000668:	080060d0 	.word	0x080060d0
 800066c:	080060e8 	.word	0x080060e8
 8000670:	08006100 	.word	0x08006100
 8000674:	08006118 	.word	0x08006118

08000678 <ledTask>:
enum LedTaskState ledState;
int ledCount;
int ledMaxCount;

void ledTask()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	if (ledState == LedOn)
 800067c:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <ledTask+0x34>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d110      	bne.n	80006a6 <ledTask+0x2e>
	{
		if (ledCount++ >= ledMaxCount)
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <ledTask+0x38>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	1c5a      	adds	r2, r3, #1
 800068a:	4909      	ldr	r1, [pc, #36]	; (80006b0 <ledTask+0x38>)
 800068c:	600a      	str	r2, [r1, #0]
 800068e:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <ledTask+0x3c>)
 8000690:	6812      	ldr	r2, [r2, #0]
 8000692:	4293      	cmp	r3, r2
 8000694:	db07      	blt.n	80006a6 <ledTask+0x2e>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000696:	2120      	movs	r1, #32
 8000698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069c:	f001 f882 	bl	80017a4 <HAL_GPIO_TogglePin>
			ledCount = 0;
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <ledTask+0x38>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
	}
	else if (ledState == LedOff)
	{
		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
	}
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000234 	.word	0x20000234
 80006b0:	20000238 	.word	0x20000238
 80006b4:	2000023c 	.word	0x2000023c

080006b8 <ledStart>:

void ledStart(int maxCount)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	ledState = LedOn;
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <ledStart+0x20>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
	ledMaxCount = maxCount;
 80006c6:	4a05      	ldr	r2, [pc, #20]	; (80006dc <ledStart+0x24>)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6013      	str	r3, [r2, #0]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	20000234 	.word	0x20000234
 80006dc:	2000023c 	.word	0x2000023c

080006e0 <ledStop>:

void ledStop()
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	ledState = LedOff;
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <ledStop+0x1c>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2120      	movs	r1, #32
 80006ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f2:	f001 f83f 	bl	8001774 <HAL_GPIO_WritePin>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000234 	.word	0x20000234

08000700 <HAL_UART_RxCpltCallback>:
int cmdcount = 0;
int cmdprint = 0;
uint8_t ch;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	// in this callback we know that we have received the data
	if (ch == '\r')
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <HAL_UART_RxCpltCallback+0x6c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b0d      	cmp	r3, #13
 800070e:	d108      	bne.n	8000722 <HAL_UART_RxCpltCallback+0x22>
	{
		// this is the end of the input
		// notify that we ready to handle new command
		cmdcount = RING_BUFFER_SIZE - RingBuffer_FreeSpace(&rxrb);
 8000710:	4817      	ldr	r0, [pc, #92]	; (8000770 <HAL_UART_RxCpltCallback+0x70>)
 8000712:	f000 fa2b 	bl	8000b6c <RingBuffer_FreeSpace>
 8000716:	4603      	mov	r3, r0
 8000718:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800071c:	4a15      	ldr	r2, [pc, #84]	; (8000774 <HAL_UART_RxCpltCallback+0x74>)
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	e00f      	b.n	8000742 <HAL_UART_RxCpltCallback+0x42>
	}
	else
	{
		// put char to rx buffer
		if (RingBuffer_Write(&rxrb, &ch, 1) != 1)
 8000722:	2201      	movs	r2, #1
 8000724:	4911      	ldr	r1, [pc, #68]	; (800076c <HAL_UART_RxCpltCallback+0x6c>)
 8000726:	4812      	ldr	r0, [pc, #72]	; (8000770 <HAL_UART_RxCpltCallback+0x70>)
 8000728:	f000 fa3e 	bl	8000ba8 <RingBuffer_Write>
 800072c:	4603      	mov	r3, r0
 800072e:	2b01      	cmp	r3, #1
 8000730:	d002      	beq.n	8000738 <HAL_UART_RxCpltCallback+0x38>
		{
			// no more space in buffer, clear it
			RingBuffer_Init(&rxrb);
 8000732:	480f      	ldr	r0, [pc, #60]	; (8000770 <HAL_UART_RxCpltCallback+0x70>)
 8000734:	f000 f9f7 	bl	8000b26 <RingBuffer_Init>
		}

		// we can echo it because echo will use interrupt and will not stop this interrupt
		UART_Transmit(&huart2, &ch, 1);
 8000738:	2201      	movs	r2, #1
 800073a:	490c      	ldr	r1, [pc, #48]	; (800076c <HAL_UART_RxCpltCallback+0x6c>)
 800073c:	480e      	ldr	r0, [pc, #56]	; (8000778 <HAL_UART_RxCpltCallback+0x78>)
 800073e:	f7ff ff31 	bl	80005a4 <UART_Transmit>
	}

	// clear error if we have
	if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <HAL_UART_RxCpltCallback+0x78>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	69db      	ldr	r3, [r3, #28]
 8000748:	f003 0308 	and.w	r3, r3, #8
 800074c:	2b00      	cmp	r3, #0
 800074e:	d003      	beq.n	8000758 <HAL_UART_RxCpltCallback+0x58>
	{
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <HAL_UART_RxCpltCallback+0x78>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2208      	movs	r2, #8
 8000756:	621a      	str	r2, [r3, #32]
	}

	// start reading again
	/*HAL_StatusTypeDef Status = */HAL_UART_Receive_IT(&huart2, &ch, 1);
 8000758:	2201      	movs	r2, #1
 800075a:	4904      	ldr	r1, [pc, #16]	; (800076c <HAL_UART_RxCpltCallback+0x6c>)
 800075c:	4806      	ldr	r0, [pc, #24]	; (8000778 <HAL_UART_RxCpltCallback+0x78>)
 800075e:	f002 ff23 	bl	80035a8 <HAL_UART_Receive_IT>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200002ac 	.word	0x200002ac
 8000770:	200001c8 	.word	0x200001c8
 8000774:	200002a4 	.word	0x200002a4
 8000778:	200000d8 	.word	0x200000d8

0800077c <commTask>:

int commTask()
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	// just wait for interrupt to set cmdcount
	if (!cmdcount)
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <commTask+0x44>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d101      	bne.n	800078c <commTask+0x10>
	{
		return 0;
 8000788:	2300      	movs	r3, #0
 800078a:	e017      	b.n	80007bc <commTask+0x40>
	}

	// read the command in buffer
	RingBuffer_Read(&rxrb, cmdbuffer, cmdcount);
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <commTask+0x44>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	490c      	ldr	r1, [pc, #48]	; (80007c4 <commTask+0x48>)
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <commTask+0x4c>)
 8000796:	f000 fa41 	bl	8000c1c <RingBuffer_Read>

	//UART_Transmit(&huart2, cmdbuffer, cmdcount);

	// echo EOL
	UART_Transmit(&huart2, (uint8_t*)"\r\n", 2);
 800079a:	2202      	movs	r2, #2
 800079c:	490b      	ldr	r1, [pc, #44]	; (80007cc <commTask+0x50>)
 800079e:	480c      	ldr	r0, [pc, #48]	; (80007d0 <commTask+0x54>)
 80007a0:	f7ff ff00 	bl	80005a4 <UART_Transmit>

	// now we can notify that command is received
	cmdbuffer[cmdcount] = 0;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <commTask+0x44>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <commTask+0x48>)
 80007aa:	2100      	movs	r1, #0
 80007ac:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 80007ae:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <commTask+0x44>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <commTask+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
	return 1;
 80007ba:	2301      	movs	r3, #1
}
 80007bc:	4618      	mov	r0, r3
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200002a4 	.word	0x200002a4
 80007c4:	20000240 	.word	0x20000240
 80007c8:	200001c8 	.word	0x200001c8
 80007cc:	0800612c 	.word	0x0800612c
 80007d0:	200000d8 	.word	0x200000d8
 80007d4:	200002a8 	.word	0x200002a8

080007d8 <handleCommand>:

void handleCommand()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
  char cmd[20];
  int maxCount;

  int params = sscanf((const char*)cmdbuffer, "%s %d", cmd, &maxCount);
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	f107 0208 	add.w	r2, r7, #8
 80007e4:	4914      	ldr	r1, [pc, #80]	; (8000838 <handleCommand+0x60>)
 80007e6:	4815      	ldr	r0, [pc, #84]	; (800083c <handleCommand+0x64>)
 80007e8:	f004 fad0 	bl	8004d8c <siscanf>
 80007ec:	61f8      	str	r0, [r7, #28]

  if (params == 0)
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d01d      	beq.n	8000830 <handleCommand+0x58>
  {
	  return;
  }

  if (strcmp(cmd, "start") == 0)
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	4911      	ldr	r1, [pc, #68]	; (8000840 <handleCommand+0x68>)
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fce8 	bl	80001d0 <strcmp>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d104      	bne.n	8000810 <handleCommand+0x38>
  {
	  ledStart(maxCount);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff55 	bl	80006b8 <ledStart>
 800080e:	e010      	b.n	8000832 <handleCommand+0x5a>
  }
  else if (strcmp(cmd, "stop") == 0)
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	490b      	ldr	r1, [pc, #44]	; (8000844 <handleCommand+0x6c>)
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fcda 	bl	80001d0 <strcmp>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d102      	bne.n	8000828 <handleCommand+0x50>
  {
	  ledStop();
 8000822:	f7ff ff5d 	bl	80006e0 <ledStop>
 8000826:	e004      	b.n	8000832 <handleCommand+0x5a>
  }
  else
  {
	  printf("Invalid command\r\n");
 8000828:	4807      	ldr	r0, [pc, #28]	; (8000848 <handleCommand+0x70>)
 800082a:	f004 faa7 	bl	8004d7c <puts>
 800082e:	e000      	b.n	8000832 <handleCommand+0x5a>
	  return;
 8000830:	bf00      	nop
  }
}
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	08006130 	.word	0x08006130
 800083c:	20000240 	.word	0x20000240
 8000840:	08006138 	.word	0x08006138
 8000844:	08006140 	.word	0x08006140
 8000848:	08006148 	.word	0x08006148

0800084c <_write>:

/////////////////////////////////////////////////////////////////////////
// Redirecting printf to UART
/////////////////////////////////////////////////////////////////////////
int _write(int fd, char* ptr, int len) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
    //HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
	UART_Transmit(&huart2, (uint8_t *) ptr, len);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	461a      	mov	r2, r3
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	4804      	ldr	r0, [pc, #16]	; (8000870 <_write+0x24>)
 8000860:	f7ff fea0 	bl	80005a4 <UART_Transmit>
    return len;
 8000864:	687b      	ldr	r3, [r7, #4]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200000d8 	.word	0x200000d8

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000878:	f000 fbc6 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087c:	f000 f826 	bl	80008cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000880:	f000 f8de 	bl	8000a40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000884:	f000 f8ac 	bl	80009e0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000888:	f000 f872 	bl	8000970 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  RingBuffer_Init(&txrb);
 800088c:	480b      	ldr	r0, [pc, #44]	; (80008bc <main+0x48>)
 800088e:	f000 f94a 	bl	8000b26 <RingBuffer_Init>
  RingBuffer_Init(&rxrb);
 8000892:	480b      	ldr	r0, [pc, #44]	; (80008c0 <main+0x4c>)
 8000894:	f000 f947 	bl	8000b26 <RingBuffer_Init>

  printMessages2();
 8000898:	f7ff fec4 	bl	8000624 <printMessages2>

  //
  // start communication be receiving one byte
  /*HAL_StatusTypeDef Status = */HAL_UART_Receive_IT(&huart2, &ch, 1);
 800089c:	2201      	movs	r2, #1
 800089e:	4909      	ldr	r1, [pc, #36]	; (80008c4 <main+0x50>)
 80008a0:	4809      	ldr	r0, [pc, #36]	; (80008c8 <main+0x54>)
 80008a2:	f002 fe81 	bl	80035a8 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ledTask();
 80008a6:	f7ff fee7 	bl	8000678 <ledTask>
	  if (commTask())
 80008aa:	f7ff ff67 	bl	800077c <commTask>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d0f8      	beq.n	80008a6 <main+0x32>
	  {
		  handleCommand();
 80008b4:	f7ff ff90 	bl	80007d8 <handleCommand>
	  ledTask();
 80008b8:	e7f5      	b.n	80008a6 <main+0x32>
 80008ba:	bf00      	nop
 80008bc:	2000015c 	.word	0x2000015c
 80008c0:	200001c8 	.word	0x200001c8
 80008c4:	200002ac 	.word	0x200002ac
 80008c8:	200000d8 	.word	0x200000d8

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b096      	sub	sp, #88	; 0x58
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2244      	movs	r2, #68	; 0x44
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f004 f9d8 	bl	8004c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	463b      	mov	r3, r7
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008f2:	f000 ffa3 	bl	800183c <HAL_PWREx_ControlVoltageScaling>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008fc:	f000 f90e 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000900:	2302      	movs	r3, #2
 8000902:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000908:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800090a:	2310      	movs	r3, #16
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090e:	2302      	movs	r3, #2
 8000910:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000912:	2302      	movs	r3, #2
 8000914:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000916:	2301      	movs	r3, #1
 8000918:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800091a:	230a      	movs	r3, #10
 800091c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800091e:	2307      	movs	r3, #7
 8000920:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000922:	2302      	movs	r3, #2
 8000924:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000926:	2302      	movs	r3, #2
 8000928:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4618      	mov	r0, r3
 8000930:	f000 ffda 	bl	80018e8 <HAL_RCC_OscConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800093a:	f000 f8ef 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093e:	230f      	movs	r3, #15
 8000940:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000942:	2303      	movs	r3, #3
 8000944:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	2104      	movs	r1, #4
 8000956:	4618      	mov	r0, r3
 8000958:	f001 fba2 	bl	80020a0 <HAL_RCC_ClockConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000962:	f000 f8db 	bl	8000b1c <Error_Handler>
  }
}
 8000966:	bf00      	nop
 8000968:	3758      	adds	r7, #88	; 0x58
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_TIM6_Init+0x68>)
 8000982:	4a16      	ldr	r2, [pc, #88]	; (80009dc <MX_TIM6_Init+0x6c>)
 8000984:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_TIM6_Init+0x68>)
 8000988:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800098c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_TIM6_Init+0x68>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_TIM6_Init+0x68>)
 8000996:	f241 3287 	movw	r2, #4999	; 0x1387
 800099a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_TIM6_Init+0x68>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009a2:	480d      	ldr	r0, [pc, #52]	; (80009d8 <MX_TIM6_Init+0x68>)
 80009a4:	f002 fa5c 	bl	8002e60 <HAL_TIM_Base_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80009ae:	f000 f8b5 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4806      	ldr	r0, [pc, #24]	; (80009d8 <MX_TIM6_Init+0x68>)
 80009c0:	f002 fc90 	bl	80032e4 <HAL_TIMEx_MasterConfigSynchronization>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80009ca:	f000 f8a7 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	2000008c 	.word	0x2000008c
 80009dc:	40001000 	.word	0x40001000

080009e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 80009e6:	4a15      	ldr	r2, [pc, #84]	; (8000a3c <MX_USART2_UART_Init+0x5c>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a24:	f002 fd04 	bl	8003430 <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a2e:	f000 f875 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000d8 	.word	0x200000d8
 8000a3c:	40004400 	.word	0x40004400

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a56:	4b2f      	ldr	r3, [pc, #188]	; (8000b14 <MX_GPIO_Init+0xd4>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a2e      	ldr	r2, [pc, #184]	; (8000b14 <MX_GPIO_Init+0xd4>)
 8000a5c:	f043 0304 	orr.w	r3, r3, #4
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b2c      	ldr	r3, [pc, #176]	; (8000b14 <MX_GPIO_Init+0xd4>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6e:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <MX_GPIO_Init+0xd4>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	4a28      	ldr	r2, [pc, #160]	; (8000b14 <MX_GPIO_Init+0xd4>)
 8000a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7a:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <MX_GPIO_Init+0xd4>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <MX_GPIO_Init+0xd4>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	4a22      	ldr	r2, [pc, #136]	; (8000b14 <MX_GPIO_Init+0xd4>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <MX_GPIO_Init+0xd4>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <MX_GPIO_Init+0xd4>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	4a1c      	ldr	r2, [pc, #112]	; (8000b14 <MX_GPIO_Init+0xd4>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_GPIO_Init+0xd4>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2120      	movs	r1, #32
 8000aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abe:	f000 fe59 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480f      	ldr	r0, [pc, #60]	; (8000b18 <MX_GPIO_Init+0xd8>)
 8000ada:	f000 fca1 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ade:	2320      	movs	r3, #32
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f000 fc92 	bl	8001420 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2100      	movs	r1, #0
 8000b00:	2028      	movs	r0, #40	; 0x28
 8000b02:	f000 fbd8 	bl	80012b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b06:	2028      	movs	r0, #40	; 0x28
 8000b08:	f000 fbf1 	bl	80012ee <HAL_NVIC_EnableIRQ>

}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	; 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40021000 	.word	0x40021000
 8000b18:	48000800 	.word	0x48000800

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <Error_Handler+0x8>

08000b26 <RingBuffer_Init>:
#include "ringbuffer.h"

// Initializes the ring buffer internal data structures
void RingBuffer_Init(RingBuffer* rb)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
	rb->_head = 0;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
	rb->_tail = 0;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	605a      	str	r2, [r3, #4]
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <RingBuffer_IsEmpty>:

// returns 1 if it’s empty and 0 if it has at least one byte
int RingBuffer_IsEmpty(RingBuffer* rb)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
	return rb->_head == rb->_tail;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	bf0c      	ite	eq
 8000b5a:	2301      	moveq	r3, #1
 8000b5c:	2300      	movne	r3, #0
 8000b5e:	b2db      	uxtb	r3, r3
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <RingBuffer_FreeSpace>:
	return rb->_tail == (rb->_head + 1) % RING_BUFFER_SIZE;
}

// returns the amount of free space in the buffer
int RingBuffer_FreeSpace(RingBuffer* rb)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	if (rb->_head >= rb->_tail) {
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	db07      	blt.n	8000b90 <RingBuffer_FreeSpace+0x24>
		return RING_BUFFER_SIZE - rb->_head + rb->_tail;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	e005      	b.n	8000b9c <RingBuffer_FreeSpace+0x30>
	}
	else {
		return rb->_tail - rb->_head - 1;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	3b01      	subs	r3, #1
	}
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <RingBuffer_Write>:

// Writes the data from the input array to the ring buffer.
// If it does not have enough space returns 0 and does not write any bytes,
// otherwise writes the bytes to the ring buffer and returns 1
int RingBuffer_Write(RingBuffer* rb, uint8_t * data, size_t dataSize)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
	if (dataSize >= RingBuffer_FreeSpace(rb)) {
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	f7ff ffd9 	bl	8000b6c <RingBuffer_FreeSpace>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d301      	bcc.n	8000bc8 <RingBuffer_Write+0x20>
		return 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	e023      	b.n	8000c10 <RingBuffer_Write+0x68>
	}

	for (size_t i = 0; i < dataSize; i++) {
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	e01b      	b.n	8000c06 <RingBuffer_Write+0x5e>
		rb->_buffer[rb->_head] = *data++;
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	1c5a      	adds	r2, r3, #1
 8000bd2:	60ba      	str	r2, [r7, #8]
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	6812      	ldr	r2, [r2, #0]
 8000bd8:	7819      	ldrb	r1, [r3, #0]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	4413      	add	r3, r2
 8000bde:	460a      	mov	r2, r1
 8000be0:	721a      	strb	r2, [r3, #8]
		rb->_head = (rb->_head + 1) % RING_BUFFER_SIZE;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <RingBuffer_Write+0x70>)
 8000bea:	fb83 1302 	smull	r1, r3, r3, r2
 8000bee:	1159      	asrs	r1, r3, #5
 8000bf0:	17d3      	asrs	r3, r2, #31
 8000bf2:	1acb      	subs	r3, r1, r3
 8000bf4:	2164      	movs	r1, #100	; 0x64
 8000bf6:	fb01 f303 	mul.w	r3, r1, r3
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	6013      	str	r3, [r2, #0]
	for (size_t i = 0; i < dataSize; i++) {
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	3301      	adds	r3, #1
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d3df      	bcc.n	8000bce <RingBuffer_Write+0x26>
	}
	return 1;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	51eb851f 	.word	0x51eb851f

08000c1c <RingBuffer_Read>:

// Reads the amount of bytes specified in dataSize from the ring buffer to the data array
int RingBuffer_Read(RingBuffer* rb, uint8_t * data, size_t dataSize)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b087      	sub	sp, #28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
	int readCount = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < dataSize; i++) {
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	e023      	b.n	8000c7a <RingBuffer_Read+0x5e>
		if (rb->_tail == rb->_head) {
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d022      	beq.n	8000c84 <RingBuffer_Read+0x68>
			break;
		}

		*data++ = rb->_buffer[rb->_tail];
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	685a      	ldr	r2, [r3, #4]
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1c59      	adds	r1, r3, #1
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	68f9      	ldr	r1, [r7, #12]
 8000c4a:	440a      	add	r2, r1
 8000c4c:	7a12      	ldrb	r2, [r2, #8]
 8000c4e:	701a      	strb	r2, [r3, #0]
		rb->_tail = (rb->_tail + 1) % RING_BUFFER_SIZE;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	1c5a      	adds	r2, r3, #1
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <RingBuffer_Read+0x78>)
 8000c58:	fb83 1302 	smull	r1, r3, r3, r2
 8000c5c:	1159      	asrs	r1, r3, #5
 8000c5e:	17d3      	asrs	r3, r2, #31
 8000c60:	1acb      	subs	r3, r1, r3
 8000c62:	2164      	movs	r1, #100	; 0x64
 8000c64:	fb01 f303 	mul.w	r3, r1, r3
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	6053      	str	r3, [r2, #4]
		readCount++;
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3301      	adds	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < dataSize; i++) {
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	3301      	adds	r3, #1
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d3d7      	bcc.n	8000c32 <RingBuffer_Read+0x16>
 8000c82:	e000      	b.n	8000c86 <RingBuffer_Read+0x6a>
			break;
 8000c84:	bf00      	nop
	}

	return readCount;
 8000c86:	697b      	ldr	r3, [r7, #20]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	371c      	adds	r7, #28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	51eb851f 	.word	0x51eb851f

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_MspInit+0x44>)
 8000ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <HAL_MspInit+0x44>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6613      	str	r3, [r2, #96]	; 0x60
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_MspInit+0x44>)
 8000cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_MspInit+0x44>)
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cba:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <HAL_MspInit+0x44>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_MspInit+0x44>)
 8000cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <HAL_TIM_Base_MspInit+0x44>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d113      	bne.n	8000d1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <HAL_TIM_Base_MspInit+0x48>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf6:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <HAL_TIM_Base_MspInit+0x48>)
 8000cf8:	f043 0310 	orr.w	r3, r3, #16
 8000cfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_TIM_Base_MspInit+0x48>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	f003 0310 	and.w	r3, r3, #16
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2036      	movs	r0, #54	; 0x36
 8000d10:	f000 fad1 	bl	80012b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d14:	2036      	movs	r0, #54	; 0x36
 8000d16:	f000 faea 	bl	80012ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40001000 	.word	0x40001000
 8000d28:	40021000 	.word	0x40021000

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b0ac      	sub	sp, #176	; 0xb0
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2288      	movs	r2, #136	; 0x88
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f003 ff9f 	bl	8004c90 <memset>
  if(huart->Instance==USART2)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a25      	ldr	r2, [pc, #148]	; (8000dec <HAL_UART_MspInit+0xc0>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d143      	bne.n	8000de4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 fbbd 	bl	80024e8 <HAL_RCCEx_PeriphCLKConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d74:	f7ff fed2 	bl	8000b1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d78:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <HAL_UART_MspInit+0xc4>)
 8000d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7c:	4a1c      	ldr	r2, [pc, #112]	; (8000df0 <HAL_UART_MspInit+0xc4>)
 8000d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d82:	6593      	str	r3, [r2, #88]	; 0x58
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <HAL_UART_MspInit+0xc4>)
 8000d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <HAL_UART_MspInit+0xc4>)
 8000d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d94:	4a16      	ldr	r2, [pc, #88]	; (8000df0 <HAL_UART_MspInit+0xc4>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <HAL_UART_MspInit+0xc4>)
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000da8:	230c      	movs	r3, #12
 8000daa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dc0:	2307      	movs	r3, #7
 8000dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd0:	f000 fb26 	bl	8001420 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2026      	movs	r0, #38	; 0x26
 8000dda:	f000 fa6c 	bl	80012b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dde:	2026      	movs	r0, #38	; 0x26
 8000de0:	f000 fa85 	bl	80012ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000de4:	bf00      	nop
 8000de6:	37b0      	adds	r7, #176	; 0xb0
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40004400 	.word	0x40004400
 8000df0:	40021000 	.word	0x40021000

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <NMI_Handler+0x4>

08000dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler+0x4>

08000e06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e40:	f000 f93e 	bl	80010c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <USART2_IRQHandler+0x10>)
 8000e4e:	f002 fc01 	bl	8003654 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200000d8 	.word	0x200000d8

08000e5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e64:	f000 fcb8 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <TIM6_DAC_IRQHandler+0x10>)
 8000e72:	f002 f84c 	bl	8002f0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000008c 	.word	0x2000008c

08000e80 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	e00a      	b.n	8000ea8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e92:	f3af 8000 	nop.w
 8000e96:	4601      	mov	r1, r0
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	60ba      	str	r2, [r7, #8]
 8000e9e:	b2ca      	uxtb	r2, r1
 8000ea0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	dbf0      	blt.n	8000e92 <_read+0x12>
	}

return len;
 8000eb0:	687b      	ldr	r3, [r7, #4]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <_close>:
	}
	return len;
}

int _close(int file)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <_isatty>:

int _isatty(int file)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
	return 1;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
	return 0;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f2c:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <_sbrk+0x5c>)
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <_sbrk+0x60>)
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <_sbrk+0x64>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <_sbrk+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d207      	bcs.n	8000f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f54:	f003 fe72 	bl	8004c3c <__errno>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	e009      	b.n	8000f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <_sbrk+0x64>)
 8000f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20018000 	.word	0x20018000
 8000f84:	00000400 	.word	0x00000400
 8000f88:	200002b0 	.word	0x200002b0
 8000f8c:	200002c8 	.word	0x200002c8

08000f90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb8:	f7ff ffea 	bl	8000f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	; (8000ff4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <LoopForever+0xe>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	; (8001000 <LoopForever+0x16>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f003 fe31 	bl	8004c48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fe6:	f7ff fc45 	bl	8000874 <main>

08000fea <LoopForever>:

LoopForever:
    b LoopForever
 8000fea:	e7fe      	b.n	8000fea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ff8:	08006344 	.word	0x08006344
  ldr r2, =_sbss
 8000ffc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001000:	200002c8 	.word	0x200002c8

08001004 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC1_2_IRQHandler>
	...

08001008 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <HAL_Init+0x3c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <HAL_Init+0x3c>)
 8001018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101e:	2003      	movs	r0, #3
 8001020:	f000 f93e 	bl	80012a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001024:	2000      	movs	r0, #0
 8001026:	f000 f80f 	bl	8001048 <HAL_InitTick>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	71fb      	strb	r3, [r7, #7]
 8001034:	e001      	b.n	800103a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001036:	f7ff fe2f 	bl	8000c98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800103a:	79fb      	ldrb	r3, [r7, #7]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40022000 	.word	0x40022000

08001048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_InitTick+0x6c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d023      	beq.n	80010a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <HAL_InitTick+0x70>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_InitTick+0x6c>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	fbb3 f3f1 	udiv	r3, r3, r1
 800106e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f949 	bl	800130a <HAL_SYSTICK_Config>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10f      	bne.n	800109e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d809      	bhi.n	8001098 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f000 f913 	bl	80012b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_InitTick+0x74>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	e007      	b.n	80010a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e004      	b.n	80010a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	73fb      	strb	r3, [r7, #15]
 80010a2:	e001      	b.n	80010a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000008 	.word	0x20000008
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000004 	.word	0x20000004

080010c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008
 80010e4:	200002b4 	.word	0x200002b4

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	200002b4 	.word	0x200002b4

08001100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800112c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001132:	4a04      	ldr	r2, [pc, #16]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	60d3      	str	r3, [r2, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	db0b      	blt.n	800118e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	f003 021f 	and.w	r2, r3, #31
 800117c:	4907      	ldr	r1, [pc, #28]	; (800119c <__NVIC_EnableIRQ+0x38>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	2001      	movs	r0, #1
 8001186:	fa00 f202 	lsl.w	r2, r0, r2
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000e100 	.word	0xe000e100

080011a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db0a      	blt.n	80011ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	490c      	ldr	r1, [pc, #48]	; (80011ec <__NVIC_SetPriority+0x4c>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c8:	e00a      	b.n	80011e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4908      	ldr	r1, [pc, #32]	; (80011f0 <__NVIC_SetPriority+0x50>)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	3b04      	subs	r3, #4
 80011d8:	0112      	lsls	r2, r2, #4
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	440b      	add	r3, r1
 80011de:	761a      	strb	r2, [r3, #24]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000e100 	.word	0xe000e100
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f1c3 0307 	rsb	r3, r3, #7
 800120e:	2b04      	cmp	r3, #4
 8001210:	bf28      	it	cs
 8001212:	2304      	movcs	r3, #4
 8001214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3304      	adds	r3, #4
 800121a:	2b06      	cmp	r3, #6
 800121c:	d902      	bls.n	8001224 <NVIC_EncodePriority+0x30>
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3b03      	subs	r3, #3
 8001222:	e000      	b.n	8001226 <NVIC_EncodePriority+0x32>
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	f04f 32ff 	mov.w	r2, #4294967295
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800123c:	f04f 31ff 	mov.w	r1, #4294967295
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	43d9      	mvns	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	4313      	orrs	r3, r2
         );
}
 800124e:	4618      	mov	r0, r3
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800126c:	d301      	bcc.n	8001272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126e:	2301      	movs	r3, #1
 8001270:	e00f      	b.n	8001292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <SysTick_Config+0x40>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127a:	210f      	movs	r1, #15
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f7ff ff8e 	bl	80011a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <SysTick_Config+0x40>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <SysTick_Config+0x40>)
 800128c:	2207      	movs	r2, #7
 800128e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	e000e010 	.word	0xe000e010

080012a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff29 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012c8:	f7ff ff3e 	bl	8001148 <__NVIC_GetPriorityGrouping>
 80012cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	6978      	ldr	r0, [r7, #20]
 80012d4:	f7ff ff8e 	bl	80011f4 <NVIC_EncodePriority>
 80012d8:	4602      	mov	r2, r0
 80012da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff5d 	bl	80011a0 <__NVIC_SetPriority>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff31 	bl	8001164 <__NVIC_EnableIRQ>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ffa2 	bl	800125c <SysTick_Config>
 8001318:	4603      	mov	r3, r0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001322:	b480      	push	{r7}
 8001324:	b085      	sub	sp, #20
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d008      	beq.n	800134c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2204      	movs	r2, #4
 800133e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e022      	b.n	8001392 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 020e 	bic.w	r2, r2, #14
 800135a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0201 	bic.w	r2, r2, #1
 800136a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001370:	f003 021c 	and.w	r2, r3, #28
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	2101      	movs	r1, #1
 800137a:	fa01 f202 	lsl.w	r2, r1, r2
 800137e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001390:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b084      	sub	sp, #16
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d005      	beq.n	80013c2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2204      	movs	r2, #4
 80013ba:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	e029      	b.n	8001416 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 020e 	bic.w	r2, r2, #14
 80013d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0201 	bic.w	r2, r2, #1
 80013e0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f003 021c 	and.w	r2, r3, #28
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	2101      	movs	r1, #1
 80013f0:	fa01 f202 	lsl.w	r2, r1, r2
 80013f4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	4798      	blx	r3
    }
  }
  return status;
 8001416:	7bfb      	ldrb	r3, [r7, #15]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142e:	e17f      	b.n	8001730 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	2101      	movs	r1, #1
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	fa01 f303 	lsl.w	r3, r1, r3
 800143c:	4013      	ands	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8171 	beq.w	800172a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b01      	cmp	r3, #1
 8001452:	d005      	beq.n	8001460 <HAL_GPIO_Init+0x40>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d130      	bne.n	80014c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001496:	2201      	movs	r2, #1
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	f003 0201 	and.w	r2, r3, #1
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d118      	bne.n	8001500 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014d4:	2201      	movs	r2, #1
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	08db      	lsrs	r3, r3, #3
 80014ea:	f003 0201 	and.w	r2, r3, #1
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b03      	cmp	r3, #3
 800150a:	d017      	beq.n	800153c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	2203      	movs	r2, #3
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d123      	bne.n	8001590 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	08da      	lsrs	r2, r3, #3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3208      	adds	r2, #8
 8001550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	220f      	movs	r2, #15
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	08da      	lsrs	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3208      	adds	r2, #8
 800158a:	6939      	ldr	r1, [r7, #16]
 800158c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0203 	and.w	r2, r3, #3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80ac 	beq.w	800172a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d2:	4b5f      	ldr	r3, [pc, #380]	; (8001750 <HAL_GPIO_Init+0x330>)
 80015d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d6:	4a5e      	ldr	r2, [pc, #376]	; (8001750 <HAL_GPIO_Init+0x330>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6613      	str	r3, [r2, #96]	; 0x60
 80015de:	4b5c      	ldr	r3, [pc, #368]	; (8001750 <HAL_GPIO_Init+0x330>)
 80015e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015ea:	4a5a      	ldr	r2, [pc, #360]	; (8001754 <HAL_GPIO_Init+0x334>)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	089b      	lsrs	r3, r3, #2
 80015f0:	3302      	adds	r3, #2
 80015f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	220f      	movs	r2, #15
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001614:	d025      	beq.n	8001662 <HAL_GPIO_Init+0x242>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4f      	ldr	r2, [pc, #316]	; (8001758 <HAL_GPIO_Init+0x338>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d01f      	beq.n	800165e <HAL_GPIO_Init+0x23e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a4e      	ldr	r2, [pc, #312]	; (800175c <HAL_GPIO_Init+0x33c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d019      	beq.n	800165a <HAL_GPIO_Init+0x23a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a4d      	ldr	r2, [pc, #308]	; (8001760 <HAL_GPIO_Init+0x340>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d013      	beq.n	8001656 <HAL_GPIO_Init+0x236>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a4c      	ldr	r2, [pc, #304]	; (8001764 <HAL_GPIO_Init+0x344>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d00d      	beq.n	8001652 <HAL_GPIO_Init+0x232>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a4b      	ldr	r2, [pc, #300]	; (8001768 <HAL_GPIO_Init+0x348>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d007      	beq.n	800164e <HAL_GPIO_Init+0x22e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4a      	ldr	r2, [pc, #296]	; (800176c <HAL_GPIO_Init+0x34c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d101      	bne.n	800164a <HAL_GPIO_Init+0x22a>
 8001646:	2306      	movs	r3, #6
 8001648:	e00c      	b.n	8001664 <HAL_GPIO_Init+0x244>
 800164a:	2307      	movs	r3, #7
 800164c:	e00a      	b.n	8001664 <HAL_GPIO_Init+0x244>
 800164e:	2305      	movs	r3, #5
 8001650:	e008      	b.n	8001664 <HAL_GPIO_Init+0x244>
 8001652:	2304      	movs	r3, #4
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x244>
 8001656:	2303      	movs	r3, #3
 8001658:	e004      	b.n	8001664 <HAL_GPIO_Init+0x244>
 800165a:	2302      	movs	r3, #2
 800165c:	e002      	b.n	8001664 <HAL_GPIO_Init+0x244>
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <HAL_GPIO_Init+0x244>
 8001662:	2300      	movs	r3, #0
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	f002 0203 	and.w	r2, r2, #3
 800166a:	0092      	lsls	r2, r2, #2
 800166c:	4093      	lsls	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001674:	4937      	ldr	r1, [pc, #220]	; (8001754 <HAL_GPIO_Init+0x334>)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	089b      	lsrs	r3, r3, #2
 800167a:	3302      	adds	r3, #2
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001682:	4b3b      	ldr	r3, [pc, #236]	; (8001770 <HAL_GPIO_Init+0x350>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016a6:	4a32      	ldr	r2, [pc, #200]	; (8001770 <HAL_GPIO_Init+0x350>)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ac:	4b30      	ldr	r3, [pc, #192]	; (8001770 <HAL_GPIO_Init+0x350>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016d0:	4a27      	ldr	r2, [pc, #156]	; (8001770 <HAL_GPIO_Init+0x350>)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_GPIO_Init+0x350>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016fa:	4a1d      	ldr	r2, [pc, #116]	; (8001770 <HAL_GPIO_Init+0x350>)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_GPIO_Init+0x350>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	43db      	mvns	r3, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001724:	4a12      	ldr	r2, [pc, #72]	; (8001770 <HAL_GPIO_Init+0x350>)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	3301      	adds	r3, #1
 800172e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa22 f303 	lsr.w	r3, r2, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	f47f ae78 	bne.w	8001430 <HAL_GPIO_Init+0x10>
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
 8001754:	40010000 	.word	0x40010000
 8001758:	48000400 	.word	0x48000400
 800175c:	48000800 	.word	0x48000800
 8001760:	48000c00 	.word	0x48000c00
 8001764:	48001000 	.word	0x48001000
 8001768:	48001400 	.word	0x48001400
 800176c:	48001800 	.word	0x48001800
 8001770:	40010400 	.word	0x40010400

08001774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
 8001780:	4613      	mov	r3, r2
 8001782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001784:	787b      	ldrb	r3, [r7, #1]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001790:	e002      	b.n	8001798 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4013      	ands	r3, r2
 80017bc:	041a      	lsls	r2, r3, #16
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	43d9      	mvns	r1, r3
 80017c2:	887b      	ldrh	r3, [r7, #2]
 80017c4:	400b      	ands	r3, r1
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	619a      	str	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f806 	bl	8001808 <HAL_GPIO_EXTI_Callback>
  }
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40010400 	.word	0x40010400

08001808 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <HAL_PWREx_GetVoltageRange+0x18>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40007000 	.word	0x40007000

0800183c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800184a:	d130      	bne.n	80018ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800184c:	4b23      	ldr	r3, [pc, #140]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001858:	d038      	beq.n	80018cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001862:	4a1e      	ldr	r2, [pc, #120]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001868:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2232      	movs	r2, #50	; 0x32
 8001870:	fb02 f303 	mul.w	r3, r2, r3
 8001874:	4a1b      	ldr	r2, [pc, #108]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	0c9b      	lsrs	r3, r3, #18
 800187c:	3301      	adds	r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001880:	e002      	b.n	8001888 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3b01      	subs	r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001894:	d102      	bne.n	800189c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f2      	bne.n	8001882 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018a8:	d110      	bne.n	80018cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e00f      	b.n	80018ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ba:	d007      	beq.n	80018cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018c4:	4a05      	ldr	r2, [pc, #20]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40007000 	.word	0x40007000
 80018e0:	20000000 	.word	0x20000000
 80018e4:	431bde83 	.word	0x431bde83

080018e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e3ca      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018fa:	4b97      	ldr	r3, [pc, #604]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001904:	4b94      	ldr	r3, [pc, #592]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80e4 	beq.w	8001ae4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <HAL_RCC_OscConfig+0x4a>
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	2b0c      	cmp	r3, #12
 8001926:	f040 808b 	bne.w	8001a40 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	2b01      	cmp	r3, #1
 800192e:	f040 8087 	bne.w	8001a40 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001932:	4b89      	ldr	r3, [pc, #548]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d005      	beq.n	800194a <HAL_RCC_OscConfig+0x62>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e3a2      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1a      	ldr	r2, [r3, #32]
 800194e:	4b82      	ldr	r3, [pc, #520]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d004      	beq.n	8001964 <HAL_RCC_OscConfig+0x7c>
 800195a:	4b7f      	ldr	r3, [pc, #508]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001962:	e005      	b.n	8001970 <HAL_RCC_OscConfig+0x88>
 8001964:	4b7c      	ldr	r3, [pc, #496]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001970:	4293      	cmp	r3, r2
 8001972:	d223      	bcs.n	80019bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	4618      	mov	r0, r3
 800197a:	f000 fd55 	bl	8002428 <RCC_SetFlashLatencyFromMSIRange>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e383      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001988:	4b73      	ldr	r3, [pc, #460]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a72      	ldr	r2, [pc, #456]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 800198e:	f043 0308 	orr.w	r3, r3, #8
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b70      	ldr	r3, [pc, #448]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	496d      	ldr	r1, [pc, #436]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a6:	4b6c      	ldr	r3, [pc, #432]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	4968      	ldr	r1, [pc, #416]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	604b      	str	r3, [r1, #4]
 80019ba:	e025      	b.n	8001a08 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019bc:	4b66      	ldr	r3, [pc, #408]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a65      	ldr	r2, [pc, #404]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 80019c2:	f043 0308 	orr.w	r3, r3, #8
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b63      	ldr	r3, [pc, #396]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4960      	ldr	r1, [pc, #384]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019da:	4b5f      	ldr	r3, [pc, #380]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	495b      	ldr	r1, [pc, #364]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 fd15 	bl	8002428 <RCC_SetFlashLatencyFromMSIRange>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e343      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a08:	f000 fc4a 	bl	80022a0 <HAL_RCC_GetSysClockFreq>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4b52      	ldr	r3, [pc, #328]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	091b      	lsrs	r3, r3, #4
 8001a14:	f003 030f 	and.w	r3, r3, #15
 8001a18:	4950      	ldr	r1, [pc, #320]	; (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a1a:	5ccb      	ldrb	r3, [r1, r3]
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
 8001a24:	4a4e      	ldr	r2, [pc, #312]	; (8001b60 <HAL_RCC_OscConfig+0x278>)
 8001a26:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a28:	4b4e      	ldr	r3, [pc, #312]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fb0b 	bl	8001048 <HAL_InitTick>
 8001a32:	4603      	mov	r3, r0
 8001a34:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d052      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	e327      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d032      	beq.n	8001aae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a48:	4b43      	ldr	r3, [pc, #268]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a42      	ldr	r2, [pc, #264]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a54:	f7ff fb48 	bl	80010e8 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a5c:	f7ff fb44 	bl	80010e8 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e310      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a6e:	4b3a      	ldr	r3, [pc, #232]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a7a:	4b37      	ldr	r3, [pc, #220]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a36      	ldr	r2, [pc, #216]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001a80:	f043 0308 	orr.w	r3, r3, #8
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b34      	ldr	r3, [pc, #208]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	4931      	ldr	r1, [pc, #196]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a98:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	492c      	ldr	r1, [pc, #176]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
 8001aac:	e01a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001aae:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a29      	ldr	r2, [pc, #164]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001ab4:	f023 0301 	bic.w	r3, r3, #1
 8001ab8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001aba:	f7ff fb15 	bl	80010e8 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ac2:	f7ff fb11 	bl	80010e8 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e2dd      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ad4:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x1da>
 8001ae0:	e000      	b.n	8001ae4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ae2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d074      	beq.n	8001bda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d005      	beq.n	8001b02 <HAL_RCC_OscConfig+0x21a>
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	2b0c      	cmp	r3, #12
 8001afa:	d10e      	bne.n	8001b1a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d10b      	bne.n	8001b1a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d064      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x2f0>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d160      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e2ba      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b22:	d106      	bne.n	8001b32 <HAL_RCC_OscConfig+0x24a>
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	e026      	b.n	8001b80 <HAL_RCC_OscConfig+0x298>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b3a:	d115      	bne.n	8001b68 <HAL_RCC_OscConfig+0x280>
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001b42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a02      	ldr	r2, [pc, #8]	; (8001b58 <HAL_RCC_OscConfig+0x270>)
 8001b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	e014      	b.n	8001b80 <HAL_RCC_OscConfig+0x298>
 8001b56:	bf00      	nop
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	08006168 	.word	0x08006168
 8001b60:	20000000 	.word	0x20000000
 8001b64:	20000004 	.word	0x20000004
 8001b68:	4ba0      	ldr	r3, [pc, #640]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a9f      	ldr	r2, [pc, #636]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	4b9d      	ldr	r3, [pc, #628]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a9c      	ldr	r2, [pc, #624]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d013      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b88:	f7ff faae 	bl	80010e8 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b90:	f7ff faaa 	bl	80010e8 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	; 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e276      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba2:	4b92      	ldr	r3, [pc, #584]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0x2a8>
 8001bae:	e014      	b.n	8001bda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fa9a 	bl	80010e8 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb8:	f7ff fa96 	bl	80010e8 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b64      	cmp	r3, #100	; 0x64
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e262      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bca:	4b88      	ldr	r3, [pc, #544]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x2d0>
 8001bd6:	e000      	b.n	8001bda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d060      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x310>
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	2b0c      	cmp	r3, #12
 8001bf0:	d119      	bne.n	8001c26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d116      	bne.n	8001c26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bf8:	4b7c      	ldr	r3, [pc, #496]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_OscConfig+0x328>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e23f      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c10:	4b76      	ldr	r3, [pc, #472]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	061b      	lsls	r3, r3, #24
 8001c1e:	4973      	ldr	r1, [pc, #460]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c24:	e040      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d023      	beq.n	8001c76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c2e:	4b6f      	ldr	r3, [pc, #444]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a6e      	ldr	r2, [pc, #440]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3a:	f7ff fa55 	bl	80010e8 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c42:	f7ff fa51 	bl	80010e8 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e21d      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c54:	4b65      	ldr	r3, [pc, #404]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c60:	4b62      	ldr	r3, [pc, #392]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	061b      	lsls	r3, r3, #24
 8001c6e:	495f      	ldr	r1, [pc, #380]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]
 8001c74:	e018      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c76:	4b5d      	ldr	r3, [pc, #372]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a5c      	ldr	r2, [pc, #368]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c82:	f7ff fa31 	bl	80010e8 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c8a:	f7ff fa2d 	bl	80010e8 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e1f9      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c9c:	4b53      	ldr	r3, [pc, #332]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f0      	bne.n	8001c8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d03c      	beq.n	8001d2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d01c      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cbc:	4b4b      	ldr	r3, [pc, #300]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc2:	4a4a      	ldr	r2, [pc, #296]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff fa0c 	bl	80010e8 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd4:	f7ff fa08 	bl	80010e8 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e1d4      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ce6:	4b41      	ldr	r3, [pc, #260]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0ef      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x3ec>
 8001cf4:	e01b      	b.n	8001d2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf6:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cfc:	4a3b      	ldr	r2, [pc, #236]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001cfe:	f023 0301 	bic.w	r3, r3, #1
 8001d02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d06:	f7ff f9ef 	bl	80010e8 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0e:	f7ff f9eb 	bl	80010e8 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e1b7      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d20:	4b32      	ldr	r3, [pc, #200]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1ef      	bne.n	8001d0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 80a6 	beq.w	8001e88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d40:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10d      	bne.n	8001d68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4c:	4b27      	ldr	r3, [pc, #156]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d50:	4a26      	ldr	r2, [pc, #152]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d56:	6593      	str	r3, [r2, #88]	; 0x58
 8001d58:	4b24      	ldr	r3, [pc, #144]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d64:	2301      	movs	r3, #1
 8001d66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d68:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <HAL_RCC_OscConfig+0x508>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d118      	bne.n	8001da6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d74:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <HAL_RCC_OscConfig+0x508>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <HAL_RCC_OscConfig+0x508>)
 8001d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d80:	f7ff f9b2 	bl	80010e8 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d88:	f7ff f9ae 	bl	80010e8 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e17a      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <HAL_RCC_OscConfig+0x508>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d108      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4d8>
 8001dae:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db4:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dbe:	e029      	b.n	8001e14 <HAL_RCC_OscConfig+0x52c>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b05      	cmp	r3, #5
 8001dc6:	d115      	bne.n	8001df4 <HAL_RCC_OscConfig+0x50c>
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dce:	4a07      	ldr	r2, [pc, #28]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dde:	4a03      	ldr	r2, [pc, #12]	; (8001dec <HAL_RCC_OscConfig+0x504>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001de8:	e014      	b.n	8001e14 <HAL_RCC_OscConfig+0x52c>
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40007000 	.word	0x40007000
 8001df4:	4b9c      	ldr	r3, [pc, #624]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	4a9b      	ldr	r2, [pc, #620]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001dfc:	f023 0301 	bic.w	r3, r3, #1
 8001e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e04:	4b98      	ldr	r3, [pc, #608]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0a:	4a97      	ldr	r2, [pc, #604]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001e0c:	f023 0304 	bic.w	r3, r3, #4
 8001e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d016      	beq.n	8001e4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7ff f964 	bl	80010e8 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e22:	e00a      	b.n	8001e3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e24:	f7ff f960 	bl	80010e8 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e12a      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e3a:	4b8b      	ldr	r3, [pc, #556]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0ed      	beq.n	8001e24 <HAL_RCC_OscConfig+0x53c>
 8001e48:	e015      	b.n	8001e76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4a:	f7ff f94d 	bl	80010e8 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e52:	f7ff f949 	bl	80010e8 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e113      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e68:	4b7f      	ldr	r3, [pc, #508]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1ed      	bne.n	8001e52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e76:	7ffb      	ldrb	r3, [r7, #31]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d105      	bne.n	8001e88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7c:	4b7a      	ldr	r3, [pc, #488]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e80:	4a79      	ldr	r2, [pc, #484]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e86:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80fe 	beq.w	800208e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	f040 80d0 	bne.w	800203c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e9c:	4b72      	ldr	r3, [pc, #456]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f003 0203 	and.w	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d130      	bne.n	8001f12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d127      	bne.n	8001f12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ecc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d11f      	bne.n	8001f12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001edc:	2a07      	cmp	r2, #7
 8001ede:	bf14      	ite	ne
 8001ee0:	2201      	movne	r2, #1
 8001ee2:	2200      	moveq	r2, #0
 8001ee4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d113      	bne.n	8001f12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef4:	085b      	lsrs	r3, r3, #1
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d109      	bne.n	8001f12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	085b      	lsrs	r3, r3, #1
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d06e      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	2b0c      	cmp	r3, #12
 8001f16:	d069      	beq.n	8001fec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f18:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d105      	bne.n	8001f30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f24:	4b50      	ldr	r3, [pc, #320]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0ad      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f34:	4b4c      	ldr	r3, [pc, #304]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a4b      	ldr	r2, [pc, #300]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001f3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f40:	f7ff f8d2 	bl	80010e8 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f48:	f7ff f8ce 	bl	80010e8 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e09a      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f5a:	4b43      	ldr	r3, [pc, #268]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f66:	4b40      	ldr	r3, [pc, #256]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	4b40      	ldr	r3, [pc, #256]	; (800206c <HAL_RCC_OscConfig+0x784>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f76:	3a01      	subs	r2, #1
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	4311      	orrs	r1, r2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f80:	0212      	lsls	r2, r2, #8
 8001f82:	4311      	orrs	r1, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f88:	0852      	lsrs	r2, r2, #1
 8001f8a:	3a01      	subs	r2, #1
 8001f8c:	0552      	lsls	r2, r2, #21
 8001f8e:	4311      	orrs	r1, r2
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f94:	0852      	lsrs	r2, r2, #1
 8001f96:	3a01      	subs	r2, #1
 8001f98:	0652      	lsls	r2, r2, #25
 8001f9a:	4311      	orrs	r1, r2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fa0:	0912      	lsrs	r2, r2, #4
 8001fa2:	0452      	lsls	r2, r2, #17
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	4930      	ldr	r1, [pc, #192]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fac:	4b2e      	ldr	r3, [pc, #184]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a2d      	ldr	r2, [pc, #180]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fb8:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4a2a      	ldr	r2, [pc, #168]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fc4:	f7ff f890 	bl	80010e8 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fcc:	f7ff f88c 	bl	80010e8 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e058      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fde:	4b22      	ldr	r3, [pc, #136]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fea:	e050      	b.n	800208e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e04f      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d148      	bne.n	800208e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a19      	ldr	r2, [pc, #100]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8002002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002006:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002008:	4b17      	ldr	r3, [pc, #92]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4a16      	ldr	r2, [pc, #88]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 800200e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002012:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002014:	f7ff f868 	bl	80010e8 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201c:	f7ff f864 	bl	80010e8 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e030      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800202e:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x734>
 800203a:	e028      	b.n	800208e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2b0c      	cmp	r3, #12
 8002040:	d023      	beq.n	800208a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a08      	ldr	r2, [pc, #32]	; (8002068 <HAL_RCC_OscConfig+0x780>)
 8002048:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800204c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204e:	f7ff f84b 	bl	80010e8 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002054:	e00c      	b.n	8002070 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002056:	f7ff f847 	bl	80010e8 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d905      	bls.n	8002070 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e013      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
 8002068:	40021000 	.word	0x40021000
 800206c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_RCC_OscConfig+0x7b0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ec      	bne.n	8002056 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_RCC_OscConfig+0x7b0>)
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	4905      	ldr	r1, [pc, #20]	; (8002098 <HAL_RCC_OscConfig+0x7b0>)
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_RCC_OscConfig+0x7b4>)
 8002084:	4013      	ands	r3, r2
 8002086:	60cb      	str	r3, [r1, #12]
 8002088:	e001      	b.n	800208e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3720      	adds	r7, #32
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000
 800209c:	feeefffc 	.word	0xfeeefffc

080020a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0e7      	b.n	8002284 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020b4:	4b75      	ldr	r3, [pc, #468]	; (800228c <HAL_RCC_ClockConfig+0x1ec>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d910      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b72      	ldr	r3, [pc, #456]	; (800228c <HAL_RCC_ClockConfig+0x1ec>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 0207 	bic.w	r2, r3, #7
 80020ca:	4970      	ldr	r1, [pc, #448]	; (800228c <HAL_RCC_ClockConfig+0x1ec>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b6e      	ldr	r3, [pc, #440]	; (800228c <HAL_RCC_ClockConfig+0x1ec>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0cf      	b.n	8002284 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d010      	beq.n	8002112 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	4b66      	ldr	r3, [pc, #408]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d908      	bls.n	8002112 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002100:	4b63      	ldr	r3, [pc, #396]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4960      	ldr	r1, [pc, #384]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 800210e:	4313      	orrs	r3, r2
 8002110:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d04c      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002126:	4b5a      	ldr	r3, [pc, #360]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d121      	bne.n	8002176 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e0a6      	b.n	8002284 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d107      	bne.n	800214e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800213e:	4b54      	ldr	r3, [pc, #336]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d115      	bne.n	8002176 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e09a      	b.n	8002284 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d107      	bne.n	8002166 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002156:	4b4e      	ldr	r3, [pc, #312]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e08e      	b.n	8002284 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002166:	4b4a      	ldr	r3, [pc, #296]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e086      	b.n	8002284 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002176:	4b46      	ldr	r3, [pc, #280]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f023 0203 	bic.w	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4943      	ldr	r1, [pc, #268]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	4313      	orrs	r3, r2
 8002186:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002188:	f7fe ffae 	bl	80010e8 <HAL_GetTick>
 800218c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218e:	e00a      	b.n	80021a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002190:	f7fe ffaa 	bl	80010e8 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f241 3288 	movw	r2, #5000	; 0x1388
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e06e      	b.n	8002284 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a6:	4b3a      	ldr	r3, [pc, #232]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 020c 	and.w	r2, r3, #12
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d1eb      	bne.n	8002190 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d010      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	4b31      	ldr	r3, [pc, #196]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d208      	bcs.n	80021e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d4:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	492b      	ldr	r1, [pc, #172]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e6:	4b29      	ldr	r3, [pc, #164]	; (800228c <HAL_RCC_ClockConfig+0x1ec>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d210      	bcs.n	8002216 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f4:	4b25      	ldr	r3, [pc, #148]	; (800228c <HAL_RCC_ClockConfig+0x1ec>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f023 0207 	bic.w	r2, r3, #7
 80021fc:	4923      	ldr	r1, [pc, #140]	; (800228c <HAL_RCC_ClockConfig+0x1ec>)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	4313      	orrs	r3, r2
 8002202:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002204:	4b21      	ldr	r3, [pc, #132]	; (800228c <HAL_RCC_ClockConfig+0x1ec>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d001      	beq.n	8002216 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e036      	b.n	8002284 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002222:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	4918      	ldr	r1, [pc, #96]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 8002230:	4313      	orrs	r3, r2
 8002232:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d009      	beq.n	8002254 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4910      	ldr	r1, [pc, #64]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 8002250:	4313      	orrs	r3, r2
 8002252:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002254:	f000 f824 	bl	80022a0 <HAL_RCC_GetSysClockFreq>
 8002258:	4602      	mov	r2, r0
 800225a:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <HAL_RCC_ClockConfig+0x1f0>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	490b      	ldr	r1, [pc, #44]	; (8002294 <HAL_RCC_ClockConfig+0x1f4>)
 8002266:	5ccb      	ldrb	r3, [r1, r3]
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	fa22 f303 	lsr.w	r3, r2, r3
 8002270:	4a09      	ldr	r2, [pc, #36]	; (8002298 <HAL_RCC_ClockConfig+0x1f8>)
 8002272:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_RCC_ClockConfig+0x1fc>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe fee5 	bl	8001048 <HAL_InitTick>
 800227e:	4603      	mov	r3, r0
 8002280:	72fb      	strb	r3, [r7, #11]

  return status;
 8002282:	7afb      	ldrb	r3, [r7, #11]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40022000 	.word	0x40022000
 8002290:	40021000 	.word	0x40021000
 8002294:	08006168 	.word	0x08006168
 8002298:	20000000 	.word	0x20000000
 800229c:	20000004 	.word	0x20000004

080022a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ae:	4b3e      	ldr	r3, [pc, #248]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022b8:	4b3b      	ldr	r3, [pc, #236]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x34>
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	2b0c      	cmp	r3, #12
 80022cc:	d121      	bne.n	8002312 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d11e      	bne.n	8002312 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022d4:	4b34      	ldr	r3, [pc, #208]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d107      	bne.n	80022f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022e0:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e6:	0a1b      	lsrs	r3, r3, #8
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	e005      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022f0:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022fc:	4a2b      	ldr	r2, [pc, #172]	; (80023ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002304:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10d      	bne.n	8002328 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002310:	e00a      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	2b04      	cmp	r3, #4
 8002316:	d102      	bne.n	800231e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002318:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	e004      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d101      	bne.n	8002328 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002324:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002326:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	2b0c      	cmp	r3, #12
 800232c:	d134      	bne.n	8002398 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d003      	beq.n	8002346 <HAL_RCC_GetSysClockFreq+0xa6>
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d003      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0xac>
 8002344:	e005      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002348:	617b      	str	r3, [r7, #20]
      break;
 800234a:	e005      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800234c:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800234e:	617b      	str	r3, [r7, #20]
      break;
 8002350:	e002      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	617b      	str	r3, [r7, #20]
      break;
 8002356:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	3301      	adds	r3, #1
 8002364:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	0a1b      	lsrs	r3, r3, #8
 800236c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	fb03 f202 	mul.w	r2, r3, r2
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	fbb2 f3f3 	udiv	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	0e5b      	lsrs	r3, r3, #25
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	3301      	adds	r3, #1
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	fbb2 f3f3 	udiv	r3, r2, r3
 8002396:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002398:	69bb      	ldr	r3, [r7, #24]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3724      	adds	r7, #36	; 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	08006180 	.word	0x08006180
 80023b0:	00f42400 	.word	0x00f42400
 80023b4:	007a1200 	.word	0x007a1200

080023b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023bc:	4b03      	ldr	r3, [pc, #12]	; (80023cc <HAL_RCC_GetHCLKFreq+0x14>)
 80023be:	681b      	ldr	r3, [r3, #0]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20000000 	.word	0x20000000

080023d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023d4:	f7ff fff0 	bl	80023b8 <HAL_RCC_GetHCLKFreq>
 80023d8:	4602      	mov	r2, r0
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	4904      	ldr	r1, [pc, #16]	; (80023f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023e6:	5ccb      	ldrb	r3, [r1, r3]
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40021000 	.word	0x40021000
 80023f8:	08006178 	.word	0x08006178

080023fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002400:	f7ff ffda 	bl	80023b8 <HAL_RCC_GetHCLKFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	0adb      	lsrs	r3, r3, #11
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	4904      	ldr	r1, [pc, #16]	; (8002424 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002412:	5ccb      	ldrb	r3, [r1, r3]
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800241c:	4618      	mov	r0, r3
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000
 8002424:	08006178 	.word	0x08006178

08002428 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002430:	2300      	movs	r3, #0
 8002432:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002434:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002440:	f7ff f9ee 	bl	8001820 <HAL_PWREx_GetVoltageRange>
 8002444:	6178      	str	r0, [r7, #20]
 8002446:	e014      	b.n	8002472 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002448:	4b25      	ldr	r3, [pc, #148]	; (80024e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244c:	4a24      	ldr	r2, [pc, #144]	; (80024e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800244e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002452:	6593      	str	r3, [r2, #88]	; 0x58
 8002454:	4b22      	ldr	r3, [pc, #136]	; (80024e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002460:	f7ff f9de 	bl	8001820 <HAL_PWREx_GetVoltageRange>
 8002464:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002466:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	4a1d      	ldr	r2, [pc, #116]	; (80024e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800246c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002470:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002478:	d10b      	bne.n	8002492 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b80      	cmp	r3, #128	; 0x80
 800247e:	d919      	bls.n	80024b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2ba0      	cmp	r3, #160	; 0xa0
 8002484:	d902      	bls.n	800248c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002486:	2302      	movs	r3, #2
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	e013      	b.n	80024b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800248c:	2301      	movs	r3, #1
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	e010      	b.n	80024b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b80      	cmp	r3, #128	; 0x80
 8002496:	d902      	bls.n	800249e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002498:	2303      	movs	r3, #3
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	e00a      	b.n	80024b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b80      	cmp	r3, #128	; 0x80
 80024a2:	d102      	bne.n	80024aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024a4:	2302      	movs	r3, #2
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	e004      	b.n	80024b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b70      	cmp	r3, #112	; 0x70
 80024ae:	d101      	bne.n	80024b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024b0:	2301      	movs	r3, #1
 80024b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 0207 	bic.w	r2, r3, #7
 80024bc:	4909      	ldr	r1, [pc, #36]	; (80024e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024c4:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d001      	beq.n	80024d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40022000 	.word	0x40022000

080024e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024f0:	2300      	movs	r3, #0
 80024f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024f4:	2300      	movs	r3, #0
 80024f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002500:	2b00      	cmp	r3, #0
 8002502:	d041      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002508:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800250c:	d02a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800250e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002512:	d824      	bhi.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002514:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002518:	d008      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800251a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800251e:	d81e      	bhi.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002524:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002528:	d010      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800252a:	e018      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800252c:	4b86      	ldr	r3, [pc, #536]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a85      	ldr	r2, [pc, #532]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002536:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002538:	e015      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3304      	adds	r3, #4
 800253e:	2100      	movs	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f000 fabb 	bl	8002abc <RCCEx_PLLSAI1_Config>
 8002546:	4603      	mov	r3, r0
 8002548:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800254a:	e00c      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3320      	adds	r3, #32
 8002550:	2100      	movs	r1, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fba6 	bl	8002ca4 <RCCEx_PLLSAI2_Config>
 8002558:	4603      	mov	r3, r0
 800255a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800255c:	e003      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	74fb      	strb	r3, [r7, #19]
      break;
 8002562:	e000      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002564:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002566:	7cfb      	ldrb	r3, [r7, #19]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10b      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800256c:	4b76      	ldr	r3, [pc, #472]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800257a:	4973      	ldr	r1, [pc, #460]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002582:	e001      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002584:	7cfb      	ldrb	r3, [r7, #19]
 8002586:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d041      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002598:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800259c:	d02a      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800259e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025a2:	d824      	bhi.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025a8:	d008      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025ae:	d81e      	bhi.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80025b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025b8:	d010      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025ba:	e018      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025bc:	4b62      	ldr	r3, [pc, #392]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	4a61      	ldr	r2, [pc, #388]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025c8:	e015      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3304      	adds	r3, #4
 80025ce:	2100      	movs	r1, #0
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 fa73 	bl	8002abc <RCCEx_PLLSAI1_Config>
 80025d6:	4603      	mov	r3, r0
 80025d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025da:	e00c      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3320      	adds	r3, #32
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fb5e 	bl	8002ca4 <RCCEx_PLLSAI2_Config>
 80025e8:	4603      	mov	r3, r0
 80025ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025ec:	e003      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	74fb      	strb	r3, [r7, #19]
      break;
 80025f2:	e000      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025f6:	7cfb      	ldrb	r3, [r7, #19]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10b      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025fc:	4b52      	ldr	r3, [pc, #328]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800260a:	494f      	ldr	r1, [pc, #316]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002612:	e001      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002614:	7cfb      	ldrb	r3, [r7, #19]
 8002616:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80a0 	beq.w	8002766 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002626:	2300      	movs	r3, #0
 8002628:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800262a:	4b47      	ldr	r3, [pc, #284]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800263a:	2300      	movs	r3, #0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00d      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002640:	4b41      	ldr	r3, [pc, #260]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002644:	4a40      	ldr	r2, [pc, #256]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264a:	6593      	str	r3, [r2, #88]	; 0x58
 800264c:	4b3e      	ldr	r3, [pc, #248]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002658:	2301      	movs	r3, #1
 800265a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800265c:	4b3b      	ldr	r3, [pc, #236]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a3a      	ldr	r2, [pc, #232]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002666:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002668:	f7fe fd3e 	bl	80010e8 <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800266e:	e009      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002670:	f7fe fd3a 	bl	80010e8 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d902      	bls.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	74fb      	strb	r3, [r7, #19]
        break;
 8002682:	e005      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002684:	4b31      	ldr	r3, [pc, #196]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0ef      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d15c      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002696:	4b2c      	ldr	r3, [pc, #176]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d01f      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d019      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026b4:	4b24      	ldr	r3, [pc, #144]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026c0:	4b21      	ldr	r3, [pc, #132]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c6:	4a20      	ldr	r2, [pc, #128]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026d0:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d6:	4a1c      	ldr	r2, [pc, #112]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026e0:	4a19      	ldr	r2, [pc, #100]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d016      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7fe fcf9 	bl	80010e8 <HAL_GetTick>
 80026f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f8:	e00b      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fa:	f7fe fcf5 	bl	80010e8 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	f241 3288 	movw	r2, #5000	; 0x1388
 8002708:	4293      	cmp	r3, r2
 800270a:	d902      	bls.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	74fb      	strb	r3, [r7, #19]
            break;
 8002710:	e006      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0ec      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002720:	7cfb      	ldrb	r3, [r7, #19]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10c      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002726:	4b08      	ldr	r3, [pc, #32]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002736:	4904      	ldr	r1, [pc, #16]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800273e:	e009      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002740:	7cfb      	ldrb	r3, [r7, #19]
 8002742:	74bb      	strb	r3, [r7, #18]
 8002744:	e006      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000
 800274c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002750:	7cfb      	ldrb	r3, [r7, #19]
 8002752:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002754:	7c7b      	ldrb	r3, [r7, #17]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d105      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275a:	4b9e      	ldr	r3, [pc, #632]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	4a9d      	ldr	r2, [pc, #628]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002764:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002772:	4b98      	ldr	r3, [pc, #608]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002778:	f023 0203 	bic.w	r2, r3, #3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002780:	4994      	ldr	r1, [pc, #592]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002794:	4b8f      	ldr	r3, [pc, #572]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279a:	f023 020c 	bic.w	r2, r3, #12
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a2:	498c      	ldr	r1, [pc, #560]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027b6:	4b87      	ldr	r3, [pc, #540]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	4983      	ldr	r1, [pc, #524]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00a      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027d8:	4b7e      	ldr	r3, [pc, #504]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	497b      	ldr	r1, [pc, #492]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0310 	and.w	r3, r3, #16
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027fa:	4b76      	ldr	r3, [pc, #472]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002808:	4972      	ldr	r1, [pc, #456]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00a      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800281c:	4b6d      	ldr	r3, [pc, #436]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282a:	496a      	ldr	r1, [pc, #424]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800283e:	4b65      	ldr	r3, [pc, #404]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002844:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284c:	4961      	ldr	r1, [pc, #388]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002860:	4b5c      	ldr	r3, [pc, #368]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286e:	4959      	ldr	r1, [pc, #356]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002882:	4b54      	ldr	r3, [pc, #336]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002888:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002890:	4950      	ldr	r1, [pc, #320]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028a4:	4b4b      	ldr	r3, [pc, #300]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b2:	4948      	ldr	r1, [pc, #288]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028c6:	4b43      	ldr	r3, [pc, #268]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d4:	493f      	ldr	r1, [pc, #252]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d028      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028e8:	4b3a      	ldr	r3, [pc, #232]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f6:	4937      	ldr	r1, [pc, #220]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002902:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002906:	d106      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002908:	4b32      	ldr	r3, [pc, #200]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	4a31      	ldr	r2, [pc, #196]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002912:	60d3      	str	r3, [r2, #12]
 8002914:	e011      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800291a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800291e:	d10c      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3304      	adds	r3, #4
 8002924:	2101      	movs	r1, #1
 8002926:	4618      	mov	r0, r3
 8002928:	f000 f8c8 	bl	8002abc <RCCEx_PLLSAI1_Config>
 800292c:	4603      	mov	r3, r0
 800292e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002930:	7cfb      	ldrb	r3, [r7, #19]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002936:	7cfb      	ldrb	r3, [r7, #19]
 8002938:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d028      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002946:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002954:	491f      	ldr	r1, [pc, #124]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002964:	d106      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002966:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	4a1a      	ldr	r2, [pc, #104]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002970:	60d3      	str	r3, [r2, #12]
 8002972:	e011      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002978:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800297c:	d10c      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3304      	adds	r3, #4
 8002982:	2101      	movs	r1, #1
 8002984:	4618      	mov	r0, r3
 8002986:	f000 f899 	bl	8002abc <RCCEx_PLLSAI1_Config>
 800298a:	4603      	mov	r3, r0
 800298c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800298e:	7cfb      	ldrb	r3, [r7, #19]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002994:	7cfb      	ldrb	r3, [r7, #19]
 8002996:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d02b      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b2:	4908      	ldr	r1, [pc, #32]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029c2:	d109      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4a02      	ldr	r2, [pc, #8]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ce:	60d3      	str	r3, [r2, #12]
 80029d0:	e014      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029e0:	d10c      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2101      	movs	r1, #1
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 f867 	bl	8002abc <RCCEx_PLLSAI1_Config>
 80029ee:	4603      	mov	r3, r0
 80029f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029f2:	7cfb      	ldrb	r3, [r7, #19]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029f8:	7cfb      	ldrb	r3, [r7, #19]
 80029fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d02f      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a08:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a16:	4928      	ldr	r1, [pc, #160]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a26:	d10d      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	2102      	movs	r1, #2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 f844 	bl	8002abc <RCCEx_PLLSAI1_Config>
 8002a34:	4603      	mov	r3, r0
 8002a36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a38:	7cfb      	ldrb	r3, [r7, #19]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d014      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a3e:	7cfb      	ldrb	r3, [r7, #19]
 8002a40:	74bb      	strb	r3, [r7, #18]
 8002a42:	e011      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3320      	adds	r3, #32
 8002a52:	2102      	movs	r1, #2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 f925 	bl	8002ca4 <RCCEx_PLLSAI2_Config>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a5e:	7cfb      	ldrb	r3, [r7, #19]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a64:	7cfb      	ldrb	r3, [r7, #19]
 8002a66:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a74:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a82:	490d      	ldr	r1, [pc, #52]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aa6:	4904      	ldr	r1, [pc, #16]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002aae:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40021000 	.word	0x40021000

08002abc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aca:	4b75      	ldr	r3, [pc, #468]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d018      	beq.n	8002b08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ad6:	4b72      	ldr	r3, [pc, #456]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0203 	and.w	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d10d      	bne.n	8002b02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
       ||
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d009      	beq.n	8002b02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002aee:	4b6c      	ldr	r3, [pc, #432]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	091b      	lsrs	r3, r3, #4
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
       ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d047      	beq.n	8002b92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
 8002b06:	e044      	b.n	8002b92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d018      	beq.n	8002b42 <RCCEx_PLLSAI1_Config+0x86>
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d825      	bhi.n	8002b60 <RCCEx_PLLSAI1_Config+0xa4>
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d002      	beq.n	8002b1e <RCCEx_PLLSAI1_Config+0x62>
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d009      	beq.n	8002b30 <RCCEx_PLLSAI1_Config+0x74>
 8002b1c:	e020      	b.n	8002b60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b1e:	4b60      	ldr	r3, [pc, #384]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d11d      	bne.n	8002b66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b2e:	e01a      	b.n	8002b66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b30:	4b5b      	ldr	r3, [pc, #364]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d116      	bne.n	8002b6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b40:	e013      	b.n	8002b6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b42:	4b57      	ldr	r3, [pc, #348]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10f      	bne.n	8002b6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b4e:	4b54      	ldr	r3, [pc, #336]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b5e:	e006      	b.n	8002b6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
      break;
 8002b64:	e004      	b.n	8002b70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b66:	bf00      	nop
 8002b68:	e002      	b.n	8002b70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b6a:	bf00      	nop
 8002b6c:	e000      	b.n	8002b70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10d      	bne.n	8002b92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b76:	4b4a      	ldr	r3, [pc, #296]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6819      	ldr	r1, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	430b      	orrs	r3, r1
 8002b8c:	4944      	ldr	r1, [pc, #272]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d17d      	bne.n	8002c94 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b98:	4b41      	ldr	r3, [pc, #260]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a40      	ldr	r2, [pc, #256]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ba2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba4:	f7fe faa0 	bl	80010e8 <HAL_GetTick>
 8002ba8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002baa:	e009      	b.n	8002bc0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bac:	f7fe fa9c 	bl	80010e8 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d902      	bls.n	8002bc0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	73fb      	strb	r3, [r7, #15]
        break;
 8002bbe:	e005      	b.n	8002bcc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bc0:	4b37      	ldr	r3, [pc, #220]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1ef      	bne.n	8002bac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d160      	bne.n	8002c94 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d111      	bne.n	8002bfc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bd8:	4b31      	ldr	r3, [pc, #196]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6892      	ldr	r2, [r2, #8]
 8002be8:	0211      	lsls	r1, r2, #8
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68d2      	ldr	r2, [r2, #12]
 8002bee:	0912      	lsrs	r2, r2, #4
 8002bf0:	0452      	lsls	r2, r2, #17
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	492a      	ldr	r1, [pc, #168]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	610b      	str	r3, [r1, #16]
 8002bfa:	e027      	b.n	8002c4c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d112      	bne.n	8002c28 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c02:	4b27      	ldr	r3, [pc, #156]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6892      	ldr	r2, [r2, #8]
 8002c12:	0211      	lsls	r1, r2, #8
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6912      	ldr	r2, [r2, #16]
 8002c18:	0852      	lsrs	r2, r2, #1
 8002c1a:	3a01      	subs	r2, #1
 8002c1c:	0552      	lsls	r2, r2, #21
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	491f      	ldr	r1, [pc, #124]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	610b      	str	r3, [r1, #16]
 8002c26:	e011      	b.n	8002c4c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c28:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6892      	ldr	r2, [r2, #8]
 8002c38:	0211      	lsls	r1, r2, #8
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6952      	ldr	r2, [r2, #20]
 8002c3e:	0852      	lsrs	r2, r2, #1
 8002c40:	3a01      	subs	r2, #1
 8002c42:	0652      	lsls	r2, r2, #25
 8002c44:	430a      	orrs	r2, r1
 8002c46:	4916      	ldr	r1, [pc, #88]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c4c:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c58:	f7fe fa46 	bl	80010e8 <HAL_GetTick>
 8002c5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c5e:	e009      	b.n	8002c74 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c60:	f7fe fa42 	bl	80010e8 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d902      	bls.n	8002c74 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	73fb      	strb	r3, [r7, #15]
          break;
 8002c72:	e005      	b.n	8002c80 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c74:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0ef      	beq.n	8002c60 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	4904      	ldr	r1, [pc, #16]	; (8002ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000

08002ca4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cb2:	4b6a      	ldr	r3, [pc, #424]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d018      	beq.n	8002cf0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002cbe:	4b67      	ldr	r3, [pc, #412]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f003 0203 	and.w	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d10d      	bne.n	8002cea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
       ||
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002cd6:	4b61      	ldr	r3, [pc, #388]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d047      	beq.n	8002d7a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
 8002cee:	e044      	b.n	8002d7a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d018      	beq.n	8002d2a <RCCEx_PLLSAI2_Config+0x86>
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d825      	bhi.n	8002d48 <RCCEx_PLLSAI2_Config+0xa4>
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d002      	beq.n	8002d06 <RCCEx_PLLSAI2_Config+0x62>
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d009      	beq.n	8002d18 <RCCEx_PLLSAI2_Config+0x74>
 8002d04:	e020      	b.n	8002d48 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d06:	4b55      	ldr	r3, [pc, #340]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d11d      	bne.n	8002d4e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d16:	e01a      	b.n	8002d4e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d18:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d116      	bne.n	8002d52 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d28:	e013      	b.n	8002d52 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d2a:	4b4c      	ldr	r3, [pc, #304]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10f      	bne.n	8002d56 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d36:	4b49      	ldr	r3, [pc, #292]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d109      	bne.n	8002d56 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d46:	e006      	b.n	8002d56 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d4c:	e004      	b.n	8002d58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d4e:	bf00      	nop
 8002d50:	e002      	b.n	8002d58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d52:	bf00      	nop
 8002d54:	e000      	b.n	8002d58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d56:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10d      	bne.n	8002d7a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d5e:	4b3f      	ldr	r3, [pc, #252]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6819      	ldr	r1, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	430b      	orrs	r3, r1
 8002d74:	4939      	ldr	r1, [pc, #228]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d167      	bne.n	8002e50 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d80:	4b36      	ldr	r3, [pc, #216]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a35      	ldr	r2, [pc, #212]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d8c:	f7fe f9ac 	bl	80010e8 <HAL_GetTick>
 8002d90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d92:	e009      	b.n	8002da8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d94:	f7fe f9a8 	bl	80010e8 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d902      	bls.n	8002da8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	73fb      	strb	r3, [r7, #15]
        break;
 8002da6:	e005      	b.n	8002db4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002da8:	4b2c      	ldr	r3, [pc, #176]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1ef      	bne.n	8002d94 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d14a      	bne.n	8002e50 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d111      	bne.n	8002de4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dc0:	4b26      	ldr	r3, [pc, #152]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6892      	ldr	r2, [r2, #8]
 8002dd0:	0211      	lsls	r1, r2, #8
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68d2      	ldr	r2, [r2, #12]
 8002dd6:	0912      	lsrs	r2, r2, #4
 8002dd8:	0452      	lsls	r2, r2, #17
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	491f      	ldr	r1, [pc, #124]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	614b      	str	r3, [r1, #20]
 8002de2:	e011      	b.n	8002e08 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002de4:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6892      	ldr	r2, [r2, #8]
 8002df4:	0211      	lsls	r1, r2, #8
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6912      	ldr	r2, [r2, #16]
 8002dfa:	0852      	lsrs	r2, r2, #1
 8002dfc:	3a01      	subs	r2, #1
 8002dfe:	0652      	lsls	r2, r2, #25
 8002e00:	430a      	orrs	r2, r1
 8002e02:	4916      	ldr	r1, [pc, #88]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e08:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e14:	f7fe f968 	bl	80010e8 <HAL_GetTick>
 8002e18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e1a:	e009      	b.n	8002e30 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e1c:	f7fe f964 	bl	80010e8 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d902      	bls.n	8002e30 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	73fb      	strb	r3, [r7, #15]
          break;
 8002e2e:	e005      	b.n	8002e3c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e30:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0ef      	beq.n	8002e1c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d106      	bne.n	8002e50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e42:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	4904      	ldr	r1, [pc, #16]	; (8002e5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000

08002e60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e049      	b.n	8002f06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fd ff2a 	bl	8000ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	f000 f986 	bl	80031b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d122      	bne.n	8002f6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d11b      	bne.n	8002f6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f06f 0202 	mvn.w	r2, #2
 8002f3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f90f 	bl	8003174 <HAL_TIM_IC_CaptureCallback>
 8002f56:	e005      	b.n	8002f64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f901 	bl	8003160 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f912 	bl	8003188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d122      	bne.n	8002fbe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d11b      	bne.n	8002fbe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f06f 0204 	mvn.w	r2, #4
 8002f8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f8e5 	bl	8003174 <HAL_TIM_IC_CaptureCallback>
 8002faa:	e005      	b.n	8002fb8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f8d7 	bl	8003160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f8e8 	bl	8003188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d122      	bne.n	8003012 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d11b      	bne.n	8003012 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f06f 0208 	mvn.w	r2, #8
 8002fe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f8bb 	bl	8003174 <HAL_TIM_IC_CaptureCallback>
 8002ffe:	e005      	b.n	800300c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f8ad 	bl	8003160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f8be 	bl	8003188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b10      	cmp	r3, #16
 800301e:	d122      	bne.n	8003066 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	2b10      	cmp	r3, #16
 800302c:	d11b      	bne.n	8003066 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f06f 0210 	mvn.w	r2, #16
 8003036:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2208      	movs	r2, #8
 800303c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f891 	bl	8003174 <HAL_TIM_IC_CaptureCallback>
 8003052:	e005      	b.n	8003060 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f883 	bl	8003160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f894 	bl	8003188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	d10e      	bne.n	8003092 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b01      	cmp	r3, #1
 8003080:	d107      	bne.n	8003092 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f06f 0201 	mvn.w	r2, #1
 800308a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f85d 	bl	800314c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309c:	2b80      	cmp	r3, #128	; 0x80
 800309e:	d10e      	bne.n	80030be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030aa:	2b80      	cmp	r3, #128	; 0x80
 80030ac:	d107      	bne.n	80030be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f9a5 	bl	8003408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030cc:	d10e      	bne.n	80030ec <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d8:	2b80      	cmp	r3, #128	; 0x80
 80030da:	d107      	bne.n	80030ec <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f998 	bl	800341c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f6:	2b40      	cmp	r3, #64	; 0x40
 80030f8:	d10e      	bne.n	8003118 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003104:	2b40      	cmp	r3, #64	; 0x40
 8003106:	d107      	bne.n	8003118 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f842 	bl	800319c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b20      	cmp	r3, #32
 8003124:	d10e      	bne.n	8003144 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b20      	cmp	r3, #32
 8003132:	d107      	bne.n	8003144 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0220 	mvn.w	r2, #32
 800313c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f958 	bl	80033f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003144:	bf00      	nop
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a40      	ldr	r2, [pc, #256]	; (80032c4 <TIM_Base_SetConfig+0x114>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d013      	beq.n	80031f0 <TIM_Base_SetConfig+0x40>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ce:	d00f      	beq.n	80031f0 <TIM_Base_SetConfig+0x40>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a3d      	ldr	r2, [pc, #244]	; (80032c8 <TIM_Base_SetConfig+0x118>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00b      	beq.n	80031f0 <TIM_Base_SetConfig+0x40>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a3c      	ldr	r2, [pc, #240]	; (80032cc <TIM_Base_SetConfig+0x11c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d007      	beq.n	80031f0 <TIM_Base_SetConfig+0x40>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a3b      	ldr	r2, [pc, #236]	; (80032d0 <TIM_Base_SetConfig+0x120>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d003      	beq.n	80031f0 <TIM_Base_SetConfig+0x40>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a3a      	ldr	r2, [pc, #232]	; (80032d4 <TIM_Base_SetConfig+0x124>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d108      	bne.n	8003202 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a2f      	ldr	r2, [pc, #188]	; (80032c4 <TIM_Base_SetConfig+0x114>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d01f      	beq.n	800324a <TIM_Base_SetConfig+0x9a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003210:	d01b      	beq.n	800324a <TIM_Base_SetConfig+0x9a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a2c      	ldr	r2, [pc, #176]	; (80032c8 <TIM_Base_SetConfig+0x118>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d017      	beq.n	800324a <TIM_Base_SetConfig+0x9a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a2b      	ldr	r2, [pc, #172]	; (80032cc <TIM_Base_SetConfig+0x11c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d013      	beq.n	800324a <TIM_Base_SetConfig+0x9a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a2a      	ldr	r2, [pc, #168]	; (80032d0 <TIM_Base_SetConfig+0x120>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00f      	beq.n	800324a <TIM_Base_SetConfig+0x9a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a29      	ldr	r2, [pc, #164]	; (80032d4 <TIM_Base_SetConfig+0x124>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00b      	beq.n	800324a <TIM_Base_SetConfig+0x9a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a28      	ldr	r2, [pc, #160]	; (80032d8 <TIM_Base_SetConfig+0x128>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d007      	beq.n	800324a <TIM_Base_SetConfig+0x9a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a27      	ldr	r2, [pc, #156]	; (80032dc <TIM_Base_SetConfig+0x12c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d003      	beq.n	800324a <TIM_Base_SetConfig+0x9a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a26      	ldr	r2, [pc, #152]	; (80032e0 <TIM_Base_SetConfig+0x130>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d108      	bne.n	800325c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4313      	orrs	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	4313      	orrs	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a10      	ldr	r2, [pc, #64]	; (80032c4 <TIM_Base_SetConfig+0x114>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d00f      	beq.n	80032a8 <TIM_Base_SetConfig+0xf8>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a12      	ldr	r2, [pc, #72]	; (80032d4 <TIM_Base_SetConfig+0x124>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d00b      	beq.n	80032a8 <TIM_Base_SetConfig+0xf8>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a11      	ldr	r2, [pc, #68]	; (80032d8 <TIM_Base_SetConfig+0x128>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d007      	beq.n	80032a8 <TIM_Base_SetConfig+0xf8>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a10      	ldr	r2, [pc, #64]	; (80032dc <TIM_Base_SetConfig+0x12c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d003      	beq.n	80032a8 <TIM_Base_SetConfig+0xf8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <TIM_Base_SetConfig+0x130>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d103      	bne.n	80032b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	615a      	str	r2, [r3, #20]
}
 80032b6:	bf00      	nop
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40012c00 	.word	0x40012c00
 80032c8:	40000400 	.word	0x40000400
 80032cc:	40000800 	.word	0x40000800
 80032d0:	40000c00 	.word	0x40000c00
 80032d4:	40013400 	.word	0x40013400
 80032d8:	40014000 	.word	0x40014000
 80032dc:	40014400 	.word	0x40014400
 80032e0:	40014800 	.word	0x40014800

080032e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e068      	b.n	80033ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a2e      	ldr	r2, [pc, #184]	; (80033dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d004      	beq.n	8003330 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a2d      	ldr	r2, [pc, #180]	; (80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d108      	bne.n	8003342 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003336:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003348:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1e      	ldr	r2, [pc, #120]	; (80033dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d01d      	beq.n	80033a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336e:	d018      	beq.n	80033a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1b      	ldr	r2, [pc, #108]	; (80033e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d013      	beq.n	80033a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1a      	ldr	r2, [pc, #104]	; (80033e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00e      	beq.n	80033a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a18      	ldr	r2, [pc, #96]	; (80033ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d009      	beq.n	80033a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d004      	beq.n	80033a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a14      	ldr	r2, [pc, #80]	; (80033f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d10c      	bne.n	80033bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40012c00 	.word	0x40012c00
 80033e0:	40013400 	.word	0x40013400
 80033e4:	40000400 	.word	0x40000400
 80033e8:	40000800 	.word	0x40000800
 80033ec:	40000c00 	.word	0x40000c00
 80033f0:	40014000 	.word	0x40014000

080033f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e040      	b.n	80034c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7fd fc6a 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2224      	movs	r2, #36	; 0x24
 800345c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0201 	bic.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fbe8 	bl	8003c44 <UART_SetConfig>
 8003474:	4603      	mov	r3, r0
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e022      	b.n	80034c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fe94 	bl	80041b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800349a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 ff1b 	bl	80042f8 <UART_CheckIdleState>
 80034c2:	4603      	mov	r3, r0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b08b      	sub	sp, #44	; 0x2c
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	4613      	mov	r3, r2
 80034d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d156      	bne.n	8003590 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <HAL_UART_Transmit_IT+0x22>
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e04f      	b.n	8003592 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_UART_Transmit_IT+0x34>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e048      	b.n	8003592 <HAL_UART_Transmit_IT+0xc6>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	88fa      	ldrh	r2, [r7, #6]
 8003512:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	88fa      	ldrh	r2, [r7, #6]
 800351a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2221      	movs	r2, #33	; 0x21
 8003530:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353a:	d107      	bne.n	800354c <HAL_UART_Transmit_IT+0x80>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d103      	bne.n	800354c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4a16      	ldr	r2, [pc, #88]	; (80035a0 <HAL_UART_Transmit_IT+0xd4>)
 8003548:	669a      	str	r2, [r3, #104]	; 0x68
 800354a:	e002      	b.n	8003552 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4a15      	ldr	r2, [pc, #84]	; (80035a4 <HAL_UART_Transmit_IT+0xd8>)
 8003550:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	e853 3f00 	ldrex	r3, [r3]
 8003566:	613b      	str	r3, [r7, #16]
   return(result);
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	623b      	str	r3, [r7, #32]
 800357a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357c:	69f9      	ldr	r1, [r7, #28]
 800357e:	6a3a      	ldr	r2, [r7, #32]
 8003580:	e841 2300 	strex	r3, r2, [r1]
 8003584:	61bb      	str	r3, [r7, #24]
   return(result);
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1e6      	bne.n	800355a <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	e000      	b.n	8003592 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003590:	2302      	movs	r3, #2
  }
}
 8003592:	4618      	mov	r0, r3
 8003594:	372c      	adds	r7, #44	; 0x2c
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	08004853 	.word	0x08004853
 80035a4:	0800479b 	.word	0x0800479b

080035a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	; 0x28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	4613      	mov	r3, r2
 80035b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d142      	bne.n	8003644 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <HAL_UART_Receive_IT+0x22>
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e03b      	b.n	8003646 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_UART_Receive_IT+0x34>
 80035d8:	2302      	movs	r3, #2
 80035da:	e034      	b.n	8003646 <HAL_UART_Receive_IT+0x9e>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a18      	ldr	r2, [pc, #96]	; (8003650 <HAL_UART_Receive_IT+0xa8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d01f      	beq.n	8003634 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d018      	beq.n	8003634 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	e853 3f00 	ldrex	r3, [r3]
 800360e:	613b      	str	r3, [r7, #16]
   return(result);
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	623b      	str	r3, [r7, #32]
 8003622:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003624:	69f9      	ldr	r1, [r7, #28]
 8003626:	6a3a      	ldr	r2, [r7, #32]
 8003628:	e841 2300 	strex	r3, r2, [r1]
 800362c:	61bb      	str	r3, [r7, #24]
   return(result);
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e6      	bne.n	8003602 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	461a      	mov	r2, r3
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 ff6a 	bl	8004514 <UART_Start_Receive_IT>
 8003640:	4603      	mov	r3, r0
 8003642:	e000      	b.n	8003646 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003644:	2302      	movs	r3, #2
  }
}
 8003646:	4618      	mov	r0, r3
 8003648:	3728      	adds	r7, #40	; 0x28
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40008000 	.word	0x40008000

08003654 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b0ba      	sub	sp, #232	; 0xe8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800367a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800367e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003682:	4013      	ands	r3, r2
 8003684:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003688:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d115      	bne.n	80036bc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00f      	beq.n	80036bc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800369c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d009      	beq.n	80036bc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 82a6 	beq.w	8003bfe <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	4798      	blx	r3
      }
      return;
 80036ba:	e2a0      	b.n	8003bfe <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80036bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8117 	beq.w	80038f4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80036c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80036d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80036d6:	4b85      	ldr	r3, [pc, #532]	; (80038ec <HAL_UART_IRQHandler+0x298>)
 80036d8:	4013      	ands	r3, r2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 810a 	beq.w	80038f4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d011      	beq.n	8003710 <HAL_UART_IRQHandler+0xbc>
 80036ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00b      	beq.n	8003710 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2201      	movs	r2, #1
 80036fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003706:	f043 0201 	orr.w	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d011      	beq.n	8003740 <HAL_UART_IRQHandler+0xec>
 800371c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00b      	beq.n	8003740 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2202      	movs	r2, #2
 800372e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003736:	f043 0204 	orr.w	r2, r3, #4
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d011      	beq.n	8003770 <HAL_UART_IRQHandler+0x11c>
 800374c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00b      	beq.n	8003770 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2204      	movs	r2, #4
 800375e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003766:	f043 0202 	orr.w	r2, r3, #2
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	2b00      	cmp	r3, #0
 800377a:	d017      	beq.n	80037ac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800377c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b00      	cmp	r3, #0
 8003786:	d105      	bne.n	8003794 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800378c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00b      	beq.n	80037ac <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2208      	movs	r2, #8
 800379a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037a2:	f043 0208 	orr.w	r2, r3, #8
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d012      	beq.n	80037de <HAL_UART_IRQHandler+0x18a>
 80037b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00c      	beq.n	80037de <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037d4:	f043 0220 	orr.w	r2, r3, #32
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 820c 	beq.w	8003c02 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00d      	beq.n	8003812 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037fa:	f003 0320 	and.w	r3, r3, #32
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003818:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b40      	cmp	r3, #64	; 0x40
 8003828:	d005      	beq.n	8003836 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800382a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800382e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003832:	2b00      	cmp	r3, #0
 8003834:	d04f      	beq.n	80038d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 ff36 	bl	80046a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003846:	2b40      	cmp	r3, #64	; 0x40
 8003848:	d141      	bne.n	80038ce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3308      	adds	r3, #8
 8003850:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003854:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003858:	e853 3f00 	ldrex	r3, [r3]
 800385c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003860:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3308      	adds	r3, #8
 8003872:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003876:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800387a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003882:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003886:	e841 2300 	strex	r3, r2, [r1]
 800388a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800388e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1d9      	bne.n	800384a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389a:	2b00      	cmp	r3, #0
 800389c:	d013      	beq.n	80038c6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	4a13      	ldr	r2, [pc, #76]	; (80038f0 <HAL_UART_IRQHandler+0x29c>)
 80038a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd fd77 	bl	800139e <HAL_DMA_Abort_IT>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d017      	beq.n	80038e6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80038c0:	4610      	mov	r0, r2
 80038c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c4:	e00f      	b.n	80038e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f9a6 	bl	8003c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038cc:	e00b      	b.n	80038e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f9a2 	bl	8003c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d4:	e007      	b.n	80038e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f99e 	bl	8003c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80038e4:	e18d      	b.n	8003c02 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e6:	bf00      	nop
    return;
 80038e8:	e18b      	b.n	8003c02 <HAL_UART_IRQHandler+0x5ae>
 80038ea:	bf00      	nop
 80038ec:	04000120 	.word	0x04000120
 80038f0:	0800476f 	.word	0x0800476f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	f040 8146 	bne.w	8003b8a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 813f 	beq.w	8003b8a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800390c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003910:	f003 0310 	and.w	r3, r3, #16
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 8138 	beq.w	8003b8a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2210      	movs	r2, #16
 8003920:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392c:	2b40      	cmp	r3, #64	; 0x40
 800392e:	f040 80b4 	bne.w	8003a9a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800393e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 815f 	beq.w	8003c06 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800394e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003952:	429a      	cmp	r2, r3
 8003954:	f080 8157 	bcs.w	8003c06 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800395e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b00      	cmp	r3, #0
 8003970:	f040 8085 	bne.w	8003a7e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003980:	e853 3f00 	ldrex	r3, [r3]
 8003984:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003988:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800398c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003990:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800399e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80039a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1da      	bne.n	8003974 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3308      	adds	r3, #8
 80039c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039d0:	f023 0301 	bic.w	r3, r3, #1
 80039d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3308      	adds	r3, #8
 80039de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039ee:	e841 2300 	strex	r3, r2, [r1]
 80039f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1e1      	bne.n	80039be <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3308      	adds	r3, #8
 8003a00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3308      	adds	r3, #8
 8003a1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a26:	e841 2300 	strex	r3, r2, [r1]
 8003a2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1e3      	bne.n	80039fa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a46:	e853 3f00 	ldrex	r3, [r3]
 8003a4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a4e:	f023 0310 	bic.w	r3, r3, #16
 8003a52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a60:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a62:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e4      	bne.n	8003a3e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fd fc52 	bl	8001322 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	4619      	mov	r1, r3
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f8ca 	bl	8003c2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a98:	e0b5      	b.n	8003c06 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 80a7 	beq.w	8003c0a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003abc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80a2 	beq.w	8003c0a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ada:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8003aea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003aee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003af0:	e841 2300 	strex	r3, r2, [r1]
 8003af4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e4      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3308      	adds	r3, #8
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	e853 3f00 	ldrex	r3, [r3]
 8003b0a:	623b      	str	r3, [r7, #32]
   return(result);
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b20:	633a      	str	r2, [r7, #48]	; 0x30
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b28:	e841 2300 	strex	r3, r2, [r1]
 8003b2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1e3      	bne.n	8003afc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0310 	bic.w	r3, r3, #16
 8003b5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b68:	61fb      	str	r3, [r7, #28]
 8003b6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	69b9      	ldr	r1, [r7, #24]
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	617b      	str	r3, [r7, #20]
   return(result);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e4      	bne.n	8003b46 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b80:	4619      	mov	r1, r3
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f852 	bl	8003c2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b88:	e03f      	b.n	8003c0a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00e      	beq.n	8003bb4 <HAL_UART_IRQHandler+0x560>
 8003b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d008      	beq.n	8003bb4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003baa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f001 f83a 	bl	8004c26 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bb2:	e02d      	b.n	8003c10 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00e      	beq.n	8003bde <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01c      	beq.n	8003c0e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	4798      	blx	r3
    }
    return;
 8003bdc:	e017      	b.n	8003c0e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d012      	beq.n	8003c10 <HAL_UART_IRQHandler+0x5bc>
 8003bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00c      	beq.n	8003c10 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fe8b 	bl	8004912 <UART_EndTransmit_IT>
    return;
 8003bfc:	e008      	b.n	8003c10 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003bfe:	bf00      	nop
 8003c00:	e006      	b.n	8003c10 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003c02:	bf00      	nop
 8003c04:	e004      	b.n	8003c10 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003c06:	bf00      	nop
 8003c08:	e002      	b.n	8003c10 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003c0a:	bf00      	nop
 8003c0c:	e000      	b.n	8003c10 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003c0e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003c10:	37e8      	adds	r7, #232	; 0xe8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop

08003c18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	460b      	mov	r3, r1
 8003c36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c48:	b08a      	sub	sp, #40	; 0x28
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4ba4      	ldr	r3, [pc, #656]	; (8003f04 <UART_SetConfig+0x2c0>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a99      	ldr	r2, [pc, #612]	; (8003f08 <UART_SetConfig+0x2c4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d004      	beq.n	8003cb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cac:	4313      	orrs	r3, r2
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a90      	ldr	r2, [pc, #576]	; (8003f0c <UART_SetConfig+0x2c8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d126      	bne.n	8003d1c <UART_SetConfig+0xd8>
 8003cce:	4b90      	ldr	r3, [pc, #576]	; (8003f10 <UART_SetConfig+0x2cc>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d81b      	bhi.n	8003d14 <UART_SetConfig+0xd0>
 8003cdc:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <UART_SetConfig+0xa0>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003cf5 	.word	0x08003cf5
 8003ce8:	08003d05 	.word	0x08003d05
 8003cec:	08003cfd 	.word	0x08003cfd
 8003cf0:	08003d0d 	.word	0x08003d0d
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cfa:	e116      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d02:	e112      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003d04:	2304      	movs	r3, #4
 8003d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d0a:	e10e      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003d0c:	2308      	movs	r3, #8
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d12:	e10a      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003d14:	2310      	movs	r3, #16
 8003d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d1a:	e106      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a7c      	ldr	r2, [pc, #496]	; (8003f14 <UART_SetConfig+0x2d0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d138      	bne.n	8003d98 <UART_SetConfig+0x154>
 8003d26:	4b7a      	ldr	r3, [pc, #488]	; (8003f10 <UART_SetConfig+0x2cc>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	2b0c      	cmp	r3, #12
 8003d32:	d82d      	bhi.n	8003d90 <UART_SetConfig+0x14c>
 8003d34:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <UART_SetConfig+0xf8>)
 8003d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3a:	bf00      	nop
 8003d3c:	08003d71 	.word	0x08003d71
 8003d40:	08003d91 	.word	0x08003d91
 8003d44:	08003d91 	.word	0x08003d91
 8003d48:	08003d91 	.word	0x08003d91
 8003d4c:	08003d81 	.word	0x08003d81
 8003d50:	08003d91 	.word	0x08003d91
 8003d54:	08003d91 	.word	0x08003d91
 8003d58:	08003d91 	.word	0x08003d91
 8003d5c:	08003d79 	.word	0x08003d79
 8003d60:	08003d91 	.word	0x08003d91
 8003d64:	08003d91 	.word	0x08003d91
 8003d68:	08003d91 	.word	0x08003d91
 8003d6c:	08003d89 	.word	0x08003d89
 8003d70:	2300      	movs	r3, #0
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d76:	e0d8      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7e:	e0d4      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003d80:	2304      	movs	r3, #4
 8003d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d86:	e0d0      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003d88:	2308      	movs	r3, #8
 8003d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8e:	e0cc      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003d90:	2310      	movs	r3, #16
 8003d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d96:	e0c8      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a5e      	ldr	r2, [pc, #376]	; (8003f18 <UART_SetConfig+0x2d4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d125      	bne.n	8003dee <UART_SetConfig+0x1aa>
 8003da2:	4b5b      	ldr	r3, [pc, #364]	; (8003f10 <UART_SetConfig+0x2cc>)
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003dac:	2b30      	cmp	r3, #48	; 0x30
 8003dae:	d016      	beq.n	8003dde <UART_SetConfig+0x19a>
 8003db0:	2b30      	cmp	r3, #48	; 0x30
 8003db2:	d818      	bhi.n	8003de6 <UART_SetConfig+0x1a2>
 8003db4:	2b20      	cmp	r3, #32
 8003db6:	d00a      	beq.n	8003dce <UART_SetConfig+0x18a>
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d814      	bhi.n	8003de6 <UART_SetConfig+0x1a2>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <UART_SetConfig+0x182>
 8003dc0:	2b10      	cmp	r3, #16
 8003dc2:	d008      	beq.n	8003dd6 <UART_SetConfig+0x192>
 8003dc4:	e00f      	b.n	8003de6 <UART_SetConfig+0x1a2>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dcc:	e0ad      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd4:	e0a9      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ddc:	e0a5      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003dde:	2308      	movs	r3, #8
 8003de0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de4:	e0a1      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003de6:	2310      	movs	r3, #16
 8003de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dec:	e09d      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a4a      	ldr	r2, [pc, #296]	; (8003f1c <UART_SetConfig+0x2d8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d125      	bne.n	8003e44 <UART_SetConfig+0x200>
 8003df8:	4b45      	ldr	r3, [pc, #276]	; (8003f10 <UART_SetConfig+0x2cc>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e02:	2bc0      	cmp	r3, #192	; 0xc0
 8003e04:	d016      	beq.n	8003e34 <UART_SetConfig+0x1f0>
 8003e06:	2bc0      	cmp	r3, #192	; 0xc0
 8003e08:	d818      	bhi.n	8003e3c <UART_SetConfig+0x1f8>
 8003e0a:	2b80      	cmp	r3, #128	; 0x80
 8003e0c:	d00a      	beq.n	8003e24 <UART_SetConfig+0x1e0>
 8003e0e:	2b80      	cmp	r3, #128	; 0x80
 8003e10:	d814      	bhi.n	8003e3c <UART_SetConfig+0x1f8>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <UART_SetConfig+0x1d8>
 8003e16:	2b40      	cmp	r3, #64	; 0x40
 8003e18:	d008      	beq.n	8003e2c <UART_SetConfig+0x1e8>
 8003e1a:	e00f      	b.n	8003e3c <UART_SetConfig+0x1f8>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e22:	e082      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003e24:	2302      	movs	r3, #2
 8003e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e2a:	e07e      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e32:	e07a      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003e34:	2308      	movs	r3, #8
 8003e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e3a:	e076      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003e3c:	2310      	movs	r3, #16
 8003e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e42:	e072      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a35      	ldr	r2, [pc, #212]	; (8003f20 <UART_SetConfig+0x2dc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d12a      	bne.n	8003ea4 <UART_SetConfig+0x260>
 8003e4e:	4b30      	ldr	r3, [pc, #192]	; (8003f10 <UART_SetConfig+0x2cc>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e5c:	d01a      	beq.n	8003e94 <UART_SetConfig+0x250>
 8003e5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e62:	d81b      	bhi.n	8003e9c <UART_SetConfig+0x258>
 8003e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e68:	d00c      	beq.n	8003e84 <UART_SetConfig+0x240>
 8003e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e6e:	d815      	bhi.n	8003e9c <UART_SetConfig+0x258>
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <UART_SetConfig+0x238>
 8003e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e78:	d008      	beq.n	8003e8c <UART_SetConfig+0x248>
 8003e7a:	e00f      	b.n	8003e9c <UART_SetConfig+0x258>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e82:	e052      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003e84:	2302      	movs	r3, #2
 8003e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e8a:	e04e      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e92:	e04a      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003e94:	2308      	movs	r3, #8
 8003e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e9a:	e046      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003e9c:	2310      	movs	r3, #16
 8003e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea2:	e042      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a17      	ldr	r2, [pc, #92]	; (8003f08 <UART_SetConfig+0x2c4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d13a      	bne.n	8003f24 <UART_SetConfig+0x2e0>
 8003eae:	4b18      	ldr	r3, [pc, #96]	; (8003f10 <UART_SetConfig+0x2cc>)
 8003eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003eb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ebc:	d01a      	beq.n	8003ef4 <UART_SetConfig+0x2b0>
 8003ebe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ec2:	d81b      	bhi.n	8003efc <UART_SetConfig+0x2b8>
 8003ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec8:	d00c      	beq.n	8003ee4 <UART_SetConfig+0x2a0>
 8003eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ece:	d815      	bhi.n	8003efc <UART_SetConfig+0x2b8>
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <UART_SetConfig+0x298>
 8003ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed8:	d008      	beq.n	8003eec <UART_SetConfig+0x2a8>
 8003eda:	e00f      	b.n	8003efc <UART_SetConfig+0x2b8>
 8003edc:	2300      	movs	r3, #0
 8003ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee2:	e022      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eea:	e01e      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003eec:	2304      	movs	r3, #4
 8003eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ef2:	e01a      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003ef4:	2308      	movs	r3, #8
 8003ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003efa:	e016      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003efc:	2310      	movs	r3, #16
 8003efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f02:	e012      	b.n	8003f2a <UART_SetConfig+0x2e6>
 8003f04:	efff69f3 	.word	0xefff69f3
 8003f08:	40008000 	.word	0x40008000
 8003f0c:	40013800 	.word	0x40013800
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40004400 	.word	0x40004400
 8003f18:	40004800 	.word	0x40004800
 8003f1c:	40004c00 	.word	0x40004c00
 8003f20:	40005000 	.word	0x40005000
 8003f24:	2310      	movs	r3, #16
 8003f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a9f      	ldr	r2, [pc, #636]	; (80041ac <UART_SetConfig+0x568>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d17a      	bne.n	800402a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d824      	bhi.n	8003f86 <UART_SetConfig+0x342>
 8003f3c:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <UART_SetConfig+0x300>)
 8003f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f42:	bf00      	nop
 8003f44:	08003f69 	.word	0x08003f69
 8003f48:	08003f87 	.word	0x08003f87
 8003f4c:	08003f71 	.word	0x08003f71
 8003f50:	08003f87 	.word	0x08003f87
 8003f54:	08003f77 	.word	0x08003f77
 8003f58:	08003f87 	.word	0x08003f87
 8003f5c:	08003f87 	.word	0x08003f87
 8003f60:	08003f87 	.word	0x08003f87
 8003f64:	08003f7f 	.word	0x08003f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f68:	f7fe fa32 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 8003f6c:	61f8      	str	r0, [r7, #28]
        break;
 8003f6e:	e010      	b.n	8003f92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f70:	4b8f      	ldr	r3, [pc, #572]	; (80041b0 <UART_SetConfig+0x56c>)
 8003f72:	61fb      	str	r3, [r7, #28]
        break;
 8003f74:	e00d      	b.n	8003f92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f76:	f7fe f993 	bl	80022a0 <HAL_RCC_GetSysClockFreq>
 8003f7a:	61f8      	str	r0, [r7, #28]
        break;
 8003f7c:	e009      	b.n	8003f92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f82:	61fb      	str	r3, [r7, #28]
        break;
 8003f84:	e005      	b.n	8003f92 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80fb 	beq.w	8004190 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	4413      	add	r3, r2
 8003fa4:	69fa      	ldr	r2, [r7, #28]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d305      	bcc.n	8003fb6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d903      	bls.n	8003fbe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fbc:	e0e8      	b.n	8004190 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	461c      	mov	r4, r3
 8003fc4:	4615      	mov	r5, r2
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	022b      	lsls	r3, r5, #8
 8003fd0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003fd4:	0222      	lsls	r2, r4, #8
 8003fd6:	68f9      	ldr	r1, [r7, #12]
 8003fd8:	6849      	ldr	r1, [r1, #4]
 8003fda:	0849      	lsrs	r1, r1, #1
 8003fdc:	2000      	movs	r0, #0
 8003fde:	4688      	mov	r8, r1
 8003fe0:	4681      	mov	r9, r0
 8003fe2:	eb12 0a08 	adds.w	sl, r2, r8
 8003fe6:	eb43 0b09 	adc.w	fp, r3, r9
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	603b      	str	r3, [r7, #0]
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ff8:	4650      	mov	r0, sl
 8003ffa:	4659      	mov	r1, fp
 8003ffc:	f7fc f950 	bl	80002a0 <__aeabi_uldivmod>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4613      	mov	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800400e:	d308      	bcc.n	8004022 <UART_SetConfig+0x3de>
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004016:	d204      	bcs.n	8004022 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	60da      	str	r2, [r3, #12]
 8004020:	e0b6      	b.n	8004190 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004028:	e0b2      	b.n	8004190 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004032:	d15e      	bne.n	80040f2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004034:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004038:	2b08      	cmp	r3, #8
 800403a:	d828      	bhi.n	800408e <UART_SetConfig+0x44a>
 800403c:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <UART_SetConfig+0x400>)
 800403e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004042:	bf00      	nop
 8004044:	08004069 	.word	0x08004069
 8004048:	08004071 	.word	0x08004071
 800404c:	08004079 	.word	0x08004079
 8004050:	0800408f 	.word	0x0800408f
 8004054:	0800407f 	.word	0x0800407f
 8004058:	0800408f 	.word	0x0800408f
 800405c:	0800408f 	.word	0x0800408f
 8004060:	0800408f 	.word	0x0800408f
 8004064:	08004087 	.word	0x08004087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004068:	f7fe f9b2 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 800406c:	61f8      	str	r0, [r7, #28]
        break;
 800406e:	e014      	b.n	800409a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004070:	f7fe f9c4 	bl	80023fc <HAL_RCC_GetPCLK2Freq>
 8004074:	61f8      	str	r0, [r7, #28]
        break;
 8004076:	e010      	b.n	800409a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004078:	4b4d      	ldr	r3, [pc, #308]	; (80041b0 <UART_SetConfig+0x56c>)
 800407a:	61fb      	str	r3, [r7, #28]
        break;
 800407c:	e00d      	b.n	800409a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800407e:	f7fe f90f 	bl	80022a0 <HAL_RCC_GetSysClockFreq>
 8004082:	61f8      	str	r0, [r7, #28]
        break;
 8004084:	e009      	b.n	800409a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800408a:	61fb      	str	r3, [r7, #28]
        break;
 800408c:	e005      	b.n	800409a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004098:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d077      	beq.n	8004190 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	005a      	lsls	r2, r3, #1
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	085b      	lsrs	r3, r3, #1
 80040aa:	441a      	add	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	2b0f      	cmp	r3, #15
 80040ba:	d916      	bls.n	80040ea <UART_SetConfig+0x4a6>
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c2:	d212      	bcs.n	80040ea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f023 030f 	bic.w	r3, r3, #15
 80040cc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	085b      	lsrs	r3, r3, #1
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	b29a      	uxth	r2, r3
 80040da:	8afb      	ldrh	r3, [r7, #22]
 80040dc:	4313      	orrs	r3, r2
 80040de:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	8afa      	ldrh	r2, [r7, #22]
 80040e6:	60da      	str	r2, [r3, #12]
 80040e8:	e052      	b.n	8004190 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040f0:	e04e      	b.n	8004190 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d827      	bhi.n	800414a <UART_SetConfig+0x506>
 80040fa:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <UART_SetConfig+0x4bc>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	08004125 	.word	0x08004125
 8004104:	0800412d 	.word	0x0800412d
 8004108:	08004135 	.word	0x08004135
 800410c:	0800414b 	.word	0x0800414b
 8004110:	0800413b 	.word	0x0800413b
 8004114:	0800414b 	.word	0x0800414b
 8004118:	0800414b 	.word	0x0800414b
 800411c:	0800414b 	.word	0x0800414b
 8004120:	08004143 	.word	0x08004143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004124:	f7fe f954 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 8004128:	61f8      	str	r0, [r7, #28]
        break;
 800412a:	e014      	b.n	8004156 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800412c:	f7fe f966 	bl	80023fc <HAL_RCC_GetPCLK2Freq>
 8004130:	61f8      	str	r0, [r7, #28]
        break;
 8004132:	e010      	b.n	8004156 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004134:	4b1e      	ldr	r3, [pc, #120]	; (80041b0 <UART_SetConfig+0x56c>)
 8004136:	61fb      	str	r3, [r7, #28]
        break;
 8004138:	e00d      	b.n	8004156 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800413a:	f7fe f8b1 	bl	80022a0 <HAL_RCC_GetSysClockFreq>
 800413e:	61f8      	str	r0, [r7, #28]
        break;
 8004140:	e009      	b.n	8004156 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004146:	61fb      	str	r3, [r7, #28]
        break;
 8004148:	e005      	b.n	8004156 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004154:	bf00      	nop
    }

    if (pclk != 0U)
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d019      	beq.n	8004190 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	085a      	lsrs	r2, r3, #1
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	441a      	add	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	fbb2 f3f3 	udiv	r3, r2, r3
 800416e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	2b0f      	cmp	r3, #15
 8004174:	d909      	bls.n	800418a <UART_SetConfig+0x546>
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800417c:	d205      	bcs.n	800418a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	60da      	str	r2, [r3, #12]
 8004188:	e002      	b.n	8004190 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800419c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3728      	adds	r7, #40	; 0x28
 80041a4:	46bd      	mov	sp, r7
 80041a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041aa:	bf00      	nop
 80041ac:	40008000 	.word	0x40008000
 80041b0:	00f42400 	.word	0x00f42400

080041b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	f003 0310 	and.w	r3, r3, #16
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01a      	beq.n	80042ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042b2:	d10a      	bne.n	80042ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	605a      	str	r2, [r3, #4]
  }
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004308:	f7fc feee 	bl	80010e8 <HAL_GetTick>
 800430c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b08      	cmp	r3, #8
 800431a:	d10e      	bne.n	800433a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800431c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f82d 	bl	800438a <UART_WaitOnFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e023      	b.n	8004382 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b04      	cmp	r3, #4
 8004346:	d10e      	bne.n	8004366 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004348:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f817 	bl	800438a <UART_WaitOnFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e00d      	b.n	8004382 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b09c      	sub	sp, #112	; 0x70
 800438e:	af00      	add	r7, sp, #0
 8004390:	60f8      	str	r0, [r7, #12]
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	603b      	str	r3, [r7, #0]
 8004396:	4613      	mov	r3, r2
 8004398:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439a:	e0a5      	b.n	80044e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800439e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a2:	f000 80a1 	beq.w	80044e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a6:	f7fc fe9f 	bl	80010e8 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d302      	bcc.n	80043bc <UART_WaitOnFlagUntilTimeout+0x32>
 80043b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d13e      	bne.n	800443a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80043ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043d0:	667b      	str	r3, [r7, #100]	; 0x64
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80043e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043e2:	e841 2300 	strex	r3, r2, [r1]
 80043e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80043e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1e6      	bne.n	80043bc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3308      	adds	r3, #8
 80043f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f8:	e853 3f00 	ldrex	r3, [r3]
 80043fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	663b      	str	r3, [r7, #96]	; 0x60
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3308      	adds	r3, #8
 800440c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800440e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004410:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004414:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800441c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e5      	bne.n	80043ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2220      	movs	r2, #32
 800442c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e067      	b.n	800450a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d04f      	beq.n	80044e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004456:	d147      	bne.n	80044e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004460:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446a:	e853 3f00 	ldrex	r3, [r3]
 800446e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004476:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004480:	637b      	str	r3, [r7, #52]	; 0x34
 8004482:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800448e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e6      	bne.n	8004462 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3308      	adds	r3, #8
 800449a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	613b      	str	r3, [r7, #16]
   return(result);
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3308      	adds	r3, #8
 80044b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044b4:	623a      	str	r2, [r7, #32]
 80044b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	69f9      	ldr	r1, [r7, #28]
 80044ba:	6a3a      	ldr	r2, [r7, #32]
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e5      	bne.n	8004494 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e010      	b.n	800450a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	69da      	ldr	r2, [r3, #28]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4013      	ands	r3, r2
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	bf0c      	ite	eq
 80044f8:	2301      	moveq	r3, #1
 80044fa:	2300      	movne	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	79fb      	ldrb	r3, [r7, #7]
 8004502:	429a      	cmp	r2, r3
 8004504:	f43f af4a 	beq.w	800439c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3770      	adds	r7, #112	; 0x70
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004514:	b480      	push	{r7}
 8004516:	b097      	sub	sp, #92	; 0x5c
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	4613      	mov	r3, r2
 8004520:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	88fa      	ldrh	r2, [r7, #6]
 800452c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	88fa      	ldrh	r2, [r7, #6]
 8004534:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004546:	d10e      	bne.n	8004566 <UART_Start_Receive_IT+0x52>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d105      	bne.n	800455c <UART_Start_Receive_IT+0x48>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004556:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800455a:	e02d      	b.n	80045b8 <UART_Start_Receive_IT+0xa4>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	22ff      	movs	r2, #255	; 0xff
 8004560:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004564:	e028      	b.n	80045b8 <UART_Start_Receive_IT+0xa4>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10d      	bne.n	800458a <UART_Start_Receive_IT+0x76>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d104      	bne.n	8004580 <UART_Start_Receive_IT+0x6c>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	22ff      	movs	r2, #255	; 0xff
 800457a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800457e:	e01b      	b.n	80045b8 <UART_Start_Receive_IT+0xa4>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	227f      	movs	r2, #127	; 0x7f
 8004584:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004588:	e016      	b.n	80045b8 <UART_Start_Receive_IT+0xa4>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004592:	d10d      	bne.n	80045b0 <UART_Start_Receive_IT+0x9c>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d104      	bne.n	80045a6 <UART_Start_Receive_IT+0x92>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	227f      	movs	r2, #127	; 0x7f
 80045a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045a4:	e008      	b.n	80045b8 <UART_Start_Receive_IT+0xa4>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	223f      	movs	r2, #63	; 0x3f
 80045aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045ae:	e003      	b.n	80045b8 <UART_Start_Receive_IT+0xa4>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2222      	movs	r2, #34	; 0x22
 80045c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3308      	adds	r3, #8
 80045cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d8:	f043 0301 	orr.w	r3, r3, #1
 80045dc:	657b      	str	r3, [r7, #84]	; 0x54
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3308      	adds	r3, #8
 80045e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80045e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80045e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045ee:	e841 2300 	strex	r3, r2, [r1]
 80045f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80045f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1e5      	bne.n	80045c6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004602:	d107      	bne.n	8004614 <UART_Start_Receive_IT+0x100>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d103      	bne.n	8004614 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4a24      	ldr	r2, [pc, #144]	; (80046a0 <UART_Start_Receive_IT+0x18c>)
 8004610:	665a      	str	r2, [r3, #100]	; 0x64
 8004612:	e002      	b.n	800461a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4a23      	ldr	r2, [pc, #140]	; (80046a4 <UART_Start_Receive_IT+0x190>)
 8004618:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d019      	beq.n	800465e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004632:	e853 3f00 	ldrex	r3, [r3]
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800463e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004648:	637b      	str	r3, [r7, #52]	; 0x34
 800464a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800464e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e6      	bne.n	800462a <UART_Start_Receive_IT+0x116>
 800465c:	e018      	b.n	8004690 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	613b      	str	r3, [r7, #16]
   return(result);
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f043 0320 	orr.w	r3, r3, #32
 8004672:	653b      	str	r3, [r7, #80]	; 0x50
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800467c:	623b      	str	r3, [r7, #32]
 800467e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004680:	69f9      	ldr	r1, [r7, #28]
 8004682:	6a3a      	ldr	r2, [r7, #32]
 8004684:	e841 2300 	strex	r3, r2, [r1]
 8004688:	61bb      	str	r3, [r7, #24]
   return(result);
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1e6      	bne.n	800465e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	375c      	adds	r7, #92	; 0x5c
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	08004ac7 	.word	0x08004ac7
 80046a4:	08004967 	.word	0x08004967

080046a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b095      	sub	sp, #84	; 0x54
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b8:	e853 3f00 	ldrex	r3, [r3]
 80046bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ce:	643b      	str	r3, [r7, #64]	; 0x40
 80046d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046d6:	e841 2300 	strex	r3, r2, [r1]
 80046da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1e6      	bne.n	80046b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3308      	adds	r3, #8
 80046e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f023 0301 	bic.w	r3, r3, #1
 80046f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3308      	adds	r3, #8
 8004700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e5      	bne.n	80046e2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471a:	2b01      	cmp	r3, #1
 800471c:	d118      	bne.n	8004750 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	e853 3f00 	ldrex	r3, [r3]
 800472a:	60bb      	str	r3, [r7, #8]
   return(result);
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f023 0310 	bic.w	r3, r3, #16
 8004732:	647b      	str	r3, [r7, #68]	; 0x44
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800473c:	61bb      	str	r3, [r7, #24]
 800473e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004740:	6979      	ldr	r1, [r7, #20]
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	e841 2300 	strex	r3, r2, [r1]
 8004748:	613b      	str	r3, [r7, #16]
   return(result);
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e6      	bne.n	800471e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004762:	bf00      	nop
 8004764:	3754      	adds	r7, #84	; 0x54
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f7ff fa43 	bl	8003c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004792:	bf00      	nop
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800479a:	b480      	push	{r7}
 800479c:	b08f      	sub	sp, #60	; 0x3c
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047a6:	2b21      	cmp	r3, #33	; 0x21
 80047a8:	d14d      	bne.n	8004846 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d132      	bne.n	800481c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ca:	637b      	str	r3, [r7, #52]	; 0x34
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047d6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e6      	bne.n	80047b6 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047fc:	633b      	str	r3, [r7, #48]	; 0x30
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	61bb      	str	r3, [r7, #24]
 8004808:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	6979      	ldr	r1, [r7, #20]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	613b      	str	r3, [r7, #16]
   return(result);
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e6      	bne.n	80047e8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800481a:	e014      	b.n	8004846 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004820:	781a      	ldrb	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	b292      	uxth	r2, r2
 8004828:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800483a:	b29b      	uxth	r3, r3
 800483c:	3b01      	subs	r3, #1
 800483e:	b29a      	uxth	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004846:	bf00      	nop
 8004848:	373c      	adds	r7, #60	; 0x3c
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004852:	b480      	push	{r7}
 8004854:	b091      	sub	sp, #68	; 0x44
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800485e:	2b21      	cmp	r3, #33	; 0x21
 8004860:	d151      	bne.n	8004906 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d132      	bne.n	80048d4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	e853 3f00 	ldrex	r3, [r3]
 800487a:	623b      	str	r3, [r7, #32]
   return(result);
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004882:	63bb      	str	r3, [r7, #56]	; 0x38
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488c:	633b      	str	r3, [r7, #48]	; 0x30
 800488e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004894:	e841 2300 	strex	r3, r2, [r1]
 8004898:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e6      	bne.n	800486e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b4:	637b      	str	r3, [r7, #52]	; 0x34
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048be:	61fb      	str	r3, [r7, #28]
 80048c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	69b9      	ldr	r1, [r7, #24]
 80048c4:	69fa      	ldr	r2, [r7, #28]
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	617b      	str	r3, [r7, #20]
   return(result);
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1e6      	bne.n	80048a0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80048d2:	e018      	b.n	8004906 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80048da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048dc:	881a      	ldrh	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048e6:	b292      	uxth	r2, r2
 80048e8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ee:	1c9a      	adds	r2, r3, #2
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004906:	bf00      	nop
 8004908:	3744      	adds	r7, #68	; 0x44
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b088      	sub	sp, #32
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	e853 3f00 	ldrex	r3, [r3]
 8004926:	60bb      	str	r3, [r7, #8]
   return(result);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800492e:	61fb      	str	r3, [r7, #28]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	461a      	mov	r2, r3
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	6979      	ldr	r1, [r7, #20]
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	e841 2300 	strex	r3, r2, [r1]
 8004944:	613b      	str	r3, [r7, #16]
   return(result);
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e6      	bne.n	800491a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7fb fe45 	bl	80005e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800495e:	bf00      	nop
 8004960:	3720      	adds	r7, #32
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b096      	sub	sp, #88	; 0x58
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004974:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800497c:	2b22      	cmp	r3, #34	; 0x22
 800497e:	f040 8094 	bne.w	8004aaa <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004988:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800498c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004990:	b2d9      	uxtb	r1, r3
 8004992:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004996:	b2da      	uxtb	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499c:	400a      	ands	r2, r1
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d179      	bne.n	8004abe <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d2:	e853 3f00 	ldrex	r3, [r3]
 80049d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049de:	653b      	str	r3, [r7, #80]	; 0x50
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e8:	647b      	str	r3, [r7, #68]	; 0x44
 80049ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049f0:	e841 2300 	strex	r3, r2, [r1]
 80049f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1e6      	bne.n	80049ca <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3308      	adds	r3, #8
 8004a02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	e853 3f00 	ldrex	r3, [r3]
 8004a0a:	623b      	str	r3, [r7, #32]
   return(result);
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	f023 0301 	bic.w	r3, r3, #1
 8004a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3308      	adds	r3, #8
 8004a1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a1c:	633a      	str	r2, [r7, #48]	; 0x30
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a24:	e841 2300 	strex	r3, r2, [r1]
 8004a28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e5      	bne.n	80049fc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d12e      	bne.n	8004aa2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	e853 3f00 	ldrex	r3, [r3]
 8004a56:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0310 	bic.w	r3, r3, #16
 8004a5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	69b9      	ldr	r1, [r7, #24]
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	e841 2300 	strex	r3, r2, [r1]
 8004a74:	617b      	str	r3, [r7, #20]
   return(result);
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e6      	bne.n	8004a4a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	f003 0310 	and.w	r3, r3, #16
 8004a86:	2b10      	cmp	r3, #16
 8004a88:	d103      	bne.n	8004a92 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2210      	movs	r2, #16
 8004a90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a98:	4619      	mov	r1, r3
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7ff f8c6 	bl	8003c2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004aa0:	e00d      	b.n	8004abe <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fb fe2c 	bl	8000700 <HAL_UART_RxCpltCallback>
}
 8004aa8:	e009      	b.n	8004abe <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	8b1b      	ldrh	r3, [r3, #24]
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0208 	orr.w	r2, r2, #8
 8004aba:	b292      	uxth	r2, r2
 8004abc:	831a      	strh	r2, [r3, #24]
}
 8004abe:	bf00      	nop
 8004ac0:	3758      	adds	r7, #88	; 0x58
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b096      	sub	sp, #88	; 0x58
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ad4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004adc:	2b22      	cmp	r3, #34	; 0x22
 8004ade:	f040 8094 	bne.w	8004c0a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ae8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004af2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004af6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004afa:	4013      	ands	r3, r2
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b06:	1c9a      	adds	r2, r3, #2
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d179      	bne.n	8004c1e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b32:	e853 3f00 	ldrex	r3, [r3]
 8004b36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b48:	643b      	str	r3, [r7, #64]	; 0x40
 8004b4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b50:	e841 2300 	strex	r3, r2, [r1]
 8004b54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e6      	bne.n	8004b2a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3308      	adds	r3, #8
 8004b62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	e853 3f00 	ldrex	r3, [r3]
 8004b6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f023 0301 	bic.w	r3, r3, #1
 8004b72:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3308      	adds	r3, #8
 8004b7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b84:	e841 2300 	strex	r3, r2, [r1]
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e5      	bne.n	8004b5c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d12e      	bne.n	8004c02 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	e853 3f00 	ldrex	r3, [r3]
 8004bb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f023 0310 	bic.w	r3, r3, #16
 8004bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc8:	61bb      	str	r3, [r7, #24]
 8004bca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	6979      	ldr	r1, [r7, #20]
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	e841 2300 	strex	r3, r2, [r1]
 8004bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e6      	bne.n	8004baa <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b10      	cmp	r3, #16
 8004be8:	d103      	bne.n	8004bf2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2210      	movs	r2, #16
 8004bf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff f816 	bl	8003c2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c00:	e00d      	b.n	8004c1e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fb fd7c 	bl	8000700 <HAL_UART_RxCpltCallback>
}
 8004c08:	e009      	b.n	8004c1e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	8b1b      	ldrh	r3, [r3, #24]
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0208 	orr.w	r2, r2, #8
 8004c1a:	b292      	uxth	r2, r2
 8004c1c:	831a      	strh	r2, [r3, #24]
}
 8004c1e:	bf00      	nop
 8004c20:	3758      	adds	r7, #88	; 0x58
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
	...

08004c3c <__errno>:
 8004c3c:	4b01      	ldr	r3, [pc, #4]	; (8004c44 <__errno+0x8>)
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	2000000c 	.word	0x2000000c

08004c48 <__libc_init_array>:
 8004c48:	b570      	push	{r4, r5, r6, lr}
 8004c4a:	4d0d      	ldr	r5, [pc, #52]	; (8004c80 <__libc_init_array+0x38>)
 8004c4c:	4c0d      	ldr	r4, [pc, #52]	; (8004c84 <__libc_init_array+0x3c>)
 8004c4e:	1b64      	subs	r4, r4, r5
 8004c50:	10a4      	asrs	r4, r4, #2
 8004c52:	2600      	movs	r6, #0
 8004c54:	42a6      	cmp	r6, r4
 8004c56:	d109      	bne.n	8004c6c <__libc_init_array+0x24>
 8004c58:	4d0b      	ldr	r5, [pc, #44]	; (8004c88 <__libc_init_array+0x40>)
 8004c5a:	4c0c      	ldr	r4, [pc, #48]	; (8004c8c <__libc_init_array+0x44>)
 8004c5c:	f001 fa20 	bl	80060a0 <_init>
 8004c60:	1b64      	subs	r4, r4, r5
 8004c62:	10a4      	asrs	r4, r4, #2
 8004c64:	2600      	movs	r6, #0
 8004c66:	42a6      	cmp	r6, r4
 8004c68:	d105      	bne.n	8004c76 <__libc_init_array+0x2e>
 8004c6a:	bd70      	pop	{r4, r5, r6, pc}
 8004c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c70:	4798      	blx	r3
 8004c72:	3601      	adds	r6, #1
 8004c74:	e7ee      	b.n	8004c54 <__libc_init_array+0xc>
 8004c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c7a:	4798      	blx	r3
 8004c7c:	3601      	adds	r6, #1
 8004c7e:	e7f2      	b.n	8004c66 <__libc_init_array+0x1e>
 8004c80:	0800633c 	.word	0x0800633c
 8004c84:	0800633c 	.word	0x0800633c
 8004c88:	0800633c 	.word	0x0800633c
 8004c8c:	08006340 	.word	0x08006340

08004c90 <memset>:
 8004c90:	4402      	add	r2, r0
 8004c92:	4603      	mov	r3, r0
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d100      	bne.n	8004c9a <memset+0xa>
 8004c98:	4770      	bx	lr
 8004c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c9e:	e7f9      	b.n	8004c94 <memset+0x4>

08004ca0 <_puts_r>:
 8004ca0:	b570      	push	{r4, r5, r6, lr}
 8004ca2:	460e      	mov	r6, r1
 8004ca4:	4605      	mov	r5, r0
 8004ca6:	b118      	cbz	r0, 8004cb0 <_puts_r+0x10>
 8004ca8:	6983      	ldr	r3, [r0, #24]
 8004caa:	b90b      	cbnz	r3, 8004cb0 <_puts_r+0x10>
 8004cac:	f000 fadc 	bl	8005268 <__sinit>
 8004cb0:	69ab      	ldr	r3, [r5, #24]
 8004cb2:	68ac      	ldr	r4, [r5, #8]
 8004cb4:	b913      	cbnz	r3, 8004cbc <_puts_r+0x1c>
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f000 fad6 	bl	8005268 <__sinit>
 8004cbc:	4b2c      	ldr	r3, [pc, #176]	; (8004d70 <_puts_r+0xd0>)
 8004cbe:	429c      	cmp	r4, r3
 8004cc0:	d120      	bne.n	8004d04 <_puts_r+0x64>
 8004cc2:	686c      	ldr	r4, [r5, #4]
 8004cc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cc6:	07db      	lsls	r3, r3, #31
 8004cc8:	d405      	bmi.n	8004cd6 <_puts_r+0x36>
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	0598      	lsls	r0, r3, #22
 8004cce:	d402      	bmi.n	8004cd6 <_puts_r+0x36>
 8004cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cd2:	f000 fb67 	bl	80053a4 <__retarget_lock_acquire_recursive>
 8004cd6:	89a3      	ldrh	r3, [r4, #12]
 8004cd8:	0719      	lsls	r1, r3, #28
 8004cda:	d51d      	bpl.n	8004d18 <_puts_r+0x78>
 8004cdc:	6923      	ldr	r3, [r4, #16]
 8004cde:	b1db      	cbz	r3, 8004d18 <_puts_r+0x78>
 8004ce0:	3e01      	subs	r6, #1
 8004ce2:	68a3      	ldr	r3, [r4, #8]
 8004ce4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	60a3      	str	r3, [r4, #8]
 8004cec:	bb39      	cbnz	r1, 8004d3e <_puts_r+0x9e>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	da38      	bge.n	8004d64 <_puts_r+0xc4>
 8004cf2:	4622      	mov	r2, r4
 8004cf4:	210a      	movs	r1, #10
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	f000 f8ba 	bl	8004e70 <__swbuf_r>
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d011      	beq.n	8004d24 <_puts_r+0x84>
 8004d00:	250a      	movs	r5, #10
 8004d02:	e011      	b.n	8004d28 <_puts_r+0x88>
 8004d04:	4b1b      	ldr	r3, [pc, #108]	; (8004d74 <_puts_r+0xd4>)
 8004d06:	429c      	cmp	r4, r3
 8004d08:	d101      	bne.n	8004d0e <_puts_r+0x6e>
 8004d0a:	68ac      	ldr	r4, [r5, #8]
 8004d0c:	e7da      	b.n	8004cc4 <_puts_r+0x24>
 8004d0e:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <_puts_r+0xd8>)
 8004d10:	429c      	cmp	r4, r3
 8004d12:	bf08      	it	eq
 8004d14:	68ec      	ldreq	r4, [r5, #12]
 8004d16:	e7d5      	b.n	8004cc4 <_puts_r+0x24>
 8004d18:	4621      	mov	r1, r4
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	f000 f90c 	bl	8004f38 <__swsetup_r>
 8004d20:	2800      	cmp	r0, #0
 8004d22:	d0dd      	beq.n	8004ce0 <_puts_r+0x40>
 8004d24:	f04f 35ff 	mov.w	r5, #4294967295
 8004d28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d2a:	07da      	lsls	r2, r3, #31
 8004d2c:	d405      	bmi.n	8004d3a <_puts_r+0x9a>
 8004d2e:	89a3      	ldrh	r3, [r4, #12]
 8004d30:	059b      	lsls	r3, r3, #22
 8004d32:	d402      	bmi.n	8004d3a <_puts_r+0x9a>
 8004d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d36:	f000 fb36 	bl	80053a6 <__retarget_lock_release_recursive>
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	bd70      	pop	{r4, r5, r6, pc}
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	da04      	bge.n	8004d4c <_puts_r+0xac>
 8004d42:	69a2      	ldr	r2, [r4, #24]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	dc06      	bgt.n	8004d56 <_puts_r+0xb6>
 8004d48:	290a      	cmp	r1, #10
 8004d4a:	d004      	beq.n	8004d56 <_puts_r+0xb6>
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	6022      	str	r2, [r4, #0]
 8004d52:	7019      	strb	r1, [r3, #0]
 8004d54:	e7c5      	b.n	8004ce2 <_puts_r+0x42>
 8004d56:	4622      	mov	r2, r4
 8004d58:	4628      	mov	r0, r5
 8004d5a:	f000 f889 	bl	8004e70 <__swbuf_r>
 8004d5e:	3001      	adds	r0, #1
 8004d60:	d1bf      	bne.n	8004ce2 <_puts_r+0x42>
 8004d62:	e7df      	b.n	8004d24 <_puts_r+0x84>
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	250a      	movs	r5, #10
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	6022      	str	r2, [r4, #0]
 8004d6c:	701d      	strb	r5, [r3, #0]
 8004d6e:	e7db      	b.n	8004d28 <_puts_r+0x88>
 8004d70:	080061d4 	.word	0x080061d4
 8004d74:	080061f4 	.word	0x080061f4
 8004d78:	080061b4 	.word	0x080061b4

08004d7c <puts>:
 8004d7c:	4b02      	ldr	r3, [pc, #8]	; (8004d88 <puts+0xc>)
 8004d7e:	4601      	mov	r1, r0
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	f7ff bf8d 	b.w	8004ca0 <_puts_r>
 8004d86:	bf00      	nop
 8004d88:	2000000c 	.word	0x2000000c

08004d8c <siscanf>:
 8004d8c:	b40e      	push	{r1, r2, r3}
 8004d8e:	b510      	push	{r4, lr}
 8004d90:	b09f      	sub	sp, #124	; 0x7c
 8004d92:	ac21      	add	r4, sp, #132	; 0x84
 8004d94:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004d98:	f854 2b04 	ldr.w	r2, [r4], #4
 8004d9c:	9201      	str	r2, [sp, #4]
 8004d9e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004da2:	9004      	str	r0, [sp, #16]
 8004da4:	9008      	str	r0, [sp, #32]
 8004da6:	f7fb fa1d 	bl	80001e4 <strlen>
 8004daa:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <siscanf+0x50>)
 8004dac:	9005      	str	r0, [sp, #20]
 8004dae:	9009      	str	r0, [sp, #36]	; 0x24
 8004db0:	930d      	str	r3, [sp, #52]	; 0x34
 8004db2:	480b      	ldr	r0, [pc, #44]	; (8004de0 <siscanf+0x54>)
 8004db4:	9a01      	ldr	r2, [sp, #4]
 8004db6:	6800      	ldr	r0, [r0, #0]
 8004db8:	9403      	str	r4, [sp, #12]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	9311      	str	r3, [sp, #68]	; 0x44
 8004dbe:	9316      	str	r3, [sp, #88]	; 0x58
 8004dc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004dc4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004dc8:	a904      	add	r1, sp, #16
 8004dca:	4623      	mov	r3, r4
 8004dcc:	f000 fc9e 	bl	800570c <__ssvfiscanf_r>
 8004dd0:	b01f      	add	sp, #124	; 0x7c
 8004dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dd6:	b003      	add	sp, #12
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	08004e07 	.word	0x08004e07
 8004de0:	2000000c 	.word	0x2000000c

08004de4 <__sread>:
 8004de4:	b510      	push	{r4, lr}
 8004de6:	460c      	mov	r4, r1
 8004de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dec:	f000 ff58 	bl	8005ca0 <_read_r>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	bfab      	itete	ge
 8004df4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004df6:	89a3      	ldrhlt	r3, [r4, #12]
 8004df8:	181b      	addge	r3, r3, r0
 8004dfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dfe:	bfac      	ite	ge
 8004e00:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e02:	81a3      	strhlt	r3, [r4, #12]
 8004e04:	bd10      	pop	{r4, pc}

08004e06 <__seofread>:
 8004e06:	2000      	movs	r0, #0
 8004e08:	4770      	bx	lr

08004e0a <__swrite>:
 8004e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e0e:	461f      	mov	r7, r3
 8004e10:	898b      	ldrh	r3, [r1, #12]
 8004e12:	05db      	lsls	r3, r3, #23
 8004e14:	4605      	mov	r5, r0
 8004e16:	460c      	mov	r4, r1
 8004e18:	4616      	mov	r6, r2
 8004e1a:	d505      	bpl.n	8004e28 <__swrite+0x1e>
 8004e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e20:	2302      	movs	r3, #2
 8004e22:	2200      	movs	r2, #0
 8004e24:	f000 fac0 	bl	80053a8 <_lseek_r>
 8004e28:	89a3      	ldrh	r3, [r4, #12]
 8004e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e32:	81a3      	strh	r3, [r4, #12]
 8004e34:	4632      	mov	r2, r6
 8004e36:	463b      	mov	r3, r7
 8004e38:	4628      	mov	r0, r5
 8004e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3e:	f000 b869 	b.w	8004f14 <_write_r>

08004e42 <__sseek>:
 8004e42:	b510      	push	{r4, lr}
 8004e44:	460c      	mov	r4, r1
 8004e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e4a:	f000 faad 	bl	80053a8 <_lseek_r>
 8004e4e:	1c43      	adds	r3, r0, #1
 8004e50:	89a3      	ldrh	r3, [r4, #12]
 8004e52:	bf15      	itete	ne
 8004e54:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e5e:	81a3      	strheq	r3, [r4, #12]
 8004e60:	bf18      	it	ne
 8004e62:	81a3      	strhne	r3, [r4, #12]
 8004e64:	bd10      	pop	{r4, pc}

08004e66 <__sclose>:
 8004e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e6a:	f000 b8d3 	b.w	8005014 <_close_r>
	...

08004e70 <__swbuf_r>:
 8004e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e72:	460e      	mov	r6, r1
 8004e74:	4614      	mov	r4, r2
 8004e76:	4605      	mov	r5, r0
 8004e78:	b118      	cbz	r0, 8004e82 <__swbuf_r+0x12>
 8004e7a:	6983      	ldr	r3, [r0, #24]
 8004e7c:	b90b      	cbnz	r3, 8004e82 <__swbuf_r+0x12>
 8004e7e:	f000 f9f3 	bl	8005268 <__sinit>
 8004e82:	4b21      	ldr	r3, [pc, #132]	; (8004f08 <__swbuf_r+0x98>)
 8004e84:	429c      	cmp	r4, r3
 8004e86:	d12b      	bne.n	8004ee0 <__swbuf_r+0x70>
 8004e88:	686c      	ldr	r4, [r5, #4]
 8004e8a:	69a3      	ldr	r3, [r4, #24]
 8004e8c:	60a3      	str	r3, [r4, #8]
 8004e8e:	89a3      	ldrh	r3, [r4, #12]
 8004e90:	071a      	lsls	r2, r3, #28
 8004e92:	d52f      	bpl.n	8004ef4 <__swbuf_r+0x84>
 8004e94:	6923      	ldr	r3, [r4, #16]
 8004e96:	b36b      	cbz	r3, 8004ef4 <__swbuf_r+0x84>
 8004e98:	6923      	ldr	r3, [r4, #16]
 8004e9a:	6820      	ldr	r0, [r4, #0]
 8004e9c:	1ac0      	subs	r0, r0, r3
 8004e9e:	6963      	ldr	r3, [r4, #20]
 8004ea0:	b2f6      	uxtb	r6, r6
 8004ea2:	4283      	cmp	r3, r0
 8004ea4:	4637      	mov	r7, r6
 8004ea6:	dc04      	bgt.n	8004eb2 <__swbuf_r+0x42>
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	4628      	mov	r0, r5
 8004eac:	f000 f948 	bl	8005140 <_fflush_r>
 8004eb0:	bb30      	cbnz	r0, 8004f00 <__swbuf_r+0x90>
 8004eb2:	68a3      	ldr	r3, [r4, #8]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	60a3      	str	r3, [r4, #8]
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	6022      	str	r2, [r4, #0]
 8004ebe:	701e      	strb	r6, [r3, #0]
 8004ec0:	6963      	ldr	r3, [r4, #20]
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	4283      	cmp	r3, r0
 8004ec6:	d004      	beq.n	8004ed2 <__swbuf_r+0x62>
 8004ec8:	89a3      	ldrh	r3, [r4, #12]
 8004eca:	07db      	lsls	r3, r3, #31
 8004ecc:	d506      	bpl.n	8004edc <__swbuf_r+0x6c>
 8004ece:	2e0a      	cmp	r6, #10
 8004ed0:	d104      	bne.n	8004edc <__swbuf_r+0x6c>
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	f000 f933 	bl	8005140 <_fflush_r>
 8004eda:	b988      	cbnz	r0, 8004f00 <__swbuf_r+0x90>
 8004edc:	4638      	mov	r0, r7
 8004ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ee0:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <__swbuf_r+0x9c>)
 8004ee2:	429c      	cmp	r4, r3
 8004ee4:	d101      	bne.n	8004eea <__swbuf_r+0x7a>
 8004ee6:	68ac      	ldr	r4, [r5, #8]
 8004ee8:	e7cf      	b.n	8004e8a <__swbuf_r+0x1a>
 8004eea:	4b09      	ldr	r3, [pc, #36]	; (8004f10 <__swbuf_r+0xa0>)
 8004eec:	429c      	cmp	r4, r3
 8004eee:	bf08      	it	eq
 8004ef0:	68ec      	ldreq	r4, [r5, #12]
 8004ef2:	e7ca      	b.n	8004e8a <__swbuf_r+0x1a>
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f000 f81e 	bl	8004f38 <__swsetup_r>
 8004efc:	2800      	cmp	r0, #0
 8004efe:	d0cb      	beq.n	8004e98 <__swbuf_r+0x28>
 8004f00:	f04f 37ff 	mov.w	r7, #4294967295
 8004f04:	e7ea      	b.n	8004edc <__swbuf_r+0x6c>
 8004f06:	bf00      	nop
 8004f08:	080061d4 	.word	0x080061d4
 8004f0c:	080061f4 	.word	0x080061f4
 8004f10:	080061b4 	.word	0x080061b4

08004f14 <_write_r>:
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	4d07      	ldr	r5, [pc, #28]	; (8004f34 <_write_r+0x20>)
 8004f18:	4604      	mov	r4, r0
 8004f1a:	4608      	mov	r0, r1
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	2200      	movs	r2, #0
 8004f20:	602a      	str	r2, [r5, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f7fb fc92 	bl	800084c <_write>
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	d102      	bne.n	8004f32 <_write_r+0x1e>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	b103      	cbz	r3, 8004f32 <_write_r+0x1e>
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	200002c4 	.word	0x200002c4

08004f38 <__swsetup_r>:
 8004f38:	4b32      	ldr	r3, [pc, #200]	; (8005004 <__swsetup_r+0xcc>)
 8004f3a:	b570      	push	{r4, r5, r6, lr}
 8004f3c:	681d      	ldr	r5, [r3, #0]
 8004f3e:	4606      	mov	r6, r0
 8004f40:	460c      	mov	r4, r1
 8004f42:	b125      	cbz	r5, 8004f4e <__swsetup_r+0x16>
 8004f44:	69ab      	ldr	r3, [r5, #24]
 8004f46:	b913      	cbnz	r3, 8004f4e <__swsetup_r+0x16>
 8004f48:	4628      	mov	r0, r5
 8004f4a:	f000 f98d 	bl	8005268 <__sinit>
 8004f4e:	4b2e      	ldr	r3, [pc, #184]	; (8005008 <__swsetup_r+0xd0>)
 8004f50:	429c      	cmp	r4, r3
 8004f52:	d10f      	bne.n	8004f74 <__swsetup_r+0x3c>
 8004f54:	686c      	ldr	r4, [r5, #4]
 8004f56:	89a3      	ldrh	r3, [r4, #12]
 8004f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f5c:	0719      	lsls	r1, r3, #28
 8004f5e:	d42c      	bmi.n	8004fba <__swsetup_r+0x82>
 8004f60:	06dd      	lsls	r5, r3, #27
 8004f62:	d411      	bmi.n	8004f88 <__swsetup_r+0x50>
 8004f64:	2309      	movs	r3, #9
 8004f66:	6033      	str	r3, [r6, #0]
 8004f68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f6c:	81a3      	strh	r3, [r4, #12]
 8004f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f72:	e03e      	b.n	8004ff2 <__swsetup_r+0xba>
 8004f74:	4b25      	ldr	r3, [pc, #148]	; (800500c <__swsetup_r+0xd4>)
 8004f76:	429c      	cmp	r4, r3
 8004f78:	d101      	bne.n	8004f7e <__swsetup_r+0x46>
 8004f7a:	68ac      	ldr	r4, [r5, #8]
 8004f7c:	e7eb      	b.n	8004f56 <__swsetup_r+0x1e>
 8004f7e:	4b24      	ldr	r3, [pc, #144]	; (8005010 <__swsetup_r+0xd8>)
 8004f80:	429c      	cmp	r4, r3
 8004f82:	bf08      	it	eq
 8004f84:	68ec      	ldreq	r4, [r5, #12]
 8004f86:	e7e6      	b.n	8004f56 <__swsetup_r+0x1e>
 8004f88:	0758      	lsls	r0, r3, #29
 8004f8a:	d512      	bpl.n	8004fb2 <__swsetup_r+0x7a>
 8004f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f8e:	b141      	cbz	r1, 8004fa2 <__swsetup_r+0x6a>
 8004f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f94:	4299      	cmp	r1, r3
 8004f96:	d002      	beq.n	8004f9e <__swsetup_r+0x66>
 8004f98:	4630      	mov	r0, r6
 8004f9a:	f000 fa7d 	bl	8005498 <_free_r>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	6363      	str	r3, [r4, #52]	; 0x34
 8004fa2:	89a3      	ldrh	r3, [r4, #12]
 8004fa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004fa8:	81a3      	strh	r3, [r4, #12]
 8004faa:	2300      	movs	r3, #0
 8004fac:	6063      	str	r3, [r4, #4]
 8004fae:	6923      	ldr	r3, [r4, #16]
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	89a3      	ldrh	r3, [r4, #12]
 8004fb4:	f043 0308 	orr.w	r3, r3, #8
 8004fb8:	81a3      	strh	r3, [r4, #12]
 8004fba:	6923      	ldr	r3, [r4, #16]
 8004fbc:	b94b      	cbnz	r3, 8004fd2 <__swsetup_r+0x9a>
 8004fbe:	89a3      	ldrh	r3, [r4, #12]
 8004fc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc8:	d003      	beq.n	8004fd2 <__swsetup_r+0x9a>
 8004fca:	4621      	mov	r1, r4
 8004fcc:	4630      	mov	r0, r6
 8004fce:	f000 fa23 	bl	8005418 <__smakebuf_r>
 8004fd2:	89a0      	ldrh	r0, [r4, #12]
 8004fd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fd8:	f010 0301 	ands.w	r3, r0, #1
 8004fdc:	d00a      	beq.n	8004ff4 <__swsetup_r+0xbc>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60a3      	str	r3, [r4, #8]
 8004fe2:	6963      	ldr	r3, [r4, #20]
 8004fe4:	425b      	negs	r3, r3
 8004fe6:	61a3      	str	r3, [r4, #24]
 8004fe8:	6923      	ldr	r3, [r4, #16]
 8004fea:	b943      	cbnz	r3, 8004ffe <__swsetup_r+0xc6>
 8004fec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ff0:	d1ba      	bne.n	8004f68 <__swsetup_r+0x30>
 8004ff2:	bd70      	pop	{r4, r5, r6, pc}
 8004ff4:	0781      	lsls	r1, r0, #30
 8004ff6:	bf58      	it	pl
 8004ff8:	6963      	ldrpl	r3, [r4, #20]
 8004ffa:	60a3      	str	r3, [r4, #8]
 8004ffc:	e7f4      	b.n	8004fe8 <__swsetup_r+0xb0>
 8004ffe:	2000      	movs	r0, #0
 8005000:	e7f7      	b.n	8004ff2 <__swsetup_r+0xba>
 8005002:	bf00      	nop
 8005004:	2000000c 	.word	0x2000000c
 8005008:	080061d4 	.word	0x080061d4
 800500c:	080061f4 	.word	0x080061f4
 8005010:	080061b4 	.word	0x080061b4

08005014 <_close_r>:
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	4d06      	ldr	r5, [pc, #24]	; (8005030 <_close_r+0x1c>)
 8005018:	2300      	movs	r3, #0
 800501a:	4604      	mov	r4, r0
 800501c:	4608      	mov	r0, r1
 800501e:	602b      	str	r3, [r5, #0]
 8005020:	f7fb ff4b 	bl	8000eba <_close>
 8005024:	1c43      	adds	r3, r0, #1
 8005026:	d102      	bne.n	800502e <_close_r+0x1a>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	b103      	cbz	r3, 800502e <_close_r+0x1a>
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	bd38      	pop	{r3, r4, r5, pc}
 8005030:	200002c4 	.word	0x200002c4

08005034 <__sflush_r>:
 8005034:	898a      	ldrh	r2, [r1, #12]
 8005036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800503a:	4605      	mov	r5, r0
 800503c:	0710      	lsls	r0, r2, #28
 800503e:	460c      	mov	r4, r1
 8005040:	d458      	bmi.n	80050f4 <__sflush_r+0xc0>
 8005042:	684b      	ldr	r3, [r1, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	dc05      	bgt.n	8005054 <__sflush_r+0x20>
 8005048:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800504a:	2b00      	cmp	r3, #0
 800504c:	dc02      	bgt.n	8005054 <__sflush_r+0x20>
 800504e:	2000      	movs	r0, #0
 8005050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005054:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005056:	2e00      	cmp	r6, #0
 8005058:	d0f9      	beq.n	800504e <__sflush_r+0x1a>
 800505a:	2300      	movs	r3, #0
 800505c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005060:	682f      	ldr	r7, [r5, #0]
 8005062:	602b      	str	r3, [r5, #0]
 8005064:	d032      	beq.n	80050cc <__sflush_r+0x98>
 8005066:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	075a      	lsls	r2, r3, #29
 800506c:	d505      	bpl.n	800507a <__sflush_r+0x46>
 800506e:	6863      	ldr	r3, [r4, #4]
 8005070:	1ac0      	subs	r0, r0, r3
 8005072:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005074:	b10b      	cbz	r3, 800507a <__sflush_r+0x46>
 8005076:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005078:	1ac0      	subs	r0, r0, r3
 800507a:	2300      	movs	r3, #0
 800507c:	4602      	mov	r2, r0
 800507e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005080:	6a21      	ldr	r1, [r4, #32]
 8005082:	4628      	mov	r0, r5
 8005084:	47b0      	blx	r6
 8005086:	1c43      	adds	r3, r0, #1
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	d106      	bne.n	800509a <__sflush_r+0x66>
 800508c:	6829      	ldr	r1, [r5, #0]
 800508e:	291d      	cmp	r1, #29
 8005090:	d82c      	bhi.n	80050ec <__sflush_r+0xb8>
 8005092:	4a2a      	ldr	r2, [pc, #168]	; (800513c <__sflush_r+0x108>)
 8005094:	40ca      	lsrs	r2, r1
 8005096:	07d6      	lsls	r6, r2, #31
 8005098:	d528      	bpl.n	80050ec <__sflush_r+0xb8>
 800509a:	2200      	movs	r2, #0
 800509c:	6062      	str	r2, [r4, #4]
 800509e:	04d9      	lsls	r1, r3, #19
 80050a0:	6922      	ldr	r2, [r4, #16]
 80050a2:	6022      	str	r2, [r4, #0]
 80050a4:	d504      	bpl.n	80050b0 <__sflush_r+0x7c>
 80050a6:	1c42      	adds	r2, r0, #1
 80050a8:	d101      	bne.n	80050ae <__sflush_r+0x7a>
 80050aa:	682b      	ldr	r3, [r5, #0]
 80050ac:	b903      	cbnz	r3, 80050b0 <__sflush_r+0x7c>
 80050ae:	6560      	str	r0, [r4, #84]	; 0x54
 80050b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050b2:	602f      	str	r7, [r5, #0]
 80050b4:	2900      	cmp	r1, #0
 80050b6:	d0ca      	beq.n	800504e <__sflush_r+0x1a>
 80050b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050bc:	4299      	cmp	r1, r3
 80050be:	d002      	beq.n	80050c6 <__sflush_r+0x92>
 80050c0:	4628      	mov	r0, r5
 80050c2:	f000 f9e9 	bl	8005498 <_free_r>
 80050c6:	2000      	movs	r0, #0
 80050c8:	6360      	str	r0, [r4, #52]	; 0x34
 80050ca:	e7c1      	b.n	8005050 <__sflush_r+0x1c>
 80050cc:	6a21      	ldr	r1, [r4, #32]
 80050ce:	2301      	movs	r3, #1
 80050d0:	4628      	mov	r0, r5
 80050d2:	47b0      	blx	r6
 80050d4:	1c41      	adds	r1, r0, #1
 80050d6:	d1c7      	bne.n	8005068 <__sflush_r+0x34>
 80050d8:	682b      	ldr	r3, [r5, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0c4      	beq.n	8005068 <__sflush_r+0x34>
 80050de:	2b1d      	cmp	r3, #29
 80050e0:	d001      	beq.n	80050e6 <__sflush_r+0xb2>
 80050e2:	2b16      	cmp	r3, #22
 80050e4:	d101      	bne.n	80050ea <__sflush_r+0xb6>
 80050e6:	602f      	str	r7, [r5, #0]
 80050e8:	e7b1      	b.n	800504e <__sflush_r+0x1a>
 80050ea:	89a3      	ldrh	r3, [r4, #12]
 80050ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050f0:	81a3      	strh	r3, [r4, #12]
 80050f2:	e7ad      	b.n	8005050 <__sflush_r+0x1c>
 80050f4:	690f      	ldr	r7, [r1, #16]
 80050f6:	2f00      	cmp	r7, #0
 80050f8:	d0a9      	beq.n	800504e <__sflush_r+0x1a>
 80050fa:	0793      	lsls	r3, r2, #30
 80050fc:	680e      	ldr	r6, [r1, #0]
 80050fe:	bf08      	it	eq
 8005100:	694b      	ldreq	r3, [r1, #20]
 8005102:	600f      	str	r7, [r1, #0]
 8005104:	bf18      	it	ne
 8005106:	2300      	movne	r3, #0
 8005108:	eba6 0807 	sub.w	r8, r6, r7
 800510c:	608b      	str	r3, [r1, #8]
 800510e:	f1b8 0f00 	cmp.w	r8, #0
 8005112:	dd9c      	ble.n	800504e <__sflush_r+0x1a>
 8005114:	6a21      	ldr	r1, [r4, #32]
 8005116:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005118:	4643      	mov	r3, r8
 800511a:	463a      	mov	r2, r7
 800511c:	4628      	mov	r0, r5
 800511e:	47b0      	blx	r6
 8005120:	2800      	cmp	r0, #0
 8005122:	dc06      	bgt.n	8005132 <__sflush_r+0xfe>
 8005124:	89a3      	ldrh	r3, [r4, #12]
 8005126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800512a:	81a3      	strh	r3, [r4, #12]
 800512c:	f04f 30ff 	mov.w	r0, #4294967295
 8005130:	e78e      	b.n	8005050 <__sflush_r+0x1c>
 8005132:	4407      	add	r7, r0
 8005134:	eba8 0800 	sub.w	r8, r8, r0
 8005138:	e7e9      	b.n	800510e <__sflush_r+0xda>
 800513a:	bf00      	nop
 800513c:	20400001 	.word	0x20400001

08005140 <_fflush_r>:
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	690b      	ldr	r3, [r1, #16]
 8005144:	4605      	mov	r5, r0
 8005146:	460c      	mov	r4, r1
 8005148:	b913      	cbnz	r3, 8005150 <_fflush_r+0x10>
 800514a:	2500      	movs	r5, #0
 800514c:	4628      	mov	r0, r5
 800514e:	bd38      	pop	{r3, r4, r5, pc}
 8005150:	b118      	cbz	r0, 800515a <_fflush_r+0x1a>
 8005152:	6983      	ldr	r3, [r0, #24]
 8005154:	b90b      	cbnz	r3, 800515a <_fflush_r+0x1a>
 8005156:	f000 f887 	bl	8005268 <__sinit>
 800515a:	4b14      	ldr	r3, [pc, #80]	; (80051ac <_fflush_r+0x6c>)
 800515c:	429c      	cmp	r4, r3
 800515e:	d11b      	bne.n	8005198 <_fflush_r+0x58>
 8005160:	686c      	ldr	r4, [r5, #4]
 8005162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0ef      	beq.n	800514a <_fflush_r+0xa>
 800516a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800516c:	07d0      	lsls	r0, r2, #31
 800516e:	d404      	bmi.n	800517a <_fflush_r+0x3a>
 8005170:	0599      	lsls	r1, r3, #22
 8005172:	d402      	bmi.n	800517a <_fflush_r+0x3a>
 8005174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005176:	f000 f915 	bl	80053a4 <__retarget_lock_acquire_recursive>
 800517a:	4628      	mov	r0, r5
 800517c:	4621      	mov	r1, r4
 800517e:	f7ff ff59 	bl	8005034 <__sflush_r>
 8005182:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005184:	07da      	lsls	r2, r3, #31
 8005186:	4605      	mov	r5, r0
 8005188:	d4e0      	bmi.n	800514c <_fflush_r+0xc>
 800518a:	89a3      	ldrh	r3, [r4, #12]
 800518c:	059b      	lsls	r3, r3, #22
 800518e:	d4dd      	bmi.n	800514c <_fflush_r+0xc>
 8005190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005192:	f000 f908 	bl	80053a6 <__retarget_lock_release_recursive>
 8005196:	e7d9      	b.n	800514c <_fflush_r+0xc>
 8005198:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <_fflush_r+0x70>)
 800519a:	429c      	cmp	r4, r3
 800519c:	d101      	bne.n	80051a2 <_fflush_r+0x62>
 800519e:	68ac      	ldr	r4, [r5, #8]
 80051a0:	e7df      	b.n	8005162 <_fflush_r+0x22>
 80051a2:	4b04      	ldr	r3, [pc, #16]	; (80051b4 <_fflush_r+0x74>)
 80051a4:	429c      	cmp	r4, r3
 80051a6:	bf08      	it	eq
 80051a8:	68ec      	ldreq	r4, [r5, #12]
 80051aa:	e7da      	b.n	8005162 <_fflush_r+0x22>
 80051ac:	080061d4 	.word	0x080061d4
 80051b0:	080061f4 	.word	0x080061f4
 80051b4:	080061b4 	.word	0x080061b4

080051b8 <std>:
 80051b8:	2300      	movs	r3, #0
 80051ba:	b510      	push	{r4, lr}
 80051bc:	4604      	mov	r4, r0
 80051be:	e9c0 3300 	strd	r3, r3, [r0]
 80051c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051c6:	6083      	str	r3, [r0, #8]
 80051c8:	8181      	strh	r1, [r0, #12]
 80051ca:	6643      	str	r3, [r0, #100]	; 0x64
 80051cc:	81c2      	strh	r2, [r0, #14]
 80051ce:	6183      	str	r3, [r0, #24]
 80051d0:	4619      	mov	r1, r3
 80051d2:	2208      	movs	r2, #8
 80051d4:	305c      	adds	r0, #92	; 0x5c
 80051d6:	f7ff fd5b 	bl	8004c90 <memset>
 80051da:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <std+0x38>)
 80051dc:	6263      	str	r3, [r4, #36]	; 0x24
 80051de:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <std+0x3c>)
 80051e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80051e2:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <std+0x40>)
 80051e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051e6:	4b05      	ldr	r3, [pc, #20]	; (80051fc <std+0x44>)
 80051e8:	6224      	str	r4, [r4, #32]
 80051ea:	6323      	str	r3, [r4, #48]	; 0x30
 80051ec:	bd10      	pop	{r4, pc}
 80051ee:	bf00      	nop
 80051f0:	08004de5 	.word	0x08004de5
 80051f4:	08004e0b 	.word	0x08004e0b
 80051f8:	08004e43 	.word	0x08004e43
 80051fc:	08004e67 	.word	0x08004e67

08005200 <_cleanup_r>:
 8005200:	4901      	ldr	r1, [pc, #4]	; (8005208 <_cleanup_r+0x8>)
 8005202:	f000 b8af 	b.w	8005364 <_fwalk_reent>
 8005206:	bf00      	nop
 8005208:	08005141 	.word	0x08005141

0800520c <__sfmoreglue>:
 800520c:	b570      	push	{r4, r5, r6, lr}
 800520e:	2268      	movs	r2, #104	; 0x68
 8005210:	1e4d      	subs	r5, r1, #1
 8005212:	4355      	muls	r5, r2
 8005214:	460e      	mov	r6, r1
 8005216:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800521a:	f000 f9a9 	bl	8005570 <_malloc_r>
 800521e:	4604      	mov	r4, r0
 8005220:	b140      	cbz	r0, 8005234 <__sfmoreglue+0x28>
 8005222:	2100      	movs	r1, #0
 8005224:	e9c0 1600 	strd	r1, r6, [r0]
 8005228:	300c      	adds	r0, #12
 800522a:	60a0      	str	r0, [r4, #8]
 800522c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005230:	f7ff fd2e 	bl	8004c90 <memset>
 8005234:	4620      	mov	r0, r4
 8005236:	bd70      	pop	{r4, r5, r6, pc}

08005238 <__sfp_lock_acquire>:
 8005238:	4801      	ldr	r0, [pc, #4]	; (8005240 <__sfp_lock_acquire+0x8>)
 800523a:	f000 b8b3 	b.w	80053a4 <__retarget_lock_acquire_recursive>
 800523e:	bf00      	nop
 8005240:	200002b9 	.word	0x200002b9

08005244 <__sfp_lock_release>:
 8005244:	4801      	ldr	r0, [pc, #4]	; (800524c <__sfp_lock_release+0x8>)
 8005246:	f000 b8ae 	b.w	80053a6 <__retarget_lock_release_recursive>
 800524a:	bf00      	nop
 800524c:	200002b9 	.word	0x200002b9

08005250 <__sinit_lock_acquire>:
 8005250:	4801      	ldr	r0, [pc, #4]	; (8005258 <__sinit_lock_acquire+0x8>)
 8005252:	f000 b8a7 	b.w	80053a4 <__retarget_lock_acquire_recursive>
 8005256:	bf00      	nop
 8005258:	200002ba 	.word	0x200002ba

0800525c <__sinit_lock_release>:
 800525c:	4801      	ldr	r0, [pc, #4]	; (8005264 <__sinit_lock_release+0x8>)
 800525e:	f000 b8a2 	b.w	80053a6 <__retarget_lock_release_recursive>
 8005262:	bf00      	nop
 8005264:	200002ba 	.word	0x200002ba

08005268 <__sinit>:
 8005268:	b510      	push	{r4, lr}
 800526a:	4604      	mov	r4, r0
 800526c:	f7ff fff0 	bl	8005250 <__sinit_lock_acquire>
 8005270:	69a3      	ldr	r3, [r4, #24]
 8005272:	b11b      	cbz	r3, 800527c <__sinit+0x14>
 8005274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005278:	f7ff bff0 	b.w	800525c <__sinit_lock_release>
 800527c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005280:	6523      	str	r3, [r4, #80]	; 0x50
 8005282:	4b13      	ldr	r3, [pc, #76]	; (80052d0 <__sinit+0x68>)
 8005284:	4a13      	ldr	r2, [pc, #76]	; (80052d4 <__sinit+0x6c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	62a2      	str	r2, [r4, #40]	; 0x28
 800528a:	42a3      	cmp	r3, r4
 800528c:	bf04      	itt	eq
 800528e:	2301      	moveq	r3, #1
 8005290:	61a3      	streq	r3, [r4, #24]
 8005292:	4620      	mov	r0, r4
 8005294:	f000 f820 	bl	80052d8 <__sfp>
 8005298:	6060      	str	r0, [r4, #4]
 800529a:	4620      	mov	r0, r4
 800529c:	f000 f81c 	bl	80052d8 <__sfp>
 80052a0:	60a0      	str	r0, [r4, #8]
 80052a2:	4620      	mov	r0, r4
 80052a4:	f000 f818 	bl	80052d8 <__sfp>
 80052a8:	2200      	movs	r2, #0
 80052aa:	60e0      	str	r0, [r4, #12]
 80052ac:	2104      	movs	r1, #4
 80052ae:	6860      	ldr	r0, [r4, #4]
 80052b0:	f7ff ff82 	bl	80051b8 <std>
 80052b4:	68a0      	ldr	r0, [r4, #8]
 80052b6:	2201      	movs	r2, #1
 80052b8:	2109      	movs	r1, #9
 80052ba:	f7ff ff7d 	bl	80051b8 <std>
 80052be:	68e0      	ldr	r0, [r4, #12]
 80052c0:	2202      	movs	r2, #2
 80052c2:	2112      	movs	r1, #18
 80052c4:	f7ff ff78 	bl	80051b8 <std>
 80052c8:	2301      	movs	r3, #1
 80052ca:	61a3      	str	r3, [r4, #24]
 80052cc:	e7d2      	b.n	8005274 <__sinit+0xc>
 80052ce:	bf00      	nop
 80052d0:	080061b0 	.word	0x080061b0
 80052d4:	08005201 	.word	0x08005201

080052d8 <__sfp>:
 80052d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052da:	4607      	mov	r7, r0
 80052dc:	f7ff ffac 	bl	8005238 <__sfp_lock_acquire>
 80052e0:	4b1e      	ldr	r3, [pc, #120]	; (800535c <__sfp+0x84>)
 80052e2:	681e      	ldr	r6, [r3, #0]
 80052e4:	69b3      	ldr	r3, [r6, #24]
 80052e6:	b913      	cbnz	r3, 80052ee <__sfp+0x16>
 80052e8:	4630      	mov	r0, r6
 80052ea:	f7ff ffbd 	bl	8005268 <__sinit>
 80052ee:	3648      	adds	r6, #72	; 0x48
 80052f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	d503      	bpl.n	8005300 <__sfp+0x28>
 80052f8:	6833      	ldr	r3, [r6, #0]
 80052fa:	b30b      	cbz	r3, 8005340 <__sfp+0x68>
 80052fc:	6836      	ldr	r6, [r6, #0]
 80052fe:	e7f7      	b.n	80052f0 <__sfp+0x18>
 8005300:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005304:	b9d5      	cbnz	r5, 800533c <__sfp+0x64>
 8005306:	4b16      	ldr	r3, [pc, #88]	; (8005360 <__sfp+0x88>)
 8005308:	60e3      	str	r3, [r4, #12]
 800530a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800530e:	6665      	str	r5, [r4, #100]	; 0x64
 8005310:	f000 f847 	bl	80053a2 <__retarget_lock_init_recursive>
 8005314:	f7ff ff96 	bl	8005244 <__sfp_lock_release>
 8005318:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800531c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005320:	6025      	str	r5, [r4, #0]
 8005322:	61a5      	str	r5, [r4, #24]
 8005324:	2208      	movs	r2, #8
 8005326:	4629      	mov	r1, r5
 8005328:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800532c:	f7ff fcb0 	bl	8004c90 <memset>
 8005330:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005334:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005338:	4620      	mov	r0, r4
 800533a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800533c:	3468      	adds	r4, #104	; 0x68
 800533e:	e7d9      	b.n	80052f4 <__sfp+0x1c>
 8005340:	2104      	movs	r1, #4
 8005342:	4638      	mov	r0, r7
 8005344:	f7ff ff62 	bl	800520c <__sfmoreglue>
 8005348:	4604      	mov	r4, r0
 800534a:	6030      	str	r0, [r6, #0]
 800534c:	2800      	cmp	r0, #0
 800534e:	d1d5      	bne.n	80052fc <__sfp+0x24>
 8005350:	f7ff ff78 	bl	8005244 <__sfp_lock_release>
 8005354:	230c      	movs	r3, #12
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	e7ee      	b.n	8005338 <__sfp+0x60>
 800535a:	bf00      	nop
 800535c:	080061b0 	.word	0x080061b0
 8005360:	ffff0001 	.word	0xffff0001

08005364 <_fwalk_reent>:
 8005364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005368:	4606      	mov	r6, r0
 800536a:	4688      	mov	r8, r1
 800536c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005370:	2700      	movs	r7, #0
 8005372:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005376:	f1b9 0901 	subs.w	r9, r9, #1
 800537a:	d505      	bpl.n	8005388 <_fwalk_reent+0x24>
 800537c:	6824      	ldr	r4, [r4, #0]
 800537e:	2c00      	cmp	r4, #0
 8005380:	d1f7      	bne.n	8005372 <_fwalk_reent+0xe>
 8005382:	4638      	mov	r0, r7
 8005384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005388:	89ab      	ldrh	r3, [r5, #12]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d907      	bls.n	800539e <_fwalk_reent+0x3a>
 800538e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005392:	3301      	adds	r3, #1
 8005394:	d003      	beq.n	800539e <_fwalk_reent+0x3a>
 8005396:	4629      	mov	r1, r5
 8005398:	4630      	mov	r0, r6
 800539a:	47c0      	blx	r8
 800539c:	4307      	orrs	r7, r0
 800539e:	3568      	adds	r5, #104	; 0x68
 80053a0:	e7e9      	b.n	8005376 <_fwalk_reent+0x12>

080053a2 <__retarget_lock_init_recursive>:
 80053a2:	4770      	bx	lr

080053a4 <__retarget_lock_acquire_recursive>:
 80053a4:	4770      	bx	lr

080053a6 <__retarget_lock_release_recursive>:
 80053a6:	4770      	bx	lr

080053a8 <_lseek_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	4d07      	ldr	r5, [pc, #28]	; (80053c8 <_lseek_r+0x20>)
 80053ac:	4604      	mov	r4, r0
 80053ae:	4608      	mov	r0, r1
 80053b0:	4611      	mov	r1, r2
 80053b2:	2200      	movs	r2, #0
 80053b4:	602a      	str	r2, [r5, #0]
 80053b6:	461a      	mov	r2, r3
 80053b8:	f7fb fda6 	bl	8000f08 <_lseek>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	d102      	bne.n	80053c6 <_lseek_r+0x1e>
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	b103      	cbz	r3, 80053c6 <_lseek_r+0x1e>
 80053c4:	6023      	str	r3, [r4, #0]
 80053c6:	bd38      	pop	{r3, r4, r5, pc}
 80053c8:	200002c4 	.word	0x200002c4

080053cc <__swhatbuf_r>:
 80053cc:	b570      	push	{r4, r5, r6, lr}
 80053ce:	460e      	mov	r6, r1
 80053d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d4:	2900      	cmp	r1, #0
 80053d6:	b096      	sub	sp, #88	; 0x58
 80053d8:	4614      	mov	r4, r2
 80053da:	461d      	mov	r5, r3
 80053dc:	da08      	bge.n	80053f0 <__swhatbuf_r+0x24>
 80053de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	602a      	str	r2, [r5, #0]
 80053e6:	061a      	lsls	r2, r3, #24
 80053e8:	d410      	bmi.n	800540c <__swhatbuf_r+0x40>
 80053ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053ee:	e00e      	b.n	800540e <__swhatbuf_r+0x42>
 80053f0:	466a      	mov	r2, sp
 80053f2:	f000 fde1 	bl	8005fb8 <_fstat_r>
 80053f6:	2800      	cmp	r0, #0
 80053f8:	dbf1      	blt.n	80053de <__swhatbuf_r+0x12>
 80053fa:	9a01      	ldr	r2, [sp, #4]
 80053fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005400:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005404:	425a      	negs	r2, r3
 8005406:	415a      	adcs	r2, r3
 8005408:	602a      	str	r2, [r5, #0]
 800540a:	e7ee      	b.n	80053ea <__swhatbuf_r+0x1e>
 800540c:	2340      	movs	r3, #64	; 0x40
 800540e:	2000      	movs	r0, #0
 8005410:	6023      	str	r3, [r4, #0]
 8005412:	b016      	add	sp, #88	; 0x58
 8005414:	bd70      	pop	{r4, r5, r6, pc}
	...

08005418 <__smakebuf_r>:
 8005418:	898b      	ldrh	r3, [r1, #12]
 800541a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800541c:	079d      	lsls	r5, r3, #30
 800541e:	4606      	mov	r6, r0
 8005420:	460c      	mov	r4, r1
 8005422:	d507      	bpl.n	8005434 <__smakebuf_r+0x1c>
 8005424:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	6123      	str	r3, [r4, #16]
 800542c:	2301      	movs	r3, #1
 800542e:	6163      	str	r3, [r4, #20]
 8005430:	b002      	add	sp, #8
 8005432:	bd70      	pop	{r4, r5, r6, pc}
 8005434:	ab01      	add	r3, sp, #4
 8005436:	466a      	mov	r2, sp
 8005438:	f7ff ffc8 	bl	80053cc <__swhatbuf_r>
 800543c:	9900      	ldr	r1, [sp, #0]
 800543e:	4605      	mov	r5, r0
 8005440:	4630      	mov	r0, r6
 8005442:	f000 f895 	bl	8005570 <_malloc_r>
 8005446:	b948      	cbnz	r0, 800545c <__smakebuf_r+0x44>
 8005448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800544c:	059a      	lsls	r2, r3, #22
 800544e:	d4ef      	bmi.n	8005430 <__smakebuf_r+0x18>
 8005450:	f023 0303 	bic.w	r3, r3, #3
 8005454:	f043 0302 	orr.w	r3, r3, #2
 8005458:	81a3      	strh	r3, [r4, #12]
 800545a:	e7e3      	b.n	8005424 <__smakebuf_r+0xc>
 800545c:	4b0d      	ldr	r3, [pc, #52]	; (8005494 <__smakebuf_r+0x7c>)
 800545e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005460:	89a3      	ldrh	r3, [r4, #12]
 8005462:	6020      	str	r0, [r4, #0]
 8005464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005468:	81a3      	strh	r3, [r4, #12]
 800546a:	9b00      	ldr	r3, [sp, #0]
 800546c:	6163      	str	r3, [r4, #20]
 800546e:	9b01      	ldr	r3, [sp, #4]
 8005470:	6120      	str	r0, [r4, #16]
 8005472:	b15b      	cbz	r3, 800548c <__smakebuf_r+0x74>
 8005474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005478:	4630      	mov	r0, r6
 800547a:	f000 fdaf 	bl	8005fdc <_isatty_r>
 800547e:	b128      	cbz	r0, 800548c <__smakebuf_r+0x74>
 8005480:	89a3      	ldrh	r3, [r4, #12]
 8005482:	f023 0303 	bic.w	r3, r3, #3
 8005486:	f043 0301 	orr.w	r3, r3, #1
 800548a:	81a3      	strh	r3, [r4, #12]
 800548c:	89a0      	ldrh	r0, [r4, #12]
 800548e:	4305      	orrs	r5, r0
 8005490:	81a5      	strh	r5, [r4, #12]
 8005492:	e7cd      	b.n	8005430 <__smakebuf_r+0x18>
 8005494:	08005201 	.word	0x08005201

08005498 <_free_r>:
 8005498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800549a:	2900      	cmp	r1, #0
 800549c:	d044      	beq.n	8005528 <_free_r+0x90>
 800549e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054a2:	9001      	str	r0, [sp, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f1a1 0404 	sub.w	r4, r1, #4
 80054aa:	bfb8      	it	lt
 80054ac:	18e4      	addlt	r4, r4, r3
 80054ae:	f000 fdb3 	bl	8006018 <__malloc_lock>
 80054b2:	4a1e      	ldr	r2, [pc, #120]	; (800552c <_free_r+0x94>)
 80054b4:	9801      	ldr	r0, [sp, #4]
 80054b6:	6813      	ldr	r3, [r2, #0]
 80054b8:	b933      	cbnz	r3, 80054c8 <_free_r+0x30>
 80054ba:	6063      	str	r3, [r4, #4]
 80054bc:	6014      	str	r4, [r2, #0]
 80054be:	b003      	add	sp, #12
 80054c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054c4:	f000 bdae 	b.w	8006024 <__malloc_unlock>
 80054c8:	42a3      	cmp	r3, r4
 80054ca:	d908      	bls.n	80054de <_free_r+0x46>
 80054cc:	6825      	ldr	r5, [r4, #0]
 80054ce:	1961      	adds	r1, r4, r5
 80054d0:	428b      	cmp	r3, r1
 80054d2:	bf01      	itttt	eq
 80054d4:	6819      	ldreq	r1, [r3, #0]
 80054d6:	685b      	ldreq	r3, [r3, #4]
 80054d8:	1949      	addeq	r1, r1, r5
 80054da:	6021      	streq	r1, [r4, #0]
 80054dc:	e7ed      	b.n	80054ba <_free_r+0x22>
 80054de:	461a      	mov	r2, r3
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	b10b      	cbz	r3, 80054e8 <_free_r+0x50>
 80054e4:	42a3      	cmp	r3, r4
 80054e6:	d9fa      	bls.n	80054de <_free_r+0x46>
 80054e8:	6811      	ldr	r1, [r2, #0]
 80054ea:	1855      	adds	r5, r2, r1
 80054ec:	42a5      	cmp	r5, r4
 80054ee:	d10b      	bne.n	8005508 <_free_r+0x70>
 80054f0:	6824      	ldr	r4, [r4, #0]
 80054f2:	4421      	add	r1, r4
 80054f4:	1854      	adds	r4, r2, r1
 80054f6:	42a3      	cmp	r3, r4
 80054f8:	6011      	str	r1, [r2, #0]
 80054fa:	d1e0      	bne.n	80054be <_free_r+0x26>
 80054fc:	681c      	ldr	r4, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	6053      	str	r3, [r2, #4]
 8005502:	4421      	add	r1, r4
 8005504:	6011      	str	r1, [r2, #0]
 8005506:	e7da      	b.n	80054be <_free_r+0x26>
 8005508:	d902      	bls.n	8005510 <_free_r+0x78>
 800550a:	230c      	movs	r3, #12
 800550c:	6003      	str	r3, [r0, #0]
 800550e:	e7d6      	b.n	80054be <_free_r+0x26>
 8005510:	6825      	ldr	r5, [r4, #0]
 8005512:	1961      	adds	r1, r4, r5
 8005514:	428b      	cmp	r3, r1
 8005516:	bf04      	itt	eq
 8005518:	6819      	ldreq	r1, [r3, #0]
 800551a:	685b      	ldreq	r3, [r3, #4]
 800551c:	6063      	str	r3, [r4, #4]
 800551e:	bf04      	itt	eq
 8005520:	1949      	addeq	r1, r1, r5
 8005522:	6021      	streq	r1, [r4, #0]
 8005524:	6054      	str	r4, [r2, #4]
 8005526:	e7ca      	b.n	80054be <_free_r+0x26>
 8005528:	b003      	add	sp, #12
 800552a:	bd30      	pop	{r4, r5, pc}
 800552c:	200002bc 	.word	0x200002bc

08005530 <sbrk_aligned>:
 8005530:	b570      	push	{r4, r5, r6, lr}
 8005532:	4e0e      	ldr	r6, [pc, #56]	; (800556c <sbrk_aligned+0x3c>)
 8005534:	460c      	mov	r4, r1
 8005536:	6831      	ldr	r1, [r6, #0]
 8005538:	4605      	mov	r5, r0
 800553a:	b911      	cbnz	r1, 8005542 <sbrk_aligned+0x12>
 800553c:	f000 fbc2 	bl	8005cc4 <_sbrk_r>
 8005540:	6030      	str	r0, [r6, #0]
 8005542:	4621      	mov	r1, r4
 8005544:	4628      	mov	r0, r5
 8005546:	f000 fbbd 	bl	8005cc4 <_sbrk_r>
 800554a:	1c43      	adds	r3, r0, #1
 800554c:	d00a      	beq.n	8005564 <sbrk_aligned+0x34>
 800554e:	1cc4      	adds	r4, r0, #3
 8005550:	f024 0403 	bic.w	r4, r4, #3
 8005554:	42a0      	cmp	r0, r4
 8005556:	d007      	beq.n	8005568 <sbrk_aligned+0x38>
 8005558:	1a21      	subs	r1, r4, r0
 800555a:	4628      	mov	r0, r5
 800555c:	f000 fbb2 	bl	8005cc4 <_sbrk_r>
 8005560:	3001      	adds	r0, #1
 8005562:	d101      	bne.n	8005568 <sbrk_aligned+0x38>
 8005564:	f04f 34ff 	mov.w	r4, #4294967295
 8005568:	4620      	mov	r0, r4
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	200002c0 	.word	0x200002c0

08005570 <_malloc_r>:
 8005570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005574:	1ccd      	adds	r5, r1, #3
 8005576:	f025 0503 	bic.w	r5, r5, #3
 800557a:	3508      	adds	r5, #8
 800557c:	2d0c      	cmp	r5, #12
 800557e:	bf38      	it	cc
 8005580:	250c      	movcc	r5, #12
 8005582:	2d00      	cmp	r5, #0
 8005584:	4607      	mov	r7, r0
 8005586:	db01      	blt.n	800558c <_malloc_r+0x1c>
 8005588:	42a9      	cmp	r1, r5
 800558a:	d905      	bls.n	8005598 <_malloc_r+0x28>
 800558c:	230c      	movs	r3, #12
 800558e:	603b      	str	r3, [r7, #0]
 8005590:	2600      	movs	r6, #0
 8005592:	4630      	mov	r0, r6
 8005594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005598:	4e2e      	ldr	r6, [pc, #184]	; (8005654 <_malloc_r+0xe4>)
 800559a:	f000 fd3d 	bl	8006018 <__malloc_lock>
 800559e:	6833      	ldr	r3, [r6, #0]
 80055a0:	461c      	mov	r4, r3
 80055a2:	bb34      	cbnz	r4, 80055f2 <_malloc_r+0x82>
 80055a4:	4629      	mov	r1, r5
 80055a6:	4638      	mov	r0, r7
 80055a8:	f7ff ffc2 	bl	8005530 <sbrk_aligned>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	4604      	mov	r4, r0
 80055b0:	d14d      	bne.n	800564e <_malloc_r+0xde>
 80055b2:	6834      	ldr	r4, [r6, #0]
 80055b4:	4626      	mov	r6, r4
 80055b6:	2e00      	cmp	r6, #0
 80055b8:	d140      	bne.n	800563c <_malloc_r+0xcc>
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	4631      	mov	r1, r6
 80055be:	4638      	mov	r0, r7
 80055c0:	eb04 0803 	add.w	r8, r4, r3
 80055c4:	f000 fb7e 	bl	8005cc4 <_sbrk_r>
 80055c8:	4580      	cmp	r8, r0
 80055ca:	d13a      	bne.n	8005642 <_malloc_r+0xd2>
 80055cc:	6821      	ldr	r1, [r4, #0]
 80055ce:	3503      	adds	r5, #3
 80055d0:	1a6d      	subs	r5, r5, r1
 80055d2:	f025 0503 	bic.w	r5, r5, #3
 80055d6:	3508      	adds	r5, #8
 80055d8:	2d0c      	cmp	r5, #12
 80055da:	bf38      	it	cc
 80055dc:	250c      	movcc	r5, #12
 80055de:	4629      	mov	r1, r5
 80055e0:	4638      	mov	r0, r7
 80055e2:	f7ff ffa5 	bl	8005530 <sbrk_aligned>
 80055e6:	3001      	adds	r0, #1
 80055e8:	d02b      	beq.n	8005642 <_malloc_r+0xd2>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	442b      	add	r3, r5
 80055ee:	6023      	str	r3, [r4, #0]
 80055f0:	e00e      	b.n	8005610 <_malloc_r+0xa0>
 80055f2:	6822      	ldr	r2, [r4, #0]
 80055f4:	1b52      	subs	r2, r2, r5
 80055f6:	d41e      	bmi.n	8005636 <_malloc_r+0xc6>
 80055f8:	2a0b      	cmp	r2, #11
 80055fa:	d916      	bls.n	800562a <_malloc_r+0xba>
 80055fc:	1961      	adds	r1, r4, r5
 80055fe:	42a3      	cmp	r3, r4
 8005600:	6025      	str	r5, [r4, #0]
 8005602:	bf18      	it	ne
 8005604:	6059      	strne	r1, [r3, #4]
 8005606:	6863      	ldr	r3, [r4, #4]
 8005608:	bf08      	it	eq
 800560a:	6031      	streq	r1, [r6, #0]
 800560c:	5162      	str	r2, [r4, r5]
 800560e:	604b      	str	r3, [r1, #4]
 8005610:	4638      	mov	r0, r7
 8005612:	f104 060b 	add.w	r6, r4, #11
 8005616:	f000 fd05 	bl	8006024 <__malloc_unlock>
 800561a:	f026 0607 	bic.w	r6, r6, #7
 800561e:	1d23      	adds	r3, r4, #4
 8005620:	1af2      	subs	r2, r6, r3
 8005622:	d0b6      	beq.n	8005592 <_malloc_r+0x22>
 8005624:	1b9b      	subs	r3, r3, r6
 8005626:	50a3      	str	r3, [r4, r2]
 8005628:	e7b3      	b.n	8005592 <_malloc_r+0x22>
 800562a:	6862      	ldr	r2, [r4, #4]
 800562c:	42a3      	cmp	r3, r4
 800562e:	bf0c      	ite	eq
 8005630:	6032      	streq	r2, [r6, #0]
 8005632:	605a      	strne	r2, [r3, #4]
 8005634:	e7ec      	b.n	8005610 <_malloc_r+0xa0>
 8005636:	4623      	mov	r3, r4
 8005638:	6864      	ldr	r4, [r4, #4]
 800563a:	e7b2      	b.n	80055a2 <_malloc_r+0x32>
 800563c:	4634      	mov	r4, r6
 800563e:	6876      	ldr	r6, [r6, #4]
 8005640:	e7b9      	b.n	80055b6 <_malloc_r+0x46>
 8005642:	230c      	movs	r3, #12
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	4638      	mov	r0, r7
 8005648:	f000 fcec 	bl	8006024 <__malloc_unlock>
 800564c:	e7a1      	b.n	8005592 <_malloc_r+0x22>
 800564e:	6025      	str	r5, [r4, #0]
 8005650:	e7de      	b.n	8005610 <_malloc_r+0xa0>
 8005652:	bf00      	nop
 8005654:	200002bc 	.word	0x200002bc

08005658 <_sungetc_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	1c4b      	adds	r3, r1, #1
 800565c:	4614      	mov	r4, r2
 800565e:	d103      	bne.n	8005668 <_sungetc_r+0x10>
 8005660:	f04f 35ff 	mov.w	r5, #4294967295
 8005664:	4628      	mov	r0, r5
 8005666:	bd38      	pop	{r3, r4, r5, pc}
 8005668:	8993      	ldrh	r3, [r2, #12]
 800566a:	f023 0320 	bic.w	r3, r3, #32
 800566e:	8193      	strh	r3, [r2, #12]
 8005670:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005672:	6852      	ldr	r2, [r2, #4]
 8005674:	b2cd      	uxtb	r5, r1
 8005676:	b18b      	cbz	r3, 800569c <_sungetc_r+0x44>
 8005678:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800567a:	4293      	cmp	r3, r2
 800567c:	dd08      	ble.n	8005690 <_sungetc_r+0x38>
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	1e5a      	subs	r2, r3, #1
 8005682:	6022      	str	r2, [r4, #0]
 8005684:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005688:	6863      	ldr	r3, [r4, #4]
 800568a:	3301      	adds	r3, #1
 800568c:	6063      	str	r3, [r4, #4]
 800568e:	e7e9      	b.n	8005664 <_sungetc_r+0xc>
 8005690:	4621      	mov	r1, r4
 8005692:	f000 fc57 	bl	8005f44 <__submore>
 8005696:	2800      	cmp	r0, #0
 8005698:	d0f1      	beq.n	800567e <_sungetc_r+0x26>
 800569a:	e7e1      	b.n	8005660 <_sungetc_r+0x8>
 800569c:	6921      	ldr	r1, [r4, #16]
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	b151      	cbz	r1, 80056b8 <_sungetc_r+0x60>
 80056a2:	4299      	cmp	r1, r3
 80056a4:	d208      	bcs.n	80056b8 <_sungetc_r+0x60>
 80056a6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80056aa:	42a9      	cmp	r1, r5
 80056ac:	d104      	bne.n	80056b8 <_sungetc_r+0x60>
 80056ae:	3b01      	subs	r3, #1
 80056b0:	3201      	adds	r2, #1
 80056b2:	6023      	str	r3, [r4, #0]
 80056b4:	6062      	str	r2, [r4, #4]
 80056b6:	e7d5      	b.n	8005664 <_sungetc_r+0xc>
 80056b8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80056bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056c0:	6363      	str	r3, [r4, #52]	; 0x34
 80056c2:	2303      	movs	r3, #3
 80056c4:	63a3      	str	r3, [r4, #56]	; 0x38
 80056c6:	4623      	mov	r3, r4
 80056c8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	2301      	movs	r3, #1
 80056d0:	e7dc      	b.n	800568c <_sungetc_r+0x34>

080056d2 <__ssrefill_r>:
 80056d2:	b510      	push	{r4, lr}
 80056d4:	460c      	mov	r4, r1
 80056d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80056d8:	b169      	cbz	r1, 80056f6 <__ssrefill_r+0x24>
 80056da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056de:	4299      	cmp	r1, r3
 80056e0:	d001      	beq.n	80056e6 <__ssrefill_r+0x14>
 80056e2:	f7ff fed9 	bl	8005498 <_free_r>
 80056e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056e8:	6063      	str	r3, [r4, #4]
 80056ea:	2000      	movs	r0, #0
 80056ec:	6360      	str	r0, [r4, #52]	; 0x34
 80056ee:	b113      	cbz	r3, 80056f6 <__ssrefill_r+0x24>
 80056f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80056f2:	6023      	str	r3, [r4, #0]
 80056f4:	bd10      	pop	{r4, pc}
 80056f6:	6923      	ldr	r3, [r4, #16]
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	2300      	movs	r3, #0
 80056fc:	6063      	str	r3, [r4, #4]
 80056fe:	89a3      	ldrh	r3, [r4, #12]
 8005700:	f043 0320 	orr.w	r3, r3, #32
 8005704:	81a3      	strh	r3, [r4, #12]
 8005706:	f04f 30ff 	mov.w	r0, #4294967295
 800570a:	e7f3      	b.n	80056f4 <__ssrefill_r+0x22>

0800570c <__ssvfiscanf_r>:
 800570c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005710:	460c      	mov	r4, r1
 8005712:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005716:	2100      	movs	r1, #0
 8005718:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800571c:	49a6      	ldr	r1, [pc, #664]	; (80059b8 <__ssvfiscanf_r+0x2ac>)
 800571e:	91a0      	str	r1, [sp, #640]	; 0x280
 8005720:	f10d 0804 	add.w	r8, sp, #4
 8005724:	49a5      	ldr	r1, [pc, #660]	; (80059bc <__ssvfiscanf_r+0x2b0>)
 8005726:	4fa6      	ldr	r7, [pc, #664]	; (80059c0 <__ssvfiscanf_r+0x2b4>)
 8005728:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80059c4 <__ssvfiscanf_r+0x2b8>
 800572c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005730:	4606      	mov	r6, r0
 8005732:	91a1      	str	r1, [sp, #644]	; 0x284
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	7813      	ldrb	r3, [r2, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 815a 	beq.w	80059f2 <__ssvfiscanf_r+0x2e6>
 800573e:	5dd9      	ldrb	r1, [r3, r7]
 8005740:	f011 0108 	ands.w	r1, r1, #8
 8005744:	f102 0501 	add.w	r5, r2, #1
 8005748:	d019      	beq.n	800577e <__ssvfiscanf_r+0x72>
 800574a:	6863      	ldr	r3, [r4, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	dd0f      	ble.n	8005770 <__ssvfiscanf_r+0x64>
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	781a      	ldrb	r2, [r3, #0]
 8005754:	5cba      	ldrb	r2, [r7, r2]
 8005756:	0712      	lsls	r2, r2, #28
 8005758:	d401      	bmi.n	800575e <__ssvfiscanf_r+0x52>
 800575a:	462a      	mov	r2, r5
 800575c:	e7eb      	b.n	8005736 <__ssvfiscanf_r+0x2a>
 800575e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005760:	3201      	adds	r2, #1
 8005762:	9245      	str	r2, [sp, #276]	; 0x114
 8005764:	6862      	ldr	r2, [r4, #4]
 8005766:	3301      	adds	r3, #1
 8005768:	3a01      	subs	r2, #1
 800576a:	6062      	str	r2, [r4, #4]
 800576c:	6023      	str	r3, [r4, #0]
 800576e:	e7ec      	b.n	800574a <__ssvfiscanf_r+0x3e>
 8005770:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005772:	4621      	mov	r1, r4
 8005774:	4630      	mov	r0, r6
 8005776:	4798      	blx	r3
 8005778:	2800      	cmp	r0, #0
 800577a:	d0e9      	beq.n	8005750 <__ssvfiscanf_r+0x44>
 800577c:	e7ed      	b.n	800575a <__ssvfiscanf_r+0x4e>
 800577e:	2b25      	cmp	r3, #37	; 0x25
 8005780:	d012      	beq.n	80057a8 <__ssvfiscanf_r+0x9c>
 8005782:	469a      	mov	sl, r3
 8005784:	6863      	ldr	r3, [r4, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	f340 8091 	ble.w	80058ae <__ssvfiscanf_r+0x1a2>
 800578c:	6822      	ldr	r2, [r4, #0]
 800578e:	7813      	ldrb	r3, [r2, #0]
 8005790:	4553      	cmp	r3, sl
 8005792:	f040 812e 	bne.w	80059f2 <__ssvfiscanf_r+0x2e6>
 8005796:	6863      	ldr	r3, [r4, #4]
 8005798:	3b01      	subs	r3, #1
 800579a:	6063      	str	r3, [r4, #4]
 800579c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800579e:	3201      	adds	r2, #1
 80057a0:	3301      	adds	r3, #1
 80057a2:	6022      	str	r2, [r4, #0]
 80057a4:	9345      	str	r3, [sp, #276]	; 0x114
 80057a6:	e7d8      	b.n	800575a <__ssvfiscanf_r+0x4e>
 80057a8:	9141      	str	r1, [sp, #260]	; 0x104
 80057aa:	9143      	str	r1, [sp, #268]	; 0x10c
 80057ac:	7853      	ldrb	r3, [r2, #1]
 80057ae:	2b2a      	cmp	r3, #42	; 0x2a
 80057b0:	bf02      	ittt	eq
 80057b2:	2310      	moveq	r3, #16
 80057b4:	1c95      	addeq	r5, r2, #2
 80057b6:	9341      	streq	r3, [sp, #260]	; 0x104
 80057b8:	220a      	movs	r2, #10
 80057ba:	46aa      	mov	sl, r5
 80057bc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80057c0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80057c4:	2b09      	cmp	r3, #9
 80057c6:	d91d      	bls.n	8005804 <__ssvfiscanf_r+0xf8>
 80057c8:	487e      	ldr	r0, [pc, #504]	; (80059c4 <__ssvfiscanf_r+0x2b8>)
 80057ca:	2203      	movs	r2, #3
 80057cc:	f7fa fd18 	bl	8000200 <memchr>
 80057d0:	b140      	cbz	r0, 80057e4 <__ssvfiscanf_r+0xd8>
 80057d2:	2301      	movs	r3, #1
 80057d4:	eba0 0009 	sub.w	r0, r0, r9
 80057d8:	fa03 f000 	lsl.w	r0, r3, r0
 80057dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80057de:	4318      	orrs	r0, r3
 80057e0:	9041      	str	r0, [sp, #260]	; 0x104
 80057e2:	4655      	mov	r5, sl
 80057e4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80057e8:	2b78      	cmp	r3, #120	; 0x78
 80057ea:	d806      	bhi.n	80057fa <__ssvfiscanf_r+0xee>
 80057ec:	2b57      	cmp	r3, #87	; 0x57
 80057ee:	d810      	bhi.n	8005812 <__ssvfiscanf_r+0x106>
 80057f0:	2b25      	cmp	r3, #37	; 0x25
 80057f2:	d0c6      	beq.n	8005782 <__ssvfiscanf_r+0x76>
 80057f4:	d856      	bhi.n	80058a4 <__ssvfiscanf_r+0x198>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d064      	beq.n	80058c4 <__ssvfiscanf_r+0x1b8>
 80057fa:	2303      	movs	r3, #3
 80057fc:	9347      	str	r3, [sp, #284]	; 0x11c
 80057fe:	230a      	movs	r3, #10
 8005800:	9342      	str	r3, [sp, #264]	; 0x108
 8005802:	e071      	b.n	80058e8 <__ssvfiscanf_r+0x1dc>
 8005804:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005806:	fb02 1103 	mla	r1, r2, r3, r1
 800580a:	3930      	subs	r1, #48	; 0x30
 800580c:	9143      	str	r1, [sp, #268]	; 0x10c
 800580e:	4655      	mov	r5, sl
 8005810:	e7d3      	b.n	80057ba <__ssvfiscanf_r+0xae>
 8005812:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005816:	2a20      	cmp	r2, #32
 8005818:	d8ef      	bhi.n	80057fa <__ssvfiscanf_r+0xee>
 800581a:	a101      	add	r1, pc, #4	; (adr r1, 8005820 <__ssvfiscanf_r+0x114>)
 800581c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005820:	080058d3 	.word	0x080058d3
 8005824:	080057fb 	.word	0x080057fb
 8005828:	080057fb 	.word	0x080057fb
 800582c:	08005931 	.word	0x08005931
 8005830:	080057fb 	.word	0x080057fb
 8005834:	080057fb 	.word	0x080057fb
 8005838:	080057fb 	.word	0x080057fb
 800583c:	080057fb 	.word	0x080057fb
 8005840:	080057fb 	.word	0x080057fb
 8005844:	080057fb 	.word	0x080057fb
 8005848:	080057fb 	.word	0x080057fb
 800584c:	08005947 	.word	0x08005947
 8005850:	0800591d 	.word	0x0800591d
 8005854:	080058ab 	.word	0x080058ab
 8005858:	080058ab 	.word	0x080058ab
 800585c:	080058ab 	.word	0x080058ab
 8005860:	080057fb 	.word	0x080057fb
 8005864:	08005921 	.word	0x08005921
 8005868:	080057fb 	.word	0x080057fb
 800586c:	080057fb 	.word	0x080057fb
 8005870:	080057fb 	.word	0x080057fb
 8005874:	080057fb 	.word	0x080057fb
 8005878:	08005957 	.word	0x08005957
 800587c:	08005929 	.word	0x08005929
 8005880:	080058cb 	.word	0x080058cb
 8005884:	080057fb 	.word	0x080057fb
 8005888:	080057fb 	.word	0x080057fb
 800588c:	08005953 	.word	0x08005953
 8005890:	080057fb 	.word	0x080057fb
 8005894:	0800591d 	.word	0x0800591d
 8005898:	080057fb 	.word	0x080057fb
 800589c:	080057fb 	.word	0x080057fb
 80058a0:	080058d3 	.word	0x080058d3
 80058a4:	3b45      	subs	r3, #69	; 0x45
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d8a7      	bhi.n	80057fa <__ssvfiscanf_r+0xee>
 80058aa:	2305      	movs	r3, #5
 80058ac:	e01b      	b.n	80058e6 <__ssvfiscanf_r+0x1da>
 80058ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80058b0:	4621      	mov	r1, r4
 80058b2:	4630      	mov	r0, r6
 80058b4:	4798      	blx	r3
 80058b6:	2800      	cmp	r0, #0
 80058b8:	f43f af68 	beq.w	800578c <__ssvfiscanf_r+0x80>
 80058bc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80058be:	2800      	cmp	r0, #0
 80058c0:	f040 808d 	bne.w	80059de <__ssvfiscanf_r+0x2d2>
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295
 80058c8:	e08f      	b.n	80059ea <__ssvfiscanf_r+0x2de>
 80058ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80058cc:	f042 0220 	orr.w	r2, r2, #32
 80058d0:	9241      	str	r2, [sp, #260]	; 0x104
 80058d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80058d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058d8:	9241      	str	r2, [sp, #260]	; 0x104
 80058da:	2210      	movs	r2, #16
 80058dc:	2b6f      	cmp	r3, #111	; 0x6f
 80058de:	9242      	str	r2, [sp, #264]	; 0x108
 80058e0:	bf34      	ite	cc
 80058e2:	2303      	movcc	r3, #3
 80058e4:	2304      	movcs	r3, #4
 80058e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80058e8:	6863      	ldr	r3, [r4, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	dd42      	ble.n	8005974 <__ssvfiscanf_r+0x268>
 80058ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80058f0:	0659      	lsls	r1, r3, #25
 80058f2:	d404      	bmi.n	80058fe <__ssvfiscanf_r+0x1f2>
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	781a      	ldrb	r2, [r3, #0]
 80058f8:	5cba      	ldrb	r2, [r7, r2]
 80058fa:	0712      	lsls	r2, r2, #28
 80058fc:	d441      	bmi.n	8005982 <__ssvfiscanf_r+0x276>
 80058fe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005900:	2b02      	cmp	r3, #2
 8005902:	dc50      	bgt.n	80059a6 <__ssvfiscanf_r+0x29a>
 8005904:	466b      	mov	r3, sp
 8005906:	4622      	mov	r2, r4
 8005908:	a941      	add	r1, sp, #260	; 0x104
 800590a:	4630      	mov	r0, r6
 800590c:	f000 f876 	bl	80059fc <_scanf_chars>
 8005910:	2801      	cmp	r0, #1
 8005912:	d06e      	beq.n	80059f2 <__ssvfiscanf_r+0x2e6>
 8005914:	2802      	cmp	r0, #2
 8005916:	f47f af20 	bne.w	800575a <__ssvfiscanf_r+0x4e>
 800591a:	e7cf      	b.n	80058bc <__ssvfiscanf_r+0x1b0>
 800591c:	220a      	movs	r2, #10
 800591e:	e7dd      	b.n	80058dc <__ssvfiscanf_r+0x1d0>
 8005920:	2300      	movs	r3, #0
 8005922:	9342      	str	r3, [sp, #264]	; 0x108
 8005924:	2303      	movs	r3, #3
 8005926:	e7de      	b.n	80058e6 <__ssvfiscanf_r+0x1da>
 8005928:	2308      	movs	r3, #8
 800592a:	9342      	str	r3, [sp, #264]	; 0x108
 800592c:	2304      	movs	r3, #4
 800592e:	e7da      	b.n	80058e6 <__ssvfiscanf_r+0x1da>
 8005930:	4629      	mov	r1, r5
 8005932:	4640      	mov	r0, r8
 8005934:	f000 f9d6 	bl	8005ce4 <__sccl>
 8005938:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800593a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800593e:	9341      	str	r3, [sp, #260]	; 0x104
 8005940:	4605      	mov	r5, r0
 8005942:	2301      	movs	r3, #1
 8005944:	e7cf      	b.n	80058e6 <__ssvfiscanf_r+0x1da>
 8005946:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800594c:	9341      	str	r3, [sp, #260]	; 0x104
 800594e:	2300      	movs	r3, #0
 8005950:	e7c9      	b.n	80058e6 <__ssvfiscanf_r+0x1da>
 8005952:	2302      	movs	r3, #2
 8005954:	e7c7      	b.n	80058e6 <__ssvfiscanf_r+0x1da>
 8005956:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005958:	06c3      	lsls	r3, r0, #27
 800595a:	f53f aefe 	bmi.w	800575a <__ssvfiscanf_r+0x4e>
 800595e:	9b00      	ldr	r3, [sp, #0]
 8005960:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005962:	1d19      	adds	r1, r3, #4
 8005964:	9100      	str	r1, [sp, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f010 0f01 	tst.w	r0, #1
 800596c:	bf14      	ite	ne
 800596e:	801a      	strhne	r2, [r3, #0]
 8005970:	601a      	streq	r2, [r3, #0]
 8005972:	e6f2      	b.n	800575a <__ssvfiscanf_r+0x4e>
 8005974:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005976:	4621      	mov	r1, r4
 8005978:	4630      	mov	r0, r6
 800597a:	4798      	blx	r3
 800597c:	2800      	cmp	r0, #0
 800597e:	d0b6      	beq.n	80058ee <__ssvfiscanf_r+0x1e2>
 8005980:	e79c      	b.n	80058bc <__ssvfiscanf_r+0x1b0>
 8005982:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005984:	3201      	adds	r2, #1
 8005986:	9245      	str	r2, [sp, #276]	; 0x114
 8005988:	6862      	ldr	r2, [r4, #4]
 800598a:	3a01      	subs	r2, #1
 800598c:	2a00      	cmp	r2, #0
 800598e:	6062      	str	r2, [r4, #4]
 8005990:	dd02      	ble.n	8005998 <__ssvfiscanf_r+0x28c>
 8005992:	3301      	adds	r3, #1
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	e7ad      	b.n	80058f4 <__ssvfiscanf_r+0x1e8>
 8005998:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800599a:	4621      	mov	r1, r4
 800599c:	4630      	mov	r0, r6
 800599e:	4798      	blx	r3
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d0a7      	beq.n	80058f4 <__ssvfiscanf_r+0x1e8>
 80059a4:	e78a      	b.n	80058bc <__ssvfiscanf_r+0x1b0>
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	dc0e      	bgt.n	80059c8 <__ssvfiscanf_r+0x2bc>
 80059aa:	466b      	mov	r3, sp
 80059ac:	4622      	mov	r2, r4
 80059ae:	a941      	add	r1, sp, #260	; 0x104
 80059b0:	4630      	mov	r0, r6
 80059b2:	f000 f87d 	bl	8005ab0 <_scanf_i>
 80059b6:	e7ab      	b.n	8005910 <__ssvfiscanf_r+0x204>
 80059b8:	08005659 	.word	0x08005659
 80059bc:	080056d3 	.word	0x080056d3
 80059c0:	08006234 	.word	0x08006234
 80059c4:	08006214 	.word	0x08006214
 80059c8:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <__ssvfiscanf_r+0x2ec>)
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f43f aec5 	beq.w	800575a <__ssvfiscanf_r+0x4e>
 80059d0:	466b      	mov	r3, sp
 80059d2:	4622      	mov	r2, r4
 80059d4:	a941      	add	r1, sp, #260	; 0x104
 80059d6:	4630      	mov	r0, r6
 80059d8:	f3af 8000 	nop.w
 80059dc:	e798      	b.n	8005910 <__ssvfiscanf_r+0x204>
 80059de:	89a3      	ldrh	r3, [r4, #12]
 80059e0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80059e4:	bf18      	it	ne
 80059e6:	f04f 30ff 	movne.w	r0, #4294967295
 80059ea:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80059ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80059f4:	e7f9      	b.n	80059ea <__ssvfiscanf_r+0x2de>
 80059f6:	bf00      	nop
 80059f8:	00000000 	.word	0x00000000

080059fc <_scanf_chars>:
 80059fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a00:	4615      	mov	r5, r2
 8005a02:	688a      	ldr	r2, [r1, #8]
 8005a04:	4680      	mov	r8, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	b932      	cbnz	r2, 8005a18 <_scanf_chars+0x1c>
 8005a0a:	698a      	ldr	r2, [r1, #24]
 8005a0c:	2a00      	cmp	r2, #0
 8005a0e:	bf0c      	ite	eq
 8005a10:	2201      	moveq	r2, #1
 8005a12:	f04f 32ff 	movne.w	r2, #4294967295
 8005a16:	608a      	str	r2, [r1, #8]
 8005a18:	6822      	ldr	r2, [r4, #0]
 8005a1a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005aac <_scanf_chars+0xb0>
 8005a1e:	06d1      	lsls	r1, r2, #27
 8005a20:	bf5f      	itttt	pl
 8005a22:	681a      	ldrpl	r2, [r3, #0]
 8005a24:	1d11      	addpl	r1, r2, #4
 8005a26:	6019      	strpl	r1, [r3, #0]
 8005a28:	6816      	ldrpl	r6, [r2, #0]
 8005a2a:	2700      	movs	r7, #0
 8005a2c:	69a0      	ldr	r0, [r4, #24]
 8005a2e:	b188      	cbz	r0, 8005a54 <_scanf_chars+0x58>
 8005a30:	2801      	cmp	r0, #1
 8005a32:	d107      	bne.n	8005a44 <_scanf_chars+0x48>
 8005a34:	682a      	ldr	r2, [r5, #0]
 8005a36:	7811      	ldrb	r1, [r2, #0]
 8005a38:	6962      	ldr	r2, [r4, #20]
 8005a3a:	5c52      	ldrb	r2, [r2, r1]
 8005a3c:	b952      	cbnz	r2, 8005a54 <_scanf_chars+0x58>
 8005a3e:	2f00      	cmp	r7, #0
 8005a40:	d031      	beq.n	8005aa6 <_scanf_chars+0xaa>
 8005a42:	e022      	b.n	8005a8a <_scanf_chars+0x8e>
 8005a44:	2802      	cmp	r0, #2
 8005a46:	d120      	bne.n	8005a8a <_scanf_chars+0x8e>
 8005a48:	682b      	ldr	r3, [r5, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005a50:	071b      	lsls	r3, r3, #28
 8005a52:	d41a      	bmi.n	8005a8a <_scanf_chars+0x8e>
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	06da      	lsls	r2, r3, #27
 8005a58:	bf5e      	ittt	pl
 8005a5a:	682b      	ldrpl	r3, [r5, #0]
 8005a5c:	781b      	ldrbpl	r3, [r3, #0]
 8005a5e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005a62:	682a      	ldr	r2, [r5, #0]
 8005a64:	686b      	ldr	r3, [r5, #4]
 8005a66:	3201      	adds	r2, #1
 8005a68:	602a      	str	r2, [r5, #0]
 8005a6a:	68a2      	ldr	r2, [r4, #8]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	3a01      	subs	r2, #1
 8005a70:	606b      	str	r3, [r5, #4]
 8005a72:	3701      	adds	r7, #1
 8005a74:	60a2      	str	r2, [r4, #8]
 8005a76:	b142      	cbz	r2, 8005a8a <_scanf_chars+0x8e>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	dcd7      	bgt.n	8005a2c <_scanf_chars+0x30>
 8005a7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005a80:	4629      	mov	r1, r5
 8005a82:	4640      	mov	r0, r8
 8005a84:	4798      	blx	r3
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d0d0      	beq.n	8005a2c <_scanf_chars+0x30>
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	f013 0310 	ands.w	r3, r3, #16
 8005a90:	d105      	bne.n	8005a9e <_scanf_chars+0xa2>
 8005a92:	68e2      	ldr	r2, [r4, #12]
 8005a94:	3201      	adds	r2, #1
 8005a96:	60e2      	str	r2, [r4, #12]
 8005a98:	69a2      	ldr	r2, [r4, #24]
 8005a9a:	b102      	cbz	r2, 8005a9e <_scanf_chars+0xa2>
 8005a9c:	7033      	strb	r3, [r6, #0]
 8005a9e:	6923      	ldr	r3, [r4, #16]
 8005aa0:	443b      	add	r3, r7
 8005aa2:	6123      	str	r3, [r4, #16]
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aaa:	bf00      	nop
 8005aac:	08006234 	.word	0x08006234

08005ab0 <_scanf_i>:
 8005ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab4:	4698      	mov	r8, r3
 8005ab6:	4b76      	ldr	r3, [pc, #472]	; (8005c90 <_scanf_i+0x1e0>)
 8005ab8:	460c      	mov	r4, r1
 8005aba:	4682      	mov	sl, r0
 8005abc:	4616      	mov	r6, r2
 8005abe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	ab03      	add	r3, sp, #12
 8005ac6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005aca:	4b72      	ldr	r3, [pc, #456]	; (8005c94 <_scanf_i+0x1e4>)
 8005acc:	69a1      	ldr	r1, [r4, #24]
 8005ace:	4a72      	ldr	r2, [pc, #456]	; (8005c98 <_scanf_i+0x1e8>)
 8005ad0:	2903      	cmp	r1, #3
 8005ad2:	bf18      	it	ne
 8005ad4:	461a      	movne	r2, r3
 8005ad6:	68a3      	ldr	r3, [r4, #8]
 8005ad8:	9201      	str	r2, [sp, #4]
 8005ada:	1e5a      	subs	r2, r3, #1
 8005adc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005ae0:	bf88      	it	hi
 8005ae2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005ae6:	4627      	mov	r7, r4
 8005ae8:	bf82      	ittt	hi
 8005aea:	eb03 0905 	addhi.w	r9, r3, r5
 8005aee:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005af2:	60a3      	strhi	r3, [r4, #8]
 8005af4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005af8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005afc:	bf98      	it	ls
 8005afe:	f04f 0900 	movls.w	r9, #0
 8005b02:	6023      	str	r3, [r4, #0]
 8005b04:	463d      	mov	r5, r7
 8005b06:	f04f 0b00 	mov.w	fp, #0
 8005b0a:	6831      	ldr	r1, [r6, #0]
 8005b0c:	ab03      	add	r3, sp, #12
 8005b0e:	7809      	ldrb	r1, [r1, #0]
 8005b10:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005b14:	2202      	movs	r2, #2
 8005b16:	f7fa fb73 	bl	8000200 <memchr>
 8005b1a:	b328      	cbz	r0, 8005b68 <_scanf_i+0xb8>
 8005b1c:	f1bb 0f01 	cmp.w	fp, #1
 8005b20:	d159      	bne.n	8005bd6 <_scanf_i+0x126>
 8005b22:	6862      	ldr	r2, [r4, #4]
 8005b24:	b92a      	cbnz	r2, 8005b32 <_scanf_i+0x82>
 8005b26:	6822      	ldr	r2, [r4, #0]
 8005b28:	2308      	movs	r3, #8
 8005b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b2e:	6063      	str	r3, [r4, #4]
 8005b30:	6022      	str	r2, [r4, #0]
 8005b32:	6822      	ldr	r2, [r4, #0]
 8005b34:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005b38:	6022      	str	r2, [r4, #0]
 8005b3a:	68a2      	ldr	r2, [r4, #8]
 8005b3c:	1e51      	subs	r1, r2, #1
 8005b3e:	60a1      	str	r1, [r4, #8]
 8005b40:	b192      	cbz	r2, 8005b68 <_scanf_i+0xb8>
 8005b42:	6832      	ldr	r2, [r6, #0]
 8005b44:	1c51      	adds	r1, r2, #1
 8005b46:	6031      	str	r1, [r6, #0]
 8005b48:	7812      	ldrb	r2, [r2, #0]
 8005b4a:	f805 2b01 	strb.w	r2, [r5], #1
 8005b4e:	6872      	ldr	r2, [r6, #4]
 8005b50:	3a01      	subs	r2, #1
 8005b52:	2a00      	cmp	r2, #0
 8005b54:	6072      	str	r2, [r6, #4]
 8005b56:	dc07      	bgt.n	8005b68 <_scanf_i+0xb8>
 8005b58:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005b5c:	4631      	mov	r1, r6
 8005b5e:	4650      	mov	r0, sl
 8005b60:	4790      	blx	r2
 8005b62:	2800      	cmp	r0, #0
 8005b64:	f040 8085 	bne.w	8005c72 <_scanf_i+0x1c2>
 8005b68:	f10b 0b01 	add.w	fp, fp, #1
 8005b6c:	f1bb 0f03 	cmp.w	fp, #3
 8005b70:	d1cb      	bne.n	8005b0a <_scanf_i+0x5a>
 8005b72:	6863      	ldr	r3, [r4, #4]
 8005b74:	b90b      	cbnz	r3, 8005b7a <_scanf_i+0xca>
 8005b76:	230a      	movs	r3, #10
 8005b78:	6063      	str	r3, [r4, #4]
 8005b7a:	6863      	ldr	r3, [r4, #4]
 8005b7c:	4947      	ldr	r1, [pc, #284]	; (8005c9c <_scanf_i+0x1ec>)
 8005b7e:	6960      	ldr	r0, [r4, #20]
 8005b80:	1ac9      	subs	r1, r1, r3
 8005b82:	f000 f8af 	bl	8005ce4 <__sccl>
 8005b86:	f04f 0b00 	mov.w	fp, #0
 8005b8a:	68a3      	ldr	r3, [r4, #8]
 8005b8c:	6822      	ldr	r2, [r4, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d03d      	beq.n	8005c0e <_scanf_i+0x15e>
 8005b92:	6831      	ldr	r1, [r6, #0]
 8005b94:	6960      	ldr	r0, [r4, #20]
 8005b96:	f891 c000 	ldrb.w	ip, [r1]
 8005b9a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d035      	beq.n	8005c0e <_scanf_i+0x15e>
 8005ba2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005ba6:	d124      	bne.n	8005bf2 <_scanf_i+0x142>
 8005ba8:	0510      	lsls	r0, r2, #20
 8005baa:	d522      	bpl.n	8005bf2 <_scanf_i+0x142>
 8005bac:	f10b 0b01 	add.w	fp, fp, #1
 8005bb0:	f1b9 0f00 	cmp.w	r9, #0
 8005bb4:	d003      	beq.n	8005bbe <_scanf_i+0x10e>
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	f109 39ff 	add.w	r9, r9, #4294967295
 8005bbc:	60a3      	str	r3, [r4, #8]
 8005bbe:	6873      	ldr	r3, [r6, #4]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	6073      	str	r3, [r6, #4]
 8005bc6:	dd1b      	ble.n	8005c00 <_scanf_i+0x150>
 8005bc8:	6833      	ldr	r3, [r6, #0]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	6033      	str	r3, [r6, #0]
 8005bce:	68a3      	ldr	r3, [r4, #8]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	60a3      	str	r3, [r4, #8]
 8005bd4:	e7d9      	b.n	8005b8a <_scanf_i+0xda>
 8005bd6:	f1bb 0f02 	cmp.w	fp, #2
 8005bda:	d1ae      	bne.n	8005b3a <_scanf_i+0x8a>
 8005bdc:	6822      	ldr	r2, [r4, #0]
 8005bde:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005be2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005be6:	d1bf      	bne.n	8005b68 <_scanf_i+0xb8>
 8005be8:	2310      	movs	r3, #16
 8005bea:	6063      	str	r3, [r4, #4]
 8005bec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bf0:	e7a2      	b.n	8005b38 <_scanf_i+0x88>
 8005bf2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005bf6:	6022      	str	r2, [r4, #0]
 8005bf8:	780b      	ldrb	r3, [r1, #0]
 8005bfa:	f805 3b01 	strb.w	r3, [r5], #1
 8005bfe:	e7de      	b.n	8005bbe <_scanf_i+0x10e>
 8005c00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005c04:	4631      	mov	r1, r6
 8005c06:	4650      	mov	r0, sl
 8005c08:	4798      	blx	r3
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	d0df      	beq.n	8005bce <_scanf_i+0x11e>
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	05db      	lsls	r3, r3, #23
 8005c12:	d50d      	bpl.n	8005c30 <_scanf_i+0x180>
 8005c14:	42bd      	cmp	r5, r7
 8005c16:	d909      	bls.n	8005c2c <_scanf_i+0x17c>
 8005c18:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005c1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c20:	4632      	mov	r2, r6
 8005c22:	4650      	mov	r0, sl
 8005c24:	4798      	blx	r3
 8005c26:	f105 39ff 	add.w	r9, r5, #4294967295
 8005c2a:	464d      	mov	r5, r9
 8005c2c:	42bd      	cmp	r5, r7
 8005c2e:	d02d      	beq.n	8005c8c <_scanf_i+0x1dc>
 8005c30:	6822      	ldr	r2, [r4, #0]
 8005c32:	f012 0210 	ands.w	r2, r2, #16
 8005c36:	d113      	bne.n	8005c60 <_scanf_i+0x1b0>
 8005c38:	702a      	strb	r2, [r5, #0]
 8005c3a:	6863      	ldr	r3, [r4, #4]
 8005c3c:	9e01      	ldr	r6, [sp, #4]
 8005c3e:	4639      	mov	r1, r7
 8005c40:	4650      	mov	r0, sl
 8005c42:	47b0      	blx	r6
 8005c44:	6821      	ldr	r1, [r4, #0]
 8005c46:	f8d8 3000 	ldr.w	r3, [r8]
 8005c4a:	f011 0f20 	tst.w	r1, #32
 8005c4e:	d013      	beq.n	8005c78 <_scanf_i+0x1c8>
 8005c50:	1d1a      	adds	r2, r3, #4
 8005c52:	f8c8 2000 	str.w	r2, [r8]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6018      	str	r0, [r3, #0]
 8005c5a:	68e3      	ldr	r3, [r4, #12]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	60e3      	str	r3, [r4, #12]
 8005c60:	1bed      	subs	r5, r5, r7
 8005c62:	44ab      	add	fp, r5
 8005c64:	6925      	ldr	r5, [r4, #16]
 8005c66:	445d      	add	r5, fp
 8005c68:	6125      	str	r5, [r4, #16]
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	b007      	add	sp, #28
 8005c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c72:	f04f 0b00 	mov.w	fp, #0
 8005c76:	e7ca      	b.n	8005c0e <_scanf_i+0x15e>
 8005c78:	1d1a      	adds	r2, r3, #4
 8005c7a:	f8c8 2000 	str.w	r2, [r8]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f011 0f01 	tst.w	r1, #1
 8005c84:	bf14      	ite	ne
 8005c86:	8018      	strhne	r0, [r3, #0]
 8005c88:	6018      	streq	r0, [r3, #0]
 8005c8a:	e7e6      	b.n	8005c5a <_scanf_i+0x1aa>
 8005c8c:	2001      	movs	r0, #1
 8005c8e:	e7ed      	b.n	8005c6c <_scanf_i+0x1bc>
 8005c90:	0800615c 	.word	0x0800615c
 8005c94:	08005f41 	.word	0x08005f41
 8005c98:	08005e59 	.word	0x08005e59
 8005c9c:	08006231 	.word	0x08006231

08005ca0 <_read_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	4d07      	ldr	r5, [pc, #28]	; (8005cc0 <_read_r+0x20>)
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	4608      	mov	r0, r1
 8005ca8:	4611      	mov	r1, r2
 8005caa:	2200      	movs	r2, #0
 8005cac:	602a      	str	r2, [r5, #0]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f7fb f8e6 	bl	8000e80 <_read>
 8005cb4:	1c43      	adds	r3, r0, #1
 8005cb6:	d102      	bne.n	8005cbe <_read_r+0x1e>
 8005cb8:	682b      	ldr	r3, [r5, #0]
 8005cba:	b103      	cbz	r3, 8005cbe <_read_r+0x1e>
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	bd38      	pop	{r3, r4, r5, pc}
 8005cc0:	200002c4 	.word	0x200002c4

08005cc4 <_sbrk_r>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	4d06      	ldr	r5, [pc, #24]	; (8005ce0 <_sbrk_r+0x1c>)
 8005cc8:	2300      	movs	r3, #0
 8005cca:	4604      	mov	r4, r0
 8005ccc:	4608      	mov	r0, r1
 8005cce:	602b      	str	r3, [r5, #0]
 8005cd0:	f7fb f928 	bl	8000f24 <_sbrk>
 8005cd4:	1c43      	adds	r3, r0, #1
 8005cd6:	d102      	bne.n	8005cde <_sbrk_r+0x1a>
 8005cd8:	682b      	ldr	r3, [r5, #0]
 8005cda:	b103      	cbz	r3, 8005cde <_sbrk_r+0x1a>
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	bd38      	pop	{r3, r4, r5, pc}
 8005ce0:	200002c4 	.word	0x200002c4

08005ce4 <__sccl>:
 8005ce4:	b570      	push	{r4, r5, r6, lr}
 8005ce6:	780b      	ldrb	r3, [r1, #0]
 8005ce8:	4604      	mov	r4, r0
 8005cea:	2b5e      	cmp	r3, #94	; 0x5e
 8005cec:	bf0b      	itete	eq
 8005cee:	784b      	ldrbeq	r3, [r1, #1]
 8005cf0:	1c48      	addne	r0, r1, #1
 8005cf2:	1c88      	addeq	r0, r1, #2
 8005cf4:	2200      	movne	r2, #0
 8005cf6:	bf08      	it	eq
 8005cf8:	2201      	moveq	r2, #1
 8005cfa:	1e61      	subs	r1, r4, #1
 8005cfc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005d00:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005d04:	42a9      	cmp	r1, r5
 8005d06:	d1fb      	bne.n	8005d00 <__sccl+0x1c>
 8005d08:	b90b      	cbnz	r3, 8005d0e <__sccl+0x2a>
 8005d0a:	3801      	subs	r0, #1
 8005d0c:	bd70      	pop	{r4, r5, r6, pc}
 8005d0e:	f082 0201 	eor.w	r2, r2, #1
 8005d12:	54e2      	strb	r2, [r4, r3]
 8005d14:	4605      	mov	r5, r0
 8005d16:	4628      	mov	r0, r5
 8005d18:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005d1c:	292d      	cmp	r1, #45	; 0x2d
 8005d1e:	d006      	beq.n	8005d2e <__sccl+0x4a>
 8005d20:	295d      	cmp	r1, #93	; 0x5d
 8005d22:	d0f3      	beq.n	8005d0c <__sccl+0x28>
 8005d24:	b909      	cbnz	r1, 8005d2a <__sccl+0x46>
 8005d26:	4628      	mov	r0, r5
 8005d28:	e7f0      	b.n	8005d0c <__sccl+0x28>
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	e7f1      	b.n	8005d12 <__sccl+0x2e>
 8005d2e:	786e      	ldrb	r6, [r5, #1]
 8005d30:	2e5d      	cmp	r6, #93	; 0x5d
 8005d32:	d0fa      	beq.n	8005d2a <__sccl+0x46>
 8005d34:	42b3      	cmp	r3, r6
 8005d36:	dcf8      	bgt.n	8005d2a <__sccl+0x46>
 8005d38:	3502      	adds	r5, #2
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	3101      	adds	r1, #1
 8005d3e:	428e      	cmp	r6, r1
 8005d40:	5462      	strb	r2, [r4, r1]
 8005d42:	dcfb      	bgt.n	8005d3c <__sccl+0x58>
 8005d44:	1af1      	subs	r1, r6, r3
 8005d46:	3901      	subs	r1, #1
 8005d48:	1c58      	adds	r0, r3, #1
 8005d4a:	42b3      	cmp	r3, r6
 8005d4c:	bfa8      	it	ge
 8005d4e:	2100      	movge	r1, #0
 8005d50:	1843      	adds	r3, r0, r1
 8005d52:	e7e0      	b.n	8005d16 <__sccl+0x32>

08005d54 <_strtol_l.constprop.0>:
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d5a:	d001      	beq.n	8005d60 <_strtol_l.constprop.0+0xc>
 8005d5c:	2b24      	cmp	r3, #36	; 0x24
 8005d5e:	d906      	bls.n	8005d6e <_strtol_l.constprop.0+0x1a>
 8005d60:	f7fe ff6c 	bl	8004c3c <__errno>
 8005d64:	2316      	movs	r3, #22
 8005d66:	6003      	str	r3, [r0, #0]
 8005d68:	2000      	movs	r0, #0
 8005d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d6e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005e54 <_strtol_l.constprop.0+0x100>
 8005d72:	460d      	mov	r5, r1
 8005d74:	462e      	mov	r6, r5
 8005d76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d7a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005d7e:	f017 0708 	ands.w	r7, r7, #8
 8005d82:	d1f7      	bne.n	8005d74 <_strtol_l.constprop.0+0x20>
 8005d84:	2c2d      	cmp	r4, #45	; 0x2d
 8005d86:	d132      	bne.n	8005dee <_strtol_l.constprop.0+0x9a>
 8005d88:	782c      	ldrb	r4, [r5, #0]
 8005d8a:	2701      	movs	r7, #1
 8005d8c:	1cb5      	adds	r5, r6, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d05b      	beq.n	8005e4a <_strtol_l.constprop.0+0xf6>
 8005d92:	2b10      	cmp	r3, #16
 8005d94:	d109      	bne.n	8005daa <_strtol_l.constprop.0+0x56>
 8005d96:	2c30      	cmp	r4, #48	; 0x30
 8005d98:	d107      	bne.n	8005daa <_strtol_l.constprop.0+0x56>
 8005d9a:	782c      	ldrb	r4, [r5, #0]
 8005d9c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005da0:	2c58      	cmp	r4, #88	; 0x58
 8005da2:	d14d      	bne.n	8005e40 <_strtol_l.constprop.0+0xec>
 8005da4:	786c      	ldrb	r4, [r5, #1]
 8005da6:	2310      	movs	r3, #16
 8005da8:	3502      	adds	r5, #2
 8005daa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005dae:	f108 38ff 	add.w	r8, r8, #4294967295
 8005db2:	f04f 0c00 	mov.w	ip, #0
 8005db6:	fbb8 f9f3 	udiv	r9, r8, r3
 8005dba:	4666      	mov	r6, ip
 8005dbc:	fb03 8a19 	mls	sl, r3, r9, r8
 8005dc0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005dc4:	f1be 0f09 	cmp.w	lr, #9
 8005dc8:	d816      	bhi.n	8005df8 <_strtol_l.constprop.0+0xa4>
 8005dca:	4674      	mov	r4, lr
 8005dcc:	42a3      	cmp	r3, r4
 8005dce:	dd24      	ble.n	8005e1a <_strtol_l.constprop.0+0xc6>
 8005dd0:	f1bc 0f00 	cmp.w	ip, #0
 8005dd4:	db1e      	blt.n	8005e14 <_strtol_l.constprop.0+0xc0>
 8005dd6:	45b1      	cmp	r9, r6
 8005dd8:	d31c      	bcc.n	8005e14 <_strtol_l.constprop.0+0xc0>
 8005dda:	d101      	bne.n	8005de0 <_strtol_l.constprop.0+0x8c>
 8005ddc:	45a2      	cmp	sl, r4
 8005dde:	db19      	blt.n	8005e14 <_strtol_l.constprop.0+0xc0>
 8005de0:	fb06 4603 	mla	r6, r6, r3, r4
 8005de4:	f04f 0c01 	mov.w	ip, #1
 8005de8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dec:	e7e8      	b.n	8005dc0 <_strtol_l.constprop.0+0x6c>
 8005dee:	2c2b      	cmp	r4, #43	; 0x2b
 8005df0:	bf04      	itt	eq
 8005df2:	782c      	ldrbeq	r4, [r5, #0]
 8005df4:	1cb5      	addeq	r5, r6, #2
 8005df6:	e7ca      	b.n	8005d8e <_strtol_l.constprop.0+0x3a>
 8005df8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005dfc:	f1be 0f19 	cmp.w	lr, #25
 8005e00:	d801      	bhi.n	8005e06 <_strtol_l.constprop.0+0xb2>
 8005e02:	3c37      	subs	r4, #55	; 0x37
 8005e04:	e7e2      	b.n	8005dcc <_strtol_l.constprop.0+0x78>
 8005e06:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005e0a:	f1be 0f19 	cmp.w	lr, #25
 8005e0e:	d804      	bhi.n	8005e1a <_strtol_l.constprop.0+0xc6>
 8005e10:	3c57      	subs	r4, #87	; 0x57
 8005e12:	e7db      	b.n	8005dcc <_strtol_l.constprop.0+0x78>
 8005e14:	f04f 3cff 	mov.w	ip, #4294967295
 8005e18:	e7e6      	b.n	8005de8 <_strtol_l.constprop.0+0x94>
 8005e1a:	f1bc 0f00 	cmp.w	ip, #0
 8005e1e:	da05      	bge.n	8005e2c <_strtol_l.constprop.0+0xd8>
 8005e20:	2322      	movs	r3, #34	; 0x22
 8005e22:	6003      	str	r3, [r0, #0]
 8005e24:	4646      	mov	r6, r8
 8005e26:	b942      	cbnz	r2, 8005e3a <_strtol_l.constprop.0+0xe6>
 8005e28:	4630      	mov	r0, r6
 8005e2a:	e79e      	b.n	8005d6a <_strtol_l.constprop.0+0x16>
 8005e2c:	b107      	cbz	r7, 8005e30 <_strtol_l.constprop.0+0xdc>
 8005e2e:	4276      	negs	r6, r6
 8005e30:	2a00      	cmp	r2, #0
 8005e32:	d0f9      	beq.n	8005e28 <_strtol_l.constprop.0+0xd4>
 8005e34:	f1bc 0f00 	cmp.w	ip, #0
 8005e38:	d000      	beq.n	8005e3c <_strtol_l.constprop.0+0xe8>
 8005e3a:	1e69      	subs	r1, r5, #1
 8005e3c:	6011      	str	r1, [r2, #0]
 8005e3e:	e7f3      	b.n	8005e28 <_strtol_l.constprop.0+0xd4>
 8005e40:	2430      	movs	r4, #48	; 0x30
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1b1      	bne.n	8005daa <_strtol_l.constprop.0+0x56>
 8005e46:	2308      	movs	r3, #8
 8005e48:	e7af      	b.n	8005daa <_strtol_l.constprop.0+0x56>
 8005e4a:	2c30      	cmp	r4, #48	; 0x30
 8005e4c:	d0a5      	beq.n	8005d9a <_strtol_l.constprop.0+0x46>
 8005e4e:	230a      	movs	r3, #10
 8005e50:	e7ab      	b.n	8005daa <_strtol_l.constprop.0+0x56>
 8005e52:	bf00      	nop
 8005e54:	08006234 	.word	0x08006234

08005e58 <_strtol_r>:
 8005e58:	f7ff bf7c 	b.w	8005d54 <_strtol_l.constprop.0>

08005e5c <_strtoul_l.constprop.0>:
 8005e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e60:	4f36      	ldr	r7, [pc, #216]	; (8005f3c <_strtoul_l.constprop.0+0xe0>)
 8005e62:	4686      	mov	lr, r0
 8005e64:	460d      	mov	r5, r1
 8005e66:	4628      	mov	r0, r5
 8005e68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e6c:	5de6      	ldrb	r6, [r4, r7]
 8005e6e:	f016 0608 	ands.w	r6, r6, #8
 8005e72:	d1f8      	bne.n	8005e66 <_strtoul_l.constprop.0+0xa>
 8005e74:	2c2d      	cmp	r4, #45	; 0x2d
 8005e76:	d12f      	bne.n	8005ed8 <_strtoul_l.constprop.0+0x7c>
 8005e78:	782c      	ldrb	r4, [r5, #0]
 8005e7a:	2601      	movs	r6, #1
 8005e7c:	1c85      	adds	r5, r0, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d057      	beq.n	8005f32 <_strtoul_l.constprop.0+0xd6>
 8005e82:	2b10      	cmp	r3, #16
 8005e84:	d109      	bne.n	8005e9a <_strtoul_l.constprop.0+0x3e>
 8005e86:	2c30      	cmp	r4, #48	; 0x30
 8005e88:	d107      	bne.n	8005e9a <_strtoul_l.constprop.0+0x3e>
 8005e8a:	7828      	ldrb	r0, [r5, #0]
 8005e8c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005e90:	2858      	cmp	r0, #88	; 0x58
 8005e92:	d149      	bne.n	8005f28 <_strtoul_l.constprop.0+0xcc>
 8005e94:	786c      	ldrb	r4, [r5, #1]
 8005e96:	2310      	movs	r3, #16
 8005e98:	3502      	adds	r5, #2
 8005e9a:	f04f 38ff 	mov.w	r8, #4294967295
 8005e9e:	2700      	movs	r7, #0
 8005ea0:	fbb8 f8f3 	udiv	r8, r8, r3
 8005ea4:	fb03 f908 	mul.w	r9, r3, r8
 8005ea8:	ea6f 0909 	mvn.w	r9, r9
 8005eac:	4638      	mov	r0, r7
 8005eae:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005eb2:	f1bc 0f09 	cmp.w	ip, #9
 8005eb6:	d814      	bhi.n	8005ee2 <_strtoul_l.constprop.0+0x86>
 8005eb8:	4664      	mov	r4, ip
 8005eba:	42a3      	cmp	r3, r4
 8005ebc:	dd22      	ble.n	8005f04 <_strtoul_l.constprop.0+0xa8>
 8005ebe:	2f00      	cmp	r7, #0
 8005ec0:	db1d      	blt.n	8005efe <_strtoul_l.constprop.0+0xa2>
 8005ec2:	4580      	cmp	r8, r0
 8005ec4:	d31b      	bcc.n	8005efe <_strtoul_l.constprop.0+0xa2>
 8005ec6:	d101      	bne.n	8005ecc <_strtoul_l.constprop.0+0x70>
 8005ec8:	45a1      	cmp	r9, r4
 8005eca:	db18      	blt.n	8005efe <_strtoul_l.constprop.0+0xa2>
 8005ecc:	fb00 4003 	mla	r0, r0, r3, r4
 8005ed0:	2701      	movs	r7, #1
 8005ed2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ed6:	e7ea      	b.n	8005eae <_strtoul_l.constprop.0+0x52>
 8005ed8:	2c2b      	cmp	r4, #43	; 0x2b
 8005eda:	bf04      	itt	eq
 8005edc:	782c      	ldrbeq	r4, [r5, #0]
 8005ede:	1c85      	addeq	r5, r0, #2
 8005ee0:	e7cd      	b.n	8005e7e <_strtoul_l.constprop.0+0x22>
 8005ee2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005ee6:	f1bc 0f19 	cmp.w	ip, #25
 8005eea:	d801      	bhi.n	8005ef0 <_strtoul_l.constprop.0+0x94>
 8005eec:	3c37      	subs	r4, #55	; 0x37
 8005eee:	e7e4      	b.n	8005eba <_strtoul_l.constprop.0+0x5e>
 8005ef0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005ef4:	f1bc 0f19 	cmp.w	ip, #25
 8005ef8:	d804      	bhi.n	8005f04 <_strtoul_l.constprop.0+0xa8>
 8005efa:	3c57      	subs	r4, #87	; 0x57
 8005efc:	e7dd      	b.n	8005eba <_strtoul_l.constprop.0+0x5e>
 8005efe:	f04f 37ff 	mov.w	r7, #4294967295
 8005f02:	e7e6      	b.n	8005ed2 <_strtoul_l.constprop.0+0x76>
 8005f04:	2f00      	cmp	r7, #0
 8005f06:	da07      	bge.n	8005f18 <_strtoul_l.constprop.0+0xbc>
 8005f08:	2322      	movs	r3, #34	; 0x22
 8005f0a:	f8ce 3000 	str.w	r3, [lr]
 8005f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f12:	b932      	cbnz	r2, 8005f22 <_strtoul_l.constprop.0+0xc6>
 8005f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f18:	b106      	cbz	r6, 8005f1c <_strtoul_l.constprop.0+0xc0>
 8005f1a:	4240      	negs	r0, r0
 8005f1c:	2a00      	cmp	r2, #0
 8005f1e:	d0f9      	beq.n	8005f14 <_strtoul_l.constprop.0+0xb8>
 8005f20:	b107      	cbz	r7, 8005f24 <_strtoul_l.constprop.0+0xc8>
 8005f22:	1e69      	subs	r1, r5, #1
 8005f24:	6011      	str	r1, [r2, #0]
 8005f26:	e7f5      	b.n	8005f14 <_strtoul_l.constprop.0+0xb8>
 8005f28:	2430      	movs	r4, #48	; 0x30
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1b5      	bne.n	8005e9a <_strtoul_l.constprop.0+0x3e>
 8005f2e:	2308      	movs	r3, #8
 8005f30:	e7b3      	b.n	8005e9a <_strtoul_l.constprop.0+0x3e>
 8005f32:	2c30      	cmp	r4, #48	; 0x30
 8005f34:	d0a9      	beq.n	8005e8a <_strtoul_l.constprop.0+0x2e>
 8005f36:	230a      	movs	r3, #10
 8005f38:	e7af      	b.n	8005e9a <_strtoul_l.constprop.0+0x3e>
 8005f3a:	bf00      	nop
 8005f3c:	08006234 	.word	0x08006234

08005f40 <_strtoul_r>:
 8005f40:	f7ff bf8c 	b.w	8005e5c <_strtoul_l.constprop.0>

08005f44 <__submore>:
 8005f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f48:	460c      	mov	r4, r1
 8005f4a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005f4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f50:	4299      	cmp	r1, r3
 8005f52:	d11d      	bne.n	8005f90 <__submore+0x4c>
 8005f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f58:	f7ff fb0a 	bl	8005570 <_malloc_r>
 8005f5c:	b918      	cbnz	r0, 8005f66 <__submore+0x22>
 8005f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f6a:	63a3      	str	r3, [r4, #56]	; 0x38
 8005f6c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005f70:	6360      	str	r0, [r4, #52]	; 0x34
 8005f72:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005f76:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005f7a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005f7e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005f82:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005f86:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005f8a:	6020      	str	r0, [r4, #0]
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	e7e8      	b.n	8005f62 <__submore+0x1e>
 8005f90:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005f92:	0077      	lsls	r7, r6, #1
 8005f94:	463a      	mov	r2, r7
 8005f96:	f000 f84b 	bl	8006030 <_realloc_r>
 8005f9a:	4605      	mov	r5, r0
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d0de      	beq.n	8005f5e <__submore+0x1a>
 8005fa0:	eb00 0806 	add.w	r8, r0, r6
 8005fa4:	4601      	mov	r1, r0
 8005fa6:	4632      	mov	r2, r6
 8005fa8:	4640      	mov	r0, r8
 8005faa:	f000 f827 	bl	8005ffc <memcpy>
 8005fae:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005fb2:	f8c4 8000 	str.w	r8, [r4]
 8005fb6:	e7e9      	b.n	8005f8c <__submore+0x48>

08005fb8 <_fstat_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	4d07      	ldr	r5, [pc, #28]	; (8005fd8 <_fstat_r+0x20>)
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	4608      	mov	r0, r1
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	602b      	str	r3, [r5, #0]
 8005fc6:	f7fa ff84 	bl	8000ed2 <_fstat>
 8005fca:	1c43      	adds	r3, r0, #1
 8005fcc:	d102      	bne.n	8005fd4 <_fstat_r+0x1c>
 8005fce:	682b      	ldr	r3, [r5, #0]
 8005fd0:	b103      	cbz	r3, 8005fd4 <_fstat_r+0x1c>
 8005fd2:	6023      	str	r3, [r4, #0]
 8005fd4:	bd38      	pop	{r3, r4, r5, pc}
 8005fd6:	bf00      	nop
 8005fd8:	200002c4 	.word	0x200002c4

08005fdc <_isatty_r>:
 8005fdc:	b538      	push	{r3, r4, r5, lr}
 8005fde:	4d06      	ldr	r5, [pc, #24]	; (8005ff8 <_isatty_r+0x1c>)
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	4608      	mov	r0, r1
 8005fe6:	602b      	str	r3, [r5, #0]
 8005fe8:	f7fa ff83 	bl	8000ef2 <_isatty>
 8005fec:	1c43      	adds	r3, r0, #1
 8005fee:	d102      	bne.n	8005ff6 <_isatty_r+0x1a>
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	b103      	cbz	r3, 8005ff6 <_isatty_r+0x1a>
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	bd38      	pop	{r3, r4, r5, pc}
 8005ff8:	200002c4 	.word	0x200002c4

08005ffc <memcpy>:
 8005ffc:	440a      	add	r2, r1
 8005ffe:	4291      	cmp	r1, r2
 8006000:	f100 33ff 	add.w	r3, r0, #4294967295
 8006004:	d100      	bne.n	8006008 <memcpy+0xc>
 8006006:	4770      	bx	lr
 8006008:	b510      	push	{r4, lr}
 800600a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800600e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006012:	4291      	cmp	r1, r2
 8006014:	d1f9      	bne.n	800600a <memcpy+0xe>
 8006016:	bd10      	pop	{r4, pc}

08006018 <__malloc_lock>:
 8006018:	4801      	ldr	r0, [pc, #4]	; (8006020 <__malloc_lock+0x8>)
 800601a:	f7ff b9c3 	b.w	80053a4 <__retarget_lock_acquire_recursive>
 800601e:	bf00      	nop
 8006020:	200002b8 	.word	0x200002b8

08006024 <__malloc_unlock>:
 8006024:	4801      	ldr	r0, [pc, #4]	; (800602c <__malloc_unlock+0x8>)
 8006026:	f7ff b9be 	b.w	80053a6 <__retarget_lock_release_recursive>
 800602a:	bf00      	nop
 800602c:	200002b8 	.word	0x200002b8

08006030 <_realloc_r>:
 8006030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006034:	4680      	mov	r8, r0
 8006036:	4614      	mov	r4, r2
 8006038:	460e      	mov	r6, r1
 800603a:	b921      	cbnz	r1, 8006046 <_realloc_r+0x16>
 800603c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006040:	4611      	mov	r1, r2
 8006042:	f7ff ba95 	b.w	8005570 <_malloc_r>
 8006046:	b92a      	cbnz	r2, 8006054 <_realloc_r+0x24>
 8006048:	f7ff fa26 	bl	8005498 <_free_r>
 800604c:	4625      	mov	r5, r4
 800604e:	4628      	mov	r0, r5
 8006050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006054:	f000 f81b 	bl	800608e <_malloc_usable_size_r>
 8006058:	4284      	cmp	r4, r0
 800605a:	4607      	mov	r7, r0
 800605c:	d802      	bhi.n	8006064 <_realloc_r+0x34>
 800605e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006062:	d812      	bhi.n	800608a <_realloc_r+0x5a>
 8006064:	4621      	mov	r1, r4
 8006066:	4640      	mov	r0, r8
 8006068:	f7ff fa82 	bl	8005570 <_malloc_r>
 800606c:	4605      	mov	r5, r0
 800606e:	2800      	cmp	r0, #0
 8006070:	d0ed      	beq.n	800604e <_realloc_r+0x1e>
 8006072:	42bc      	cmp	r4, r7
 8006074:	4622      	mov	r2, r4
 8006076:	4631      	mov	r1, r6
 8006078:	bf28      	it	cs
 800607a:	463a      	movcs	r2, r7
 800607c:	f7ff ffbe 	bl	8005ffc <memcpy>
 8006080:	4631      	mov	r1, r6
 8006082:	4640      	mov	r0, r8
 8006084:	f7ff fa08 	bl	8005498 <_free_r>
 8006088:	e7e1      	b.n	800604e <_realloc_r+0x1e>
 800608a:	4635      	mov	r5, r6
 800608c:	e7df      	b.n	800604e <_realloc_r+0x1e>

0800608e <_malloc_usable_size_r>:
 800608e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006092:	1f18      	subs	r0, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	bfbc      	itt	lt
 8006098:	580b      	ldrlt	r3, [r1, r0]
 800609a:	18c0      	addlt	r0, r0, r3
 800609c:	4770      	bx	lr
	...

080060a0 <_init>:
 80060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a2:	bf00      	nop
 80060a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a6:	bc08      	pop	{r3}
 80060a8:	469e      	mov	lr, r3
 80060aa:	4770      	bx	lr

080060ac <_fini>:
 80060ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ae:	bf00      	nop
 80060b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b2:	bc08      	pop	{r3}
 80060b4:	469e      	mov	lr, r3
 80060b6:	4770      	bx	lr
