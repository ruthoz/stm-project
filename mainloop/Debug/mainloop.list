
mainloop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08006bec  08006bec  00016bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006df4  08006df4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006df4  08006df4  00016df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dfc  08006dfc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dfc  08006dfc  00016dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e00  08006e00  00016e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000070  08006e74  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08006e74  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e2f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027cc  00000000  00000000  00032ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  000356a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00036748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028314  00000000  00000000  000376e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013721  00000000  00000000  0005f9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5f07  00000000  00000000  0007311d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169024  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f18  00000000  00000000  00169074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006bd4 	.word	0x08006bd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006bd4 	.word	0x08006bd4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <buttonInit>:

extern LED ledR;
extern LED ledB;

void buttonInit(BUTTON* button , GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	4613      	mov	r3, r2
 80005b0:	80fb      	strh	r3, [r7, #6]
	button->state = BUTTON_UP;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
	button->timetick = 0 ;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	2200      	movs	r2, #0
 80005bc:	605a      	str	r2, [r3, #4]
	button->GPIOx = GPIOx;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	68ba      	ldr	r2, [r7, #8]
 80005c2:	609a      	str	r2, [r3, #8]
	button->GPIO_Pin = GPIO_Pin;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	88fa      	ldrh	r2, [r7, #6]
 80005c8:	819a      	strh	r2, [r3, #12]
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
	...

080005d8 <buttonInterrupt>:


void buttonInterrupt(BUTTON* button)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	if(button->state == BUTTON_DOWN)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d115      	bne.n	8000614 <buttonInterrupt+0x3c>
	{
		button->state = BUTTON_UP;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
		if(HAL_GetTick()- button->timetick <= 500)
 80005ee:	f000 fe31 	bl	8001254 <HAL_GetTick>
 80005f2:	4602      	mov	r2, r0
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005fe:	d803      	bhi.n	8000608 <buttonInterrupt+0x30>
		{
			ledOff(&ledB);
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <buttonInterrupt+0x60>)
 8000602:	f000 f847 	bl	8000694 <ledOff>
	{
		button->state = BUTTON_DOWN;
		button->timetick = HAL_GetTick();
	}

}
 8000606:	e012      	b.n	800062e <buttonInterrupt+0x56>
			 ledBlink( &ledB, 300);
 8000608:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800060c:	480a      	ldr	r0, [pc, #40]	; (8000638 <buttonInterrupt+0x60>)
 800060e:	f000 f854 	bl	80006ba <ledBlink>
}
 8000612:	e00c      	b.n	800062e <buttonInterrupt+0x56>
	else if(button->state == BUTTON_UP)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d108      	bne.n	800062e <buttonInterrupt+0x56>
		button->state = BUTTON_DOWN;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2201      	movs	r2, #1
 8000620:	701a      	strb	r2, [r3, #0]
		button->timetick = HAL_GetTick();
 8000622:	f000 fe17 	bl	8001254 <HAL_GetTick>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	605a      	str	r2, [r3, #4]
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200001bc 	.word	0x200001bc

0800063c <ledInit>:
#include "led.h"

void ledInit(LED* led , GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	4613      	mov	r3, r2
 8000648:	80fb      	strh	r3, [r7, #6]
 led->state = STATE_OFF;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
 led->counter = 0 ;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
 led->GPIOx = GPIOx;
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	68ba      	ldr	r2, [r7, #8]
 800065a:	609a      	str	r2, [r3, #8]
 led->GPIO_Pin = GPIO_Pin;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	88fa      	ldrh	r2, [r7, #6]
 8000660:	819a      	strh	r2, [r3, #12]
}
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <ledOn>:

void ledOn(LED* led)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
	led->state = STATE_ON;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2201      	movs	r2, #1
 800067a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 1);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6898      	ldr	r0, [r3, #8]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	899b      	ldrh	r3, [r3, #12]
 8000684:	2201      	movs	r2, #1
 8000686:	4619      	mov	r1, r3
 8000688:	f001 f92a 	bl	80018e0 <HAL_GPIO_WritePin>
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <ledOff>:

void ledOff(LED* led)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	led->state = STATE_OFF;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 0);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6898      	ldr	r0, [r3, #8]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	899b      	ldrh	r3, [r3, #12]
 80006aa:	2200      	movs	r2, #0
 80006ac:	4619      	mov	r1, r3
 80006ae:	f001 f917 	bl	80018e0 <HAL_GPIO_WritePin>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <ledBlink>:
void ledBlink(LED* led, int period)
{
 80006ba:	b480      	push	{r7}
 80006bc:	b083      	sub	sp, #12
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	6039      	str	r1, [r7, #0]
	led->state = STATE_BLINKING;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2202      	movs	r2, #2
 80006c8:	701a      	strb	r2, [r3, #0]
	led->period = period;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	683a      	ldr	r2, [r7, #0]
 80006ce:	611a      	str	r2, [r3, #16]
	led->counter = 0;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2200      	movs	r2, #0
 80006d4:	605a      	str	r2, [r3, #4]
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <ledOnTimerInterrupt>:
void ledOnTimerInterrupt(LED* led)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b082      	sub	sp, #8
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
	if(led->state == STATE_BLINKING)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d115      	bne.n	800071e <ledOnTimerInterrupt+0x3c>
	{
		led->counter++;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	1c5a      	adds	r2, r3, #1
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	605a      	str	r2, [r3, #4]
		if((led->counter) >= (led->period) )
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	685a      	ldr	r2, [r3, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	691b      	ldr	r3, [r3, #16]
 8000704:	429a      	cmp	r2, r3
 8000706:	db0a      	blt.n	800071e <ledOnTimerInterrupt+0x3c>
		{
			HAL_GPIO_TogglePin(led->GPIOx, led->GPIO_Pin);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	689a      	ldr	r2, [r3, #8]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	899b      	ldrh	r3, [r3, #12]
 8000710:	4619      	mov	r1, r3
 8000712:	4610      	mov	r0, r2
 8000714:	f001 f8fc 	bl	8001910 <HAL_GPIO_TogglePin>
			led->counter = 0;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]

		}
	}
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
////////////////////////////////////////////////////////////////////////
int _write(int fd, char* ptr, int len)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	b29a      	uxth	r2, r3
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <_write+0x28>)
 8000740:	f003 fe9a 	bl	8004478 <HAL_UART_Transmit>
	return len;
 8000744:	687b      	ldr	r3, [r7, #4]
}
 8000746:	4618      	mov	r0, r3
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000124 	.word	0x20000124

08000754 <HAL_TIM_PeriodElapsedCallback>:
//////////////////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d103      	bne.n	800076c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
	  ledOnTimerInterrupt(&ledB);
 8000764:	4806      	ldr	r0, [pc, #24]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000766:	f7ff ffbc 	bl	80006e2 <ledOnTimerInterrupt>
	else
	{
	  ledOn(&ledR);
	}

}
 800076a:	e002      	b.n	8000772 <HAL_TIM_PeriodElapsedCallback+0x1e>
	  ledOn(&ledR);
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800076e:	f7ff ff7e 	bl	800066e <ledOn>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000d8 	.word	0x200000d8
 8000780:	200001bc 	.word	0x200001bc
 8000784:	200001a8 	.word	0x200001a8

08000788 <HAL_GPIO_EXTI_Callback>:
/////////////////////////////////////////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	80fb      	strh	r3, [r7, #6]
	buttonInterrupt(&button1);
 8000792:	4803      	ldr	r0, [pc, #12]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x18>)
 8000794:	f7ff ff20 	bl	80005d8 <buttonInterrupt>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200001d0 	.word	0x200001d0

080007a4 <HAL_TIM_PWM_PulseFinishedCallback>:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	ledOff(&ledR);
 80007ac:	4803      	ldr	r0, [pc, #12]	; (80007bc <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 80007ae:	f7ff ff71 	bl	8000694 <ledOff>
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200001a8 	.word	0x200001a8

080007c0 <setBrightness>:

/////////////////////////////////////////////////////////////////////

void setBrightness(int brightness)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	if(brightness > 10 )
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b0a      	cmp	r3, #10
 80007cc:	dd03      	ble.n	80007d6 <setBrightness+0x16>
	{
		printf("Invalid command\r\n");
 80007ce:	480d      	ldr	r0, [pc, #52]	; (8000804 <setBrightness+0x44>)
 80007d0:	f005 f86e 	bl	80058b0 <puts>
		return;
 80007d4:	e012      	b.n	80007fc <setBrightness+0x3c>
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightness*10);
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	4613      	mov	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <setBrightness+0x48>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_Base_Stop_IT(&htim6);
 80007e8:	4808      	ldr	r0, [pc, #32]	; (800080c <setBrightness+0x4c>)
 80007ea:	f002 fcab 	bl	8003144 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 80007ee:	4806      	ldr	r0, [pc, #24]	; (8000808 <setBrightness+0x48>)
 80007f0:	f002 fc38 	bl	8003064 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 80007f4:	2100      	movs	r1, #0
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <setBrightness+0x48>)
 80007f8:	f002 fd2a 	bl	8003250 <HAL_TIM_PWM_Start_IT>
}
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	08006bec 	.word	0x08006bec
 8000808:	2000008c 	.word	0x2000008c
 800080c:	200000d8 	.word	0x200000d8

08000810 <commTask>:
uint8_t cmdbuffer[MAX_BUFFER_LENGTH];
int cmdcount = 0;
int cmdprint = 0;

int commTask()
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8000816:	1db9      	adds	r1, r7, #6
 8000818:	230a      	movs	r3, #10
 800081a:	2201      	movs	r2, #1
 800081c:	4836      	ldr	r0, [pc, #216]	; (80008f8 <commTask+0xe8>)
 800081e:	f003 febf 	bl	80045a0 <HAL_UART_Receive>
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d020      	beq.n	800086e <commTask+0x5e>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 800082c:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <commTask+0xe8>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f003 0308 	and.w	r3, r3, #8
 8000836:	2b00      	cmp	r3, #0
 8000838:	d011      	beq.n	800085e <commTask+0x4e>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 800083a:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <commTask+0xe8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2208      	movs	r2, #8
 8000840:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 8000842:	e00c      	b.n	800085e <commTask+0x4e>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000844:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <commTask+0xec>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	1c5a      	adds	r2, r3, #1
 800084a:	492c      	ldr	r1, [pc, #176]	; (80008fc <commTask+0xec>)
 800084c:	600a      	str	r2, [r1, #0]
 800084e:	4a2c      	ldr	r2, [pc, #176]	; (8000900 <commTask+0xf0>)
 8000850:	1899      	adds	r1, r3, r2
 8000852:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000856:	2201      	movs	r2, #1
 8000858:	4827      	ldr	r0, [pc, #156]	; (80008f8 <commTask+0xe8>)
 800085a:	f003 fe0d 	bl	8004478 <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 800085e:	4b27      	ldr	r3, [pc, #156]	; (80008fc <commTask+0xec>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	4b28      	ldr	r3, [pc, #160]	; (8000904 <commTask+0xf4>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	429a      	cmp	r2, r3
 8000868:	dbec      	blt.n	8000844 <commTask+0x34>
		}

		return 0;
 800086a:	2300      	movs	r3, #0
 800086c:	e03f      	b.n	80008ee <commTask+0xde>
	}

	if (ch != '\r' && ch != '\n')
 800086e:	79bb      	ldrb	r3, [r7, #6]
 8000870:	2b0d      	cmp	r3, #13
 8000872:	d023      	beq.n	80008bc <commTask+0xac>
 8000874:	79bb      	ldrb	r3, [r7, #6]
 8000876:	2b0a      	cmp	r3, #10
 8000878:	d020      	beq.n	80008bc <commTask+0xac>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 800087a:	4b22      	ldr	r3, [pc, #136]	; (8000904 <commTask+0xf4>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b63      	cmp	r3, #99	; 0x63
 8000880:	dd05      	ble.n	800088e <commTask+0x7e>
		{
			cmdcount = 0;
 8000882:	4b20      	ldr	r3, [pc, #128]	; (8000904 <commTask+0xf4>)
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <commTask+0xec>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <commTask+0xf4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	491b      	ldr	r1, [pc, #108]	; (8000904 <commTask+0xf4>)
 8000896:	600a      	str	r2, [r1, #0]
 8000898:	79b9      	ldrb	r1, [r7, #6]
 800089a:	4a19      	ldr	r2, [pc, #100]	; (8000900 <commTask+0xf0>)
 800089c:	54d1      	strb	r1, [r2, r3]
		return 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	e025      	b.n	80008ee <commTask+0xde>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount)
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <commTask+0xec>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	4914      	ldr	r1, [pc, #80]	; (80008fc <commTask+0xec>)
 80008aa:	600a      	str	r2, [r1, #0]
 80008ac:	4a14      	ldr	r2, [pc, #80]	; (8000900 <commTask+0xf0>)
 80008ae:	1899      	adds	r1, r3, r2
 80008b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008b4:	2201      	movs	r2, #1
 80008b6:	4810      	ldr	r0, [pc, #64]	; (80008f8 <commTask+0xe8>)
 80008b8:	f003 fdde 	bl	8004478 <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <commTask+0xec>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b10      	ldr	r3, [pc, #64]	; (8000904 <commTask+0xf4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	dbec      	blt.n	80008a2 <commTask+0x92>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 80008c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008cc:	2202      	movs	r2, #2
 80008ce:	490e      	ldr	r1, [pc, #56]	; (8000908 <commTask+0xf8>)
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <commTask+0xe8>)
 80008d2:	f003 fdd1 	bl	8004478 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <commTask+0xf4>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a09      	ldr	r2, [pc, #36]	; (8000900 <commTask+0xf0>)
 80008dc:	2100      	movs	r1, #0
 80008de:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <commTask+0xf4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <commTask+0xec>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
	return 1;
 80008ec:	2301      	movs	r3, #1
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000124 	.word	0x20000124
 80008fc:	20000248 	.word	0x20000248
 8000900:	200001e0 	.word	0x200001e0
 8000904:	20000244 	.word	0x20000244
 8000908:	08006c00 	.word	0x08006c00

0800090c <handleCommand>:

void handleCommand()
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
  char cmd[20];
  int brightness;

  int params = sscanf((const char*)cmdbuffer, "%s %d", cmd, &brightness);
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	f107 0208 	add.w	r2, r7, #8
 8000918:	491f      	ldr	r1, [pc, #124]	; (8000998 <handleCommand+0x8c>)
 800091a:	4820      	ldr	r0, [pc, #128]	; (800099c <handleCommand+0x90>)
 800091c:	f004 ffd0 	bl	80058c0 <siscanf>
 8000920:	61f8      	str	r0, [r7, #28]

  if (params == 0)
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d033      	beq.n	8000990 <handleCommand+0x84>
  {
	  return;
  }

  if (strcmp(cmd, "off") == 0)
 8000928:	f107 0308 	add.w	r3, r7, #8
 800092c:	491c      	ldr	r1, [pc, #112]	; (80009a0 <handleCommand+0x94>)
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fc4e 	bl	80001d0 <strcmp>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d107      	bne.n	800094a <handleCommand+0x3e>
  {
	  HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_1);
 800093a:	2100      	movs	r1, #0
 800093c:	4819      	ldr	r0, [pc, #100]	; (80009a4 <handleCommand+0x98>)
 800093e:	f002 fddb 	bl	80034f8 <HAL_TIM_PWM_Stop_IT>
	  ledOff(&ledR);
 8000942:	4819      	ldr	r0, [pc, #100]	; (80009a8 <handleCommand+0x9c>)
 8000944:	f7ff fea6 	bl	8000694 <ledOff>
 8000948:	e023      	b.n	8000992 <handleCommand+0x86>
  }
  else if (strcmp(cmd, "on") == 0)
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	4917      	ldr	r1, [pc, #92]	; (80009ac <handleCommand+0xa0>)
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fc3d 	bl	80001d0 <strcmp>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d107      	bne.n	800096c <handleCommand+0x60>
  {
	  HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_1);
 800095c:	2100      	movs	r1, #0
 800095e:	4811      	ldr	r0, [pc, #68]	; (80009a4 <handleCommand+0x98>)
 8000960:	f002 fdca 	bl	80034f8 <HAL_TIM_PWM_Stop_IT>
	  ledOn(&ledR);
 8000964:	4810      	ldr	r0, [pc, #64]	; (80009a8 <handleCommand+0x9c>)
 8000966:	f7ff fe82 	bl	800066e <ledOn>
 800096a:	e012      	b.n	8000992 <handleCommand+0x86>
  }
  else if (strcmp(cmd, "bright") == 0)
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	490f      	ldr	r1, [pc, #60]	; (80009b0 <handleCommand+0xa4>)
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fc2c 	bl	80001d0 <strcmp>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d104      	bne.n	8000988 <handleCommand+0x7c>
  {
	  setBrightness(brightness);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff1d 	bl	80007c0 <setBrightness>
 8000986:	e004      	b.n	8000992 <handleCommand+0x86>
  }


  else
  {
	  printf("Invalid command\r\n");
 8000988:	480a      	ldr	r0, [pc, #40]	; (80009b4 <handleCommand+0xa8>)
 800098a:	f004 ff91 	bl	80058b0 <puts>
 800098e:	e000      	b.n	8000992 <handleCommand+0x86>
	  return;
 8000990:	bf00      	nop
  }
}
 8000992:	3720      	adds	r7, #32
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	08006c04 	.word	0x08006c04
 800099c:	200001e0 	.word	0x200001e0
 80009a0:	08006c0c 	.word	0x08006c0c
 80009a4:	2000008c 	.word	0x2000008c
 80009a8:	200001a8 	.word	0x200001a8
 80009ac:	08006c10 	.word	0x08006c10
 80009b0:	08006c14 	.word	0x08006c14
 80009b4:	08006bec 	.word	0x08006bec

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009bc:	f000 fbda 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c0:	f000 f832 	bl	8000a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c4:	f000 f940 	bl	8000c48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009c8:	f000 f90e 	bl	8000be8 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80009cc:	f000 f8d6 	bl	8000b7c <MX_TIM6_Init>
  MX_TIM4_Init();
 80009d0:	f000 f87c 	bl	8000acc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_SET_COUNTER(&htim6, 0);
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <main+0x60>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start_IT(&htim6);
 80009dc:	480e      	ldr	r0, [pc, #56]	; (8000a18 <main+0x60>)
 80009de:	f002 fb41 	bl	8003064 <HAL_TIM_Base_Start_IT>
  ledInit(&ledB , LD2_GPIO_Port , LD2_Pin );
 80009e2:	2220      	movs	r2, #32
 80009e4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <main+0x64>)
 80009ea:	f7ff fe27 	bl	800063c <ledInit>
  ledInit(&ledR , LD3_GPIO_Port , LD3_Pin );
 80009ee:	2240      	movs	r2, #64	; 0x40
 80009f0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80009f4:	480a      	ldr	r0, [pc, #40]	; (8000a20 <main+0x68>)
 80009f6:	f7ff fe21 	bl	800063c <ledInit>
  buttonInit(&button1, B2_GPIO_Port ,  B2_Pin);
 80009fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009fe:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000a02:	4808      	ldr	r0, [pc, #32]	; (8000a24 <main+0x6c>)
 8000a04:	f7ff fdce 	bl	80005a4 <buttonInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (commTask())
 8000a08:	f7ff ff02 	bl	8000810 <commTask>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d0fa      	beq.n	8000a08 <main+0x50>
	  	  {
	  		  handleCommand();
 8000a12:	f7ff ff7b 	bl	800090c <handleCommand>
	  if (commTask())
 8000a16:	e7f7      	b.n	8000a08 <main+0x50>
 8000a18:	200000d8 	.word	0x200000d8
 8000a1c:	200001bc 	.word	0x200001bc
 8000a20:	200001a8 	.word	0x200001a8
 8000a24:	200001d0 	.word	0x200001d0

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b096      	sub	sp, #88	; 0x58
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	2244      	movs	r2, #68	; 0x44
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f004 fec4 	bl	80057c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a4a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a4e:	f000 ff9f 	bl	8001990 <HAL_PWREx_ControlVoltageScaling>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a58:	f000 f974 	bl	8000d44 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a64:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a66:	2310      	movs	r3, #16
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a76:	230a      	movs	r3, #10
 8000a78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a7a:	2307      	movs	r3, #7
 8000a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 ffd6 	bl	8001a3c <HAL_RCC_OscConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a96:	f000 f955 	bl	8000d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aae:	463b      	mov	r3, r7
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fb9e 	bl	80021f4 <HAL_RCC_ClockConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000abe:	f000 f941 	bl	8000d44 <Error_Handler>
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3758      	adds	r7, #88	; 0x58
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
 8000aec:	615a      	str	r2, [r3, #20]
 8000aee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <MX_TIM4_Init+0xa8>)
 8000af2:	4a21      	ldr	r2, [pc, #132]	; (8000b78 <MX_TIM4_Init+0xac>)
 8000af4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <MX_TIM4_Init+0xa8>)
 8000af8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000afc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <MX_TIM4_Init+0xa8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000b04:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <MX_TIM4_Init+0xa8>)
 8000b06:	2264      	movs	r2, #100	; 0x64
 8000b08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <MX_TIM4_Init+0xa8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <MX_TIM4_Init+0xa8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b16:	4817      	ldr	r0, [pc, #92]	; (8000b74 <MX_TIM4_Init+0xa8>)
 8000b18:	f002 fb43 	bl	80031a2 <HAL_TIM_PWM_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000b22:	f000 f90f 	bl	8000d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	480f      	ldr	r0, [pc, #60]	; (8000b74 <MX_TIM4_Init+0xa8>)
 8000b36:	f003 fbab 	bl	8004290 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000b40:	f000 f900 	bl	8000d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b44:	2360      	movs	r3, #96	; 0x60
 8000b46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30;
 8000b48:	231e      	movs	r3, #30
 8000b4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b54:	463b      	mov	r3, r7
 8000b56:	2200      	movs	r2, #0
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <MX_TIM4_Init+0xa8>)
 8000b5c:	f002 fed0 	bl	8003900 <HAL_TIM_PWM_ConfigChannel>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000b66:	f000 f8ed 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	3728      	adds	r7, #40	; 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000008c 	.word	0x2000008c
 8000b78:	40000800 	.word	0x40000800

08000b7c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_TIM6_Init+0x64>)
 8000b8e:	4a15      	ldr	r2, [pc, #84]	; (8000be4 <MX_TIM6_Init+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <MX_TIM6_Init+0x64>)
 8000b94:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b98:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_TIM6_Init+0x64>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_TIM6_Init+0x64>)
 8000ba2:	220a      	movs	r2, #10
 8000ba4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_TIM6_Init+0x64>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bac:	480c      	ldr	r0, [pc, #48]	; (8000be0 <MX_TIM6_Init+0x64>)
 8000bae:	f002 fa01 	bl	8002fb4 <HAL_TIM_Base_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000bb8:	f000 f8c4 	bl	8000d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_TIM6_Init+0x64>)
 8000bca:	f003 fb61 	bl	8004290 <HAL_TIMEx_MasterConfigSynchronization>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000bd4:	f000 f8b6 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200000d8 	.word	0x200000d8
 8000be4:	40001000 	.word	0x40001000

08000be8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_USART2_UART_Init+0x58>)
 8000bee:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <MX_USART2_UART_Init+0x5c>)
 8000bf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_USART2_UART_Init+0x58>)
 8000bf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_USART2_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c2c:	f003 fbd6 	bl	80043dc <HAL_UART_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c36:	f000 f885 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000124 	.word	0x20000124
 8000c44:	40004400 	.word	0x40004400

08000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <MX_GPIO_Init+0xf4>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	4a36      	ldr	r2, [pc, #216]	; (8000d3c <MX_GPIO_Init+0xf4>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6a:	4b34      	ldr	r3, [pc, #208]	; (8000d3c <MX_GPIO_Init+0xf4>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c76:	4b31      	ldr	r3, [pc, #196]	; (8000d3c <MX_GPIO_Init+0xf4>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	4a30      	ldr	r2, [pc, #192]	; (8000d3c <MX_GPIO_Init+0xf4>)
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c82:	4b2e      	ldr	r3, [pc, #184]	; (8000d3c <MX_GPIO_Init+0xf4>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b2b      	ldr	r3, [pc, #172]	; (8000d3c <MX_GPIO_Init+0xf4>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4a2a      	ldr	r2, [pc, #168]	; (8000d3c <MX_GPIO_Init+0xf4>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4b28      	ldr	r3, [pc, #160]	; (8000d3c <MX_GPIO_Init+0xf4>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <MX_GPIO_Init+0xf4>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4a24      	ldr	r2, [pc, #144]	; (8000d3c <MX_GPIO_Init+0xf4>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <MX_GPIO_Init+0xf4>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2160      	movs	r1, #96	; 0x60
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f000 fe0b 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cd0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4817      	ldr	r0, [pc, #92]	; (8000d40 <MX_GPIO_Init+0xf8>)
 8000ce2:	f000 fc53 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 8000ce6:	2360      	movs	r3, #96	; 0x60
 8000ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d00:	f000 fc44 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d0a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1e:	f000 fc35 	bl	800158c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	2028      	movs	r0, #40	; 0x28
 8000d28:	f000 fb7b 	bl	8001422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d2c:	2028      	movs	r0, #40	; 0x28
 8000d2e:	f000 fb94 	bl	800145a <HAL_NVIC_EnableIRQ>

}
 8000d32:	bf00      	nop
 8000d34:	3728      	adds	r7, #40	; 0x28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	48000800 	.word	0x48000800

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x8>
	...

08000d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <HAL_MspInit+0x44>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5a:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <HAL_MspInit+0x44>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6613      	str	r3, [r2, #96]	; 0x60
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <HAL_MspInit+0x44>)
 8000d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_MspInit+0x44>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <HAL_MspInit+0x44>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d78:	6593      	str	r3, [r2, #88]	; 0x58
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_MspInit+0x44>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000

08000d98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM4)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <HAL_TIM_PWM_MspInit+0x8c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d12f      	bne.n	8000e1a <HAL_TIM_PWM_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dba:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <HAL_TIM_PWM_MspInit+0x90>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	4a1a      	ldr	r2, [pc, #104]	; (8000e28 <HAL_TIM_PWM_MspInit+0x90>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_TIM_PWM_MspInit+0x90>)
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_TIM_PWM_MspInit+0x90>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <HAL_TIM_PWM_MspInit+0x90>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_TIM_PWM_MspInit+0x90>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dea:	2340      	movs	r3, #64	; 0x40
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <HAL_TIM_PWM_MspInit+0x94>)
 8000e06:	f000 fbc1 	bl	800158c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	201e      	movs	r0, #30
 8000e10:	f000 fb07 	bl	8001422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e14:	201e      	movs	r0, #30
 8000e16:	f000 fb20 	bl	800145a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	; 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40000800 	.word	0x40000800
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	48000400 	.word	0x48000400

08000e30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <HAL_TIM_Base_MspInit+0x44>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d113      	bne.n	8000e6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <HAL_TIM_Base_MspInit+0x48>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e46:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <HAL_TIM_Base_MspInit+0x48>)
 8000e48:	f043 0310 	orr.w	r3, r3, #16
 8000e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_TIM_Base_MspInit+0x48>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e52:	f003 0310 	and.w	r3, r3, #16
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2036      	movs	r0, #54	; 0x36
 8000e60:	f000 fadf 	bl	8001422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e64:	2036      	movs	r0, #54	; 0x36
 8000e66:	f000 faf8 	bl	800145a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40001000 	.word	0x40001000
 8000e78:	40021000 	.word	0x40021000

08000e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b0ac      	sub	sp, #176	; 0xb0
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2288      	movs	r2, #136	; 0x88
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f004 fc91 	bl	80057c4 <memset>
  if(huart->Instance==USART2)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a25      	ldr	r2, [pc, #148]	; (8000f3c <HAL_UART_MspInit+0xc0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d143      	bne.n	8000f34 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000eac:	2302      	movs	r3, #2
 8000eae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f001 fbbf 	bl	800263c <HAL_RCCEx_PeriphCLKConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ec4:	f7ff ff3e 	bl	8000d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <HAL_UART_MspInit+0xc4>)
 8000eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ecc:	4a1c      	ldr	r2, [pc, #112]	; (8000f40 <HAL_UART_MspInit+0xc4>)
 8000ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <HAL_UART_MspInit+0xc4>)
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <HAL_UART_MspInit+0xc4>)
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee4:	4a16      	ldr	r2, [pc, #88]	; (8000f40 <HAL_UART_MspInit+0xc4>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <HAL_UART_MspInit+0xc4>)
 8000eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ef8:	230c      	movs	r3, #12
 8000efa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f10:	2307      	movs	r3, #7
 8000f12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f000 fb34 	bl	800158c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	2026      	movs	r0, #38	; 0x26
 8000f2a:	f000 fa7a 	bl	8001422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f2e:	2026      	movs	r0, #38	; 0x26
 8000f30:	f000 fa93 	bl	800145a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f34:	bf00      	nop
 8000f36:	37b0      	adds	r7, #176	; 0xb0
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40004400 	.word	0x40004400
 8000f40:	40021000 	.word	0x40021000

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f90:	f000 f94c 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <TIM4_IRQHandler+0x10>)
 8000f9e:	f002 fb8f 	bl	80036c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000008c 	.word	0x2000008c

08000fac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <USART2_IRQHandler+0x10>)
 8000fb2:	f003 fbc7 	bl	8004744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000124 	.word	0x20000124

08000fc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000fc4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fc8:	f000 fcbc 	bl	8001944 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000fcc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fd0:	f000 fcb8 	bl	8001944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <TIM6_DAC_IRQHandler+0x10>)
 8000fde:	f002 fb6f 	bl	80036c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200000d8 	.word	0x200000d8

08000fec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e00a      	b.n	8001014 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ffe:	f3af 8000 	nop.w
 8001002:	4601      	mov	r1, r0
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	60ba      	str	r2, [r7, #8]
 800100a:	b2ca      	uxtb	r2, r1
 800100c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	dbf0      	blt.n	8000ffe <_read+0x12>
	}

return len;
 800101c:	687b      	ldr	r3, [r7, #4]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
	return -1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800104e:	605a      	str	r2, [r3, #4]
	return 0;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <_isatty>:

int _isatty(int file)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
	return 1;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
	return 0;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <_sbrk+0x5c>)
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <_sbrk+0x60>)
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <_sbrk+0x64>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <_sbrk+0x68>)
 80010b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d207      	bcs.n	80010d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c0:	f004 fb56 	bl	8005770 <__errno>
 80010c4:	4603      	mov	r3, r0
 80010c6:	220c      	movs	r2, #12
 80010c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	e009      	b.n	80010e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <_sbrk+0x64>)
 80010e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20018000 	.word	0x20018000
 80010f0:	00000400 	.word	0x00000400
 80010f4:	2000024c 	.word	0x2000024c
 80010f8:	20000268 	.word	0x20000268

080010fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <SystemInit+0x20>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <SystemInit+0x20>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001158 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001124:	f7ff ffea 	bl	80010fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001128:	480c      	ldr	r0, [pc, #48]	; (800115c <LoopForever+0x6>)
  ldr r1, =_edata
 800112a:	490d      	ldr	r1, [pc, #52]	; (8001160 <LoopForever+0xa>)
  ldr r2, =_sidata
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <LoopForever+0xe>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001140:	4c0a      	ldr	r4, [pc, #40]	; (800116c <LoopForever+0x16>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114e:	f004 fb15 	bl	800577c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001152:	f7ff fc31 	bl	80009b8 <main>

08001156 <LoopForever>:

LoopForever:
    b LoopForever
 8001156:	e7fe      	b.n	8001156 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001158:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001164:	08006e04 	.word	0x08006e04
  ldr r2, =_sbss
 8001168:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800116c:	20000264 	.word	0x20000264

08001170 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC1_2_IRQHandler>
	...

08001174 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <HAL_Init+0x3c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <HAL_Init+0x3c>)
 8001184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001188:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118a:	2003      	movs	r0, #3
 800118c:	f000 f93e 	bl	800140c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001190:	2000      	movs	r0, #0
 8001192:	f000 f80f 	bl	80011b4 <HAL_InitTick>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	71fb      	strb	r3, [r7, #7]
 80011a0:	e001      	b.n	80011a6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011a2:	f7ff fdd5 	bl	8000d50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011a6:	79fb      	ldrb	r3, [r7, #7]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40022000 	.word	0x40022000

080011b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011bc:	2300      	movs	r3, #0
 80011be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <HAL_InitTick+0x6c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d023      	beq.n	8001210 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_InitTick+0x70>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_InitTick+0x6c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011da:	fbb2 f3f3 	udiv	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f949 	bl	8001476 <HAL_SYSTICK_Config>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10f      	bne.n	800120a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d809      	bhi.n	8001204 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f0:	2200      	movs	r2, #0
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f000 f913 	bl	8001422 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011fc:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <HAL_InitTick+0x74>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e007      	b.n	8001214 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	e004      	b.n	8001214 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e001      	b.n	8001214 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000008 	.word	0x20000008
 8001224:	20000000 	.word	0x20000000
 8001228:	20000004 	.word	0x20000004

0800122c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x20>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_IncTick+0x24>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a04      	ldr	r2, [pc, #16]	; (8001250 <HAL_IncTick+0x24>)
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008
 8001250:	20000250 	.word	0x20000250

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_GetTick+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000250 	.word	0x20000250

0800126c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001288:	4013      	ands	r3, r2
 800128a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800129c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129e:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	60d3      	str	r3, [r2, #12]
}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <__NVIC_GetPriorityGrouping+0x18>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	f003 0307 	and.w	r3, r3, #7
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	db0b      	blt.n	80012fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	f003 021f 	and.w	r2, r3, #31
 80012e8:	4907      	ldr	r1, [pc, #28]	; (8001308 <__NVIC_EnableIRQ+0x38>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	095b      	lsrs	r3, r3, #5
 80012f0:	2001      	movs	r0, #1
 80012f2:	fa00 f202 	lsl.w	r2, r0, r2
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000e100 	.word	0xe000e100

0800130c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	2b00      	cmp	r3, #0
 800131e:	db0a      	blt.n	8001336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	490c      	ldr	r1, [pc, #48]	; (8001358 <__NVIC_SetPriority+0x4c>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	0112      	lsls	r2, r2, #4
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	440b      	add	r3, r1
 8001330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001334:	e00a      	b.n	800134c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4908      	ldr	r1, [pc, #32]	; (800135c <__NVIC_SetPriority+0x50>)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	3b04      	subs	r3, #4
 8001344:	0112      	lsls	r2, r2, #4
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	440b      	add	r3, r1
 800134a:	761a      	strb	r2, [r3, #24]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000e100 	.word	0xe000e100
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001360:	b480      	push	{r7}
 8001362:	b089      	sub	sp, #36	; 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f1c3 0307 	rsb	r3, r3, #7
 800137a:	2b04      	cmp	r3, #4
 800137c:	bf28      	it	cs
 800137e:	2304      	movcs	r3, #4
 8001380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3304      	adds	r3, #4
 8001386:	2b06      	cmp	r3, #6
 8001388:	d902      	bls.n	8001390 <NVIC_EncodePriority+0x30>
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3b03      	subs	r3, #3
 800138e:	e000      	b.n	8001392 <NVIC_EncodePriority+0x32>
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	f04f 32ff 	mov.w	r2, #4294967295
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43da      	mvns	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	401a      	ands	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	43d9      	mvns	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	4313      	orrs	r3, r2
         );
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3724      	adds	r7, #36	; 0x24
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d8:	d301      	bcc.n	80013de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013da:	2301      	movs	r3, #1
 80013dc:	e00f      	b.n	80013fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013de:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <SysTick_Config+0x40>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e6:	210f      	movs	r1, #15
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f7ff ff8e 	bl	800130c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <SysTick_Config+0x40>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	4b04      	ldr	r3, [pc, #16]	; (8001408 <SysTick_Config+0x40>)
 80013f8:	2207      	movs	r2, #7
 80013fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	e000e010 	.word	0xe000e010

0800140c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff29 	bl	800126c <__NVIC_SetPriorityGrouping>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001434:	f7ff ff3e 	bl	80012b4 <__NVIC_GetPriorityGrouping>
 8001438:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f7ff ff8e 	bl	8001360 <NVIC_EncodePriority>
 8001444:	4602      	mov	r2, r0
 8001446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff5d 	bl	800130c <__NVIC_SetPriority>
}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff31 	bl	80012d0 <__NVIC_EnableIRQ>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ffa2 	bl	80013c8 <SysTick_Config>
 8001484:	4603      	mov	r3, r0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800148e:	b480      	push	{r7}
 8001490:	b085      	sub	sp, #20
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d008      	beq.n	80014b8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2204      	movs	r2, #4
 80014aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e022      	b.n	80014fe <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 020e 	bic.w	r2, r2, #14
 80014c6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014dc:	f003 021c 	and.w	r2, r3, #28
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	2101      	movs	r1, #1
 80014e6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ea:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b084      	sub	sp, #16
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d005      	beq.n	800152e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2204      	movs	r2, #4
 8001526:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	e029      	b.n	8001582 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 020e 	bic.w	r2, r2, #14
 800153c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0201 	bic.w	r2, r2, #1
 800154c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f003 021c 	and.w	r2, r3, #28
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	2101      	movs	r1, #1
 800155c:	fa01 f202 	lsl.w	r2, r1, r2
 8001560:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	4798      	blx	r3
    }
  }
  return status;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800158c:	b480      	push	{r7}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800159a:	e17f      	b.n	800189c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2101      	movs	r1, #1
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	4013      	ands	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 8171 	beq.w	8001896 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d005      	beq.n	80015cc <HAL_GPIO_Init+0x40>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d130      	bne.n	800162e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	2203      	movs	r2, #3
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001602:	2201      	movs	r2, #1
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	091b      	lsrs	r3, r3, #4
 8001618:	f003 0201 	and.w	r2, r3, #1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	2b03      	cmp	r3, #3
 8001638:	d118      	bne.n	800166c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001640:	2201      	movs	r2, #1
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	08db      	lsrs	r3, r3, #3
 8001656:	f003 0201 	and.w	r2, r3, #1
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b03      	cmp	r3, #3
 8001676:	d017      	beq.n	80016a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d123      	bne.n	80016fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	08da      	lsrs	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3208      	adds	r2, #8
 80016bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	220f      	movs	r2, #15
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	08da      	lsrs	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3208      	adds	r2, #8
 80016f6:	6939      	ldr	r1, [r7, #16]
 80016f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0203 	and.w	r2, r3, #3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80ac 	beq.w	8001896 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	4b5f      	ldr	r3, [pc, #380]	; (80018bc <HAL_GPIO_Init+0x330>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001742:	4a5e      	ldr	r2, [pc, #376]	; (80018bc <HAL_GPIO_Init+0x330>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6613      	str	r3, [r2, #96]	; 0x60
 800174a:	4b5c      	ldr	r3, [pc, #368]	; (80018bc <HAL_GPIO_Init+0x330>)
 800174c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001756:	4a5a      	ldr	r2, [pc, #360]	; (80018c0 <HAL_GPIO_Init+0x334>)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	3302      	adds	r3, #2
 800175e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	220f      	movs	r2, #15
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001780:	d025      	beq.n	80017ce <HAL_GPIO_Init+0x242>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4f      	ldr	r2, [pc, #316]	; (80018c4 <HAL_GPIO_Init+0x338>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d01f      	beq.n	80017ca <HAL_GPIO_Init+0x23e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4e      	ldr	r2, [pc, #312]	; (80018c8 <HAL_GPIO_Init+0x33c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d019      	beq.n	80017c6 <HAL_GPIO_Init+0x23a>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4d      	ldr	r2, [pc, #308]	; (80018cc <HAL_GPIO_Init+0x340>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d013      	beq.n	80017c2 <HAL_GPIO_Init+0x236>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4c      	ldr	r2, [pc, #304]	; (80018d0 <HAL_GPIO_Init+0x344>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d00d      	beq.n	80017be <HAL_GPIO_Init+0x232>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4b      	ldr	r2, [pc, #300]	; (80018d4 <HAL_GPIO_Init+0x348>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d007      	beq.n	80017ba <HAL_GPIO_Init+0x22e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4a      	ldr	r2, [pc, #296]	; (80018d8 <HAL_GPIO_Init+0x34c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d101      	bne.n	80017b6 <HAL_GPIO_Init+0x22a>
 80017b2:	2306      	movs	r3, #6
 80017b4:	e00c      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017b6:	2307      	movs	r3, #7
 80017b8:	e00a      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017ba:	2305      	movs	r3, #5
 80017bc:	e008      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017be:	2304      	movs	r3, #4
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017c2:	2303      	movs	r3, #3
 80017c4:	e004      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017c6:	2302      	movs	r3, #2
 80017c8:	e002      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017ce:	2300      	movs	r3, #0
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	f002 0203 	and.w	r2, r2, #3
 80017d6:	0092      	lsls	r2, r2, #2
 80017d8:	4093      	lsls	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017e0:	4937      	ldr	r1, [pc, #220]	; (80018c0 <HAL_GPIO_Init+0x334>)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3302      	adds	r3, #2
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <HAL_GPIO_Init+0x350>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001812:	4a32      	ldr	r2, [pc, #200]	; (80018dc <HAL_GPIO_Init+0x350>)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001818:	4b30      	ldr	r3, [pc, #192]	; (80018dc <HAL_GPIO_Init+0x350>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	43db      	mvns	r3, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800183c:	4a27      	ldr	r2, [pc, #156]	; (80018dc <HAL_GPIO_Init+0x350>)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001842:	4b26      	ldr	r3, [pc, #152]	; (80018dc <HAL_GPIO_Init+0x350>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	43db      	mvns	r3, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001866:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <HAL_GPIO_Init+0x350>)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_GPIO_Init+0x350>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	43db      	mvns	r3, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001890:	4a12      	ldr	r2, [pc, #72]	; (80018dc <HAL_GPIO_Init+0x350>)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa22 f303 	lsr.w	r3, r2, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f47f ae78 	bne.w	800159c <HAL_GPIO_Init+0x10>
  }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	371c      	adds	r7, #28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010000 	.word	0x40010000
 80018c4:	48000400 	.word	0x48000400
 80018c8:	48000800 	.word	0x48000800
 80018cc:	48000c00 	.word	0x48000c00
 80018d0:	48001000 	.word	0x48001000
 80018d4:	48001400 	.word	0x48001400
 80018d8:	48001800 	.word	0x48001800
 80018dc:	40010400 	.word	0x40010400

080018e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	807b      	strh	r3, [r7, #2]
 80018ec:	4613      	mov	r3, r2
 80018ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f0:	787b      	ldrb	r3, [r7, #1]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018f6:	887a      	ldrh	r2, [r7, #2]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018fc:	e002      	b.n	8001904 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018fe:	887a      	ldrh	r2, [r7, #2]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001922:	887a      	ldrh	r2, [r7, #2]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4013      	ands	r3, r2
 8001928:	041a      	lsls	r2, r3, #16
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	43d9      	mvns	r1, r3
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	400b      	ands	r3, r1
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	619a      	str	r2, [r3, #24]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800194e:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	4013      	ands	r3, r2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d006      	beq.n	8001968 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe ff10 	bl	8000788 <HAL_GPIO_EXTI_Callback>
  }
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40010400 	.word	0x40010400

08001974 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <HAL_PWREx_GetVoltageRange+0x18>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40007000 	.word	0x40007000

08001990 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800199e:	d130      	bne.n	8001a02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019a0:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ac:	d038      	beq.n	8001a20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019b6:	4a1e      	ldr	r2, [pc, #120]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019be:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2232      	movs	r2, #50	; 0x32
 80019c4:	fb02 f303 	mul.w	r3, r2, r3
 80019c8:	4a1b      	ldr	r2, [pc, #108]	; (8001a38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	0c9b      	lsrs	r3, r3, #18
 80019d0:	3301      	adds	r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d4:	e002      	b.n	80019dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3b01      	subs	r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e8:	d102      	bne.n	80019f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f2      	bne.n	80019d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fc:	d110      	bne.n	8001a20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e00f      	b.n	8001a22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0e:	d007      	beq.n	8001a20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a18:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40007000 	.word	0x40007000
 8001a34:	20000000 	.word	0x20000000
 8001a38:	431bde83 	.word	0x431bde83

08001a3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e3ca      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a4e:	4b97      	ldr	r3, [pc, #604]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a58:	4b94      	ldr	r3, [pc, #592]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 80e4 	beq.w	8001c38 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d007      	beq.n	8001a86 <HAL_RCC_OscConfig+0x4a>
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	f040 808b 	bne.w	8001b94 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	f040 8087 	bne.w	8001b94 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a86:	4b89      	ldr	r3, [pc, #548]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d005      	beq.n	8001a9e <HAL_RCC_OscConfig+0x62>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e3a2      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1a      	ldr	r2, [r3, #32]
 8001aa2:	4b82      	ldr	r3, [pc, #520]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d004      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x7c>
 8001aae:	4b7f      	ldr	r3, [pc, #508]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ab6:	e005      	b.n	8001ac4 <HAL_RCC_OscConfig+0x88>
 8001ab8:	4b7c      	ldr	r3, [pc, #496]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001abe:	091b      	lsrs	r3, r3, #4
 8001ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d223      	bcs.n	8001b10 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 fd55 	bl	800257c <RCC_SetFlashLatencyFromMSIRange>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e383      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001adc:	4b73      	ldr	r3, [pc, #460]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a72      	ldr	r2, [pc, #456]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001ae2:	f043 0308 	orr.w	r3, r3, #8
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b70      	ldr	r3, [pc, #448]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	496d      	ldr	r1, [pc, #436]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001afa:	4b6c      	ldr	r3, [pc, #432]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	4968      	ldr	r1, [pc, #416]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	604b      	str	r3, [r1, #4]
 8001b0e:	e025      	b.n	8001b5c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b10:	4b66      	ldr	r3, [pc, #408]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a65      	ldr	r2, [pc, #404]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001b16:	f043 0308 	orr.w	r3, r3, #8
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4b63      	ldr	r3, [pc, #396]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	4960      	ldr	r1, [pc, #384]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b2e:	4b5f      	ldr	r3, [pc, #380]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	495b      	ldr	r1, [pc, #364]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d109      	bne.n	8001b5c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 fd15 	bl	800257c <RCC_SetFlashLatencyFromMSIRange>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e343      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b5c:	f000 fc4a 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b52      	ldr	r3, [pc, #328]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	091b      	lsrs	r3, r3, #4
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	4950      	ldr	r1, [pc, #320]	; (8001cb0 <HAL_RCC_OscConfig+0x274>)
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	f003 031f 	and.w	r3, r3, #31
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
 8001b78:	4a4e      	ldr	r2, [pc, #312]	; (8001cb4 <HAL_RCC_OscConfig+0x278>)
 8001b7a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b7c:	4b4e      	ldr	r3, [pc, #312]	; (8001cb8 <HAL_RCC_OscConfig+0x27c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fb17 	bl	80011b4 <HAL_InitTick>
 8001b86:	4603      	mov	r3, r0
 8001b88:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d052      	beq.n	8001c36 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	e327      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d032      	beq.n	8001c02 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b9c:	4b43      	ldr	r3, [pc, #268]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a42      	ldr	r2, [pc, #264]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fb54 	bl	8001254 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bb0:	f7ff fb50 	bl	8001254 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e310      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bc2:	4b3a      	ldr	r3, [pc, #232]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bce:	4b37      	ldr	r3, [pc, #220]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a36      	ldr	r2, [pc, #216]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001bd4:	f043 0308 	orr.w	r3, r3, #8
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b34      	ldr	r3, [pc, #208]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	4931      	ldr	r1, [pc, #196]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bec:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	021b      	lsls	r3, r3, #8
 8001bfa:	492c      	ldr	r1, [pc, #176]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
 8001c00:	e01a      	b.n	8001c38 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c02:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a29      	ldr	r2, [pc, #164]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001c08:	f023 0301 	bic.w	r3, r3, #1
 8001c0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c0e:	f7ff fb21 	bl	8001254 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c16:	f7ff fb1d 	bl	8001254 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e2dd      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c28:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1f0      	bne.n	8001c16 <HAL_RCC_OscConfig+0x1da>
 8001c34:	e000      	b.n	8001c38 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d074      	beq.n	8001d2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d005      	beq.n	8001c56 <HAL_RCC_OscConfig+0x21a>
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	2b0c      	cmp	r3, #12
 8001c4e:	d10e      	bne.n	8001c6e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d10b      	bne.n	8001c6e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d064      	beq.n	8001d2c <HAL_RCC_OscConfig+0x2f0>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d160      	bne.n	8001d2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e2ba      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_OscConfig+0x24a>
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	e026      	b.n	8001cd4 <HAL_RCC_OscConfig+0x298>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c8e:	d115      	bne.n	8001cbc <HAL_RCC_OscConfig+0x280>
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a05      	ldr	r2, [pc, #20]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001c96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a02      	ldr	r2, [pc, #8]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	e014      	b.n	8001cd4 <HAL_RCC_OscConfig+0x298>
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	08006c28 	.word	0x08006c28
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000004 	.word	0x20000004
 8001cbc:	4ba0      	ldr	r3, [pc, #640]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a9f      	ldr	r2, [pc, #636]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b9d      	ldr	r3, [pc, #628]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a9c      	ldr	r2, [pc, #624]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d013      	beq.n	8001d04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7ff faba 	bl	8001254 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce4:	f7ff fab6 	bl	8001254 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	; 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e276      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cf6:	4b92      	ldr	r3, [pc, #584]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x2a8>
 8001d02:	e014      	b.n	8001d2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d04:	f7ff faa6 	bl	8001254 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7ff faa2 	bl	8001254 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	; 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e262      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d1e:	4b88      	ldr	r3, [pc, #544]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0x2d0>
 8001d2a:	e000      	b.n	8001d2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d060      	beq.n	8001dfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d005      	beq.n	8001d4c <HAL_RCC_OscConfig+0x310>
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	2b0c      	cmp	r3, #12
 8001d44:	d119      	bne.n	8001d7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d116      	bne.n	8001d7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d4c:	4b7c      	ldr	r3, [pc, #496]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_RCC_OscConfig+0x328>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e23f      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d64:	4b76      	ldr	r3, [pc, #472]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	061b      	lsls	r3, r3, #24
 8001d72:	4973      	ldr	r1, [pc, #460]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d78:	e040      	b.n	8001dfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d023      	beq.n	8001dca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d82:	4b6f      	ldr	r3, [pc, #444]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a6e      	ldr	r2, [pc, #440]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8e:	f7ff fa61 	bl	8001254 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d96:	f7ff fa5d 	bl	8001254 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e21d      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da8:	4b65      	ldr	r3, [pc, #404]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db4:	4b62      	ldr	r3, [pc, #392]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	061b      	lsls	r3, r3, #24
 8001dc2:	495f      	ldr	r1, [pc, #380]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
 8001dc8:	e018      	b.n	8001dfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dca:	4b5d      	ldr	r3, [pc, #372]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a5c      	ldr	r2, [pc, #368]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd6:	f7ff fa3d 	bl	8001254 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dde:	f7ff fa39 	bl	8001254 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e1f9      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001df0:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f0      	bne.n	8001dde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d03c      	beq.n	8001e82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d01c      	beq.n	8001e4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e10:	4b4b      	ldr	r3, [pc, #300]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e16:	4a4a      	ldr	r2, [pc, #296]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e20:	f7ff fa18 	bl	8001254 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e28:	f7ff fa14 	bl	8001254 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e1d4      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e3a:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0ef      	beq.n	8001e28 <HAL_RCC_OscConfig+0x3ec>
 8001e48:	e01b      	b.n	8001e82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4a:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e50:	4a3b      	ldr	r2, [pc, #236]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001e52:	f023 0301 	bic.w	r3, r3, #1
 8001e56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5a:	f7ff f9fb 	bl	8001254 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e62:	f7ff f9f7 	bl	8001254 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e1b7      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e74:	4b32      	ldr	r3, [pc, #200]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1ef      	bne.n	8001e62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 80a6 	beq.w	8001fdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e90:	2300      	movs	r3, #0
 8001e92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e94:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10d      	bne.n	8001ebc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea0:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	4a26      	ldr	r2, [pc, #152]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8001eac:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ebc:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_RCC_OscConfig+0x508>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d118      	bne.n	8001efa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ec8:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <HAL_RCC_OscConfig+0x508>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <HAL_RCC_OscConfig+0x508>)
 8001ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed4:	f7ff f9be 	bl	8001254 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001edc:	f7ff f9ba 	bl	8001254 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e17a      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <HAL_RCC_OscConfig+0x508>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d108      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4d8>
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f08:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f12:	e029      	b.n	8001f68 <HAL_RCC_OscConfig+0x52c>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	d115      	bne.n	8001f48 <HAL_RCC_OscConfig+0x50c>
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f22:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f32:	4a03      	ldr	r2, [pc, #12]	; (8001f40 <HAL_RCC_OscConfig+0x504>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f3c:	e014      	b.n	8001f68 <HAL_RCC_OscConfig+0x52c>
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40007000 	.word	0x40007000
 8001f48:	4b9c      	ldr	r3, [pc, #624]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4e:	4a9b      	ldr	r2, [pc, #620]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f58:	4b98      	ldr	r3, [pc, #608]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5e:	4a97      	ldr	r2, [pc, #604]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8001f60:	f023 0304 	bic.w	r3, r3, #4
 8001f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d016      	beq.n	8001f9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f70:	f7ff f970 	bl	8001254 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f78:	f7ff f96c 	bl	8001254 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e12a      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8e:	4b8b      	ldr	r3, [pc, #556]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8001f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0ed      	beq.n	8001f78 <HAL_RCC_OscConfig+0x53c>
 8001f9c:	e015      	b.n	8001fca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9e:	f7ff f959 	bl	8001254 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f7ff f955 	bl	8001254 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e113      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fbc:	4b7f      	ldr	r3, [pc, #508]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ed      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fca:	7ffb      	ldrb	r3, [r7, #31]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d105      	bne.n	8001fdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd0:	4b7a      	ldr	r3, [pc, #488]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd4:	4a79      	ldr	r2, [pc, #484]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8001fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fda:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80fe 	beq.w	80021e2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	f040 80d0 	bne.w	8002190 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ff0:	4b72      	ldr	r3, [pc, #456]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f003 0203 	and.w	r2, r3, #3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	429a      	cmp	r2, r3
 8002002:	d130      	bne.n	8002066 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	3b01      	subs	r3, #1
 8002010:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d127      	bne.n	8002066 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002020:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d11f      	bne.n	8002066 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002030:	2a07      	cmp	r2, #7
 8002032:	bf14      	ite	ne
 8002034:	2201      	movne	r2, #1
 8002036:	2200      	moveq	r2, #0
 8002038:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800203a:	4293      	cmp	r3, r2
 800203c:	d113      	bne.n	8002066 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002048:	085b      	lsrs	r3, r3, #1
 800204a:	3b01      	subs	r3, #1
 800204c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d109      	bne.n	8002066 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	085b      	lsrs	r3, r3, #1
 800205e:	3b01      	subs	r3, #1
 8002060:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d06e      	beq.n	8002144 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	2b0c      	cmp	r3, #12
 800206a:	d069      	beq.n	8002140 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800206c:	4b53      	ldr	r3, [pc, #332]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d105      	bne.n	8002084 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002078:	4b50      	ldr	r3, [pc, #320]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0ad      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002088:	4b4c      	ldr	r3, [pc, #304]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a4b      	ldr	r2, [pc, #300]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 800208e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002092:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002094:	f7ff f8de 	bl	8001254 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209c:	f7ff f8da 	bl	8001254 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e09a      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ae:	4b43      	ldr	r3, [pc, #268]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ba:	4b40      	ldr	r3, [pc, #256]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	4b40      	ldr	r3, [pc, #256]	; (80021c0 <HAL_RCC_OscConfig+0x784>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020ca:	3a01      	subs	r2, #1
 80020cc:	0112      	lsls	r2, r2, #4
 80020ce:	4311      	orrs	r1, r2
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020d4:	0212      	lsls	r2, r2, #8
 80020d6:	4311      	orrs	r1, r2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020dc:	0852      	lsrs	r2, r2, #1
 80020de:	3a01      	subs	r2, #1
 80020e0:	0552      	lsls	r2, r2, #21
 80020e2:	4311      	orrs	r1, r2
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020e8:	0852      	lsrs	r2, r2, #1
 80020ea:	3a01      	subs	r2, #1
 80020ec:	0652      	lsls	r2, r2, #25
 80020ee:	4311      	orrs	r1, r2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020f4:	0912      	lsrs	r2, r2, #4
 80020f6:	0452      	lsls	r2, r2, #17
 80020f8:	430a      	orrs	r2, r1
 80020fa:	4930      	ldr	r1, [pc, #192]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002100:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a2d      	ldr	r2, [pc, #180]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8002106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800210a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800210c:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4a2a      	ldr	r2, [pc, #168]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8002112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002116:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002118:	f7ff f89c 	bl	8001254 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002120:	f7ff f898 	bl	8001254 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e058      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800213e:	e050      	b.n	80021e2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e04f      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002144:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d148      	bne.n	80021e2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a19      	ldr	r2, [pc, #100]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8002156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800215a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a16      	ldr	r2, [pc, #88]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8002162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002166:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002168:	f7ff f874 	bl	8001254 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002170:	f7ff f870 	bl	8001254 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e030      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x734>
 800218e:	e028      	b.n	80021e2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2b0c      	cmp	r3, #12
 8002194:	d023      	beq.n	80021de <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a08      	ldr	r2, [pc, #32]	; (80021bc <HAL_RCC_OscConfig+0x780>)
 800219c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a2:	f7ff f857 	bl	8001254 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a8:	e00c      	b.n	80021c4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021aa:	f7ff f853 	bl	8001254 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d905      	bls.n	80021c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e013      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
 80021bc:	40021000 	.word	0x40021000
 80021c0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <HAL_RCC_OscConfig+0x7b0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1ec      	bne.n	80021aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_RCC_OscConfig+0x7b0>)
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	4905      	ldr	r1, [pc, #20]	; (80021ec <HAL_RCC_OscConfig+0x7b0>)
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_RCC_OscConfig+0x7b4>)
 80021d8:	4013      	ands	r3, r2
 80021da:	60cb      	str	r3, [r1, #12]
 80021dc:	e001      	b.n	80021e2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3720      	adds	r7, #32
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	feeefffc 	.word	0xfeeefffc

080021f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0e7      	b.n	80023d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002208:	4b75      	ldr	r3, [pc, #468]	; (80023e0 <HAL_RCC_ClockConfig+0x1ec>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d910      	bls.n	8002238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b72      	ldr	r3, [pc, #456]	; (80023e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 0207 	bic.w	r2, r3, #7
 800221e:	4970      	ldr	r1, [pc, #448]	; (80023e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b6e      	ldr	r3, [pc, #440]	; (80023e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0cf      	b.n	80023d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d010      	beq.n	8002266 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	4b66      	ldr	r3, [pc, #408]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002250:	429a      	cmp	r2, r3
 8002252:	d908      	bls.n	8002266 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002254:	4b63      	ldr	r3, [pc, #396]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4960      	ldr	r1, [pc, #384]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002262:	4313      	orrs	r3, r2
 8002264:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d04c      	beq.n	800230c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d107      	bne.n	800228a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227a:	4b5a      	ldr	r3, [pc, #360]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d121      	bne.n	80022ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e0a6      	b.n	80023d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002292:	4b54      	ldr	r3, [pc, #336]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d115      	bne.n	80022ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e09a      	b.n	80023d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022aa:	4b4e      	ldr	r3, [pc, #312]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e08e      	b.n	80023d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ba:	4b4a      	ldr	r3, [pc, #296]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e086      	b.n	80023d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022ca:	4b46      	ldr	r3, [pc, #280]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f023 0203 	bic.w	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4943      	ldr	r1, [pc, #268]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022dc:	f7fe ffba 	bl	8001254 <HAL_GetTick>
 80022e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e4:	f7fe ffb6 	bl	8001254 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e06e      	b.n	80023d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	4b3a      	ldr	r3, [pc, #232]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 020c 	and.w	r2, r3, #12
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	429a      	cmp	r2, r3
 800230a:	d1eb      	bne.n	80022e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d010      	beq.n	800233a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002324:	429a      	cmp	r2, r3
 8002326:	d208      	bcs.n	800233a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002328:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	492b      	ldr	r1, [pc, #172]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002336:	4313      	orrs	r3, r2
 8002338:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800233a:	4b29      	ldr	r3, [pc, #164]	; (80023e0 <HAL_RCC_ClockConfig+0x1ec>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d210      	bcs.n	800236a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002348:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <HAL_RCC_ClockConfig+0x1ec>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 0207 	bic.w	r2, r3, #7
 8002350:	4923      	ldr	r1, [pc, #140]	; (80023e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002358:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <HAL_RCC_ClockConfig+0x1ec>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d001      	beq.n	800236a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e036      	b.n	80023d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002376:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	4918      	ldr	r1, [pc, #96]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002384:	4313      	orrs	r3, r2
 8002386:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d009      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4910      	ldr	r1, [pc, #64]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023a8:	f000 f824 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 80023ac:	4602      	mov	r2, r0
 80023ae:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <HAL_RCC_ClockConfig+0x1f0>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	091b      	lsrs	r3, r3, #4
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	490b      	ldr	r1, [pc, #44]	; (80023e8 <HAL_RCC_ClockConfig+0x1f4>)
 80023ba:	5ccb      	ldrb	r3, [r1, r3]
 80023bc:	f003 031f 	and.w	r3, r3, #31
 80023c0:	fa22 f303 	lsr.w	r3, r2, r3
 80023c4:	4a09      	ldr	r2, [pc, #36]	; (80023ec <HAL_RCC_ClockConfig+0x1f8>)
 80023c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_RCC_ClockConfig+0x1fc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe fef1 	bl	80011b4 <HAL_InitTick>
 80023d2:	4603      	mov	r3, r0
 80023d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80023d6:	7afb      	ldrb	r3, [r7, #11]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40022000 	.word	0x40022000
 80023e4:	40021000 	.word	0x40021000
 80023e8:	08006c28 	.word	0x08006c28
 80023ec:	20000000 	.word	0x20000000
 80023f0:	20000004 	.word	0x20000004

080023f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002402:	4b3e      	ldr	r3, [pc, #248]	; (80024fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800240c:	4b3b      	ldr	r3, [pc, #236]	; (80024fc <HAL_RCC_GetSysClockFreq+0x108>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x34>
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	2b0c      	cmp	r3, #12
 8002420:	d121      	bne.n	8002466 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d11e      	bne.n	8002466 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002428:	4b34      	ldr	r3, [pc, #208]	; (80024fc <HAL_RCC_GetSysClockFreq+0x108>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d107      	bne.n	8002444 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002434:	4b31      	ldr	r3, [pc, #196]	; (80024fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243a:	0a1b      	lsrs	r3, r3, #8
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	e005      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002444:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002450:	4a2b      	ldr	r2, [pc, #172]	; (8002500 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002458:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10d      	bne.n	800247c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002464:	e00a      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b04      	cmp	r3, #4
 800246a:	d102      	bne.n	8002472 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800246c:	4b25      	ldr	r3, [pc, #148]	; (8002504 <HAL_RCC_GetSysClockFreq+0x110>)
 800246e:	61bb      	str	r3, [r7, #24]
 8002470:	e004      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	2b08      	cmp	r3, #8
 8002476:	d101      	bne.n	800247c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002478:	4b23      	ldr	r3, [pc, #140]	; (8002508 <HAL_RCC_GetSysClockFreq+0x114>)
 800247a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	2b0c      	cmp	r3, #12
 8002480:	d134      	bne.n	80024ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002482:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d003      	beq.n	800249a <HAL_RCC_GetSysClockFreq+0xa6>
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d003      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0xac>
 8002498:	e005      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800249a:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <HAL_RCC_GetSysClockFreq+0x110>)
 800249c:	617b      	str	r3, [r7, #20]
      break;
 800249e:	e005      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024a0:	4b19      	ldr	r3, [pc, #100]	; (8002508 <HAL_RCC_GetSysClockFreq+0x114>)
 80024a2:	617b      	str	r3, [r7, #20]
      break;
 80024a4:	e002      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	617b      	str	r3, [r7, #20]
      break;
 80024aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024ac:	4b13      	ldr	r3, [pc, #76]	; (80024fc <HAL_RCC_GetSysClockFreq+0x108>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	3301      	adds	r3, #1
 80024b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_RCC_GetSysClockFreq+0x108>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	0a1b      	lsrs	r3, r3, #8
 80024c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	fb03 f202 	mul.w	r2, r3, r2
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_RCC_GetSysClockFreq+0x108>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	0e5b      	lsrs	r3, r3, #25
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	3301      	adds	r3, #1
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024ec:	69bb      	ldr	r3, [r7, #24]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3724      	adds	r7, #36	; 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
 8002500:	08006c40 	.word	0x08006c40
 8002504:	00f42400 	.word	0x00f42400
 8002508:	007a1200 	.word	0x007a1200

0800250c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <HAL_RCC_GetHCLKFreq+0x14>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000000 	.word	0x20000000

08002524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002528:	f7ff fff0 	bl	800250c <HAL_RCC_GetHCLKFreq>
 800252c:	4602      	mov	r2, r0
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	0a1b      	lsrs	r3, r3, #8
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	4904      	ldr	r1, [pc, #16]	; (800254c <HAL_RCC_GetPCLK1Freq+0x28>)
 800253a:	5ccb      	ldrb	r3, [r1, r3]
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40021000 	.word	0x40021000
 800254c:	08006c38 	.word	0x08006c38

08002550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002554:	f7ff ffda 	bl	800250c <HAL_RCC_GetHCLKFreq>
 8002558:	4602      	mov	r2, r0
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_RCC_GetPCLK2Freq+0x24>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	0adb      	lsrs	r3, r3, #11
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4904      	ldr	r1, [pc, #16]	; (8002578 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002566:	5ccb      	ldrb	r3, [r1, r3]
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002570:	4618      	mov	r0, r3
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40021000 	.word	0x40021000
 8002578:	08006c38 	.word	0x08006c38

0800257c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002584:	2300      	movs	r3, #0
 8002586:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002588:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002594:	f7ff f9ee 	bl	8001974 <HAL_PWREx_GetVoltageRange>
 8002598:	6178      	str	r0, [r7, #20]
 800259a:	e014      	b.n	80025c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800259c:	4b25      	ldr	r3, [pc, #148]	; (8002634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800259e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a0:	4a24      	ldr	r2, [pc, #144]	; (8002634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a6:	6593      	str	r3, [r2, #88]	; 0x58
 80025a8:	4b22      	ldr	r3, [pc, #136]	; (8002634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025b4:	f7ff f9de 	bl	8001974 <HAL_PWREx_GetVoltageRange>
 80025b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025ba:	4b1e      	ldr	r3, [pc, #120]	; (8002634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025be:	4a1d      	ldr	r2, [pc, #116]	; (8002634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025cc:	d10b      	bne.n	80025e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b80      	cmp	r3, #128	; 0x80
 80025d2:	d919      	bls.n	8002608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2ba0      	cmp	r3, #160	; 0xa0
 80025d8:	d902      	bls.n	80025e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025da:	2302      	movs	r3, #2
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	e013      	b.n	8002608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025e0:	2301      	movs	r3, #1
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	e010      	b.n	8002608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b80      	cmp	r3, #128	; 0x80
 80025ea:	d902      	bls.n	80025f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025ec:	2303      	movs	r3, #3
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	e00a      	b.n	8002608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b80      	cmp	r3, #128	; 0x80
 80025f6:	d102      	bne.n	80025fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025f8:	2302      	movs	r3, #2
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	e004      	b.n	8002608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b70      	cmp	r3, #112	; 0x70
 8002602:	d101      	bne.n	8002608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002604:	2301      	movs	r3, #1
 8002606:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f023 0207 	bic.w	r2, r3, #7
 8002610:	4909      	ldr	r1, [pc, #36]	; (8002638 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	429a      	cmp	r2, r3
 8002624:	d001      	beq.n	800262a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40021000 	.word	0x40021000
 8002638:	40022000 	.word	0x40022000

0800263c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002644:	2300      	movs	r3, #0
 8002646:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002648:	2300      	movs	r3, #0
 800264a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002654:	2b00      	cmp	r3, #0
 8002656:	d041      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800265c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002660:	d02a      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002662:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002666:	d824      	bhi.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002668:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800266c:	d008      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800266e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002672:	d81e      	bhi.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00a      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002678:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800267c:	d010      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800267e:	e018      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002680:	4b86      	ldr	r3, [pc, #536]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4a85      	ldr	r2, [pc, #532]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800268c:	e015      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3304      	adds	r3, #4
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fabb 	bl	8002c10 <RCCEx_PLLSAI1_Config>
 800269a:	4603      	mov	r3, r0
 800269c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800269e:	e00c      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3320      	adds	r3, #32
 80026a4:	2100      	movs	r1, #0
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fba6 	bl	8002df8 <RCCEx_PLLSAI2_Config>
 80026ac:	4603      	mov	r3, r0
 80026ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026b0:	e003      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	74fb      	strb	r3, [r7, #19]
      break;
 80026b6:	e000      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ba:	7cfb      	ldrb	r3, [r7, #19]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10b      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026c0:	4b76      	ldr	r3, [pc, #472]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ce:	4973      	ldr	r1, [pc, #460]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026d6:	e001      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d8:	7cfb      	ldrb	r3, [r7, #19]
 80026da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d041      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026f0:	d02a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80026f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026f6:	d824      	bhi.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026fc:	d008      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002702:	d81e      	bhi.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800270c:	d010      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800270e:	e018      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002710:	4b62      	ldr	r3, [pc, #392]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4a61      	ldr	r2, [pc, #388]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800271c:	e015      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3304      	adds	r3, #4
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fa73 	bl	8002c10 <RCCEx_PLLSAI1_Config>
 800272a:	4603      	mov	r3, r0
 800272c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800272e:	e00c      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3320      	adds	r3, #32
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fb5e 	bl	8002df8 <RCCEx_PLLSAI2_Config>
 800273c:	4603      	mov	r3, r0
 800273e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002740:	e003      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	74fb      	strb	r3, [r7, #19]
      break;
 8002746:	e000      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002748:	bf00      	nop
    }

    if(ret == HAL_OK)
 800274a:	7cfb      	ldrb	r3, [r7, #19]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10b      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002750:	4b52      	ldr	r3, [pc, #328]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002756:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800275e:	494f      	ldr	r1, [pc, #316]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002766:	e001      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002768:	7cfb      	ldrb	r3, [r7, #19]
 800276a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80a0 	beq.w	80028ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277a:	2300      	movs	r3, #0
 800277c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800277e:	4b47      	ldr	r3, [pc, #284]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800278e:	2300      	movs	r3, #0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00d      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002794:	4b41      	ldr	r3, [pc, #260]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002798:	4a40      	ldr	r2, [pc, #256]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279e:	6593      	str	r3, [r2, #88]	; 0x58
 80027a0:	4b3e      	ldr	r3, [pc, #248]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ac:	2301      	movs	r3, #1
 80027ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027b0:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a3a      	ldr	r2, [pc, #232]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027bc:	f7fe fd4a 	bl	8001254 <HAL_GetTick>
 80027c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027c2:	e009      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c4:	f7fe fd46 	bl	8001254 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d902      	bls.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	74fb      	strb	r3, [r7, #19]
        break;
 80027d6:	e005      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027d8:	4b31      	ldr	r3, [pc, #196]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0ef      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80027e4:	7cfb      	ldrb	r3, [r7, #19]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d15c      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027ea:	4b2c      	ldr	r3, [pc, #176]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01f      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	429a      	cmp	r2, r3
 8002806:	d019      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002808:	4b24      	ldr	r3, [pc, #144]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002812:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002814:	4b21      	ldr	r3, [pc, #132]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281a:	4a20      	ldr	r2, [pc, #128]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002824:	4b1d      	ldr	r3, [pc, #116]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282a:	4a1c      	ldr	r2, [pc, #112]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002834:	4a19      	ldr	r2, [pc, #100]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d016      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002846:	f7fe fd05 	bl	8001254 <HAL_GetTick>
 800284a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800284c:	e00b      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284e:	f7fe fd01 	bl	8001254 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	f241 3288 	movw	r2, #5000	; 0x1388
 800285c:	4293      	cmp	r3, r2
 800285e:	d902      	bls.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	74fb      	strb	r3, [r7, #19]
            break;
 8002864:	e006      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002866:	4b0d      	ldr	r3, [pc, #52]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0ec      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002874:	7cfb      	ldrb	r3, [r7, #19]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10c      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800288a:	4904      	ldr	r1, [pc, #16]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002892:	e009      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002894:	7cfb      	ldrb	r3, [r7, #19]
 8002896:	74bb      	strb	r3, [r7, #18]
 8002898:	e006      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000
 80028a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a4:	7cfb      	ldrb	r3, [r7, #19]
 80028a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028a8:	7c7b      	ldrb	r3, [r7, #17]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d105      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ae:	4b9e      	ldr	r3, [pc, #632]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b2:	4a9d      	ldr	r2, [pc, #628]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028c6:	4b98      	ldr	r3, [pc, #608]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028cc:	f023 0203 	bic.w	r2, r3, #3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d4:	4994      	ldr	r1, [pc, #592]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028e8:	4b8f      	ldr	r3, [pc, #572]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ee:	f023 020c 	bic.w	r2, r3, #12
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f6:	498c      	ldr	r1, [pc, #560]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800290a:	4b87      	ldr	r3, [pc, #540]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002910:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	4983      	ldr	r1, [pc, #524]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800292c:	4b7e      	ldr	r3, [pc, #504]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002932:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	497b      	ldr	r1, [pc, #492]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800294e:	4b76      	ldr	r3, [pc, #472]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002954:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295c:	4972      	ldr	r1, [pc, #456]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002970:	4b6d      	ldr	r3, [pc, #436]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297e:	496a      	ldr	r1, [pc, #424]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002992:	4b65      	ldr	r3, [pc, #404]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002998:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a0:	4961      	ldr	r1, [pc, #388]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029b4:	4b5c      	ldr	r3, [pc, #368]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c2:	4959      	ldr	r1, [pc, #356]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029d6:	4b54      	ldr	r3, [pc, #336]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e4:	4950      	ldr	r1, [pc, #320]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029f8:	4b4b      	ldr	r3, [pc, #300]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a06:	4948      	ldr	r1, [pc, #288]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a1a:	4b43      	ldr	r3, [pc, #268]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a28:	493f      	ldr	r1, [pc, #252]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d028      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a3c:	4b3a      	ldr	r3, [pc, #232]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a4a:	4937      	ldr	r1, [pc, #220]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a5a:	d106      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a5c:	4b32      	ldr	r3, [pc, #200]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4a31      	ldr	r2, [pc, #196]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a66:	60d3      	str	r3, [r2, #12]
 8002a68:	e011      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a72:	d10c      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3304      	adds	r3, #4
 8002a78:	2101      	movs	r1, #1
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 f8c8 	bl	8002c10 <RCCEx_PLLSAI1_Config>
 8002a80:	4603      	mov	r3, r0
 8002a82:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a84:	7cfb      	ldrb	r3, [r7, #19]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a8a:	7cfb      	ldrb	r3, [r7, #19]
 8002a8c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d028      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a9a:	4b23      	ldr	r3, [pc, #140]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa8:	491f      	ldr	r1, [pc, #124]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ab8:	d106      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aba:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	4a1a      	ldr	r2, [pc, #104]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ac4:	60d3      	str	r3, [r2, #12]
 8002ac6:	e011      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ad0:	d10c      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 f899 	bl	8002c10 <RCCEx_PLLSAI1_Config>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ae2:	7cfb      	ldrb	r3, [r7, #19]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ae8:	7cfb      	ldrb	r3, [r7, #19]
 8002aea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d02b      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b06:	4908      	ldr	r1, [pc, #32]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b16:	d109      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b18:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a02      	ldr	r2, [pc, #8]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b22:	60d3      	str	r3, [r2, #12]
 8002b24:	e014      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 f867 	bl	8002c10 <RCCEx_PLLSAI1_Config>
 8002b42:	4603      	mov	r3, r0
 8002b44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b46:	7cfb      	ldrb	r3, [r7, #19]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b4c:	7cfb      	ldrb	r3, [r7, #19]
 8002b4e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d02f      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b5c:	4b2b      	ldr	r3, [pc, #172]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b6a:	4928      	ldr	r1, [pc, #160]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b7a:	d10d      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3304      	adds	r3, #4
 8002b80:	2102      	movs	r1, #2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 f844 	bl	8002c10 <RCCEx_PLLSAI1_Config>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d014      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b92:	7cfb      	ldrb	r3, [r7, #19]
 8002b94:	74bb      	strb	r3, [r7, #18]
 8002b96:	e011      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3320      	adds	r3, #32
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 f925 	bl	8002df8 <RCCEx_PLLSAI2_Config>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bb2:	7cfb      	ldrb	r3, [r7, #19]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bc8:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bd6:	490d      	ldr	r1, [pc, #52]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00b      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bea:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bfa:	4904      	ldr	r1, [pc, #16]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c02:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40021000 	.word	0x40021000

08002c10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c1e:	4b75      	ldr	r3, [pc, #468]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d018      	beq.n	8002c5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c2a:	4b72      	ldr	r3, [pc, #456]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 0203 	and.w	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d10d      	bne.n	8002c56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c42:	4b6c      	ldr	r3, [pc, #432]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	091b      	lsrs	r3, r3, #4
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
       ||
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d047      	beq.n	8002ce6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
 8002c5a:	e044      	b.n	8002ce6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d018      	beq.n	8002c96 <RCCEx_PLLSAI1_Config+0x86>
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d825      	bhi.n	8002cb4 <RCCEx_PLLSAI1_Config+0xa4>
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d002      	beq.n	8002c72 <RCCEx_PLLSAI1_Config+0x62>
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d009      	beq.n	8002c84 <RCCEx_PLLSAI1_Config+0x74>
 8002c70:	e020      	b.n	8002cb4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c72:	4b60      	ldr	r3, [pc, #384]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d11d      	bne.n	8002cba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c82:	e01a      	b.n	8002cba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c84:	4b5b      	ldr	r3, [pc, #364]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d116      	bne.n	8002cbe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c94:	e013      	b.n	8002cbe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c96:	4b57      	ldr	r3, [pc, #348]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10f      	bne.n	8002cc2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ca2:	4b54      	ldr	r3, [pc, #336]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cb2:	e006      	b.n	8002cc2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb8:	e004      	b.n	8002cc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cba:	bf00      	nop
 8002cbc:	e002      	b.n	8002cc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cbe:	bf00      	nop
 8002cc0:	e000      	b.n	8002cc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10d      	bne.n	8002ce6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cca:	4b4a      	ldr	r3, [pc, #296]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6819      	ldr	r1, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	430b      	orrs	r3, r1
 8002ce0:	4944      	ldr	r1, [pc, #272]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d17d      	bne.n	8002de8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002cec:	4b41      	ldr	r3, [pc, #260]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a40      	ldr	r2, [pc, #256]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf8:	f7fe faac 	bl	8001254 <HAL_GetTick>
 8002cfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cfe:	e009      	b.n	8002d14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d00:	f7fe faa8 	bl	8001254 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d902      	bls.n	8002d14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	73fb      	strb	r3, [r7, #15]
        break;
 8002d12:	e005      	b.n	8002d20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d14:	4b37      	ldr	r3, [pc, #220]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1ef      	bne.n	8002d00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d160      	bne.n	8002de8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d111      	bne.n	8002d50 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d2c:	4b31      	ldr	r3, [pc, #196]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6892      	ldr	r2, [r2, #8]
 8002d3c:	0211      	lsls	r1, r2, #8
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68d2      	ldr	r2, [r2, #12]
 8002d42:	0912      	lsrs	r2, r2, #4
 8002d44:	0452      	lsls	r2, r2, #17
 8002d46:	430a      	orrs	r2, r1
 8002d48:	492a      	ldr	r1, [pc, #168]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	610b      	str	r3, [r1, #16]
 8002d4e:	e027      	b.n	8002da0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d112      	bne.n	8002d7c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d56:	4b27      	ldr	r3, [pc, #156]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6892      	ldr	r2, [r2, #8]
 8002d66:	0211      	lsls	r1, r2, #8
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6912      	ldr	r2, [r2, #16]
 8002d6c:	0852      	lsrs	r2, r2, #1
 8002d6e:	3a01      	subs	r2, #1
 8002d70:	0552      	lsls	r2, r2, #21
 8002d72:	430a      	orrs	r2, r1
 8002d74:	491f      	ldr	r1, [pc, #124]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	610b      	str	r3, [r1, #16]
 8002d7a:	e011      	b.n	8002da0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6892      	ldr	r2, [r2, #8]
 8002d8c:	0211      	lsls	r1, r2, #8
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6952      	ldr	r2, [r2, #20]
 8002d92:	0852      	lsrs	r2, r2, #1
 8002d94:	3a01      	subs	r2, #1
 8002d96:	0652      	lsls	r2, r2, #25
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	4916      	ldr	r1, [pc, #88]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002da0:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a13      	ldr	r2, [pc, #76]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002daa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dac:	f7fe fa52 	bl	8001254 <HAL_GetTick>
 8002db0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002db2:	e009      	b.n	8002dc8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002db4:	f7fe fa4e 	bl	8001254 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d902      	bls.n	8002dc8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	73fb      	strb	r3, [r7, #15]
          break;
 8002dc6:	e005      	b.n	8002dd4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dc8:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0ef      	beq.n	8002db4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ddc:	691a      	ldr	r2, [r3, #16]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	4904      	ldr	r1, [pc, #16]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000

08002df8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e06:	4b6a      	ldr	r3, [pc, #424]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d018      	beq.n	8002e44 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e12:	4b67      	ldr	r3, [pc, #412]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f003 0203 	and.w	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d10d      	bne.n	8002e3e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
       ||
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e2a:	4b61      	ldr	r3, [pc, #388]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	091b      	lsrs	r3, r3, #4
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
       ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d047      	beq.n	8002ece <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	73fb      	strb	r3, [r7, #15]
 8002e42:	e044      	b.n	8002ece <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b03      	cmp	r3, #3
 8002e4a:	d018      	beq.n	8002e7e <RCCEx_PLLSAI2_Config+0x86>
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d825      	bhi.n	8002e9c <RCCEx_PLLSAI2_Config+0xa4>
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d002      	beq.n	8002e5a <RCCEx_PLLSAI2_Config+0x62>
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d009      	beq.n	8002e6c <RCCEx_PLLSAI2_Config+0x74>
 8002e58:	e020      	b.n	8002e9c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e5a:	4b55      	ldr	r3, [pc, #340]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d11d      	bne.n	8002ea2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e6a:	e01a      	b.n	8002ea2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e6c:	4b50      	ldr	r3, [pc, #320]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d116      	bne.n	8002ea6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e7c:	e013      	b.n	8002ea6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e7e:	4b4c      	ldr	r3, [pc, #304]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10f      	bne.n	8002eaa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e8a:	4b49      	ldr	r3, [pc, #292]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e9a:	e006      	b.n	8002eaa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea0:	e004      	b.n	8002eac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ea2:	bf00      	nop
 8002ea4:	e002      	b.n	8002eac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ea6:	bf00      	nop
 8002ea8:	e000      	b.n	8002eac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002eaa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10d      	bne.n	8002ece <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eb2:	4b3f      	ldr	r3, [pc, #252]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6819      	ldr	r1, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	4939      	ldr	r1, [pc, #228]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d167      	bne.n	8002fa4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ed4:	4b36      	ldr	r3, [pc, #216]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a35      	ldr	r2, [pc, #212]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ede:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee0:	f7fe f9b8 	bl	8001254 <HAL_GetTick>
 8002ee4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ee6:	e009      	b.n	8002efc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ee8:	f7fe f9b4 	bl	8001254 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d902      	bls.n	8002efc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	73fb      	strb	r3, [r7, #15]
        break;
 8002efa:	e005      	b.n	8002f08 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002efc:	4b2c      	ldr	r3, [pc, #176]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1ef      	bne.n	8002ee8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d14a      	bne.n	8002fa4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d111      	bne.n	8002f38 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f14:	4b26      	ldr	r3, [pc, #152]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6892      	ldr	r2, [r2, #8]
 8002f24:	0211      	lsls	r1, r2, #8
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	68d2      	ldr	r2, [r2, #12]
 8002f2a:	0912      	lsrs	r2, r2, #4
 8002f2c:	0452      	lsls	r2, r2, #17
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	491f      	ldr	r1, [pc, #124]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	614b      	str	r3, [r1, #20]
 8002f36:	e011      	b.n	8002f5c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f38:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6892      	ldr	r2, [r2, #8]
 8002f48:	0211      	lsls	r1, r2, #8
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6912      	ldr	r2, [r2, #16]
 8002f4e:	0852      	lsrs	r2, r2, #1
 8002f50:	3a01      	subs	r2, #1
 8002f52:	0652      	lsls	r2, r2, #25
 8002f54:	430a      	orrs	r2, r1
 8002f56:	4916      	ldr	r1, [pc, #88]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f5c:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a13      	ldr	r2, [pc, #76]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f68:	f7fe f974 	bl	8001254 <HAL_GetTick>
 8002f6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f6e:	e009      	b.n	8002f84 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f70:	f7fe f970 	bl	8001254 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d902      	bls.n	8002f84 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	73fb      	strb	r3, [r7, #15]
          break;
 8002f82:	e005      	b.n	8002f90 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f84:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0ef      	beq.n	8002f70 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f96:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f98:	695a      	ldr	r2, [r3, #20]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	4904      	ldr	r1, [pc, #16]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000

08002fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e049      	b.n	800305a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fd ff28 	bl	8000e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	f000 fdb6 	bl	8003b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b01      	cmp	r3, #1
 8003076:	d001      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e04f      	b.n	800311c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a23      	ldr	r2, [pc, #140]	; (8003128 <HAL_TIM_Base_Start_IT+0xc4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d01d      	beq.n	80030da <HAL_TIM_Base_Start_IT+0x76>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a6:	d018      	beq.n	80030da <HAL_TIM_Base_Start_IT+0x76>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1f      	ldr	r2, [pc, #124]	; (800312c <HAL_TIM_Base_Start_IT+0xc8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <HAL_TIM_Base_Start_IT+0x76>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1e      	ldr	r2, [pc, #120]	; (8003130 <HAL_TIM_Base_Start_IT+0xcc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d00e      	beq.n	80030da <HAL_TIM_Base_Start_IT+0x76>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1c      	ldr	r2, [pc, #112]	; (8003134 <HAL_TIM_Base_Start_IT+0xd0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d009      	beq.n	80030da <HAL_TIM_Base_Start_IT+0x76>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1b      	ldr	r2, [pc, #108]	; (8003138 <HAL_TIM_Base_Start_IT+0xd4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d004      	beq.n	80030da <HAL_TIM_Base_Start_IT+0x76>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a19      	ldr	r2, [pc, #100]	; (800313c <HAL_TIM_Base_Start_IT+0xd8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d115      	bne.n	8003106 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	4b17      	ldr	r3, [pc, #92]	; (8003140 <HAL_TIM_Base_Start_IT+0xdc>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b06      	cmp	r3, #6
 80030ea:	d015      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0xb4>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f2:	d011      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003104:	e008      	b.n	8003118 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	e000      	b.n	800311a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003118:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	40012c00 	.word	0x40012c00
 800312c:	40000400 	.word	0x40000400
 8003130:	40000800 	.word	0x40000800
 8003134:	40000c00 	.word	0x40000c00
 8003138:	40013400 	.word	0x40013400
 800313c:	40014000 	.word	0x40014000
 8003140:	00010007 	.word	0x00010007

08003144 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0201 	bic.w	r2, r2, #1
 800315a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6a1a      	ldr	r2, [r3, #32]
 8003162:	f241 1311 	movw	r3, #4369	; 0x1111
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10f      	bne.n	800318c <HAL_TIM_Base_Stop_IT+0x48>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6a1a      	ldr	r2, [r3, #32]
 8003172:	f240 4344 	movw	r3, #1092	; 0x444
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d107      	bne.n	800318c <HAL_TIM_Base_Stop_IT+0x48>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0201 	bic.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e049      	b.n	8003248 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d106      	bne.n	80031ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7fd fde5 	bl	8000d98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3304      	adds	r3, #4
 80031de:	4619      	mov	r1, r3
 80031e0:	4610      	mov	r0, r2
 80031e2:	f000 fcbf 	bl	8003b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d109      	bne.n	8003278 <HAL_TIM_PWM_Start_IT+0x28>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	bf14      	ite	ne
 8003270:	2301      	movne	r3, #1
 8003272:	2300      	moveq	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	e03c      	b.n	80032f2 <HAL_TIM_PWM_Start_IT+0xa2>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b04      	cmp	r3, #4
 800327c:	d109      	bne.n	8003292 <HAL_TIM_PWM_Start_IT+0x42>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b01      	cmp	r3, #1
 8003288:	bf14      	ite	ne
 800328a:	2301      	movne	r3, #1
 800328c:	2300      	moveq	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	e02f      	b.n	80032f2 <HAL_TIM_PWM_Start_IT+0xa2>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b08      	cmp	r3, #8
 8003296:	d109      	bne.n	80032ac <HAL_TIM_PWM_Start_IT+0x5c>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	bf14      	ite	ne
 80032a4:	2301      	movne	r3, #1
 80032a6:	2300      	moveq	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	e022      	b.n	80032f2 <HAL_TIM_PWM_Start_IT+0xa2>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2b0c      	cmp	r3, #12
 80032b0:	d109      	bne.n	80032c6 <HAL_TIM_PWM_Start_IT+0x76>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	bf14      	ite	ne
 80032be:	2301      	movne	r3, #1
 80032c0:	2300      	moveq	r3, #0
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	e015      	b.n	80032f2 <HAL_TIM_PWM_Start_IT+0xa2>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b10      	cmp	r3, #16
 80032ca:	d109      	bne.n	80032e0 <HAL_TIM_PWM_Start_IT+0x90>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	bf14      	ite	ne
 80032d8:	2301      	movne	r3, #1
 80032da:	2300      	moveq	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	e008      	b.n	80032f2 <HAL_TIM_PWM_Start_IT+0xa2>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	bf14      	ite	ne
 80032ec:	2301      	movne	r3, #1
 80032ee:	2300      	moveq	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e0e7      	b.n	80034ca <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d104      	bne.n	800330a <HAL_TIM_PWM_Start_IT+0xba>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003308:	e023      	b.n	8003352 <HAL_TIM_PWM_Start_IT+0x102>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d104      	bne.n	800331a <HAL_TIM_PWM_Start_IT+0xca>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003318:	e01b      	b.n	8003352 <HAL_TIM_PWM_Start_IT+0x102>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b08      	cmp	r3, #8
 800331e:	d104      	bne.n	800332a <HAL_TIM_PWM_Start_IT+0xda>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003328:	e013      	b.n	8003352 <HAL_TIM_PWM_Start_IT+0x102>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b0c      	cmp	r3, #12
 800332e:	d104      	bne.n	800333a <HAL_TIM_PWM_Start_IT+0xea>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003338:	e00b      	b.n	8003352 <HAL_TIM_PWM_Start_IT+0x102>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b10      	cmp	r3, #16
 800333e:	d104      	bne.n	800334a <HAL_TIM_PWM_Start_IT+0xfa>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003348:	e003      	b.n	8003352 <HAL_TIM_PWM_Start_IT+0x102>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b0c      	cmp	r3, #12
 8003356:	d841      	bhi.n	80033dc <HAL_TIM_PWM_Start_IT+0x18c>
 8003358:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <HAL_TIM_PWM_Start_IT+0x110>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	08003395 	.word	0x08003395
 8003364:	080033dd 	.word	0x080033dd
 8003368:	080033dd 	.word	0x080033dd
 800336c:	080033dd 	.word	0x080033dd
 8003370:	080033a7 	.word	0x080033a7
 8003374:	080033dd 	.word	0x080033dd
 8003378:	080033dd 	.word	0x080033dd
 800337c:	080033dd 	.word	0x080033dd
 8003380:	080033b9 	.word	0x080033b9
 8003384:	080033dd 	.word	0x080033dd
 8003388:	080033dd 	.word	0x080033dd
 800338c:	080033dd 	.word	0x080033dd
 8003390:	080033cb 	.word	0x080033cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0202 	orr.w	r2, r2, #2
 80033a2:	60da      	str	r2, [r3, #12]
      break;
 80033a4:	e01d      	b.n	80033e2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0204 	orr.w	r2, r2, #4
 80033b4:	60da      	str	r2, [r3, #12]
      break;
 80033b6:	e014      	b.n	80033e2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0208 	orr.w	r2, r2, #8
 80033c6:	60da      	str	r2, [r3, #12]
      break;
 80033c8:	e00b      	b.n	80033e2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0210 	orr.w	r2, r2, #16
 80033d8:	60da      	str	r2, [r3, #12]
      break;
 80033da:	e002      	b.n	80033e2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
      break;
 80033e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d16f      	bne.n	80034c8 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2201      	movs	r2, #1
 80033ee:	6839      	ldr	r1, [r7, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 ff27 	bl	8004244 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a36      	ldr	r2, [pc, #216]	; (80034d4 <HAL_TIM_PWM_Start_IT+0x284>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d013      	beq.n	8003428 <HAL_TIM_PWM_Start_IT+0x1d8>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a34      	ldr	r2, [pc, #208]	; (80034d8 <HAL_TIM_PWM_Start_IT+0x288>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00e      	beq.n	8003428 <HAL_TIM_PWM_Start_IT+0x1d8>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a33      	ldr	r2, [pc, #204]	; (80034dc <HAL_TIM_PWM_Start_IT+0x28c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d009      	beq.n	8003428 <HAL_TIM_PWM_Start_IT+0x1d8>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a31      	ldr	r2, [pc, #196]	; (80034e0 <HAL_TIM_PWM_Start_IT+0x290>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d004      	beq.n	8003428 <HAL_TIM_PWM_Start_IT+0x1d8>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a30      	ldr	r2, [pc, #192]	; (80034e4 <HAL_TIM_PWM_Start_IT+0x294>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d101      	bne.n	800342c <HAL_TIM_PWM_Start_IT+0x1dc>
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <HAL_TIM_PWM_Start_IT+0x1de>
 800342c:	2300      	movs	r3, #0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d007      	beq.n	8003442 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003440:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a23      	ldr	r2, [pc, #140]	; (80034d4 <HAL_TIM_PWM_Start_IT+0x284>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d01d      	beq.n	8003488 <HAL_TIM_PWM_Start_IT+0x238>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003454:	d018      	beq.n	8003488 <HAL_TIM_PWM_Start_IT+0x238>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a23      	ldr	r2, [pc, #140]	; (80034e8 <HAL_TIM_PWM_Start_IT+0x298>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d013      	beq.n	8003488 <HAL_TIM_PWM_Start_IT+0x238>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a21      	ldr	r2, [pc, #132]	; (80034ec <HAL_TIM_PWM_Start_IT+0x29c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00e      	beq.n	8003488 <HAL_TIM_PWM_Start_IT+0x238>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a20      	ldr	r2, [pc, #128]	; (80034f0 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d009      	beq.n	8003488 <HAL_TIM_PWM_Start_IT+0x238>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a17      	ldr	r2, [pc, #92]	; (80034d8 <HAL_TIM_PWM_Start_IT+0x288>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d004      	beq.n	8003488 <HAL_TIM_PWM_Start_IT+0x238>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a16      	ldr	r2, [pc, #88]	; (80034dc <HAL_TIM_PWM_Start_IT+0x28c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d115      	bne.n	80034b4 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8003490:	4013      	ands	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b06      	cmp	r3, #6
 8003498:	d015      	beq.n	80034c6 <HAL_TIM_PWM_Start_IT+0x276>
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a0:	d011      	beq.n	80034c6 <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0201 	orr.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b2:	e008      	b.n	80034c6 <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	e000      	b.n	80034c8 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40012c00 	.word	0x40012c00
 80034d8:	40013400 	.word	0x40013400
 80034dc:	40014000 	.word	0x40014000
 80034e0:	40014400 	.word	0x40014400
 80034e4:	40014800 	.word	0x40014800
 80034e8:	40000400 	.word	0x40000400
 80034ec:	40000800 	.word	0x40000800
 80034f0:	40000c00 	.word	0x40000c00
 80034f4:	00010007 	.word	0x00010007

080034f8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b0c      	cmp	r3, #12
 800350a:	d841      	bhi.n	8003590 <HAL_TIM_PWM_Stop_IT+0x98>
 800350c:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800350e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003512:	bf00      	nop
 8003514:	08003549 	.word	0x08003549
 8003518:	08003591 	.word	0x08003591
 800351c:	08003591 	.word	0x08003591
 8003520:	08003591 	.word	0x08003591
 8003524:	0800355b 	.word	0x0800355b
 8003528:	08003591 	.word	0x08003591
 800352c:	08003591 	.word	0x08003591
 8003530:	08003591 	.word	0x08003591
 8003534:	0800356d 	.word	0x0800356d
 8003538:	08003591 	.word	0x08003591
 800353c:	08003591 	.word	0x08003591
 8003540:	08003591 	.word	0x08003591
 8003544:	0800357f 	.word	0x0800357f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0202 	bic.w	r2, r2, #2
 8003556:	60da      	str	r2, [r3, #12]
      break;
 8003558:	e01d      	b.n	8003596 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0204 	bic.w	r2, r2, #4
 8003568:	60da      	str	r2, [r3, #12]
      break;
 800356a:	e014      	b.n	8003596 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0208 	bic.w	r2, r2, #8
 800357a:	60da      	str	r2, [r3, #12]
      break;
 800357c:	e00b      	b.n	8003596 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0210 	bic.w	r2, r2, #16
 800358c:	60da      	str	r2, [r3, #12]
      break;
 800358e:	e002      	b.n	8003596 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
      break;
 8003594:	bf00      	nop
  }

  if (status == HAL_OK)
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	2b00      	cmp	r3, #0
 800359a:	f040 8081 	bne.w	80036a0 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2200      	movs	r2, #0
 80035a4:	6839      	ldr	r1, [r7, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fe4c 	bl	8004244 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a3e      	ldr	r2, [pc, #248]	; (80036ac <HAL_TIM_PWM_Stop_IT+0x1b4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <HAL_TIM_PWM_Stop_IT+0xe6>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a3d      	ldr	r2, [pc, #244]	; (80036b0 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00e      	beq.n	80035de <HAL_TIM_PWM_Stop_IT+0xe6>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a3b      	ldr	r2, [pc, #236]	; (80036b4 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d009      	beq.n	80035de <HAL_TIM_PWM_Stop_IT+0xe6>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a3a      	ldr	r2, [pc, #232]	; (80036b8 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d004      	beq.n	80035de <HAL_TIM_PWM_Stop_IT+0xe6>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a38      	ldr	r2, [pc, #224]	; (80036bc <HAL_TIM_PWM_Stop_IT+0x1c4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d101      	bne.n	80035e2 <HAL_TIM_PWM_Stop_IT+0xea>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <HAL_TIM_PWM_Stop_IT+0xec>
 80035e2:	2300      	movs	r3, #0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d017      	beq.n	8003618 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6a1a      	ldr	r2, [r3, #32]
 80035ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10f      	bne.n	8003618 <HAL_TIM_PWM_Stop_IT+0x120>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6a1a      	ldr	r2, [r3, #32]
 80035fe:	f240 4344 	movw	r3, #1092	; 0x444
 8003602:	4013      	ands	r3, r2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d107      	bne.n	8003618 <HAL_TIM_PWM_Stop_IT+0x120>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003616:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6a1a      	ldr	r2, [r3, #32]
 800361e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10f      	bne.n	8003648 <HAL_TIM_PWM_Stop_IT+0x150>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6a1a      	ldr	r2, [r3, #32]
 800362e:	f240 4344 	movw	r3, #1092	; 0x444
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d107      	bne.n	8003648 <HAL_TIM_PWM_Stop_IT+0x150>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0201 	bic.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d104      	bne.n	8003658 <HAL_TIM_PWM_Stop_IT+0x160>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003656:	e023      	b.n	80036a0 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b04      	cmp	r3, #4
 800365c:	d104      	bne.n	8003668 <HAL_TIM_PWM_Stop_IT+0x170>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003666:	e01b      	b.n	80036a0 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2b08      	cmp	r3, #8
 800366c:	d104      	bne.n	8003678 <HAL_TIM_PWM_Stop_IT+0x180>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003676:	e013      	b.n	80036a0 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b0c      	cmp	r3, #12
 800367c:	d104      	bne.n	8003688 <HAL_TIM_PWM_Stop_IT+0x190>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003686:	e00b      	b.n	80036a0 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b10      	cmp	r3, #16
 800368c:	d104      	bne.n	8003698 <HAL_TIM_PWM_Stop_IT+0x1a0>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003696:	e003      	b.n	80036a0 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40012c00 	.word	0x40012c00
 80036b0:	40013400 	.word	0x40013400
 80036b4:	40014000 	.word	0x40014000
 80036b8:	40014400 	.word	0x40014400
 80036bc:	40014800 	.word	0x40014800

080036c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d122      	bne.n	800371c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d11b      	bne.n	800371c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0202 	mvn.w	r2, #2
 80036ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fa1a 	bl	8003b3c <HAL_TIM_IC_CaptureCallback>
 8003708:	e005      	b.n	8003716 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fa0c 	bl	8003b28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7fd f847 	bl	80007a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b04      	cmp	r3, #4
 8003728:	d122      	bne.n	8003770 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b04      	cmp	r3, #4
 8003736:	d11b      	bne.n	8003770 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0204 	mvn.w	r2, #4
 8003740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2202      	movs	r2, #2
 8003746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f9f0 	bl	8003b3c <HAL_TIM_IC_CaptureCallback>
 800375c:	e005      	b.n	800376a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f9e2 	bl	8003b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7fd f81d 	bl	80007a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b08      	cmp	r3, #8
 800377c:	d122      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b08      	cmp	r3, #8
 800378a:	d11b      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0208 	mvn.w	r2, #8
 8003794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2204      	movs	r2, #4
 800379a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f9c6 	bl	8003b3c <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f9b8 	bl	8003b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7fc fff3 	bl	80007a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	2b10      	cmp	r3, #16
 80037d0:	d122      	bne.n	8003818 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b10      	cmp	r3, #16
 80037de:	d11b      	bne.n	8003818 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0210 	mvn.w	r2, #16
 80037e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2208      	movs	r2, #8
 80037ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f99c 	bl	8003b3c <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f98e 	bl	8003b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7fc ffc9 	bl	80007a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b01      	cmp	r3, #1
 8003824:	d10e      	bne.n	8003844 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b01      	cmp	r3, #1
 8003832:	d107      	bne.n	8003844 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0201 	mvn.w	r2, #1
 800383c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fc ff88 	bl	8000754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384e:	2b80      	cmp	r3, #128	; 0x80
 8003850:	d10e      	bne.n	8003870 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385c:	2b80      	cmp	r3, #128	; 0x80
 800385e:	d107      	bne.n	8003870 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fda2 	bl	80043b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800387e:	d10e      	bne.n	800389e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388a:	2b80      	cmp	r3, #128	; 0x80
 800388c:	d107      	bne.n	800389e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fd95 	bl	80043c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	d10e      	bne.n	80038ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b6:	2b40      	cmp	r3, #64	; 0x40
 80038b8:	d107      	bne.n	80038ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f943 	bl	8003b50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d10e      	bne.n	80038f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d107      	bne.n	80038f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f06f 0220 	mvn.w	r2, #32
 80038ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fd55 	bl	80043a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800391a:	2302      	movs	r3, #2
 800391c:	e0ff      	b.n	8003b1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b14      	cmp	r3, #20
 800392a:	f200 80f0 	bhi.w	8003b0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800392e:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003934:	08003989 	.word	0x08003989
 8003938:	08003b0f 	.word	0x08003b0f
 800393c:	08003b0f 	.word	0x08003b0f
 8003940:	08003b0f 	.word	0x08003b0f
 8003944:	080039c9 	.word	0x080039c9
 8003948:	08003b0f 	.word	0x08003b0f
 800394c:	08003b0f 	.word	0x08003b0f
 8003950:	08003b0f 	.word	0x08003b0f
 8003954:	08003a0b 	.word	0x08003a0b
 8003958:	08003b0f 	.word	0x08003b0f
 800395c:	08003b0f 	.word	0x08003b0f
 8003960:	08003b0f 	.word	0x08003b0f
 8003964:	08003a4b 	.word	0x08003a4b
 8003968:	08003b0f 	.word	0x08003b0f
 800396c:	08003b0f 	.word	0x08003b0f
 8003970:	08003b0f 	.word	0x08003b0f
 8003974:	08003a8d 	.word	0x08003a8d
 8003978:	08003b0f 	.word	0x08003b0f
 800397c:	08003b0f 	.word	0x08003b0f
 8003980:	08003b0f 	.word	0x08003b0f
 8003984:	08003acd 	.word	0x08003acd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68b9      	ldr	r1, [r7, #8]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f982 	bl	8003c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0208 	orr.w	r2, r2, #8
 80039a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0204 	bic.w	r2, r2, #4
 80039b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6999      	ldr	r1, [r3, #24]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	691a      	ldr	r2, [r3, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	619a      	str	r2, [r3, #24]
      break;
 80039c6:	e0a5      	b.n	8003b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f9f2 	bl	8003db8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6999      	ldr	r1, [r3, #24]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	021a      	lsls	r2, r3, #8
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	619a      	str	r2, [r3, #24]
      break;
 8003a08:	e084      	b.n	8003b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fa5b 	bl	8003ecc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f042 0208 	orr.w	r2, r2, #8
 8003a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69da      	ldr	r2, [r3, #28]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0204 	bic.w	r2, r2, #4
 8003a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69d9      	ldr	r1, [r3, #28]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	61da      	str	r2, [r3, #28]
      break;
 8003a48:	e064      	b.n	8003b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fac3 	bl	8003fdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69da      	ldr	r2, [r3, #28]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69d9      	ldr	r1, [r3, #28]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	021a      	lsls	r2, r3, #8
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	61da      	str	r2, [r3, #28]
      break;
 8003a8a:	e043      	b.n	8003b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fb0c 	bl	80040b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0208 	orr.w	r2, r2, #8
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0204 	bic.w	r2, r2, #4
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003aca:	e023      	b.n	8003b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fb50 	bl	8004178 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	021a      	lsls	r2, r3, #8
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b0c:	e002      	b.n	8003b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	75fb      	strb	r3, [r7, #23]
      break;
 8003b12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop

08003b28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a40      	ldr	r2, [pc, #256]	; (8003c78 <TIM_Base_SetConfig+0x114>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d013      	beq.n	8003ba4 <TIM_Base_SetConfig+0x40>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b82:	d00f      	beq.n	8003ba4 <TIM_Base_SetConfig+0x40>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a3d      	ldr	r2, [pc, #244]	; (8003c7c <TIM_Base_SetConfig+0x118>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00b      	beq.n	8003ba4 <TIM_Base_SetConfig+0x40>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a3c      	ldr	r2, [pc, #240]	; (8003c80 <TIM_Base_SetConfig+0x11c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d007      	beq.n	8003ba4 <TIM_Base_SetConfig+0x40>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a3b      	ldr	r2, [pc, #236]	; (8003c84 <TIM_Base_SetConfig+0x120>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d003      	beq.n	8003ba4 <TIM_Base_SetConfig+0x40>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a3a      	ldr	r2, [pc, #232]	; (8003c88 <TIM_Base_SetConfig+0x124>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d108      	bne.n	8003bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a2f      	ldr	r2, [pc, #188]	; (8003c78 <TIM_Base_SetConfig+0x114>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01f      	beq.n	8003bfe <TIM_Base_SetConfig+0x9a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc4:	d01b      	beq.n	8003bfe <TIM_Base_SetConfig+0x9a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a2c      	ldr	r2, [pc, #176]	; (8003c7c <TIM_Base_SetConfig+0x118>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d017      	beq.n	8003bfe <TIM_Base_SetConfig+0x9a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a2b      	ldr	r2, [pc, #172]	; (8003c80 <TIM_Base_SetConfig+0x11c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d013      	beq.n	8003bfe <TIM_Base_SetConfig+0x9a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a2a      	ldr	r2, [pc, #168]	; (8003c84 <TIM_Base_SetConfig+0x120>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00f      	beq.n	8003bfe <TIM_Base_SetConfig+0x9a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a29      	ldr	r2, [pc, #164]	; (8003c88 <TIM_Base_SetConfig+0x124>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00b      	beq.n	8003bfe <TIM_Base_SetConfig+0x9a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a28      	ldr	r2, [pc, #160]	; (8003c8c <TIM_Base_SetConfig+0x128>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d007      	beq.n	8003bfe <TIM_Base_SetConfig+0x9a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a27      	ldr	r2, [pc, #156]	; (8003c90 <TIM_Base_SetConfig+0x12c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d003      	beq.n	8003bfe <TIM_Base_SetConfig+0x9a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a26      	ldr	r2, [pc, #152]	; (8003c94 <TIM_Base_SetConfig+0x130>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d108      	bne.n	8003c10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a10      	ldr	r2, [pc, #64]	; (8003c78 <TIM_Base_SetConfig+0x114>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00f      	beq.n	8003c5c <TIM_Base_SetConfig+0xf8>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a12      	ldr	r2, [pc, #72]	; (8003c88 <TIM_Base_SetConfig+0x124>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00b      	beq.n	8003c5c <TIM_Base_SetConfig+0xf8>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a11      	ldr	r2, [pc, #68]	; (8003c8c <TIM_Base_SetConfig+0x128>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d007      	beq.n	8003c5c <TIM_Base_SetConfig+0xf8>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a10      	ldr	r2, [pc, #64]	; (8003c90 <TIM_Base_SetConfig+0x12c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d003      	beq.n	8003c5c <TIM_Base_SetConfig+0xf8>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a0f      	ldr	r2, [pc, #60]	; (8003c94 <TIM_Base_SetConfig+0x130>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d103      	bne.n	8003c64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	615a      	str	r2, [r3, #20]
}
 8003c6a:	bf00      	nop
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40012c00 	.word	0x40012c00
 8003c7c:	40000400 	.word	0x40000400
 8003c80:	40000800 	.word	0x40000800
 8003c84:	40000c00 	.word	0x40000c00
 8003c88:	40013400 	.word	0x40013400
 8003c8c:	40014000 	.word	0x40014000
 8003c90:	40014400 	.word	0x40014400
 8003c94:	40014800 	.word	0x40014800

08003c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f023 0201 	bic.w	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0303 	bic.w	r3, r3, #3
 8003cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f023 0302 	bic.w	r3, r3, #2
 8003ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a2c      	ldr	r2, [pc, #176]	; (8003da4 <TIM_OC1_SetConfig+0x10c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00f      	beq.n	8003d18 <TIM_OC1_SetConfig+0x80>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a2b      	ldr	r2, [pc, #172]	; (8003da8 <TIM_OC1_SetConfig+0x110>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00b      	beq.n	8003d18 <TIM_OC1_SetConfig+0x80>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a2a      	ldr	r2, [pc, #168]	; (8003dac <TIM_OC1_SetConfig+0x114>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d007      	beq.n	8003d18 <TIM_OC1_SetConfig+0x80>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a29      	ldr	r2, [pc, #164]	; (8003db0 <TIM_OC1_SetConfig+0x118>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_OC1_SetConfig+0x80>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a28      	ldr	r2, [pc, #160]	; (8003db4 <TIM_OC1_SetConfig+0x11c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d10c      	bne.n	8003d32 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f023 0308 	bic.w	r3, r3, #8
 8003d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f023 0304 	bic.w	r3, r3, #4
 8003d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a1b      	ldr	r2, [pc, #108]	; (8003da4 <TIM_OC1_SetConfig+0x10c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00f      	beq.n	8003d5a <TIM_OC1_SetConfig+0xc2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a1a      	ldr	r2, [pc, #104]	; (8003da8 <TIM_OC1_SetConfig+0x110>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00b      	beq.n	8003d5a <TIM_OC1_SetConfig+0xc2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a19      	ldr	r2, [pc, #100]	; (8003dac <TIM_OC1_SetConfig+0x114>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d007      	beq.n	8003d5a <TIM_OC1_SetConfig+0xc2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a18      	ldr	r2, [pc, #96]	; (8003db0 <TIM_OC1_SetConfig+0x118>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d003      	beq.n	8003d5a <TIM_OC1_SetConfig+0xc2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a17      	ldr	r2, [pc, #92]	; (8003db4 <TIM_OC1_SetConfig+0x11c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d111      	bne.n	8003d7e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	621a      	str	r2, [r3, #32]
}
 8003d98:	bf00      	nop
 8003d9a:	371c      	adds	r7, #28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	40012c00 	.word	0x40012c00
 8003da8:	40013400 	.word	0x40013400
 8003dac:	40014000 	.word	0x40014000
 8003db0:	40014400 	.word	0x40014400
 8003db4:	40014800 	.word	0x40014800

08003db8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	f023 0210 	bic.w	r2, r3, #16
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f023 0320 	bic.w	r3, r3, #32
 8003e06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a28      	ldr	r2, [pc, #160]	; (8003eb8 <TIM_OC2_SetConfig+0x100>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d003      	beq.n	8003e24 <TIM_OC2_SetConfig+0x6c>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a27      	ldr	r2, [pc, #156]	; (8003ebc <TIM_OC2_SetConfig+0x104>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d10d      	bne.n	8003e40 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a1d      	ldr	r2, [pc, #116]	; (8003eb8 <TIM_OC2_SetConfig+0x100>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00f      	beq.n	8003e68 <TIM_OC2_SetConfig+0xb0>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a1c      	ldr	r2, [pc, #112]	; (8003ebc <TIM_OC2_SetConfig+0x104>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00b      	beq.n	8003e68 <TIM_OC2_SetConfig+0xb0>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a1b      	ldr	r2, [pc, #108]	; (8003ec0 <TIM_OC2_SetConfig+0x108>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d007      	beq.n	8003e68 <TIM_OC2_SetConfig+0xb0>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a1a      	ldr	r2, [pc, #104]	; (8003ec4 <TIM_OC2_SetConfig+0x10c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <TIM_OC2_SetConfig+0xb0>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a19      	ldr	r2, [pc, #100]	; (8003ec8 <TIM_OC2_SetConfig+0x110>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d113      	bne.n	8003e90 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	621a      	str	r2, [r3, #32]
}
 8003eaa:	bf00      	nop
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40012c00 	.word	0x40012c00
 8003ebc:	40013400 	.word	0x40013400
 8003ec0:	40014000 	.word	0x40014000
 8003ec4:	40014400 	.word	0x40014400
 8003ec8:	40014800 	.word	0x40014800

08003ecc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0303 	bic.w	r3, r3, #3
 8003f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	021b      	lsls	r3, r3, #8
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a27      	ldr	r2, [pc, #156]	; (8003fc8 <TIM_OC3_SetConfig+0xfc>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d003      	beq.n	8003f36 <TIM_OC3_SetConfig+0x6a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a26      	ldr	r2, [pc, #152]	; (8003fcc <TIM_OC3_SetConfig+0x100>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d10d      	bne.n	8003f52 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	021b      	lsls	r3, r3, #8
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a1c      	ldr	r2, [pc, #112]	; (8003fc8 <TIM_OC3_SetConfig+0xfc>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00f      	beq.n	8003f7a <TIM_OC3_SetConfig+0xae>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a1b      	ldr	r2, [pc, #108]	; (8003fcc <TIM_OC3_SetConfig+0x100>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00b      	beq.n	8003f7a <TIM_OC3_SetConfig+0xae>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a1a      	ldr	r2, [pc, #104]	; (8003fd0 <TIM_OC3_SetConfig+0x104>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d007      	beq.n	8003f7a <TIM_OC3_SetConfig+0xae>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a19      	ldr	r2, [pc, #100]	; (8003fd4 <TIM_OC3_SetConfig+0x108>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d003      	beq.n	8003f7a <TIM_OC3_SetConfig+0xae>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a18      	ldr	r2, [pc, #96]	; (8003fd8 <TIM_OC3_SetConfig+0x10c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d113      	bne.n	8003fa2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	621a      	str	r2, [r3, #32]
}
 8003fbc:	bf00      	nop
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	40012c00 	.word	0x40012c00
 8003fcc:	40013400 	.word	0x40013400
 8003fd0:	40014000 	.word	0x40014000
 8003fd4:	40014400 	.word	0x40014400
 8003fd8:	40014800 	.word	0x40014800

08003fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800400a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800400e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800402a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	031b      	lsls	r3, r3, #12
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a18      	ldr	r2, [pc, #96]	; (800409c <TIM_OC4_SetConfig+0xc0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00f      	beq.n	8004060 <TIM_OC4_SetConfig+0x84>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a17      	ldr	r2, [pc, #92]	; (80040a0 <TIM_OC4_SetConfig+0xc4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00b      	beq.n	8004060 <TIM_OC4_SetConfig+0x84>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a16      	ldr	r2, [pc, #88]	; (80040a4 <TIM_OC4_SetConfig+0xc8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d007      	beq.n	8004060 <TIM_OC4_SetConfig+0x84>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a15      	ldr	r2, [pc, #84]	; (80040a8 <TIM_OC4_SetConfig+0xcc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d003      	beq.n	8004060 <TIM_OC4_SetConfig+0x84>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a14      	ldr	r2, [pc, #80]	; (80040ac <TIM_OC4_SetConfig+0xd0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d109      	bne.n	8004074 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004066:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	019b      	lsls	r3, r3, #6
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	621a      	str	r2, [r3, #32]
}
 800408e:	bf00      	nop
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40013400 	.word	0x40013400
 80040a4:	40014000 	.word	0x40014000
 80040a8:	40014400 	.word	0x40014400
 80040ac:	40014800 	.word	0x40014800

080040b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80040f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	041b      	lsls	r3, r3, #16
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a17      	ldr	r2, [pc, #92]	; (8004164 <TIM_OC5_SetConfig+0xb4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00f      	beq.n	800412a <TIM_OC5_SetConfig+0x7a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a16      	ldr	r2, [pc, #88]	; (8004168 <TIM_OC5_SetConfig+0xb8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00b      	beq.n	800412a <TIM_OC5_SetConfig+0x7a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a15      	ldr	r2, [pc, #84]	; (800416c <TIM_OC5_SetConfig+0xbc>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d007      	beq.n	800412a <TIM_OC5_SetConfig+0x7a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a14      	ldr	r2, [pc, #80]	; (8004170 <TIM_OC5_SetConfig+0xc0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d003      	beq.n	800412a <TIM_OC5_SetConfig+0x7a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a13      	ldr	r2, [pc, #76]	; (8004174 <TIM_OC5_SetConfig+0xc4>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d109      	bne.n	800413e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004130:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	021b      	lsls	r3, r3, #8
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	621a      	str	r2, [r3, #32]
}
 8004158:	bf00      	nop
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	40012c00 	.word	0x40012c00
 8004168:	40013400 	.word	0x40013400
 800416c:	40014000 	.word	0x40014000
 8004170:	40014400 	.word	0x40014400
 8004174:	40014800 	.word	0x40014800

08004178 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	051b      	lsls	r3, r3, #20
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a18      	ldr	r2, [pc, #96]	; (8004230 <TIM_OC6_SetConfig+0xb8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00f      	beq.n	80041f4 <TIM_OC6_SetConfig+0x7c>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a17      	ldr	r2, [pc, #92]	; (8004234 <TIM_OC6_SetConfig+0xbc>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00b      	beq.n	80041f4 <TIM_OC6_SetConfig+0x7c>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a16      	ldr	r2, [pc, #88]	; (8004238 <TIM_OC6_SetConfig+0xc0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d007      	beq.n	80041f4 <TIM_OC6_SetConfig+0x7c>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a15      	ldr	r2, [pc, #84]	; (800423c <TIM_OC6_SetConfig+0xc4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d003      	beq.n	80041f4 <TIM_OC6_SetConfig+0x7c>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a14      	ldr	r2, [pc, #80]	; (8004240 <TIM_OC6_SetConfig+0xc8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d109      	bne.n	8004208 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	029b      	lsls	r3, r3, #10
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	621a      	str	r2, [r3, #32]
}
 8004222:	bf00      	nop
 8004224:	371c      	adds	r7, #28
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40012c00 	.word	0x40012c00
 8004234:	40013400 	.word	0x40013400
 8004238:	40014000 	.word	0x40014000
 800423c:	40014400 	.word	0x40014400
 8004240:	40014800 	.word	0x40014800

08004244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	2201      	movs	r2, #1
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1a      	ldr	r2, [r3, #32]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	43db      	mvns	r3, r3
 8004266:	401a      	ands	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a1a      	ldr	r2, [r3, #32]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	431a      	orrs	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	621a      	str	r2, [r3, #32]
}
 8004282:	bf00      	nop
 8004284:	371c      	adds	r7, #28
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e068      	b.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a2e      	ldr	r2, [pc, #184]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d004      	beq.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a2d      	ldr	r2, [pc, #180]	; (800438c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d108      	bne.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a1e      	ldr	r2, [pc, #120]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d01d      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431a:	d018      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a1b      	ldr	r2, [pc, #108]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d013      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a1a      	ldr	r2, [pc, #104]	; (8004394 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00e      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a18      	ldr	r2, [pc, #96]	; (8004398 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d009      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a13      	ldr	r2, [pc, #76]	; (800438c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d004      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a14      	ldr	r2, [pc, #80]	; (800439c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d10c      	bne.n	8004368 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	4313      	orrs	r3, r2
 800435e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40012c00 	.word	0x40012c00
 800438c:	40013400 	.word	0x40013400
 8004390:	40000400 	.word	0x40000400
 8004394:	40000800 	.word	0x40000800
 8004398:	40000c00 	.word	0x40000c00
 800439c:	40014000 	.word	0x40014000

080043a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e040      	b.n	8004470 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d106      	bne.n	8004404 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7fc fd3c 	bl	8000e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2224      	movs	r2, #36	; 0x24
 8004408:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0201 	bic.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fc94 	bl	8004d48 <UART_SetConfig>
 8004420:	4603      	mov	r3, r0
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e022      	b.n	8004470 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 ff40 	bl	80052b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004446:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004456:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 ffc7 	bl	80053fc <UART_CheckIdleState>
 800446e:	4603      	mov	r3, r0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b08a      	sub	sp, #40	; 0x28
 800447c:	af02      	add	r7, sp, #8
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	4613      	mov	r3, r2
 8004486:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800448c:	2b20      	cmp	r3, #32
 800448e:	f040 8082 	bne.w	8004596 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <HAL_UART_Transmit+0x26>
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e07a      	b.n	8004598 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_UART_Transmit+0x38>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e073      	b.n	8004598 <HAL_UART_Transmit+0x120>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2221      	movs	r2, #33	; 0x21
 80044c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044c6:	f7fc fec5 	bl	8001254 <HAL_GetTick>
 80044ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	88fa      	ldrh	r2, [r7, #6]
 80044d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	88fa      	ldrh	r2, [r7, #6]
 80044d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e4:	d108      	bne.n	80044f8 <HAL_UART_Transmit+0x80>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d104      	bne.n	80044f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	e003      	b.n	8004500 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004508:	e02d      	b.n	8004566 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2200      	movs	r2, #0
 8004512:	2180      	movs	r1, #128	; 0x80
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 ffba 	bl	800548e <UART_WaitOnFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e039      	b.n	8004598 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10b      	bne.n	8004542 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	881a      	ldrh	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004536:	b292      	uxth	r2, r2
 8004538:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	3302      	adds	r3, #2
 800453e:	61bb      	str	r3, [r7, #24]
 8004540:	e008      	b.n	8004554 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	781a      	ldrb	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	b292      	uxth	r2, r2
 800454c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	3301      	adds	r3, #1
 8004552:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1cb      	bne.n	800450a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2200      	movs	r2, #0
 800457a:	2140      	movs	r1, #64	; 0x40
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 ff86 	bl	800548e <UART_WaitOnFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e005      	b.n	8004598 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	e000      	b.n	8004598 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004596:	2302      	movs	r3, #2
  }
}
 8004598:	4618      	mov	r0, r3
 800459a:	3720      	adds	r7, #32
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	; 0x28
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	f040 80bf 	bne.w	8004738 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <HAL_UART_Receive+0x26>
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e0b7      	b.n	800473a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_UART_Receive+0x38>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e0b0      	b.n	800473a <HAL_UART_Receive+0x19a>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2222      	movs	r2, #34	; 0x22
 80045ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045f4:	f7fc fe2e 	bl	8001254 <HAL_GetTick>
 80045f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	88fa      	ldrh	r2, [r7, #6]
 80045fe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	88fa      	ldrh	r2, [r7, #6]
 8004606:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004612:	d10e      	bne.n	8004632 <HAL_UART_Receive+0x92>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d105      	bne.n	8004628 <HAL_UART_Receive+0x88>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004622:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004626:	e02d      	b.n	8004684 <HAL_UART_Receive+0xe4>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	22ff      	movs	r2, #255	; 0xff
 800462c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004630:	e028      	b.n	8004684 <HAL_UART_Receive+0xe4>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10d      	bne.n	8004656 <HAL_UART_Receive+0xb6>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d104      	bne.n	800464c <HAL_UART_Receive+0xac>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	22ff      	movs	r2, #255	; 0xff
 8004646:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800464a:	e01b      	b.n	8004684 <HAL_UART_Receive+0xe4>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	227f      	movs	r2, #127	; 0x7f
 8004650:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004654:	e016      	b.n	8004684 <HAL_UART_Receive+0xe4>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800465e:	d10d      	bne.n	800467c <HAL_UART_Receive+0xdc>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d104      	bne.n	8004672 <HAL_UART_Receive+0xd2>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	227f      	movs	r2, #127	; 0x7f
 800466c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004670:	e008      	b.n	8004684 <HAL_UART_Receive+0xe4>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	223f      	movs	r2, #63	; 0x3f
 8004676:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800467a:	e003      	b.n	8004684 <HAL_UART_Receive+0xe4>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800468a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004694:	d108      	bne.n	80046a8 <HAL_UART_Receive+0x108>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d104      	bne.n	80046a8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	e003      	b.n	80046b0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80046b8:	e033      	b.n	8004722 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2200      	movs	r2, #0
 80046c2:	2120      	movs	r1, #32
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 fee2 	bl	800548e <UART_WaitOnFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e032      	b.n	800473a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10c      	bne.n	80046f4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	8a7b      	ldrh	r3, [r7, #18]
 80046e4:	4013      	ands	r3, r2
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	3302      	adds	r3, #2
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	e00d      	b.n	8004710 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	8a7b      	ldrh	r3, [r7, #18]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	4013      	ands	r3, r2
 8004704:	b2da      	uxtb	r2, r3
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	3301      	adds	r3, #1
 800470e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1c5      	bne.n	80046ba <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2220      	movs	r2, #32
 8004732:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004738:	2302      	movs	r3, #2
  }
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b0ba      	sub	sp, #232	; 0xe8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800476a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800476e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004772:	4013      	ands	r3, r2
 8004774:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004778:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d115      	bne.n	80047ac <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004784:	f003 0320 	and.w	r3, r3, #32
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00f      	beq.n	80047ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800478c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d009      	beq.n	80047ac <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 82a6 	beq.w	8004cee <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	4798      	blx	r3
      }
      return;
 80047aa:	e2a0      	b.n	8004cee <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80047ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 8117 	beq.w	80049e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80047c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80047c6:	4b85      	ldr	r3, [pc, #532]	; (80049dc <HAL_UART_IRQHandler+0x298>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 810a 	beq.w	80049e4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d011      	beq.n	8004800 <HAL_UART_IRQHandler+0xbc>
 80047dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00b      	beq.n	8004800 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2201      	movs	r2, #1
 80047ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047f6:	f043 0201 	orr.w	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d011      	beq.n	8004830 <HAL_UART_IRQHandler+0xec>
 800480c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00b      	beq.n	8004830 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2202      	movs	r2, #2
 800481e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004826:	f043 0204 	orr.w	r2, r3, #4
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	d011      	beq.n	8004860 <HAL_UART_IRQHandler+0x11c>
 800483c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00b      	beq.n	8004860 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2204      	movs	r2, #4
 800484e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004856:	f043 0202 	orr.w	r2, r3, #2
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b00      	cmp	r3, #0
 800486a:	d017      	beq.n	800489c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800486c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004870:	f003 0320 	and.w	r3, r3, #32
 8004874:	2b00      	cmp	r3, #0
 8004876:	d105      	bne.n	8004884 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800487c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00b      	beq.n	800489c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2208      	movs	r2, #8
 800488a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004892:	f043 0208 	orr.w	r2, r3, #8
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800489c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d012      	beq.n	80048ce <HAL_UART_IRQHandler+0x18a>
 80048a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00c      	beq.n	80048ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048c4:	f043 0220 	orr.w	r2, r3, #32
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 820c 	beq.w	8004cf2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80048da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00d      	beq.n	8004902 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004908:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004916:	2b40      	cmp	r3, #64	; 0x40
 8004918:	d005      	beq.n	8004926 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800491a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800491e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004922:	2b00      	cmp	r3, #0
 8004924:	d04f      	beq.n	80049c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fe75 	bl	8005616 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004936:	2b40      	cmp	r3, #64	; 0x40
 8004938:	d141      	bne.n	80049be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3308      	adds	r3, #8
 8004940:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004950:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004958:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3308      	adds	r3, #8
 8004962:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004966:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800496a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004972:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004976:	e841 2300 	strex	r3, r2, [r1]
 800497a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800497e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1d9      	bne.n	800493a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498a:	2b00      	cmp	r3, #0
 800498c:	d013      	beq.n	80049b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004992:	4a13      	ldr	r2, [pc, #76]	; (80049e0 <HAL_UART_IRQHandler+0x29c>)
 8004994:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499a:	4618      	mov	r0, r3
 800499c:	f7fc fdb5 	bl	800150a <HAL_DMA_Abort_IT>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d017      	beq.n	80049d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80049b0:	4610      	mov	r0, r2
 80049b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b4:	e00f      	b.n	80049d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f9b0 	bl	8004d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049bc:	e00b      	b.n	80049d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f9ac 	bl	8004d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c4:	e007      	b.n	80049d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f9a8 	bl	8004d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80049d4:	e18d      	b.n	8004cf2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d6:	bf00      	nop
    return;
 80049d8:	e18b      	b.n	8004cf2 <HAL_UART_IRQHandler+0x5ae>
 80049da:	bf00      	nop
 80049dc:	04000120 	.word	0x04000120
 80049e0:	080056dd 	.word	0x080056dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	f040 8146 	bne.w	8004c7a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f2:	f003 0310 	and.w	r3, r3, #16
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 813f 	beq.w	8004c7a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 8138 	beq.w	8004c7a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2210      	movs	r2, #16
 8004a10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	f040 80b4 	bne.w	8004b8a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a2e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 815f 	beq.w	8004cf6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a42:	429a      	cmp	r2, r3
 8004a44:	f080 8157 	bcs.w	8004cf6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0320 	and.w	r3, r3, #32
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f040 8085 	bne.w	8004b6e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a70:	e853 3f00 	ldrex	r3, [r3]
 8004a74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a92:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1da      	bne.n	8004a64 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ac0:	f023 0301 	bic.w	r3, r3, #1
 8004ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3308      	adds	r3, #8
 8004ace:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ad2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ad6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ada:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ade:	e841 2300 	strex	r3, r2, [r1]
 8004ae2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1e1      	bne.n	8004aae <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3308      	adds	r3, #8
 8004af0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b16:	e841 2300 	strex	r3, r2, [r1]
 8004b1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1e3      	bne.n	8004aea <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b3e:	f023 0310 	bic.w	r3, r3, #16
 8004b42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b50:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b52:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b58:	e841 2300 	strex	r3, r2, [r1]
 8004b5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e4      	bne.n	8004b2e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fc fc90 	bl	800148e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	4619      	mov	r1, r3
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f8d4 	bl	8004d30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b88:	e0b5      	b.n	8004cf6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 80a7 	beq.w	8004cfa <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004bac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 80a2 	beq.w	8004cfa <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bd8:	647b      	str	r3, [r7, #68]	; 0x44
 8004bda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e4      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	623b      	str	r3, [r7, #32]
   return(result);
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3308      	adds	r3, #8
 8004c0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c10:	633a      	str	r2, [r7, #48]	; 0x30
 8004c12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e3      	bne.n	8004bec <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	e853 3f00 	ldrex	r3, [r3]
 8004c42:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0310 	bic.w	r3, r3, #16
 8004c4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5c:	69b9      	ldr	r1, [r7, #24]
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	e841 2300 	strex	r3, r2, [r1]
 8004c64:	617b      	str	r3, [r7, #20]
   return(result);
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e4      	bne.n	8004c36 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c70:	4619      	mov	r1, r3
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f85c 	bl	8004d30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c78:	e03f      	b.n	8004cfa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00e      	beq.n	8004ca4 <HAL_UART_IRQHandler+0x560>
 8004c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d008      	beq.n	8004ca4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fd5d 	bl	800575c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ca2:	e02d      	b.n	8004d00 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00e      	beq.n	8004cce <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d008      	beq.n	8004cce <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01c      	beq.n	8004cfe <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	4798      	blx	r3
    }
    return;
 8004ccc:	e017      	b.n	8004cfe <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d012      	beq.n	8004d00 <HAL_UART_IRQHandler+0x5bc>
 8004cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00c      	beq.n	8004d00 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fd0e 	bl	8005708 <UART_EndTransmit_IT>
    return;
 8004cec:	e008      	b.n	8004d00 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004cee:	bf00      	nop
 8004cf0:	e006      	b.n	8004d00 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004cf2:	bf00      	nop
 8004cf4:	e004      	b.n	8004d00 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004cf6:	bf00      	nop
 8004cf8:	e002      	b.n	8004d00 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004cfa:	bf00      	nop
 8004cfc:	e000      	b.n	8004d00 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004cfe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004d00:	37e8      	adds	r7, #232	; 0xe8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop

08004d08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d4c:	b08a      	sub	sp, #40	; 0x28
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	431a      	orrs	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	4ba4      	ldr	r3, [pc, #656]	; (8005008 <UART_SetConfig+0x2c0>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	6812      	ldr	r2, [r2, #0]
 8004d7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d80:	430b      	orrs	r3, r1
 8004d82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a99      	ldr	r2, [pc, #612]	; (800500c <UART_SetConfig+0x2c4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d004      	beq.n	8004db4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db0:	4313      	orrs	r3, r2
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a90      	ldr	r2, [pc, #576]	; (8005010 <UART_SetConfig+0x2c8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d126      	bne.n	8004e20 <UART_SetConfig+0xd8>
 8004dd2:	4b90      	ldr	r3, [pc, #576]	; (8005014 <UART_SetConfig+0x2cc>)
 8004dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d81b      	bhi.n	8004e18 <UART_SetConfig+0xd0>
 8004de0:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <UART_SetConfig+0xa0>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004df9 	.word	0x08004df9
 8004dec:	08004e09 	.word	0x08004e09
 8004df0:	08004e01 	.word	0x08004e01
 8004df4:	08004e11 	.word	0x08004e11
 8004df8:	2301      	movs	r3, #1
 8004dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfe:	e116      	b.n	800502e <UART_SetConfig+0x2e6>
 8004e00:	2302      	movs	r3, #2
 8004e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e06:	e112      	b.n	800502e <UART_SetConfig+0x2e6>
 8004e08:	2304      	movs	r3, #4
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0e:	e10e      	b.n	800502e <UART_SetConfig+0x2e6>
 8004e10:	2308      	movs	r3, #8
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e16:	e10a      	b.n	800502e <UART_SetConfig+0x2e6>
 8004e18:	2310      	movs	r3, #16
 8004e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e1e:	e106      	b.n	800502e <UART_SetConfig+0x2e6>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a7c      	ldr	r2, [pc, #496]	; (8005018 <UART_SetConfig+0x2d0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d138      	bne.n	8004e9c <UART_SetConfig+0x154>
 8004e2a:	4b7a      	ldr	r3, [pc, #488]	; (8005014 <UART_SetConfig+0x2cc>)
 8004e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e30:	f003 030c 	and.w	r3, r3, #12
 8004e34:	2b0c      	cmp	r3, #12
 8004e36:	d82d      	bhi.n	8004e94 <UART_SetConfig+0x14c>
 8004e38:	a201      	add	r2, pc, #4	; (adr r2, 8004e40 <UART_SetConfig+0xf8>)
 8004e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3e:	bf00      	nop
 8004e40:	08004e75 	.word	0x08004e75
 8004e44:	08004e95 	.word	0x08004e95
 8004e48:	08004e95 	.word	0x08004e95
 8004e4c:	08004e95 	.word	0x08004e95
 8004e50:	08004e85 	.word	0x08004e85
 8004e54:	08004e95 	.word	0x08004e95
 8004e58:	08004e95 	.word	0x08004e95
 8004e5c:	08004e95 	.word	0x08004e95
 8004e60:	08004e7d 	.word	0x08004e7d
 8004e64:	08004e95 	.word	0x08004e95
 8004e68:	08004e95 	.word	0x08004e95
 8004e6c:	08004e95 	.word	0x08004e95
 8004e70:	08004e8d 	.word	0x08004e8d
 8004e74:	2300      	movs	r3, #0
 8004e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e7a:	e0d8      	b.n	800502e <UART_SetConfig+0x2e6>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e82:	e0d4      	b.n	800502e <UART_SetConfig+0x2e6>
 8004e84:	2304      	movs	r3, #4
 8004e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e8a:	e0d0      	b.n	800502e <UART_SetConfig+0x2e6>
 8004e8c:	2308      	movs	r3, #8
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e92:	e0cc      	b.n	800502e <UART_SetConfig+0x2e6>
 8004e94:	2310      	movs	r3, #16
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9a:	e0c8      	b.n	800502e <UART_SetConfig+0x2e6>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a5e      	ldr	r2, [pc, #376]	; (800501c <UART_SetConfig+0x2d4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d125      	bne.n	8004ef2 <UART_SetConfig+0x1aa>
 8004ea6:	4b5b      	ldr	r3, [pc, #364]	; (8005014 <UART_SetConfig+0x2cc>)
 8004ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004eb0:	2b30      	cmp	r3, #48	; 0x30
 8004eb2:	d016      	beq.n	8004ee2 <UART_SetConfig+0x19a>
 8004eb4:	2b30      	cmp	r3, #48	; 0x30
 8004eb6:	d818      	bhi.n	8004eea <UART_SetConfig+0x1a2>
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d00a      	beq.n	8004ed2 <UART_SetConfig+0x18a>
 8004ebc:	2b20      	cmp	r3, #32
 8004ebe:	d814      	bhi.n	8004eea <UART_SetConfig+0x1a2>
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d002      	beq.n	8004eca <UART_SetConfig+0x182>
 8004ec4:	2b10      	cmp	r3, #16
 8004ec6:	d008      	beq.n	8004eda <UART_SetConfig+0x192>
 8004ec8:	e00f      	b.n	8004eea <UART_SetConfig+0x1a2>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ed0:	e0ad      	b.n	800502e <UART_SetConfig+0x2e6>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ed8:	e0a9      	b.n	800502e <UART_SetConfig+0x2e6>
 8004eda:	2304      	movs	r3, #4
 8004edc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee0:	e0a5      	b.n	800502e <UART_SetConfig+0x2e6>
 8004ee2:	2308      	movs	r3, #8
 8004ee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee8:	e0a1      	b.n	800502e <UART_SetConfig+0x2e6>
 8004eea:	2310      	movs	r3, #16
 8004eec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ef0:	e09d      	b.n	800502e <UART_SetConfig+0x2e6>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a4a      	ldr	r2, [pc, #296]	; (8005020 <UART_SetConfig+0x2d8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d125      	bne.n	8004f48 <UART_SetConfig+0x200>
 8004efc:	4b45      	ldr	r3, [pc, #276]	; (8005014 <UART_SetConfig+0x2cc>)
 8004efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f06:	2bc0      	cmp	r3, #192	; 0xc0
 8004f08:	d016      	beq.n	8004f38 <UART_SetConfig+0x1f0>
 8004f0a:	2bc0      	cmp	r3, #192	; 0xc0
 8004f0c:	d818      	bhi.n	8004f40 <UART_SetConfig+0x1f8>
 8004f0e:	2b80      	cmp	r3, #128	; 0x80
 8004f10:	d00a      	beq.n	8004f28 <UART_SetConfig+0x1e0>
 8004f12:	2b80      	cmp	r3, #128	; 0x80
 8004f14:	d814      	bhi.n	8004f40 <UART_SetConfig+0x1f8>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <UART_SetConfig+0x1d8>
 8004f1a:	2b40      	cmp	r3, #64	; 0x40
 8004f1c:	d008      	beq.n	8004f30 <UART_SetConfig+0x1e8>
 8004f1e:	e00f      	b.n	8004f40 <UART_SetConfig+0x1f8>
 8004f20:	2300      	movs	r3, #0
 8004f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f26:	e082      	b.n	800502e <UART_SetConfig+0x2e6>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f2e:	e07e      	b.n	800502e <UART_SetConfig+0x2e6>
 8004f30:	2304      	movs	r3, #4
 8004f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f36:	e07a      	b.n	800502e <UART_SetConfig+0x2e6>
 8004f38:	2308      	movs	r3, #8
 8004f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f3e:	e076      	b.n	800502e <UART_SetConfig+0x2e6>
 8004f40:	2310      	movs	r3, #16
 8004f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f46:	e072      	b.n	800502e <UART_SetConfig+0x2e6>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a35      	ldr	r2, [pc, #212]	; (8005024 <UART_SetConfig+0x2dc>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d12a      	bne.n	8004fa8 <UART_SetConfig+0x260>
 8004f52:	4b30      	ldr	r3, [pc, #192]	; (8005014 <UART_SetConfig+0x2cc>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f60:	d01a      	beq.n	8004f98 <UART_SetConfig+0x250>
 8004f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f66:	d81b      	bhi.n	8004fa0 <UART_SetConfig+0x258>
 8004f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f6c:	d00c      	beq.n	8004f88 <UART_SetConfig+0x240>
 8004f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f72:	d815      	bhi.n	8004fa0 <UART_SetConfig+0x258>
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <UART_SetConfig+0x238>
 8004f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f7c:	d008      	beq.n	8004f90 <UART_SetConfig+0x248>
 8004f7e:	e00f      	b.n	8004fa0 <UART_SetConfig+0x258>
 8004f80:	2300      	movs	r3, #0
 8004f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f86:	e052      	b.n	800502e <UART_SetConfig+0x2e6>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f8e:	e04e      	b.n	800502e <UART_SetConfig+0x2e6>
 8004f90:	2304      	movs	r3, #4
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f96:	e04a      	b.n	800502e <UART_SetConfig+0x2e6>
 8004f98:	2308      	movs	r3, #8
 8004f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f9e:	e046      	b.n	800502e <UART_SetConfig+0x2e6>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fa6:	e042      	b.n	800502e <UART_SetConfig+0x2e6>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a17      	ldr	r2, [pc, #92]	; (800500c <UART_SetConfig+0x2c4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d13a      	bne.n	8005028 <UART_SetConfig+0x2e0>
 8004fb2:	4b18      	ldr	r3, [pc, #96]	; (8005014 <UART_SetConfig+0x2cc>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fc0:	d01a      	beq.n	8004ff8 <UART_SetConfig+0x2b0>
 8004fc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fc6:	d81b      	bhi.n	8005000 <UART_SetConfig+0x2b8>
 8004fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fcc:	d00c      	beq.n	8004fe8 <UART_SetConfig+0x2a0>
 8004fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fd2:	d815      	bhi.n	8005000 <UART_SetConfig+0x2b8>
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <UART_SetConfig+0x298>
 8004fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fdc:	d008      	beq.n	8004ff0 <UART_SetConfig+0x2a8>
 8004fde:	e00f      	b.n	8005000 <UART_SetConfig+0x2b8>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe6:	e022      	b.n	800502e <UART_SetConfig+0x2e6>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fee:	e01e      	b.n	800502e <UART_SetConfig+0x2e6>
 8004ff0:	2304      	movs	r3, #4
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff6:	e01a      	b.n	800502e <UART_SetConfig+0x2e6>
 8004ff8:	2308      	movs	r3, #8
 8004ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ffe:	e016      	b.n	800502e <UART_SetConfig+0x2e6>
 8005000:	2310      	movs	r3, #16
 8005002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005006:	e012      	b.n	800502e <UART_SetConfig+0x2e6>
 8005008:	efff69f3 	.word	0xefff69f3
 800500c:	40008000 	.word	0x40008000
 8005010:	40013800 	.word	0x40013800
 8005014:	40021000 	.word	0x40021000
 8005018:	40004400 	.word	0x40004400
 800501c:	40004800 	.word	0x40004800
 8005020:	40004c00 	.word	0x40004c00
 8005024:	40005000 	.word	0x40005000
 8005028:	2310      	movs	r3, #16
 800502a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a9f      	ldr	r2, [pc, #636]	; (80052b0 <UART_SetConfig+0x568>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d17a      	bne.n	800512e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005038:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800503c:	2b08      	cmp	r3, #8
 800503e:	d824      	bhi.n	800508a <UART_SetConfig+0x342>
 8005040:	a201      	add	r2, pc, #4	; (adr r2, 8005048 <UART_SetConfig+0x300>)
 8005042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005046:	bf00      	nop
 8005048:	0800506d 	.word	0x0800506d
 800504c:	0800508b 	.word	0x0800508b
 8005050:	08005075 	.word	0x08005075
 8005054:	0800508b 	.word	0x0800508b
 8005058:	0800507b 	.word	0x0800507b
 800505c:	0800508b 	.word	0x0800508b
 8005060:	0800508b 	.word	0x0800508b
 8005064:	0800508b 	.word	0x0800508b
 8005068:	08005083 	.word	0x08005083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800506c:	f7fd fa5a 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8005070:	61f8      	str	r0, [r7, #28]
        break;
 8005072:	e010      	b.n	8005096 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005074:	4b8f      	ldr	r3, [pc, #572]	; (80052b4 <UART_SetConfig+0x56c>)
 8005076:	61fb      	str	r3, [r7, #28]
        break;
 8005078:	e00d      	b.n	8005096 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800507a:	f7fd f9bb 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 800507e:	61f8      	str	r0, [r7, #28]
        break;
 8005080:	e009      	b.n	8005096 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005086:	61fb      	str	r3, [r7, #28]
        break;
 8005088:	e005      	b.n	8005096 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005094:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80fb 	beq.w	8005294 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	4413      	add	r3, r2
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d305      	bcc.n	80050ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d903      	bls.n	80050c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050c0:	e0e8      	b.n	8005294 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	2200      	movs	r2, #0
 80050c6:	461c      	mov	r4, r3
 80050c8:	4615      	mov	r5, r2
 80050ca:	f04f 0200 	mov.w	r2, #0
 80050ce:	f04f 0300 	mov.w	r3, #0
 80050d2:	022b      	lsls	r3, r5, #8
 80050d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80050d8:	0222      	lsls	r2, r4, #8
 80050da:	68f9      	ldr	r1, [r7, #12]
 80050dc:	6849      	ldr	r1, [r1, #4]
 80050de:	0849      	lsrs	r1, r1, #1
 80050e0:	2000      	movs	r0, #0
 80050e2:	4688      	mov	r8, r1
 80050e4:	4681      	mov	r9, r0
 80050e6:	eb12 0a08 	adds.w	sl, r2, r8
 80050ea:	eb43 0b09 	adc.w	fp, r3, r9
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	603b      	str	r3, [r7, #0]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050fc:	4650      	mov	r0, sl
 80050fe:	4659      	mov	r1, fp
 8005100:	f7fb f8ce 	bl	80002a0 <__aeabi_uldivmod>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	4613      	mov	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005112:	d308      	bcc.n	8005126 <UART_SetConfig+0x3de>
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800511a:	d204      	bcs.n	8005126 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	60da      	str	r2, [r3, #12]
 8005124:	e0b6      	b.n	8005294 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800512c:	e0b2      	b.n	8005294 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005136:	d15e      	bne.n	80051f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005138:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800513c:	2b08      	cmp	r3, #8
 800513e:	d828      	bhi.n	8005192 <UART_SetConfig+0x44a>
 8005140:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <UART_SetConfig+0x400>)
 8005142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005146:	bf00      	nop
 8005148:	0800516d 	.word	0x0800516d
 800514c:	08005175 	.word	0x08005175
 8005150:	0800517d 	.word	0x0800517d
 8005154:	08005193 	.word	0x08005193
 8005158:	08005183 	.word	0x08005183
 800515c:	08005193 	.word	0x08005193
 8005160:	08005193 	.word	0x08005193
 8005164:	08005193 	.word	0x08005193
 8005168:	0800518b 	.word	0x0800518b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800516c:	f7fd f9da 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8005170:	61f8      	str	r0, [r7, #28]
        break;
 8005172:	e014      	b.n	800519e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005174:	f7fd f9ec 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 8005178:	61f8      	str	r0, [r7, #28]
        break;
 800517a:	e010      	b.n	800519e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800517c:	4b4d      	ldr	r3, [pc, #308]	; (80052b4 <UART_SetConfig+0x56c>)
 800517e:	61fb      	str	r3, [r7, #28]
        break;
 8005180:	e00d      	b.n	800519e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005182:	f7fd f937 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 8005186:	61f8      	str	r0, [r7, #28]
        break;
 8005188:	e009      	b.n	800519e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800518a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800518e:	61fb      	str	r3, [r7, #28]
        break;
 8005190:	e005      	b.n	800519e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005192:	2300      	movs	r3, #0
 8005194:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800519c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d077      	beq.n	8005294 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	005a      	lsls	r2, r3, #1
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	085b      	lsrs	r3, r3, #1
 80051ae:	441a      	add	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	2b0f      	cmp	r3, #15
 80051be:	d916      	bls.n	80051ee <UART_SetConfig+0x4a6>
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c6:	d212      	bcs.n	80051ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	f023 030f 	bic.w	r3, r3, #15
 80051d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	085b      	lsrs	r3, r3, #1
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	b29a      	uxth	r2, r3
 80051de:	8afb      	ldrh	r3, [r7, #22]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	8afa      	ldrh	r2, [r7, #22]
 80051ea:	60da      	str	r2, [r3, #12]
 80051ec:	e052      	b.n	8005294 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051f4:	e04e      	b.n	8005294 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d827      	bhi.n	800524e <UART_SetConfig+0x506>
 80051fe:	a201      	add	r2, pc, #4	; (adr r2, 8005204 <UART_SetConfig+0x4bc>)
 8005200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005204:	08005229 	.word	0x08005229
 8005208:	08005231 	.word	0x08005231
 800520c:	08005239 	.word	0x08005239
 8005210:	0800524f 	.word	0x0800524f
 8005214:	0800523f 	.word	0x0800523f
 8005218:	0800524f 	.word	0x0800524f
 800521c:	0800524f 	.word	0x0800524f
 8005220:	0800524f 	.word	0x0800524f
 8005224:	08005247 	.word	0x08005247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005228:	f7fd f97c 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 800522c:	61f8      	str	r0, [r7, #28]
        break;
 800522e:	e014      	b.n	800525a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005230:	f7fd f98e 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 8005234:	61f8      	str	r0, [r7, #28]
        break;
 8005236:	e010      	b.n	800525a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005238:	4b1e      	ldr	r3, [pc, #120]	; (80052b4 <UART_SetConfig+0x56c>)
 800523a:	61fb      	str	r3, [r7, #28]
        break;
 800523c:	e00d      	b.n	800525a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800523e:	f7fd f8d9 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 8005242:	61f8      	str	r0, [r7, #28]
        break;
 8005244:	e009      	b.n	800525a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800524a:	61fb      	str	r3, [r7, #28]
        break;
 800524c:	e005      	b.n	800525a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005258:	bf00      	nop
    }

    if (pclk != 0U)
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d019      	beq.n	8005294 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	085a      	lsrs	r2, r3, #1
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	441a      	add	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005272:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	2b0f      	cmp	r3, #15
 8005278:	d909      	bls.n	800528e <UART_SetConfig+0x546>
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005280:	d205      	bcs.n	800528e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	b29a      	uxth	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60da      	str	r2, [r3, #12]
 800528c:	e002      	b.n	8005294 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80052a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3728      	adds	r7, #40	; 0x28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ae:	bf00      	nop
 80052b0:	40008000 	.word	0x40008000
 80052b4:	00f42400 	.word	0x00f42400

080052b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01a      	beq.n	80053ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053b6:	d10a      	bne.n	80053ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	605a      	str	r2, [r3, #4]
  }
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af02      	add	r7, sp, #8
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800540c:	f7fb ff22 	bl	8001254 <HAL_GetTick>
 8005410:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b08      	cmp	r3, #8
 800541e:	d10e      	bne.n	800543e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005420:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f82d 	bl	800548e <UART_WaitOnFlagUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e023      	b.n	8005486 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b04      	cmp	r3, #4
 800544a:	d10e      	bne.n	800546a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800544c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f817 	bl	800548e <UART_WaitOnFlagUntilTimeout>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e00d      	b.n	8005486 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2220      	movs	r2, #32
 800546e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2220      	movs	r2, #32
 8005474:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b09c      	sub	sp, #112	; 0x70
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	603b      	str	r3, [r7, #0]
 800549a:	4613      	mov	r3, r2
 800549c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800549e:	e0a5      	b.n	80055ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a6:	f000 80a1 	beq.w	80055ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054aa:	f7fb fed3 	bl	8001254 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d302      	bcc.n	80054c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80054ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d13e      	bne.n	800553e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c8:	e853 3f00 	ldrex	r3, [r3]
 80054cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054d4:	667b      	str	r3, [r7, #100]	; 0x64
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054e6:	e841 2300 	strex	r3, r2, [r1]
 80054ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1e6      	bne.n	80054c0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3308      	adds	r3, #8
 80054f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005504:	f023 0301 	bic.w	r3, r3, #1
 8005508:	663b      	str	r3, [r7, #96]	; 0x60
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3308      	adds	r3, #8
 8005510:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005512:	64ba      	str	r2, [r7, #72]	; 0x48
 8005514:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005518:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e5      	bne.n	80054f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2220      	movs	r2, #32
 8005530:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e067      	b.n	800560e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d04f      	beq.n	80055ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800555a:	d147      	bne.n	80055ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005564:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	e853 3f00 	ldrex	r3, [r3]
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800557a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005584:	637b      	str	r3, [r7, #52]	; 0x34
 8005586:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005588:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800558a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800558c:	e841 2300 	strex	r3, r2, [r1]
 8005590:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e6      	bne.n	8005566 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3308      	adds	r3, #8
 800559e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	e853 3f00 	ldrex	r3, [r3]
 80055a6:	613b      	str	r3, [r7, #16]
   return(result);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f023 0301 	bic.w	r3, r3, #1
 80055ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3308      	adds	r3, #8
 80055b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055b8:	623a      	str	r2, [r7, #32]
 80055ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055bc:	69f9      	ldr	r1, [r7, #28]
 80055be:	6a3a      	ldr	r2, [r7, #32]
 80055c0:	e841 2300 	strex	r3, r2, [r1]
 80055c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1e5      	bne.n	8005598 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2220      	movs	r2, #32
 80055d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2220      	movs	r2, #32
 80055d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2220      	movs	r2, #32
 80055dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e010      	b.n	800560e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69da      	ldr	r2, [r3, #28]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4013      	ands	r3, r2
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	bf0c      	ite	eq
 80055fc:	2301      	moveq	r3, #1
 80055fe:	2300      	movne	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	461a      	mov	r2, r3
 8005604:	79fb      	ldrb	r3, [r7, #7]
 8005606:	429a      	cmp	r2, r3
 8005608:	f43f af4a 	beq.w	80054a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3770      	adds	r7, #112	; 0x70
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005616:	b480      	push	{r7}
 8005618:	b095      	sub	sp, #84	; 0x54
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563c:	643b      	str	r3, [r7, #64]	; 0x40
 800563e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800564a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e6      	bne.n	800561e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3308      	adds	r3, #8
 8005656:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	e853 3f00 	ldrex	r3, [r3]
 800565e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	f023 0301 	bic.w	r3, r3, #1
 8005666:	64bb      	str	r3, [r7, #72]	; 0x48
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3308      	adds	r3, #8
 800566e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005670:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005672:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005674:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005678:	e841 2300 	strex	r3, r2, [r1]
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1e5      	bne.n	8005650 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005688:	2b01      	cmp	r3, #1
 800568a:	d118      	bne.n	80056be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	60bb      	str	r3, [r7, #8]
   return(result);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f023 0310 	bic.w	r3, r3, #16
 80056a0:	647b      	str	r3, [r7, #68]	; 0x44
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056aa:	61bb      	str	r3, [r7, #24]
 80056ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	6979      	ldr	r1, [r7, #20]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	613b      	str	r3, [r7, #16]
   return(result);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e6      	bne.n	800568c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	665a      	str	r2, [r3, #100]	; 0x64
}
 80056d0:	bf00      	nop
 80056d2:	3754      	adds	r7, #84	; 0x54
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7ff fb0e 	bl	8004d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005700:	bf00      	nop
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	60bb      	str	r3, [r7, #8]
   return(result);
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005724:	61fb      	str	r3, [r7, #28]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	61bb      	str	r3, [r7, #24]
 8005730:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	6979      	ldr	r1, [r7, #20]
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	613b      	str	r3, [r7, #16]
   return(result);
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e6      	bne.n	8005710 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff fada 	bl	8004d08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005754:	bf00      	nop
 8005756:	3720      	adds	r7, #32
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <__errno>:
 8005770:	4b01      	ldr	r3, [pc, #4]	; (8005778 <__errno+0x8>)
 8005772:	6818      	ldr	r0, [r3, #0]
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	2000000c 	.word	0x2000000c

0800577c <__libc_init_array>:
 800577c:	b570      	push	{r4, r5, r6, lr}
 800577e:	4d0d      	ldr	r5, [pc, #52]	; (80057b4 <__libc_init_array+0x38>)
 8005780:	4c0d      	ldr	r4, [pc, #52]	; (80057b8 <__libc_init_array+0x3c>)
 8005782:	1b64      	subs	r4, r4, r5
 8005784:	10a4      	asrs	r4, r4, #2
 8005786:	2600      	movs	r6, #0
 8005788:	42a6      	cmp	r6, r4
 800578a:	d109      	bne.n	80057a0 <__libc_init_array+0x24>
 800578c:	4d0b      	ldr	r5, [pc, #44]	; (80057bc <__libc_init_array+0x40>)
 800578e:	4c0c      	ldr	r4, [pc, #48]	; (80057c0 <__libc_init_array+0x44>)
 8005790:	f001 fa20 	bl	8006bd4 <_init>
 8005794:	1b64      	subs	r4, r4, r5
 8005796:	10a4      	asrs	r4, r4, #2
 8005798:	2600      	movs	r6, #0
 800579a:	42a6      	cmp	r6, r4
 800579c:	d105      	bne.n	80057aa <__libc_init_array+0x2e>
 800579e:	bd70      	pop	{r4, r5, r6, pc}
 80057a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a4:	4798      	blx	r3
 80057a6:	3601      	adds	r6, #1
 80057a8:	e7ee      	b.n	8005788 <__libc_init_array+0xc>
 80057aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ae:	4798      	blx	r3
 80057b0:	3601      	adds	r6, #1
 80057b2:	e7f2      	b.n	800579a <__libc_init_array+0x1e>
 80057b4:	08006dfc 	.word	0x08006dfc
 80057b8:	08006dfc 	.word	0x08006dfc
 80057bc:	08006dfc 	.word	0x08006dfc
 80057c0:	08006e00 	.word	0x08006e00

080057c4 <memset>:
 80057c4:	4402      	add	r2, r0
 80057c6:	4603      	mov	r3, r0
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d100      	bne.n	80057ce <memset+0xa>
 80057cc:	4770      	bx	lr
 80057ce:	f803 1b01 	strb.w	r1, [r3], #1
 80057d2:	e7f9      	b.n	80057c8 <memset+0x4>

080057d4 <_puts_r>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	460e      	mov	r6, r1
 80057d8:	4605      	mov	r5, r0
 80057da:	b118      	cbz	r0, 80057e4 <_puts_r+0x10>
 80057dc:	6983      	ldr	r3, [r0, #24]
 80057de:	b90b      	cbnz	r3, 80057e4 <_puts_r+0x10>
 80057e0:	f000 fadc 	bl	8005d9c <__sinit>
 80057e4:	69ab      	ldr	r3, [r5, #24]
 80057e6:	68ac      	ldr	r4, [r5, #8]
 80057e8:	b913      	cbnz	r3, 80057f0 <_puts_r+0x1c>
 80057ea:	4628      	mov	r0, r5
 80057ec:	f000 fad6 	bl	8005d9c <__sinit>
 80057f0:	4b2c      	ldr	r3, [pc, #176]	; (80058a4 <_puts_r+0xd0>)
 80057f2:	429c      	cmp	r4, r3
 80057f4:	d120      	bne.n	8005838 <_puts_r+0x64>
 80057f6:	686c      	ldr	r4, [r5, #4]
 80057f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057fa:	07db      	lsls	r3, r3, #31
 80057fc:	d405      	bmi.n	800580a <_puts_r+0x36>
 80057fe:	89a3      	ldrh	r3, [r4, #12]
 8005800:	0598      	lsls	r0, r3, #22
 8005802:	d402      	bmi.n	800580a <_puts_r+0x36>
 8005804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005806:	f000 fb67 	bl	8005ed8 <__retarget_lock_acquire_recursive>
 800580a:	89a3      	ldrh	r3, [r4, #12]
 800580c:	0719      	lsls	r1, r3, #28
 800580e:	d51d      	bpl.n	800584c <_puts_r+0x78>
 8005810:	6923      	ldr	r3, [r4, #16]
 8005812:	b1db      	cbz	r3, 800584c <_puts_r+0x78>
 8005814:	3e01      	subs	r6, #1
 8005816:	68a3      	ldr	r3, [r4, #8]
 8005818:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800581c:	3b01      	subs	r3, #1
 800581e:	60a3      	str	r3, [r4, #8]
 8005820:	bb39      	cbnz	r1, 8005872 <_puts_r+0x9e>
 8005822:	2b00      	cmp	r3, #0
 8005824:	da38      	bge.n	8005898 <_puts_r+0xc4>
 8005826:	4622      	mov	r2, r4
 8005828:	210a      	movs	r1, #10
 800582a:	4628      	mov	r0, r5
 800582c:	f000 f8ba 	bl	80059a4 <__swbuf_r>
 8005830:	3001      	adds	r0, #1
 8005832:	d011      	beq.n	8005858 <_puts_r+0x84>
 8005834:	250a      	movs	r5, #10
 8005836:	e011      	b.n	800585c <_puts_r+0x88>
 8005838:	4b1b      	ldr	r3, [pc, #108]	; (80058a8 <_puts_r+0xd4>)
 800583a:	429c      	cmp	r4, r3
 800583c:	d101      	bne.n	8005842 <_puts_r+0x6e>
 800583e:	68ac      	ldr	r4, [r5, #8]
 8005840:	e7da      	b.n	80057f8 <_puts_r+0x24>
 8005842:	4b1a      	ldr	r3, [pc, #104]	; (80058ac <_puts_r+0xd8>)
 8005844:	429c      	cmp	r4, r3
 8005846:	bf08      	it	eq
 8005848:	68ec      	ldreq	r4, [r5, #12]
 800584a:	e7d5      	b.n	80057f8 <_puts_r+0x24>
 800584c:	4621      	mov	r1, r4
 800584e:	4628      	mov	r0, r5
 8005850:	f000 f90c 	bl	8005a6c <__swsetup_r>
 8005854:	2800      	cmp	r0, #0
 8005856:	d0dd      	beq.n	8005814 <_puts_r+0x40>
 8005858:	f04f 35ff 	mov.w	r5, #4294967295
 800585c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800585e:	07da      	lsls	r2, r3, #31
 8005860:	d405      	bmi.n	800586e <_puts_r+0x9a>
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	059b      	lsls	r3, r3, #22
 8005866:	d402      	bmi.n	800586e <_puts_r+0x9a>
 8005868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800586a:	f000 fb36 	bl	8005eda <__retarget_lock_release_recursive>
 800586e:	4628      	mov	r0, r5
 8005870:	bd70      	pop	{r4, r5, r6, pc}
 8005872:	2b00      	cmp	r3, #0
 8005874:	da04      	bge.n	8005880 <_puts_r+0xac>
 8005876:	69a2      	ldr	r2, [r4, #24]
 8005878:	429a      	cmp	r2, r3
 800587a:	dc06      	bgt.n	800588a <_puts_r+0xb6>
 800587c:	290a      	cmp	r1, #10
 800587e:	d004      	beq.n	800588a <_puts_r+0xb6>
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	6022      	str	r2, [r4, #0]
 8005886:	7019      	strb	r1, [r3, #0]
 8005888:	e7c5      	b.n	8005816 <_puts_r+0x42>
 800588a:	4622      	mov	r2, r4
 800588c:	4628      	mov	r0, r5
 800588e:	f000 f889 	bl	80059a4 <__swbuf_r>
 8005892:	3001      	adds	r0, #1
 8005894:	d1bf      	bne.n	8005816 <_puts_r+0x42>
 8005896:	e7df      	b.n	8005858 <_puts_r+0x84>
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	250a      	movs	r5, #10
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	6022      	str	r2, [r4, #0]
 80058a0:	701d      	strb	r5, [r3, #0]
 80058a2:	e7db      	b.n	800585c <_puts_r+0x88>
 80058a4:	08006c94 	.word	0x08006c94
 80058a8:	08006cb4 	.word	0x08006cb4
 80058ac:	08006c74 	.word	0x08006c74

080058b0 <puts>:
 80058b0:	4b02      	ldr	r3, [pc, #8]	; (80058bc <puts+0xc>)
 80058b2:	4601      	mov	r1, r0
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	f7ff bf8d 	b.w	80057d4 <_puts_r>
 80058ba:	bf00      	nop
 80058bc:	2000000c 	.word	0x2000000c

080058c0 <siscanf>:
 80058c0:	b40e      	push	{r1, r2, r3}
 80058c2:	b510      	push	{r4, lr}
 80058c4:	b09f      	sub	sp, #124	; 0x7c
 80058c6:	ac21      	add	r4, sp, #132	; 0x84
 80058c8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80058cc:	f854 2b04 	ldr.w	r2, [r4], #4
 80058d0:	9201      	str	r2, [sp, #4]
 80058d2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80058d6:	9004      	str	r0, [sp, #16]
 80058d8:	9008      	str	r0, [sp, #32]
 80058da:	f7fa fc83 	bl	80001e4 <strlen>
 80058de:	4b0c      	ldr	r3, [pc, #48]	; (8005910 <siscanf+0x50>)
 80058e0:	9005      	str	r0, [sp, #20]
 80058e2:	9009      	str	r0, [sp, #36]	; 0x24
 80058e4:	930d      	str	r3, [sp, #52]	; 0x34
 80058e6:	480b      	ldr	r0, [pc, #44]	; (8005914 <siscanf+0x54>)
 80058e8:	9a01      	ldr	r2, [sp, #4]
 80058ea:	6800      	ldr	r0, [r0, #0]
 80058ec:	9403      	str	r4, [sp, #12]
 80058ee:	2300      	movs	r3, #0
 80058f0:	9311      	str	r3, [sp, #68]	; 0x44
 80058f2:	9316      	str	r3, [sp, #88]	; 0x58
 80058f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058f8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80058fc:	a904      	add	r1, sp, #16
 80058fe:	4623      	mov	r3, r4
 8005900:	f000 fc9e 	bl	8006240 <__ssvfiscanf_r>
 8005904:	b01f      	add	sp, #124	; 0x7c
 8005906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800590a:	b003      	add	sp, #12
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	0800593b 	.word	0x0800593b
 8005914:	2000000c 	.word	0x2000000c

08005918 <__sread>:
 8005918:	b510      	push	{r4, lr}
 800591a:	460c      	mov	r4, r1
 800591c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005920:	f000 ff58 	bl	80067d4 <_read_r>
 8005924:	2800      	cmp	r0, #0
 8005926:	bfab      	itete	ge
 8005928:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800592a:	89a3      	ldrhlt	r3, [r4, #12]
 800592c:	181b      	addge	r3, r3, r0
 800592e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005932:	bfac      	ite	ge
 8005934:	6563      	strge	r3, [r4, #84]	; 0x54
 8005936:	81a3      	strhlt	r3, [r4, #12]
 8005938:	bd10      	pop	{r4, pc}

0800593a <__seofread>:
 800593a:	2000      	movs	r0, #0
 800593c:	4770      	bx	lr

0800593e <__swrite>:
 800593e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005942:	461f      	mov	r7, r3
 8005944:	898b      	ldrh	r3, [r1, #12]
 8005946:	05db      	lsls	r3, r3, #23
 8005948:	4605      	mov	r5, r0
 800594a:	460c      	mov	r4, r1
 800594c:	4616      	mov	r6, r2
 800594e:	d505      	bpl.n	800595c <__swrite+0x1e>
 8005950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005954:	2302      	movs	r3, #2
 8005956:	2200      	movs	r2, #0
 8005958:	f000 fac0 	bl	8005edc <_lseek_r>
 800595c:	89a3      	ldrh	r3, [r4, #12]
 800595e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005962:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005966:	81a3      	strh	r3, [r4, #12]
 8005968:	4632      	mov	r2, r6
 800596a:	463b      	mov	r3, r7
 800596c:	4628      	mov	r0, r5
 800596e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005972:	f000 b869 	b.w	8005a48 <_write_r>

08005976 <__sseek>:
 8005976:	b510      	push	{r4, lr}
 8005978:	460c      	mov	r4, r1
 800597a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800597e:	f000 faad 	bl	8005edc <_lseek_r>
 8005982:	1c43      	adds	r3, r0, #1
 8005984:	89a3      	ldrh	r3, [r4, #12]
 8005986:	bf15      	itete	ne
 8005988:	6560      	strne	r0, [r4, #84]	; 0x54
 800598a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800598e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005992:	81a3      	strheq	r3, [r4, #12]
 8005994:	bf18      	it	ne
 8005996:	81a3      	strhne	r3, [r4, #12]
 8005998:	bd10      	pop	{r4, pc}

0800599a <__sclose>:
 800599a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800599e:	f000 b8d3 	b.w	8005b48 <_close_r>
	...

080059a4 <__swbuf_r>:
 80059a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a6:	460e      	mov	r6, r1
 80059a8:	4614      	mov	r4, r2
 80059aa:	4605      	mov	r5, r0
 80059ac:	b118      	cbz	r0, 80059b6 <__swbuf_r+0x12>
 80059ae:	6983      	ldr	r3, [r0, #24]
 80059b0:	b90b      	cbnz	r3, 80059b6 <__swbuf_r+0x12>
 80059b2:	f000 f9f3 	bl	8005d9c <__sinit>
 80059b6:	4b21      	ldr	r3, [pc, #132]	; (8005a3c <__swbuf_r+0x98>)
 80059b8:	429c      	cmp	r4, r3
 80059ba:	d12b      	bne.n	8005a14 <__swbuf_r+0x70>
 80059bc:	686c      	ldr	r4, [r5, #4]
 80059be:	69a3      	ldr	r3, [r4, #24]
 80059c0:	60a3      	str	r3, [r4, #8]
 80059c2:	89a3      	ldrh	r3, [r4, #12]
 80059c4:	071a      	lsls	r2, r3, #28
 80059c6:	d52f      	bpl.n	8005a28 <__swbuf_r+0x84>
 80059c8:	6923      	ldr	r3, [r4, #16]
 80059ca:	b36b      	cbz	r3, 8005a28 <__swbuf_r+0x84>
 80059cc:	6923      	ldr	r3, [r4, #16]
 80059ce:	6820      	ldr	r0, [r4, #0]
 80059d0:	1ac0      	subs	r0, r0, r3
 80059d2:	6963      	ldr	r3, [r4, #20]
 80059d4:	b2f6      	uxtb	r6, r6
 80059d6:	4283      	cmp	r3, r0
 80059d8:	4637      	mov	r7, r6
 80059da:	dc04      	bgt.n	80059e6 <__swbuf_r+0x42>
 80059dc:	4621      	mov	r1, r4
 80059de:	4628      	mov	r0, r5
 80059e0:	f000 f948 	bl	8005c74 <_fflush_r>
 80059e4:	bb30      	cbnz	r0, 8005a34 <__swbuf_r+0x90>
 80059e6:	68a3      	ldr	r3, [r4, #8]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	60a3      	str	r3, [r4, #8]
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	6022      	str	r2, [r4, #0]
 80059f2:	701e      	strb	r6, [r3, #0]
 80059f4:	6963      	ldr	r3, [r4, #20]
 80059f6:	3001      	adds	r0, #1
 80059f8:	4283      	cmp	r3, r0
 80059fa:	d004      	beq.n	8005a06 <__swbuf_r+0x62>
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	07db      	lsls	r3, r3, #31
 8005a00:	d506      	bpl.n	8005a10 <__swbuf_r+0x6c>
 8005a02:	2e0a      	cmp	r6, #10
 8005a04:	d104      	bne.n	8005a10 <__swbuf_r+0x6c>
 8005a06:	4621      	mov	r1, r4
 8005a08:	4628      	mov	r0, r5
 8005a0a:	f000 f933 	bl	8005c74 <_fflush_r>
 8005a0e:	b988      	cbnz	r0, 8005a34 <__swbuf_r+0x90>
 8005a10:	4638      	mov	r0, r7
 8005a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a14:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <__swbuf_r+0x9c>)
 8005a16:	429c      	cmp	r4, r3
 8005a18:	d101      	bne.n	8005a1e <__swbuf_r+0x7a>
 8005a1a:	68ac      	ldr	r4, [r5, #8]
 8005a1c:	e7cf      	b.n	80059be <__swbuf_r+0x1a>
 8005a1e:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <__swbuf_r+0xa0>)
 8005a20:	429c      	cmp	r4, r3
 8005a22:	bf08      	it	eq
 8005a24:	68ec      	ldreq	r4, [r5, #12]
 8005a26:	e7ca      	b.n	80059be <__swbuf_r+0x1a>
 8005a28:	4621      	mov	r1, r4
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f000 f81e 	bl	8005a6c <__swsetup_r>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d0cb      	beq.n	80059cc <__swbuf_r+0x28>
 8005a34:	f04f 37ff 	mov.w	r7, #4294967295
 8005a38:	e7ea      	b.n	8005a10 <__swbuf_r+0x6c>
 8005a3a:	bf00      	nop
 8005a3c:	08006c94 	.word	0x08006c94
 8005a40:	08006cb4 	.word	0x08006cb4
 8005a44:	08006c74 	.word	0x08006c74

08005a48 <_write_r>:
 8005a48:	b538      	push	{r3, r4, r5, lr}
 8005a4a:	4d07      	ldr	r5, [pc, #28]	; (8005a68 <_write_r+0x20>)
 8005a4c:	4604      	mov	r4, r0
 8005a4e:	4608      	mov	r0, r1
 8005a50:	4611      	mov	r1, r2
 8005a52:	2200      	movs	r2, #0
 8005a54:	602a      	str	r2, [r5, #0]
 8005a56:	461a      	mov	r2, r3
 8005a58:	f7fa fe66 	bl	8000728 <_write>
 8005a5c:	1c43      	adds	r3, r0, #1
 8005a5e:	d102      	bne.n	8005a66 <_write_r+0x1e>
 8005a60:	682b      	ldr	r3, [r5, #0]
 8005a62:	b103      	cbz	r3, 8005a66 <_write_r+0x1e>
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	bd38      	pop	{r3, r4, r5, pc}
 8005a68:	20000260 	.word	0x20000260

08005a6c <__swsetup_r>:
 8005a6c:	4b32      	ldr	r3, [pc, #200]	; (8005b38 <__swsetup_r+0xcc>)
 8005a6e:	b570      	push	{r4, r5, r6, lr}
 8005a70:	681d      	ldr	r5, [r3, #0]
 8005a72:	4606      	mov	r6, r0
 8005a74:	460c      	mov	r4, r1
 8005a76:	b125      	cbz	r5, 8005a82 <__swsetup_r+0x16>
 8005a78:	69ab      	ldr	r3, [r5, #24]
 8005a7a:	b913      	cbnz	r3, 8005a82 <__swsetup_r+0x16>
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	f000 f98d 	bl	8005d9c <__sinit>
 8005a82:	4b2e      	ldr	r3, [pc, #184]	; (8005b3c <__swsetup_r+0xd0>)
 8005a84:	429c      	cmp	r4, r3
 8005a86:	d10f      	bne.n	8005aa8 <__swsetup_r+0x3c>
 8005a88:	686c      	ldr	r4, [r5, #4]
 8005a8a:	89a3      	ldrh	r3, [r4, #12]
 8005a8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a90:	0719      	lsls	r1, r3, #28
 8005a92:	d42c      	bmi.n	8005aee <__swsetup_r+0x82>
 8005a94:	06dd      	lsls	r5, r3, #27
 8005a96:	d411      	bmi.n	8005abc <__swsetup_r+0x50>
 8005a98:	2309      	movs	r3, #9
 8005a9a:	6033      	str	r3, [r6, #0]
 8005a9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005aa0:	81a3      	strh	r3, [r4, #12]
 8005aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa6:	e03e      	b.n	8005b26 <__swsetup_r+0xba>
 8005aa8:	4b25      	ldr	r3, [pc, #148]	; (8005b40 <__swsetup_r+0xd4>)
 8005aaa:	429c      	cmp	r4, r3
 8005aac:	d101      	bne.n	8005ab2 <__swsetup_r+0x46>
 8005aae:	68ac      	ldr	r4, [r5, #8]
 8005ab0:	e7eb      	b.n	8005a8a <__swsetup_r+0x1e>
 8005ab2:	4b24      	ldr	r3, [pc, #144]	; (8005b44 <__swsetup_r+0xd8>)
 8005ab4:	429c      	cmp	r4, r3
 8005ab6:	bf08      	it	eq
 8005ab8:	68ec      	ldreq	r4, [r5, #12]
 8005aba:	e7e6      	b.n	8005a8a <__swsetup_r+0x1e>
 8005abc:	0758      	lsls	r0, r3, #29
 8005abe:	d512      	bpl.n	8005ae6 <__swsetup_r+0x7a>
 8005ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ac2:	b141      	cbz	r1, 8005ad6 <__swsetup_r+0x6a>
 8005ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ac8:	4299      	cmp	r1, r3
 8005aca:	d002      	beq.n	8005ad2 <__swsetup_r+0x66>
 8005acc:	4630      	mov	r0, r6
 8005ace:	f000 fa7d 	bl	8005fcc <_free_r>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	6363      	str	r3, [r4, #52]	; 0x34
 8005ad6:	89a3      	ldrh	r3, [r4, #12]
 8005ad8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005adc:	81a3      	strh	r3, [r4, #12]
 8005ade:	2300      	movs	r3, #0
 8005ae0:	6063      	str	r3, [r4, #4]
 8005ae2:	6923      	ldr	r3, [r4, #16]
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	89a3      	ldrh	r3, [r4, #12]
 8005ae8:	f043 0308 	orr.w	r3, r3, #8
 8005aec:	81a3      	strh	r3, [r4, #12]
 8005aee:	6923      	ldr	r3, [r4, #16]
 8005af0:	b94b      	cbnz	r3, 8005b06 <__swsetup_r+0x9a>
 8005af2:	89a3      	ldrh	r3, [r4, #12]
 8005af4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005afc:	d003      	beq.n	8005b06 <__swsetup_r+0x9a>
 8005afe:	4621      	mov	r1, r4
 8005b00:	4630      	mov	r0, r6
 8005b02:	f000 fa23 	bl	8005f4c <__smakebuf_r>
 8005b06:	89a0      	ldrh	r0, [r4, #12]
 8005b08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b0c:	f010 0301 	ands.w	r3, r0, #1
 8005b10:	d00a      	beq.n	8005b28 <__swsetup_r+0xbc>
 8005b12:	2300      	movs	r3, #0
 8005b14:	60a3      	str	r3, [r4, #8]
 8005b16:	6963      	ldr	r3, [r4, #20]
 8005b18:	425b      	negs	r3, r3
 8005b1a:	61a3      	str	r3, [r4, #24]
 8005b1c:	6923      	ldr	r3, [r4, #16]
 8005b1e:	b943      	cbnz	r3, 8005b32 <__swsetup_r+0xc6>
 8005b20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b24:	d1ba      	bne.n	8005a9c <__swsetup_r+0x30>
 8005b26:	bd70      	pop	{r4, r5, r6, pc}
 8005b28:	0781      	lsls	r1, r0, #30
 8005b2a:	bf58      	it	pl
 8005b2c:	6963      	ldrpl	r3, [r4, #20]
 8005b2e:	60a3      	str	r3, [r4, #8]
 8005b30:	e7f4      	b.n	8005b1c <__swsetup_r+0xb0>
 8005b32:	2000      	movs	r0, #0
 8005b34:	e7f7      	b.n	8005b26 <__swsetup_r+0xba>
 8005b36:	bf00      	nop
 8005b38:	2000000c 	.word	0x2000000c
 8005b3c:	08006c94 	.word	0x08006c94
 8005b40:	08006cb4 	.word	0x08006cb4
 8005b44:	08006c74 	.word	0x08006c74

08005b48 <_close_r>:
 8005b48:	b538      	push	{r3, r4, r5, lr}
 8005b4a:	4d06      	ldr	r5, [pc, #24]	; (8005b64 <_close_r+0x1c>)
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	4604      	mov	r4, r0
 8005b50:	4608      	mov	r0, r1
 8005b52:	602b      	str	r3, [r5, #0]
 8005b54:	f7fb fa67 	bl	8001026 <_close>
 8005b58:	1c43      	adds	r3, r0, #1
 8005b5a:	d102      	bne.n	8005b62 <_close_r+0x1a>
 8005b5c:	682b      	ldr	r3, [r5, #0]
 8005b5e:	b103      	cbz	r3, 8005b62 <_close_r+0x1a>
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	bd38      	pop	{r3, r4, r5, pc}
 8005b64:	20000260 	.word	0x20000260

08005b68 <__sflush_r>:
 8005b68:	898a      	ldrh	r2, [r1, #12]
 8005b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b6e:	4605      	mov	r5, r0
 8005b70:	0710      	lsls	r0, r2, #28
 8005b72:	460c      	mov	r4, r1
 8005b74:	d458      	bmi.n	8005c28 <__sflush_r+0xc0>
 8005b76:	684b      	ldr	r3, [r1, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	dc05      	bgt.n	8005b88 <__sflush_r+0x20>
 8005b7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	dc02      	bgt.n	8005b88 <__sflush_r+0x20>
 8005b82:	2000      	movs	r0, #0
 8005b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b8a:	2e00      	cmp	r6, #0
 8005b8c:	d0f9      	beq.n	8005b82 <__sflush_r+0x1a>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b94:	682f      	ldr	r7, [r5, #0]
 8005b96:	602b      	str	r3, [r5, #0]
 8005b98:	d032      	beq.n	8005c00 <__sflush_r+0x98>
 8005b9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b9c:	89a3      	ldrh	r3, [r4, #12]
 8005b9e:	075a      	lsls	r2, r3, #29
 8005ba0:	d505      	bpl.n	8005bae <__sflush_r+0x46>
 8005ba2:	6863      	ldr	r3, [r4, #4]
 8005ba4:	1ac0      	subs	r0, r0, r3
 8005ba6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ba8:	b10b      	cbz	r3, 8005bae <__sflush_r+0x46>
 8005baa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bac:	1ac0      	subs	r0, r0, r3
 8005bae:	2300      	movs	r3, #0
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bb4:	6a21      	ldr	r1, [r4, #32]
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	47b0      	blx	r6
 8005bba:	1c43      	adds	r3, r0, #1
 8005bbc:	89a3      	ldrh	r3, [r4, #12]
 8005bbe:	d106      	bne.n	8005bce <__sflush_r+0x66>
 8005bc0:	6829      	ldr	r1, [r5, #0]
 8005bc2:	291d      	cmp	r1, #29
 8005bc4:	d82c      	bhi.n	8005c20 <__sflush_r+0xb8>
 8005bc6:	4a2a      	ldr	r2, [pc, #168]	; (8005c70 <__sflush_r+0x108>)
 8005bc8:	40ca      	lsrs	r2, r1
 8005bca:	07d6      	lsls	r6, r2, #31
 8005bcc:	d528      	bpl.n	8005c20 <__sflush_r+0xb8>
 8005bce:	2200      	movs	r2, #0
 8005bd0:	6062      	str	r2, [r4, #4]
 8005bd2:	04d9      	lsls	r1, r3, #19
 8005bd4:	6922      	ldr	r2, [r4, #16]
 8005bd6:	6022      	str	r2, [r4, #0]
 8005bd8:	d504      	bpl.n	8005be4 <__sflush_r+0x7c>
 8005bda:	1c42      	adds	r2, r0, #1
 8005bdc:	d101      	bne.n	8005be2 <__sflush_r+0x7a>
 8005bde:	682b      	ldr	r3, [r5, #0]
 8005be0:	b903      	cbnz	r3, 8005be4 <__sflush_r+0x7c>
 8005be2:	6560      	str	r0, [r4, #84]	; 0x54
 8005be4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005be6:	602f      	str	r7, [r5, #0]
 8005be8:	2900      	cmp	r1, #0
 8005bea:	d0ca      	beq.n	8005b82 <__sflush_r+0x1a>
 8005bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bf0:	4299      	cmp	r1, r3
 8005bf2:	d002      	beq.n	8005bfa <__sflush_r+0x92>
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	f000 f9e9 	bl	8005fcc <_free_r>
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	6360      	str	r0, [r4, #52]	; 0x34
 8005bfe:	e7c1      	b.n	8005b84 <__sflush_r+0x1c>
 8005c00:	6a21      	ldr	r1, [r4, #32]
 8005c02:	2301      	movs	r3, #1
 8005c04:	4628      	mov	r0, r5
 8005c06:	47b0      	blx	r6
 8005c08:	1c41      	adds	r1, r0, #1
 8005c0a:	d1c7      	bne.n	8005b9c <__sflush_r+0x34>
 8005c0c:	682b      	ldr	r3, [r5, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0c4      	beq.n	8005b9c <__sflush_r+0x34>
 8005c12:	2b1d      	cmp	r3, #29
 8005c14:	d001      	beq.n	8005c1a <__sflush_r+0xb2>
 8005c16:	2b16      	cmp	r3, #22
 8005c18:	d101      	bne.n	8005c1e <__sflush_r+0xb6>
 8005c1a:	602f      	str	r7, [r5, #0]
 8005c1c:	e7b1      	b.n	8005b82 <__sflush_r+0x1a>
 8005c1e:	89a3      	ldrh	r3, [r4, #12]
 8005c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c24:	81a3      	strh	r3, [r4, #12]
 8005c26:	e7ad      	b.n	8005b84 <__sflush_r+0x1c>
 8005c28:	690f      	ldr	r7, [r1, #16]
 8005c2a:	2f00      	cmp	r7, #0
 8005c2c:	d0a9      	beq.n	8005b82 <__sflush_r+0x1a>
 8005c2e:	0793      	lsls	r3, r2, #30
 8005c30:	680e      	ldr	r6, [r1, #0]
 8005c32:	bf08      	it	eq
 8005c34:	694b      	ldreq	r3, [r1, #20]
 8005c36:	600f      	str	r7, [r1, #0]
 8005c38:	bf18      	it	ne
 8005c3a:	2300      	movne	r3, #0
 8005c3c:	eba6 0807 	sub.w	r8, r6, r7
 8005c40:	608b      	str	r3, [r1, #8]
 8005c42:	f1b8 0f00 	cmp.w	r8, #0
 8005c46:	dd9c      	ble.n	8005b82 <__sflush_r+0x1a>
 8005c48:	6a21      	ldr	r1, [r4, #32]
 8005c4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c4c:	4643      	mov	r3, r8
 8005c4e:	463a      	mov	r2, r7
 8005c50:	4628      	mov	r0, r5
 8005c52:	47b0      	blx	r6
 8005c54:	2800      	cmp	r0, #0
 8005c56:	dc06      	bgt.n	8005c66 <__sflush_r+0xfe>
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c5e:	81a3      	strh	r3, [r4, #12]
 8005c60:	f04f 30ff 	mov.w	r0, #4294967295
 8005c64:	e78e      	b.n	8005b84 <__sflush_r+0x1c>
 8005c66:	4407      	add	r7, r0
 8005c68:	eba8 0800 	sub.w	r8, r8, r0
 8005c6c:	e7e9      	b.n	8005c42 <__sflush_r+0xda>
 8005c6e:	bf00      	nop
 8005c70:	20400001 	.word	0x20400001

08005c74 <_fflush_r>:
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	690b      	ldr	r3, [r1, #16]
 8005c78:	4605      	mov	r5, r0
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	b913      	cbnz	r3, 8005c84 <_fflush_r+0x10>
 8005c7e:	2500      	movs	r5, #0
 8005c80:	4628      	mov	r0, r5
 8005c82:	bd38      	pop	{r3, r4, r5, pc}
 8005c84:	b118      	cbz	r0, 8005c8e <_fflush_r+0x1a>
 8005c86:	6983      	ldr	r3, [r0, #24]
 8005c88:	b90b      	cbnz	r3, 8005c8e <_fflush_r+0x1a>
 8005c8a:	f000 f887 	bl	8005d9c <__sinit>
 8005c8e:	4b14      	ldr	r3, [pc, #80]	; (8005ce0 <_fflush_r+0x6c>)
 8005c90:	429c      	cmp	r4, r3
 8005c92:	d11b      	bne.n	8005ccc <_fflush_r+0x58>
 8005c94:	686c      	ldr	r4, [r5, #4]
 8005c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0ef      	beq.n	8005c7e <_fflush_r+0xa>
 8005c9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ca0:	07d0      	lsls	r0, r2, #31
 8005ca2:	d404      	bmi.n	8005cae <_fflush_r+0x3a>
 8005ca4:	0599      	lsls	r1, r3, #22
 8005ca6:	d402      	bmi.n	8005cae <_fflush_r+0x3a>
 8005ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005caa:	f000 f915 	bl	8005ed8 <__retarget_lock_acquire_recursive>
 8005cae:	4628      	mov	r0, r5
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	f7ff ff59 	bl	8005b68 <__sflush_r>
 8005cb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cb8:	07da      	lsls	r2, r3, #31
 8005cba:	4605      	mov	r5, r0
 8005cbc:	d4e0      	bmi.n	8005c80 <_fflush_r+0xc>
 8005cbe:	89a3      	ldrh	r3, [r4, #12]
 8005cc0:	059b      	lsls	r3, r3, #22
 8005cc2:	d4dd      	bmi.n	8005c80 <_fflush_r+0xc>
 8005cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cc6:	f000 f908 	bl	8005eda <__retarget_lock_release_recursive>
 8005cca:	e7d9      	b.n	8005c80 <_fflush_r+0xc>
 8005ccc:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <_fflush_r+0x70>)
 8005cce:	429c      	cmp	r4, r3
 8005cd0:	d101      	bne.n	8005cd6 <_fflush_r+0x62>
 8005cd2:	68ac      	ldr	r4, [r5, #8]
 8005cd4:	e7df      	b.n	8005c96 <_fflush_r+0x22>
 8005cd6:	4b04      	ldr	r3, [pc, #16]	; (8005ce8 <_fflush_r+0x74>)
 8005cd8:	429c      	cmp	r4, r3
 8005cda:	bf08      	it	eq
 8005cdc:	68ec      	ldreq	r4, [r5, #12]
 8005cde:	e7da      	b.n	8005c96 <_fflush_r+0x22>
 8005ce0:	08006c94 	.word	0x08006c94
 8005ce4:	08006cb4 	.word	0x08006cb4
 8005ce8:	08006c74 	.word	0x08006c74

08005cec <std>:
 8005cec:	2300      	movs	r3, #0
 8005cee:	b510      	push	{r4, lr}
 8005cf0:	4604      	mov	r4, r0
 8005cf2:	e9c0 3300 	strd	r3, r3, [r0]
 8005cf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cfa:	6083      	str	r3, [r0, #8]
 8005cfc:	8181      	strh	r1, [r0, #12]
 8005cfe:	6643      	str	r3, [r0, #100]	; 0x64
 8005d00:	81c2      	strh	r2, [r0, #14]
 8005d02:	6183      	str	r3, [r0, #24]
 8005d04:	4619      	mov	r1, r3
 8005d06:	2208      	movs	r2, #8
 8005d08:	305c      	adds	r0, #92	; 0x5c
 8005d0a:	f7ff fd5b 	bl	80057c4 <memset>
 8005d0e:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <std+0x38>)
 8005d10:	6263      	str	r3, [r4, #36]	; 0x24
 8005d12:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <std+0x3c>)
 8005d14:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d16:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <std+0x40>)
 8005d18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d1a:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <std+0x44>)
 8005d1c:	6224      	str	r4, [r4, #32]
 8005d1e:	6323      	str	r3, [r4, #48]	; 0x30
 8005d20:	bd10      	pop	{r4, pc}
 8005d22:	bf00      	nop
 8005d24:	08005919 	.word	0x08005919
 8005d28:	0800593f 	.word	0x0800593f
 8005d2c:	08005977 	.word	0x08005977
 8005d30:	0800599b 	.word	0x0800599b

08005d34 <_cleanup_r>:
 8005d34:	4901      	ldr	r1, [pc, #4]	; (8005d3c <_cleanup_r+0x8>)
 8005d36:	f000 b8af 	b.w	8005e98 <_fwalk_reent>
 8005d3a:	bf00      	nop
 8005d3c:	08005c75 	.word	0x08005c75

08005d40 <__sfmoreglue>:
 8005d40:	b570      	push	{r4, r5, r6, lr}
 8005d42:	2268      	movs	r2, #104	; 0x68
 8005d44:	1e4d      	subs	r5, r1, #1
 8005d46:	4355      	muls	r5, r2
 8005d48:	460e      	mov	r6, r1
 8005d4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d4e:	f000 f9a9 	bl	80060a4 <_malloc_r>
 8005d52:	4604      	mov	r4, r0
 8005d54:	b140      	cbz	r0, 8005d68 <__sfmoreglue+0x28>
 8005d56:	2100      	movs	r1, #0
 8005d58:	e9c0 1600 	strd	r1, r6, [r0]
 8005d5c:	300c      	adds	r0, #12
 8005d5e:	60a0      	str	r0, [r4, #8]
 8005d60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d64:	f7ff fd2e 	bl	80057c4 <memset>
 8005d68:	4620      	mov	r0, r4
 8005d6a:	bd70      	pop	{r4, r5, r6, pc}

08005d6c <__sfp_lock_acquire>:
 8005d6c:	4801      	ldr	r0, [pc, #4]	; (8005d74 <__sfp_lock_acquire+0x8>)
 8005d6e:	f000 b8b3 	b.w	8005ed8 <__retarget_lock_acquire_recursive>
 8005d72:	bf00      	nop
 8005d74:	20000255 	.word	0x20000255

08005d78 <__sfp_lock_release>:
 8005d78:	4801      	ldr	r0, [pc, #4]	; (8005d80 <__sfp_lock_release+0x8>)
 8005d7a:	f000 b8ae 	b.w	8005eda <__retarget_lock_release_recursive>
 8005d7e:	bf00      	nop
 8005d80:	20000255 	.word	0x20000255

08005d84 <__sinit_lock_acquire>:
 8005d84:	4801      	ldr	r0, [pc, #4]	; (8005d8c <__sinit_lock_acquire+0x8>)
 8005d86:	f000 b8a7 	b.w	8005ed8 <__retarget_lock_acquire_recursive>
 8005d8a:	bf00      	nop
 8005d8c:	20000256 	.word	0x20000256

08005d90 <__sinit_lock_release>:
 8005d90:	4801      	ldr	r0, [pc, #4]	; (8005d98 <__sinit_lock_release+0x8>)
 8005d92:	f000 b8a2 	b.w	8005eda <__retarget_lock_release_recursive>
 8005d96:	bf00      	nop
 8005d98:	20000256 	.word	0x20000256

08005d9c <__sinit>:
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	4604      	mov	r4, r0
 8005da0:	f7ff fff0 	bl	8005d84 <__sinit_lock_acquire>
 8005da4:	69a3      	ldr	r3, [r4, #24]
 8005da6:	b11b      	cbz	r3, 8005db0 <__sinit+0x14>
 8005da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dac:	f7ff bff0 	b.w	8005d90 <__sinit_lock_release>
 8005db0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005db4:	6523      	str	r3, [r4, #80]	; 0x50
 8005db6:	4b13      	ldr	r3, [pc, #76]	; (8005e04 <__sinit+0x68>)
 8005db8:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <__sinit+0x6c>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8005dbe:	42a3      	cmp	r3, r4
 8005dc0:	bf04      	itt	eq
 8005dc2:	2301      	moveq	r3, #1
 8005dc4:	61a3      	streq	r3, [r4, #24]
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f000 f820 	bl	8005e0c <__sfp>
 8005dcc:	6060      	str	r0, [r4, #4]
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f000 f81c 	bl	8005e0c <__sfp>
 8005dd4:	60a0      	str	r0, [r4, #8]
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f000 f818 	bl	8005e0c <__sfp>
 8005ddc:	2200      	movs	r2, #0
 8005dde:	60e0      	str	r0, [r4, #12]
 8005de0:	2104      	movs	r1, #4
 8005de2:	6860      	ldr	r0, [r4, #4]
 8005de4:	f7ff ff82 	bl	8005cec <std>
 8005de8:	68a0      	ldr	r0, [r4, #8]
 8005dea:	2201      	movs	r2, #1
 8005dec:	2109      	movs	r1, #9
 8005dee:	f7ff ff7d 	bl	8005cec <std>
 8005df2:	68e0      	ldr	r0, [r4, #12]
 8005df4:	2202      	movs	r2, #2
 8005df6:	2112      	movs	r1, #18
 8005df8:	f7ff ff78 	bl	8005cec <std>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	61a3      	str	r3, [r4, #24]
 8005e00:	e7d2      	b.n	8005da8 <__sinit+0xc>
 8005e02:	bf00      	nop
 8005e04:	08006c70 	.word	0x08006c70
 8005e08:	08005d35 	.word	0x08005d35

08005e0c <__sfp>:
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0e:	4607      	mov	r7, r0
 8005e10:	f7ff ffac 	bl	8005d6c <__sfp_lock_acquire>
 8005e14:	4b1e      	ldr	r3, [pc, #120]	; (8005e90 <__sfp+0x84>)
 8005e16:	681e      	ldr	r6, [r3, #0]
 8005e18:	69b3      	ldr	r3, [r6, #24]
 8005e1a:	b913      	cbnz	r3, 8005e22 <__sfp+0x16>
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	f7ff ffbd 	bl	8005d9c <__sinit>
 8005e22:	3648      	adds	r6, #72	; 0x48
 8005e24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	d503      	bpl.n	8005e34 <__sfp+0x28>
 8005e2c:	6833      	ldr	r3, [r6, #0]
 8005e2e:	b30b      	cbz	r3, 8005e74 <__sfp+0x68>
 8005e30:	6836      	ldr	r6, [r6, #0]
 8005e32:	e7f7      	b.n	8005e24 <__sfp+0x18>
 8005e34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e38:	b9d5      	cbnz	r5, 8005e70 <__sfp+0x64>
 8005e3a:	4b16      	ldr	r3, [pc, #88]	; (8005e94 <__sfp+0x88>)
 8005e3c:	60e3      	str	r3, [r4, #12]
 8005e3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e42:	6665      	str	r5, [r4, #100]	; 0x64
 8005e44:	f000 f847 	bl	8005ed6 <__retarget_lock_init_recursive>
 8005e48:	f7ff ff96 	bl	8005d78 <__sfp_lock_release>
 8005e4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005e50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005e54:	6025      	str	r5, [r4, #0]
 8005e56:	61a5      	str	r5, [r4, #24]
 8005e58:	2208      	movs	r2, #8
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e60:	f7ff fcb0 	bl	80057c4 <memset>
 8005e64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e70:	3468      	adds	r4, #104	; 0x68
 8005e72:	e7d9      	b.n	8005e28 <__sfp+0x1c>
 8005e74:	2104      	movs	r1, #4
 8005e76:	4638      	mov	r0, r7
 8005e78:	f7ff ff62 	bl	8005d40 <__sfmoreglue>
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	6030      	str	r0, [r6, #0]
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d1d5      	bne.n	8005e30 <__sfp+0x24>
 8005e84:	f7ff ff78 	bl	8005d78 <__sfp_lock_release>
 8005e88:	230c      	movs	r3, #12
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	e7ee      	b.n	8005e6c <__sfp+0x60>
 8005e8e:	bf00      	nop
 8005e90:	08006c70 	.word	0x08006c70
 8005e94:	ffff0001 	.word	0xffff0001

08005e98 <_fwalk_reent>:
 8005e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e9c:	4606      	mov	r6, r0
 8005e9e:	4688      	mov	r8, r1
 8005ea0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ea4:	2700      	movs	r7, #0
 8005ea6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005eaa:	f1b9 0901 	subs.w	r9, r9, #1
 8005eae:	d505      	bpl.n	8005ebc <_fwalk_reent+0x24>
 8005eb0:	6824      	ldr	r4, [r4, #0]
 8005eb2:	2c00      	cmp	r4, #0
 8005eb4:	d1f7      	bne.n	8005ea6 <_fwalk_reent+0xe>
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ebc:	89ab      	ldrh	r3, [r5, #12]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d907      	bls.n	8005ed2 <_fwalk_reent+0x3a>
 8005ec2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	d003      	beq.n	8005ed2 <_fwalk_reent+0x3a>
 8005eca:	4629      	mov	r1, r5
 8005ecc:	4630      	mov	r0, r6
 8005ece:	47c0      	blx	r8
 8005ed0:	4307      	orrs	r7, r0
 8005ed2:	3568      	adds	r5, #104	; 0x68
 8005ed4:	e7e9      	b.n	8005eaa <_fwalk_reent+0x12>

08005ed6 <__retarget_lock_init_recursive>:
 8005ed6:	4770      	bx	lr

08005ed8 <__retarget_lock_acquire_recursive>:
 8005ed8:	4770      	bx	lr

08005eda <__retarget_lock_release_recursive>:
 8005eda:	4770      	bx	lr

08005edc <_lseek_r>:
 8005edc:	b538      	push	{r3, r4, r5, lr}
 8005ede:	4d07      	ldr	r5, [pc, #28]	; (8005efc <_lseek_r+0x20>)
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	4608      	mov	r0, r1
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	602a      	str	r2, [r5, #0]
 8005eea:	461a      	mov	r2, r3
 8005eec:	f7fb f8c2 	bl	8001074 <_lseek>
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	d102      	bne.n	8005efa <_lseek_r+0x1e>
 8005ef4:	682b      	ldr	r3, [r5, #0]
 8005ef6:	b103      	cbz	r3, 8005efa <_lseek_r+0x1e>
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	bd38      	pop	{r3, r4, r5, pc}
 8005efc:	20000260 	.word	0x20000260

08005f00 <__swhatbuf_r>:
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	460e      	mov	r6, r1
 8005f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f08:	2900      	cmp	r1, #0
 8005f0a:	b096      	sub	sp, #88	; 0x58
 8005f0c:	4614      	mov	r4, r2
 8005f0e:	461d      	mov	r5, r3
 8005f10:	da08      	bge.n	8005f24 <__swhatbuf_r+0x24>
 8005f12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	602a      	str	r2, [r5, #0]
 8005f1a:	061a      	lsls	r2, r3, #24
 8005f1c:	d410      	bmi.n	8005f40 <__swhatbuf_r+0x40>
 8005f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f22:	e00e      	b.n	8005f42 <__swhatbuf_r+0x42>
 8005f24:	466a      	mov	r2, sp
 8005f26:	f000 fde1 	bl	8006aec <_fstat_r>
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	dbf1      	blt.n	8005f12 <__swhatbuf_r+0x12>
 8005f2e:	9a01      	ldr	r2, [sp, #4]
 8005f30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f38:	425a      	negs	r2, r3
 8005f3a:	415a      	adcs	r2, r3
 8005f3c:	602a      	str	r2, [r5, #0]
 8005f3e:	e7ee      	b.n	8005f1e <__swhatbuf_r+0x1e>
 8005f40:	2340      	movs	r3, #64	; 0x40
 8005f42:	2000      	movs	r0, #0
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	b016      	add	sp, #88	; 0x58
 8005f48:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f4c <__smakebuf_r>:
 8005f4c:	898b      	ldrh	r3, [r1, #12]
 8005f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f50:	079d      	lsls	r5, r3, #30
 8005f52:	4606      	mov	r6, r0
 8005f54:	460c      	mov	r4, r1
 8005f56:	d507      	bpl.n	8005f68 <__smakebuf_r+0x1c>
 8005f58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	6123      	str	r3, [r4, #16]
 8005f60:	2301      	movs	r3, #1
 8005f62:	6163      	str	r3, [r4, #20]
 8005f64:	b002      	add	sp, #8
 8005f66:	bd70      	pop	{r4, r5, r6, pc}
 8005f68:	ab01      	add	r3, sp, #4
 8005f6a:	466a      	mov	r2, sp
 8005f6c:	f7ff ffc8 	bl	8005f00 <__swhatbuf_r>
 8005f70:	9900      	ldr	r1, [sp, #0]
 8005f72:	4605      	mov	r5, r0
 8005f74:	4630      	mov	r0, r6
 8005f76:	f000 f895 	bl	80060a4 <_malloc_r>
 8005f7a:	b948      	cbnz	r0, 8005f90 <__smakebuf_r+0x44>
 8005f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f80:	059a      	lsls	r2, r3, #22
 8005f82:	d4ef      	bmi.n	8005f64 <__smakebuf_r+0x18>
 8005f84:	f023 0303 	bic.w	r3, r3, #3
 8005f88:	f043 0302 	orr.w	r3, r3, #2
 8005f8c:	81a3      	strh	r3, [r4, #12]
 8005f8e:	e7e3      	b.n	8005f58 <__smakebuf_r+0xc>
 8005f90:	4b0d      	ldr	r3, [pc, #52]	; (8005fc8 <__smakebuf_r+0x7c>)
 8005f92:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f94:	89a3      	ldrh	r3, [r4, #12]
 8005f96:	6020      	str	r0, [r4, #0]
 8005f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f9c:	81a3      	strh	r3, [r4, #12]
 8005f9e:	9b00      	ldr	r3, [sp, #0]
 8005fa0:	6163      	str	r3, [r4, #20]
 8005fa2:	9b01      	ldr	r3, [sp, #4]
 8005fa4:	6120      	str	r0, [r4, #16]
 8005fa6:	b15b      	cbz	r3, 8005fc0 <__smakebuf_r+0x74>
 8005fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fac:	4630      	mov	r0, r6
 8005fae:	f000 fdaf 	bl	8006b10 <_isatty_r>
 8005fb2:	b128      	cbz	r0, 8005fc0 <__smakebuf_r+0x74>
 8005fb4:	89a3      	ldrh	r3, [r4, #12]
 8005fb6:	f023 0303 	bic.w	r3, r3, #3
 8005fba:	f043 0301 	orr.w	r3, r3, #1
 8005fbe:	81a3      	strh	r3, [r4, #12]
 8005fc0:	89a0      	ldrh	r0, [r4, #12]
 8005fc2:	4305      	orrs	r5, r0
 8005fc4:	81a5      	strh	r5, [r4, #12]
 8005fc6:	e7cd      	b.n	8005f64 <__smakebuf_r+0x18>
 8005fc8:	08005d35 	.word	0x08005d35

08005fcc <_free_r>:
 8005fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fce:	2900      	cmp	r1, #0
 8005fd0:	d044      	beq.n	800605c <_free_r+0x90>
 8005fd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fd6:	9001      	str	r0, [sp, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f1a1 0404 	sub.w	r4, r1, #4
 8005fde:	bfb8      	it	lt
 8005fe0:	18e4      	addlt	r4, r4, r3
 8005fe2:	f000 fdb3 	bl	8006b4c <__malloc_lock>
 8005fe6:	4a1e      	ldr	r2, [pc, #120]	; (8006060 <_free_r+0x94>)
 8005fe8:	9801      	ldr	r0, [sp, #4]
 8005fea:	6813      	ldr	r3, [r2, #0]
 8005fec:	b933      	cbnz	r3, 8005ffc <_free_r+0x30>
 8005fee:	6063      	str	r3, [r4, #4]
 8005ff0:	6014      	str	r4, [r2, #0]
 8005ff2:	b003      	add	sp, #12
 8005ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ff8:	f000 bdae 	b.w	8006b58 <__malloc_unlock>
 8005ffc:	42a3      	cmp	r3, r4
 8005ffe:	d908      	bls.n	8006012 <_free_r+0x46>
 8006000:	6825      	ldr	r5, [r4, #0]
 8006002:	1961      	adds	r1, r4, r5
 8006004:	428b      	cmp	r3, r1
 8006006:	bf01      	itttt	eq
 8006008:	6819      	ldreq	r1, [r3, #0]
 800600a:	685b      	ldreq	r3, [r3, #4]
 800600c:	1949      	addeq	r1, r1, r5
 800600e:	6021      	streq	r1, [r4, #0]
 8006010:	e7ed      	b.n	8005fee <_free_r+0x22>
 8006012:	461a      	mov	r2, r3
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	b10b      	cbz	r3, 800601c <_free_r+0x50>
 8006018:	42a3      	cmp	r3, r4
 800601a:	d9fa      	bls.n	8006012 <_free_r+0x46>
 800601c:	6811      	ldr	r1, [r2, #0]
 800601e:	1855      	adds	r5, r2, r1
 8006020:	42a5      	cmp	r5, r4
 8006022:	d10b      	bne.n	800603c <_free_r+0x70>
 8006024:	6824      	ldr	r4, [r4, #0]
 8006026:	4421      	add	r1, r4
 8006028:	1854      	adds	r4, r2, r1
 800602a:	42a3      	cmp	r3, r4
 800602c:	6011      	str	r1, [r2, #0]
 800602e:	d1e0      	bne.n	8005ff2 <_free_r+0x26>
 8006030:	681c      	ldr	r4, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	6053      	str	r3, [r2, #4]
 8006036:	4421      	add	r1, r4
 8006038:	6011      	str	r1, [r2, #0]
 800603a:	e7da      	b.n	8005ff2 <_free_r+0x26>
 800603c:	d902      	bls.n	8006044 <_free_r+0x78>
 800603e:	230c      	movs	r3, #12
 8006040:	6003      	str	r3, [r0, #0]
 8006042:	e7d6      	b.n	8005ff2 <_free_r+0x26>
 8006044:	6825      	ldr	r5, [r4, #0]
 8006046:	1961      	adds	r1, r4, r5
 8006048:	428b      	cmp	r3, r1
 800604a:	bf04      	itt	eq
 800604c:	6819      	ldreq	r1, [r3, #0]
 800604e:	685b      	ldreq	r3, [r3, #4]
 8006050:	6063      	str	r3, [r4, #4]
 8006052:	bf04      	itt	eq
 8006054:	1949      	addeq	r1, r1, r5
 8006056:	6021      	streq	r1, [r4, #0]
 8006058:	6054      	str	r4, [r2, #4]
 800605a:	e7ca      	b.n	8005ff2 <_free_r+0x26>
 800605c:	b003      	add	sp, #12
 800605e:	bd30      	pop	{r4, r5, pc}
 8006060:	20000258 	.word	0x20000258

08006064 <sbrk_aligned>:
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	4e0e      	ldr	r6, [pc, #56]	; (80060a0 <sbrk_aligned+0x3c>)
 8006068:	460c      	mov	r4, r1
 800606a:	6831      	ldr	r1, [r6, #0]
 800606c:	4605      	mov	r5, r0
 800606e:	b911      	cbnz	r1, 8006076 <sbrk_aligned+0x12>
 8006070:	f000 fbc2 	bl	80067f8 <_sbrk_r>
 8006074:	6030      	str	r0, [r6, #0]
 8006076:	4621      	mov	r1, r4
 8006078:	4628      	mov	r0, r5
 800607a:	f000 fbbd 	bl	80067f8 <_sbrk_r>
 800607e:	1c43      	adds	r3, r0, #1
 8006080:	d00a      	beq.n	8006098 <sbrk_aligned+0x34>
 8006082:	1cc4      	adds	r4, r0, #3
 8006084:	f024 0403 	bic.w	r4, r4, #3
 8006088:	42a0      	cmp	r0, r4
 800608a:	d007      	beq.n	800609c <sbrk_aligned+0x38>
 800608c:	1a21      	subs	r1, r4, r0
 800608e:	4628      	mov	r0, r5
 8006090:	f000 fbb2 	bl	80067f8 <_sbrk_r>
 8006094:	3001      	adds	r0, #1
 8006096:	d101      	bne.n	800609c <sbrk_aligned+0x38>
 8006098:	f04f 34ff 	mov.w	r4, #4294967295
 800609c:	4620      	mov	r0, r4
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	2000025c 	.word	0x2000025c

080060a4 <_malloc_r>:
 80060a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a8:	1ccd      	adds	r5, r1, #3
 80060aa:	f025 0503 	bic.w	r5, r5, #3
 80060ae:	3508      	adds	r5, #8
 80060b0:	2d0c      	cmp	r5, #12
 80060b2:	bf38      	it	cc
 80060b4:	250c      	movcc	r5, #12
 80060b6:	2d00      	cmp	r5, #0
 80060b8:	4607      	mov	r7, r0
 80060ba:	db01      	blt.n	80060c0 <_malloc_r+0x1c>
 80060bc:	42a9      	cmp	r1, r5
 80060be:	d905      	bls.n	80060cc <_malloc_r+0x28>
 80060c0:	230c      	movs	r3, #12
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	2600      	movs	r6, #0
 80060c6:	4630      	mov	r0, r6
 80060c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060cc:	4e2e      	ldr	r6, [pc, #184]	; (8006188 <_malloc_r+0xe4>)
 80060ce:	f000 fd3d 	bl	8006b4c <__malloc_lock>
 80060d2:	6833      	ldr	r3, [r6, #0]
 80060d4:	461c      	mov	r4, r3
 80060d6:	bb34      	cbnz	r4, 8006126 <_malloc_r+0x82>
 80060d8:	4629      	mov	r1, r5
 80060da:	4638      	mov	r0, r7
 80060dc:	f7ff ffc2 	bl	8006064 <sbrk_aligned>
 80060e0:	1c43      	adds	r3, r0, #1
 80060e2:	4604      	mov	r4, r0
 80060e4:	d14d      	bne.n	8006182 <_malloc_r+0xde>
 80060e6:	6834      	ldr	r4, [r6, #0]
 80060e8:	4626      	mov	r6, r4
 80060ea:	2e00      	cmp	r6, #0
 80060ec:	d140      	bne.n	8006170 <_malloc_r+0xcc>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	4631      	mov	r1, r6
 80060f2:	4638      	mov	r0, r7
 80060f4:	eb04 0803 	add.w	r8, r4, r3
 80060f8:	f000 fb7e 	bl	80067f8 <_sbrk_r>
 80060fc:	4580      	cmp	r8, r0
 80060fe:	d13a      	bne.n	8006176 <_malloc_r+0xd2>
 8006100:	6821      	ldr	r1, [r4, #0]
 8006102:	3503      	adds	r5, #3
 8006104:	1a6d      	subs	r5, r5, r1
 8006106:	f025 0503 	bic.w	r5, r5, #3
 800610a:	3508      	adds	r5, #8
 800610c:	2d0c      	cmp	r5, #12
 800610e:	bf38      	it	cc
 8006110:	250c      	movcc	r5, #12
 8006112:	4629      	mov	r1, r5
 8006114:	4638      	mov	r0, r7
 8006116:	f7ff ffa5 	bl	8006064 <sbrk_aligned>
 800611a:	3001      	adds	r0, #1
 800611c:	d02b      	beq.n	8006176 <_malloc_r+0xd2>
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	442b      	add	r3, r5
 8006122:	6023      	str	r3, [r4, #0]
 8006124:	e00e      	b.n	8006144 <_malloc_r+0xa0>
 8006126:	6822      	ldr	r2, [r4, #0]
 8006128:	1b52      	subs	r2, r2, r5
 800612a:	d41e      	bmi.n	800616a <_malloc_r+0xc6>
 800612c:	2a0b      	cmp	r2, #11
 800612e:	d916      	bls.n	800615e <_malloc_r+0xba>
 8006130:	1961      	adds	r1, r4, r5
 8006132:	42a3      	cmp	r3, r4
 8006134:	6025      	str	r5, [r4, #0]
 8006136:	bf18      	it	ne
 8006138:	6059      	strne	r1, [r3, #4]
 800613a:	6863      	ldr	r3, [r4, #4]
 800613c:	bf08      	it	eq
 800613e:	6031      	streq	r1, [r6, #0]
 8006140:	5162      	str	r2, [r4, r5]
 8006142:	604b      	str	r3, [r1, #4]
 8006144:	4638      	mov	r0, r7
 8006146:	f104 060b 	add.w	r6, r4, #11
 800614a:	f000 fd05 	bl	8006b58 <__malloc_unlock>
 800614e:	f026 0607 	bic.w	r6, r6, #7
 8006152:	1d23      	adds	r3, r4, #4
 8006154:	1af2      	subs	r2, r6, r3
 8006156:	d0b6      	beq.n	80060c6 <_malloc_r+0x22>
 8006158:	1b9b      	subs	r3, r3, r6
 800615a:	50a3      	str	r3, [r4, r2]
 800615c:	e7b3      	b.n	80060c6 <_malloc_r+0x22>
 800615e:	6862      	ldr	r2, [r4, #4]
 8006160:	42a3      	cmp	r3, r4
 8006162:	bf0c      	ite	eq
 8006164:	6032      	streq	r2, [r6, #0]
 8006166:	605a      	strne	r2, [r3, #4]
 8006168:	e7ec      	b.n	8006144 <_malloc_r+0xa0>
 800616a:	4623      	mov	r3, r4
 800616c:	6864      	ldr	r4, [r4, #4]
 800616e:	e7b2      	b.n	80060d6 <_malloc_r+0x32>
 8006170:	4634      	mov	r4, r6
 8006172:	6876      	ldr	r6, [r6, #4]
 8006174:	e7b9      	b.n	80060ea <_malloc_r+0x46>
 8006176:	230c      	movs	r3, #12
 8006178:	603b      	str	r3, [r7, #0]
 800617a:	4638      	mov	r0, r7
 800617c:	f000 fcec 	bl	8006b58 <__malloc_unlock>
 8006180:	e7a1      	b.n	80060c6 <_malloc_r+0x22>
 8006182:	6025      	str	r5, [r4, #0]
 8006184:	e7de      	b.n	8006144 <_malloc_r+0xa0>
 8006186:	bf00      	nop
 8006188:	20000258 	.word	0x20000258

0800618c <_sungetc_r>:
 800618c:	b538      	push	{r3, r4, r5, lr}
 800618e:	1c4b      	adds	r3, r1, #1
 8006190:	4614      	mov	r4, r2
 8006192:	d103      	bne.n	800619c <_sungetc_r+0x10>
 8006194:	f04f 35ff 	mov.w	r5, #4294967295
 8006198:	4628      	mov	r0, r5
 800619a:	bd38      	pop	{r3, r4, r5, pc}
 800619c:	8993      	ldrh	r3, [r2, #12]
 800619e:	f023 0320 	bic.w	r3, r3, #32
 80061a2:	8193      	strh	r3, [r2, #12]
 80061a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061a6:	6852      	ldr	r2, [r2, #4]
 80061a8:	b2cd      	uxtb	r5, r1
 80061aa:	b18b      	cbz	r3, 80061d0 <_sungetc_r+0x44>
 80061ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061ae:	4293      	cmp	r3, r2
 80061b0:	dd08      	ble.n	80061c4 <_sungetc_r+0x38>
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	1e5a      	subs	r2, r3, #1
 80061b6:	6022      	str	r2, [r4, #0]
 80061b8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80061bc:	6863      	ldr	r3, [r4, #4]
 80061be:	3301      	adds	r3, #1
 80061c0:	6063      	str	r3, [r4, #4]
 80061c2:	e7e9      	b.n	8006198 <_sungetc_r+0xc>
 80061c4:	4621      	mov	r1, r4
 80061c6:	f000 fc57 	bl	8006a78 <__submore>
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d0f1      	beq.n	80061b2 <_sungetc_r+0x26>
 80061ce:	e7e1      	b.n	8006194 <_sungetc_r+0x8>
 80061d0:	6921      	ldr	r1, [r4, #16]
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	b151      	cbz	r1, 80061ec <_sungetc_r+0x60>
 80061d6:	4299      	cmp	r1, r3
 80061d8:	d208      	bcs.n	80061ec <_sungetc_r+0x60>
 80061da:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80061de:	42a9      	cmp	r1, r5
 80061e0:	d104      	bne.n	80061ec <_sungetc_r+0x60>
 80061e2:	3b01      	subs	r3, #1
 80061e4:	3201      	adds	r2, #1
 80061e6:	6023      	str	r3, [r4, #0]
 80061e8:	6062      	str	r2, [r4, #4]
 80061ea:	e7d5      	b.n	8006198 <_sungetc_r+0xc>
 80061ec:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80061f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061f4:	6363      	str	r3, [r4, #52]	; 0x34
 80061f6:	2303      	movs	r3, #3
 80061f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80061fa:	4623      	mov	r3, r4
 80061fc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	2301      	movs	r3, #1
 8006204:	e7dc      	b.n	80061c0 <_sungetc_r+0x34>

08006206 <__ssrefill_r>:
 8006206:	b510      	push	{r4, lr}
 8006208:	460c      	mov	r4, r1
 800620a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800620c:	b169      	cbz	r1, 800622a <__ssrefill_r+0x24>
 800620e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006212:	4299      	cmp	r1, r3
 8006214:	d001      	beq.n	800621a <__ssrefill_r+0x14>
 8006216:	f7ff fed9 	bl	8005fcc <_free_r>
 800621a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800621c:	6063      	str	r3, [r4, #4]
 800621e:	2000      	movs	r0, #0
 8006220:	6360      	str	r0, [r4, #52]	; 0x34
 8006222:	b113      	cbz	r3, 800622a <__ssrefill_r+0x24>
 8006224:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006226:	6023      	str	r3, [r4, #0]
 8006228:	bd10      	pop	{r4, pc}
 800622a:	6923      	ldr	r3, [r4, #16]
 800622c:	6023      	str	r3, [r4, #0]
 800622e:	2300      	movs	r3, #0
 8006230:	6063      	str	r3, [r4, #4]
 8006232:	89a3      	ldrh	r3, [r4, #12]
 8006234:	f043 0320 	orr.w	r3, r3, #32
 8006238:	81a3      	strh	r3, [r4, #12]
 800623a:	f04f 30ff 	mov.w	r0, #4294967295
 800623e:	e7f3      	b.n	8006228 <__ssrefill_r+0x22>

08006240 <__ssvfiscanf_r>:
 8006240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006244:	460c      	mov	r4, r1
 8006246:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800624a:	2100      	movs	r1, #0
 800624c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006250:	49a6      	ldr	r1, [pc, #664]	; (80064ec <__ssvfiscanf_r+0x2ac>)
 8006252:	91a0      	str	r1, [sp, #640]	; 0x280
 8006254:	f10d 0804 	add.w	r8, sp, #4
 8006258:	49a5      	ldr	r1, [pc, #660]	; (80064f0 <__ssvfiscanf_r+0x2b0>)
 800625a:	4fa6      	ldr	r7, [pc, #664]	; (80064f4 <__ssvfiscanf_r+0x2b4>)
 800625c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80064f8 <__ssvfiscanf_r+0x2b8>
 8006260:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006264:	4606      	mov	r6, r0
 8006266:	91a1      	str	r1, [sp, #644]	; 0x284
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	7813      	ldrb	r3, [r2, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 815a 	beq.w	8006526 <__ssvfiscanf_r+0x2e6>
 8006272:	5dd9      	ldrb	r1, [r3, r7]
 8006274:	f011 0108 	ands.w	r1, r1, #8
 8006278:	f102 0501 	add.w	r5, r2, #1
 800627c:	d019      	beq.n	80062b2 <__ssvfiscanf_r+0x72>
 800627e:	6863      	ldr	r3, [r4, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	dd0f      	ble.n	80062a4 <__ssvfiscanf_r+0x64>
 8006284:	6823      	ldr	r3, [r4, #0]
 8006286:	781a      	ldrb	r2, [r3, #0]
 8006288:	5cba      	ldrb	r2, [r7, r2]
 800628a:	0712      	lsls	r2, r2, #28
 800628c:	d401      	bmi.n	8006292 <__ssvfiscanf_r+0x52>
 800628e:	462a      	mov	r2, r5
 8006290:	e7eb      	b.n	800626a <__ssvfiscanf_r+0x2a>
 8006292:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006294:	3201      	adds	r2, #1
 8006296:	9245      	str	r2, [sp, #276]	; 0x114
 8006298:	6862      	ldr	r2, [r4, #4]
 800629a:	3301      	adds	r3, #1
 800629c:	3a01      	subs	r2, #1
 800629e:	6062      	str	r2, [r4, #4]
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	e7ec      	b.n	800627e <__ssvfiscanf_r+0x3e>
 80062a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80062a6:	4621      	mov	r1, r4
 80062a8:	4630      	mov	r0, r6
 80062aa:	4798      	blx	r3
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d0e9      	beq.n	8006284 <__ssvfiscanf_r+0x44>
 80062b0:	e7ed      	b.n	800628e <__ssvfiscanf_r+0x4e>
 80062b2:	2b25      	cmp	r3, #37	; 0x25
 80062b4:	d012      	beq.n	80062dc <__ssvfiscanf_r+0x9c>
 80062b6:	469a      	mov	sl, r3
 80062b8:	6863      	ldr	r3, [r4, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f340 8091 	ble.w	80063e2 <__ssvfiscanf_r+0x1a2>
 80062c0:	6822      	ldr	r2, [r4, #0]
 80062c2:	7813      	ldrb	r3, [r2, #0]
 80062c4:	4553      	cmp	r3, sl
 80062c6:	f040 812e 	bne.w	8006526 <__ssvfiscanf_r+0x2e6>
 80062ca:	6863      	ldr	r3, [r4, #4]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	6063      	str	r3, [r4, #4]
 80062d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80062d2:	3201      	adds	r2, #1
 80062d4:	3301      	adds	r3, #1
 80062d6:	6022      	str	r2, [r4, #0]
 80062d8:	9345      	str	r3, [sp, #276]	; 0x114
 80062da:	e7d8      	b.n	800628e <__ssvfiscanf_r+0x4e>
 80062dc:	9141      	str	r1, [sp, #260]	; 0x104
 80062de:	9143      	str	r1, [sp, #268]	; 0x10c
 80062e0:	7853      	ldrb	r3, [r2, #1]
 80062e2:	2b2a      	cmp	r3, #42	; 0x2a
 80062e4:	bf02      	ittt	eq
 80062e6:	2310      	moveq	r3, #16
 80062e8:	1c95      	addeq	r5, r2, #2
 80062ea:	9341      	streq	r3, [sp, #260]	; 0x104
 80062ec:	220a      	movs	r2, #10
 80062ee:	46aa      	mov	sl, r5
 80062f0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80062f4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80062f8:	2b09      	cmp	r3, #9
 80062fa:	d91d      	bls.n	8006338 <__ssvfiscanf_r+0xf8>
 80062fc:	487e      	ldr	r0, [pc, #504]	; (80064f8 <__ssvfiscanf_r+0x2b8>)
 80062fe:	2203      	movs	r2, #3
 8006300:	f7f9 ff7e 	bl	8000200 <memchr>
 8006304:	b140      	cbz	r0, 8006318 <__ssvfiscanf_r+0xd8>
 8006306:	2301      	movs	r3, #1
 8006308:	eba0 0009 	sub.w	r0, r0, r9
 800630c:	fa03 f000 	lsl.w	r0, r3, r0
 8006310:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006312:	4318      	orrs	r0, r3
 8006314:	9041      	str	r0, [sp, #260]	; 0x104
 8006316:	4655      	mov	r5, sl
 8006318:	f815 3b01 	ldrb.w	r3, [r5], #1
 800631c:	2b78      	cmp	r3, #120	; 0x78
 800631e:	d806      	bhi.n	800632e <__ssvfiscanf_r+0xee>
 8006320:	2b57      	cmp	r3, #87	; 0x57
 8006322:	d810      	bhi.n	8006346 <__ssvfiscanf_r+0x106>
 8006324:	2b25      	cmp	r3, #37	; 0x25
 8006326:	d0c6      	beq.n	80062b6 <__ssvfiscanf_r+0x76>
 8006328:	d856      	bhi.n	80063d8 <__ssvfiscanf_r+0x198>
 800632a:	2b00      	cmp	r3, #0
 800632c:	d064      	beq.n	80063f8 <__ssvfiscanf_r+0x1b8>
 800632e:	2303      	movs	r3, #3
 8006330:	9347      	str	r3, [sp, #284]	; 0x11c
 8006332:	230a      	movs	r3, #10
 8006334:	9342      	str	r3, [sp, #264]	; 0x108
 8006336:	e071      	b.n	800641c <__ssvfiscanf_r+0x1dc>
 8006338:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800633a:	fb02 1103 	mla	r1, r2, r3, r1
 800633e:	3930      	subs	r1, #48	; 0x30
 8006340:	9143      	str	r1, [sp, #268]	; 0x10c
 8006342:	4655      	mov	r5, sl
 8006344:	e7d3      	b.n	80062ee <__ssvfiscanf_r+0xae>
 8006346:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800634a:	2a20      	cmp	r2, #32
 800634c:	d8ef      	bhi.n	800632e <__ssvfiscanf_r+0xee>
 800634e:	a101      	add	r1, pc, #4	; (adr r1, 8006354 <__ssvfiscanf_r+0x114>)
 8006350:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006354:	08006407 	.word	0x08006407
 8006358:	0800632f 	.word	0x0800632f
 800635c:	0800632f 	.word	0x0800632f
 8006360:	08006465 	.word	0x08006465
 8006364:	0800632f 	.word	0x0800632f
 8006368:	0800632f 	.word	0x0800632f
 800636c:	0800632f 	.word	0x0800632f
 8006370:	0800632f 	.word	0x0800632f
 8006374:	0800632f 	.word	0x0800632f
 8006378:	0800632f 	.word	0x0800632f
 800637c:	0800632f 	.word	0x0800632f
 8006380:	0800647b 	.word	0x0800647b
 8006384:	08006451 	.word	0x08006451
 8006388:	080063df 	.word	0x080063df
 800638c:	080063df 	.word	0x080063df
 8006390:	080063df 	.word	0x080063df
 8006394:	0800632f 	.word	0x0800632f
 8006398:	08006455 	.word	0x08006455
 800639c:	0800632f 	.word	0x0800632f
 80063a0:	0800632f 	.word	0x0800632f
 80063a4:	0800632f 	.word	0x0800632f
 80063a8:	0800632f 	.word	0x0800632f
 80063ac:	0800648b 	.word	0x0800648b
 80063b0:	0800645d 	.word	0x0800645d
 80063b4:	080063ff 	.word	0x080063ff
 80063b8:	0800632f 	.word	0x0800632f
 80063bc:	0800632f 	.word	0x0800632f
 80063c0:	08006487 	.word	0x08006487
 80063c4:	0800632f 	.word	0x0800632f
 80063c8:	08006451 	.word	0x08006451
 80063cc:	0800632f 	.word	0x0800632f
 80063d0:	0800632f 	.word	0x0800632f
 80063d4:	08006407 	.word	0x08006407
 80063d8:	3b45      	subs	r3, #69	; 0x45
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d8a7      	bhi.n	800632e <__ssvfiscanf_r+0xee>
 80063de:	2305      	movs	r3, #5
 80063e0:	e01b      	b.n	800641a <__ssvfiscanf_r+0x1da>
 80063e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80063e4:	4621      	mov	r1, r4
 80063e6:	4630      	mov	r0, r6
 80063e8:	4798      	blx	r3
 80063ea:	2800      	cmp	r0, #0
 80063ec:	f43f af68 	beq.w	80062c0 <__ssvfiscanf_r+0x80>
 80063f0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80063f2:	2800      	cmp	r0, #0
 80063f4:	f040 808d 	bne.w	8006512 <__ssvfiscanf_r+0x2d2>
 80063f8:	f04f 30ff 	mov.w	r0, #4294967295
 80063fc:	e08f      	b.n	800651e <__ssvfiscanf_r+0x2de>
 80063fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006400:	f042 0220 	orr.w	r2, r2, #32
 8006404:	9241      	str	r2, [sp, #260]	; 0x104
 8006406:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800640c:	9241      	str	r2, [sp, #260]	; 0x104
 800640e:	2210      	movs	r2, #16
 8006410:	2b6f      	cmp	r3, #111	; 0x6f
 8006412:	9242      	str	r2, [sp, #264]	; 0x108
 8006414:	bf34      	ite	cc
 8006416:	2303      	movcc	r3, #3
 8006418:	2304      	movcs	r3, #4
 800641a:	9347      	str	r3, [sp, #284]	; 0x11c
 800641c:	6863      	ldr	r3, [r4, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	dd42      	ble.n	80064a8 <__ssvfiscanf_r+0x268>
 8006422:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006424:	0659      	lsls	r1, r3, #25
 8006426:	d404      	bmi.n	8006432 <__ssvfiscanf_r+0x1f2>
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	781a      	ldrb	r2, [r3, #0]
 800642c:	5cba      	ldrb	r2, [r7, r2]
 800642e:	0712      	lsls	r2, r2, #28
 8006430:	d441      	bmi.n	80064b6 <__ssvfiscanf_r+0x276>
 8006432:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006434:	2b02      	cmp	r3, #2
 8006436:	dc50      	bgt.n	80064da <__ssvfiscanf_r+0x29a>
 8006438:	466b      	mov	r3, sp
 800643a:	4622      	mov	r2, r4
 800643c:	a941      	add	r1, sp, #260	; 0x104
 800643e:	4630      	mov	r0, r6
 8006440:	f000 f876 	bl	8006530 <_scanf_chars>
 8006444:	2801      	cmp	r0, #1
 8006446:	d06e      	beq.n	8006526 <__ssvfiscanf_r+0x2e6>
 8006448:	2802      	cmp	r0, #2
 800644a:	f47f af20 	bne.w	800628e <__ssvfiscanf_r+0x4e>
 800644e:	e7cf      	b.n	80063f0 <__ssvfiscanf_r+0x1b0>
 8006450:	220a      	movs	r2, #10
 8006452:	e7dd      	b.n	8006410 <__ssvfiscanf_r+0x1d0>
 8006454:	2300      	movs	r3, #0
 8006456:	9342      	str	r3, [sp, #264]	; 0x108
 8006458:	2303      	movs	r3, #3
 800645a:	e7de      	b.n	800641a <__ssvfiscanf_r+0x1da>
 800645c:	2308      	movs	r3, #8
 800645e:	9342      	str	r3, [sp, #264]	; 0x108
 8006460:	2304      	movs	r3, #4
 8006462:	e7da      	b.n	800641a <__ssvfiscanf_r+0x1da>
 8006464:	4629      	mov	r1, r5
 8006466:	4640      	mov	r0, r8
 8006468:	f000 f9d6 	bl	8006818 <__sccl>
 800646c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800646e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006472:	9341      	str	r3, [sp, #260]	; 0x104
 8006474:	4605      	mov	r5, r0
 8006476:	2301      	movs	r3, #1
 8006478:	e7cf      	b.n	800641a <__ssvfiscanf_r+0x1da>
 800647a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800647c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006480:	9341      	str	r3, [sp, #260]	; 0x104
 8006482:	2300      	movs	r3, #0
 8006484:	e7c9      	b.n	800641a <__ssvfiscanf_r+0x1da>
 8006486:	2302      	movs	r3, #2
 8006488:	e7c7      	b.n	800641a <__ssvfiscanf_r+0x1da>
 800648a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800648c:	06c3      	lsls	r3, r0, #27
 800648e:	f53f aefe 	bmi.w	800628e <__ssvfiscanf_r+0x4e>
 8006492:	9b00      	ldr	r3, [sp, #0]
 8006494:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006496:	1d19      	adds	r1, r3, #4
 8006498:	9100      	str	r1, [sp, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f010 0f01 	tst.w	r0, #1
 80064a0:	bf14      	ite	ne
 80064a2:	801a      	strhne	r2, [r3, #0]
 80064a4:	601a      	streq	r2, [r3, #0]
 80064a6:	e6f2      	b.n	800628e <__ssvfiscanf_r+0x4e>
 80064a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80064aa:	4621      	mov	r1, r4
 80064ac:	4630      	mov	r0, r6
 80064ae:	4798      	blx	r3
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d0b6      	beq.n	8006422 <__ssvfiscanf_r+0x1e2>
 80064b4:	e79c      	b.n	80063f0 <__ssvfiscanf_r+0x1b0>
 80064b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80064b8:	3201      	adds	r2, #1
 80064ba:	9245      	str	r2, [sp, #276]	; 0x114
 80064bc:	6862      	ldr	r2, [r4, #4]
 80064be:	3a01      	subs	r2, #1
 80064c0:	2a00      	cmp	r2, #0
 80064c2:	6062      	str	r2, [r4, #4]
 80064c4:	dd02      	ble.n	80064cc <__ssvfiscanf_r+0x28c>
 80064c6:	3301      	adds	r3, #1
 80064c8:	6023      	str	r3, [r4, #0]
 80064ca:	e7ad      	b.n	8006428 <__ssvfiscanf_r+0x1e8>
 80064cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80064ce:	4621      	mov	r1, r4
 80064d0:	4630      	mov	r0, r6
 80064d2:	4798      	blx	r3
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d0a7      	beq.n	8006428 <__ssvfiscanf_r+0x1e8>
 80064d8:	e78a      	b.n	80063f0 <__ssvfiscanf_r+0x1b0>
 80064da:	2b04      	cmp	r3, #4
 80064dc:	dc0e      	bgt.n	80064fc <__ssvfiscanf_r+0x2bc>
 80064de:	466b      	mov	r3, sp
 80064e0:	4622      	mov	r2, r4
 80064e2:	a941      	add	r1, sp, #260	; 0x104
 80064e4:	4630      	mov	r0, r6
 80064e6:	f000 f87d 	bl	80065e4 <_scanf_i>
 80064ea:	e7ab      	b.n	8006444 <__ssvfiscanf_r+0x204>
 80064ec:	0800618d 	.word	0x0800618d
 80064f0:	08006207 	.word	0x08006207
 80064f4:	08006cf4 	.word	0x08006cf4
 80064f8:	08006cd4 	.word	0x08006cd4
 80064fc:	4b0b      	ldr	r3, [pc, #44]	; (800652c <__ssvfiscanf_r+0x2ec>)
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f43f aec5 	beq.w	800628e <__ssvfiscanf_r+0x4e>
 8006504:	466b      	mov	r3, sp
 8006506:	4622      	mov	r2, r4
 8006508:	a941      	add	r1, sp, #260	; 0x104
 800650a:	4630      	mov	r0, r6
 800650c:	f3af 8000 	nop.w
 8006510:	e798      	b.n	8006444 <__ssvfiscanf_r+0x204>
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006518:	bf18      	it	ne
 800651a:	f04f 30ff 	movne.w	r0, #4294967295
 800651e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006526:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006528:	e7f9      	b.n	800651e <__ssvfiscanf_r+0x2de>
 800652a:	bf00      	nop
 800652c:	00000000 	.word	0x00000000

08006530 <_scanf_chars>:
 8006530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006534:	4615      	mov	r5, r2
 8006536:	688a      	ldr	r2, [r1, #8]
 8006538:	4680      	mov	r8, r0
 800653a:	460c      	mov	r4, r1
 800653c:	b932      	cbnz	r2, 800654c <_scanf_chars+0x1c>
 800653e:	698a      	ldr	r2, [r1, #24]
 8006540:	2a00      	cmp	r2, #0
 8006542:	bf0c      	ite	eq
 8006544:	2201      	moveq	r2, #1
 8006546:	f04f 32ff 	movne.w	r2, #4294967295
 800654a:	608a      	str	r2, [r1, #8]
 800654c:	6822      	ldr	r2, [r4, #0]
 800654e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80065e0 <_scanf_chars+0xb0>
 8006552:	06d1      	lsls	r1, r2, #27
 8006554:	bf5f      	itttt	pl
 8006556:	681a      	ldrpl	r2, [r3, #0]
 8006558:	1d11      	addpl	r1, r2, #4
 800655a:	6019      	strpl	r1, [r3, #0]
 800655c:	6816      	ldrpl	r6, [r2, #0]
 800655e:	2700      	movs	r7, #0
 8006560:	69a0      	ldr	r0, [r4, #24]
 8006562:	b188      	cbz	r0, 8006588 <_scanf_chars+0x58>
 8006564:	2801      	cmp	r0, #1
 8006566:	d107      	bne.n	8006578 <_scanf_chars+0x48>
 8006568:	682a      	ldr	r2, [r5, #0]
 800656a:	7811      	ldrb	r1, [r2, #0]
 800656c:	6962      	ldr	r2, [r4, #20]
 800656e:	5c52      	ldrb	r2, [r2, r1]
 8006570:	b952      	cbnz	r2, 8006588 <_scanf_chars+0x58>
 8006572:	2f00      	cmp	r7, #0
 8006574:	d031      	beq.n	80065da <_scanf_chars+0xaa>
 8006576:	e022      	b.n	80065be <_scanf_chars+0x8e>
 8006578:	2802      	cmp	r0, #2
 800657a:	d120      	bne.n	80065be <_scanf_chars+0x8e>
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	f813 3009 	ldrb.w	r3, [r3, r9]
 8006584:	071b      	lsls	r3, r3, #28
 8006586:	d41a      	bmi.n	80065be <_scanf_chars+0x8e>
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	06da      	lsls	r2, r3, #27
 800658c:	bf5e      	ittt	pl
 800658e:	682b      	ldrpl	r3, [r5, #0]
 8006590:	781b      	ldrbpl	r3, [r3, #0]
 8006592:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006596:	682a      	ldr	r2, [r5, #0]
 8006598:	686b      	ldr	r3, [r5, #4]
 800659a:	3201      	adds	r2, #1
 800659c:	602a      	str	r2, [r5, #0]
 800659e:	68a2      	ldr	r2, [r4, #8]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	3a01      	subs	r2, #1
 80065a4:	606b      	str	r3, [r5, #4]
 80065a6:	3701      	adds	r7, #1
 80065a8:	60a2      	str	r2, [r4, #8]
 80065aa:	b142      	cbz	r2, 80065be <_scanf_chars+0x8e>
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	dcd7      	bgt.n	8006560 <_scanf_chars+0x30>
 80065b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80065b4:	4629      	mov	r1, r5
 80065b6:	4640      	mov	r0, r8
 80065b8:	4798      	blx	r3
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d0d0      	beq.n	8006560 <_scanf_chars+0x30>
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	f013 0310 	ands.w	r3, r3, #16
 80065c4:	d105      	bne.n	80065d2 <_scanf_chars+0xa2>
 80065c6:	68e2      	ldr	r2, [r4, #12]
 80065c8:	3201      	adds	r2, #1
 80065ca:	60e2      	str	r2, [r4, #12]
 80065cc:	69a2      	ldr	r2, [r4, #24]
 80065ce:	b102      	cbz	r2, 80065d2 <_scanf_chars+0xa2>
 80065d0:	7033      	strb	r3, [r6, #0]
 80065d2:	6923      	ldr	r3, [r4, #16]
 80065d4:	443b      	add	r3, r7
 80065d6:	6123      	str	r3, [r4, #16]
 80065d8:	2000      	movs	r0, #0
 80065da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065de:	bf00      	nop
 80065e0:	08006cf4 	.word	0x08006cf4

080065e4 <_scanf_i>:
 80065e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e8:	4698      	mov	r8, r3
 80065ea:	4b76      	ldr	r3, [pc, #472]	; (80067c4 <_scanf_i+0x1e0>)
 80065ec:	460c      	mov	r4, r1
 80065ee:	4682      	mov	sl, r0
 80065f0:	4616      	mov	r6, r2
 80065f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80065f6:	b087      	sub	sp, #28
 80065f8:	ab03      	add	r3, sp, #12
 80065fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80065fe:	4b72      	ldr	r3, [pc, #456]	; (80067c8 <_scanf_i+0x1e4>)
 8006600:	69a1      	ldr	r1, [r4, #24]
 8006602:	4a72      	ldr	r2, [pc, #456]	; (80067cc <_scanf_i+0x1e8>)
 8006604:	2903      	cmp	r1, #3
 8006606:	bf18      	it	ne
 8006608:	461a      	movne	r2, r3
 800660a:	68a3      	ldr	r3, [r4, #8]
 800660c:	9201      	str	r2, [sp, #4]
 800660e:	1e5a      	subs	r2, r3, #1
 8006610:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006614:	bf88      	it	hi
 8006616:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800661a:	4627      	mov	r7, r4
 800661c:	bf82      	ittt	hi
 800661e:	eb03 0905 	addhi.w	r9, r3, r5
 8006622:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006626:	60a3      	strhi	r3, [r4, #8]
 8006628:	f857 3b1c 	ldr.w	r3, [r7], #28
 800662c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006630:	bf98      	it	ls
 8006632:	f04f 0900 	movls.w	r9, #0
 8006636:	6023      	str	r3, [r4, #0]
 8006638:	463d      	mov	r5, r7
 800663a:	f04f 0b00 	mov.w	fp, #0
 800663e:	6831      	ldr	r1, [r6, #0]
 8006640:	ab03      	add	r3, sp, #12
 8006642:	7809      	ldrb	r1, [r1, #0]
 8006644:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006648:	2202      	movs	r2, #2
 800664a:	f7f9 fdd9 	bl	8000200 <memchr>
 800664e:	b328      	cbz	r0, 800669c <_scanf_i+0xb8>
 8006650:	f1bb 0f01 	cmp.w	fp, #1
 8006654:	d159      	bne.n	800670a <_scanf_i+0x126>
 8006656:	6862      	ldr	r2, [r4, #4]
 8006658:	b92a      	cbnz	r2, 8006666 <_scanf_i+0x82>
 800665a:	6822      	ldr	r2, [r4, #0]
 800665c:	2308      	movs	r3, #8
 800665e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006662:	6063      	str	r3, [r4, #4]
 8006664:	6022      	str	r2, [r4, #0]
 8006666:	6822      	ldr	r2, [r4, #0]
 8006668:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800666c:	6022      	str	r2, [r4, #0]
 800666e:	68a2      	ldr	r2, [r4, #8]
 8006670:	1e51      	subs	r1, r2, #1
 8006672:	60a1      	str	r1, [r4, #8]
 8006674:	b192      	cbz	r2, 800669c <_scanf_i+0xb8>
 8006676:	6832      	ldr	r2, [r6, #0]
 8006678:	1c51      	adds	r1, r2, #1
 800667a:	6031      	str	r1, [r6, #0]
 800667c:	7812      	ldrb	r2, [r2, #0]
 800667e:	f805 2b01 	strb.w	r2, [r5], #1
 8006682:	6872      	ldr	r2, [r6, #4]
 8006684:	3a01      	subs	r2, #1
 8006686:	2a00      	cmp	r2, #0
 8006688:	6072      	str	r2, [r6, #4]
 800668a:	dc07      	bgt.n	800669c <_scanf_i+0xb8>
 800668c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006690:	4631      	mov	r1, r6
 8006692:	4650      	mov	r0, sl
 8006694:	4790      	blx	r2
 8006696:	2800      	cmp	r0, #0
 8006698:	f040 8085 	bne.w	80067a6 <_scanf_i+0x1c2>
 800669c:	f10b 0b01 	add.w	fp, fp, #1
 80066a0:	f1bb 0f03 	cmp.w	fp, #3
 80066a4:	d1cb      	bne.n	800663e <_scanf_i+0x5a>
 80066a6:	6863      	ldr	r3, [r4, #4]
 80066a8:	b90b      	cbnz	r3, 80066ae <_scanf_i+0xca>
 80066aa:	230a      	movs	r3, #10
 80066ac:	6063      	str	r3, [r4, #4]
 80066ae:	6863      	ldr	r3, [r4, #4]
 80066b0:	4947      	ldr	r1, [pc, #284]	; (80067d0 <_scanf_i+0x1ec>)
 80066b2:	6960      	ldr	r0, [r4, #20]
 80066b4:	1ac9      	subs	r1, r1, r3
 80066b6:	f000 f8af 	bl	8006818 <__sccl>
 80066ba:	f04f 0b00 	mov.w	fp, #0
 80066be:	68a3      	ldr	r3, [r4, #8]
 80066c0:	6822      	ldr	r2, [r4, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d03d      	beq.n	8006742 <_scanf_i+0x15e>
 80066c6:	6831      	ldr	r1, [r6, #0]
 80066c8:	6960      	ldr	r0, [r4, #20]
 80066ca:	f891 c000 	ldrb.w	ip, [r1]
 80066ce:	f810 000c 	ldrb.w	r0, [r0, ip]
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d035      	beq.n	8006742 <_scanf_i+0x15e>
 80066d6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80066da:	d124      	bne.n	8006726 <_scanf_i+0x142>
 80066dc:	0510      	lsls	r0, r2, #20
 80066de:	d522      	bpl.n	8006726 <_scanf_i+0x142>
 80066e0:	f10b 0b01 	add.w	fp, fp, #1
 80066e4:	f1b9 0f00 	cmp.w	r9, #0
 80066e8:	d003      	beq.n	80066f2 <_scanf_i+0x10e>
 80066ea:	3301      	adds	r3, #1
 80066ec:	f109 39ff 	add.w	r9, r9, #4294967295
 80066f0:	60a3      	str	r3, [r4, #8]
 80066f2:	6873      	ldr	r3, [r6, #4]
 80066f4:	3b01      	subs	r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	6073      	str	r3, [r6, #4]
 80066fa:	dd1b      	ble.n	8006734 <_scanf_i+0x150>
 80066fc:	6833      	ldr	r3, [r6, #0]
 80066fe:	3301      	adds	r3, #1
 8006700:	6033      	str	r3, [r6, #0]
 8006702:	68a3      	ldr	r3, [r4, #8]
 8006704:	3b01      	subs	r3, #1
 8006706:	60a3      	str	r3, [r4, #8]
 8006708:	e7d9      	b.n	80066be <_scanf_i+0xda>
 800670a:	f1bb 0f02 	cmp.w	fp, #2
 800670e:	d1ae      	bne.n	800666e <_scanf_i+0x8a>
 8006710:	6822      	ldr	r2, [r4, #0]
 8006712:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006716:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800671a:	d1bf      	bne.n	800669c <_scanf_i+0xb8>
 800671c:	2310      	movs	r3, #16
 800671e:	6063      	str	r3, [r4, #4]
 8006720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006724:	e7a2      	b.n	800666c <_scanf_i+0x88>
 8006726:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800672a:	6022      	str	r2, [r4, #0]
 800672c:	780b      	ldrb	r3, [r1, #0]
 800672e:	f805 3b01 	strb.w	r3, [r5], #1
 8006732:	e7de      	b.n	80066f2 <_scanf_i+0x10e>
 8006734:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006738:	4631      	mov	r1, r6
 800673a:	4650      	mov	r0, sl
 800673c:	4798      	blx	r3
 800673e:	2800      	cmp	r0, #0
 8006740:	d0df      	beq.n	8006702 <_scanf_i+0x11e>
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	05db      	lsls	r3, r3, #23
 8006746:	d50d      	bpl.n	8006764 <_scanf_i+0x180>
 8006748:	42bd      	cmp	r5, r7
 800674a:	d909      	bls.n	8006760 <_scanf_i+0x17c>
 800674c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006750:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006754:	4632      	mov	r2, r6
 8006756:	4650      	mov	r0, sl
 8006758:	4798      	blx	r3
 800675a:	f105 39ff 	add.w	r9, r5, #4294967295
 800675e:	464d      	mov	r5, r9
 8006760:	42bd      	cmp	r5, r7
 8006762:	d02d      	beq.n	80067c0 <_scanf_i+0x1dc>
 8006764:	6822      	ldr	r2, [r4, #0]
 8006766:	f012 0210 	ands.w	r2, r2, #16
 800676a:	d113      	bne.n	8006794 <_scanf_i+0x1b0>
 800676c:	702a      	strb	r2, [r5, #0]
 800676e:	6863      	ldr	r3, [r4, #4]
 8006770:	9e01      	ldr	r6, [sp, #4]
 8006772:	4639      	mov	r1, r7
 8006774:	4650      	mov	r0, sl
 8006776:	47b0      	blx	r6
 8006778:	6821      	ldr	r1, [r4, #0]
 800677a:	f8d8 3000 	ldr.w	r3, [r8]
 800677e:	f011 0f20 	tst.w	r1, #32
 8006782:	d013      	beq.n	80067ac <_scanf_i+0x1c8>
 8006784:	1d1a      	adds	r2, r3, #4
 8006786:	f8c8 2000 	str.w	r2, [r8]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6018      	str	r0, [r3, #0]
 800678e:	68e3      	ldr	r3, [r4, #12]
 8006790:	3301      	adds	r3, #1
 8006792:	60e3      	str	r3, [r4, #12]
 8006794:	1bed      	subs	r5, r5, r7
 8006796:	44ab      	add	fp, r5
 8006798:	6925      	ldr	r5, [r4, #16]
 800679a:	445d      	add	r5, fp
 800679c:	6125      	str	r5, [r4, #16]
 800679e:	2000      	movs	r0, #0
 80067a0:	b007      	add	sp, #28
 80067a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a6:	f04f 0b00 	mov.w	fp, #0
 80067aa:	e7ca      	b.n	8006742 <_scanf_i+0x15e>
 80067ac:	1d1a      	adds	r2, r3, #4
 80067ae:	f8c8 2000 	str.w	r2, [r8]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f011 0f01 	tst.w	r1, #1
 80067b8:	bf14      	ite	ne
 80067ba:	8018      	strhne	r0, [r3, #0]
 80067bc:	6018      	streq	r0, [r3, #0]
 80067be:	e7e6      	b.n	800678e <_scanf_i+0x1aa>
 80067c0:	2001      	movs	r0, #1
 80067c2:	e7ed      	b.n	80067a0 <_scanf_i+0x1bc>
 80067c4:	08006c1c 	.word	0x08006c1c
 80067c8:	08006a75 	.word	0x08006a75
 80067cc:	0800698d 	.word	0x0800698d
 80067d0:	08006cf1 	.word	0x08006cf1

080067d4 <_read_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	4d07      	ldr	r5, [pc, #28]	; (80067f4 <_read_r+0x20>)
 80067d8:	4604      	mov	r4, r0
 80067da:	4608      	mov	r0, r1
 80067dc:	4611      	mov	r1, r2
 80067de:	2200      	movs	r2, #0
 80067e0:	602a      	str	r2, [r5, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	f7fa fc02 	bl	8000fec <_read>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d102      	bne.n	80067f2 <_read_r+0x1e>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	b103      	cbz	r3, 80067f2 <_read_r+0x1e>
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	bd38      	pop	{r3, r4, r5, pc}
 80067f4:	20000260 	.word	0x20000260

080067f8 <_sbrk_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	4d06      	ldr	r5, [pc, #24]	; (8006814 <_sbrk_r+0x1c>)
 80067fc:	2300      	movs	r3, #0
 80067fe:	4604      	mov	r4, r0
 8006800:	4608      	mov	r0, r1
 8006802:	602b      	str	r3, [r5, #0]
 8006804:	f7fa fc44 	bl	8001090 <_sbrk>
 8006808:	1c43      	adds	r3, r0, #1
 800680a:	d102      	bne.n	8006812 <_sbrk_r+0x1a>
 800680c:	682b      	ldr	r3, [r5, #0]
 800680e:	b103      	cbz	r3, 8006812 <_sbrk_r+0x1a>
 8006810:	6023      	str	r3, [r4, #0]
 8006812:	bd38      	pop	{r3, r4, r5, pc}
 8006814:	20000260 	.word	0x20000260

08006818 <__sccl>:
 8006818:	b570      	push	{r4, r5, r6, lr}
 800681a:	780b      	ldrb	r3, [r1, #0]
 800681c:	4604      	mov	r4, r0
 800681e:	2b5e      	cmp	r3, #94	; 0x5e
 8006820:	bf0b      	itete	eq
 8006822:	784b      	ldrbeq	r3, [r1, #1]
 8006824:	1c48      	addne	r0, r1, #1
 8006826:	1c88      	addeq	r0, r1, #2
 8006828:	2200      	movne	r2, #0
 800682a:	bf08      	it	eq
 800682c:	2201      	moveq	r2, #1
 800682e:	1e61      	subs	r1, r4, #1
 8006830:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006834:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006838:	42a9      	cmp	r1, r5
 800683a:	d1fb      	bne.n	8006834 <__sccl+0x1c>
 800683c:	b90b      	cbnz	r3, 8006842 <__sccl+0x2a>
 800683e:	3801      	subs	r0, #1
 8006840:	bd70      	pop	{r4, r5, r6, pc}
 8006842:	f082 0201 	eor.w	r2, r2, #1
 8006846:	54e2      	strb	r2, [r4, r3]
 8006848:	4605      	mov	r5, r0
 800684a:	4628      	mov	r0, r5
 800684c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006850:	292d      	cmp	r1, #45	; 0x2d
 8006852:	d006      	beq.n	8006862 <__sccl+0x4a>
 8006854:	295d      	cmp	r1, #93	; 0x5d
 8006856:	d0f3      	beq.n	8006840 <__sccl+0x28>
 8006858:	b909      	cbnz	r1, 800685e <__sccl+0x46>
 800685a:	4628      	mov	r0, r5
 800685c:	e7f0      	b.n	8006840 <__sccl+0x28>
 800685e:	460b      	mov	r3, r1
 8006860:	e7f1      	b.n	8006846 <__sccl+0x2e>
 8006862:	786e      	ldrb	r6, [r5, #1]
 8006864:	2e5d      	cmp	r6, #93	; 0x5d
 8006866:	d0fa      	beq.n	800685e <__sccl+0x46>
 8006868:	42b3      	cmp	r3, r6
 800686a:	dcf8      	bgt.n	800685e <__sccl+0x46>
 800686c:	3502      	adds	r5, #2
 800686e:	4619      	mov	r1, r3
 8006870:	3101      	adds	r1, #1
 8006872:	428e      	cmp	r6, r1
 8006874:	5462      	strb	r2, [r4, r1]
 8006876:	dcfb      	bgt.n	8006870 <__sccl+0x58>
 8006878:	1af1      	subs	r1, r6, r3
 800687a:	3901      	subs	r1, #1
 800687c:	1c58      	adds	r0, r3, #1
 800687e:	42b3      	cmp	r3, r6
 8006880:	bfa8      	it	ge
 8006882:	2100      	movge	r1, #0
 8006884:	1843      	adds	r3, r0, r1
 8006886:	e7e0      	b.n	800684a <__sccl+0x32>

08006888 <_strtol_l.constprop.0>:
 8006888:	2b01      	cmp	r3, #1
 800688a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800688e:	d001      	beq.n	8006894 <_strtol_l.constprop.0+0xc>
 8006890:	2b24      	cmp	r3, #36	; 0x24
 8006892:	d906      	bls.n	80068a2 <_strtol_l.constprop.0+0x1a>
 8006894:	f7fe ff6c 	bl	8005770 <__errno>
 8006898:	2316      	movs	r3, #22
 800689a:	6003      	str	r3, [r0, #0]
 800689c:	2000      	movs	r0, #0
 800689e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006988 <_strtol_l.constprop.0+0x100>
 80068a6:	460d      	mov	r5, r1
 80068a8:	462e      	mov	r6, r5
 80068aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 80068b2:	f017 0708 	ands.w	r7, r7, #8
 80068b6:	d1f7      	bne.n	80068a8 <_strtol_l.constprop.0+0x20>
 80068b8:	2c2d      	cmp	r4, #45	; 0x2d
 80068ba:	d132      	bne.n	8006922 <_strtol_l.constprop.0+0x9a>
 80068bc:	782c      	ldrb	r4, [r5, #0]
 80068be:	2701      	movs	r7, #1
 80068c0:	1cb5      	adds	r5, r6, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d05b      	beq.n	800697e <_strtol_l.constprop.0+0xf6>
 80068c6:	2b10      	cmp	r3, #16
 80068c8:	d109      	bne.n	80068de <_strtol_l.constprop.0+0x56>
 80068ca:	2c30      	cmp	r4, #48	; 0x30
 80068cc:	d107      	bne.n	80068de <_strtol_l.constprop.0+0x56>
 80068ce:	782c      	ldrb	r4, [r5, #0]
 80068d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80068d4:	2c58      	cmp	r4, #88	; 0x58
 80068d6:	d14d      	bne.n	8006974 <_strtol_l.constprop.0+0xec>
 80068d8:	786c      	ldrb	r4, [r5, #1]
 80068da:	2310      	movs	r3, #16
 80068dc:	3502      	adds	r5, #2
 80068de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80068e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80068e6:	f04f 0c00 	mov.w	ip, #0
 80068ea:	fbb8 f9f3 	udiv	r9, r8, r3
 80068ee:	4666      	mov	r6, ip
 80068f0:	fb03 8a19 	mls	sl, r3, r9, r8
 80068f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80068f8:	f1be 0f09 	cmp.w	lr, #9
 80068fc:	d816      	bhi.n	800692c <_strtol_l.constprop.0+0xa4>
 80068fe:	4674      	mov	r4, lr
 8006900:	42a3      	cmp	r3, r4
 8006902:	dd24      	ble.n	800694e <_strtol_l.constprop.0+0xc6>
 8006904:	f1bc 0f00 	cmp.w	ip, #0
 8006908:	db1e      	blt.n	8006948 <_strtol_l.constprop.0+0xc0>
 800690a:	45b1      	cmp	r9, r6
 800690c:	d31c      	bcc.n	8006948 <_strtol_l.constprop.0+0xc0>
 800690e:	d101      	bne.n	8006914 <_strtol_l.constprop.0+0x8c>
 8006910:	45a2      	cmp	sl, r4
 8006912:	db19      	blt.n	8006948 <_strtol_l.constprop.0+0xc0>
 8006914:	fb06 4603 	mla	r6, r6, r3, r4
 8006918:	f04f 0c01 	mov.w	ip, #1
 800691c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006920:	e7e8      	b.n	80068f4 <_strtol_l.constprop.0+0x6c>
 8006922:	2c2b      	cmp	r4, #43	; 0x2b
 8006924:	bf04      	itt	eq
 8006926:	782c      	ldrbeq	r4, [r5, #0]
 8006928:	1cb5      	addeq	r5, r6, #2
 800692a:	e7ca      	b.n	80068c2 <_strtol_l.constprop.0+0x3a>
 800692c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006930:	f1be 0f19 	cmp.w	lr, #25
 8006934:	d801      	bhi.n	800693a <_strtol_l.constprop.0+0xb2>
 8006936:	3c37      	subs	r4, #55	; 0x37
 8006938:	e7e2      	b.n	8006900 <_strtol_l.constprop.0+0x78>
 800693a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800693e:	f1be 0f19 	cmp.w	lr, #25
 8006942:	d804      	bhi.n	800694e <_strtol_l.constprop.0+0xc6>
 8006944:	3c57      	subs	r4, #87	; 0x57
 8006946:	e7db      	b.n	8006900 <_strtol_l.constprop.0+0x78>
 8006948:	f04f 3cff 	mov.w	ip, #4294967295
 800694c:	e7e6      	b.n	800691c <_strtol_l.constprop.0+0x94>
 800694e:	f1bc 0f00 	cmp.w	ip, #0
 8006952:	da05      	bge.n	8006960 <_strtol_l.constprop.0+0xd8>
 8006954:	2322      	movs	r3, #34	; 0x22
 8006956:	6003      	str	r3, [r0, #0]
 8006958:	4646      	mov	r6, r8
 800695a:	b942      	cbnz	r2, 800696e <_strtol_l.constprop.0+0xe6>
 800695c:	4630      	mov	r0, r6
 800695e:	e79e      	b.n	800689e <_strtol_l.constprop.0+0x16>
 8006960:	b107      	cbz	r7, 8006964 <_strtol_l.constprop.0+0xdc>
 8006962:	4276      	negs	r6, r6
 8006964:	2a00      	cmp	r2, #0
 8006966:	d0f9      	beq.n	800695c <_strtol_l.constprop.0+0xd4>
 8006968:	f1bc 0f00 	cmp.w	ip, #0
 800696c:	d000      	beq.n	8006970 <_strtol_l.constprop.0+0xe8>
 800696e:	1e69      	subs	r1, r5, #1
 8006970:	6011      	str	r1, [r2, #0]
 8006972:	e7f3      	b.n	800695c <_strtol_l.constprop.0+0xd4>
 8006974:	2430      	movs	r4, #48	; 0x30
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1b1      	bne.n	80068de <_strtol_l.constprop.0+0x56>
 800697a:	2308      	movs	r3, #8
 800697c:	e7af      	b.n	80068de <_strtol_l.constprop.0+0x56>
 800697e:	2c30      	cmp	r4, #48	; 0x30
 8006980:	d0a5      	beq.n	80068ce <_strtol_l.constprop.0+0x46>
 8006982:	230a      	movs	r3, #10
 8006984:	e7ab      	b.n	80068de <_strtol_l.constprop.0+0x56>
 8006986:	bf00      	nop
 8006988:	08006cf4 	.word	0x08006cf4

0800698c <_strtol_r>:
 800698c:	f7ff bf7c 	b.w	8006888 <_strtol_l.constprop.0>

08006990 <_strtoul_l.constprop.0>:
 8006990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006994:	4f36      	ldr	r7, [pc, #216]	; (8006a70 <_strtoul_l.constprop.0+0xe0>)
 8006996:	4686      	mov	lr, r0
 8006998:	460d      	mov	r5, r1
 800699a:	4628      	mov	r0, r5
 800699c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069a0:	5de6      	ldrb	r6, [r4, r7]
 80069a2:	f016 0608 	ands.w	r6, r6, #8
 80069a6:	d1f8      	bne.n	800699a <_strtoul_l.constprop.0+0xa>
 80069a8:	2c2d      	cmp	r4, #45	; 0x2d
 80069aa:	d12f      	bne.n	8006a0c <_strtoul_l.constprop.0+0x7c>
 80069ac:	782c      	ldrb	r4, [r5, #0]
 80069ae:	2601      	movs	r6, #1
 80069b0:	1c85      	adds	r5, r0, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d057      	beq.n	8006a66 <_strtoul_l.constprop.0+0xd6>
 80069b6:	2b10      	cmp	r3, #16
 80069b8:	d109      	bne.n	80069ce <_strtoul_l.constprop.0+0x3e>
 80069ba:	2c30      	cmp	r4, #48	; 0x30
 80069bc:	d107      	bne.n	80069ce <_strtoul_l.constprop.0+0x3e>
 80069be:	7828      	ldrb	r0, [r5, #0]
 80069c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80069c4:	2858      	cmp	r0, #88	; 0x58
 80069c6:	d149      	bne.n	8006a5c <_strtoul_l.constprop.0+0xcc>
 80069c8:	786c      	ldrb	r4, [r5, #1]
 80069ca:	2310      	movs	r3, #16
 80069cc:	3502      	adds	r5, #2
 80069ce:	f04f 38ff 	mov.w	r8, #4294967295
 80069d2:	2700      	movs	r7, #0
 80069d4:	fbb8 f8f3 	udiv	r8, r8, r3
 80069d8:	fb03 f908 	mul.w	r9, r3, r8
 80069dc:	ea6f 0909 	mvn.w	r9, r9
 80069e0:	4638      	mov	r0, r7
 80069e2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80069e6:	f1bc 0f09 	cmp.w	ip, #9
 80069ea:	d814      	bhi.n	8006a16 <_strtoul_l.constprop.0+0x86>
 80069ec:	4664      	mov	r4, ip
 80069ee:	42a3      	cmp	r3, r4
 80069f0:	dd22      	ble.n	8006a38 <_strtoul_l.constprop.0+0xa8>
 80069f2:	2f00      	cmp	r7, #0
 80069f4:	db1d      	blt.n	8006a32 <_strtoul_l.constprop.0+0xa2>
 80069f6:	4580      	cmp	r8, r0
 80069f8:	d31b      	bcc.n	8006a32 <_strtoul_l.constprop.0+0xa2>
 80069fa:	d101      	bne.n	8006a00 <_strtoul_l.constprop.0+0x70>
 80069fc:	45a1      	cmp	r9, r4
 80069fe:	db18      	blt.n	8006a32 <_strtoul_l.constprop.0+0xa2>
 8006a00:	fb00 4003 	mla	r0, r0, r3, r4
 8006a04:	2701      	movs	r7, #1
 8006a06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a0a:	e7ea      	b.n	80069e2 <_strtoul_l.constprop.0+0x52>
 8006a0c:	2c2b      	cmp	r4, #43	; 0x2b
 8006a0e:	bf04      	itt	eq
 8006a10:	782c      	ldrbeq	r4, [r5, #0]
 8006a12:	1c85      	addeq	r5, r0, #2
 8006a14:	e7cd      	b.n	80069b2 <_strtoul_l.constprop.0+0x22>
 8006a16:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006a1a:	f1bc 0f19 	cmp.w	ip, #25
 8006a1e:	d801      	bhi.n	8006a24 <_strtoul_l.constprop.0+0x94>
 8006a20:	3c37      	subs	r4, #55	; 0x37
 8006a22:	e7e4      	b.n	80069ee <_strtoul_l.constprop.0+0x5e>
 8006a24:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006a28:	f1bc 0f19 	cmp.w	ip, #25
 8006a2c:	d804      	bhi.n	8006a38 <_strtoul_l.constprop.0+0xa8>
 8006a2e:	3c57      	subs	r4, #87	; 0x57
 8006a30:	e7dd      	b.n	80069ee <_strtoul_l.constprop.0+0x5e>
 8006a32:	f04f 37ff 	mov.w	r7, #4294967295
 8006a36:	e7e6      	b.n	8006a06 <_strtoul_l.constprop.0+0x76>
 8006a38:	2f00      	cmp	r7, #0
 8006a3a:	da07      	bge.n	8006a4c <_strtoul_l.constprop.0+0xbc>
 8006a3c:	2322      	movs	r3, #34	; 0x22
 8006a3e:	f8ce 3000 	str.w	r3, [lr]
 8006a42:	f04f 30ff 	mov.w	r0, #4294967295
 8006a46:	b932      	cbnz	r2, 8006a56 <_strtoul_l.constprop.0+0xc6>
 8006a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a4c:	b106      	cbz	r6, 8006a50 <_strtoul_l.constprop.0+0xc0>
 8006a4e:	4240      	negs	r0, r0
 8006a50:	2a00      	cmp	r2, #0
 8006a52:	d0f9      	beq.n	8006a48 <_strtoul_l.constprop.0+0xb8>
 8006a54:	b107      	cbz	r7, 8006a58 <_strtoul_l.constprop.0+0xc8>
 8006a56:	1e69      	subs	r1, r5, #1
 8006a58:	6011      	str	r1, [r2, #0]
 8006a5a:	e7f5      	b.n	8006a48 <_strtoul_l.constprop.0+0xb8>
 8006a5c:	2430      	movs	r4, #48	; 0x30
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1b5      	bne.n	80069ce <_strtoul_l.constprop.0+0x3e>
 8006a62:	2308      	movs	r3, #8
 8006a64:	e7b3      	b.n	80069ce <_strtoul_l.constprop.0+0x3e>
 8006a66:	2c30      	cmp	r4, #48	; 0x30
 8006a68:	d0a9      	beq.n	80069be <_strtoul_l.constprop.0+0x2e>
 8006a6a:	230a      	movs	r3, #10
 8006a6c:	e7af      	b.n	80069ce <_strtoul_l.constprop.0+0x3e>
 8006a6e:	bf00      	nop
 8006a70:	08006cf4 	.word	0x08006cf4

08006a74 <_strtoul_r>:
 8006a74:	f7ff bf8c 	b.w	8006990 <_strtoul_l.constprop.0>

08006a78 <__submore>:
 8006a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a84:	4299      	cmp	r1, r3
 8006a86:	d11d      	bne.n	8006ac4 <__submore+0x4c>
 8006a88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a8c:	f7ff fb0a 	bl	80060a4 <_malloc_r>
 8006a90:	b918      	cbnz	r0, 8006a9a <__submore+0x22>
 8006a92:	f04f 30ff 	mov.w	r0, #4294967295
 8006a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a9e:	63a3      	str	r3, [r4, #56]	; 0x38
 8006aa0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006aa4:	6360      	str	r0, [r4, #52]	; 0x34
 8006aa6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006aaa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006aae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006ab2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006ab6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006aba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006abe:	6020      	str	r0, [r4, #0]
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	e7e8      	b.n	8006a96 <__submore+0x1e>
 8006ac4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006ac6:	0077      	lsls	r7, r6, #1
 8006ac8:	463a      	mov	r2, r7
 8006aca:	f000 f84b 	bl	8006b64 <_realloc_r>
 8006ace:	4605      	mov	r5, r0
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	d0de      	beq.n	8006a92 <__submore+0x1a>
 8006ad4:	eb00 0806 	add.w	r8, r0, r6
 8006ad8:	4601      	mov	r1, r0
 8006ada:	4632      	mov	r2, r6
 8006adc:	4640      	mov	r0, r8
 8006ade:	f000 f827 	bl	8006b30 <memcpy>
 8006ae2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006ae6:	f8c4 8000 	str.w	r8, [r4]
 8006aea:	e7e9      	b.n	8006ac0 <__submore+0x48>

08006aec <_fstat_r>:
 8006aec:	b538      	push	{r3, r4, r5, lr}
 8006aee:	4d07      	ldr	r5, [pc, #28]	; (8006b0c <_fstat_r+0x20>)
 8006af0:	2300      	movs	r3, #0
 8006af2:	4604      	mov	r4, r0
 8006af4:	4608      	mov	r0, r1
 8006af6:	4611      	mov	r1, r2
 8006af8:	602b      	str	r3, [r5, #0]
 8006afa:	f7fa faa0 	bl	800103e <_fstat>
 8006afe:	1c43      	adds	r3, r0, #1
 8006b00:	d102      	bne.n	8006b08 <_fstat_r+0x1c>
 8006b02:	682b      	ldr	r3, [r5, #0]
 8006b04:	b103      	cbz	r3, 8006b08 <_fstat_r+0x1c>
 8006b06:	6023      	str	r3, [r4, #0]
 8006b08:	bd38      	pop	{r3, r4, r5, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20000260 	.word	0x20000260

08006b10 <_isatty_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	4d06      	ldr	r5, [pc, #24]	; (8006b2c <_isatty_r+0x1c>)
 8006b14:	2300      	movs	r3, #0
 8006b16:	4604      	mov	r4, r0
 8006b18:	4608      	mov	r0, r1
 8006b1a:	602b      	str	r3, [r5, #0]
 8006b1c:	f7fa fa9f 	bl	800105e <_isatty>
 8006b20:	1c43      	adds	r3, r0, #1
 8006b22:	d102      	bne.n	8006b2a <_isatty_r+0x1a>
 8006b24:	682b      	ldr	r3, [r5, #0]
 8006b26:	b103      	cbz	r3, 8006b2a <_isatty_r+0x1a>
 8006b28:	6023      	str	r3, [r4, #0]
 8006b2a:	bd38      	pop	{r3, r4, r5, pc}
 8006b2c:	20000260 	.word	0x20000260

08006b30 <memcpy>:
 8006b30:	440a      	add	r2, r1
 8006b32:	4291      	cmp	r1, r2
 8006b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b38:	d100      	bne.n	8006b3c <memcpy+0xc>
 8006b3a:	4770      	bx	lr
 8006b3c:	b510      	push	{r4, lr}
 8006b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b46:	4291      	cmp	r1, r2
 8006b48:	d1f9      	bne.n	8006b3e <memcpy+0xe>
 8006b4a:	bd10      	pop	{r4, pc}

08006b4c <__malloc_lock>:
 8006b4c:	4801      	ldr	r0, [pc, #4]	; (8006b54 <__malloc_lock+0x8>)
 8006b4e:	f7ff b9c3 	b.w	8005ed8 <__retarget_lock_acquire_recursive>
 8006b52:	bf00      	nop
 8006b54:	20000254 	.word	0x20000254

08006b58 <__malloc_unlock>:
 8006b58:	4801      	ldr	r0, [pc, #4]	; (8006b60 <__malloc_unlock+0x8>)
 8006b5a:	f7ff b9be 	b.w	8005eda <__retarget_lock_release_recursive>
 8006b5e:	bf00      	nop
 8006b60:	20000254 	.word	0x20000254

08006b64 <_realloc_r>:
 8006b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b68:	4680      	mov	r8, r0
 8006b6a:	4614      	mov	r4, r2
 8006b6c:	460e      	mov	r6, r1
 8006b6e:	b921      	cbnz	r1, 8006b7a <_realloc_r+0x16>
 8006b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b74:	4611      	mov	r1, r2
 8006b76:	f7ff ba95 	b.w	80060a4 <_malloc_r>
 8006b7a:	b92a      	cbnz	r2, 8006b88 <_realloc_r+0x24>
 8006b7c:	f7ff fa26 	bl	8005fcc <_free_r>
 8006b80:	4625      	mov	r5, r4
 8006b82:	4628      	mov	r0, r5
 8006b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b88:	f000 f81b 	bl	8006bc2 <_malloc_usable_size_r>
 8006b8c:	4284      	cmp	r4, r0
 8006b8e:	4607      	mov	r7, r0
 8006b90:	d802      	bhi.n	8006b98 <_realloc_r+0x34>
 8006b92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b96:	d812      	bhi.n	8006bbe <_realloc_r+0x5a>
 8006b98:	4621      	mov	r1, r4
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	f7ff fa82 	bl	80060a4 <_malloc_r>
 8006ba0:	4605      	mov	r5, r0
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d0ed      	beq.n	8006b82 <_realloc_r+0x1e>
 8006ba6:	42bc      	cmp	r4, r7
 8006ba8:	4622      	mov	r2, r4
 8006baa:	4631      	mov	r1, r6
 8006bac:	bf28      	it	cs
 8006bae:	463a      	movcs	r2, r7
 8006bb0:	f7ff ffbe 	bl	8006b30 <memcpy>
 8006bb4:	4631      	mov	r1, r6
 8006bb6:	4640      	mov	r0, r8
 8006bb8:	f7ff fa08 	bl	8005fcc <_free_r>
 8006bbc:	e7e1      	b.n	8006b82 <_realloc_r+0x1e>
 8006bbe:	4635      	mov	r5, r6
 8006bc0:	e7df      	b.n	8006b82 <_realloc_r+0x1e>

08006bc2 <_malloc_usable_size_r>:
 8006bc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bc6:	1f18      	subs	r0, r3, #4
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	bfbc      	itt	lt
 8006bcc:	580b      	ldrlt	r3, [r1, r0]
 8006bce:	18c0      	addlt	r0, r0, r3
 8006bd0:	4770      	bx	lr
	...

08006bd4 <_init>:
 8006bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd6:	bf00      	nop
 8006bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bda:	bc08      	pop	{r3}
 8006bdc:	469e      	mov	lr, r3
 8006bde:	4770      	bx	lr

08006be0 <_fini>:
 8006be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be2:	bf00      	nop
 8006be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be6:	bc08      	pop	{r3}
 8006be8:	469e      	mov	lr, r3
 8006bea:	4770      	bx	lr
