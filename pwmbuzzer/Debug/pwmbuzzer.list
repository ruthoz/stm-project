
pwmbuzzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e30  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004fb8  08004fb8  00014fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005000  08005000  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  08005000  08005000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005008  08005008  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005008  08005008  00015008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800500c  0800500c  0001500c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08005010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  200000cc  080050dc  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  080050dc  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cc0  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002247  00000000  00000000  00031dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00034008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00034f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002716b  00000000  00000000  00035df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011aa6  00000000  00000000  0005cf5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f45d8  00000000  00000000  0006ea01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00162fd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040b8  00000000  00000000  0016302c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000cc 	.word	0x200000cc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004fa0 	.word	0x08004fa0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000d0 	.word	0x200000d0
 80001c4:	08004fa0 	.word	0x08004fa0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
	if(stateMusic == MUSIC_OFF)
 80004d6:	4b13      	ldr	r3, [pc, #76]	; (8000524 <HAL_GPIO_EXTI_Callback+0x58>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d110      	bne.n	8000500 <HAL_GPIO_EXTI_Callback+0x34>
		{
		    stateMusic = MUSIC_ON;
 80004de:	4b11      	ldr	r3, [pc, #68]	; (8000524 <HAL_GPIO_EXTI_Callback+0x58>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
		    indexNote=0;
 80004e4:	4b10      	ldr	r3, [pc, #64]	; (8000528 <HAL_GPIO_EXTI_Callback+0x5c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
		    HAL_TIM_Base_Start_IT(&htim6);
 80004ea:	4810      	ldr	r0, [pc, #64]	; (800052c <HAL_GPIO_EXTI_Callback+0x60>)
 80004ec:	f002 fb02 	bl	8002af4 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim3);
 80004f0:	480f      	ldr	r0, [pc, #60]	; (8000530 <HAL_GPIO_EXTI_Callback+0x64>)
 80004f2:	f002 faff 	bl	8002af4 <HAL_TIM_Base_Start_IT>
			HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 80004f6:	2100      	movs	r1, #0
 80004f8:	480d      	ldr	r0, [pc, #52]	; (8000530 <HAL_GPIO_EXTI_Callback+0x64>)
 80004fa:	f002 fbf1 	bl	8002ce0 <HAL_TIM_PWM_Start_IT>
			stateMusic = MUSIC_OFF;
			HAL_TIM_Base_Stop_IT(&htim6);
			HAL_TIM_Base_Stop_IT(&htim3);
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
		}
}
 80004fe:	e00c      	b.n	800051a <HAL_GPIO_EXTI_Callback+0x4e>
			stateMusic = MUSIC_OFF;
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <HAL_GPIO_EXTI_Callback+0x58>)
 8000502:	2201      	movs	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim6);
 8000506:	4809      	ldr	r0, [pc, #36]	; (800052c <HAL_GPIO_EXTI_Callback+0x60>)
 8000508:	f002 fb64 	bl	8002bd4 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim3);
 800050c:	4808      	ldr	r0, [pc, #32]	; (8000530 <HAL_GPIO_EXTI_Callback+0x64>)
 800050e:	f002 fb61 	bl	8002bd4 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000512:	2100      	movs	r1, #0
 8000514:	4806      	ldr	r0, [pc, #24]	; (8000530 <HAL_GPIO_EXTI_Callback+0x64>)
 8000516:	f002 fd37 	bl	8002f88 <HAL_TIM_PWM_Stop_IT>
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000000 	.word	0x20000000
 8000528:	20000204 	.word	0x20000204
 800052c:	20000134 	.word	0x20000134
 8000530:	200000e8 	.word	0x200000e8

08000534 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
		if(indexNote>22)
 800053c:	4b20      	ldr	r3, [pc, #128]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b16      	cmp	r3, #22
 8000542:	dd02      	ble.n	800054a <HAL_TIM_PeriodElapsedCallback+0x16>
		{
			indexNote=0;
 8000544:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
		}
        __HAL_TIM_SET_COUNTER(&htim3,0);
 800054a:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(&htim3, noteJonatan[indexNote]);
 8000552:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a1c      	ldr	r2, [pc, #112]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000558:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800055c:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	62da      	str	r2, [r3, #44]	; 0x2c
 8000562:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a18      	ldr	r2, [pc, #96]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056c:	461a      	mov	r2, r3
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000570:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (noteJonatan[indexNote]/2));
 8000572:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a14      	ldr	r2, [pc, #80]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800057c:	0fda      	lsrs	r2, r3, #31
 800057e:	4413      	add	r3, r2
 8000580:	105b      	asrs	r3, r3, #1
 8000582:	461a      	mov	r2, r3
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_AUTORELOAD(&htim6, periodeJonatan[indexNote]);
 800058a:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a0f      	ldr	r2, [pc, #60]	; (80005cc <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000590:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	62da      	str	r2, [r3, #44]	; 0x2c
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <HAL_TIM_PeriodElapsedCallback+0x98>)
 80005a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80005a8:	60da      	str	r2, [r3, #12]
		indexNote++;
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	3301      	adds	r3, #1
 80005b0:	4a03      	ldr	r2, [pc, #12]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80005b2:	6013      	str	r3, [r2, #0]

}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	20000204 	.word	0x20000204
 80005c4:	200000e8 	.word	0x200000e8
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000064 	.word	0x20000064
 80005d0:	20000134 	.word	0x20000134

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fb2e 	bl	8000c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f809 	bl	80005f2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f91a 	bl	8000818 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e4:	f000 f8e8 	bl	80007b8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005e8:	f000 f854 	bl	8000694 <MX_TIM3_Init>
  MX_TIM6_Init();
 80005ec:	f000 f8ac 	bl	8000748 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0x1c>

080005f2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b096      	sub	sp, #88	; 0x58
 80005f6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	2244      	movs	r2, #68	; 0x44
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f004 fcc5 	bl	8004f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000614:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000618:	f000 ff02 	bl	8001420 <HAL_PWREx_ControlVoltageScaling>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000622:	f000 f977 	bl	8000914 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000626:	2302      	movs	r3, #2
 8000628:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000630:	2310      	movs	r3, #16
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000640:	230a      	movs	r3, #10
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000644:	2307      	movs	r3, #7
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4618      	mov	r0, r3
 8000656:	f000 ff39 	bl	80014cc <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000660:	f000 f958 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2303      	movs	r3, #3
 800066a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	2104      	movs	r1, #4
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fb01 	bl	8001c84 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000688:	f000 f944 	bl	8000914 <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	3758      	adds	r7, #88	; 0x58
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]
 80006b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006b8:	4b21      	ldr	r3, [pc, #132]	; (8000740 <MX_TIM3_Init+0xac>)
 80006ba:	4a22      	ldr	r2, [pc, #136]	; (8000744 <MX_TIM3_Init+0xb0>)
 80006bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <MX_TIM3_Init+0xac>)
 80006c0:	f240 321f 	movw	r2, #799	; 0x31f
 80006c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c6:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <MX_TIM3_Init+0xac>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <MX_TIM3_Init+0xac>)
 80006ce:	2264      	movs	r2, #100	; 0x64
 80006d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d2:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <MX_TIM3_Init+0xac>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d8:	4b19      	ldr	r3, [pc, #100]	; (8000740 <MX_TIM3_Init+0xac>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006de:	4818      	ldr	r0, [pc, #96]	; (8000740 <MX_TIM3_Init+0xac>)
 80006e0:	f002 faa7 	bl	8002c32 <HAL_TIM_PWM_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80006ea:	f000 f913 	bl	8000914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4619      	mov	r1, r3
 80006fc:	4810      	ldr	r0, [pc, #64]	; (8000740 <MX_TIM3_Init+0xac>)
 80006fe:	f003 fb19 	bl	8003d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000708:	f000 f904 	bl	8000914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800070c:	2360      	movs	r3, #96	; 0x60
 800070e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000710:	2332      	movs	r3, #50	; 0x32
 8000712:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	4619      	mov	r1, r3
 8000722:	4807      	ldr	r0, [pc, #28]	; (8000740 <MX_TIM3_Init+0xac>)
 8000724:	f002 fe34 	bl	8003390 <HAL_TIM_PWM_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800072e:	f000 f8f1 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000732:	4803      	ldr	r0, [pc, #12]	; (8000740 <MX_TIM3_Init+0xac>)
 8000734:	f000 f95e 	bl	80009f4 <HAL_TIM_MspPostInit>

}
 8000738:	bf00      	nop
 800073a:	3728      	adds	r7, #40	; 0x28
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200000e8 	.word	0x200000e8
 8000744:	40000400 	.word	0x40000400

08000748 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_TIM6_Init+0x68>)
 800075a:	4a16      	ldr	r2, [pc, #88]	; (80007b4 <MX_TIM6_Init+0x6c>)
 800075c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_TIM6_Init+0x68>)
 8000760:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000764:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_TIM6_Init+0x68>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_TIM6_Init+0x68>)
 800076e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000772:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_TIM6_Init+0x68>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <MX_TIM6_Init+0x68>)
 800077c:	f002 f962 	bl	8002a44 <HAL_TIM_Base_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000786:	f000 f8c5 	bl	8000914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	; (80007b0 <MX_TIM6_Init+0x68>)
 8000798:	f003 facc 	bl	8003d34 <HAL_TIMEx_MasterConfigSynchronization>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80007a2:	f000 f8b7 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000134 	.word	0x20000134
 80007b4:	40001000 	.word	0x40001000

080007b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007be:	4a15      	ldr	r2, [pc, #84]	; (8000814 <MX_USART2_UART_Init+0x5c>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007fc:	f003 fb40 	bl	8003e80 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000806:	f000 f885 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000180 	.word	0x20000180
 8000814:	40004400 	.word	0x40004400

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	4b37      	ldr	r3, [pc, #220]	; (800090c <MX_GPIO_Init+0xf4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4a36      	ldr	r2, [pc, #216]	; (800090c <MX_GPIO_Init+0xf4>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b34      	ldr	r3, [pc, #208]	; (800090c <MX_GPIO_Init+0xf4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	4b31      	ldr	r3, [pc, #196]	; (800090c <MX_GPIO_Init+0xf4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a30      	ldr	r2, [pc, #192]	; (800090c <MX_GPIO_Init+0xf4>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b2e      	ldr	r3, [pc, #184]	; (800090c <MX_GPIO_Init+0xf4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b2b      	ldr	r3, [pc, #172]	; (800090c <MX_GPIO_Init+0xf4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a2a      	ldr	r2, [pc, #168]	; (800090c <MX_GPIO_Init+0xf4>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b28      	ldr	r3, [pc, #160]	; (800090c <MX_GPIO_Init+0xf4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b25      	ldr	r3, [pc, #148]	; (800090c <MX_GPIO_Init+0xf4>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4a24      	ldr	r2, [pc, #144]	; (800090c <MX_GPIO_Init+0xf4>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4b22      	ldr	r3, [pc, #136]	; (800090c <MX_GPIO_Init+0xf4>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2120      	movs	r1, #32
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f000 fd85 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	4817      	ldr	r0, [pc, #92]	; (8000910 <MX_GPIO_Init+0xf8>)
 80008b2:	f000 fbcd 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b6:	2320      	movs	r3, #32
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d0:	f000 fbbe 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 80008d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f000 fbaf 	bl	8001050 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	2028      	movs	r0, #40	; 0x28
 80008f8:	f000 faf5 	bl	8000ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008fc:	2028      	movs	r0, #40	; 0x28
 80008fe:	f000 fb0e 	bl	8000f1e <HAL_NVIC_EnableIRQ>

}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	; 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000
 8000910:	48000800 	.word	0x48000800

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	e7fe      	b.n	800091c <Error_Handler+0x8>
	...

08000920 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <HAL_MspInit+0x44>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092a:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <HAL_MspInit+0x44>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6613      	str	r3, [r2, #96]	; 0x60
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_MspInit+0x44>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_MspInit+0x44>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	4a08      	ldr	r2, [pc, #32]	; (8000964 <HAL_MspInit+0x44>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000948:	6593      	str	r3, [r2, #88]	; 0x58
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_MspInit+0x44>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_TIM_PWM_MspInit+0x38>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d10b      	bne.n	8000992 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <HAL_TIM_PWM_MspInit+0x3c>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6593      	str	r3, [r2, #88]	; 0x58
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000992:	bf00      	nop
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40000400 	.word	0x40000400
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <HAL_TIM_Base_MspInit+0x44>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d113      	bne.n	80009e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <HAL_TIM_Base_MspInit+0x48>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009be:	4a0c      	ldr	r2, [pc, #48]	; (80009f0 <HAL_TIM_Base_MspInit+0x48>)
 80009c0:	f043 0310 	orr.w	r3, r3, #16
 80009c4:	6593      	str	r3, [r2, #88]	; 0x58
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_TIM_Base_MspInit+0x48>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ca:	f003 0310 	and.w	r3, r3, #16
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	2036      	movs	r0, #54	; 0x36
 80009d8:	f000 fa85 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009dc:	2036      	movs	r0, #54	; 0x36
 80009de:	f000 fa9e 	bl	8000f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40001000 	.word	0x40001000
 80009f0:	40021000 	.word	0x40021000

080009f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a11      	ldr	r2, [pc, #68]	; (8000a58 <HAL_TIM_MspPostInit+0x64>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d11b      	bne.n	8000a4e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <HAL_TIM_MspPostInit+0x68>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4a10      	ldr	r2, [pc, #64]	; (8000a5c <HAL_TIM_MspPostInit+0x68>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_TIM_MspPostInit+0x68>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a2e:	2310      	movs	r3, #16
 8000a30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <HAL_TIM_MspPostInit+0x6c>)
 8000a4a:	f000 fb01 	bl	8001050 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a4e:	bf00      	nop
 8000a50:	3720      	adds	r7, #32
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40000400 	.word	0x40000400
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	48000400 	.word	0x48000400

08000a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b0ac      	sub	sp, #176	; 0xb0
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2288      	movs	r2, #136	; 0x88
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f004 fa83 	bl	8004f90 <memset>
  if(huart->Instance==USART2)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a25      	ldr	r2, [pc, #148]	; (8000b24 <HAL_UART_MspInit+0xc0>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d143      	bne.n	8000b1c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 fb13 	bl	80020cc <HAL_RCCEx_PeriphCLKConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aac:	f7ff ff32 	bl	8000914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <HAL_UART_MspInit+0xc4>)
 8000ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab4:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <HAL_UART_MspInit+0xc4>)
 8000ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aba:	6593      	str	r3, [r2, #88]	; 0x58
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <HAL_UART_MspInit+0xc4>)
 8000abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <HAL_UART_MspInit+0xc4>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000acc:	4a16      	ldr	r2, [pc, #88]	; (8000b28 <HAL_UART_MspInit+0xc4>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <HAL_UART_MspInit+0xc4>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af8:	2307      	movs	r3, #7
 8000afa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b02:	4619      	mov	r1, r3
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b08:	f000 faa2 	bl	8001050 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2026      	movs	r0, #38	; 0x26
 8000b12:	f000 f9e8 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b16:	2026      	movs	r0, #38	; 0x26
 8000b18:	f000 fa01 	bl	8000f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b1c:	bf00      	nop
 8000b1e:	37b0      	adds	r7, #176	; 0xb0
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40004400 	.word	0x40004400
 8000b28:	40021000 	.word	0x40021000

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler+0x4>

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b78:	f000 f8ba 	bl	8000cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <USART2_IRQHandler+0x10>)
 8000b86:	f003 f9c9 	bl	8003f1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000180 	.word	0x20000180

08000b94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000b98:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b9c:	f000 fc1a 	bl	80013d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ba0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ba4:	f000 fc16 	bl	80013d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <TIM6_DAC_IRQHandler+0x10>)
 8000bb2:	f002 facd 	bl	8003150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000134 	.word	0x20000134

08000bc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <SystemInit+0x20>)
 8000bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <SystemInit+0x20>)
 8000bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000be8:	f7ff ffea 	bl	8000bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bec:	480c      	ldr	r0, [pc, #48]	; (8000c20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bee:	490d      	ldr	r1, [pc, #52]	; (8000c24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <LoopForever+0xe>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c04:	4c0a      	ldr	r4, [pc, #40]	; (8000c30 <LoopForever+0x16>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c12:	f004 f999 	bl	8004f48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c16:	f7ff fcdd 	bl	80005d4 <main>

08000c1a <LoopForever>:

LoopForever:
    b LoopForever
 8000c1a:	e7fe      	b.n	8000c1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c24:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8000c28:	08005010 	.word	0x08005010
  ldr r2, =_sbss
 8000c2c:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8000c30:	2000020c 	.word	0x2000020c

08000c34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC1_2_IRQHandler>
	...

08000c38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_Init+0x3c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <HAL_Init+0x3c>)
 8000c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4e:	2003      	movs	r0, #3
 8000c50:	f000 f93e 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c54:	2000      	movs	r0, #0
 8000c56:	f000 f80f 	bl	8000c78 <HAL_InitTick>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d002      	beq.n	8000c66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	71fb      	strb	r3, [r7, #7]
 8000c64:	e001      	b.n	8000c6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c66:	f7ff fe5b 	bl	8000920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40022000 	.word	0x40022000

08000c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <HAL_InitTick+0x6c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d023      	beq.n	8000cd4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_InitTick+0x70>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_InitTick+0x6c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f949 	bl	8000f3a <HAL_SYSTICK_Config>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10f      	bne.n	8000cce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d809      	bhi.n	8000cc8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f000 f913 	bl	8000ee6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <HAL_InitTick+0x74>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	e007      	b.n	8000cd8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	73fb      	strb	r3, [r7, #15]
 8000ccc:	e004      	b.n	8000cd8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	e001      	b.n	8000cd8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200000c8 	.word	0x200000c8
 8000ce8:	200000c0 	.word	0x200000c0
 8000cec:	200000c4 	.word	0x200000c4

08000cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	200000c8 	.word	0x200000c8
 8000d14:	20000208 	.word	0x20000208

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000208 	.word	0x20000208

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0b      	blt.n	8000dbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	4907      	ldr	r1, [pc, #28]	; (8000dcc <__NVIC_EnableIRQ+0x38>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	; 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f7ff ff8e 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff29 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff3e 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff8e 	bl	8000e24 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5d 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff31 	bl	8000d94 <__NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffa2 	bl	8000e8c <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b085      	sub	sp, #20
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d008      	beq.n	8000f7c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2204      	movs	r2, #4
 8000f6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e022      	b.n	8000fc2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 020e 	bic.w	r2, r2, #14
 8000f8a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 0201 	bic.w	r2, r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa0:	f003 021c 	and.w	r2, r3, #28
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	2101      	movs	r1, #1
 8000faa:	fa01 f202 	lsl.w	r2, r1, r2
 8000fae:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d005      	beq.n	8000ff2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2204      	movs	r2, #4
 8000fea:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	e029      	b.n	8001046 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 020e 	bic.w	r2, r2, #14
 8001000:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f022 0201 	bic.w	r2, r2, #1
 8001010:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f003 021c 	and.w	r2, r3, #28
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	2101      	movs	r1, #1
 8001020:	fa01 f202 	lsl.w	r2, r1, r2
 8001024:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	4798      	blx	r3
    }
  }
  return status;
 8001046:	7bfb      	ldrb	r3, [r7, #15]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001050:	b480      	push	{r7}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105e:	e17f      	b.n	8001360 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	2101      	movs	r1, #1
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	fa01 f303 	lsl.w	r3, r1, r3
 800106c:	4013      	ands	r3, r2
 800106e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 8171 	beq.w	800135a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b01      	cmp	r3, #1
 8001082:	d005      	beq.n	8001090 <HAL_GPIO_Init+0x40>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d130      	bne.n	80010f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	68da      	ldr	r2, [r3, #12]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010c6:	2201      	movs	r2, #1
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	091b      	lsrs	r3, r3, #4
 80010dc:	f003 0201 	and.w	r2, r3, #1
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d118      	bne.n	8001130 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001104:	2201      	movs	r2, #1
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	08db      	lsrs	r3, r3, #3
 800111a:	f003 0201 	and.w	r2, r3, #1
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b03      	cmp	r3, #3
 800113a:	d017      	beq.n	800116c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2203      	movs	r2, #3
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d123      	bne.n	80011c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	08da      	lsrs	r2, r3, #3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3208      	adds	r2, #8
 8001180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	220f      	movs	r2, #15
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	08da      	lsrs	r2, r3, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3208      	adds	r2, #8
 80011ba:	6939      	ldr	r1, [r7, #16]
 80011bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0203 	and.w	r2, r3, #3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 80ac 	beq.w	800135a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	4b5f      	ldr	r3, [pc, #380]	; (8001380 <HAL_GPIO_Init+0x330>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001206:	4a5e      	ldr	r2, [pc, #376]	; (8001380 <HAL_GPIO_Init+0x330>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6613      	str	r3, [r2, #96]	; 0x60
 800120e:	4b5c      	ldr	r3, [pc, #368]	; (8001380 <HAL_GPIO_Init+0x330>)
 8001210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800121a:	4a5a      	ldr	r2, [pc, #360]	; (8001384 <HAL_GPIO_Init+0x334>)
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	3302      	adds	r3, #2
 8001222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001244:	d025      	beq.n	8001292 <HAL_GPIO_Init+0x242>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4f      	ldr	r2, [pc, #316]	; (8001388 <HAL_GPIO_Init+0x338>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d01f      	beq.n	800128e <HAL_GPIO_Init+0x23e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4e      	ldr	r2, [pc, #312]	; (800138c <HAL_GPIO_Init+0x33c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d019      	beq.n	800128a <HAL_GPIO_Init+0x23a>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4d      	ldr	r2, [pc, #308]	; (8001390 <HAL_GPIO_Init+0x340>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d013      	beq.n	8001286 <HAL_GPIO_Init+0x236>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4c      	ldr	r2, [pc, #304]	; (8001394 <HAL_GPIO_Init+0x344>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d00d      	beq.n	8001282 <HAL_GPIO_Init+0x232>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4b      	ldr	r2, [pc, #300]	; (8001398 <HAL_GPIO_Init+0x348>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d007      	beq.n	800127e <HAL_GPIO_Init+0x22e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4a      	ldr	r2, [pc, #296]	; (800139c <HAL_GPIO_Init+0x34c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <HAL_GPIO_Init+0x22a>
 8001276:	2306      	movs	r3, #6
 8001278:	e00c      	b.n	8001294 <HAL_GPIO_Init+0x244>
 800127a:	2307      	movs	r3, #7
 800127c:	e00a      	b.n	8001294 <HAL_GPIO_Init+0x244>
 800127e:	2305      	movs	r3, #5
 8001280:	e008      	b.n	8001294 <HAL_GPIO_Init+0x244>
 8001282:	2304      	movs	r3, #4
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x244>
 8001286:	2303      	movs	r3, #3
 8001288:	e004      	b.n	8001294 <HAL_GPIO_Init+0x244>
 800128a:	2302      	movs	r3, #2
 800128c:	e002      	b.n	8001294 <HAL_GPIO_Init+0x244>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_GPIO_Init+0x244>
 8001292:	2300      	movs	r3, #0
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	f002 0203 	and.w	r2, r2, #3
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	4093      	lsls	r3, r2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012a4:	4937      	ldr	r1, [pc, #220]	; (8001384 <HAL_GPIO_Init+0x334>)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012b2:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <HAL_GPIO_Init+0x350>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012d6:	4a32      	ldr	r2, [pc, #200]	; (80013a0 <HAL_GPIO_Init+0x350>)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012dc:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <HAL_GPIO_Init+0x350>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001300:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <HAL_GPIO_Init+0x350>)
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001306:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <HAL_GPIO_Init+0x350>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800132a:	4a1d      	ldr	r2, [pc, #116]	; (80013a0 <HAL_GPIO_Init+0x350>)
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <HAL_GPIO_Init+0x350>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001354:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <HAL_GPIO_Init+0x350>)
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	3301      	adds	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa22 f303 	lsr.w	r3, r2, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	f47f ae78 	bne.w	8001060 <HAL_GPIO_Init+0x10>
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	371c      	adds	r7, #28
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000
 8001384:	40010000 	.word	0x40010000
 8001388:	48000400 	.word	0x48000400
 800138c:	48000800 	.word	0x48000800
 8001390:	48000c00 	.word	0x48000c00
 8001394:	48001000 	.word	0x48001000
 8001398:	48001400 	.word	0x48001400
 800139c:	48001800 	.word	0x48001800
 80013a0:	40010400 	.word	0x40010400

080013a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
 80013b0:	4613      	mov	r3, r2
 80013b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b4:	787b      	ldrb	r3, [r7, #1]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ba:	887a      	ldrh	r2, [r7, #2]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013c0:	e002      	b.n	80013c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e0:	695a      	ldr	r2, [r3, #20]
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f86a 	bl	80004cc <HAL_GPIO_EXTI_Callback>
  }
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40010400 	.word	0x40010400

08001404 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <HAL_PWREx_GetVoltageRange+0x18>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40007000 	.word	0x40007000

08001420 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800142e:	d130      	bne.n	8001492 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800143c:	d038      	beq.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800143e:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001446:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800144c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2232      	movs	r2, #50	; 0x32
 8001454:	fb02 f303 	mul.w	r3, r2, r3
 8001458:	4a1b      	ldr	r2, [pc, #108]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800145a:	fba2 2303 	umull	r2, r3, r2, r3
 800145e:	0c9b      	lsrs	r3, r3, #18
 8001460:	3301      	adds	r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001464:	e002      	b.n	800146c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3b01      	subs	r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001478:	d102      	bne.n	8001480 <HAL_PWREx_ControlVoltageScaling+0x60>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f2      	bne.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800148c:	d110      	bne.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e00f      	b.n	80014b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800149a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800149e:	d007      	beq.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014a8:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40007000 	.word	0x40007000
 80014c4:	200000c0 	.word	0x200000c0
 80014c8:	431bde83 	.word	0x431bde83

080014cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e3ca      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014de:	4b97      	ldr	r3, [pc, #604]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014e8:	4b94      	ldr	r3, [pc, #592]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0310 	and.w	r3, r3, #16
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 80e4 	beq.w	80016c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <HAL_RCC_OscConfig+0x4a>
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2b0c      	cmp	r3, #12
 800150a:	f040 808b 	bne.w	8001624 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	2b01      	cmp	r3, #1
 8001512:	f040 8087 	bne.w	8001624 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001516:	4b89      	ldr	r3, [pc, #548]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d005      	beq.n	800152e <HAL_RCC_OscConfig+0x62>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e3a2      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a1a      	ldr	r2, [r3, #32]
 8001532:	4b82      	ldr	r3, [pc, #520]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	2b00      	cmp	r3, #0
 800153c:	d004      	beq.n	8001548 <HAL_RCC_OscConfig+0x7c>
 800153e:	4b7f      	ldr	r3, [pc, #508]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001546:	e005      	b.n	8001554 <HAL_RCC_OscConfig+0x88>
 8001548:	4b7c      	ldr	r3, [pc, #496]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800154a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154e:	091b      	lsrs	r3, r3, #4
 8001550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001554:	4293      	cmp	r3, r2
 8001556:	d223      	bcs.n	80015a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	4618      	mov	r0, r3
 800155e:	f000 fd55 	bl	800200c <RCC_SetFlashLatencyFromMSIRange>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e383      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800156c:	4b73      	ldr	r3, [pc, #460]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a72      	ldr	r2, [pc, #456]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001572:	f043 0308 	orr.w	r3, r3, #8
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b70      	ldr	r3, [pc, #448]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	496d      	ldr	r1, [pc, #436]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001586:	4313      	orrs	r3, r2
 8001588:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800158a:	4b6c      	ldr	r3, [pc, #432]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	4968      	ldr	r1, [pc, #416]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800159a:	4313      	orrs	r3, r2
 800159c:	604b      	str	r3, [r1, #4]
 800159e:	e025      	b.n	80015ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015a0:	4b66      	ldr	r3, [pc, #408]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a65      	ldr	r2, [pc, #404]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80015a6:	f043 0308 	orr.w	r3, r3, #8
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b63      	ldr	r3, [pc, #396]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4960      	ldr	r1, [pc, #384]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015be:	4b5f      	ldr	r3, [pc, #380]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	495b      	ldr	r1, [pc, #364]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d109      	bne.n	80015ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 fd15 	bl	800200c <RCC_SetFlashLatencyFromMSIRange>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e343      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015ec:	f000 fc4a 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 80015f0:	4602      	mov	r2, r0
 80015f2:	4b52      	ldr	r3, [pc, #328]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	f003 030f 	and.w	r3, r3, #15
 80015fc:	4950      	ldr	r1, [pc, #320]	; (8001740 <HAL_RCC_OscConfig+0x274>)
 80015fe:	5ccb      	ldrb	r3, [r1, r3]
 8001600:	f003 031f 	and.w	r3, r3, #31
 8001604:	fa22 f303 	lsr.w	r3, r2, r3
 8001608:	4a4e      	ldr	r2, [pc, #312]	; (8001744 <HAL_RCC_OscConfig+0x278>)
 800160a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800160c:	4b4e      	ldr	r3, [pc, #312]	; (8001748 <HAL_RCC_OscConfig+0x27c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fb31 	bl	8000c78 <HAL_InitTick>
 8001616:	4603      	mov	r3, r0
 8001618:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d052      	beq.n	80016c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	e327      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d032      	beq.n	8001692 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800162c:	4b43      	ldr	r3, [pc, #268]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a42      	ldr	r2, [pc, #264]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001638:	f7ff fb6e 	bl	8000d18 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001640:	f7ff fb6a 	bl	8000d18 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e310      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001652:	4b3a      	ldr	r3, [pc, #232]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800165e:	4b37      	ldr	r3, [pc, #220]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a36      	ldr	r2, [pc, #216]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001664:	f043 0308 	orr.w	r3, r3, #8
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b34      	ldr	r3, [pc, #208]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	4931      	ldr	r1, [pc, #196]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800167c:	4b2f      	ldr	r3, [pc, #188]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	492c      	ldr	r1, [pc, #176]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
 8001690:	e01a      	b.n	80016c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001692:	4b2a      	ldr	r3, [pc, #168]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a29      	ldr	r2, [pc, #164]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001698:	f023 0301 	bic.w	r3, r3, #1
 800169c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800169e:	f7ff fb3b 	bl	8000d18 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016a6:	f7ff fb37 	bl	8000d18 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e2dd      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016b8:	4b20      	ldr	r3, [pc, #128]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f0      	bne.n	80016a6 <HAL_RCC_OscConfig+0x1da>
 80016c4:	e000      	b.n	80016c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d074      	beq.n	80017be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d005      	beq.n	80016e6 <HAL_RCC_OscConfig+0x21a>
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2b0c      	cmp	r3, #12
 80016de:	d10e      	bne.n	80016fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d10b      	bne.n	80016fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d064      	beq.n	80017bc <HAL_RCC_OscConfig+0x2f0>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d160      	bne.n	80017bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e2ba      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x24a>
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0b      	ldr	r2, [pc, #44]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800170e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	e026      	b.n	8001764 <HAL_RCC_OscConfig+0x298>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800171e:	d115      	bne.n	800174c <HAL_RCC_OscConfig+0x280>
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a05      	ldr	r2, [pc, #20]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001726:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a02      	ldr	r2, [pc, #8]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	e014      	b.n	8001764 <HAL_RCC_OscConfig+0x298>
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	08004fb8 	.word	0x08004fb8
 8001744:	200000c0 	.word	0x200000c0
 8001748:	200000c4 	.word	0x200000c4
 800174c:	4ba0      	ldr	r3, [pc, #640]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a9f      	ldr	r2, [pc, #636]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b9d      	ldr	r3, [pc, #628]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a9c      	ldr	r2, [pc, #624]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 800175e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d013      	beq.n	8001794 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176c:	f7ff fad4 	bl	8000d18 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fad0 	bl	8000d18 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e276      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001786:	4b92      	ldr	r3, [pc, #584]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x2a8>
 8001792:	e014      	b.n	80017be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fac0 	bl	8000d18 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff fabc 	bl	8000d18 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e262      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ae:	4b88      	ldr	r3, [pc, #544]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x2d0>
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d060      	beq.n	800188c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_OscConfig+0x310>
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2b0c      	cmp	r3, #12
 80017d4:	d119      	bne.n	800180a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d116      	bne.n	800180a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017dc:	4b7c      	ldr	r3, [pc, #496]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_OscConfig+0x328>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e23f      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f4:	4b76      	ldr	r3, [pc, #472]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	061b      	lsls	r3, r3, #24
 8001802:	4973      	ldr	r1, [pc, #460]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001808:	e040      	b.n	800188c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d023      	beq.n	800185a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001812:	4b6f      	ldr	r3, [pc, #444]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6e      	ldr	r2, [pc, #440]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181e:	f7ff fa7b 	bl	8000d18 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff fa77 	bl	8000d18 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e21d      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001838:	4b65      	ldr	r3, [pc, #404]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b62      	ldr	r3, [pc, #392]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	061b      	lsls	r3, r3, #24
 8001852:	495f      	ldr	r1, [pc, #380]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
 8001858:	e018      	b.n	800188c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185a:	4b5d      	ldr	r3, [pc, #372]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a5c      	ldr	r2, [pc, #368]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001866:	f7ff fa57 	bl	8000d18 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800186e:	f7ff fa53 	bl	8000d18 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e1f9      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001880:	4b53      	ldr	r3, [pc, #332]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f0      	bne.n	800186e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d03c      	beq.n	8001912 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d01c      	beq.n	80018da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a0:	4b4b      	ldr	r3, [pc, #300]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80018a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a6:	4a4a      	ldr	r2, [pc, #296]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b0:	f7ff fa32 	bl	8000d18 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b8:	f7ff fa2e 	bl	8000d18 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e1d4      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ca:	4b41      	ldr	r3, [pc, #260]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80018cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0ef      	beq.n	80018b8 <HAL_RCC_OscConfig+0x3ec>
 80018d8:	e01b      	b.n	8001912 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018da:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80018dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e0:	4a3b      	ldr	r2, [pc, #236]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ea:	f7ff fa15 	bl	8000d18 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f2:	f7ff fa11 	bl	8000d18 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e1b7      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001904:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1ef      	bne.n	80018f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80a6 	beq.w	8001a6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001920:	2300      	movs	r3, #0
 8001922:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001924:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10d      	bne.n	800194c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001930:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001934:	4a26      	ldr	r2, [pc, #152]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193a:	6593      	str	r3, [r2, #88]	; 0x58
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001948:	2301      	movs	r3, #1
 800194a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800194c:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <HAL_RCC_OscConfig+0x508>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	d118      	bne.n	800198a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001958:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <HAL_RCC_OscConfig+0x508>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <HAL_RCC_OscConfig+0x508>)
 800195e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001962:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001964:	f7ff f9d8 	bl	8000d18 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196c:	f7ff f9d4 	bl	8000d18 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e17a      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_RCC_OscConfig+0x508>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d108      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4d8>
 8001992:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001998:	4a0d      	ldr	r2, [pc, #52]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019a2:	e029      	b.n	80019f8 <HAL_RCC_OscConfig+0x52c>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d115      	bne.n	80019d8 <HAL_RCC_OscConfig+0x50c>
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80019ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b2:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80019be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c2:	4a03      	ldr	r2, [pc, #12]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019cc:	e014      	b.n	80019f8 <HAL_RCC_OscConfig+0x52c>
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40007000 	.word	0x40007000
 80019d8:	4b9c      	ldr	r3, [pc, #624]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 80019da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019de:	4a9b      	ldr	r2, [pc, #620]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019e8:	4b98      	ldr	r3, [pc, #608]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 80019ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ee:	4a97      	ldr	r2, [pc, #604]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 80019f0:	f023 0304 	bic.w	r3, r3, #4
 80019f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d016      	beq.n	8001a2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a00:	f7ff f98a 	bl	8000d18 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a08:	f7ff f986 	bl	8000d18 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e12a      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a1e:	4b8b      	ldr	r3, [pc, #556]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0ed      	beq.n	8001a08 <HAL_RCC_OscConfig+0x53c>
 8001a2c:	e015      	b.n	8001a5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2e:	f7ff f973 	bl	8000d18 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7ff f96f 	bl	8000d18 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e113      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a4c:	4b7f      	ldr	r3, [pc, #508]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1ed      	bne.n	8001a36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a5a:	7ffb      	ldrb	r3, [r7, #31]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d105      	bne.n	8001a6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a60:	4b7a      	ldr	r3, [pc, #488]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	4a79      	ldr	r2, [pc, #484]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80fe 	beq.w	8001c72 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	f040 80d0 	bne.w	8001c20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a80:	4b72      	ldr	r3, [pc, #456]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f003 0203 	and.w	r2, r3, #3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d130      	bne.n	8001af6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d127      	bne.n	8001af6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d11f      	bne.n	8001af6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ac0:	2a07      	cmp	r2, #7
 8001ac2:	bf14      	ite	ne
 8001ac4:	2201      	movne	r2, #1
 8001ac6:	2200      	moveq	r2, #0
 8001ac8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d113      	bne.n	8001af6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad8:	085b      	lsrs	r3, r3, #1
 8001ada:	3b01      	subs	r3, #1
 8001adc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d109      	bne.n	8001af6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	085b      	lsrs	r3, r3, #1
 8001aee:	3b01      	subs	r3, #1
 8001af0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d06e      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	2b0c      	cmp	r3, #12
 8001afa:	d069      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001afc:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d105      	bne.n	8001b14 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b08:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0ad      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b18:	4b4c      	ldr	r3, [pc, #304]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a4b      	ldr	r2, [pc, #300]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b22:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b24:	f7ff f8f8 	bl	8000d18 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff f8f4 	bl	8000d18 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e09a      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b3e:	4b43      	ldr	r3, [pc, #268]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b4a:	4b40      	ldr	r3, [pc, #256]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	4b40      	ldr	r3, [pc, #256]	; (8001c50 <HAL_RCC_OscConfig+0x784>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b5a:	3a01      	subs	r2, #1
 8001b5c:	0112      	lsls	r2, r2, #4
 8001b5e:	4311      	orrs	r1, r2
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b64:	0212      	lsls	r2, r2, #8
 8001b66:	4311      	orrs	r1, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b6c:	0852      	lsrs	r2, r2, #1
 8001b6e:	3a01      	subs	r2, #1
 8001b70:	0552      	lsls	r2, r2, #21
 8001b72:	4311      	orrs	r1, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b78:	0852      	lsrs	r2, r2, #1
 8001b7a:	3a01      	subs	r2, #1
 8001b7c:	0652      	lsls	r2, r2, #25
 8001b7e:	4311      	orrs	r1, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b84:	0912      	lsrs	r2, r2, #4
 8001b86:	0452      	lsls	r2, r2, #17
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	4930      	ldr	r1, [pc, #192]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b90:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a2d      	ldr	r2, [pc, #180]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	4a2a      	ldr	r2, [pc, #168]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ba8:	f7ff f8b6 	bl	8000d18 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7ff f8b2 	bl	8000d18 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e058      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc2:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bce:	e050      	b.n	8001c72 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e04f      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d148      	bne.n	8001c72 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001be0:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a19      	ldr	r2, [pc, #100]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bec:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	4a16      	ldr	r2, [pc, #88]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bf8:	f7ff f88e 	bl	8000d18 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c00:	f7ff f88a 	bl	8000d18 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e030      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x734>
 8001c1e:	e028      	b.n	8001c72 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	2b0c      	cmp	r3, #12
 8001c24:	d023      	beq.n	8001c6e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a08      	ldr	r2, [pc, #32]	; (8001c4c <HAL_RCC_OscConfig+0x780>)
 8001c2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c32:	f7ff f871 	bl	8000d18 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c38:	e00c      	b.n	8001c54 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3a:	f7ff f86d 	bl	8000d18 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d905      	bls.n	8001c54 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e013      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_RCC_OscConfig+0x7b0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ec      	bne.n	8001c3a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_RCC_OscConfig+0x7b0>)
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	4905      	ldr	r1, [pc, #20]	; (8001c7c <HAL_RCC_OscConfig+0x7b0>)
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_RCC_OscConfig+0x7b4>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60cb      	str	r3, [r1, #12]
 8001c6c:	e001      	b.n	8001c72 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3720      	adds	r7, #32
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	feeefffc 	.word	0xfeeefffc

08001c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0e7      	b.n	8001e68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c98:	4b75      	ldr	r3, [pc, #468]	; (8001e70 <HAL_RCC_ClockConfig+0x1ec>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d910      	bls.n	8001cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	4b72      	ldr	r3, [pc, #456]	; (8001e70 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 0207 	bic.w	r2, r3, #7
 8001cae:	4970      	ldr	r1, [pc, #448]	; (8001e70 <HAL_RCC_ClockConfig+0x1ec>)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb6:	4b6e      	ldr	r3, [pc, #440]	; (8001e70 <HAL_RCC_ClockConfig+0x1ec>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0cf      	b.n	8001e68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d010      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	4b66      	ldr	r3, [pc, #408]	; (8001e74 <HAL_RCC_ClockConfig+0x1f0>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d908      	bls.n	8001cf6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce4:	4b63      	ldr	r3, [pc, #396]	; (8001e74 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	4960      	ldr	r1, [pc, #384]	; (8001e74 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d04c      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d107      	bne.n	8001d1a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0a:	4b5a      	ldr	r3, [pc, #360]	; (8001e74 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d121      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e0a6      	b.n	8001e68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d107      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d22:	4b54      	ldr	r3, [pc, #336]	; (8001e74 <HAL_RCC_ClockConfig+0x1f0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d115      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e09a      	b.n	8001e68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d107      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d3a:	4b4e      	ldr	r3, [pc, #312]	; (8001e74 <HAL_RCC_ClockConfig+0x1f0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d109      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e08e      	b.n	8001e68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d4a:	4b4a      	ldr	r3, [pc, #296]	; (8001e74 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e086      	b.n	8001e68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d5a:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f023 0203 	bic.w	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4943      	ldr	r1, [pc, #268]	; (8001e74 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d6c:	f7fe ffd4 	bl	8000d18 <HAL_GetTick>
 8001d70:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d72:	e00a      	b.n	8001d8a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d74:	f7fe ffd0 	bl	8000d18 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e06e      	b.n	8001e68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8a:	4b3a      	ldr	r3, [pc, #232]	; (8001e74 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 020c 	and.w	r2, r3, #12
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d1eb      	bne.n	8001d74 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d010      	beq.n	8001dca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	4b31      	ldr	r3, [pc, #196]	; (8001e74 <HAL_RCC_ClockConfig+0x1f0>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d208      	bcs.n	8001dca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db8:	4b2e      	ldr	r3, [pc, #184]	; (8001e74 <HAL_RCC_ClockConfig+0x1f0>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	492b      	ldr	r1, [pc, #172]	; (8001e74 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dca:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <HAL_RCC_ClockConfig+0x1ec>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d210      	bcs.n	8001dfa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd8:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <HAL_RCC_ClockConfig+0x1ec>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f023 0207 	bic.w	r2, r3, #7
 8001de0:	4923      	ldr	r1, [pc, #140]	; (8001e70 <HAL_RCC_ClockConfig+0x1ec>)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de8:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <HAL_RCC_ClockConfig+0x1ec>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d001      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e036      	b.n	8001e68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d008      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e06:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_RCC_ClockConfig+0x1f0>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	4918      	ldr	r1, [pc, #96]	; (8001e74 <HAL_RCC_ClockConfig+0x1f0>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d009      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <HAL_RCC_ClockConfig+0x1f0>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4910      	ldr	r1, [pc, #64]	; (8001e74 <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e38:	f000 f824 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <HAL_RCC_ClockConfig+0x1f0>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	091b      	lsrs	r3, r3, #4
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	490b      	ldr	r1, [pc, #44]	; (8001e78 <HAL_RCC_ClockConfig+0x1f4>)
 8001e4a:	5ccb      	ldrb	r3, [r1, r3]
 8001e4c:	f003 031f 	and.w	r3, r3, #31
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
 8001e54:	4a09      	ldr	r2, [pc, #36]	; (8001e7c <HAL_RCC_ClockConfig+0x1f8>)
 8001e56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_RCC_ClockConfig+0x1fc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe ff0b 	bl	8000c78 <HAL_InitTick>
 8001e62:	4603      	mov	r3, r0
 8001e64:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e66:	7afb      	ldrb	r3, [r7, #11]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40022000 	.word	0x40022000
 8001e74:	40021000 	.word	0x40021000
 8001e78:	08004fb8 	.word	0x08004fb8
 8001e7c:	200000c0 	.word	0x200000c0
 8001e80:	200000c4 	.word	0x200000c4

08001e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e92:	4b3e      	ldr	r3, [pc, #248]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e9c:	4b3b      	ldr	r3, [pc, #236]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	2b0c      	cmp	r3, #12
 8001eb0:	d121      	bne.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d11e      	bne.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001eb8:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d107      	bne.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ec4:	4b31      	ldr	r3, [pc, #196]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eca:	0a1b      	lsrs	r3, r3, #8
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	e005      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ee0:	4a2b      	ldr	r2, [pc, #172]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10d      	bne.n	8001f0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d102      	bne.n	8001f02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001efc:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001efe:	61bb      	str	r3, [r7, #24]
 8001f00:	e004      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f08:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	2b0c      	cmp	r3, #12
 8001f10:	d134      	bne.n	8001f7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d003      	beq.n	8001f2a <HAL_RCC_GetSysClockFreq+0xa6>
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d003      	beq.n	8001f30 <HAL_RCC_GetSysClockFreq+0xac>
 8001f28:	e005      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f2c:	617b      	str	r3, [r7, #20]
      break;
 8001f2e:	e005      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f32:	617b      	str	r3, [r7, #20]
      break;
 8001f34:	e002      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	617b      	str	r3, [r7, #20]
      break;
 8001f3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	3301      	adds	r3, #1
 8001f48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	0a1b      	lsrs	r3, r3, #8
 8001f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	fb03 f202 	mul.w	r2, r3, r2
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	0e5b      	lsrs	r3, r3, #25
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f7c:	69bb      	ldr	r3, [r7, #24]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	; 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	08004fd0 	.word	0x08004fd0
 8001f94:	00f42400 	.word	0x00f42400
 8001f98:	007a1200 	.word	0x007a1200

08001f9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	200000c0 	.word	0x200000c0

08001fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fb8:	f7ff fff0 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	4904      	ldr	r1, [pc, #16]	; (8001fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	08004fc8 	.word	0x08004fc8

08001fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fe4:	f7ff ffda 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	0adb      	lsrs	r3, r3, #11
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	4904      	ldr	r1, [pc, #16]	; (8002008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ff6:	5ccb      	ldrb	r3, [r1, r3]
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002000:	4618      	mov	r0, r3
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000
 8002008:	08004fc8 	.word	0x08004fc8

0800200c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002014:	2300      	movs	r3, #0
 8002016:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002024:	f7ff f9ee 	bl	8001404 <HAL_PWREx_GetVoltageRange>
 8002028:	6178      	str	r0, [r7, #20]
 800202a:	e014      	b.n	8002056 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800202c:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	4a24      	ldr	r2, [pc, #144]	; (80020c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002036:	6593      	str	r3, [r2, #88]	; 0x58
 8002038:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002044:	f7ff f9de 	bl	8001404 <HAL_PWREx_GetVoltageRange>
 8002048:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800204a:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204e:	4a1d      	ldr	r2, [pc, #116]	; (80020c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002054:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800205c:	d10b      	bne.n	8002076 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b80      	cmp	r3, #128	; 0x80
 8002062:	d919      	bls.n	8002098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2ba0      	cmp	r3, #160	; 0xa0
 8002068:	d902      	bls.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800206a:	2302      	movs	r3, #2
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	e013      	b.n	8002098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002070:	2301      	movs	r3, #1
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	e010      	b.n	8002098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b80      	cmp	r3, #128	; 0x80
 800207a:	d902      	bls.n	8002082 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800207c:	2303      	movs	r3, #3
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	e00a      	b.n	8002098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b80      	cmp	r3, #128	; 0x80
 8002086:	d102      	bne.n	800208e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002088:	2302      	movs	r3, #2
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	e004      	b.n	8002098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b70      	cmp	r3, #112	; 0x70
 8002092:	d101      	bne.n	8002098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002094:	2301      	movs	r3, #1
 8002096:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f023 0207 	bic.w	r2, r3, #7
 80020a0:	4909      	ldr	r1, [pc, #36]	; (80020c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d001      	beq.n	80020ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40022000 	.word	0x40022000

080020cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020d4:	2300      	movs	r3, #0
 80020d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020d8:	2300      	movs	r3, #0
 80020da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d041      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020f0:	d02a      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80020f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020f6:	d824      	bhi.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020fc:	d008      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002102:	d81e      	bhi.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00a      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800210c:	d010      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800210e:	e018      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002110:	4b86      	ldr	r3, [pc, #536]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4a85      	ldr	r2, [pc, #532]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800211c:	e015      	b.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3304      	adds	r3, #4
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f000 fabb 	bl	80026a0 <RCCEx_PLLSAI1_Config>
 800212a:	4603      	mov	r3, r0
 800212c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800212e:	e00c      	b.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3320      	adds	r3, #32
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fba6 	bl	8002888 <RCCEx_PLLSAI2_Config>
 800213c:	4603      	mov	r3, r0
 800213e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002140:	e003      	b.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	74fb      	strb	r3, [r7, #19]
      break;
 8002146:	e000      	b.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800214a:	7cfb      	ldrb	r3, [r7, #19]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10b      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002150:	4b76      	ldr	r3, [pc, #472]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002156:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800215e:	4973      	ldr	r1, [pc, #460]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002166:	e001      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002168:	7cfb      	ldrb	r3, [r7, #19]
 800216a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d041      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800217c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002180:	d02a      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002182:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002186:	d824      	bhi.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002188:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800218c:	d008      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800218e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002192:	d81e      	bhi.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800219c:	d010      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800219e:	e018      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021a0:	4b62      	ldr	r3, [pc, #392]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4a61      	ldr	r2, [pc, #388]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021ac:	e015      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3304      	adds	r3, #4
 80021b2:	2100      	movs	r1, #0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 fa73 	bl	80026a0 <RCCEx_PLLSAI1_Config>
 80021ba:	4603      	mov	r3, r0
 80021bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021be:	e00c      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3320      	adds	r3, #32
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 fb5e 	bl	8002888 <RCCEx_PLLSAI2_Config>
 80021cc:	4603      	mov	r3, r0
 80021ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021d0:	e003      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	74fb      	strb	r3, [r7, #19]
      break;
 80021d6:	e000      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80021d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021da:	7cfb      	ldrb	r3, [r7, #19]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10b      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021e0:	4b52      	ldr	r3, [pc, #328]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021ee:	494f      	ldr	r1, [pc, #316]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021f6:	e001      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021f8:	7cfb      	ldrb	r3, [r7, #19]
 80021fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80a0 	beq.w	800234a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800220e:	4b47      	ldr	r3, [pc, #284]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800221e:	2300      	movs	r3, #0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00d      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002224:	4b41      	ldr	r3, [pc, #260]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002228:	4a40      	ldr	r2, [pc, #256]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222e:	6593      	str	r3, [r2, #88]	; 0x58
 8002230:	4b3e      	ldr	r3, [pc, #248]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800223c:	2301      	movs	r3, #1
 800223e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002240:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a3a      	ldr	r2, [pc, #232]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800224c:	f7fe fd64 	bl	8000d18 <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002252:	e009      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002254:	f7fe fd60 	bl	8000d18 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d902      	bls.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	74fb      	strb	r3, [r7, #19]
        break;
 8002266:	e005      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002268:	4b31      	ldr	r3, [pc, #196]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0ef      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002274:	7cfb      	ldrb	r3, [r7, #19]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d15c      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800227a:	4b2c      	ldr	r3, [pc, #176]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002284:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d01f      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	429a      	cmp	r2, r3
 8002296:	d019      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002298:	4b24      	ldr	r3, [pc, #144]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022a4:	4b21      	ldr	r3, [pc, #132]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	4a20      	ldr	r2, [pc, #128]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ba:	4a1c      	ldr	r2, [pc, #112]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022c4:	4a19      	ldr	r2, [pc, #100]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d016      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7fe fd1f 	bl	8000d18 <HAL_GetTick>
 80022da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022dc:	e00b      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022de:	f7fe fd1b 	bl	8000d18 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d902      	bls.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	74fb      	strb	r3, [r7, #19]
            break;
 80022f4:	e006      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0ec      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002304:	7cfb      	ldrb	r3, [r7, #19]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10c      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800230a:	4b08      	ldr	r3, [pc, #32]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002310:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800231a:	4904      	ldr	r1, [pc, #16]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002322:	e009      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002324:	7cfb      	ldrb	r3, [r7, #19]
 8002326:	74bb      	strb	r3, [r7, #18]
 8002328:	e006      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002338:	7c7b      	ldrb	r3, [r7, #17]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d105      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233e:	4b9e      	ldr	r3, [pc, #632]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	4a9d      	ldr	r2, [pc, #628]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002348:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002356:	4b98      	ldr	r3, [pc, #608]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235c:	f023 0203 	bic.w	r2, r3, #3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002364:	4994      	ldr	r1, [pc, #592]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00a      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002378:	4b8f      	ldr	r3, [pc, #572]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237e:	f023 020c 	bic.w	r2, r3, #12
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002386:	498c      	ldr	r1, [pc, #560]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00a      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800239a:	4b87      	ldr	r3, [pc, #540]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	4983      	ldr	r1, [pc, #524]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023bc:	4b7e      	ldr	r3, [pc, #504]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	497b      	ldr	r1, [pc, #492]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023de:	4b76      	ldr	r3, [pc, #472]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ec:	4972      	ldr	r1, [pc, #456]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00a      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002400:	4b6d      	ldr	r3, [pc, #436]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240e:	496a      	ldr	r1, [pc, #424]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00a      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002422:	4b65      	ldr	r3, [pc, #404]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002428:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002430:	4961      	ldr	r1, [pc, #388]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002444:	4b5c      	ldr	r3, [pc, #368]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002452:	4959      	ldr	r1, [pc, #356]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002466:	4b54      	ldr	r3, [pc, #336]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002474:	4950      	ldr	r1, [pc, #320]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002488:	4b4b      	ldr	r3, [pc, #300]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002496:	4948      	ldr	r1, [pc, #288]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024aa:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	493f      	ldr	r1, [pc, #252]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d028      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024cc:	4b3a      	ldr	r3, [pc, #232]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024da:	4937      	ldr	r1, [pc, #220]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ea:	d106      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ec:	4b32      	ldr	r3, [pc, #200]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4a31      	ldr	r2, [pc, #196]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024f6:	60d3      	str	r3, [r2, #12]
 80024f8:	e011      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002502:	d10c      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3304      	adds	r3, #4
 8002508:	2101      	movs	r1, #1
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f8c8 	bl	80026a0 <RCCEx_PLLSAI1_Config>
 8002510:	4603      	mov	r3, r0
 8002512:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002514:	7cfb      	ldrb	r3, [r7, #19]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800251a:	7cfb      	ldrb	r3, [r7, #19]
 800251c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d028      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800252a:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002530:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	491f      	ldr	r1, [pc, #124]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002544:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002548:	d106      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800254a:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	4a1a      	ldr	r2, [pc, #104]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002550:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002554:	60d3      	str	r3, [r2, #12]
 8002556:	e011      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002560:	d10c      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3304      	adds	r3, #4
 8002566:	2101      	movs	r1, #1
 8002568:	4618      	mov	r0, r3
 800256a:	f000 f899 	bl	80026a0 <RCCEx_PLLSAI1_Config>
 800256e:	4603      	mov	r3, r0
 8002570:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002572:	7cfb      	ldrb	r3, [r7, #19]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002578:	7cfb      	ldrb	r3, [r7, #19]
 800257a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d02b      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002596:	4908      	ldr	r1, [pc, #32]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025a6:	d109      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a02      	ldr	r2, [pc, #8]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b2:	60d3      	str	r3, [r2, #12]
 80025b4:	e014      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3304      	adds	r3, #4
 80025ca:	2101      	movs	r1, #1
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 f867 	bl	80026a0 <RCCEx_PLLSAI1_Config>
 80025d2:	4603      	mov	r3, r0
 80025d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025d6:	7cfb      	ldrb	r3, [r7, #19]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80025dc:	7cfb      	ldrb	r3, [r7, #19]
 80025de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d02f      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025ec:	4b2b      	ldr	r3, [pc, #172]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025fa:	4928      	ldr	r1, [pc, #160]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800260a:	d10d      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3304      	adds	r3, #4
 8002610:	2102      	movs	r1, #2
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f844 	bl	80026a0 <RCCEx_PLLSAI1_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d014      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002622:	7cfb      	ldrb	r3, [r7, #19]
 8002624:	74bb      	strb	r3, [r7, #18]
 8002626:	e011      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800262c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002630:	d10c      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3320      	adds	r3, #32
 8002636:	2102      	movs	r1, #2
 8002638:	4618      	mov	r0, r3
 800263a:	f000 f925 	bl	8002888 <RCCEx_PLLSAI2_Config>
 800263e:	4603      	mov	r3, r0
 8002640:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002642:	7cfb      	ldrb	r3, [r7, #19]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002658:	4b10      	ldr	r3, [pc, #64]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002666:	490d      	ldr	r1, [pc, #52]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00b      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002680:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800268a:	4904      	ldr	r1, [pc, #16]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002692:	7cbb      	ldrb	r3, [r7, #18]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000

080026a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026ae:	4b75      	ldr	r3, [pc, #468]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d018      	beq.n	80026ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026ba:	4b72      	ldr	r3, [pc, #456]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f003 0203 	and.w	r2, r3, #3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d10d      	bne.n	80026e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
       ||
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026d2:	4b6c      	ldr	r3, [pc, #432]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	091b      	lsrs	r3, r3, #4
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
       ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d047      	beq.n	8002776 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	73fb      	strb	r3, [r7, #15]
 80026ea:	e044      	b.n	8002776 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d018      	beq.n	8002726 <RCCEx_PLLSAI1_Config+0x86>
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d825      	bhi.n	8002744 <RCCEx_PLLSAI1_Config+0xa4>
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d002      	beq.n	8002702 <RCCEx_PLLSAI1_Config+0x62>
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d009      	beq.n	8002714 <RCCEx_PLLSAI1_Config+0x74>
 8002700:	e020      	b.n	8002744 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002702:	4b60      	ldr	r3, [pc, #384]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d11d      	bne.n	800274a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002712:	e01a      	b.n	800274a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002714:	4b5b      	ldr	r3, [pc, #364]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271c:	2b00      	cmp	r3, #0
 800271e:	d116      	bne.n	800274e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002724:	e013      	b.n	800274e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002726:	4b57      	ldr	r3, [pc, #348]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10f      	bne.n	8002752 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002732:	4b54      	ldr	r3, [pc, #336]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002742:	e006      	b.n	8002752 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
      break;
 8002748:	e004      	b.n	8002754 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800274a:	bf00      	nop
 800274c:	e002      	b.n	8002754 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800274e:	bf00      	nop
 8002750:	e000      	b.n	8002754 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002752:	bf00      	nop
    }

    if(status == HAL_OK)
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10d      	bne.n	8002776 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800275a:	4b4a      	ldr	r3, [pc, #296]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6819      	ldr	r1, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	430b      	orrs	r3, r1
 8002770:	4944      	ldr	r1, [pc, #272]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d17d      	bne.n	8002878 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800277c:	4b41      	ldr	r3, [pc, #260]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a40      	ldr	r2, [pc, #256]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002782:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002788:	f7fe fac6 	bl	8000d18 <HAL_GetTick>
 800278c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800278e:	e009      	b.n	80027a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002790:	f7fe fac2 	bl	8000d18 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d902      	bls.n	80027a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	73fb      	strb	r3, [r7, #15]
        break;
 80027a2:	e005      	b.n	80027b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027a4:	4b37      	ldr	r3, [pc, #220]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1ef      	bne.n	8002790 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d160      	bne.n	8002878 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d111      	bne.n	80027e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027bc:	4b31      	ldr	r3, [pc, #196]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6892      	ldr	r2, [r2, #8]
 80027cc:	0211      	lsls	r1, r2, #8
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68d2      	ldr	r2, [r2, #12]
 80027d2:	0912      	lsrs	r2, r2, #4
 80027d4:	0452      	lsls	r2, r2, #17
 80027d6:	430a      	orrs	r2, r1
 80027d8:	492a      	ldr	r1, [pc, #168]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	610b      	str	r3, [r1, #16]
 80027de:	e027      	b.n	8002830 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d112      	bne.n	800280c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027e6:	4b27      	ldr	r3, [pc, #156]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6892      	ldr	r2, [r2, #8]
 80027f6:	0211      	lsls	r1, r2, #8
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6912      	ldr	r2, [r2, #16]
 80027fc:	0852      	lsrs	r2, r2, #1
 80027fe:	3a01      	subs	r2, #1
 8002800:	0552      	lsls	r2, r2, #21
 8002802:	430a      	orrs	r2, r1
 8002804:	491f      	ldr	r1, [pc, #124]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	610b      	str	r3, [r1, #16]
 800280a:	e011      	b.n	8002830 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800280c:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002814:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6892      	ldr	r2, [r2, #8]
 800281c:	0211      	lsls	r1, r2, #8
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6952      	ldr	r2, [r2, #20]
 8002822:	0852      	lsrs	r2, r2, #1
 8002824:	3a01      	subs	r2, #1
 8002826:	0652      	lsls	r2, r2, #25
 8002828:	430a      	orrs	r2, r1
 800282a:	4916      	ldr	r1, [pc, #88]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800282c:	4313      	orrs	r3, r2
 800282e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002830:	4b14      	ldr	r3, [pc, #80]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a13      	ldr	r2, [pc, #76]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002836:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800283a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283c:	f7fe fa6c 	bl	8000d18 <HAL_GetTick>
 8002840:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002842:	e009      	b.n	8002858 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002844:	f7fe fa68 	bl	8000d18 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d902      	bls.n	8002858 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	73fb      	strb	r3, [r7, #15]
          break;
 8002856:	e005      	b.n	8002864 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002858:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0ef      	beq.n	8002844 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	4904      	ldr	r1, [pc, #16]	; (8002884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002874:	4313      	orrs	r3, r2
 8002876:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002878:	7bfb      	ldrb	r3, [r7, #15]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000

08002888 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002896:	4b6a      	ldr	r3, [pc, #424]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d018      	beq.n	80028d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028a2:	4b67      	ldr	r3, [pc, #412]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f003 0203 	and.w	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d10d      	bne.n	80028ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
       ||
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80028ba:	4b61      	ldr	r3, [pc, #388]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
       ||
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d047      	beq.n	800295e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	73fb      	strb	r3, [r7, #15]
 80028d2:	e044      	b.n	800295e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d018      	beq.n	800290e <RCCEx_PLLSAI2_Config+0x86>
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d825      	bhi.n	800292c <RCCEx_PLLSAI2_Config+0xa4>
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d002      	beq.n	80028ea <RCCEx_PLLSAI2_Config+0x62>
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d009      	beq.n	80028fc <RCCEx_PLLSAI2_Config+0x74>
 80028e8:	e020      	b.n	800292c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028ea:	4b55      	ldr	r3, [pc, #340]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d11d      	bne.n	8002932 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028fa:	e01a      	b.n	8002932 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028fc:	4b50      	ldr	r3, [pc, #320]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002904:	2b00      	cmp	r3, #0
 8002906:	d116      	bne.n	8002936 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800290c:	e013      	b.n	8002936 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800290e:	4b4c      	ldr	r3, [pc, #304]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10f      	bne.n	800293a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800291a:	4b49      	ldr	r3, [pc, #292]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800292a:	e006      	b.n	800293a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
      break;
 8002930:	e004      	b.n	800293c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002932:	bf00      	nop
 8002934:	e002      	b.n	800293c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002936:	bf00      	nop
 8002938:	e000      	b.n	800293c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800293a:	bf00      	nop
    }

    if(status == HAL_OK)
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10d      	bne.n	800295e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002942:	4b3f      	ldr	r3, [pc, #252]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6819      	ldr	r1, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	430b      	orrs	r3, r1
 8002958:	4939      	ldr	r1, [pc, #228]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 800295a:	4313      	orrs	r3, r2
 800295c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d167      	bne.n	8002a34 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002964:	4b36      	ldr	r3, [pc, #216]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a35      	ldr	r2, [pc, #212]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 800296a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800296e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002970:	f7fe f9d2 	bl	8000d18 <HAL_GetTick>
 8002974:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002976:	e009      	b.n	800298c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002978:	f7fe f9ce 	bl	8000d18 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d902      	bls.n	800298c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	73fb      	strb	r3, [r7, #15]
        break;
 800298a:	e005      	b.n	8002998 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800298c:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ef      	bne.n	8002978 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d14a      	bne.n	8002a34 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d111      	bne.n	80029c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029a4:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6892      	ldr	r2, [r2, #8]
 80029b4:	0211      	lsls	r1, r2, #8
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68d2      	ldr	r2, [r2, #12]
 80029ba:	0912      	lsrs	r2, r2, #4
 80029bc:	0452      	lsls	r2, r2, #17
 80029be:	430a      	orrs	r2, r1
 80029c0:	491f      	ldr	r1, [pc, #124]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	614b      	str	r3, [r1, #20]
 80029c6:	e011      	b.n	80029ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029c8:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6892      	ldr	r2, [r2, #8]
 80029d8:	0211      	lsls	r1, r2, #8
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6912      	ldr	r2, [r2, #16]
 80029de:	0852      	lsrs	r2, r2, #1
 80029e0:	3a01      	subs	r2, #1
 80029e2:	0652      	lsls	r2, r2, #25
 80029e4:	430a      	orrs	r2, r1
 80029e6:	4916      	ldr	r1, [pc, #88]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029ec:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a13      	ldr	r2, [pc, #76]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7fe f98e 	bl	8000d18 <HAL_GetTick>
 80029fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029fe:	e009      	b.n	8002a14 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a00:	f7fe f98a 	bl	8000d18 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d902      	bls.n	8002a14 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	73fb      	strb	r3, [r7, #15]
          break;
 8002a12:	e005      	b.n	8002a20 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0ef      	beq.n	8002a00 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a28:	695a      	ldr	r2, [r3, #20]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	4904      	ldr	r1, [pc, #16]	; (8002a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000

08002a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e049      	b.n	8002aea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fd ff9c 	bl	80009a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	4619      	mov	r1, r3
 8002a82:	4610      	mov	r0, r2
 8002a84:	f000 fdc0 	bl	8003608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d001      	beq.n	8002b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e04f      	b.n	8002bac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a23      	ldr	r2, [pc, #140]	; (8002bb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d01d      	beq.n	8002b6a <HAL_TIM_Base_Start_IT+0x76>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b36:	d018      	beq.n	8002b6a <HAL_TIM_Base_Start_IT+0x76>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1f      	ldr	r2, [pc, #124]	; (8002bbc <HAL_TIM_Base_Start_IT+0xc8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d013      	beq.n	8002b6a <HAL_TIM_Base_Start_IT+0x76>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00e      	beq.n	8002b6a <HAL_TIM_Base_Start_IT+0x76>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a1c      	ldr	r2, [pc, #112]	; (8002bc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d009      	beq.n	8002b6a <HAL_TIM_Base_Start_IT+0x76>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a1b      	ldr	r2, [pc, #108]	; (8002bc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d004      	beq.n	8002b6a <HAL_TIM_Base_Start_IT+0x76>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a19      	ldr	r2, [pc, #100]	; (8002bcc <HAL_TIM_Base_Start_IT+0xd8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d115      	bne.n	8002b96 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b06      	cmp	r3, #6
 8002b7a:	d015      	beq.n	8002ba8 <HAL_TIM_Base_Start_IT+0xb4>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b82:	d011      	beq.n	8002ba8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b94:	e008      	b.n	8002ba8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0201 	orr.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e000      	b.n	8002baa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40012c00 	.word	0x40012c00
 8002bbc:	40000400 	.word	0x40000400
 8002bc0:	40000800 	.word	0x40000800
 8002bc4:	40000c00 	.word	0x40000c00
 8002bc8:	40013400 	.word	0x40013400
 8002bcc:	40014000 	.word	0x40014000
 8002bd0:	00010007 	.word	0x00010007

08002bd4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6a1a      	ldr	r2, [r3, #32]
 8002bf2:	f241 1311 	movw	r3, #4369	; 0x1111
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10f      	bne.n	8002c1c <HAL_TIM_Base_Stop_IT+0x48>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6a1a      	ldr	r2, [r3, #32]
 8002c02:	f240 4344 	movw	r3, #1092	; 0x444
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d107      	bne.n	8002c1c <HAL_TIM_Base_Stop_IT+0x48>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e049      	b.n	8002cd8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d106      	bne.n	8002c5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7fd fe85 	bl	8000968 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2202      	movs	r2, #2
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4610      	mov	r0, r2
 8002c72:	f000 fcc9 	bl	8003608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <HAL_TIM_PWM_Start_IT+0x28>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	bf14      	ite	ne
 8002d00:	2301      	movne	r3, #1
 8002d02:	2300      	moveq	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	e03c      	b.n	8002d82 <HAL_TIM_PWM_Start_IT+0xa2>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d109      	bne.n	8002d22 <HAL_TIM_PWM_Start_IT+0x42>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	bf14      	ite	ne
 8002d1a:	2301      	movne	r3, #1
 8002d1c:	2300      	moveq	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	e02f      	b.n	8002d82 <HAL_TIM_PWM_Start_IT+0xa2>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d109      	bne.n	8002d3c <HAL_TIM_PWM_Start_IT+0x5c>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	bf14      	ite	ne
 8002d34:	2301      	movne	r3, #1
 8002d36:	2300      	moveq	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	e022      	b.n	8002d82 <HAL_TIM_PWM_Start_IT+0xa2>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	d109      	bne.n	8002d56 <HAL_TIM_PWM_Start_IT+0x76>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	bf14      	ite	ne
 8002d4e:	2301      	movne	r3, #1
 8002d50:	2300      	moveq	r3, #0
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	e015      	b.n	8002d82 <HAL_TIM_PWM_Start_IT+0xa2>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d109      	bne.n	8002d70 <HAL_TIM_PWM_Start_IT+0x90>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	bf14      	ite	ne
 8002d68:	2301      	movne	r3, #1
 8002d6a:	2300      	moveq	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	e008      	b.n	8002d82 <HAL_TIM_PWM_Start_IT+0xa2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	bf14      	ite	ne
 8002d7c:	2301      	movne	r3, #1
 8002d7e:	2300      	moveq	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e0e7      	b.n	8002f5a <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d104      	bne.n	8002d9a <HAL_TIM_PWM_Start_IT+0xba>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d98:	e023      	b.n	8002de2 <HAL_TIM_PWM_Start_IT+0x102>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d104      	bne.n	8002daa <HAL_TIM_PWM_Start_IT+0xca>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002da8:	e01b      	b.n	8002de2 <HAL_TIM_PWM_Start_IT+0x102>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d104      	bne.n	8002dba <HAL_TIM_PWM_Start_IT+0xda>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002db8:	e013      	b.n	8002de2 <HAL_TIM_PWM_Start_IT+0x102>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b0c      	cmp	r3, #12
 8002dbe:	d104      	bne.n	8002dca <HAL_TIM_PWM_Start_IT+0xea>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dc8:	e00b      	b.n	8002de2 <HAL_TIM_PWM_Start_IT+0x102>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b10      	cmp	r3, #16
 8002dce:	d104      	bne.n	8002dda <HAL_TIM_PWM_Start_IT+0xfa>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dd8:	e003      	b.n	8002de2 <HAL_TIM_PWM_Start_IT+0x102>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b0c      	cmp	r3, #12
 8002de6:	d841      	bhi.n	8002e6c <HAL_TIM_PWM_Start_IT+0x18c>
 8002de8:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <HAL_TIM_PWM_Start_IT+0x110>)
 8002dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dee:	bf00      	nop
 8002df0:	08002e25 	.word	0x08002e25
 8002df4:	08002e6d 	.word	0x08002e6d
 8002df8:	08002e6d 	.word	0x08002e6d
 8002dfc:	08002e6d 	.word	0x08002e6d
 8002e00:	08002e37 	.word	0x08002e37
 8002e04:	08002e6d 	.word	0x08002e6d
 8002e08:	08002e6d 	.word	0x08002e6d
 8002e0c:	08002e6d 	.word	0x08002e6d
 8002e10:	08002e49 	.word	0x08002e49
 8002e14:	08002e6d 	.word	0x08002e6d
 8002e18:	08002e6d 	.word	0x08002e6d
 8002e1c:	08002e6d 	.word	0x08002e6d
 8002e20:	08002e5b 	.word	0x08002e5b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0202 	orr.w	r2, r2, #2
 8002e32:	60da      	str	r2, [r3, #12]
      break;
 8002e34:	e01d      	b.n	8002e72 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0204 	orr.w	r2, r2, #4
 8002e44:	60da      	str	r2, [r3, #12]
      break;
 8002e46:	e014      	b.n	8002e72 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0208 	orr.w	r2, r2, #8
 8002e56:	60da      	str	r2, [r3, #12]
      break;
 8002e58:	e00b      	b.n	8002e72 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0210 	orr.w	r2, r2, #16
 8002e68:	60da      	str	r2, [r3, #12]
      break;
 8002e6a:	e002      	b.n	8002e72 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e70:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d16f      	bne.n	8002f58 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	6839      	ldr	r1, [r7, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 ff31 	bl	8003ce8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a36      	ldr	r2, [pc, #216]	; (8002f64 <HAL_TIM_PWM_Start_IT+0x284>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d013      	beq.n	8002eb8 <HAL_TIM_PWM_Start_IT+0x1d8>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a34      	ldr	r2, [pc, #208]	; (8002f68 <HAL_TIM_PWM_Start_IT+0x288>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00e      	beq.n	8002eb8 <HAL_TIM_PWM_Start_IT+0x1d8>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a33      	ldr	r2, [pc, #204]	; (8002f6c <HAL_TIM_PWM_Start_IT+0x28c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d009      	beq.n	8002eb8 <HAL_TIM_PWM_Start_IT+0x1d8>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a31      	ldr	r2, [pc, #196]	; (8002f70 <HAL_TIM_PWM_Start_IT+0x290>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d004      	beq.n	8002eb8 <HAL_TIM_PWM_Start_IT+0x1d8>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a30      	ldr	r2, [pc, #192]	; (8002f74 <HAL_TIM_PWM_Start_IT+0x294>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d101      	bne.n	8002ebc <HAL_TIM_PWM_Start_IT+0x1dc>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <HAL_TIM_PWM_Start_IT+0x1de>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d007      	beq.n	8002ed2 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ed0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a23      	ldr	r2, [pc, #140]	; (8002f64 <HAL_TIM_PWM_Start_IT+0x284>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d01d      	beq.n	8002f18 <HAL_TIM_PWM_Start_IT+0x238>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee4:	d018      	beq.n	8002f18 <HAL_TIM_PWM_Start_IT+0x238>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a23      	ldr	r2, [pc, #140]	; (8002f78 <HAL_TIM_PWM_Start_IT+0x298>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d013      	beq.n	8002f18 <HAL_TIM_PWM_Start_IT+0x238>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a21      	ldr	r2, [pc, #132]	; (8002f7c <HAL_TIM_PWM_Start_IT+0x29c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00e      	beq.n	8002f18 <HAL_TIM_PWM_Start_IT+0x238>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a20      	ldr	r2, [pc, #128]	; (8002f80 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d009      	beq.n	8002f18 <HAL_TIM_PWM_Start_IT+0x238>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a17      	ldr	r2, [pc, #92]	; (8002f68 <HAL_TIM_PWM_Start_IT+0x288>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d004      	beq.n	8002f18 <HAL_TIM_PWM_Start_IT+0x238>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a16      	ldr	r2, [pc, #88]	; (8002f6c <HAL_TIM_PWM_Start_IT+0x28c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d115      	bne.n	8002f44 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b06      	cmp	r3, #6
 8002f28:	d015      	beq.n	8002f56 <HAL_TIM_PWM_Start_IT+0x276>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f30:	d011      	beq.n	8002f56 <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0201 	orr.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f42:	e008      	b.n	8002f56 <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	e000      	b.n	8002f58 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f56:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40013400 	.word	0x40013400
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40014400 	.word	0x40014400
 8002f74:	40014800 	.word	0x40014800
 8002f78:	40000400 	.word	0x40000400
 8002f7c:	40000800 	.word	0x40000800
 8002f80:	40000c00 	.word	0x40000c00
 8002f84:	00010007 	.word	0x00010007

08002f88 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b0c      	cmp	r3, #12
 8002f9a:	d841      	bhi.n	8003020 <HAL_TIM_PWM_Stop_IT+0x98>
 8002f9c:	a201      	add	r2, pc, #4	; (adr r2, 8002fa4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8002f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa2:	bf00      	nop
 8002fa4:	08002fd9 	.word	0x08002fd9
 8002fa8:	08003021 	.word	0x08003021
 8002fac:	08003021 	.word	0x08003021
 8002fb0:	08003021 	.word	0x08003021
 8002fb4:	08002feb 	.word	0x08002feb
 8002fb8:	08003021 	.word	0x08003021
 8002fbc:	08003021 	.word	0x08003021
 8002fc0:	08003021 	.word	0x08003021
 8002fc4:	08002ffd 	.word	0x08002ffd
 8002fc8:	08003021 	.word	0x08003021
 8002fcc:	08003021 	.word	0x08003021
 8002fd0:	08003021 	.word	0x08003021
 8002fd4:	0800300f 	.word	0x0800300f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0202 	bic.w	r2, r2, #2
 8002fe6:	60da      	str	r2, [r3, #12]
      break;
 8002fe8:	e01d      	b.n	8003026 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0204 	bic.w	r2, r2, #4
 8002ff8:	60da      	str	r2, [r3, #12]
      break;
 8002ffa:	e014      	b.n	8003026 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0208 	bic.w	r2, r2, #8
 800300a:	60da      	str	r2, [r3, #12]
      break;
 800300c:	e00b      	b.n	8003026 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0210 	bic.w	r2, r2, #16
 800301c:	60da      	str	r2, [r3, #12]
      break;
 800301e:	e002      	b.n	8003026 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
      break;
 8003024:	bf00      	nop
  }

  if (status == HAL_OK)
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	2b00      	cmp	r3, #0
 800302a:	f040 8081 	bne.w	8003130 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2200      	movs	r2, #0
 8003034:	6839      	ldr	r1, [r7, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f000 fe56 	bl	8003ce8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a3e      	ldr	r2, [pc, #248]	; (800313c <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d013      	beq.n	800306e <HAL_TIM_PWM_Stop_IT+0xe6>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a3d      	ldr	r2, [pc, #244]	; (8003140 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00e      	beq.n	800306e <HAL_TIM_PWM_Stop_IT+0xe6>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a3b      	ldr	r2, [pc, #236]	; (8003144 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d009      	beq.n	800306e <HAL_TIM_PWM_Stop_IT+0xe6>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a3a      	ldr	r2, [pc, #232]	; (8003148 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d004      	beq.n	800306e <HAL_TIM_PWM_Stop_IT+0xe6>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a38      	ldr	r2, [pc, #224]	; (800314c <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d101      	bne.n	8003072 <HAL_TIM_PWM_Stop_IT+0xea>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <HAL_TIM_PWM_Stop_IT+0xec>
 8003072:	2300      	movs	r3, #0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d017      	beq.n	80030a8 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6a1a      	ldr	r2, [r3, #32]
 800307e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10f      	bne.n	80030a8 <HAL_TIM_PWM_Stop_IT+0x120>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6a1a      	ldr	r2, [r3, #32]
 800308e:	f240 4344 	movw	r3, #1092	; 0x444
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d107      	bne.n	80030a8 <HAL_TIM_PWM_Stop_IT+0x120>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030a6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6a1a      	ldr	r2, [r3, #32]
 80030ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10f      	bne.n	80030d8 <HAL_TIM_PWM_Stop_IT+0x150>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6a1a      	ldr	r2, [r3, #32]
 80030be:	f240 4344 	movw	r3, #1092	; 0x444
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d107      	bne.n	80030d8 <HAL_TIM_PWM_Stop_IT+0x150>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0201 	bic.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d104      	bne.n	80030e8 <HAL_TIM_PWM_Stop_IT+0x160>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030e6:	e023      	b.n	8003130 <HAL_TIM_PWM_Stop_IT+0x1a8>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d104      	bne.n	80030f8 <HAL_TIM_PWM_Stop_IT+0x170>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030f6:	e01b      	b.n	8003130 <HAL_TIM_PWM_Stop_IT+0x1a8>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d104      	bne.n	8003108 <HAL_TIM_PWM_Stop_IT+0x180>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003106:	e013      	b.n	8003130 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2b0c      	cmp	r3, #12
 800310c:	d104      	bne.n	8003118 <HAL_TIM_PWM_Stop_IT+0x190>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003116:	e00b      	b.n	8003130 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b10      	cmp	r3, #16
 800311c:	d104      	bne.n	8003128 <HAL_TIM_PWM_Stop_IT+0x1a0>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003126:	e003      	b.n	8003130 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8003130:	7bfb      	ldrb	r3, [r7, #15]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40012c00 	.word	0x40012c00
 8003140:	40013400 	.word	0x40013400
 8003144:	40014000 	.word	0x40014000
 8003148:	40014400 	.word	0x40014400
 800314c:	40014800 	.word	0x40014800

08003150 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b02      	cmp	r3, #2
 8003164:	d122      	bne.n	80031ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b02      	cmp	r3, #2
 8003172:	d11b      	bne.n	80031ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0202 	mvn.w	r2, #2
 800317c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fa1a 	bl	80035cc <HAL_TIM_IC_CaptureCallback>
 8003198:	e005      	b.n	80031a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fa0c 	bl	80035b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 fa1d 	bl	80035e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d122      	bne.n	8003200 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d11b      	bne.n	8003200 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0204 	mvn.w	r2, #4
 80031d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2202      	movs	r2, #2
 80031d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f9f0 	bl	80035cc <HAL_TIM_IC_CaptureCallback>
 80031ec:	e005      	b.n	80031fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f9e2 	bl	80035b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f9f3 	bl	80035e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b08      	cmp	r3, #8
 800320c:	d122      	bne.n	8003254 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b08      	cmp	r3, #8
 800321a:	d11b      	bne.n	8003254 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0208 	mvn.w	r2, #8
 8003224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2204      	movs	r2, #4
 800322a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f9c6 	bl	80035cc <HAL_TIM_IC_CaptureCallback>
 8003240:	e005      	b.n	800324e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f9b8 	bl	80035b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f9c9 	bl	80035e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b10      	cmp	r3, #16
 8003260:	d122      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b10      	cmp	r3, #16
 800326e:	d11b      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0210 	mvn.w	r2, #16
 8003278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2208      	movs	r2, #8
 800327e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f99c 	bl	80035cc <HAL_TIM_IC_CaptureCallback>
 8003294:	e005      	b.n	80032a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f98e 	bl	80035b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f99f 	bl	80035e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d10e      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d107      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0201 	mvn.w	r2, #1
 80032cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fd f930 	bl	8000534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b80      	cmp	r3, #128	; 0x80
 80032e0:	d10e      	bne.n	8003300 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ec:	2b80      	cmp	r3, #128	; 0x80
 80032ee:	d107      	bne.n	8003300 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fdac 	bl	8003e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800330e:	d10e      	bne.n	800332e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331a:	2b80      	cmp	r3, #128	; 0x80
 800331c:	d107      	bne.n	800332e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fd9f 	bl	8003e6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d10e      	bne.n	800335a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003346:	2b40      	cmp	r3, #64	; 0x40
 8003348:	d107      	bne.n	800335a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f94d 	bl	80035f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f003 0320 	and.w	r3, r3, #32
 8003364:	2b20      	cmp	r3, #32
 8003366:	d10e      	bne.n	8003386 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f003 0320 	and.w	r3, r3, #32
 8003372:	2b20      	cmp	r3, #32
 8003374:	d107      	bne.n	8003386 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f06f 0220 	mvn.w	r2, #32
 800337e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fd5f 	bl	8003e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e0ff      	b.n	80035ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b14      	cmp	r3, #20
 80033ba:	f200 80f0 	bhi.w	800359e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80033be:	a201      	add	r2, pc, #4	; (adr r2, 80033c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c4:	08003419 	.word	0x08003419
 80033c8:	0800359f 	.word	0x0800359f
 80033cc:	0800359f 	.word	0x0800359f
 80033d0:	0800359f 	.word	0x0800359f
 80033d4:	08003459 	.word	0x08003459
 80033d8:	0800359f 	.word	0x0800359f
 80033dc:	0800359f 	.word	0x0800359f
 80033e0:	0800359f 	.word	0x0800359f
 80033e4:	0800349b 	.word	0x0800349b
 80033e8:	0800359f 	.word	0x0800359f
 80033ec:	0800359f 	.word	0x0800359f
 80033f0:	0800359f 	.word	0x0800359f
 80033f4:	080034db 	.word	0x080034db
 80033f8:	0800359f 	.word	0x0800359f
 80033fc:	0800359f 	.word	0x0800359f
 8003400:	0800359f 	.word	0x0800359f
 8003404:	0800351d 	.word	0x0800351d
 8003408:	0800359f 	.word	0x0800359f
 800340c:	0800359f 	.word	0x0800359f
 8003410:	0800359f 	.word	0x0800359f
 8003414:	0800355d 	.word	0x0800355d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	4618      	mov	r0, r3
 8003420:	f000 f98c 	bl	800373c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0208 	orr.w	r2, r2, #8
 8003432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0204 	bic.w	r2, r2, #4
 8003442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6999      	ldr	r1, [r3, #24]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	619a      	str	r2, [r3, #24]
      break;
 8003456:	e0a5      	b.n	80035a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f9fc 	bl	800385c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6999      	ldr	r1, [r3, #24]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	021a      	lsls	r2, r3, #8
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	619a      	str	r2, [r3, #24]
      break;
 8003498:	e084      	b.n	80035a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fa65 	bl	8003970 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69da      	ldr	r2, [r3, #28]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f042 0208 	orr.w	r2, r2, #8
 80034b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0204 	bic.w	r2, r2, #4
 80034c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69d9      	ldr	r1, [r3, #28]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	61da      	str	r2, [r3, #28]
      break;
 80034d8:	e064      	b.n	80035a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 facd 	bl	8003a80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69d9      	ldr	r1, [r3, #28]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	021a      	lsls	r2, r3, #8
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	61da      	str	r2, [r3, #28]
      break;
 800351a:	e043      	b.n	80035a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fb16 	bl	8003b54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0208 	orr.w	r2, r2, #8
 8003536:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0204 	bic.w	r2, r2, #4
 8003546:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800355a:	e023      	b.n	80035a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fb5a 	bl	8003c1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003576:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003586:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	021a      	lsls	r2, r3, #8
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800359c:	e002      	b.n	80035a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	75fb      	strb	r3, [r7, #23]
      break;
 80035a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop

080035b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a40      	ldr	r2, [pc, #256]	; (800371c <TIM_Base_SetConfig+0x114>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d013      	beq.n	8003648 <TIM_Base_SetConfig+0x40>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003626:	d00f      	beq.n	8003648 <TIM_Base_SetConfig+0x40>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a3d      	ldr	r2, [pc, #244]	; (8003720 <TIM_Base_SetConfig+0x118>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00b      	beq.n	8003648 <TIM_Base_SetConfig+0x40>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a3c      	ldr	r2, [pc, #240]	; (8003724 <TIM_Base_SetConfig+0x11c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d007      	beq.n	8003648 <TIM_Base_SetConfig+0x40>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a3b      	ldr	r2, [pc, #236]	; (8003728 <TIM_Base_SetConfig+0x120>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d003      	beq.n	8003648 <TIM_Base_SetConfig+0x40>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a3a      	ldr	r2, [pc, #232]	; (800372c <TIM_Base_SetConfig+0x124>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d108      	bne.n	800365a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a2f      	ldr	r2, [pc, #188]	; (800371c <TIM_Base_SetConfig+0x114>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d01f      	beq.n	80036a2 <TIM_Base_SetConfig+0x9a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003668:	d01b      	beq.n	80036a2 <TIM_Base_SetConfig+0x9a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a2c      	ldr	r2, [pc, #176]	; (8003720 <TIM_Base_SetConfig+0x118>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d017      	beq.n	80036a2 <TIM_Base_SetConfig+0x9a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a2b      	ldr	r2, [pc, #172]	; (8003724 <TIM_Base_SetConfig+0x11c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <TIM_Base_SetConfig+0x9a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a2a      	ldr	r2, [pc, #168]	; (8003728 <TIM_Base_SetConfig+0x120>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00f      	beq.n	80036a2 <TIM_Base_SetConfig+0x9a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a29      	ldr	r2, [pc, #164]	; (800372c <TIM_Base_SetConfig+0x124>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00b      	beq.n	80036a2 <TIM_Base_SetConfig+0x9a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a28      	ldr	r2, [pc, #160]	; (8003730 <TIM_Base_SetConfig+0x128>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d007      	beq.n	80036a2 <TIM_Base_SetConfig+0x9a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a27      	ldr	r2, [pc, #156]	; (8003734 <TIM_Base_SetConfig+0x12c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d003      	beq.n	80036a2 <TIM_Base_SetConfig+0x9a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a26      	ldr	r2, [pc, #152]	; (8003738 <TIM_Base_SetConfig+0x130>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d108      	bne.n	80036b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a10      	ldr	r2, [pc, #64]	; (800371c <TIM_Base_SetConfig+0x114>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00f      	beq.n	8003700 <TIM_Base_SetConfig+0xf8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a12      	ldr	r2, [pc, #72]	; (800372c <TIM_Base_SetConfig+0x124>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00b      	beq.n	8003700 <TIM_Base_SetConfig+0xf8>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a11      	ldr	r2, [pc, #68]	; (8003730 <TIM_Base_SetConfig+0x128>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d007      	beq.n	8003700 <TIM_Base_SetConfig+0xf8>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a10      	ldr	r2, [pc, #64]	; (8003734 <TIM_Base_SetConfig+0x12c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d003      	beq.n	8003700 <TIM_Base_SetConfig+0xf8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a0f      	ldr	r2, [pc, #60]	; (8003738 <TIM_Base_SetConfig+0x130>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d103      	bne.n	8003708 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	615a      	str	r2, [r3, #20]
}
 800370e:	bf00      	nop
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40012c00 	.word	0x40012c00
 8003720:	40000400 	.word	0x40000400
 8003724:	40000800 	.word	0x40000800
 8003728:	40000c00 	.word	0x40000c00
 800372c:	40013400 	.word	0x40013400
 8003730:	40014000 	.word	0x40014000
 8003734:	40014400 	.word	0x40014400
 8003738:	40014800 	.word	0x40014800

0800373c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	f023 0201 	bic.w	r2, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0303 	bic.w	r3, r3, #3
 8003776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f023 0302 	bic.w	r3, r3, #2
 8003788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a2c      	ldr	r2, [pc, #176]	; (8003848 <TIM_OC1_SetConfig+0x10c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00f      	beq.n	80037bc <TIM_OC1_SetConfig+0x80>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a2b      	ldr	r2, [pc, #172]	; (800384c <TIM_OC1_SetConfig+0x110>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00b      	beq.n	80037bc <TIM_OC1_SetConfig+0x80>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a2a      	ldr	r2, [pc, #168]	; (8003850 <TIM_OC1_SetConfig+0x114>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d007      	beq.n	80037bc <TIM_OC1_SetConfig+0x80>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a29      	ldr	r2, [pc, #164]	; (8003854 <TIM_OC1_SetConfig+0x118>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d003      	beq.n	80037bc <TIM_OC1_SetConfig+0x80>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a28      	ldr	r2, [pc, #160]	; (8003858 <TIM_OC1_SetConfig+0x11c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d10c      	bne.n	80037d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f023 0308 	bic.w	r3, r3, #8
 80037c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f023 0304 	bic.w	r3, r3, #4
 80037d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a1b      	ldr	r2, [pc, #108]	; (8003848 <TIM_OC1_SetConfig+0x10c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00f      	beq.n	80037fe <TIM_OC1_SetConfig+0xc2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a1a      	ldr	r2, [pc, #104]	; (800384c <TIM_OC1_SetConfig+0x110>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00b      	beq.n	80037fe <TIM_OC1_SetConfig+0xc2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a19      	ldr	r2, [pc, #100]	; (8003850 <TIM_OC1_SetConfig+0x114>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d007      	beq.n	80037fe <TIM_OC1_SetConfig+0xc2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a18      	ldr	r2, [pc, #96]	; (8003854 <TIM_OC1_SetConfig+0x118>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d003      	beq.n	80037fe <TIM_OC1_SetConfig+0xc2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a17      	ldr	r2, [pc, #92]	; (8003858 <TIM_OC1_SetConfig+0x11c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d111      	bne.n	8003822 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800380c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4313      	orrs	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	621a      	str	r2, [r3, #32]
}
 800383c:	bf00      	nop
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	40012c00 	.word	0x40012c00
 800384c:	40013400 	.word	0x40013400
 8003850:	40014000 	.word	0x40014000
 8003854:	40014400 	.word	0x40014400
 8003858:	40014800 	.word	0x40014800

0800385c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	f023 0210 	bic.w	r2, r3, #16
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800388a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800388e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	021b      	lsls	r3, r3, #8
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f023 0320 	bic.w	r3, r3, #32
 80038aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a28      	ldr	r2, [pc, #160]	; (800395c <TIM_OC2_SetConfig+0x100>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d003      	beq.n	80038c8 <TIM_OC2_SetConfig+0x6c>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a27      	ldr	r2, [pc, #156]	; (8003960 <TIM_OC2_SetConfig+0x104>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d10d      	bne.n	80038e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a1d      	ldr	r2, [pc, #116]	; (800395c <TIM_OC2_SetConfig+0x100>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00f      	beq.n	800390c <TIM_OC2_SetConfig+0xb0>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a1c      	ldr	r2, [pc, #112]	; (8003960 <TIM_OC2_SetConfig+0x104>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d00b      	beq.n	800390c <TIM_OC2_SetConfig+0xb0>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <TIM_OC2_SetConfig+0x108>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d007      	beq.n	800390c <TIM_OC2_SetConfig+0xb0>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a1a      	ldr	r2, [pc, #104]	; (8003968 <TIM_OC2_SetConfig+0x10c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d003      	beq.n	800390c <TIM_OC2_SetConfig+0xb0>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a19      	ldr	r2, [pc, #100]	; (800396c <TIM_OC2_SetConfig+0x110>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d113      	bne.n	8003934 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003912:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800391a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	621a      	str	r2, [r3, #32]
}
 800394e:	bf00      	nop
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40012c00 	.word	0x40012c00
 8003960:	40013400 	.word	0x40013400
 8003964:	40014000 	.word	0x40014000
 8003968:	40014400 	.word	0x40014400
 800396c:	40014800 	.word	0x40014800

08003970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0303 	bic.w	r3, r3, #3
 80039aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a27      	ldr	r2, [pc, #156]	; (8003a6c <TIM_OC3_SetConfig+0xfc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d003      	beq.n	80039da <TIM_OC3_SetConfig+0x6a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a26      	ldr	r2, [pc, #152]	; (8003a70 <TIM_OC3_SetConfig+0x100>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d10d      	bne.n	80039f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	021b      	lsls	r3, r3, #8
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a1c      	ldr	r2, [pc, #112]	; (8003a6c <TIM_OC3_SetConfig+0xfc>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00f      	beq.n	8003a1e <TIM_OC3_SetConfig+0xae>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a1b      	ldr	r2, [pc, #108]	; (8003a70 <TIM_OC3_SetConfig+0x100>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00b      	beq.n	8003a1e <TIM_OC3_SetConfig+0xae>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a1a      	ldr	r2, [pc, #104]	; (8003a74 <TIM_OC3_SetConfig+0x104>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d007      	beq.n	8003a1e <TIM_OC3_SetConfig+0xae>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a19      	ldr	r2, [pc, #100]	; (8003a78 <TIM_OC3_SetConfig+0x108>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d003      	beq.n	8003a1e <TIM_OC3_SetConfig+0xae>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a18      	ldr	r2, [pc, #96]	; (8003a7c <TIM_OC3_SetConfig+0x10c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d113      	bne.n	8003a46 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	621a      	str	r2, [r3, #32]
}
 8003a60:	bf00      	nop
 8003a62:	371c      	adds	r7, #28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	40012c00 	.word	0x40012c00
 8003a70:	40013400 	.word	0x40013400
 8003a74:	40014000 	.word	0x40014000
 8003a78:	40014400 	.word	0x40014400
 8003a7c:	40014800 	.word	0x40014800

08003a80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	021b      	lsls	r3, r3, #8
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	031b      	lsls	r3, r3, #12
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a18      	ldr	r2, [pc, #96]	; (8003b40 <TIM_OC4_SetConfig+0xc0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d00f      	beq.n	8003b04 <TIM_OC4_SetConfig+0x84>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a17      	ldr	r2, [pc, #92]	; (8003b44 <TIM_OC4_SetConfig+0xc4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00b      	beq.n	8003b04 <TIM_OC4_SetConfig+0x84>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a16      	ldr	r2, [pc, #88]	; (8003b48 <TIM_OC4_SetConfig+0xc8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d007      	beq.n	8003b04 <TIM_OC4_SetConfig+0x84>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a15      	ldr	r2, [pc, #84]	; (8003b4c <TIM_OC4_SetConfig+0xcc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d003      	beq.n	8003b04 <TIM_OC4_SetConfig+0x84>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a14      	ldr	r2, [pc, #80]	; (8003b50 <TIM_OC4_SetConfig+0xd0>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d109      	bne.n	8003b18 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	019b      	lsls	r3, r3, #6
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	621a      	str	r2, [r3, #32]
}
 8003b32:	bf00      	nop
 8003b34:	371c      	adds	r7, #28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	40013400 	.word	0x40013400
 8003b48:	40014000 	.word	0x40014000
 8003b4c:	40014400 	.word	0x40014400
 8003b50:	40014800 	.word	0x40014800

08003b54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	041b      	lsls	r3, r3, #16
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a17      	ldr	r2, [pc, #92]	; (8003c08 <TIM_OC5_SetConfig+0xb4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00f      	beq.n	8003bce <TIM_OC5_SetConfig+0x7a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a16      	ldr	r2, [pc, #88]	; (8003c0c <TIM_OC5_SetConfig+0xb8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00b      	beq.n	8003bce <TIM_OC5_SetConfig+0x7a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a15      	ldr	r2, [pc, #84]	; (8003c10 <TIM_OC5_SetConfig+0xbc>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d007      	beq.n	8003bce <TIM_OC5_SetConfig+0x7a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a14      	ldr	r2, [pc, #80]	; (8003c14 <TIM_OC5_SetConfig+0xc0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d003      	beq.n	8003bce <TIM_OC5_SetConfig+0x7a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a13      	ldr	r2, [pc, #76]	; (8003c18 <TIM_OC5_SetConfig+0xc4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d109      	bne.n	8003be2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	621a      	str	r2, [r3, #32]
}
 8003bfc:	bf00      	nop
 8003bfe:	371c      	adds	r7, #28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	40013400 	.word	0x40013400
 8003c10:	40014000 	.word	0x40014000
 8003c14:	40014400 	.word	0x40014400
 8003c18:	40014800 	.word	0x40014800

08003c1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	051b      	lsls	r3, r3, #20
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <TIM_OC6_SetConfig+0xb8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00f      	beq.n	8003c98 <TIM_OC6_SetConfig+0x7c>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a17      	ldr	r2, [pc, #92]	; (8003cd8 <TIM_OC6_SetConfig+0xbc>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00b      	beq.n	8003c98 <TIM_OC6_SetConfig+0x7c>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a16      	ldr	r2, [pc, #88]	; (8003cdc <TIM_OC6_SetConfig+0xc0>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d007      	beq.n	8003c98 <TIM_OC6_SetConfig+0x7c>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a15      	ldr	r2, [pc, #84]	; (8003ce0 <TIM_OC6_SetConfig+0xc4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <TIM_OC6_SetConfig+0x7c>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a14      	ldr	r2, [pc, #80]	; (8003ce4 <TIM_OC6_SetConfig+0xc8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d109      	bne.n	8003cac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	029b      	lsls	r3, r3, #10
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	621a      	str	r2, [r3, #32]
}
 8003cc6:	bf00      	nop
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	40013400 	.word	0x40013400
 8003cdc:	40014000 	.word	0x40014000
 8003ce0:	40014400 	.word	0x40014400
 8003ce4:	40014800 	.word	0x40014800

08003ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f003 031f 	and.w	r3, r3, #31
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a1a      	ldr	r2, [r3, #32]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	401a      	ands	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a1a      	ldr	r2, [r3, #32]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f003 031f 	and.w	r3, r3, #31
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d20:	431a      	orrs	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	621a      	str	r2, [r3, #32]
}
 8003d26:	bf00      	nop
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
	...

08003d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e068      	b.n	8003e1e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2e      	ldr	r2, [pc, #184]	; (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d004      	beq.n	8003d80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a2d      	ldr	r2, [pc, #180]	; (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d108      	bne.n	8003d92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a1e      	ldr	r2, [pc, #120]	; (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01d      	beq.n	8003df2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dbe:	d018      	beq.n	8003df2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1b      	ldr	r2, [pc, #108]	; (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a1a      	ldr	r2, [pc, #104]	; (8003e38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00e      	beq.n	8003df2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a18      	ldr	r2, [pc, #96]	; (8003e3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d009      	beq.n	8003df2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a13      	ldr	r2, [pc, #76]	; (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d004      	beq.n	8003df2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a14      	ldr	r2, [pc, #80]	; (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d10c      	bne.n	8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003df8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40012c00 	.word	0x40012c00
 8003e30:	40013400 	.word	0x40013400
 8003e34:	40000400 	.word	0x40000400
 8003e38:	40000800 	.word	0x40000800
 8003e3c:	40000c00 	.word	0x40000c00
 8003e40:	40014000 	.word	0x40014000

08003e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e040      	b.n	8003f14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fc fdde 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2224      	movs	r2, #36	; 0x24
 8003eac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0201 	bic.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fb2e 	bl	8004520 <UART_SetConfig>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e022      	b.n	8003f14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fdda 	bl	8004a90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003efa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 fe61 	bl	8004bd4 <UART_CheckIdleState>
 8003f12:	4603      	mov	r3, r0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b0ba      	sub	sp, #232	; 0xe8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003f46:	f640 030f 	movw	r3, #2063	; 0x80f
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003f50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d115      	bne.n	8003f84 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00f      	beq.n	8003f84 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d009      	beq.n	8003f84 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 82a6 	beq.w	80044c6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	4798      	blx	r3
      }
      return;
 8003f82:	e2a0      	b.n	80044c6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003f84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 8117 	beq.w	80041bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003f9e:	4b85      	ldr	r3, [pc, #532]	; (80041b4 <HAL_UART_IRQHandler+0x298>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 810a 	beq.w	80041bc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d011      	beq.n	8003fd8 <HAL_UART_IRQHandler+0xbc>
 8003fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00b      	beq.n	8003fd8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fce:	f043 0201 	orr.w	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d011      	beq.n	8004008 <HAL_UART_IRQHandler+0xec>
 8003fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00b      	beq.n	8004008 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ffe:	f043 0204 	orr.w	r2, r3, #4
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d011      	beq.n	8004038 <HAL_UART_IRQHandler+0x11c>
 8004014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00b      	beq.n	8004038 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2204      	movs	r2, #4
 8004026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800402e:	f043 0202 	orr.w	r2, r3, #2
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d017      	beq.n	8004074 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b00      	cmp	r3, #0
 800404e:	d105      	bne.n	800405c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004054:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00b      	beq.n	8004074 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2208      	movs	r2, #8
 8004062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800406a:	f043 0208 	orr.w	r2, r3, #8
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800407c:	2b00      	cmp	r3, #0
 800407e:	d012      	beq.n	80040a6 <HAL_UART_IRQHandler+0x18a>
 8004080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004084:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00c      	beq.n	80040a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004094:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 820c 	beq.w	80044ca <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80040b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00d      	beq.n	80040da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ee:	2b40      	cmp	r3, #64	; 0x40
 80040f0:	d005      	beq.n	80040fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d04f      	beq.n	800419e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fe75 	bl	8004dee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410e:	2b40      	cmp	r3, #64	; 0x40
 8004110:	d141      	bne.n	8004196 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3308      	adds	r3, #8
 8004118:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004120:	e853 3f00 	ldrex	r3, [r3]
 8004124:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004128:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800412c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004130:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3308      	adds	r3, #8
 800413a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800413e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004146:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800414a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800414e:	e841 2300 	strex	r3, r2, [r1]
 8004152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1d9      	bne.n	8004112 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004162:	2b00      	cmp	r3, #0
 8004164:	d013      	beq.n	800418e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	4a13      	ldr	r2, [pc, #76]	; (80041b8 <HAL_UART_IRQHandler+0x29c>)
 800416c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	4618      	mov	r0, r3
 8004174:	f7fc ff2b 	bl	8000fce <HAL_DMA_Abort_IT>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d017      	beq.n	80041ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004188:	4610      	mov	r0, r2
 800418a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800418c:	e00f      	b.n	80041ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f9b0 	bl	80044f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004194:	e00b      	b.n	80041ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f9ac 	bl	80044f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800419c:	e007      	b.n	80041ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f9a8 	bl	80044f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80041ac:	e18d      	b.n	80044ca <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ae:	bf00      	nop
    return;
 80041b0:	e18b      	b.n	80044ca <HAL_UART_IRQHandler+0x5ae>
 80041b2:	bf00      	nop
 80041b4:	04000120 	.word	0x04000120
 80041b8:	08004eb5 	.word	0x08004eb5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	f040 8146 	bne.w	8004452 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 813f 	beq.w	8004452 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 8138 	beq.w	8004452 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2210      	movs	r2, #16
 80041e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f4:	2b40      	cmp	r3, #64	; 0x40
 80041f6:	f040 80b4 	bne.w	8004362 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004206:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 815f 	beq.w	80044ce <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800421a:	429a      	cmp	r2, r3
 800421c:	f080 8157 	bcs.w	80044ce <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004226:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b00      	cmp	r3, #0
 8004238:	f040 8085 	bne.w	8004346 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004250:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004258:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004266:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800426a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004272:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800427e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1da      	bne.n	800423c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3308      	adds	r3, #8
 800428c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004290:	e853 3f00 	ldrex	r3, [r3]
 8004294:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004298:	f023 0301 	bic.w	r3, r3, #1
 800429c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3308      	adds	r3, #8
 80042a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80042ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80042b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80042bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e1      	bne.n	8004286 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3308      	adds	r3, #8
 80042c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80042d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3308      	adds	r3, #8
 80042e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e3      	bne.n	80042c2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800430e:	e853 3f00 	ldrex	r3, [r3]
 8004312:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004316:	f023 0310 	bic.w	r3, r3, #16
 800431a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004328:	65bb      	str	r3, [r7, #88]	; 0x58
 800432a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800432e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e4      	bne.n	8004306 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004340:	4618      	mov	r0, r3
 8004342:	f7fc fe06 	bl	8000f52 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004352:	b29b      	uxth	r3, r3
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	b29b      	uxth	r3, r3
 8004358:	4619      	mov	r1, r3
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f8d4 	bl	8004508 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004360:	e0b5      	b.n	80044ce <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800436e:	b29b      	uxth	r3, r3
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 80a7 	beq.w	80044d2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004384:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80a2 	beq.w	80044d2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800439c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043b0:	647b      	str	r3, [r7, #68]	; 0x44
 80043b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e4      	bne.n	800438e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3308      	adds	r3, #8
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	623b      	str	r3, [r7, #32]
   return(result);
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	f023 0301 	bic.w	r3, r3, #1
 80043da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3308      	adds	r3, #8
 80043e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043e8:	633a      	str	r2, [r7, #48]	; 0x30
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f0:	e841 2300 	strex	r3, r2, [r1]
 80043f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e3      	bne.n	80043c4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	60fb      	str	r3, [r7, #12]
   return(result);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0310 	bic.w	r3, r3, #16
 8004422:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	69b9      	ldr	r1, [r7, #24]
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	617b      	str	r3, [r7, #20]
   return(result);
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e4      	bne.n	800440e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004444:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004448:	4619      	mov	r1, r3
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f85c 	bl	8004508 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004450:	e03f      	b.n	80044d2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00e      	beq.n	800447c <HAL_UART_IRQHandler+0x560>
 800445e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d008      	beq.n	800447c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004472:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fd5d 	bl	8004f34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800447a:	e02d      	b.n	80044d8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800447c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00e      	beq.n	80044a6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800448c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01c      	beq.n	80044d6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
    }
    return;
 80044a4:	e017      	b.n	80044d6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d012      	beq.n	80044d8 <HAL_UART_IRQHandler+0x5bc>
 80044b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00c      	beq.n	80044d8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fd0e 	bl	8004ee0 <UART_EndTransmit_IT>
    return;
 80044c4:	e008      	b.n	80044d8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80044c6:	bf00      	nop
 80044c8:	e006      	b.n	80044d8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80044ca:	bf00      	nop
 80044cc:	e004      	b.n	80044d8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80044ce:	bf00      	nop
 80044d0:	e002      	b.n	80044d8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80044d2:	bf00      	nop
 80044d4:	e000      	b.n	80044d8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80044d6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80044d8:	37e8      	adds	r7, #232	; 0xe8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop

080044e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004524:	b08a      	sub	sp, #40	; 0x28
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	431a      	orrs	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	431a      	orrs	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	4313      	orrs	r3, r2
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4ba4      	ldr	r3, [pc, #656]	; (80047e0 <UART_SetConfig+0x2c0>)
 8004550:	4013      	ands	r3, r2
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	6812      	ldr	r2, [r2, #0]
 8004556:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004558:	430b      	orrs	r3, r1
 800455a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a99      	ldr	r2, [pc, #612]	; (80047e4 <UART_SetConfig+0x2c4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d004      	beq.n	800458c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004588:	4313      	orrs	r3, r2
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800459c:	430a      	orrs	r2, r1
 800459e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a90      	ldr	r2, [pc, #576]	; (80047e8 <UART_SetConfig+0x2c8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d126      	bne.n	80045f8 <UART_SetConfig+0xd8>
 80045aa:	4b90      	ldr	r3, [pc, #576]	; (80047ec <UART_SetConfig+0x2cc>)
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d81b      	bhi.n	80045f0 <UART_SetConfig+0xd0>
 80045b8:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <UART_SetConfig+0xa0>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045d1 	.word	0x080045d1
 80045c4:	080045e1 	.word	0x080045e1
 80045c8:	080045d9 	.word	0x080045d9
 80045cc:	080045e9 	.word	0x080045e9
 80045d0:	2301      	movs	r3, #1
 80045d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045d6:	e116      	b.n	8004806 <UART_SetConfig+0x2e6>
 80045d8:	2302      	movs	r3, #2
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045de:	e112      	b.n	8004806 <UART_SetConfig+0x2e6>
 80045e0:	2304      	movs	r3, #4
 80045e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e6:	e10e      	b.n	8004806 <UART_SetConfig+0x2e6>
 80045e8:	2308      	movs	r3, #8
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ee:	e10a      	b.n	8004806 <UART_SetConfig+0x2e6>
 80045f0:	2310      	movs	r3, #16
 80045f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f6:	e106      	b.n	8004806 <UART_SetConfig+0x2e6>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a7c      	ldr	r2, [pc, #496]	; (80047f0 <UART_SetConfig+0x2d0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d138      	bne.n	8004674 <UART_SetConfig+0x154>
 8004602:	4b7a      	ldr	r3, [pc, #488]	; (80047ec <UART_SetConfig+0x2cc>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f003 030c 	and.w	r3, r3, #12
 800460c:	2b0c      	cmp	r3, #12
 800460e:	d82d      	bhi.n	800466c <UART_SetConfig+0x14c>
 8004610:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <UART_SetConfig+0xf8>)
 8004612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004616:	bf00      	nop
 8004618:	0800464d 	.word	0x0800464d
 800461c:	0800466d 	.word	0x0800466d
 8004620:	0800466d 	.word	0x0800466d
 8004624:	0800466d 	.word	0x0800466d
 8004628:	0800465d 	.word	0x0800465d
 800462c:	0800466d 	.word	0x0800466d
 8004630:	0800466d 	.word	0x0800466d
 8004634:	0800466d 	.word	0x0800466d
 8004638:	08004655 	.word	0x08004655
 800463c:	0800466d 	.word	0x0800466d
 8004640:	0800466d 	.word	0x0800466d
 8004644:	0800466d 	.word	0x0800466d
 8004648:	08004665 	.word	0x08004665
 800464c:	2300      	movs	r3, #0
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004652:	e0d8      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004654:	2302      	movs	r3, #2
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465a:	e0d4      	b.n	8004806 <UART_SetConfig+0x2e6>
 800465c:	2304      	movs	r3, #4
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004662:	e0d0      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004664:	2308      	movs	r3, #8
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466a:	e0cc      	b.n	8004806 <UART_SetConfig+0x2e6>
 800466c:	2310      	movs	r3, #16
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004672:	e0c8      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a5e      	ldr	r2, [pc, #376]	; (80047f4 <UART_SetConfig+0x2d4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d125      	bne.n	80046ca <UART_SetConfig+0x1aa>
 800467e:	4b5b      	ldr	r3, [pc, #364]	; (80047ec <UART_SetConfig+0x2cc>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004688:	2b30      	cmp	r3, #48	; 0x30
 800468a:	d016      	beq.n	80046ba <UART_SetConfig+0x19a>
 800468c:	2b30      	cmp	r3, #48	; 0x30
 800468e:	d818      	bhi.n	80046c2 <UART_SetConfig+0x1a2>
 8004690:	2b20      	cmp	r3, #32
 8004692:	d00a      	beq.n	80046aa <UART_SetConfig+0x18a>
 8004694:	2b20      	cmp	r3, #32
 8004696:	d814      	bhi.n	80046c2 <UART_SetConfig+0x1a2>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <UART_SetConfig+0x182>
 800469c:	2b10      	cmp	r3, #16
 800469e:	d008      	beq.n	80046b2 <UART_SetConfig+0x192>
 80046a0:	e00f      	b.n	80046c2 <UART_SetConfig+0x1a2>
 80046a2:	2300      	movs	r3, #0
 80046a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a8:	e0ad      	b.n	8004806 <UART_SetConfig+0x2e6>
 80046aa:	2302      	movs	r3, #2
 80046ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b0:	e0a9      	b.n	8004806 <UART_SetConfig+0x2e6>
 80046b2:	2304      	movs	r3, #4
 80046b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b8:	e0a5      	b.n	8004806 <UART_SetConfig+0x2e6>
 80046ba:	2308      	movs	r3, #8
 80046bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c0:	e0a1      	b.n	8004806 <UART_SetConfig+0x2e6>
 80046c2:	2310      	movs	r3, #16
 80046c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c8:	e09d      	b.n	8004806 <UART_SetConfig+0x2e6>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a4a      	ldr	r2, [pc, #296]	; (80047f8 <UART_SetConfig+0x2d8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d125      	bne.n	8004720 <UART_SetConfig+0x200>
 80046d4:	4b45      	ldr	r3, [pc, #276]	; (80047ec <UART_SetConfig+0x2cc>)
 80046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046de:	2bc0      	cmp	r3, #192	; 0xc0
 80046e0:	d016      	beq.n	8004710 <UART_SetConfig+0x1f0>
 80046e2:	2bc0      	cmp	r3, #192	; 0xc0
 80046e4:	d818      	bhi.n	8004718 <UART_SetConfig+0x1f8>
 80046e6:	2b80      	cmp	r3, #128	; 0x80
 80046e8:	d00a      	beq.n	8004700 <UART_SetConfig+0x1e0>
 80046ea:	2b80      	cmp	r3, #128	; 0x80
 80046ec:	d814      	bhi.n	8004718 <UART_SetConfig+0x1f8>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <UART_SetConfig+0x1d8>
 80046f2:	2b40      	cmp	r3, #64	; 0x40
 80046f4:	d008      	beq.n	8004708 <UART_SetConfig+0x1e8>
 80046f6:	e00f      	b.n	8004718 <UART_SetConfig+0x1f8>
 80046f8:	2300      	movs	r3, #0
 80046fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fe:	e082      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004700:	2302      	movs	r3, #2
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004706:	e07e      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004708:	2304      	movs	r3, #4
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470e:	e07a      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004710:	2308      	movs	r3, #8
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004716:	e076      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004718:	2310      	movs	r3, #16
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471e:	e072      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a35      	ldr	r2, [pc, #212]	; (80047fc <UART_SetConfig+0x2dc>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d12a      	bne.n	8004780 <UART_SetConfig+0x260>
 800472a:	4b30      	ldr	r3, [pc, #192]	; (80047ec <UART_SetConfig+0x2cc>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004734:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004738:	d01a      	beq.n	8004770 <UART_SetConfig+0x250>
 800473a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800473e:	d81b      	bhi.n	8004778 <UART_SetConfig+0x258>
 8004740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004744:	d00c      	beq.n	8004760 <UART_SetConfig+0x240>
 8004746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800474a:	d815      	bhi.n	8004778 <UART_SetConfig+0x258>
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <UART_SetConfig+0x238>
 8004750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004754:	d008      	beq.n	8004768 <UART_SetConfig+0x248>
 8004756:	e00f      	b.n	8004778 <UART_SetConfig+0x258>
 8004758:	2300      	movs	r3, #0
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475e:	e052      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004760:	2302      	movs	r3, #2
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004766:	e04e      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004768:	2304      	movs	r3, #4
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800476e:	e04a      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004770:	2308      	movs	r3, #8
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004776:	e046      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004778:	2310      	movs	r3, #16
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477e:	e042      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a17      	ldr	r2, [pc, #92]	; (80047e4 <UART_SetConfig+0x2c4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d13a      	bne.n	8004800 <UART_SetConfig+0x2e0>
 800478a:	4b18      	ldr	r3, [pc, #96]	; (80047ec <UART_SetConfig+0x2cc>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004790:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004794:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004798:	d01a      	beq.n	80047d0 <UART_SetConfig+0x2b0>
 800479a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800479e:	d81b      	bhi.n	80047d8 <UART_SetConfig+0x2b8>
 80047a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a4:	d00c      	beq.n	80047c0 <UART_SetConfig+0x2a0>
 80047a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047aa:	d815      	bhi.n	80047d8 <UART_SetConfig+0x2b8>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <UART_SetConfig+0x298>
 80047b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b4:	d008      	beq.n	80047c8 <UART_SetConfig+0x2a8>
 80047b6:	e00f      	b.n	80047d8 <UART_SetConfig+0x2b8>
 80047b8:	2300      	movs	r3, #0
 80047ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047be:	e022      	b.n	8004806 <UART_SetConfig+0x2e6>
 80047c0:	2302      	movs	r3, #2
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047c6:	e01e      	b.n	8004806 <UART_SetConfig+0x2e6>
 80047c8:	2304      	movs	r3, #4
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ce:	e01a      	b.n	8004806 <UART_SetConfig+0x2e6>
 80047d0:	2308      	movs	r3, #8
 80047d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d6:	e016      	b.n	8004806 <UART_SetConfig+0x2e6>
 80047d8:	2310      	movs	r3, #16
 80047da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047de:	e012      	b.n	8004806 <UART_SetConfig+0x2e6>
 80047e0:	efff69f3 	.word	0xefff69f3
 80047e4:	40008000 	.word	0x40008000
 80047e8:	40013800 	.word	0x40013800
 80047ec:	40021000 	.word	0x40021000
 80047f0:	40004400 	.word	0x40004400
 80047f4:	40004800 	.word	0x40004800
 80047f8:	40004c00 	.word	0x40004c00
 80047fc:	40005000 	.word	0x40005000
 8004800:	2310      	movs	r3, #16
 8004802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a9f      	ldr	r2, [pc, #636]	; (8004a88 <UART_SetConfig+0x568>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d17a      	bne.n	8004906 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004810:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004814:	2b08      	cmp	r3, #8
 8004816:	d824      	bhi.n	8004862 <UART_SetConfig+0x342>
 8004818:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <UART_SetConfig+0x300>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004845 	.word	0x08004845
 8004824:	08004863 	.word	0x08004863
 8004828:	0800484d 	.word	0x0800484d
 800482c:	08004863 	.word	0x08004863
 8004830:	08004853 	.word	0x08004853
 8004834:	08004863 	.word	0x08004863
 8004838:	08004863 	.word	0x08004863
 800483c:	08004863 	.word	0x08004863
 8004840:	0800485b 	.word	0x0800485b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004844:	f7fd fbb6 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8004848:	61f8      	str	r0, [r7, #28]
        break;
 800484a:	e010      	b.n	800486e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800484c:	4b8f      	ldr	r3, [pc, #572]	; (8004a8c <UART_SetConfig+0x56c>)
 800484e:	61fb      	str	r3, [r7, #28]
        break;
 8004850:	e00d      	b.n	800486e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004852:	f7fd fb17 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8004856:	61f8      	str	r0, [r7, #28]
        break;
 8004858:	e009      	b.n	800486e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800485a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800485e:	61fb      	str	r3, [r7, #28]
        break;
 8004860:	e005      	b.n	800486e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800486c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80fb 	beq.w	8004a6c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	4613      	mov	r3, r2
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	4413      	add	r3, r2
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	429a      	cmp	r2, r3
 8004884:	d305      	bcc.n	8004892 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	429a      	cmp	r2, r3
 8004890:	d903      	bls.n	800489a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004898:	e0e8      	b.n	8004a6c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	2200      	movs	r2, #0
 800489e:	461c      	mov	r4, r3
 80048a0:	4615      	mov	r5, r2
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	022b      	lsls	r3, r5, #8
 80048ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80048b0:	0222      	lsls	r2, r4, #8
 80048b2:	68f9      	ldr	r1, [r7, #12]
 80048b4:	6849      	ldr	r1, [r1, #4]
 80048b6:	0849      	lsrs	r1, r1, #1
 80048b8:	2000      	movs	r0, #0
 80048ba:	4688      	mov	r8, r1
 80048bc:	4681      	mov	r9, r0
 80048be:	eb12 0a08 	adds.w	sl, r2, r8
 80048c2:	eb43 0b09 	adc.w	fp, r3, r9
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	603b      	str	r3, [r7, #0]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048d4:	4650      	mov	r0, sl
 80048d6:	4659      	mov	r1, fp
 80048d8:	f7fb fc76 	bl	80001c8 <__aeabi_uldivmod>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4613      	mov	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ea:	d308      	bcc.n	80048fe <UART_SetConfig+0x3de>
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048f2:	d204      	bcs.n	80048fe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	60da      	str	r2, [r3, #12]
 80048fc:	e0b6      	b.n	8004a6c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004904:	e0b2      	b.n	8004a6c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800490e:	d15e      	bne.n	80049ce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004910:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004914:	2b08      	cmp	r3, #8
 8004916:	d828      	bhi.n	800496a <UART_SetConfig+0x44a>
 8004918:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <UART_SetConfig+0x400>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004945 	.word	0x08004945
 8004924:	0800494d 	.word	0x0800494d
 8004928:	08004955 	.word	0x08004955
 800492c:	0800496b 	.word	0x0800496b
 8004930:	0800495b 	.word	0x0800495b
 8004934:	0800496b 	.word	0x0800496b
 8004938:	0800496b 	.word	0x0800496b
 800493c:	0800496b 	.word	0x0800496b
 8004940:	08004963 	.word	0x08004963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004944:	f7fd fb36 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8004948:	61f8      	str	r0, [r7, #28]
        break;
 800494a:	e014      	b.n	8004976 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800494c:	f7fd fb48 	bl	8001fe0 <HAL_RCC_GetPCLK2Freq>
 8004950:	61f8      	str	r0, [r7, #28]
        break;
 8004952:	e010      	b.n	8004976 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004954:	4b4d      	ldr	r3, [pc, #308]	; (8004a8c <UART_SetConfig+0x56c>)
 8004956:	61fb      	str	r3, [r7, #28]
        break;
 8004958:	e00d      	b.n	8004976 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800495a:	f7fd fa93 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 800495e:	61f8      	str	r0, [r7, #28]
        break;
 8004960:	e009      	b.n	8004976 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004966:	61fb      	str	r3, [r7, #28]
        break;
 8004968:	e005      	b.n	8004976 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004974:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d077      	beq.n	8004a6c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	005a      	lsls	r2, r3, #1
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	085b      	lsrs	r3, r3, #1
 8004986:	441a      	add	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004990:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b0f      	cmp	r3, #15
 8004996:	d916      	bls.n	80049c6 <UART_SetConfig+0x4a6>
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499e:	d212      	bcs.n	80049c6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f023 030f 	bic.w	r3, r3, #15
 80049a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	8afb      	ldrh	r3, [r7, #22]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	8afa      	ldrh	r2, [r7, #22]
 80049c2:	60da      	str	r2, [r3, #12]
 80049c4:	e052      	b.n	8004a6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049cc:	e04e      	b.n	8004a6c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d827      	bhi.n	8004a26 <UART_SetConfig+0x506>
 80049d6:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <UART_SetConfig+0x4bc>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	08004a01 	.word	0x08004a01
 80049e0:	08004a09 	.word	0x08004a09
 80049e4:	08004a11 	.word	0x08004a11
 80049e8:	08004a27 	.word	0x08004a27
 80049ec:	08004a17 	.word	0x08004a17
 80049f0:	08004a27 	.word	0x08004a27
 80049f4:	08004a27 	.word	0x08004a27
 80049f8:	08004a27 	.word	0x08004a27
 80049fc:	08004a1f 	.word	0x08004a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a00:	f7fd fad8 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8004a04:	61f8      	str	r0, [r7, #28]
        break;
 8004a06:	e014      	b.n	8004a32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a08:	f7fd faea 	bl	8001fe0 <HAL_RCC_GetPCLK2Freq>
 8004a0c:	61f8      	str	r0, [r7, #28]
        break;
 8004a0e:	e010      	b.n	8004a32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a10:	4b1e      	ldr	r3, [pc, #120]	; (8004a8c <UART_SetConfig+0x56c>)
 8004a12:	61fb      	str	r3, [r7, #28]
        break;
 8004a14:	e00d      	b.n	8004a32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a16:	f7fd fa35 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8004a1a:	61f8      	str	r0, [r7, #28]
        break;
 8004a1c:	e009      	b.n	8004a32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a22:	61fb      	str	r3, [r7, #28]
        break;
 8004a24:	e005      	b.n	8004a32 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a30:	bf00      	nop
    }

    if (pclk != 0U)
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d019      	beq.n	8004a6c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	085a      	lsrs	r2, r3, #1
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	441a      	add	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b0f      	cmp	r3, #15
 8004a50:	d909      	bls.n	8004a66 <UART_SetConfig+0x546>
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a58:	d205      	bcs.n	8004a66 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60da      	str	r2, [r3, #12]
 8004a64:	e002      	b.n	8004a6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3728      	adds	r7, #40	; 0x28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a86:	bf00      	nop
 8004a88:	40008000 	.word	0x40008000
 8004a8c:	00f42400 	.word	0x00f42400

08004a90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01a      	beq.n	8004ba6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b8e:	d10a      	bne.n	8004ba6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	605a      	str	r2, [r3, #4]
  }
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004be4:	f7fc f898 	bl	8000d18 <HAL_GetTick>
 8004be8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d10e      	bne.n	8004c16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f82d 	bl	8004c66 <UART_WaitOnFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e023      	b.n	8004c5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d10e      	bne.n	8004c42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f817 	bl	8004c66 <UART_WaitOnFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e00d      	b.n	8004c5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b09c      	sub	sp, #112	; 0x70
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	603b      	str	r3, [r7, #0]
 8004c72:	4613      	mov	r3, r2
 8004c74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c76:	e0a5      	b.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7e:	f000 80a1 	beq.w	8004dc4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c82:	f7fc f849 	bl	8000d18 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d302      	bcc.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d13e      	bne.n	8004d16 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ca0:	e853 3f00 	ldrex	r3, [r3]
 8004ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cac:	667b      	str	r3, [r7, #100]	; 0x64
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cb8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004cbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e6      	bne.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3308      	adds	r3, #8
 8004cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd4:	e853 3f00 	ldrex	r3, [r3]
 8004cd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cdc:	f023 0301 	bic.w	r3, r3, #1
 8004ce0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3308      	adds	r3, #8
 8004ce8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cea:	64ba      	str	r2, [r7, #72]	; 0x48
 8004cec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cf2:	e841 2300 	strex	r3, r2, [r1]
 8004cf6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1e5      	bne.n	8004cca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2220      	movs	r2, #32
 8004d02:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e067      	b.n	8004de6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d04f      	beq.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d32:	d147      	bne.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d3c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d64:	e841 2300 	strex	r3, r2, [r1]
 8004d68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e6      	bne.n	8004d3e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3308      	adds	r3, #8
 8004d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f023 0301 	bic.w	r3, r3, #1
 8004d86:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3308      	adds	r3, #8
 8004d8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d90:	623a      	str	r2, [r7, #32]
 8004d92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d94:	69f9      	ldr	r1, [r7, #28]
 8004d96:	6a3a      	ldr	r2, [r7, #32]
 8004d98:	e841 2300 	strex	r3, r2, [r1]
 8004d9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e5      	bne.n	8004d70 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2220      	movs	r2, #32
 8004da8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2220      	movs	r2, #32
 8004dae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e010      	b.n	8004de6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	69da      	ldr	r2, [r3, #28]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	bf0c      	ite	eq
 8004dd4:	2301      	moveq	r3, #1
 8004dd6:	2300      	movne	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	461a      	mov	r2, r3
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	f43f af4a 	beq.w	8004c78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3770      	adds	r7, #112	; 0x70
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b095      	sub	sp, #84	; 0x54
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfe:	e853 3f00 	ldrex	r3, [r3]
 8004e02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e14:	643b      	str	r3, [r7, #64]	; 0x40
 8004e16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e1c:	e841 2300 	strex	r3, r2, [r1]
 8004e20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e6      	bne.n	8004df6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3308      	adds	r3, #8
 8004e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f023 0301 	bic.w	r3, r3, #1
 8004e3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3308      	adds	r3, #8
 8004e46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e5      	bne.n	8004e28 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d118      	bne.n	8004e96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f023 0310 	bic.w	r3, r3, #16
 8004e78:	647b      	str	r3, [r7, #68]	; 0x44
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e82:	61bb      	str	r3, [r7, #24]
 8004e84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e86:	6979      	ldr	r1, [r7, #20]
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	e841 2300 	strex	r3, r2, [r1]
 8004e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1e6      	bne.n	8004e64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004ea8:	bf00      	nop
 8004eaa:	3754      	adds	r7, #84	; 0x54
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f7ff fb0e 	bl	80044f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ed8:	bf00      	nop
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	e853 3f00 	ldrex	r3, [r3]
 8004ef4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	61bb      	str	r3, [r7, #24]
 8004f08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	6979      	ldr	r1, [r7, #20]
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	e841 2300 	strex	r3, r2, [r1]
 8004f12:	613b      	str	r3, [r7, #16]
   return(result);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1e6      	bne.n	8004ee8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff fada 	bl	80044e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f2c:	bf00      	nop
 8004f2e:	3720      	adds	r7, #32
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <__libc_init_array>:
 8004f48:	b570      	push	{r4, r5, r6, lr}
 8004f4a:	4d0d      	ldr	r5, [pc, #52]	; (8004f80 <__libc_init_array+0x38>)
 8004f4c:	4c0d      	ldr	r4, [pc, #52]	; (8004f84 <__libc_init_array+0x3c>)
 8004f4e:	1b64      	subs	r4, r4, r5
 8004f50:	10a4      	asrs	r4, r4, #2
 8004f52:	2600      	movs	r6, #0
 8004f54:	42a6      	cmp	r6, r4
 8004f56:	d109      	bne.n	8004f6c <__libc_init_array+0x24>
 8004f58:	4d0b      	ldr	r5, [pc, #44]	; (8004f88 <__libc_init_array+0x40>)
 8004f5a:	4c0c      	ldr	r4, [pc, #48]	; (8004f8c <__libc_init_array+0x44>)
 8004f5c:	f000 f820 	bl	8004fa0 <_init>
 8004f60:	1b64      	subs	r4, r4, r5
 8004f62:	10a4      	asrs	r4, r4, #2
 8004f64:	2600      	movs	r6, #0
 8004f66:	42a6      	cmp	r6, r4
 8004f68:	d105      	bne.n	8004f76 <__libc_init_array+0x2e>
 8004f6a:	bd70      	pop	{r4, r5, r6, pc}
 8004f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f70:	4798      	blx	r3
 8004f72:	3601      	adds	r6, #1
 8004f74:	e7ee      	b.n	8004f54 <__libc_init_array+0xc>
 8004f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f7a:	4798      	blx	r3
 8004f7c:	3601      	adds	r6, #1
 8004f7e:	e7f2      	b.n	8004f66 <__libc_init_array+0x1e>
 8004f80:	08005008 	.word	0x08005008
 8004f84:	08005008 	.word	0x08005008
 8004f88:	08005008 	.word	0x08005008
 8004f8c:	0800500c 	.word	0x0800500c

08004f90 <memset>:
 8004f90:	4402      	add	r2, r0
 8004f92:	4603      	mov	r3, r0
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d100      	bne.n	8004f9a <memset+0xa>
 8004f98:	4770      	bx	lr
 8004f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f9e:	e7f9      	b.n	8004f94 <memset+0x4>

08004fa0 <_init>:
 8004fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa2:	bf00      	nop
 8004fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa6:	bc08      	pop	{r3}
 8004fa8:	469e      	mov	lr, r3
 8004faa:	4770      	bx	lr

08004fac <_fini>:
 8004fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fae:	bf00      	nop
 8004fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb2:	bc08      	pop	{r3}
 8004fb4:	469e      	mov	lr, r3
 8004fb6:	4770      	bx	lr
