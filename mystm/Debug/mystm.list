
mystm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000815c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  080082ec  080082ec  000182ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085c8  080085c8  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  080085c8  080085c8  000185c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085d0  080085d0  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085d0  080085d0  000185d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085d4  080085d4  000185d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  080085d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  20000130  08008708  00020130  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  08008708  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016590  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032b4  00000000  00000000  000366f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  000399a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  0003abd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029564  00000000  00000000  0003bca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f04  00000000  00000000  00065204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f63c5  00000000  00000000  0007c108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001724cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000565c  00000000  00000000  00172520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000130 	.word	0x20000130
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082d4 	.word	0x080082d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000134 	.word	0x20000134
 80001cc:	080082d4 	.word	0x080082d4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_uldivmod>:
 800086c:	b953      	cbnz	r3, 8000884 <__aeabi_uldivmod+0x18>
 800086e:	b94a      	cbnz	r2, 8000884 <__aeabi_uldivmod+0x18>
 8000870:	2900      	cmp	r1, #0
 8000872:	bf08      	it	eq
 8000874:	2800      	cmpeq	r0, #0
 8000876:	bf1c      	itt	ne
 8000878:	f04f 31ff 	movne.w	r1, #4294967295
 800087c:	f04f 30ff 	movne.w	r0, #4294967295
 8000880:	f000 b974 	b.w	8000b6c <__aeabi_idiv0>
 8000884:	f1ad 0c08 	sub.w	ip, sp, #8
 8000888:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800088c:	f000 f806 	bl	800089c <__udivmoddi4>
 8000890:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000898:	b004      	add	sp, #16
 800089a:	4770      	bx	lr

0800089c <__udivmoddi4>:
 800089c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a0:	9d08      	ldr	r5, [sp, #32]
 80008a2:	4604      	mov	r4, r0
 80008a4:	468e      	mov	lr, r1
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d14d      	bne.n	8000946 <__udivmoddi4+0xaa>
 80008aa:	428a      	cmp	r2, r1
 80008ac:	4694      	mov	ip, r2
 80008ae:	d969      	bls.n	8000984 <__udivmoddi4+0xe8>
 80008b0:	fab2 f282 	clz	r2, r2
 80008b4:	b152      	cbz	r2, 80008cc <__udivmoddi4+0x30>
 80008b6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ba:	f1c2 0120 	rsb	r1, r2, #32
 80008be:	fa20 f101 	lsr.w	r1, r0, r1
 80008c2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008c6:	ea41 0e03 	orr.w	lr, r1, r3
 80008ca:	4094      	lsls	r4, r2
 80008cc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008d0:	0c21      	lsrs	r1, r4, #16
 80008d2:	fbbe f6f8 	udiv	r6, lr, r8
 80008d6:	fa1f f78c 	uxth.w	r7, ip
 80008da:	fb08 e316 	mls	r3, r8, r6, lr
 80008de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008e2:	fb06 f107 	mul.w	r1, r6, r7
 80008e6:	4299      	cmp	r1, r3
 80008e8:	d90a      	bls.n	8000900 <__udivmoddi4+0x64>
 80008ea:	eb1c 0303 	adds.w	r3, ip, r3
 80008ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80008f2:	f080 811f 	bcs.w	8000b34 <__udivmoddi4+0x298>
 80008f6:	4299      	cmp	r1, r3
 80008f8:	f240 811c 	bls.w	8000b34 <__udivmoddi4+0x298>
 80008fc:	3e02      	subs	r6, #2
 80008fe:	4463      	add	r3, ip
 8000900:	1a5b      	subs	r3, r3, r1
 8000902:	b2a4      	uxth	r4, r4
 8000904:	fbb3 f0f8 	udiv	r0, r3, r8
 8000908:	fb08 3310 	mls	r3, r8, r0, r3
 800090c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000910:	fb00 f707 	mul.w	r7, r0, r7
 8000914:	42a7      	cmp	r7, r4
 8000916:	d90a      	bls.n	800092e <__udivmoddi4+0x92>
 8000918:	eb1c 0404 	adds.w	r4, ip, r4
 800091c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000920:	f080 810a 	bcs.w	8000b38 <__udivmoddi4+0x29c>
 8000924:	42a7      	cmp	r7, r4
 8000926:	f240 8107 	bls.w	8000b38 <__udivmoddi4+0x29c>
 800092a:	4464      	add	r4, ip
 800092c:	3802      	subs	r0, #2
 800092e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000932:	1be4      	subs	r4, r4, r7
 8000934:	2600      	movs	r6, #0
 8000936:	b11d      	cbz	r5, 8000940 <__udivmoddi4+0xa4>
 8000938:	40d4      	lsrs	r4, r2
 800093a:	2300      	movs	r3, #0
 800093c:	e9c5 4300 	strd	r4, r3, [r5]
 8000940:	4631      	mov	r1, r6
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000946:	428b      	cmp	r3, r1
 8000948:	d909      	bls.n	800095e <__udivmoddi4+0xc2>
 800094a:	2d00      	cmp	r5, #0
 800094c:	f000 80ef 	beq.w	8000b2e <__udivmoddi4+0x292>
 8000950:	2600      	movs	r6, #0
 8000952:	e9c5 0100 	strd	r0, r1, [r5]
 8000956:	4630      	mov	r0, r6
 8000958:	4631      	mov	r1, r6
 800095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095e:	fab3 f683 	clz	r6, r3
 8000962:	2e00      	cmp	r6, #0
 8000964:	d14a      	bne.n	80009fc <__udivmoddi4+0x160>
 8000966:	428b      	cmp	r3, r1
 8000968:	d302      	bcc.n	8000970 <__udivmoddi4+0xd4>
 800096a:	4282      	cmp	r2, r0
 800096c:	f200 80f9 	bhi.w	8000b62 <__udivmoddi4+0x2c6>
 8000970:	1a84      	subs	r4, r0, r2
 8000972:	eb61 0303 	sbc.w	r3, r1, r3
 8000976:	2001      	movs	r0, #1
 8000978:	469e      	mov	lr, r3
 800097a:	2d00      	cmp	r5, #0
 800097c:	d0e0      	beq.n	8000940 <__udivmoddi4+0xa4>
 800097e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000982:	e7dd      	b.n	8000940 <__udivmoddi4+0xa4>
 8000984:	b902      	cbnz	r2, 8000988 <__udivmoddi4+0xec>
 8000986:	deff      	udf	#255	; 0xff
 8000988:	fab2 f282 	clz	r2, r2
 800098c:	2a00      	cmp	r2, #0
 800098e:	f040 8092 	bne.w	8000ab6 <__udivmoddi4+0x21a>
 8000992:	eba1 010c 	sub.w	r1, r1, ip
 8000996:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800099a:	fa1f fe8c 	uxth.w	lr, ip
 800099e:	2601      	movs	r6, #1
 80009a0:	0c20      	lsrs	r0, r4, #16
 80009a2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009a6:	fb07 1113 	mls	r1, r7, r3, r1
 80009aa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ae:	fb0e f003 	mul.w	r0, lr, r3
 80009b2:	4288      	cmp	r0, r1
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x12c>
 80009b6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ba:	f103 38ff 	add.w	r8, r3, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x12a>
 80009c0:	4288      	cmp	r0, r1
 80009c2:	f200 80cb 	bhi.w	8000b5c <__udivmoddi4+0x2c0>
 80009c6:	4643      	mov	r3, r8
 80009c8:	1a09      	subs	r1, r1, r0
 80009ca:	b2a4      	uxth	r4, r4
 80009cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d0:	fb07 1110 	mls	r1, r7, r0, r1
 80009d4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009d8:	fb0e fe00 	mul.w	lr, lr, r0
 80009dc:	45a6      	cmp	lr, r4
 80009de:	d908      	bls.n	80009f2 <__udivmoddi4+0x156>
 80009e0:	eb1c 0404 	adds.w	r4, ip, r4
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009e8:	d202      	bcs.n	80009f0 <__udivmoddi4+0x154>
 80009ea:	45a6      	cmp	lr, r4
 80009ec:	f200 80bb 	bhi.w	8000b66 <__udivmoddi4+0x2ca>
 80009f0:	4608      	mov	r0, r1
 80009f2:	eba4 040e 	sub.w	r4, r4, lr
 80009f6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009fa:	e79c      	b.n	8000936 <__udivmoddi4+0x9a>
 80009fc:	f1c6 0720 	rsb	r7, r6, #32
 8000a00:	40b3      	lsls	r3, r6
 8000a02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a12:	431c      	orrs	r4, r3
 8000a14:	40f9      	lsrs	r1, r7
 8000a16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a22:	0c20      	lsrs	r0, r4, #16
 8000a24:	fa1f fe8c 	uxth.w	lr, ip
 8000a28:	fb09 1118 	mls	r1, r9, r8, r1
 8000a2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a30:	fb08 f00e 	mul.w	r0, r8, lr
 8000a34:	4288      	cmp	r0, r1
 8000a36:	fa02 f206 	lsl.w	r2, r2, r6
 8000a3a:	d90b      	bls.n	8000a54 <__udivmoddi4+0x1b8>
 8000a3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a44:	f080 8088 	bcs.w	8000b58 <__udivmoddi4+0x2bc>
 8000a48:	4288      	cmp	r0, r1
 8000a4a:	f240 8085 	bls.w	8000b58 <__udivmoddi4+0x2bc>
 8000a4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a52:	4461      	add	r1, ip
 8000a54:	1a09      	subs	r1, r1, r0
 8000a56:	b2a4      	uxth	r4, r4
 8000a58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a68:	458e      	cmp	lr, r1
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x1e2>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a74:	d26c      	bcs.n	8000b50 <__udivmoddi4+0x2b4>
 8000a76:	458e      	cmp	lr, r1
 8000a78:	d96a      	bls.n	8000b50 <__udivmoddi4+0x2b4>
 8000a7a:	3802      	subs	r0, #2
 8000a7c:	4461      	add	r1, ip
 8000a7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a82:	fba0 9402 	umull	r9, r4, r0, r2
 8000a86:	eba1 010e 	sub.w	r1, r1, lr
 8000a8a:	42a1      	cmp	r1, r4
 8000a8c:	46c8      	mov	r8, r9
 8000a8e:	46a6      	mov	lr, r4
 8000a90:	d356      	bcc.n	8000b40 <__udivmoddi4+0x2a4>
 8000a92:	d053      	beq.n	8000b3c <__udivmoddi4+0x2a0>
 8000a94:	b15d      	cbz	r5, 8000aae <__udivmoddi4+0x212>
 8000a96:	ebb3 0208 	subs.w	r2, r3, r8
 8000a9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000a9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000aa2:	fa22 f306 	lsr.w	r3, r2, r6
 8000aa6:	40f1      	lsrs	r1, r6
 8000aa8:	431f      	orrs	r7, r3
 8000aaa:	e9c5 7100 	strd	r7, r1, [r5]
 8000aae:	2600      	movs	r6, #0
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	40d8      	lsrs	r0, r3
 8000abc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ac4:	4091      	lsls	r1, r2
 8000ac6:	4301      	orrs	r1, r0
 8000ac8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000acc:	fa1f fe8c 	uxth.w	lr, ip
 8000ad0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ad4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ad8:	0c0b      	lsrs	r3, r1, #16
 8000ada:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ade:	fb00 f60e 	mul.w	r6, r0, lr
 8000ae2:	429e      	cmp	r6, r3
 8000ae4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x260>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000af2:	d22f      	bcs.n	8000b54 <__udivmoddi4+0x2b8>
 8000af4:	429e      	cmp	r6, r3
 8000af6:	d92d      	bls.n	8000b54 <__udivmoddi4+0x2b8>
 8000af8:	3802      	subs	r0, #2
 8000afa:	4463      	add	r3, ip
 8000afc:	1b9b      	subs	r3, r3, r6
 8000afe:	b289      	uxth	r1, r1
 8000b00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b04:	fb07 3316 	mls	r3, r7, r6, r3
 8000b08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b10:	428b      	cmp	r3, r1
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x28a>
 8000b14:	eb1c 0101 	adds.w	r1, ip, r1
 8000b18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b1c:	d216      	bcs.n	8000b4c <__udivmoddi4+0x2b0>
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d914      	bls.n	8000b4c <__udivmoddi4+0x2b0>
 8000b22:	3e02      	subs	r6, #2
 8000b24:	4461      	add	r1, ip
 8000b26:	1ac9      	subs	r1, r1, r3
 8000b28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b2c:	e738      	b.n	80009a0 <__udivmoddi4+0x104>
 8000b2e:	462e      	mov	r6, r5
 8000b30:	4628      	mov	r0, r5
 8000b32:	e705      	b.n	8000940 <__udivmoddi4+0xa4>
 8000b34:	4606      	mov	r6, r0
 8000b36:	e6e3      	b.n	8000900 <__udivmoddi4+0x64>
 8000b38:	4618      	mov	r0, r3
 8000b3a:	e6f8      	b.n	800092e <__udivmoddi4+0x92>
 8000b3c:	454b      	cmp	r3, r9
 8000b3e:	d2a9      	bcs.n	8000a94 <__udivmoddi4+0x1f8>
 8000b40:	ebb9 0802 	subs.w	r8, r9, r2
 8000b44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b48:	3801      	subs	r0, #1
 8000b4a:	e7a3      	b.n	8000a94 <__udivmoddi4+0x1f8>
 8000b4c:	4646      	mov	r6, r8
 8000b4e:	e7ea      	b.n	8000b26 <__udivmoddi4+0x28a>
 8000b50:	4620      	mov	r0, r4
 8000b52:	e794      	b.n	8000a7e <__udivmoddi4+0x1e2>
 8000b54:	4640      	mov	r0, r8
 8000b56:	e7d1      	b.n	8000afc <__udivmoddi4+0x260>
 8000b58:	46d0      	mov	r8, sl
 8000b5a:	e77b      	b.n	8000a54 <__udivmoddi4+0x1b8>
 8000b5c:	3b02      	subs	r3, #2
 8000b5e:	4461      	add	r1, ip
 8000b60:	e732      	b.n	80009c8 <__udivmoddi4+0x12c>
 8000b62:	4630      	mov	r0, r6
 8000b64:	e709      	b.n	800097a <__udivmoddi4+0xde>
 8000b66:	4464      	add	r4, ip
 8000b68:	3802      	subs	r0, #2
 8000b6a:	e742      	b.n	80009f2 <__udivmoddi4+0x156>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <Button_init>:
uint32_t counter = 0;

/////////////////////////////////////////////////////////////////////////

void Button_init(Button* button , GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	80fb      	strh	r3, [r7, #6]
	button->state = BUTTON_STATE_NONE;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
	button->timeTickOn = 0 ;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
	button->timeTickOff = 0 ;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
	button->GPIOx = GPIOx;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	60da      	str	r2, [r3, #12]
	button->GPIO_Pin = GPIO_Pin;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	88fa      	ldrh	r2, [r7, #6]
 8000b9a:	821a      	strh	r2, [r3, #16]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <Button_interrupt>:


void Button_interrupt(Button* button)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	uint32_t delayTick = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]

	if(HAL_GPIO_ReadPin(button->GPIOx, button->GPIO_Pin) == 0){
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68da      	ldr	r2, [r3, #12]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	8a1b      	ldrh	r3, [r3, #16]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4610      	mov	r0, r2
 8000bc0:	f001 fe70 	bl	80028a4 <HAL_GPIO_ReadPin>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d105      	bne.n	8000bd6 <Button_interrupt+0x2e>
		button->timeTickOn = HAL_GetTick();
 8000bca:	f001 fb25 	bl	8002218 <HAL_GetTick>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	605a      	str	r2, [r3, #4]
	     }
	     else{
		   button->state = BUTTON_STATE;
	     }
	}
}
 8000bd4:	e031      	b.n	8000c3a <Button_interrupt+0x92>
	else if(HAL_GPIO_ReadPin(button->GPIOx, button->GPIO_Pin) == 1){
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68da      	ldr	r2, [r3, #12]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	8a1b      	ldrh	r3, [r3, #16]
 8000bde:	4619      	mov	r1, r3
 8000be0:	4610      	mov	r0, r2
 8000be2:	f001 fe5f 	bl	80028a4 <HAL_GPIO_ReadPin>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d126      	bne.n	8000c3a <Button_interrupt+0x92>
			button->timeTickOff = HAL_GetTick();
 8000bec:	f001 fb14 	bl	8002218 <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
			delayTick = button->timeTickOff - button->timeTickOn;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	689a      	ldr	r2, [r3, #8]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	60fb      	str	r3, [r7, #12]
	     if(delayTick > 500){
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c08:	d906      	bls.n	8000c18 <Button_interrupt+0x70>
	       button->state = BUTTON_LONG_PRESS;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	701a      	strb	r2, [r3, #0]
	       printf("Long \n\r");
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <Button_interrupt+0x9c>)
 8000c12:	f005 fe4f 	bl	80068b4 <iprintf>
}
 8000c16:	e010      	b.n	8000c3a <Button_interrupt+0x92>
	     else if (button->state == BUTTON_STATE) {
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d109      	bne.n	8000c34 <Button_interrupt+0x8c>
		   button->state = BUTTON_DOUBLE_PRESS;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2204      	movs	r2, #4
 8000c24:	701a      	strb	r2, [r3, #0]
		   counter = 0;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <Button_interrupt+0xa0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
		   printf("Double \n\r");
 8000c2c:	4807      	ldr	r0, [pc, #28]	; (8000c4c <Button_interrupt+0xa4>)
 8000c2e:	f005 fe41 	bl	80068b4 <iprintf>
}
 8000c32:	e002      	b.n	8000c3a <Button_interrupt+0x92>
		   button->state = BUTTON_STATE;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
}
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	080082ec 	.word	0x080082ec
 8000c48:	2000014c 	.word	0x2000014c
 8000c4c:	080082f4 	.word	0x080082f4

08000c50 <Button_onTimerInterrupt>:

void Button_onTimerInterrupt(Button* button)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	if (button->state == BUTTON_STATE) {
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d111      	bne.n	8000c84 <Button_onTimerInterrupt+0x34>
		counter++;
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <Button_onTimerInterrupt+0x3c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	4a09      	ldr	r2, [pc, #36]	; (8000c8c <Button_onTimerInterrupt+0x3c>)
 8000c68:	6013      	str	r3, [r2, #0]
		if(counter > 200 ){
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <Button_onTimerInterrupt+0x3c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2bc8      	cmp	r3, #200	; 0xc8
 8000c70:	d908      	bls.n	8000c84 <Button_onTimerInterrupt+0x34>
			button->state = BUTTON_STATE_PRESS;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2202      	movs	r2, #2
 8000c76:	701a      	strb	r2, [r3, #0]
			counter = 0;
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <Button_onTimerInterrupt+0x3c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
			printf("One \n\r");
 8000c7e:	4804      	ldr	r0, [pc, #16]	; (8000c90 <Button_onTimerInterrupt+0x40>)
 8000c80:	f005 fe18 	bl	80068b4 <iprintf>
		}
	}
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	2000014c 	.word	0x2000014c
 8000c90:	08008300 	.word	0x08008300

08000c94 <Buzzer_init>:
int note []={ 390, 340, 303, 286, 255, 227, 202};
int noteJonatan []= {255 , 303,  303,  286, 340, 340, 390, 340, 303, 286, 255, 255, 255, 255 , 303,  303,  286, 340, 340 ,390, 303, 255, 255,390};
int periodeJonatan[]={250, 250,  500,  250, 250, 500, 250, 250, 250, 250, 500, 250, 250, 250,  250,  500,  250, 250, 500, 250, 250, 250 ,500,250};

void Buzzer_init(Buzzer* buzzer)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	buzzer->state = MUSIC_OFF;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
	buzzer->sizeOfMusic = (sizeof(noteJonatan) / sizeof(noteJonatan[0]));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2218      	movs	r2, #24
 8000ca6:	605a      	str	r2, [r3, #4]
	buzzer->currentNote= 0;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
	buzzer->counter = 0;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
	buzzer->maxCount = periodeJonatan[0];
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <Buzzer_init+0x34>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	611a      	str	r2, [r3, #16]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	20000060 	.word	0x20000060

08000ccc <Buzzer_playNote>:

void Buzzer_playNote(Buzzer* buzzer)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <Buzzer_playNote+0x54>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim3, noteJonatan[buzzer->currentNote]);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <Buzzer_playNote+0x58>)
 8000ce2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <Buzzer_playNote+0x54>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	4a0c      	ldr	r2, [pc, #48]	; (8000d24 <Buzzer_playNote+0x58>)
 8000cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <Buzzer_playNote+0x54>)
 8000cfa:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (noteJonatan[buzzer->currentNote]/2));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <Buzzer_playNote+0x58>)
 8000d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d06:	0fda      	lsrs	r2, r3, #31
 8000d08:	4413      	add	r3, r2
 8000d0a:	105b      	asrs	r3, r3, #1
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <Buzzer_playNote+0x54>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	200003a0 	.word	0x200003a0
 8000d24:	20000000 	.word	0x20000000

08000d28 <Buzzer_playNextNote>:

void Buzzer_playNextNote(Buzzer* buzzer)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	buzzer->currentNote++;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	1c5a      	adds	r2, r3, #1
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	609a      	str	r2, [r3, #8]
	if(buzzer->currentNote >= buzzer->sizeOfMusic){
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d302      	bcc.n	8000d4e <Buzzer_playNextNote+0x26>
		buzzer->currentNote = 0;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
	}
	buzzer->maxCount = periodeJonatan [buzzer->currentNote];
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <Buzzer_playNextNote+0x44>)
 8000d54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	611a      	str	r2, [r3, #16]
	Buzzer_playNote(buzzer);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ffb5 	bl	8000ccc <Buzzer_playNote>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000060 	.word	0x20000060

08000d70 <Buzzer_onTimerInterrupt>:

void Buzzer_onTimerInterrupt(Buzzer* buzzer)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	if(buzzer->state == MUSIC_ON){
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d110      	bne.n	8000da2 <Buzzer_onTimerInterrupt+0x32>
		buzzer->counter++;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	1c5a      	adds	r2, r3, #1
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	60da      	str	r2, [r3, #12]
		if(buzzer->counter >= buzzer->maxCount){
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	db05      	blt.n	8000da2 <Buzzer_onTimerInterrupt+0x32>
			Buzzer_playNextNote(buzzer);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ffc6 	bl	8000d28 <Buzzer_playNextNote>
			buzzer->counter = 0;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
		}
	}

}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <Buzzer_on>:

void Buzzer_on(Buzzer* buzzer){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	buzzer->state = MUSIC_ON;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim3);
 8000dba:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <Buzzer_on+0x2c>)
 8000dbc:	f003 f9b4 	bl	8004128 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <Buzzer_on+0x2c>)
 8000dc4:	f003 faa6 	bl	8004314 <HAL_TIM_PWM_Start_IT>
	Buzzer_playNote(buzzer);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff7f 	bl	8000ccc <Buzzer_playNote>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200003a0 	.word	0x200003a0

08000ddc <Buzzer_off>:

void Buzzer_off(Buzzer* buzzer){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	buzzer->state = MUSIC_OFF;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim3);
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <Buzzer_off+0x24>)
 8000dec:	f003 fa0c 	bl	8004208 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000df0:	2100      	movs	r1, #0
 8000df2:	4803      	ldr	r0, [pc, #12]	; (8000e00 <Buzzer_off+0x24>)
 8000df4:	f003 fbe2 	bl	80045bc <HAL_TIM_PWM_Stop_IT>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	200003a0 	.word	0x200003a0

08000e04 <Cli_cmdLedOn>:

extern Led ledR;
extern Led ledB;
extern Buzzer buzzer;

void Cli_cmdLedOn(void* obj, char* param){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
	Led *led = (Led*)obj;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60fb      	str	r3, [r7, #12]
	Led_on(led);
 8000e12:	68f8      	ldr	r0, [r7, #12]
 8000e14:	f000 fbd5 	bl	80015c2 <Led_on>
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <Cli_cmdLedOff>:

void Cli_cmdLedOff(void* obj, char* param){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	Led *led = (Led*)obj;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	60fb      	str	r3, [r7, #12]
	Led_off(led);
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f000 fbda 	bl	80015e8 <Led_off>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <Cli_cmdLedBlink>:

void Cli_cmdLedBlink(void* obj, char* param){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
	Led *led = (Led*)obj;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	60fb      	str	r3, [r7, #12]
	int period = atoi (param);
 8000e4a:	6838      	ldr	r0, [r7, #0]
 8000e4c:	f005 fcfc 	bl	8006848 <atoi>
 8000e50:	60b8      	str	r0, [r7, #8]
	Led_blink(led, period);
 8000e52:	68b9      	ldr	r1, [r7, #8]
 8000e54:	68f8      	ldr	r0, [r7, #12]
 8000e56:	f000 fbda 	bl	800160e <Led_blink>
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <Cli_cmdBuzzerOn>:
	int period = atoi (param);
	Led_setBrightness(period);
}


void Cli_cmdBuzzerOn(void* obj, char* param){
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b084      	sub	sp, #16
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
	Buzzer *buzzer = (Buzzer*)obj;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	60fb      	str	r3, [r7, #12]
	Buzzer_on(buzzer);
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f7ff ff9b 	bl	8000dac <Buzzer_on>
}
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <Cli_cmdBuzzerOff>:

void Cli_cmdBuzzerOff(void* obj, char* param){
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b084      	sub	sp, #16
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
 8000e86:	6039      	str	r1, [r7, #0]
	Buzzer *buzzer = (Buzzer*)obj;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	60fb      	str	r3, [r7, #12]
	Buzzer_off(buzzer);
 8000e8c:	68f8      	ldr	r0, [r7, #12]
 8000e8e:	f7ff ffa5 	bl	8000ddc <Buzzer_off>
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <Cli_init>:


void Cli_init(){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	//////////////////ledR//////////////////////////////
	Communication_registerCommand("ledR", "on", Cli_cmdLedOn, &ledR);
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <Cli_init+0x74>)
 8000ea2:	4a1c      	ldr	r2, [pc, #112]	; (8000f14 <Cli_init+0x78>)
 8000ea4:	491c      	ldr	r1, [pc, #112]	; (8000f18 <Cli_init+0x7c>)
 8000ea6:	481d      	ldr	r0, [pc, #116]	; (8000f1c <Cli_init+0x80>)
 8000ea8:	f000 f982 	bl	80011b0 <Communication_registerCommand>
	Communication_registerCommand("ledR", "off", Cli_cmdLedOff, &ledR);
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <Cli_init+0x74>)
 8000eae:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <Cli_init+0x84>)
 8000eb0:	491c      	ldr	r1, [pc, #112]	; (8000f24 <Cli_init+0x88>)
 8000eb2:	481a      	ldr	r0, [pc, #104]	; (8000f1c <Cli_init+0x80>)
 8000eb4:	f000 f97c 	bl	80011b0 <Communication_registerCommand>
	Communication_registerCommand("ledR", "blink", Cli_cmdLedBlink, &ledR);
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <Cli_init+0x74>)
 8000eba:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <Cli_init+0x8c>)
 8000ebc:	491b      	ldr	r1, [pc, #108]	; (8000f2c <Cli_init+0x90>)
 8000ebe:	4817      	ldr	r0, [pc, #92]	; (8000f1c <Cli_init+0x80>)
 8000ec0:	f000 f976 	bl	80011b0 <Communication_registerCommand>

	//////////////////ledB//////////////////////////////
	Communication_registerCommand("ledB", "on", Cli_cmdLedOn, &ledB);
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <Cli_init+0x94>)
 8000ec6:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <Cli_init+0x78>)
 8000ec8:	4913      	ldr	r1, [pc, #76]	; (8000f18 <Cli_init+0x7c>)
 8000eca:	481a      	ldr	r0, [pc, #104]	; (8000f34 <Cli_init+0x98>)
 8000ecc:	f000 f970 	bl	80011b0 <Communication_registerCommand>
    Communication_registerCommand("ledB", "off", Cli_cmdLedOff, &ledB);
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <Cli_init+0x94>)
 8000ed2:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <Cli_init+0x84>)
 8000ed4:	4913      	ldr	r1, [pc, #76]	; (8000f24 <Cli_init+0x88>)
 8000ed6:	4817      	ldr	r0, [pc, #92]	; (8000f34 <Cli_init+0x98>)
 8000ed8:	f000 f96a 	bl	80011b0 <Communication_registerCommand>
    Communication_registerCommand("ledB", "blink", Cli_cmdLedBlink, &ledB);
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <Cli_init+0x94>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <Cli_init+0x8c>)
 8000ee0:	4912      	ldr	r1, [pc, #72]	; (8000f2c <Cli_init+0x90>)
 8000ee2:	4814      	ldr	r0, [pc, #80]	; (8000f34 <Cli_init+0x98>)
 8000ee4:	f000 f964 	bl	80011b0 <Communication_registerCommand>

    //////////////////ledbright////////////////////////
    Communication_registerCommand("led", "bright", Cli_cmdLedOn, &ledB);
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <Cli_init+0x94>)
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <Cli_init+0x78>)
 8000eec:	4912      	ldr	r1, [pc, #72]	; (8000f38 <Cli_init+0x9c>)
 8000eee:	4813      	ldr	r0, [pc, #76]	; (8000f3c <Cli_init+0xa0>)
 8000ef0:	f000 f95e 	bl	80011b0 <Communication_registerCommand>

    /////////////////buzzer//////////////////////////////
    Communication_registerCommand("buzzer", "on", Cli_cmdBuzzerOn, &buzzer);
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <Cli_init+0xa4>)
 8000ef6:	4a13      	ldr	r2, [pc, #76]	; (8000f44 <Cli_init+0xa8>)
 8000ef8:	4907      	ldr	r1, [pc, #28]	; (8000f18 <Cli_init+0x7c>)
 8000efa:	4813      	ldr	r0, [pc, #76]	; (8000f48 <Cli_init+0xac>)
 8000efc:	f000 f958 	bl	80011b0 <Communication_registerCommand>
    Communication_registerCommand("buzzer", "off", Cli_cmdBuzzerOff, &buzzer);
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <Cli_init+0xa4>)
 8000f02:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <Cli_init+0xb0>)
 8000f04:	4907      	ldr	r1, [pc, #28]	; (8000f24 <Cli_init+0x88>)
 8000f06:	4810      	ldr	r0, [pc, #64]	; (8000f48 <Cli_init+0xac>)
 8000f08:	f000 f952 	bl	80011b0 <Communication_registerCommand>
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000031c 	.word	0x2000031c
 8000f14:	08000e05 	.word	0x08000e05
 8000f18:	08008308 	.word	0x08008308
 8000f1c:	0800830c 	.word	0x0800830c
 8000f20:	08000e21 	.word	0x08000e21
 8000f24:	08008314 	.word	0x08008314
 8000f28:	08000e3d 	.word	0x08000e3d
 8000f2c:	08008318 	.word	0x08008318
 8000f30:	20000330 	.word	0x20000330
 8000f34:	08008320 	.word	0x08008320
 8000f38:	08008328 	.word	0x08008328
 8000f3c:	08008330 	.word	0x08008330
 8000f40:	20000358 	.word	0x20000358
 8000f44:	08000e63 	.word	0x08000e63
 8000f48:	08008334 	.word	0x08008334
 8000f4c:	08000e7f 	.word	0x08000e7f

08000f50 <Clock_init>:

#include <Clock.h>

void Clock_init(Clock* clock)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	clock->tick = 0;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
	clock->seconds = 0;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	605a      	str	r2, [r3, #4]
	clock->minutes =0;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
	clock->hours = 0;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
	clock->days = 0;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <Clock_onTimerInterrupt>:

void Clock_onTimerInterrupt(Clock* clock)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	clock->tick++;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	1c5a      	adds	r2, r3, #1
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	601a      	str	r2, [r3, #0]
	clock->seconds = clock->tick/1000;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a14      	ldr	r2, [pc, #80]	; (8000fec <Clock_onTimerInterrupt+0x68>)
 8000f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa0:	099b      	lsrs	r3, r3, #6
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	605a      	str	r2, [r3, #4]
	clock->minutes = clock->tick/60000;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <Clock_onTimerInterrupt+0x6c>)
 8000fae:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb2:	0b9b      	lsrs	r3, r3, #14
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
	clock->hours = clock->tick/360000;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	099b      	lsrs	r3, r3, #6
 8000fc0:	4a0c      	ldr	r2, [pc, #48]	; (8000ff4 <Clock_onTimerInterrupt+0x70>)
 8000fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	461a      	mov	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	60da      	str	r2, [r3, #12]
	clock->days = clock->tick/8640000;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a09      	ldr	r2, [pc, #36]	; (8000ff8 <Clock_onTimerInterrupt+0x74>)
 8000fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd8:	0ddb      	lsrs	r3, r3, #23
 8000fda:	461a      	mov	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	611a      	str	r2, [r3, #16]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	10624dd3 	.word	0x10624dd3
 8000ff0:	45e7b273 	.word	0x45e7b273
 8000ff4:	002e9a77 	.word	0x002e9a77
 8000ff8:	f88d2527 	.word	0xf88d2527

08000ffc <Communication_commTask>:
static int cmdcount = 0;
static int cmdprint = 0;

///////////////////////////////////////////////////////////////////////
int Communication_commTask()
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8001002:	1db9      	adds	r1, r7, #6
 8001004:	230a      	movs	r3, #10
 8001006:	2201      	movs	r2, #1
 8001008:	4836      	ldr	r0, [pc, #216]	; (80010e4 <Communication_commTask+0xe8>)
 800100a:	f004 fb35 	bl	8005678 <HAL_UART_Receive>
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d020      	beq.n	800105a <Communication_commTask+0x5e>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 8001018:	4b32      	ldr	r3, [pc, #200]	; (80010e4 <Communication_commTask+0xe8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	2b00      	cmp	r3, #0
 8001024:	d011      	beq.n	800104a <Communication_commTask+0x4e>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8001026:	4b2f      	ldr	r3, [pc, #188]	; (80010e4 <Communication_commTask+0xe8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2208      	movs	r2, #8
 800102c:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 800102e:	e00c      	b.n	800104a <Communication_commTask+0x4e>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <Communication_commTask+0xec>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	492c      	ldr	r1, [pc, #176]	; (80010e8 <Communication_commTask+0xec>)
 8001038:	600a      	str	r2, [r1, #0]
 800103a:	4a2c      	ldr	r2, [pc, #176]	; (80010ec <Communication_commTask+0xf0>)
 800103c:	1899      	adds	r1, r3, r2
 800103e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001042:	2201      	movs	r2, #1
 8001044:	4827      	ldr	r0, [pc, #156]	; (80010e4 <Communication_commTask+0xe8>)
 8001046:	f004 fa83 	bl	8005550 <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <Communication_commTask+0xec>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <Communication_commTask+0xf4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	dbec      	blt.n	8001030 <Communication_commTask+0x34>
		}

		return 0;
 8001056:	2300      	movs	r3, #0
 8001058:	e03f      	b.n	80010da <Communication_commTask+0xde>
	}

	if (ch != '\r' && ch != '\n')
 800105a:	79bb      	ldrb	r3, [r7, #6]
 800105c:	2b0d      	cmp	r3, #13
 800105e:	d023      	beq.n	80010a8 <Communication_commTask+0xac>
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	2b0a      	cmp	r3, #10
 8001064:	d020      	beq.n	80010a8 <Communication_commTask+0xac>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 8001066:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <Communication_commTask+0xf4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b63      	cmp	r3, #99	; 0x63
 800106c:	dd05      	ble.n	800107a <Communication_commTask+0x7e>
		{
			cmdcount = 0;
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <Communication_commTask+0xf4>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8001074:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <Communication_commTask+0xec>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <Communication_commTask+0xf4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	491b      	ldr	r1, [pc, #108]	; (80010f0 <Communication_commTask+0xf4>)
 8001082:	600a      	str	r2, [r1, #0]
 8001084:	79b9      	ldrb	r1, [r7, #6]
 8001086:	4a19      	ldr	r2, [pc, #100]	; (80010ec <Communication_commTask+0xf0>)
 8001088:	54d1      	strb	r1, [r2, r3]
		return 0;
 800108a:	2300      	movs	r3, #0
 800108c:	e025      	b.n	80010da <Communication_commTask+0xde>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount)
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 800108e:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <Communication_commTask+0xec>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	4914      	ldr	r1, [pc, #80]	; (80010e8 <Communication_commTask+0xec>)
 8001096:	600a      	str	r2, [r1, #0]
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <Communication_commTask+0xf0>)
 800109a:	1899      	adds	r1, r3, r2
 800109c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a0:	2201      	movs	r2, #1
 80010a2:	4810      	ldr	r0, [pc, #64]	; (80010e4 <Communication_commTask+0xe8>)
 80010a4:	f004 fa54 	bl	8005550 <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <Communication_commTask+0xec>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <Communication_commTask+0xf4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbec      	blt.n	800108e <Communication_commTask+0x92>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 80010b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b8:	2202      	movs	r2, #2
 80010ba:	490e      	ldr	r1, [pc, #56]	; (80010f4 <Communication_commTask+0xf8>)
 80010bc:	4809      	ldr	r0, [pc, #36]	; (80010e4 <Communication_commTask+0xe8>)
 80010be:	f004 fa47 	bl	8005550 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <Communication_commTask+0xf4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a09      	ldr	r2, [pc, #36]	; (80010ec <Communication_commTask+0xf0>)
 80010c8:	2100      	movs	r1, #0
 80010ca:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <Communication_commTask+0xf4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <Communication_commTask+0xec>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
	return 1;
 80010d8:	2301      	movs	r3, #1
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200004d0 	.word	0x200004d0
 80010e8:	200002fc 	.word	0x200002fc
 80010ec:	20000150 	.word	0x20000150
 80010f0:	200002f8 	.word	0x200002f8
 80010f4:	0800833c 	.word	0x0800833c

080010f8 <Communication_handleCommand>:


void Communication_handleCommand()
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b094      	sub	sp, #80	; 0x50
 80010fc:	af02      	add	r7, sp, #8
	char cmd[20];
	char state[20];
	char param [20];

   int params = sscanf((const char*)cmdbuffer, "%s %s %s", cmd, state, param );
 80010fe:	f107 0118 	add.w	r1, r7, #24
 8001102:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	460b      	mov	r3, r1
 800110c:	4923      	ldr	r1, [pc, #140]	; (800119c <Communication_handleCommand+0xa4>)
 800110e:	4824      	ldr	r0, [pc, #144]	; (80011a0 <Communication_handleCommand+0xa8>)
 8001110:	f005 fc5e 	bl	80069d0 <siscanf>
 8001114:	6438      	str	r0, [r7, #64]	; 0x40
   if (params == 0){
 8001116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001118:	2b00      	cmp	r3, #0
 800111a:	d03b      	beq.n	8001194 <Communication_handleCommand+0x9c>
	   return;
  }

   for(int i=0; i<counterComand ; i++){
 800111c:	2300      	movs	r3, #0
 800111e:	647b      	str	r3, [r7, #68]	; 0x44
 8001120:	e02f      	b.n	8001182 <Communication_handleCommand+0x8a>
	   if(strcmp(cmd, comands[i].comandName) == 0){
 8001122:	4a20      	ldr	r2, [pc, #128]	; (80011a4 <Communication_handleCommand+0xac>)
 8001124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001126:	011b      	lsls	r3, r3, #4
 8001128:	4413      	add	r3, r2
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f84c 	bl	80001d0 <strcmp>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d11e      	bne.n	800117c <Communication_handleCommand+0x84>
		   if(strcmp(state, comands[i].stateComand) == 0){
 800113e:	4a19      	ldr	r2, [pc, #100]	; (80011a4 <Communication_handleCommand+0xac>)
 8001140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	4413      	add	r3, r2
 8001146:	3304      	adds	r3, #4
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f83d 	bl	80001d0 <strcmp>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10f      	bne.n	800117c <Communication_handleCommand+0x84>
			   comands[i].comandPointer(comands[i].object, param);
 800115c:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <Communication_handleCommand+0xac>)
 800115e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	4413      	add	r3, r2
 8001164:	3308      	adds	r3, #8
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	490e      	ldr	r1, [pc, #56]	; (80011a4 <Communication_handleCommand+0xac>)
 800116a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	440a      	add	r2, r1
 8001170:	320c      	adds	r2, #12
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	1d39      	adds	r1, r7, #4
 8001176:	4610      	mov	r0, r2
 8001178:	4798      	blx	r3
			   return;
 800117a:	e00c      	b.n	8001196 <Communication_handleCommand+0x9e>
   for(int i=0; i<counterComand ; i++){
 800117c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800117e:	3301      	adds	r3, #1
 8001180:	647b      	str	r3, [r7, #68]	; 0x44
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <Communication_handleCommand+0xb0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001188:	429a      	cmp	r2, r3
 800118a:	dbca      	blt.n	8001122 <Communication_handleCommand+0x2a>
		   }
	   }
   }
   printf("Invalid command\r\n");
 800118c:	4807      	ldr	r0, [pc, #28]	; (80011ac <Communication_handleCommand+0xb4>)
 800118e:	f005 fc17 	bl	80069c0 <puts>
 8001192:	e000      	b.n	8001196 <Communication_handleCommand+0x9e>
	   return;
 8001194:	bf00      	nop

}
 8001196:	3748      	adds	r7, #72	; 0x48
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	08008340 	.word	0x08008340
 80011a0:	20000150 	.word	0x20000150
 80011a4:	200001b4 	.word	0x200001b4
 80011a8:	200002f4 	.word	0x200002f4
 80011ac:	0800834c 	.word	0x0800834c

080011b0 <Communication_registerCommand>:


void Communication_registerCommand(char* comandName, char* stateComand, HandlerFunc comandPointer, void* object){
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	603b      	str	r3, [r7, #0]
	comands[counterComand].comandName = comandName;
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <Communication_registerCommand+0x64>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a15      	ldr	r2, [pc, #84]	; (8001218 <Communication_registerCommand+0x68>)
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	4413      	add	r3, r2
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	601a      	str	r2, [r3, #0]
	comands[counterComand].stateComand = stateComand;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <Communication_registerCommand+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a11      	ldr	r2, [pc, #68]	; (8001218 <Communication_registerCommand+0x68>)
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	4413      	add	r3, r2
 80011d6:	3304      	adds	r3, #4
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	601a      	str	r2, [r3, #0]
	comands[counterComand].comandPointer = comandPointer;
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <Communication_registerCommand+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <Communication_registerCommand+0x68>)
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	4413      	add	r3, r2
 80011e6:	3308      	adds	r3, #8
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	601a      	str	r2, [r3, #0]
	comands[counterComand].object = object;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <Communication_registerCommand+0x64>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a09      	ldr	r2, [pc, #36]	; (8001218 <Communication_registerCommand+0x68>)
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	4413      	add	r3, r2
 80011f6:	330c      	adds	r3, #12
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	601a      	str	r2, [r3, #0]
	counterComand++;
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <Communication_registerCommand+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	3301      	adds	r3, #1
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <Communication_registerCommand+0x64>)
 8001204:	6013      	str	r3, [r2, #0]

}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	200002f4 	.word	0x200002f4
 8001218:	200001b4 	.word	0x200001b4

0800121c <DHT11_init>:
uint8_t buffDht11 [5] = {0};
uint8_t oneBit = 0;


void DHT11_init(Dht11* dht)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	dht->GPIO_Pin = D4_Pin;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2220      	movs	r2, #32
 8001228:	809a      	strh	r2, [r3, #4]
	dht->GPIOx = D4_GPIO_Port;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a0c      	ldr	r2, [pc, #48]	; (8001260 <DHT11_init+0x44>)
 800122e:	601a      	str	r2, [r3, #0]
	dht->temperature = 0;
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	dht->humidity = 0;
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	f04f 0300 	mov.w	r3, #0
 8001248:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dht->checkSum = 0;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	48000400 	.word	0x48000400

08001264 <DHT11_setOutput>:

void DHT11_setOutput(Dht11* dht)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	GPIO_InitStruct.Pin = dht->GPIO_Pin;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	889b      	ldrh	r3, [r3, #4]
 8001270:	461a      	mov	r2, r3
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <DHT11_setOutput+0x38>)
 8001274:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <DHT11_setOutput+0x38>)
 8001278:	2201      	movs	r2, #1
 800127a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <DHT11_setOutput+0x38>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <DHT11_setOutput+0x38>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(dht->GPIOx, &GPIO_InitStruct);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4903      	ldr	r1, [pc, #12]	; (800129c <DHT11_setOutput+0x38>)
 800128e:	4618      	mov	r0, r3
 8001290:	f001 f95e 	bl	8002550 <HAL_GPIO_Init>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000300 	.word	0x20000300

080012a0 <DHT11_setInput>:

void DHT11_setInput(Dht11* dht)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	GPIO_InitStruct.Pin = dht->GPIO_Pin;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	889b      	ldrh	r3, [r3, #4]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <DHT11_setInput+0x38>)
 80012b0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <DHT11_setInput+0x38>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <DHT11_setInput+0x38>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <DHT11_setInput+0x38>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(dht->GPIOx, &GPIO_InitStruct);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4903      	ldr	r1, [pc, #12]	; (80012d8 <DHT11_setInput+0x38>)
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 f940 	bl	8002550 <HAL_GPIO_Init>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000300 	.word	0x20000300

080012dc <DHT11_whrithPin>:

void DHT11_whrithPin(Dht11* dht)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&htim16);
 80012e4:	4816      	ldr	r0, [pc, #88]	; (8001340 <DHT11_whrithPin+0x64>)
 80012e6:	f002 feb7 	bl	8004058 <HAL_TIM_Base_Start>
	DHT11_setOutput(dht);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ffba 	bl	8001264 <DHT11_setOutput>
	__HAL_TIM_SET_COUNTER(&htim16 , 0);
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <DHT11_whrithPin+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2200      	movs	r2, #0
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_GPIO_WritePin(dht->GPIOx, dht->GPIO_Pin, 0);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	889b      	ldrh	r3, [r3, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	f001 fae6 	bl	80028d4 <HAL_GPIO_WritePin>
	while (__HAL_TIM_GET_COUNTER(&htim16) < 18500){
 8001308:	bf00      	nop
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <DHT11_whrithPin+0x64>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	f644 0243 	movw	r2, #18499	; 0x4843
 8001314:	4293      	cmp	r3, r2
 8001316:	d9f8      	bls.n	800130a <DHT11_whrithPin+0x2e>

	}
	HAL_GPIO_WritePin(dht->GPIOx, dht->GPIO_Pin, 1);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	889b      	ldrh	r3, [r3, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	4619      	mov	r1, r3
 8001324:	f001 fad6 	bl	80028d4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim16 , 0);
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <DHT11_whrithPin+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2200      	movs	r2, #0
 800132e:	625a      	str	r2, [r3, #36]	; 0x24

	DHT11_getStatus(dht);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f807 	bl	8001344 <DHT11_getStatus>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000484 	.word	0x20000484

08001344 <DHT11_getStatus>:

void DHT11_getStatus(Dht11* dht){
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	DHT11_setInput(dht);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ffa7 	bl	80012a0 <DHT11_setInput>
	while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == 1){
 8001352:	e004      	b.n	800135e <DHT11_getStatus+0x1a>
		if(__HAL_TIM_GET_COUNTER(&htim16) > 60){
 8001354:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <DHT11_getStatus+0x9c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	2b3c      	cmp	r3, #60	; 0x3c
 800135c:	d838      	bhi.n	80013d0 <DHT11_getStatus+0x8c>
	while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == 1){
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	889b      	ldrh	r3, [r3, #4]
 8001366:	4619      	mov	r1, r3
 8001368:	4610      	mov	r0, r2
 800136a:	f001 fa9b 	bl	80028a4 <HAL_GPIO_ReadPin>
 800136e:	4603      	mov	r3, r0
 8001370:	2b01      	cmp	r3, #1
 8001372:	d0ef      	beq.n	8001354 <DHT11_getStatus+0x10>
				return;
		}
	}
	__HAL_TIM_SET_COUNTER(&htim16 , 0);
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <DHT11_getStatus+0x9c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2200      	movs	r2, #0
 800137a:	625a      	str	r2, [r3, #36]	; 0x24
	while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == 0){
 800137c:	e004      	b.n	8001388 <DHT11_getStatus+0x44>
		if(__HAL_TIM_GET_COUNTER(&htim16) > 100){
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <DHT11_getStatus+0x9c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	2b64      	cmp	r3, #100	; 0x64
 8001386:	d825      	bhi.n	80013d4 <DHT11_getStatus+0x90>
	while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == 0){
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	889b      	ldrh	r3, [r3, #4]
 8001390:	4619      	mov	r1, r3
 8001392:	4610      	mov	r0, r2
 8001394:	f001 fa86 	bl	80028a4 <HAL_GPIO_ReadPin>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0ef      	beq.n	800137e <DHT11_getStatus+0x3a>
		    return;
		}
    }
	__HAL_TIM_SET_COUNTER(&htim16 , 0);
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <DHT11_getStatus+0x9c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2200      	movs	r2, #0
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24
	while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == 1){
 80013a6:	e004      	b.n	80013b2 <DHT11_getStatus+0x6e>
			if(__HAL_TIM_GET_COUNTER(&htim16) > 100){
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <DHT11_getStatus+0x9c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	2b64      	cmp	r3, #100	; 0x64
 80013b0:	d812      	bhi.n	80013d8 <DHT11_getStatus+0x94>
	while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == 1){
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	889b      	ldrh	r3, [r3, #4]
 80013ba:	4619      	mov	r1, r3
 80013bc:	4610      	mov	r0, r2
 80013be:	f001 fa71 	bl	80028a4 <HAL_GPIO_ReadPin>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d0ef      	beq.n	80013a8 <DHT11_getStatus+0x64>
			    return;
			}
	}
    DHT11_waitForSignal(dht);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 f80d 	bl	80013e8 <DHT11_waitForSignal>
 80013ce:	e004      	b.n	80013da <DHT11_getStatus+0x96>
				return;
 80013d0:	bf00      	nop
 80013d2:	e002      	b.n	80013da <DHT11_getStatus+0x96>
		    return;
 80013d4:	bf00      	nop
 80013d6:	e000      	b.n	80013da <DHT11_getStatus+0x96>
			    return;
 80013d8:	bf00      	nop
}
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000484 	.word	0x20000484
 80013e4:	00000000 	.word	0x00000000

080013e8 <DHT11_waitForSignal>:

void DHT11_waitForSignal(Dht11* dht){
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	for(int x=0; x<5; x++){
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	e021      	b.n	800143a <DHT11_waitForSignal+0x52>
		for(int i=0; i<8; i++){
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	e018      	b.n	800142e <DHT11_waitForSignal+0x46>
			while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == 0){
 80013fc:	bf00      	nop
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	889b      	ldrh	r3, [r3, #4]
 8001406:	4619      	mov	r1, r3
 8001408:	4610      	mov	r0, r2
 800140a:	f001 fa4b 	bl	80028a4 <HAL_GPIO_ReadPin>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f4      	beq.n	80013fe <DHT11_waitForSignal+0x16>

			}
			buffDht11 [x] = DHT11_readNextBit(dht);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 f85d 	bl	80014d4 <DHT11_readNextBit>
 800141a:	4603      	mov	r3, r0
 800141c:	b2d9      	uxtb	r1, r3
 800141e:	4a2c      	ldr	r2, [pc, #176]	; (80014d0 <DHT11_waitForSignal+0xe8>)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4413      	add	r3, r2
 8001424:	460a      	mov	r2, r1
 8001426:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<8; i++){
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	3301      	adds	r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	2b07      	cmp	r3, #7
 8001432:	dde3      	ble.n	80013fc <DHT11_waitForSignal+0x14>
	for(int x=0; x<5; x++){
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3301      	adds	r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2b04      	cmp	r3, #4
 800143e:	ddda      	ble.n	80013f6 <DHT11_waitForSignal+0xe>
		}
	}
	dht->humidity = buffDht11[0] + (buffDht11[1]*0.1);
 8001440:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <DHT11_waitForSignal+0xe8>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f9a7 	bl	8000798 <__aeabi_i2d>
 800144a:	4604      	mov	r4, r0
 800144c:	460d      	mov	r5, r1
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <DHT11_waitForSignal+0xe8>)
 8001450:	785b      	ldrb	r3, [r3, #1]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f9a0 	bl	8000798 <__aeabi_i2d>
 8001458:	a31b      	add	r3, pc, #108	; (adr r3, 80014c8 <DHT11_waitForSignal+0xe0>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	f7fe ff1f 	bl	80002a0 <__aeabi_dmul>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4620      	mov	r0, r4
 8001468:	4629      	mov	r1, r5
 800146a:	f7ff f849 	bl	8000500 <__adddf3>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dht->temperature = buffDht11[2] + (buffDht11[3]*0.1);
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <DHT11_waitForSignal+0xe8>)
 800147a:	789b      	ldrb	r3, [r3, #2]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f98b 	bl	8000798 <__aeabi_i2d>
 8001482:	4604      	mov	r4, r0
 8001484:	460d      	mov	r5, r1
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <DHT11_waitForSignal+0xe8>)
 8001488:	78db      	ldrb	r3, [r3, #3]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f984 	bl	8000798 <__aeabi_i2d>
 8001490:	a30d      	add	r3, pc, #52	; (adr r3, 80014c8 <DHT11_waitForSignal+0xe0>)
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	f7fe ff03 	bl	80002a0 <__aeabi_dmul>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4620      	mov	r0, r4
 80014a0:	4629      	mov	r1, r5
 80014a2:	f7ff f82d 	bl	8000500 <__adddf3>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
	dht->checkSum = buffDht11[4];
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <DHT11_waitForSignal+0xe8>)
 80014b2:	791b      	ldrb	r3, [r3, #4]
 80014b4:	461a      	mov	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	619a      	str	r2, [r3, #24]
	DHT11_printBuff(dht);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f83a 	bl	8001534 <DHT11_printBuff>
}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bdb0      	pop	{r4, r5, r7, pc}
 80014c8:	9999999a 	.word	0x9999999a
 80014cc:	3fb99999 	.word	0x3fb99999
 80014d0:	20000314 	.word	0x20000314

080014d4 <DHT11_readNextBit>:

int DHT11_readNextBit(Dht11* dht)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SET_COUNTER(&htim16 , 0);
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <DHT11_readNextBit+0x58>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2200      	movs	r2, #0
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24
	while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == 1){
 80014e4:	bf00      	nop
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	889b      	ldrh	r3, [r3, #4]
 80014ee:	4619      	mov	r1, r3
 80014f0:	4610      	mov	r0, r2
 80014f2:	f001 f9d7 	bl	80028a4 <HAL_GPIO_ReadPin>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d0f4      	beq.n	80014e6 <DHT11_readNextBit+0x12>

	}
	oneBit <<= 1;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <DHT11_readNextBit+0x5c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <DHT11_readNextBit+0x5c>)
 8001506:	701a      	strb	r2, [r3, #0]
	if (__HAL_TIM_GET_COUNTER(&htim16) > 50){
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <DHT11_readNextBit+0x58>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	2b32      	cmp	r3, #50	; 0x32
 8001510:	d906      	bls.n	8001520 <DHT11_readNextBit+0x4c>
		oneBit |= 1;
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <DHT11_readNextBit+0x5c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <DHT11_readNextBit+0x5c>)
 800151e:	701a      	strb	r2, [r3, #0]
	}
	return oneBit;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <DHT11_readNextBit+0x5c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000484 	.word	0x20000484
 8001530:	20000319 	.word	0x20000319

08001534 <DHT11_printBuff>:

void DHT11_printBuff(Dht11* dht)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	printf ("--------------------------------- \n\r");
 800153c:	480f      	ldr	r0, [pc, #60]	; (800157c <DHT11_printBuff+0x48>)
 800153e:	f005 f9b9 	bl	80068b4 <iprintf>
	printf ("RH = %u.%u \n\r", buffDht11[0] , buffDht11[1]);
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <DHT11_printBuff+0x4c>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	4619      	mov	r1, r3
 8001548:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <DHT11_printBuff+0x4c>)
 800154a:	785b      	ldrb	r3, [r3, #1]
 800154c:	461a      	mov	r2, r3
 800154e:	480d      	ldr	r0, [pc, #52]	; (8001584 <DHT11_printBuff+0x50>)
 8001550:	f005 f9b0 	bl	80068b4 <iprintf>
	printf ("T = %u.%u \n\r", buffDht11[2] , buffDht11[3]);
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <DHT11_printBuff+0x4c>)
 8001556:	789b      	ldrb	r3, [r3, #2]
 8001558:	4619      	mov	r1, r3
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <DHT11_printBuff+0x4c>)
 800155c:	78db      	ldrb	r3, [r3, #3]
 800155e:	461a      	mov	r2, r3
 8001560:	4809      	ldr	r0, [pc, #36]	; (8001588 <DHT11_printBuff+0x54>)
 8001562:	f005 f9a7 	bl	80068b4 <iprintf>
	printf ("check sum = %d  \n\r", buffDht11[4]);
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <DHT11_printBuff+0x4c>)
 8001568:	791b      	ldrb	r3, [r3, #4]
 800156a:	4619      	mov	r1, r3
 800156c:	4807      	ldr	r0, [pc, #28]	; (800158c <DHT11_printBuff+0x58>)
 800156e:	f005 f9a1 	bl	80068b4 <iprintf>
//	printf ("RH = %f \n\r", dht->humidity);
//	printf ("T = %f \n\r", dht->temperature);
//	printf ("check sum = %d  \n\r", dht->checkSum);
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	08008360 	.word	0x08008360
 8001580:	20000314 	.word	0x20000314
 8001584:	08008388 	.word	0x08008388
 8001588:	08008398 	.word	0x08008398
 800158c:	080083a8 	.word	0x080083a8

08001590 <Led_init>:
#include <stdio.h>

extern TIM_HandleTypeDef htim4;

void Led_init(Led* led , GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	4613      	mov	r3, r2
 800159c:	80fb      	strh	r3, [r7, #6]
	led->state = STATE_OFF;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
	led->counter = 0 ;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2200      	movs	r2, #0
 80015a8:	605a      	str	r2, [r3, #4]
	led->GPIOx = GPIOx;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	609a      	str	r2, [r3, #8]
	led->GPIO_Pin = GPIO_Pin;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	819a      	strh	r2, [r3, #12]
}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <Led_on>:

void Led_on(Led* led)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
	led->state = STATE_ON;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 1);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6898      	ldr	r0, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	899b      	ldrh	r3, [r3, #12]
 80015d8:	2201      	movs	r2, #1
 80015da:	4619      	mov	r1, r3
 80015dc:	f001 f97a 	bl	80028d4 <HAL_GPIO_WritePin>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <Led_off>:

void Led_off(Led* led)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	led->state = STATE_OFF;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 0);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6898      	ldr	r0, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	899b      	ldrh	r3, [r3, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	4619      	mov	r1, r3
 8001602:	f001 f967 	bl	80028d4 <HAL_GPIO_WritePin>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <Led_blink>:

void Led_blink(Led* led, int period)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
	led->state = STATE_BLINKING;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2202      	movs	r2, #2
 800161c:	701a      	strb	r2, [r3, #0]
	led->period = period;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	611a      	str	r2, [r3, #16]
	led->counter = 0;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <Led_onTimerInterrupt>:

void Led_onTimerInterrupt(Led* led)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
	if(led->state == STATE_BLINKING){
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d115      	bne.n	8001672 <Led_onTimerInterrupt+0x3c>
		led->counter++;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	605a      	str	r2, [r3, #4]
		if((led->counter) >= (led->period) ){
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	db0a      	blt.n	8001672 <Led_onTimerInterrupt+0x3c>
			HAL_GPIO_TogglePin(led->GPIOx, led->GPIO_Pin);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	899b      	ldrh	r3, [r3, #12]
 8001664:	4619      	mov	r1, r3
 8001666:	4610      	mov	r0, r2
 8001668:	f001 f94c 	bl	8002904 <HAL_GPIO_TogglePin>
			led->counter = 0;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	605a      	str	r2, [r3, #4]

		}
	}
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <_write>:
Clock clock1;
Dht11 dht;

//////////////////////////////////////////////////////////////
int _write(int fd, char* ptr, int len)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	b29a      	uxth	r2, r3
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	4804      	ldr	r0, [pc, #16]	; (80016a4 <_write+0x28>)
 8001694:	f003 ff5c 	bl	8005550 <HAL_UART_Transmit>
	return len;
 8001698:	687b      	ldr	r3, [r7, #4]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200004d0 	.word	0x200004d0

080016a8 <HAL_TIM_PeriodElapsedCallback>:
//////////////////////////////////////////////////////////////

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d10e      	bne.n	80016d6 <HAL_TIM_PeriodElapsedCallback+0x2e>

    ////////////////led////////////////////////////////////
		Led_onTimerInterrupt(&ledB);
 80016b8:	480a      	ldr	r0, [pc, #40]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80016ba:	f7ff ffbc 	bl	8001636 <Led_onTimerInterrupt>
		Led_onTimerInterrupt(&ledR);
 80016be:	480a      	ldr	r0, [pc, #40]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80016c0:	f7ff ffb9 	bl	8001636 <Led_onTimerInterrupt>

	//////////////clock///////////////////////////////////
		Clock_onTimerInterrupt(&clock1);
 80016c4:	4809      	ldr	r0, [pc, #36]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x44>)
 80016c6:	f7ff fc5d 	bl	8000f84 <Clock_onTimerInterrupt>

	/////////////buzzer//////////////////////////////////
		Buzzer_onTimerInterrupt(&buzzer);
 80016ca:	4809      	ldr	r0, [pc, #36]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80016cc:	f7ff fb50 	bl	8000d70 <Buzzer_onTimerInterrupt>

	///////////button///////////////////////////////////
		Button_onTimerInterrupt(&button1);
 80016d0:	4808      	ldr	r0, [pc, #32]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80016d2:	f7ff fabd 	bl	8000c50 <Button_onTimerInterrupt>

	}
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000438 	.word	0x20000438
 80016e4:	20000330 	.word	0x20000330
 80016e8:	2000031c 	.word	0x2000031c
 80016ec:	2000036c 	.word	0x2000036c
 80016f0:	20000358 	.word	0x20000358
 80016f4:	20000344 	.word	0x20000344

080016f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
	Button_interrupt(&button1);
 8001702:	4803      	ldr	r0, [pc, #12]	; (8001710 <HAL_GPIO_EXTI_Callback+0x18>)
 8001704:	f7ff fa50 	bl	8000ba8 <Button_interrupt>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000344 	.word	0x20000344

08001714 <mainloop>:


void mainloop()
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8001718:	4815      	ldr	r0, [pc, #84]	; (8001770 <mainloop+0x5c>)
 800171a:	f002 fd05 	bl	8004128 <HAL_TIM_Base_Start_IT>

	Led_init(&ledB , LD2_GPIO_Port , LD2_Pin );
 800171e:	2220      	movs	r2, #32
 8001720:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001724:	4813      	ldr	r0, [pc, #76]	; (8001774 <mainloop+0x60>)
 8001726:	f7ff ff33 	bl	8001590 <Led_init>
	Led_init(&ledR , LD3_GPIO_Port , LD3_Pin );
 800172a:	2240      	movs	r2, #64	; 0x40
 800172c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001730:	4811      	ldr	r0, [pc, #68]	; (8001778 <mainloop+0x64>)
 8001732:	f7ff ff2d 	bl	8001590 <Led_init>
	Buzzer_init(&buzzer);
 8001736:	4811      	ldr	r0, [pc, #68]	; (800177c <mainloop+0x68>)
 8001738:	f7ff faac 	bl	8000c94 <Buzzer_init>
	Clock_init(&clock1);
 800173c:	4810      	ldr	r0, [pc, #64]	; (8001780 <mainloop+0x6c>)
 800173e:	f7ff fc07 	bl	8000f50 <Clock_init>
	Button_init(&button1, B2_GPIO_Port ,  B2_Pin);
 8001742:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001746:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800174a:	480e      	ldr	r0, [pc, #56]	; (8001784 <mainloop+0x70>)
 800174c:	f7ff fa10 	bl	8000b70 <Button_init>
	Cli_init();
 8001750:	f7ff fba4 	bl	8000e9c <Cli_init>
	DHT11_init(&dht);
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <mainloop+0x74>)
 8001756:	f7ff fd61 	bl	800121c <DHT11_init>
	DHT11_whrithPin(&dht);
 800175a:	480b      	ldr	r0, [pc, #44]	; (8001788 <mainloop+0x74>)
 800175c:	f7ff fdbe 	bl	80012dc <DHT11_whrithPin>

	while(1){
		if (Communication_commTask()){
 8001760:	f7ff fc4c 	bl	8000ffc <Communication_commTask>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0fa      	beq.n	8001760 <mainloop+0x4c>
			Communication_handleCommand();
 800176a:	f7ff fcc5 	bl	80010f8 <Communication_handleCommand>
		if (Communication_commTask()){
 800176e:	e7f7      	b.n	8001760 <mainloop+0x4c>
 8001770:	20000438 	.word	0x20000438
 8001774:	20000330 	.word	0x20000330
 8001778:	2000031c 	.word	0x2000031c
 800177c:	20000358 	.word	0x20000358
 8001780:	2000036c 	.word	0x2000036c
 8001784:	20000344 	.word	0x20000344
 8001788:	20000380 	.word	0x20000380

0800178c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001790:	f000 fcd2 	bl	8002138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001794:	f000 f80f 	bl	80017b6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001798:	f000 f99c 	bl	8001ad4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800179c:	f000 f96a 	bl	8001a74 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80017a0:	f000 f90c 	bl	80019bc <MX_TIM6_Init>
  MX_TIM3_Init();
 80017a4:	f000 f858 	bl	8001858 <MX_TIM3_Init>
  MX_TIM4_Init();
 80017a8:	f000 f8ae 	bl	8001908 <MX_TIM4_Init>
  MX_TIM16_Init();
 80017ac:	f000 f93c 	bl	8001a28 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  mainloop();
 80017b0:	f7ff ffb0 	bl	8001714 <mainloop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <main+0x28>

080017b6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b096      	sub	sp, #88	; 0x58
 80017ba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2244      	movs	r2, #68	; 0x44
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f005 f86d 	bl	80068a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ca:	463b      	mov	r3, r7
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017dc:	f001 f8d2 	bl	8002984 <HAL_PWREx_ControlVoltageScaling>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <SystemClock_Config+0x34>
  {
    Error_Handler();
 80017e6:	f000 fa07 	bl	8001bf8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ea:	2302      	movs	r3, #2
 80017ec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f4:	2310      	movs	r3, #16
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f8:	2302      	movs	r3, #2
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017fc:	2302      	movs	r3, #2
 80017fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001800:	2301      	movs	r3, #1
 8001802:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001804:	230a      	movs	r3, #10
 8001806:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001808:	2307      	movs	r3, #7
 800180a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800180c:	2302      	movs	r3, #2
 800180e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001810:	2302      	movs	r3, #2
 8001812:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4618      	mov	r0, r3
 800181a:	f001 f909 	bl	8002a30 <HAL_RCC_OscConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001824:	f000 f9e8 	bl	8001bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001828:	230f      	movs	r3, #15
 800182a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800182c:	2303      	movs	r3, #3
 800182e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800183c:	463b      	mov	r3, r7
 800183e:	2104      	movs	r1, #4
 8001840:	4618      	mov	r0, r3
 8001842:	f001 fcd1 	bl	80031e8 <HAL_RCC_ClockConfig>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800184c:	f000 f9d4 	bl	8001bf8 <Error_Handler>
  }
}
 8001850:	bf00      	nop
 8001852:	3758      	adds	r7, #88	; 0x58
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	; 0x28
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800186a:	463b      	mov	r3, r7
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
 8001878:	615a      	str	r2, [r3, #20]
 800187a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800187c:	4b20      	ldr	r3, [pc, #128]	; (8001900 <MX_TIM3_Init+0xa8>)
 800187e:	4a21      	ldr	r2, [pc, #132]	; (8001904 <MX_TIM3_Init+0xac>)
 8001880:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800;
 8001882:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <MX_TIM3_Init+0xa8>)
 8001884:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001888:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188a:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <MX_TIM3_Init+0xa8>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <MX_TIM3_Init+0xa8>)
 8001892:	2264      	movs	r2, #100	; 0x64
 8001894:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001896:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <MX_TIM3_Init+0xa8>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <MX_TIM3_Init+0xa8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018a2:	4817      	ldr	r0, [pc, #92]	; (8001900 <MX_TIM3_Init+0xa8>)
 80018a4:	f002 fcdf 	bl	8004266 <HAL_TIM_PWM_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80018ae:	f000 f9a3 	bl	8001bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	4619      	mov	r1, r3
 80018c0:	480f      	ldr	r0, [pc, #60]	; (8001900 <MX_TIM3_Init+0xa8>)
 80018c2:	f003 fd51 	bl	8005368 <HAL_TIMEx_MasterConfigSynchronization>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80018cc:	f000 f994 	bl	8001bf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d0:	2360      	movs	r3, #96	; 0x60
 80018d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 80018d4:	230a      	movs	r3, #10
 80018d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	4806      	ldr	r0, [pc, #24]	; (8001900 <MX_TIM3_Init+0xa8>)
 80018e8:	f003 f86c 	bl	80049c4 <HAL_TIM_PWM_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80018f2:	f000 f981 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200003a0 	.word	0x200003a0
 8001904:	40000400 	.word	0x40000400

08001908 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191a:	463b      	mov	r3, r7
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
 8001928:	615a      	str	r2, [r3, #20]
 800192a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800192c:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <MX_TIM4_Init+0xac>)
 800192e:	4a22      	ldr	r2, [pc, #136]	; (80019b8 <MX_TIM4_Init+0xb0>)
 8001930:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000;
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <MX_TIM4_Init+0xac>)
 8001934:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001938:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193a:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <MX_TIM4_Init+0xac>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001940:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <MX_TIM4_Init+0xac>)
 8001942:	2264      	movs	r2, #100	; 0x64
 8001944:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <MX_TIM4_Init+0xac>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <MX_TIM4_Init+0xac>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001952:	4818      	ldr	r0, [pc, #96]	; (80019b4 <MX_TIM4_Init+0xac>)
 8001954:	f002 fc87 	bl	8004266 <HAL_TIM_PWM_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800195e:	f000 f94b 	bl	8001bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	4619      	mov	r1, r3
 8001970:	4810      	ldr	r0, [pc, #64]	; (80019b4 <MX_TIM4_Init+0xac>)
 8001972:	f003 fcf9 	bl	8005368 <HAL_TIMEx_MasterConfigSynchronization>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800197c:	f000 f93c 	bl	8001bf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001980:	2360      	movs	r3, #96	; 0x60
 8001982:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30;
 8001984:	231e      	movs	r3, #30
 8001986:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001990:	463b      	mov	r3, r7
 8001992:	2200      	movs	r2, #0
 8001994:	4619      	mov	r1, r3
 8001996:	4807      	ldr	r0, [pc, #28]	; (80019b4 <MX_TIM4_Init+0xac>)
 8001998:	f003 f814 	bl	80049c4 <HAL_TIM_PWM_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80019a2:	f000 f929 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019a6:	4803      	ldr	r0, [pc, #12]	; (80019b4 <MX_TIM4_Init+0xac>)
 80019a8:	f000 fa00 	bl	8001dac <HAL_TIM_MspPostInit>

}
 80019ac:	bf00      	nop
 80019ae:	3728      	adds	r7, #40	; 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	200003ec 	.word	0x200003ec
 80019b8:	40000800 	.word	0x40000800

080019bc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_TIM6_Init+0x64>)
 80019ce:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <MX_TIM6_Init+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000;
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <MX_TIM6_Init+0x64>)
 80019d4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80019d8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_TIM6_Init+0x64>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_TIM6_Init+0x64>)
 80019e2:	220a      	movs	r2, #10
 80019e4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_TIM6_Init+0x64>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019ec:	480c      	ldr	r0, [pc, #48]	; (8001a20 <MX_TIM6_Init+0x64>)
 80019ee:	f002 fadb 	bl	8003fa8 <HAL_TIM_Base_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80019f8:	f000 f8fe 	bl	8001bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019fc:	2300      	movs	r3, #0
 80019fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	4619      	mov	r1, r3
 8001a08:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_TIM6_Init+0x64>)
 8001a0a:	f003 fcad 	bl	8005368 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001a14:	f000 f8f0 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000438 	.word	0x20000438
 8001a24:	40001000 	.word	0x40001000

08001a28 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <MX_TIM16_Init+0x44>)
 8001a2e:	4a10      	ldr	r2, [pc, #64]	; (8001a70 <MX_TIM16_Init+0x48>)
 8001a30:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <MX_TIM16_Init+0x44>)
 8001a34:	224f      	movs	r2, #79	; 0x4f
 8001a36:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <MX_TIM16_Init+0x44>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <MX_TIM16_Init+0x44>)
 8001a40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a44:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <MX_TIM16_Init+0x44>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <MX_TIM16_Init+0x44>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <MX_TIM16_Init+0x44>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001a58:	4804      	ldr	r0, [pc, #16]	; (8001a6c <MX_TIM16_Init+0x44>)
 8001a5a:	f002 faa5 	bl	8003fa8 <HAL_TIM_Base_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001a64:	f000 f8c8 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000484 	.word	0x20000484
 8001a70:	40014400 	.word	0x40014400

08001a74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001a7a:	4a15      	ldr	r2, [pc, #84]	; (8001ad0 <MX_USART2_UART_Init+0x5c>)
 8001a7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001ab8:	f003 fcfc 	bl	80054b4 <HAL_UART_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ac2:	f000 f899 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200004d0 	.word	0x200004d0
 8001ad0:	40004400 	.word	0x40004400

08001ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aea:	4b40      	ldr	r3, [pc, #256]	; (8001bec <MX_GPIO_Init+0x118>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	4a3f      	ldr	r2, [pc, #252]	; (8001bec <MX_GPIO_Init+0x118>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af6:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <MX_GPIO_Init+0x118>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b02:	4b3a      	ldr	r3, [pc, #232]	; (8001bec <MX_GPIO_Init+0x118>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	4a39      	ldr	r2, [pc, #228]	; (8001bec <MX_GPIO_Init+0x118>)
 8001b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b0e:	4b37      	ldr	r3, [pc, #220]	; (8001bec <MX_GPIO_Init+0x118>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	4b34      	ldr	r3, [pc, #208]	; (8001bec <MX_GPIO_Init+0x118>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	4a33      	ldr	r2, [pc, #204]	; (8001bec <MX_GPIO_Init+0x118>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b26:	4b31      	ldr	r3, [pc, #196]	; (8001bec <MX_GPIO_Init+0x118>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <MX_GPIO_Init+0x118>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	4a2d      	ldr	r2, [pc, #180]	; (8001bec <MX_GPIO_Init+0x118>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3e:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <MX_GPIO_Init+0x118>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2160      	movs	r1, #96	; 0x60
 8001b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b52:	f000 febf 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2120      	movs	r1, #32
 8001b5a:	4825      	ldr	r0, [pc, #148]	; (8001bf0 <MX_GPIO_Init+0x11c>)
 8001b5c:	f000 feba 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b66:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4619      	mov	r1, r3
 8001b76:	481f      	ldr	r0, [pc, #124]	; (8001bf4 <MX_GPIO_Init+0x120>)
 8001b78:	f000 fcea 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 8001b7c:	2360      	movs	r3, #96	; 0x60
 8001b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b80:	2301      	movs	r3, #1
 8001b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b96:	f000 fcdb 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8001b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ba0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb4:	f000 fccc 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_Pin */
  GPIO_InitStruct.Pin = D4_Pin;
 8001bb8:	2320      	movs	r3, #32
 8001bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4808      	ldr	r0, [pc, #32]	; (8001bf0 <MX_GPIO_Init+0x11c>)
 8001bd0:	f000 fcbe 	bl	8002550 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2028      	movs	r0, #40	; 0x28
 8001bda:	f000 fc04 	bl	80023e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bde:	2028      	movs	r0, #40	; 0x28
 8001be0:	f000 fc1d 	bl	800241e <HAL_NVIC_EnableIRQ>

}
 8001be4:	bf00      	nop
 8001be6:	3728      	adds	r7, #40	; 0x28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	48000400 	.word	0x48000400
 8001bf4:	48000800 	.word	0x48000800

08001bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bfc:	b672      	cpsid	i
}
 8001bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <Error_Handler+0x8>
	...

08001c04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_MspInit+0x60>)
 8001c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0e:	4a15      	ldr	r2, [pc, #84]	; (8001c64 <HAL_MspInit+0x60>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6613      	str	r3, [r2, #96]	; 0x60
 8001c16:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <HAL_MspInit+0x60>)
 8001c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <HAL_MspInit+0x60>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c26:	4a0f      	ldr	r2, [pc, #60]	; (8001c64 <HAL_MspInit+0x60>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <HAL_MspInit+0x60>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	2005      	movs	r0, #5
 8001c40:	f000 fbd1 	bl	80023e6 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001c44:	2005      	movs	r0, #5
 8001c46:	f000 fbea 	bl	800241e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	2005      	movs	r0, #5
 8001c50:	f000 fbc9 	bl	80023e6 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001c54:	2005      	movs	r0, #5
 8001c56:	f000 fbe2 	bl	800241e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000

08001c68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM3)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a28      	ldr	r2, [pc, #160]	; (8001d28 <HAL_TIM_PWM_MspInit+0xc0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d130      	bne.n	8001cec <HAL_TIM_PWM_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c8a:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <HAL_TIM_PWM_MspInit+0xc4>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	4a27      	ldr	r2, [pc, #156]	; (8001d2c <HAL_TIM_PWM_MspInit+0xc4>)
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	6593      	str	r3, [r2, #88]	; 0x58
 8001c96:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <HAL_TIM_PWM_MspInit+0xc4>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <HAL_TIM_PWM_MspInit+0xc4>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	4a21      	ldr	r2, [pc, #132]	; (8001d2c <HAL_TIM_PWM_MspInit+0xc4>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cae:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <HAL_TIM_PWM_MspInit+0xc4>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cba:	2310      	movs	r3, #16
 8001cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4816      	ldr	r0, [pc, #88]	; (8001d30 <HAL_TIM_PWM_MspInit+0xc8>)
 8001cd6:	f000 fc3b 	bl	8002550 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2100      	movs	r1, #0
 8001cde:	201d      	movs	r0, #29
 8001ce0:	f000 fb81 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ce4:	201d      	movs	r0, #29
 8001ce6:	f000 fb9a 	bl	800241e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001cea:	e018      	b.n	8001d1e <HAL_TIM_PWM_MspInit+0xb6>
  else if(htim_pwm->Instance==TIM4)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a10      	ldr	r2, [pc, #64]	; (8001d34 <HAL_TIM_PWM_MspInit+0xcc>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d113      	bne.n	8001d1e <HAL_TIM_PWM_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <HAL_TIM_PWM_MspInit+0xc4>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfa:	4a0c      	ldr	r2, [pc, #48]	; (8001d2c <HAL_TIM_PWM_MspInit+0xc4>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6593      	str	r3, [r2, #88]	; 0x58
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_TIM_PWM_MspInit+0xc4>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	201e      	movs	r0, #30
 8001d14:	f000 fb67 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d18:	201e      	movs	r0, #30
 8001d1a:	f000 fb80 	bl	800241e <HAL_NVIC_EnableIRQ>
}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	; 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	48000400 	.word	0x48000400
 8001d34:	40000800 	.word	0x40000800

08001d38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a16      	ldr	r2, [pc, #88]	; (8001da0 <HAL_TIM_Base_MspInit+0x68>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d114      	bne.n	8001d74 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	4a15      	ldr	r2, [pc, #84]	; (8001da4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d50:	f043 0310 	orr.w	r3, r3, #16
 8001d54:	6593      	str	r3, [r2, #88]	; 0x58
 8001d56:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	2036      	movs	r0, #54	; 0x36
 8001d68:	f000 fb3d 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d6c:	2036      	movs	r0, #54	; 0x36
 8001d6e:	f000 fb56 	bl	800241e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001d72:	e010      	b.n	8001d96 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <HAL_TIM_Base_MspInit+0x70>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d10b      	bne.n	8001d96 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d82:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d88:	6613      	str	r3, [r2, #96]	; 0x60
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40001000 	.word	0x40001000
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40014400 	.word	0x40014400

08001dac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a11      	ldr	r2, [pc, #68]	; (8001e10 <HAL_TIM_MspPostInit+0x64>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d11b      	bne.n	8001e06 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <HAL_TIM_MspPostInit+0x68>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <HAL_TIM_MspPostInit+0x68>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <HAL_TIM_MspPostInit+0x68>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001de6:	2340      	movs	r3, #64	; 0x40
 8001de8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001df6:	2302      	movs	r3, #2
 8001df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <HAL_TIM_MspPostInit+0x6c>)
 8001e02:	f000 fba5 	bl	8002550 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e06:	bf00      	nop
 8001e08:	3720      	adds	r7, #32
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40000800 	.word	0x40000800
 8001e14:	40021000 	.word	0x40021000
 8001e18:	48000400 	.word	0x48000400

08001e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b0ac      	sub	sp, #176	; 0xb0
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	2288      	movs	r2, #136	; 0x88
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f004 fd31 	bl	80068a4 <memset>
  if(huart->Instance==USART2)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a25      	ldr	r2, [pc, #148]	; (8001edc <HAL_UART_MspInit+0xc0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d143      	bne.n	8001ed4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e50:	2300      	movs	r3, #0
 8001e52:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f001 fbe9 	bl	8003630 <HAL_RCCEx_PeriphCLKConfig>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e64:	f7ff fec8 	bl	8001bf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e68:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_UART_MspInit+0xc4>)
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <HAL_UART_MspInit+0xc4>)
 8001e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e72:	6593      	str	r3, [r2, #88]	; 0x58
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <HAL_UART_MspInit+0xc4>)
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <HAL_UART_MspInit+0xc4>)
 8001e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e84:	4a16      	ldr	r2, [pc, #88]	; (8001ee0 <HAL_UART_MspInit+0xc4>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <HAL_UART_MspInit+0xc4>)
 8001e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e98:	230c      	movs	r3, #12
 8001e9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eb0:	2307      	movs	r3, #7
 8001eb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec0:	f000 fb46 	bl	8002550 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	2026      	movs	r0, #38	; 0x26
 8001eca:	f000 fa8c 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ece:	2026      	movs	r0, #38	; 0x26
 8001ed0:	f000 faa5 	bl	800241e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ed4:	bf00      	nop
 8001ed6:	37b0      	adds	r7, #176	; 0xb0
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40004400 	.word	0x40004400
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <NMI_Handler+0x4>

08001eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eee:	e7fe      	b.n	8001eee <HardFault_Handler+0x4>

08001ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <MemManage_Handler+0x4>

08001ef6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001efa:	e7fe      	b.n	8001efa <BusFault_Handler+0x4>

08001efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <UsageFault_Handler+0x4>

08001f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f30:	f000 f95e 	bl	80021f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <TIM3_IRQHandler+0x10>)
 8001f4e:	f002 fc19 	bl	8004784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200003a0 	.word	0x200003a0

08001f5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <TIM4_IRQHandler+0x10>)
 8001f62:	f002 fc0f 	bl	8004784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200003ec 	.word	0x200003ec

08001f70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <USART2_IRQHandler+0x10>)
 8001f76:	f003 fc51 	bl	800581c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200004d0 	.word	0x200004d0

08001f84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8001f88:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f8c:	f000 fcd4 	bl	8002938 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001f90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f94:	f000 fcd0 	bl	8002938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <TIM6_DAC_IRQHandler+0x10>)
 8001fa2:	f002 fbef 	bl	8004784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000438 	.word	0x20000438

08001fb0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	e00a      	b.n	8001fd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fc2:	f3af 8000 	nop.w
 8001fc6:	4601      	mov	r1, r0
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	60ba      	str	r2, [r7, #8]
 8001fce:	b2ca      	uxtb	r2, r1
 8001fd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	dbf0      	blt.n	8001fc2 <_read+0x12>
	}

return len;
 8001fe0:	687b      	ldr	r3, [r7, #4]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <_close>:
	}
	return len;
}

int _close(int file)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002012:	605a      	str	r2, [r3, #4]
	return 0;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <_isatty>:

int _isatty(int file)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
	return 1;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
	return 0;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800205c:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <_sbrk+0x5c>)
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <_sbrk+0x60>)
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <_sbrk+0x64>)
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <_sbrk+0x68>)
 8002074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	429a      	cmp	r2, r3
 8002082:	d207      	bcs.n	8002094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002084:	f004 fbe4 	bl	8006850 <__errno>
 8002088:	4603      	mov	r3, r0
 800208a:	220c      	movs	r2, #12
 800208c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	e009      	b.n	80020a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <_sbrk+0x64>)
 80020a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020a6:	68fb      	ldr	r3, [r7, #12]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20018000 	.word	0x20018000
 80020b4:	00000400 	.word	0x00000400
 80020b8:	20000554 	.word	0x20000554
 80020bc:	20000570 	.word	0x20000570

080020c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <SystemInit+0x20>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ca:	4a05      	ldr	r2, [pc, #20]	; (80020e0 <SystemInit+0x20>)
 80020cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800211c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020e8:	f7ff ffea 	bl	80020c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020ec:	480c      	ldr	r0, [pc, #48]	; (8002120 <LoopForever+0x6>)
  ldr r1, =_edata
 80020ee:	490d      	ldr	r1, [pc, #52]	; (8002124 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020f0:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <LoopForever+0xe>)
  movs r3, #0
 80020f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f4:	e002      	b.n	80020fc <LoopCopyDataInit>

080020f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020fa:	3304      	adds	r3, #4

080020fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002100:	d3f9      	bcc.n	80020f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002104:	4c0a      	ldr	r4, [pc, #40]	; (8002130 <LoopForever+0x16>)
  movs r3, #0
 8002106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002108:	e001      	b.n	800210e <LoopFillZerobss>

0800210a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800210a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800210c:	3204      	adds	r2, #4

0800210e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800210e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002110:	d3fb      	bcc.n	800210a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002112:	f004 fba3 	bl	800685c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002116:	f7ff fb39 	bl	800178c <main>

0800211a <LoopForever>:

LoopForever:
    b LoopForever
 800211a:	e7fe      	b.n	800211a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800211c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002124:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8002128:	080085d8 	.word	0x080085d8
  ldr r2, =_sbss
 800212c:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8002130:	2000056c 	.word	0x2000056c

08002134 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002134:	e7fe      	b.n	8002134 <ADC1_2_IRQHandler>
	...

08002138 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002142:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <HAL_Init+0x3c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a0b      	ldr	r2, [pc, #44]	; (8002174 <HAL_Init+0x3c>)
 8002148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800214e:	2003      	movs	r0, #3
 8002150:	f000 f93e 	bl	80023d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002154:	2000      	movs	r0, #0
 8002156:	f000 f80f 	bl	8002178 <HAL_InitTick>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	71fb      	strb	r3, [r7, #7]
 8002164:	e001      	b.n	800216a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002166:	f7ff fd4d 	bl	8001c04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800216a:	79fb      	ldrb	r3, [r7, #7]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40022000 	.word	0x40022000

08002178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002184:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <HAL_InitTick+0x6c>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d023      	beq.n	80021d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800218c:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <HAL_InitTick+0x70>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <HAL_InitTick+0x6c>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4619      	mov	r1, r3
 8002196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219a:	fbb3 f3f1 	udiv	r3, r3, r1
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f949 	bl	800243a <HAL_SYSTICK_Config>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10f      	bne.n	80021ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b0f      	cmp	r3, #15
 80021b2:	d809      	bhi.n	80021c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b4:	2200      	movs	r2, #0
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	f000 f913 	bl	80023e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021c0:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_InitTick+0x74>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e007      	b.n	80021d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e004      	b.n	80021d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
 80021d2:	e001      	b.n	80021d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200000c8 	.word	0x200000c8
 80021e8:	200000c0 	.word	0x200000c0
 80021ec:	200000c4 	.word	0x200000c4

080021f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_IncTick+0x20>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x24>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <HAL_IncTick+0x24>)
 8002202:	6013      	str	r3, [r2, #0]
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	200000c8 	.word	0x200000c8
 8002214:	20000558 	.word	0x20000558

08002218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return uwTick;
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <HAL_GetTick+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000558 	.word	0x20000558

08002230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800224c:	4013      	ands	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800225c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002262:	4a04      	ldr	r2, [pc, #16]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	60d3      	str	r3, [r2, #12]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <__NVIC_GetPriorityGrouping+0x18>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	f003 0307 	and.w	r3, r3, #7
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	db0b      	blt.n	80022be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	4907      	ldr	r1, [pc, #28]	; (80022cc <__NVIC_EnableIRQ+0x38>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	095b      	lsrs	r3, r3, #5
 80022b4:	2001      	movs	r0, #1
 80022b6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000e100 	.word	0xe000e100

080022d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	db0a      	blt.n	80022fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	490c      	ldr	r1, [pc, #48]	; (800231c <__NVIC_SetPriority+0x4c>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	440b      	add	r3, r1
 80022f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f8:	e00a      	b.n	8002310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4908      	ldr	r1, [pc, #32]	; (8002320 <__NVIC_SetPriority+0x50>)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	3b04      	subs	r3, #4
 8002308:	0112      	lsls	r2, r2, #4
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	440b      	add	r3, r1
 800230e:	761a      	strb	r2, [r3, #24]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000e100 	.word	0xe000e100
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f1c3 0307 	rsb	r3, r3, #7
 800233e:	2b04      	cmp	r3, #4
 8002340:	bf28      	it	cs
 8002342:	2304      	movcs	r3, #4
 8002344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3304      	adds	r3, #4
 800234a:	2b06      	cmp	r3, #6
 800234c:	d902      	bls.n	8002354 <NVIC_EncodePriority+0x30>
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3b03      	subs	r3, #3
 8002352:	e000      	b.n	8002356 <NVIC_EncodePriority+0x32>
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	f04f 32ff 	mov.w	r2, #4294967295
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43da      	mvns	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	401a      	ands	r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800236c:	f04f 31ff 	mov.w	r1, #4294967295
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	43d9      	mvns	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	4313      	orrs	r3, r2
         );
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800239c:	d301      	bcc.n	80023a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239e:	2301      	movs	r3, #1
 80023a0:	e00f      	b.n	80023c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a2:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <SysTick_Config+0x40>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023aa:	210f      	movs	r1, #15
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	f7ff ff8e 	bl	80022d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <SysTick_Config+0x40>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ba:	4b04      	ldr	r3, [pc, #16]	; (80023cc <SysTick_Config+0x40>)
 80023bc:	2207      	movs	r2, #7
 80023be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	e000e010 	.word	0xe000e010

080023d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ff29 	bl	8002230 <__NVIC_SetPriorityGrouping>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023f8:	f7ff ff3e 	bl	8002278 <__NVIC_GetPriorityGrouping>
 80023fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	f7ff ff8e 	bl	8002324 <NVIC_EncodePriority>
 8002408:	4602      	mov	r2, r0
 800240a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff5d 	bl	80022d0 <__NVIC_SetPriority>
}
 8002416:	bf00      	nop
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff31 	bl	8002294 <__NVIC_EnableIRQ>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ffa2 	bl	800238c <SysTick_Config>
 8002448:	4603      	mov	r3, r0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d008      	beq.n	800247c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2204      	movs	r2, #4
 800246e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e022      	b.n	80024c2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 020e 	bic.w	r2, r2, #14
 800248a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a0:	f003 021c 	and.w	r2, r3, #28
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	2101      	movs	r1, #1
 80024aa:	fa01 f202 	lsl.w	r2, r1, r2
 80024ae:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b084      	sub	sp, #16
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d005      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2204      	movs	r2, #4
 80024ea:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
 80024f0:	e029      	b.n	8002546 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 020e 	bic.w	r2, r2, #14
 8002500:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0201 	bic.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f003 021c 	and.w	r2, r3, #28
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	2101      	movs	r1, #1
 8002520:	fa01 f202 	lsl.w	r2, r1, r2
 8002524:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	4798      	blx	r3
    }
  }
  return status;
 8002546:	7bfb      	ldrb	r3, [r7, #15]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255e:	e17f      	b.n	8002860 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	2101      	movs	r1, #1
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	fa01 f303 	lsl.w	r3, r1, r3
 800256c:	4013      	ands	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8171 	beq.w	800285a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d005      	beq.n	8002590 <HAL_GPIO_Init+0x40>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d130      	bne.n	80025f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025c6:	2201      	movs	r2, #1
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	f003 0201 	and.w	r2, r3, #1
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d118      	bne.n	8002630 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002604:	2201      	movs	r2, #1
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	08db      	lsrs	r3, r3, #3
 800261a:	f003 0201 	and.w	r2, r3, #1
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b03      	cmp	r3, #3
 800263a:	d017      	beq.n	800266c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	2203      	movs	r2, #3
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d123      	bne.n	80026c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	08da      	lsrs	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3208      	adds	r2, #8
 8002680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	220f      	movs	r2, #15
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	08da      	lsrs	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3208      	adds	r2, #8
 80026ba:	6939      	ldr	r1, [r7, #16]
 80026bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 0203 	and.w	r2, r3, #3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80ac 	beq.w	800285a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002702:	4b5f      	ldr	r3, [pc, #380]	; (8002880 <HAL_GPIO_Init+0x330>)
 8002704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002706:	4a5e      	ldr	r2, [pc, #376]	; (8002880 <HAL_GPIO_Init+0x330>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6613      	str	r3, [r2, #96]	; 0x60
 800270e:	4b5c      	ldr	r3, [pc, #368]	; (8002880 <HAL_GPIO_Init+0x330>)
 8002710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800271a:	4a5a      	ldr	r2, [pc, #360]	; (8002884 <HAL_GPIO_Init+0x334>)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	3302      	adds	r3, #2
 8002722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002726:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	220f      	movs	r2, #15
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002744:	d025      	beq.n	8002792 <HAL_GPIO_Init+0x242>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a4f      	ldr	r2, [pc, #316]	; (8002888 <HAL_GPIO_Init+0x338>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d01f      	beq.n	800278e <HAL_GPIO_Init+0x23e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4e      	ldr	r2, [pc, #312]	; (800288c <HAL_GPIO_Init+0x33c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d019      	beq.n	800278a <HAL_GPIO_Init+0x23a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a4d      	ldr	r2, [pc, #308]	; (8002890 <HAL_GPIO_Init+0x340>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <HAL_GPIO_Init+0x236>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a4c      	ldr	r2, [pc, #304]	; (8002894 <HAL_GPIO_Init+0x344>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00d      	beq.n	8002782 <HAL_GPIO_Init+0x232>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a4b      	ldr	r2, [pc, #300]	; (8002898 <HAL_GPIO_Init+0x348>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <HAL_GPIO_Init+0x22e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a4a      	ldr	r2, [pc, #296]	; (800289c <HAL_GPIO_Init+0x34c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d101      	bne.n	800277a <HAL_GPIO_Init+0x22a>
 8002776:	2306      	movs	r3, #6
 8002778:	e00c      	b.n	8002794 <HAL_GPIO_Init+0x244>
 800277a:	2307      	movs	r3, #7
 800277c:	e00a      	b.n	8002794 <HAL_GPIO_Init+0x244>
 800277e:	2305      	movs	r3, #5
 8002780:	e008      	b.n	8002794 <HAL_GPIO_Init+0x244>
 8002782:	2304      	movs	r3, #4
 8002784:	e006      	b.n	8002794 <HAL_GPIO_Init+0x244>
 8002786:	2303      	movs	r3, #3
 8002788:	e004      	b.n	8002794 <HAL_GPIO_Init+0x244>
 800278a:	2302      	movs	r3, #2
 800278c:	e002      	b.n	8002794 <HAL_GPIO_Init+0x244>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_GPIO_Init+0x244>
 8002792:	2300      	movs	r3, #0
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	f002 0203 	and.w	r2, r2, #3
 800279a:	0092      	lsls	r2, r2, #2
 800279c:	4093      	lsls	r3, r2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027a4:	4937      	ldr	r1, [pc, #220]	; (8002884 <HAL_GPIO_Init+0x334>)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	089b      	lsrs	r3, r3, #2
 80027aa:	3302      	adds	r3, #2
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027b2:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <HAL_GPIO_Init+0x350>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027d6:	4a32      	ldr	r2, [pc, #200]	; (80028a0 <HAL_GPIO_Init+0x350>)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027dc:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <HAL_GPIO_Init+0x350>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002800:	4a27      	ldr	r2, [pc, #156]	; (80028a0 <HAL_GPIO_Init+0x350>)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002806:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <HAL_GPIO_Init+0x350>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800282a:	4a1d      	ldr	r2, [pc, #116]	; (80028a0 <HAL_GPIO_Init+0x350>)
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002830:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <HAL_GPIO_Init+0x350>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	43db      	mvns	r3, r3
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002854:	4a12      	ldr	r2, [pc, #72]	; (80028a0 <HAL_GPIO_Init+0x350>)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3301      	adds	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa22 f303 	lsr.w	r3, r2, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	f47f ae78 	bne.w	8002560 <HAL_GPIO_Init+0x10>
  }
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	371c      	adds	r7, #28
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	40010000 	.word	0x40010000
 8002888:	48000400 	.word	0x48000400
 800288c:	48000800 	.word	0x48000800
 8002890:	48000c00 	.word	0x48000c00
 8002894:	48001000 	.word	0x48001000
 8002898:	48001400 	.word	0x48001400
 800289c:	48001800 	.word	0x48001800
 80028a0:	40010400 	.word	0x40010400

080028a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	887b      	ldrh	r3, [r7, #2]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
 80028c0:	e001      	b.n	80028c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
 80028e0:	4613      	mov	r3, r2
 80028e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e4:	787b      	ldrb	r3, [r7, #1]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028f0:	e002      	b.n	80028f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002916:	887a      	ldrh	r2, [r7, #2]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4013      	ands	r3, r2
 800291c:	041a      	lsls	r2, r3, #16
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	43d9      	mvns	r1, r3
 8002922:	887b      	ldrh	r3, [r7, #2]
 8002924:	400b      	ands	r3, r1
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	619a      	str	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002942:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	4013      	ands	r3, r2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d006      	beq.n	800295c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800294e:	4a05      	ldr	r2, [pc, #20]	; (8002964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fece 	bl	80016f8 <HAL_GPIO_EXTI_Callback>
  }
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40010400 	.word	0x40010400

08002968 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <HAL_PWREx_GetVoltageRange+0x18>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40007000 	.word	0x40007000

08002984 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002992:	d130      	bne.n	80029f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002994:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800299c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029a0:	d038      	beq.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029aa:	4a1e      	ldr	r2, [pc, #120]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029b2:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2232      	movs	r2, #50	; 0x32
 80029b8:	fb02 f303 	mul.w	r3, r2, r3
 80029bc:	4a1b      	ldr	r2, [pc, #108]	; (8002a2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	0c9b      	lsrs	r3, r3, #18
 80029c4:	3301      	adds	r3, #1
 80029c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029c8:	e002      	b.n	80029d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029d0:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029dc:	d102      	bne.n	80029e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1f2      	bne.n	80029ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f0:	d110      	bne.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e00f      	b.n	8002a16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029f6:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a02:	d007      	beq.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a04:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a0c:	4a05      	ldr	r2, [pc, #20]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40007000 	.word	0x40007000
 8002a28:	200000c0 	.word	0x200000c0
 8002a2c:	431bde83 	.word	0x431bde83

08002a30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e3ca      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a42:	4b97      	ldr	r3, [pc, #604]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a4c:	4b94      	ldr	r3, [pc, #592]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 80e4 	beq.w	8002c2c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d007      	beq.n	8002a7a <HAL_RCC_OscConfig+0x4a>
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2b0c      	cmp	r3, #12
 8002a6e:	f040 808b 	bne.w	8002b88 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	f040 8087 	bne.w	8002b88 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a7a:	4b89      	ldr	r3, [pc, #548]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_RCC_OscConfig+0x62>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e3a2      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1a      	ldr	r2, [r3, #32]
 8002a96:	4b82      	ldr	r3, [pc, #520]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d004      	beq.n	8002aac <HAL_RCC_OscConfig+0x7c>
 8002aa2:	4b7f      	ldr	r3, [pc, #508]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aaa:	e005      	b.n	8002ab8 <HAL_RCC_OscConfig+0x88>
 8002aac:	4b7c      	ldr	r3, [pc, #496]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d223      	bcs.n	8002b04 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 fd55 	bl	8003570 <RCC_SetFlashLatencyFromMSIRange>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e383      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ad0:	4b73      	ldr	r3, [pc, #460]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a72      	ldr	r2, [pc, #456]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002ad6:	f043 0308 	orr.w	r3, r3, #8
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b70      	ldr	r3, [pc, #448]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	496d      	ldr	r1, [pc, #436]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aee:	4b6c      	ldr	r3, [pc, #432]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	4968      	ldr	r1, [pc, #416]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]
 8002b02:	e025      	b.n	8002b50 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b04:	4b66      	ldr	r3, [pc, #408]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a65      	ldr	r2, [pc, #404]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b0a:	f043 0308 	orr.w	r3, r3, #8
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	4b63      	ldr	r3, [pc, #396]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	4960      	ldr	r1, [pc, #384]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b22:	4b5f      	ldr	r3, [pc, #380]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	021b      	lsls	r3, r3, #8
 8002b30:	495b      	ldr	r1, [pc, #364]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d109      	bne.n	8002b50 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 fd15 	bl	8003570 <RCC_SetFlashLatencyFromMSIRange>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e343      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b50:	f000 fc4a 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b52      	ldr	r3, [pc, #328]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	4950      	ldr	r1, [pc, #320]	; (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002b62:	5ccb      	ldrb	r3, [r1, r3]
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6c:	4a4e      	ldr	r2, [pc, #312]	; (8002ca8 <HAL_RCC_OscConfig+0x278>)
 8002b6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b70:	4b4e      	ldr	r3, [pc, #312]	; (8002cac <HAL_RCC_OscConfig+0x27c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff faff 	bl	8002178 <HAL_InitTick>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d052      	beq.n	8002c2a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	e327      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d032      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b90:	4b43      	ldr	r3, [pc, #268]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a42      	ldr	r2, [pc, #264]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b9c:	f7ff fb3c 	bl	8002218 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ba4:	f7ff fb38 	bl	8002218 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e310      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bb6:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bc2:	4b37      	ldr	r3, [pc, #220]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a36      	ldr	r2, [pc, #216]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bc8:	f043 0308 	orr.w	r3, r3, #8
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	4b34      	ldr	r3, [pc, #208]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	4931      	ldr	r1, [pc, #196]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002be0:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	492c      	ldr	r1, [pc, #176]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
 8002bf4:	e01a      	b.n	8002c2c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bf6:	4b2a      	ldr	r3, [pc, #168]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a29      	ldr	r2, [pc, #164]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c02:	f7ff fb09 	bl	8002218 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c0a:	f7ff fb05 	bl	8002218 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e2dd      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c1c:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1f0      	bne.n	8002c0a <HAL_RCC_OscConfig+0x1da>
 8002c28:	e000      	b.n	8002c2c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d074      	beq.n	8002d22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d005      	beq.n	8002c4a <HAL_RCC_OscConfig+0x21a>
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	2b0c      	cmp	r3, #12
 8002c42:	d10e      	bne.n	8002c62 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d10b      	bne.n	8002c62 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d064      	beq.n	8002d20 <HAL_RCC_OscConfig+0x2f0>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d160      	bne.n	8002d20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e2ba      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c6a:	d106      	bne.n	8002c7a <HAL_RCC_OscConfig+0x24a>
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	e026      	b.n	8002cc8 <HAL_RCC_OscConfig+0x298>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c82:	d115      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x280>
 8002c84:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a05      	ldr	r2, [pc, #20]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a02      	ldr	r2, [pc, #8]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	e014      	b.n	8002cc8 <HAL_RCC_OscConfig+0x298>
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	080083c8 	.word	0x080083c8
 8002ca8:	200000c0 	.word	0x200000c0
 8002cac:	200000c4 	.word	0x200000c4
 8002cb0:	4ba0      	ldr	r3, [pc, #640]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a9f      	ldr	r2, [pc, #636]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b9d      	ldr	r3, [pc, #628]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a9c      	ldr	r2, [pc, #624]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d013      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7ff faa2 	bl	8002218 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7ff fa9e 	bl	8002218 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	; 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e276      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cea:	4b92      	ldr	r3, [pc, #584]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x2a8>
 8002cf6:	e014      	b.n	8002d22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7ff fa8e 	bl	8002218 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d00:	f7ff fa8a 	bl	8002218 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e262      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d12:	4b88      	ldr	r3, [pc, #544]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x2d0>
 8002d1e:	e000      	b.n	8002d22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d060      	beq.n	8002df0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_OscConfig+0x310>
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	2b0c      	cmp	r3, #12
 8002d38:	d119      	bne.n	8002d6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d116      	bne.n	8002d6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d40:	4b7c      	ldr	r3, [pc, #496]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_OscConfig+0x328>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e23f      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	4b76      	ldr	r3, [pc, #472]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	061b      	lsls	r3, r3, #24
 8002d66:	4973      	ldr	r1, [pc, #460]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d6c:	e040      	b.n	8002df0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d023      	beq.n	8002dbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d76:	4b6f      	ldr	r3, [pc, #444]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a6e      	ldr	r2, [pc, #440]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d82:	f7ff fa49 	bl	8002218 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8a:	f7ff fa45 	bl	8002218 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e21d      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d9c:	4b65      	ldr	r3, [pc, #404]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da8:	4b62      	ldr	r3, [pc, #392]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	061b      	lsls	r3, r3, #24
 8002db6:	495f      	ldr	r1, [pc, #380]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	604b      	str	r3, [r1, #4]
 8002dbc:	e018      	b.n	8002df0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dbe:	4b5d      	ldr	r3, [pc, #372]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5c      	ldr	r2, [pc, #368]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dca:	f7ff fa25 	bl	8002218 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd2:	f7ff fa21 	bl	8002218 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e1f9      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002de4:	4b53      	ldr	r3, [pc, #332]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f0      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d03c      	beq.n	8002e76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01c      	beq.n	8002e3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e04:	4b4b      	ldr	r3, [pc, #300]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0a:	4a4a      	ldr	r2, [pc, #296]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e14:	f7ff fa00 	bl	8002218 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e1c:	f7ff f9fc 	bl	8002218 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e1d4      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e2e:	4b41      	ldr	r3, [pc, #260]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0ef      	beq.n	8002e1c <HAL_RCC_OscConfig+0x3ec>
 8002e3c:	e01b      	b.n	8002e76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e3e:	4b3d      	ldr	r3, [pc, #244]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e44:	4a3b      	ldr	r2, [pc, #236]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002e46:	f023 0301 	bic.w	r3, r3, #1
 8002e4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4e:	f7ff f9e3 	bl	8002218 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e56:	f7ff f9df 	bl	8002218 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e1b7      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e68:	4b32      	ldr	r3, [pc, #200]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1ef      	bne.n	8002e56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 80a6 	beq.w	8002fd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e84:	2300      	movs	r3, #0
 8002e86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e88:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10d      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e94:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e98:	4a26      	ldr	r2, [pc, #152]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002ea0:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eac:	2301      	movs	r3, #1
 8002eae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb0:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <HAL_RCC_OscConfig+0x508>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d118      	bne.n	8002eee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <HAL_RCC_OscConfig+0x508>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <HAL_RCC_OscConfig+0x508>)
 8002ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec8:	f7ff f9a6 	bl	8002218 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed0:	f7ff f9a2 	bl	8002218 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e17a      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <HAL_RCC_OscConfig+0x508>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d108      	bne.n	8002f08 <HAL_RCC_OscConfig+0x4d8>
 8002ef6:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efc:	4a0d      	ldr	r2, [pc, #52]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f06:	e029      	b.n	8002f5c <HAL_RCC_OscConfig+0x52c>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b05      	cmp	r3, #5
 8002f0e:	d115      	bne.n	8002f3c <HAL_RCC_OscConfig+0x50c>
 8002f10:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f16:	4a07      	ldr	r2, [pc, #28]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002f18:	f043 0304 	orr.w	r3, r3, #4
 8002f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f20:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f26:	4a03      	ldr	r2, [pc, #12]	; (8002f34 <HAL_RCC_OscConfig+0x504>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f30:	e014      	b.n	8002f5c <HAL_RCC_OscConfig+0x52c>
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40007000 	.word	0x40007000
 8002f3c:	4b9c      	ldr	r3, [pc, #624]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f42:	4a9b      	ldr	r2, [pc, #620]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f4c:	4b98      	ldr	r3, [pc, #608]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f52:	4a97      	ldr	r2, [pc, #604]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 8002f54:	f023 0304 	bic.w	r3, r3, #4
 8002f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d016      	beq.n	8002f92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f64:	f7ff f958 	bl	8002218 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f6a:	e00a      	b.n	8002f82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6c:	f7ff f954 	bl	8002218 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e12a      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f82:	4b8b      	ldr	r3, [pc, #556]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0ed      	beq.n	8002f6c <HAL_RCC_OscConfig+0x53c>
 8002f90:	e015      	b.n	8002fbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f92:	f7ff f941 	bl	8002218 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f98:	e00a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9a:	f7ff f93d 	bl	8002218 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e113      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fb0:	4b7f      	ldr	r3, [pc, #508]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1ed      	bne.n	8002f9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fbe:	7ffb      	ldrb	r3, [r7, #31]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d105      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc4:	4b7a      	ldr	r3, [pc, #488]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 8002fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc8:	4a79      	ldr	r2, [pc, #484]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 8002fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80fe 	beq.w	80031d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	f040 80d0 	bne.w	8003184 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fe4:	4b72      	ldr	r3, [pc, #456]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f003 0203 	and.w	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d130      	bne.n	800305a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	3b01      	subs	r3, #1
 8003004:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d127      	bne.n	800305a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003014:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003016:	429a      	cmp	r2, r3
 8003018:	d11f      	bne.n	800305a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003024:	2a07      	cmp	r2, #7
 8003026:	bf14      	ite	ne
 8003028:	2201      	movne	r2, #1
 800302a:	2200      	moveq	r2, #0
 800302c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800302e:	4293      	cmp	r3, r2
 8003030:	d113      	bne.n	800305a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	3b01      	subs	r3, #1
 8003040:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003042:	429a      	cmp	r2, r3
 8003044:	d109      	bne.n	800305a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	085b      	lsrs	r3, r3, #1
 8003052:	3b01      	subs	r3, #1
 8003054:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003056:	429a      	cmp	r2, r3
 8003058:	d06e      	beq.n	8003138 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	2b0c      	cmp	r3, #12
 800305e:	d069      	beq.n	8003134 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003060:	4b53      	ldr	r3, [pc, #332]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d105      	bne.n	8003078 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800306c:	4b50      	ldr	r3, [pc, #320]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0ad      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800307c:	4b4c      	ldr	r3, [pc, #304]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a4b      	ldr	r2, [pc, #300]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 8003082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003086:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003088:	f7ff f8c6 	bl	8002218 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003090:	f7ff f8c2 	bl	8002218 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e09a      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a2:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ae:	4b40      	ldr	r3, [pc, #256]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	4b40      	ldr	r3, [pc, #256]	; (80031b4 <HAL_RCC_OscConfig+0x784>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030be:	3a01      	subs	r2, #1
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	4311      	orrs	r1, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030c8:	0212      	lsls	r2, r2, #8
 80030ca:	4311      	orrs	r1, r2
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030d0:	0852      	lsrs	r2, r2, #1
 80030d2:	3a01      	subs	r2, #1
 80030d4:	0552      	lsls	r2, r2, #21
 80030d6:	4311      	orrs	r1, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030dc:	0852      	lsrs	r2, r2, #1
 80030de:	3a01      	subs	r2, #1
 80030e0:	0652      	lsls	r2, r2, #25
 80030e2:	4311      	orrs	r1, r2
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030e8:	0912      	lsrs	r2, r2, #4
 80030ea:	0452      	lsls	r2, r2, #17
 80030ec:	430a      	orrs	r2, r1
 80030ee:	4930      	ldr	r1, [pc, #192]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030f4:	4b2e      	ldr	r3, [pc, #184]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a2d      	ldr	r2, [pc, #180]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 80030fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003100:	4b2b      	ldr	r3, [pc, #172]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4a2a      	ldr	r2, [pc, #168]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 8003106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800310a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800310c:	f7ff f884 	bl	8002218 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003114:	f7ff f880 	bl	8002218 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e058      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003126:	4b22      	ldr	r3, [pc, #136]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003132:	e050      	b.n	80031d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e04f      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003138:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d148      	bne.n	80031d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003144:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a19      	ldr	r2, [pc, #100]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 800314a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800314e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003150:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4a16      	ldr	r2, [pc, #88]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 8003156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800315a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800315c:	f7ff f85c 	bl	8002218 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003164:	f7ff f858 	bl	8002218 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e030      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003176:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0x734>
 8003182:	e028      	b.n	80031d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d023      	beq.n	80031d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a08      	ldr	r2, [pc, #32]	; (80031b0 <HAL_RCC_OscConfig+0x780>)
 8003190:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003196:	f7ff f83f 	bl	8002218 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800319c:	e00c      	b.n	80031b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319e:	f7ff f83b 	bl	8002218 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d905      	bls.n	80031b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e013      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
 80031b0:	40021000 	.word	0x40021000
 80031b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b8:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HAL_RCC_OscConfig+0x7b0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1ec      	bne.n	800319e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_RCC_OscConfig+0x7b0>)
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	4905      	ldr	r1, [pc, #20]	; (80031e0 <HAL_RCC_OscConfig+0x7b0>)
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_RCC_OscConfig+0x7b4>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	60cb      	str	r3, [r1, #12]
 80031d0:	e001      	b.n	80031d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3720      	adds	r7, #32
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40021000 	.word	0x40021000
 80031e4:	feeefffc 	.word	0xfeeefffc

080031e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0e7      	b.n	80033cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031fc:	4b75      	ldr	r3, [pc, #468]	; (80033d4 <HAL_RCC_ClockConfig+0x1ec>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d910      	bls.n	800322c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320a:	4b72      	ldr	r3, [pc, #456]	; (80033d4 <HAL_RCC_ClockConfig+0x1ec>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 0207 	bic.w	r2, r3, #7
 8003212:	4970      	ldr	r1, [pc, #448]	; (80033d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	4313      	orrs	r3, r2
 8003218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321a:	4b6e      	ldr	r3, [pc, #440]	; (80033d4 <HAL_RCC_ClockConfig+0x1ec>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d001      	beq.n	800322c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0cf      	b.n	80033cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d010      	beq.n	800325a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	4b66      	ldr	r3, [pc, #408]	; (80033d8 <HAL_RCC_ClockConfig+0x1f0>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003244:	429a      	cmp	r2, r3
 8003246:	d908      	bls.n	800325a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003248:	4b63      	ldr	r3, [pc, #396]	; (80033d8 <HAL_RCC_ClockConfig+0x1f0>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	4960      	ldr	r1, [pc, #384]	; (80033d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003256:	4313      	orrs	r3, r2
 8003258:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d04c      	beq.n	8003300 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b03      	cmp	r3, #3
 800326c:	d107      	bne.n	800327e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800326e:	4b5a      	ldr	r3, [pc, #360]	; (80033d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d121      	bne.n	80032be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e0a6      	b.n	80033cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d107      	bne.n	8003296 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003286:	4b54      	ldr	r3, [pc, #336]	; (80033d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d115      	bne.n	80032be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e09a      	b.n	80033cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800329e:	4b4e      	ldr	r3, [pc, #312]	; (80033d8 <HAL_RCC_ClockConfig+0x1f0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e08e      	b.n	80033cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ae:	4b4a      	ldr	r3, [pc, #296]	; (80033d8 <HAL_RCC_ClockConfig+0x1f0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e086      	b.n	80033cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032be:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <HAL_RCC_ClockConfig+0x1f0>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f023 0203 	bic.w	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4943      	ldr	r1, [pc, #268]	; (80033d8 <HAL_RCC_ClockConfig+0x1f0>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d0:	f7fe ffa2 	bl	8002218 <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d8:	f7fe ff9e 	bl	8002218 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e06e      	b.n	80033cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	4b3a      	ldr	r3, [pc, #232]	; (80033d8 <HAL_RCC_ClockConfig+0x1f0>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 020c 	and.w	r2, r3, #12
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d1eb      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d010      	beq.n	800332e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	4b31      	ldr	r3, [pc, #196]	; (80033d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003318:	429a      	cmp	r2, r3
 800331a:	d208      	bcs.n	800332e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800331c:	4b2e      	ldr	r3, [pc, #184]	; (80033d8 <HAL_RCC_ClockConfig+0x1f0>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	492b      	ldr	r1, [pc, #172]	; (80033d8 <HAL_RCC_ClockConfig+0x1f0>)
 800332a:	4313      	orrs	r3, r2
 800332c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800332e:	4b29      	ldr	r3, [pc, #164]	; (80033d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d210      	bcs.n	800335e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333c:	4b25      	ldr	r3, [pc, #148]	; (80033d4 <HAL_RCC_ClockConfig+0x1ec>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f023 0207 	bic.w	r2, r3, #7
 8003344:	4923      	ldr	r1, [pc, #140]	; (80033d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	4313      	orrs	r3, r2
 800334a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334c:	4b21      	ldr	r3, [pc, #132]	; (80033d4 <HAL_RCC_ClockConfig+0x1ec>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d001      	beq.n	800335e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e036      	b.n	80033cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	d008      	beq.n	800337c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800336a:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <HAL_RCC_ClockConfig+0x1f0>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	4918      	ldr	r1, [pc, #96]	; (80033d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003378:	4313      	orrs	r3, r2
 800337a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b00      	cmp	r3, #0
 8003386:	d009      	beq.n	800339c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003388:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <HAL_RCC_ClockConfig+0x1f0>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	4910      	ldr	r1, [pc, #64]	; (80033d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003398:	4313      	orrs	r3, r2
 800339a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800339c:	f000 f824 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <HAL_RCC_ClockConfig+0x1f0>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	091b      	lsrs	r3, r3, #4
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	490b      	ldr	r1, [pc, #44]	; (80033dc <HAL_RCC_ClockConfig+0x1f4>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
 80033b8:	4a09      	ldr	r2, [pc, #36]	; (80033e0 <HAL_RCC_ClockConfig+0x1f8>)
 80033ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033bc:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <HAL_RCC_ClockConfig+0x1fc>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fe fed9 	bl	8002178 <HAL_InitTick>
 80033c6:	4603      	mov	r3, r0
 80033c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80033ca:	7afb      	ldrb	r3, [r7, #11]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40022000 	.word	0x40022000
 80033d8:	40021000 	.word	0x40021000
 80033dc:	080083c8 	.word	0x080083c8
 80033e0:	200000c0 	.word	0x200000c0
 80033e4:	200000c4 	.word	0x200000c4

080033e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b089      	sub	sp, #36	; 0x24
 80033ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	2300      	movs	r3, #0
 80033f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f6:	4b3e      	ldr	r3, [pc, #248]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003400:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x34>
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2b0c      	cmp	r3, #12
 8003414:	d121      	bne.n	800345a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d11e      	bne.n	800345a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800341c:	4b34      	ldr	r3, [pc, #208]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d107      	bne.n	8003438 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003428:	4b31      	ldr	r3, [pc, #196]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800342a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	e005      	b.n	8003444 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003438:	4b2d      	ldr	r3, [pc, #180]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003444:	4a2b      	ldr	r2, [pc, #172]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10d      	bne.n	8003470 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003458:	e00a      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	2b04      	cmp	r3, #4
 800345e:	d102      	bne.n	8003466 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003460:	4b25      	ldr	r3, [pc, #148]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003462:	61bb      	str	r3, [r7, #24]
 8003464:	e004      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b08      	cmp	r3, #8
 800346a:	d101      	bne.n	8003470 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800346c:	4b23      	ldr	r3, [pc, #140]	; (80034fc <HAL_RCC_GetSysClockFreq+0x114>)
 800346e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	2b0c      	cmp	r3, #12
 8003474:	d134      	bne.n	80034e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003476:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d003      	beq.n	800348e <HAL_RCC_GetSysClockFreq+0xa6>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b03      	cmp	r3, #3
 800348a:	d003      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0xac>
 800348c:	e005      	b.n	800349a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003490:	617b      	str	r3, [r7, #20]
      break;
 8003492:	e005      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <HAL_RCC_GetSysClockFreq+0x114>)
 8003496:	617b      	str	r3, [r7, #20]
      break;
 8003498:	e002      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	617b      	str	r3, [r7, #20]
      break;
 800349e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034a0:	4b13      	ldr	r3, [pc, #76]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	3301      	adds	r3, #1
 80034ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	0a1b      	lsrs	r3, r3, #8
 80034b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	fb03 f202 	mul.w	r2, r3, r2
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	0e5b      	lsrs	r3, r3, #25
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	3301      	adds	r3, #1
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	fbb2 f3f3 	udiv	r3, r2, r3
 80034de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034e0:	69bb      	ldr	r3, [r7, #24]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3724      	adds	r7, #36	; 0x24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	080083e0 	.word	0x080083e0
 80034f8:	00f42400 	.word	0x00f42400
 80034fc:	007a1200 	.word	0x007a1200

08003500 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003504:	4b03      	ldr	r3, [pc, #12]	; (8003514 <HAL_RCC_GetHCLKFreq+0x14>)
 8003506:	681b      	ldr	r3, [r3, #0]
}
 8003508:	4618      	mov	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	200000c0 	.word	0x200000c0

08003518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800351c:	f7ff fff0 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 8003520:	4602      	mov	r2, r0
 8003522:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	0a1b      	lsrs	r3, r3, #8
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	4904      	ldr	r1, [pc, #16]	; (8003540 <HAL_RCC_GetPCLK1Freq+0x28>)
 800352e:	5ccb      	ldrb	r3, [r1, r3]
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000
 8003540:	080083d8 	.word	0x080083d8

08003544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003548:	f7ff ffda 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	0adb      	lsrs	r3, r3, #11
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	4904      	ldr	r1, [pc, #16]	; (800356c <HAL_RCC_GetPCLK2Freq+0x28>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000
 800356c:	080083d8 	.word	0x080083d8

08003570 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800357c:	4b2a      	ldr	r3, [pc, #168]	; (8003628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003588:	f7ff f9ee 	bl	8002968 <HAL_PWREx_GetVoltageRange>
 800358c:	6178      	str	r0, [r7, #20]
 800358e:	e014      	b.n	80035ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003590:	4b25      	ldr	r3, [pc, #148]	; (8003628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003594:	4a24      	ldr	r2, [pc, #144]	; (8003628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359a:	6593      	str	r3, [r2, #88]	; 0x58
 800359c:	4b22      	ldr	r3, [pc, #136]	; (8003628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800359e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035a8:	f7ff f9de 	bl	8002968 <HAL_PWREx_GetVoltageRange>
 80035ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035ae:	4b1e      	ldr	r3, [pc, #120]	; (8003628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b2:	4a1d      	ldr	r2, [pc, #116]	; (8003628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c0:	d10b      	bne.n	80035da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b80      	cmp	r3, #128	; 0x80
 80035c6:	d919      	bls.n	80035fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2ba0      	cmp	r3, #160	; 0xa0
 80035cc:	d902      	bls.n	80035d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035ce:	2302      	movs	r3, #2
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	e013      	b.n	80035fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035d4:	2301      	movs	r3, #1
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	e010      	b.n	80035fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b80      	cmp	r3, #128	; 0x80
 80035de:	d902      	bls.n	80035e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035e0:	2303      	movs	r3, #3
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	e00a      	b.n	80035fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b80      	cmp	r3, #128	; 0x80
 80035ea:	d102      	bne.n	80035f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035ec:	2302      	movs	r3, #2
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	e004      	b.n	80035fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b70      	cmp	r3, #112	; 0x70
 80035f6:	d101      	bne.n	80035fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035f8:	2301      	movs	r3, #1
 80035fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035fc:	4b0b      	ldr	r3, [pc, #44]	; (800362c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f023 0207 	bic.w	r2, r3, #7
 8003604:	4909      	ldr	r1, [pc, #36]	; (800362c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800360c:	4b07      	ldr	r3, [pc, #28]	; (800362c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	429a      	cmp	r2, r3
 8003618:	d001      	beq.n	800361e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40021000 	.word	0x40021000
 800362c:	40022000 	.word	0x40022000

08003630 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003638:	2300      	movs	r3, #0
 800363a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800363c:	2300      	movs	r3, #0
 800363e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003648:	2b00      	cmp	r3, #0
 800364a:	d041      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003650:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003654:	d02a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003656:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800365a:	d824      	bhi.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800365c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003660:	d008      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003662:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003666:	d81e      	bhi.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800366c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003670:	d010      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003672:	e018      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003674:	4b86      	ldr	r3, [pc, #536]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4a85      	ldr	r2, [pc, #532]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003680:	e015      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	2100      	movs	r1, #0
 8003688:	4618      	mov	r0, r3
 800368a:	f000 fabb 	bl	8003c04 <RCCEx_PLLSAI1_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003692:	e00c      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3320      	adds	r3, #32
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fba6 	bl	8003dec <RCCEx_PLLSAI2_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036a4:	e003      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	74fb      	strb	r3, [r7, #19]
      break;
 80036aa:	e000      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80036ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ae:	7cfb      	ldrb	r3, [r7, #19]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10b      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036b4:	4b76      	ldr	r3, [pc, #472]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036c2:	4973      	ldr	r1, [pc, #460]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036ca:	e001      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d041      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036e4:	d02a      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80036e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036ea:	d824      	bhi.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036f0:	d008      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036f6:	d81e      	bhi.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003700:	d010      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003702:	e018      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003704:	4b62      	ldr	r3, [pc, #392]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a61      	ldr	r2, [pc, #388]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800370e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003710:	e015      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3304      	adds	r3, #4
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fa73 	bl	8003c04 <RCCEx_PLLSAI1_Config>
 800371e:	4603      	mov	r3, r0
 8003720:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003722:	e00c      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3320      	adds	r3, #32
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fb5e 	bl	8003dec <RCCEx_PLLSAI2_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003734:	e003      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	74fb      	strb	r3, [r7, #19]
      break;
 800373a:	e000      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800373c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800373e:	7cfb      	ldrb	r3, [r7, #19]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10b      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003744:	4b52      	ldr	r3, [pc, #328]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003752:	494f      	ldr	r1, [pc, #316]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800375a:	e001      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375c:	7cfb      	ldrb	r3, [r7, #19]
 800375e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 80a0 	beq.w	80038ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800376e:	2300      	movs	r3, #0
 8003770:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003772:	4b47      	ldr	r3, [pc, #284]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003782:	2300      	movs	r3, #0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00d      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003788:	4b41      	ldr	r3, [pc, #260]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800378a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378c:	4a40      	ldr	r2, [pc, #256]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800378e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003792:	6593      	str	r3, [r2, #88]	; 0x58
 8003794:	4b3e      	ldr	r3, [pc, #248]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a0:	2301      	movs	r3, #1
 80037a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a4:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a3a      	ldr	r2, [pc, #232]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037b0:	f7fe fd32 	bl	8002218 <HAL_GetTick>
 80037b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037b6:	e009      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b8:	f7fe fd2e 	bl	8002218 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d902      	bls.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	74fb      	strb	r3, [r7, #19]
        break;
 80037ca:	e005      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037cc:	4b31      	ldr	r3, [pc, #196]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0ef      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80037d8:	7cfb      	ldrb	r3, [r7, #19]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d15c      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037de:	4b2c      	ldr	r3, [pc, #176]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01f      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d019      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037fc:	4b24      	ldr	r3, [pc, #144]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003806:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003808:	4b21      	ldr	r3, [pc, #132]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380e:	4a20      	ldr	r2, [pc, #128]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003818:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	4a1c      	ldr	r2, [pc, #112]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003828:	4a19      	ldr	r2, [pc, #100]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d016      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383a:	f7fe fced 	bl	8002218 <HAL_GetTick>
 800383e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003840:	e00b      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003842:	f7fe fce9 	bl	8002218 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003850:	4293      	cmp	r3, r2
 8003852:	d902      	bls.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	74fb      	strb	r3, [r7, #19]
            break;
 8003858:	e006      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800385a:	4b0d      	ldr	r3, [pc, #52]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0ec      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10c      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800386e:	4b08      	ldr	r3, [pc, #32]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003874:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800387e:	4904      	ldr	r1, [pc, #16]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003886:	e009      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003888:	7cfb      	ldrb	r3, [r7, #19]
 800388a:	74bb      	strb	r3, [r7, #18]
 800388c:	e006      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
 8003894:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003898:	7cfb      	ldrb	r3, [r7, #19]
 800389a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800389c:	7c7b      	ldrb	r3, [r7, #17]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d105      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a2:	4b9e      	ldr	r3, [pc, #632]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a6:	4a9d      	ldr	r2, [pc, #628]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038ba:	4b98      	ldr	r3, [pc, #608]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c0:	f023 0203 	bic.w	r2, r3, #3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	4994      	ldr	r1, [pc, #592]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038dc:	4b8f      	ldr	r3, [pc, #572]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	f023 020c 	bic.w	r2, r3, #12
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	498c      	ldr	r1, [pc, #560]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038fe:	4b87      	ldr	r3, [pc, #540]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003904:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	4983      	ldr	r1, [pc, #524]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003920:	4b7e      	ldr	r3, [pc, #504]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003926:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	497b      	ldr	r1, [pc, #492]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003942:	4b76      	ldr	r3, [pc, #472]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003950:	4972      	ldr	r1, [pc, #456]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003964:	4b6d      	ldr	r3, [pc, #436]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003972:	496a      	ldr	r1, [pc, #424]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003986:	4b65      	ldr	r3, [pc, #404]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	4961      	ldr	r1, [pc, #388]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039a8:	4b5c      	ldr	r3, [pc, #368]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b6:	4959      	ldr	r1, [pc, #356]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ca:	4b54      	ldr	r3, [pc, #336]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d8:	4950      	ldr	r1, [pc, #320]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039ec:	4b4b      	ldr	r3, [pc, #300]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	4948      	ldr	r1, [pc, #288]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a0e:	4b43      	ldr	r3, [pc, #268]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1c:	493f      	ldr	r1, [pc, #252]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d028      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a30:	4b3a      	ldr	r3, [pc, #232]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a3e:	4937      	ldr	r1, [pc, #220]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a4e:	d106      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a50:	4b32      	ldr	r3, [pc, #200]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4a31      	ldr	r2, [pc, #196]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a5a:	60d3      	str	r3, [r2, #12]
 8003a5c:	e011      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a66:	d10c      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 f8c8 	bl	8003c04 <RCCEx_PLLSAI1_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a78:	7cfb      	ldrb	r3, [r7, #19]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a7e:	7cfb      	ldrb	r3, [r7, #19]
 8003a80:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d028      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a8e:	4b23      	ldr	r3, [pc, #140]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	491f      	ldr	r1, [pc, #124]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aac:	d106      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aae:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	4a1a      	ldr	r2, [pc, #104]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ab8:	60d3      	str	r3, [r2, #12]
 8003aba:	e011      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	2101      	movs	r1, #1
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 f899 	bl	8003c04 <RCCEx_PLLSAI1_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ad6:	7cfb      	ldrb	r3, [r7, #19]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003adc:	7cfb      	ldrb	r3, [r7, #19]
 8003ade:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d02b      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003aec:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afa:	4908      	ldr	r1, [pc, #32]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b0a:	d109      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b0c:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4a02      	ldr	r2, [pc, #8]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b16:	60d3      	str	r3, [r2, #12]
 8003b18:	e014      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b28:	d10c      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	2101      	movs	r1, #1
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 f867 	bl	8003c04 <RCCEx_PLLSAI1_Config>
 8003b36:	4603      	mov	r3, r0
 8003b38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b3a:	7cfb      	ldrb	r3, [r7, #19]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b40:	7cfb      	ldrb	r3, [r7, #19]
 8003b42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d02f      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b50:	4b2b      	ldr	r3, [pc, #172]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b5e:	4928      	ldr	r1, [pc, #160]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b6e:	d10d      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	2102      	movs	r1, #2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f844 	bl	8003c04 <RCCEx_PLLSAI1_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b80:	7cfb      	ldrb	r3, [r7, #19]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d014      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b86:	7cfb      	ldrb	r3, [r7, #19]
 8003b88:	74bb      	strb	r3, [r7, #18]
 8003b8a:	e011      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3320      	adds	r3, #32
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 f925 	bl	8003dec <RCCEx_PLLSAI2_Config>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ba6:	7cfb      	ldrb	r3, [r7, #19]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003bac:	7cfb      	ldrb	r3, [r7, #19]
 8003bae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003bbc:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bca:	490d      	ldr	r1, [pc, #52]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00b      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bee:	4904      	ldr	r1, [pc, #16]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bf6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40021000 	.word	0x40021000

08003c04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c12:	4b75      	ldr	r3, [pc, #468]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d018      	beq.n	8003c50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c1e:	4b72      	ldr	r3, [pc, #456]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0203 	and.w	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d10d      	bne.n	8003c4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
       ||
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d009      	beq.n	8003c4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c36:	4b6c      	ldr	r3, [pc, #432]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	091b      	lsrs	r3, r3, #4
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
       ||
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d047      	beq.n	8003cda <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
 8003c4e:	e044      	b.n	8003cda <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d018      	beq.n	8003c8a <RCCEx_PLLSAI1_Config+0x86>
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d825      	bhi.n	8003ca8 <RCCEx_PLLSAI1_Config+0xa4>
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d002      	beq.n	8003c66 <RCCEx_PLLSAI1_Config+0x62>
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d009      	beq.n	8003c78 <RCCEx_PLLSAI1_Config+0x74>
 8003c64:	e020      	b.n	8003ca8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c66:	4b60      	ldr	r3, [pc, #384]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d11d      	bne.n	8003cae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c76:	e01a      	b.n	8003cae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c78:	4b5b      	ldr	r3, [pc, #364]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d116      	bne.n	8003cb2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c88:	e013      	b.n	8003cb2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c8a:	4b57      	ldr	r3, [pc, #348]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10f      	bne.n	8003cb6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c96:	4b54      	ldr	r3, [pc, #336]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ca6:	e006      	b.n	8003cb6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
      break;
 8003cac:	e004      	b.n	8003cb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cae:	bf00      	nop
 8003cb0:	e002      	b.n	8003cb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cb2:	bf00      	nop
 8003cb4:	e000      	b.n	8003cb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10d      	bne.n	8003cda <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cbe:	4b4a      	ldr	r3, [pc, #296]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6819      	ldr	r1, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	4944      	ldr	r1, [pc, #272]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d17d      	bne.n	8003ddc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ce0:	4b41      	ldr	r3, [pc, #260]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a40      	ldr	r2, [pc, #256]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cec:	f7fe fa94 	bl	8002218 <HAL_GetTick>
 8003cf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cf2:	e009      	b.n	8003d08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cf4:	f7fe fa90 	bl	8002218 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d902      	bls.n	8003d08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	73fb      	strb	r3, [r7, #15]
        break;
 8003d06:	e005      	b.n	8003d14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d08:	4b37      	ldr	r3, [pc, #220]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ef      	bne.n	8003cf4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d160      	bne.n	8003ddc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d111      	bne.n	8003d44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d20:	4b31      	ldr	r3, [pc, #196]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6892      	ldr	r2, [r2, #8]
 8003d30:	0211      	lsls	r1, r2, #8
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	68d2      	ldr	r2, [r2, #12]
 8003d36:	0912      	lsrs	r2, r2, #4
 8003d38:	0452      	lsls	r2, r2, #17
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	492a      	ldr	r1, [pc, #168]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	610b      	str	r3, [r1, #16]
 8003d42:	e027      	b.n	8003d94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d112      	bne.n	8003d70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d4a:	4b27      	ldr	r3, [pc, #156]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6892      	ldr	r2, [r2, #8]
 8003d5a:	0211      	lsls	r1, r2, #8
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6912      	ldr	r2, [r2, #16]
 8003d60:	0852      	lsrs	r2, r2, #1
 8003d62:	3a01      	subs	r2, #1
 8003d64:	0552      	lsls	r2, r2, #21
 8003d66:	430a      	orrs	r2, r1
 8003d68:	491f      	ldr	r1, [pc, #124]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	610b      	str	r3, [r1, #16]
 8003d6e:	e011      	b.n	8003d94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d70:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6892      	ldr	r2, [r2, #8]
 8003d80:	0211      	lsls	r1, r2, #8
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6952      	ldr	r2, [r2, #20]
 8003d86:	0852      	lsrs	r2, r2, #1
 8003d88:	3a01      	subs	r2, #1
 8003d8a:	0652      	lsls	r2, r2, #25
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	4916      	ldr	r1, [pc, #88]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d94:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a13      	ldr	r2, [pc, #76]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da0:	f7fe fa3a 	bl	8002218 <HAL_GetTick>
 8003da4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003da6:	e009      	b.n	8003dbc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003da8:	f7fe fa36 	bl	8002218 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d902      	bls.n	8003dbc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	73fb      	strb	r3, [r7, #15]
          break;
 8003dba:	e005      	b.n	8003dc8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0ef      	beq.n	8003da8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003dce:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	4904      	ldr	r1, [pc, #16]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40021000 	.word	0x40021000

08003dec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dfa:	4b6a      	ldr	r3, [pc, #424]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d018      	beq.n	8003e38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e06:	4b67      	ldr	r3, [pc, #412]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f003 0203 	and.w	r2, r3, #3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d10d      	bne.n	8003e32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
       ||
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e1e:	4b61      	ldr	r3, [pc, #388]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	091b      	lsrs	r3, r3, #4
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
       ||
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d047      	beq.n	8003ec2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	73fb      	strb	r3, [r7, #15]
 8003e36:	e044      	b.n	8003ec2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d018      	beq.n	8003e72 <RCCEx_PLLSAI2_Config+0x86>
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d825      	bhi.n	8003e90 <RCCEx_PLLSAI2_Config+0xa4>
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d002      	beq.n	8003e4e <RCCEx_PLLSAI2_Config+0x62>
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d009      	beq.n	8003e60 <RCCEx_PLLSAI2_Config+0x74>
 8003e4c:	e020      	b.n	8003e90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e4e:	4b55      	ldr	r3, [pc, #340]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d11d      	bne.n	8003e96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e5e:	e01a      	b.n	8003e96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e60:	4b50      	ldr	r3, [pc, #320]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d116      	bne.n	8003e9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e70:	e013      	b.n	8003e9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e72:	4b4c      	ldr	r3, [pc, #304]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10f      	bne.n	8003e9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e7e:	4b49      	ldr	r3, [pc, #292]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e8e:	e006      	b.n	8003e9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	73fb      	strb	r3, [r7, #15]
      break;
 8003e94:	e004      	b.n	8003ea0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e96:	bf00      	nop
 8003e98:	e002      	b.n	8003ea0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e000      	b.n	8003ea0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10d      	bne.n	8003ec2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ea6:	4b3f      	ldr	r3, [pc, #252]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6819      	ldr	r1, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	4939      	ldr	r1, [pc, #228]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d167      	bne.n	8003f98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ec8:	4b36      	ldr	r3, [pc, #216]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a35      	ldr	r2, [pc, #212]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed4:	f7fe f9a0 	bl	8002218 <HAL_GetTick>
 8003ed8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003eda:	e009      	b.n	8003ef0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003edc:	f7fe f99c 	bl	8002218 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d902      	bls.n	8003ef0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	73fb      	strb	r3, [r7, #15]
        break;
 8003eee:	e005      	b.n	8003efc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ef0:	4b2c      	ldr	r3, [pc, #176]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1ef      	bne.n	8003edc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d14a      	bne.n	8003f98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d111      	bne.n	8003f2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f08:	4b26      	ldr	r3, [pc, #152]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6892      	ldr	r2, [r2, #8]
 8003f18:	0211      	lsls	r1, r2, #8
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68d2      	ldr	r2, [r2, #12]
 8003f1e:	0912      	lsrs	r2, r2, #4
 8003f20:	0452      	lsls	r2, r2, #17
 8003f22:	430a      	orrs	r2, r1
 8003f24:	491f      	ldr	r1, [pc, #124]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	614b      	str	r3, [r1, #20]
 8003f2a:	e011      	b.n	8003f50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f2c:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6892      	ldr	r2, [r2, #8]
 8003f3c:	0211      	lsls	r1, r2, #8
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6912      	ldr	r2, [r2, #16]
 8003f42:	0852      	lsrs	r2, r2, #1
 8003f44:	3a01      	subs	r2, #1
 8003f46:	0652      	lsls	r2, r2, #25
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	4916      	ldr	r1, [pc, #88]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f50:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a13      	ldr	r2, [pc, #76]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5c:	f7fe f95c 	bl	8002218 <HAL_GetTick>
 8003f60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f62:	e009      	b.n	8003f78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f64:	f7fe f958 	bl	8002218 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d902      	bls.n	8003f78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	73fb      	strb	r3, [r7, #15]
          break;
 8003f76:	e005      	b.n	8003f84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f78:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0ef      	beq.n	8003f64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f8a:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	4904      	ldr	r1, [pc, #16]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000

08003fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e049      	b.n	800404e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fd feb2 	bl	8001d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	f000 fe28 	bl	8004c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b01      	cmp	r3, #1
 800406a:	d001      	beq.n	8004070 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e047      	b.n	8004100 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a23      	ldr	r2, [pc, #140]	; (800410c <HAL_TIM_Base_Start+0xb4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d01d      	beq.n	80040be <HAL_TIM_Base_Start+0x66>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408a:	d018      	beq.n	80040be <HAL_TIM_Base_Start+0x66>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1f      	ldr	r2, [pc, #124]	; (8004110 <HAL_TIM_Base_Start+0xb8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d013      	beq.n	80040be <HAL_TIM_Base_Start+0x66>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a1e      	ldr	r2, [pc, #120]	; (8004114 <HAL_TIM_Base_Start+0xbc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d00e      	beq.n	80040be <HAL_TIM_Base_Start+0x66>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <HAL_TIM_Base_Start+0xc0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d009      	beq.n	80040be <HAL_TIM_Base_Start+0x66>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1b      	ldr	r2, [pc, #108]	; (800411c <HAL_TIM_Base_Start+0xc4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d004      	beq.n	80040be <HAL_TIM_Base_Start+0x66>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a19      	ldr	r2, [pc, #100]	; (8004120 <HAL_TIM_Base_Start+0xc8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d115      	bne.n	80040ea <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	4b17      	ldr	r3, [pc, #92]	; (8004124 <HAL_TIM_Base_Start+0xcc>)
 80040c6:	4013      	ands	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2b06      	cmp	r3, #6
 80040ce:	d015      	beq.n	80040fc <HAL_TIM_Base_Start+0xa4>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d6:	d011      	beq.n	80040fc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e8:	e008      	b.n	80040fc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0201 	orr.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	e000      	b.n	80040fe <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	40012c00 	.word	0x40012c00
 8004110:	40000400 	.word	0x40000400
 8004114:	40000800 	.word	0x40000800
 8004118:	40000c00 	.word	0x40000c00
 800411c:	40013400 	.word	0x40013400
 8004120:	40014000 	.word	0x40014000
 8004124:	00010007 	.word	0x00010007

08004128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b01      	cmp	r3, #1
 800413a:	d001      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e04f      	b.n	80041e0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a23      	ldr	r2, [pc, #140]	; (80041ec <HAL_TIM_Base_Start_IT+0xc4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d01d      	beq.n	800419e <HAL_TIM_Base_Start_IT+0x76>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416a:	d018      	beq.n	800419e <HAL_TIM_Base_Start_IT+0x76>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a1f      	ldr	r2, [pc, #124]	; (80041f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d013      	beq.n	800419e <HAL_TIM_Base_Start_IT+0x76>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a1e      	ldr	r2, [pc, #120]	; (80041f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d00e      	beq.n	800419e <HAL_TIM_Base_Start_IT+0x76>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a1c      	ldr	r2, [pc, #112]	; (80041f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d009      	beq.n	800419e <HAL_TIM_Base_Start_IT+0x76>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a1b      	ldr	r2, [pc, #108]	; (80041fc <HAL_TIM_Base_Start_IT+0xd4>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d004      	beq.n	800419e <HAL_TIM_Base_Start_IT+0x76>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a19      	ldr	r2, [pc, #100]	; (8004200 <HAL_TIM_Base_Start_IT+0xd8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d115      	bne.n	80041ca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	4b17      	ldr	r3, [pc, #92]	; (8004204 <HAL_TIM_Base_Start_IT+0xdc>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2b06      	cmp	r3, #6
 80041ae:	d015      	beq.n	80041dc <HAL_TIM_Base_Start_IT+0xb4>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b6:	d011      	beq.n	80041dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c8:	e008      	b.n	80041dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0201 	orr.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	e000      	b.n	80041de <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	40012c00 	.word	0x40012c00
 80041f0:	40000400 	.word	0x40000400
 80041f4:	40000800 	.word	0x40000800
 80041f8:	40000c00 	.word	0x40000c00
 80041fc:	40013400 	.word	0x40013400
 8004200:	40014000 	.word	0x40014000
 8004204:	00010007 	.word	0x00010007

08004208 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0201 	bic.w	r2, r2, #1
 800421e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6a1a      	ldr	r2, [r3, #32]
 8004226:	f241 1311 	movw	r3, #4369	; 0x1111
 800422a:	4013      	ands	r3, r2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10f      	bne.n	8004250 <HAL_TIM_Base_Stop_IT+0x48>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6a1a      	ldr	r2, [r3, #32]
 8004236:	f240 4344 	movw	r3, #1092	; 0x444
 800423a:	4013      	ands	r3, r2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d107      	bne.n	8004250 <HAL_TIM_Base_Stop_IT+0x48>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0201 	bic.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e049      	b.n	800430c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d106      	bne.n	8004292 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7fd fceb 	bl	8001c68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3304      	adds	r3, #4
 80042a2:	4619      	mov	r1, r3
 80042a4:	4610      	mov	r0, r2
 80042a6:	f000 fcc9 	bl	8004c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d109      	bne.n	800433c <HAL_TIM_PWM_Start_IT+0x28>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b01      	cmp	r3, #1
 8004332:	bf14      	ite	ne
 8004334:	2301      	movne	r3, #1
 8004336:	2300      	moveq	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	e03c      	b.n	80043b6 <HAL_TIM_PWM_Start_IT+0xa2>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b04      	cmp	r3, #4
 8004340:	d109      	bne.n	8004356 <HAL_TIM_PWM_Start_IT+0x42>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b01      	cmp	r3, #1
 800434c:	bf14      	ite	ne
 800434e:	2301      	movne	r3, #1
 8004350:	2300      	moveq	r3, #0
 8004352:	b2db      	uxtb	r3, r3
 8004354:	e02f      	b.n	80043b6 <HAL_TIM_PWM_Start_IT+0xa2>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b08      	cmp	r3, #8
 800435a:	d109      	bne.n	8004370 <HAL_TIM_PWM_Start_IT+0x5c>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b01      	cmp	r3, #1
 8004366:	bf14      	ite	ne
 8004368:	2301      	movne	r3, #1
 800436a:	2300      	moveq	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	e022      	b.n	80043b6 <HAL_TIM_PWM_Start_IT+0xa2>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2b0c      	cmp	r3, #12
 8004374:	d109      	bne.n	800438a <HAL_TIM_PWM_Start_IT+0x76>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b01      	cmp	r3, #1
 8004380:	bf14      	ite	ne
 8004382:	2301      	movne	r3, #1
 8004384:	2300      	moveq	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	e015      	b.n	80043b6 <HAL_TIM_PWM_Start_IT+0xa2>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b10      	cmp	r3, #16
 800438e:	d109      	bne.n	80043a4 <HAL_TIM_PWM_Start_IT+0x90>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b01      	cmp	r3, #1
 800439a:	bf14      	ite	ne
 800439c:	2301      	movne	r3, #1
 800439e:	2300      	moveq	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	e008      	b.n	80043b6 <HAL_TIM_PWM_Start_IT+0xa2>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e0e7      	b.n	800458e <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d104      	bne.n	80043ce <HAL_TIM_PWM_Start_IT+0xba>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043cc:	e023      	b.n	8004416 <HAL_TIM_PWM_Start_IT+0x102>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d104      	bne.n	80043de <HAL_TIM_PWM_Start_IT+0xca>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043dc:	e01b      	b.n	8004416 <HAL_TIM_PWM_Start_IT+0x102>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d104      	bne.n	80043ee <HAL_TIM_PWM_Start_IT+0xda>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ec:	e013      	b.n	8004416 <HAL_TIM_PWM_Start_IT+0x102>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b0c      	cmp	r3, #12
 80043f2:	d104      	bne.n	80043fe <HAL_TIM_PWM_Start_IT+0xea>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043fc:	e00b      	b.n	8004416 <HAL_TIM_PWM_Start_IT+0x102>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b10      	cmp	r3, #16
 8004402:	d104      	bne.n	800440e <HAL_TIM_PWM_Start_IT+0xfa>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800440c:	e003      	b.n	8004416 <HAL_TIM_PWM_Start_IT+0x102>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2202      	movs	r2, #2
 8004412:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b0c      	cmp	r3, #12
 800441a:	d841      	bhi.n	80044a0 <HAL_TIM_PWM_Start_IT+0x18c>
 800441c:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <HAL_TIM_PWM_Start_IT+0x110>)
 800441e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004422:	bf00      	nop
 8004424:	08004459 	.word	0x08004459
 8004428:	080044a1 	.word	0x080044a1
 800442c:	080044a1 	.word	0x080044a1
 8004430:	080044a1 	.word	0x080044a1
 8004434:	0800446b 	.word	0x0800446b
 8004438:	080044a1 	.word	0x080044a1
 800443c:	080044a1 	.word	0x080044a1
 8004440:	080044a1 	.word	0x080044a1
 8004444:	0800447d 	.word	0x0800447d
 8004448:	080044a1 	.word	0x080044a1
 800444c:	080044a1 	.word	0x080044a1
 8004450:	080044a1 	.word	0x080044a1
 8004454:	0800448f 	.word	0x0800448f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0202 	orr.w	r2, r2, #2
 8004466:	60da      	str	r2, [r3, #12]
      break;
 8004468:	e01d      	b.n	80044a6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0204 	orr.w	r2, r2, #4
 8004478:	60da      	str	r2, [r3, #12]
      break;
 800447a:	e014      	b.n	80044a6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0208 	orr.w	r2, r2, #8
 800448a:	60da      	str	r2, [r3, #12]
      break;
 800448c:	e00b      	b.n	80044a6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0210 	orr.w	r2, r2, #16
 800449c:	60da      	str	r2, [r3, #12]
      break;
 800449e:	e002      	b.n	80044a6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	73fb      	strb	r3, [r7, #15]
      break;
 80044a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d16f      	bne.n	800458c <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2201      	movs	r2, #1
 80044b2:	6839      	ldr	r1, [r7, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 ff31 	bl	800531c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a36      	ldr	r2, [pc, #216]	; (8004598 <HAL_TIM_PWM_Start_IT+0x284>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d013      	beq.n	80044ec <HAL_TIM_PWM_Start_IT+0x1d8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a34      	ldr	r2, [pc, #208]	; (800459c <HAL_TIM_PWM_Start_IT+0x288>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00e      	beq.n	80044ec <HAL_TIM_PWM_Start_IT+0x1d8>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a33      	ldr	r2, [pc, #204]	; (80045a0 <HAL_TIM_PWM_Start_IT+0x28c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d009      	beq.n	80044ec <HAL_TIM_PWM_Start_IT+0x1d8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a31      	ldr	r2, [pc, #196]	; (80045a4 <HAL_TIM_PWM_Start_IT+0x290>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <HAL_TIM_PWM_Start_IT+0x1d8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a30      	ldr	r2, [pc, #192]	; (80045a8 <HAL_TIM_PWM_Start_IT+0x294>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d101      	bne.n	80044f0 <HAL_TIM_PWM_Start_IT+0x1dc>
 80044ec:	2301      	movs	r3, #1
 80044ee:	e000      	b.n	80044f2 <HAL_TIM_PWM_Start_IT+0x1de>
 80044f0:	2300      	movs	r3, #0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d007      	beq.n	8004506 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004504:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a23      	ldr	r2, [pc, #140]	; (8004598 <HAL_TIM_PWM_Start_IT+0x284>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d01d      	beq.n	800454c <HAL_TIM_PWM_Start_IT+0x238>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004518:	d018      	beq.n	800454c <HAL_TIM_PWM_Start_IT+0x238>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a23      	ldr	r2, [pc, #140]	; (80045ac <HAL_TIM_PWM_Start_IT+0x298>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d013      	beq.n	800454c <HAL_TIM_PWM_Start_IT+0x238>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a21      	ldr	r2, [pc, #132]	; (80045b0 <HAL_TIM_PWM_Start_IT+0x29c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00e      	beq.n	800454c <HAL_TIM_PWM_Start_IT+0x238>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a20      	ldr	r2, [pc, #128]	; (80045b4 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d009      	beq.n	800454c <HAL_TIM_PWM_Start_IT+0x238>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a17      	ldr	r2, [pc, #92]	; (800459c <HAL_TIM_PWM_Start_IT+0x288>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d004      	beq.n	800454c <HAL_TIM_PWM_Start_IT+0x238>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a16      	ldr	r2, [pc, #88]	; (80045a0 <HAL_TIM_PWM_Start_IT+0x28c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d115      	bne.n	8004578 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	4b19      	ldr	r3, [pc, #100]	; (80045b8 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8004554:	4013      	ands	r3, r2
 8004556:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b06      	cmp	r3, #6
 800455c:	d015      	beq.n	800458a <HAL_TIM_PWM_Start_IT+0x276>
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004564:	d011      	beq.n	800458a <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0201 	orr.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004576:	e008      	b.n	800458a <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0201 	orr.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	e000      	b.n	800458c <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800458c:	7bfb      	ldrb	r3, [r7, #15]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40012c00 	.word	0x40012c00
 800459c:	40013400 	.word	0x40013400
 80045a0:	40014000 	.word	0x40014000
 80045a4:	40014400 	.word	0x40014400
 80045a8:	40014800 	.word	0x40014800
 80045ac:	40000400 	.word	0x40000400
 80045b0:	40000800 	.word	0x40000800
 80045b4:	40000c00 	.word	0x40000c00
 80045b8:	00010007 	.word	0x00010007

080045bc <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b0c      	cmp	r3, #12
 80045ce:	d841      	bhi.n	8004654 <HAL_TIM_PWM_Stop_IT+0x98>
 80045d0:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	0800460d 	.word	0x0800460d
 80045dc:	08004655 	.word	0x08004655
 80045e0:	08004655 	.word	0x08004655
 80045e4:	08004655 	.word	0x08004655
 80045e8:	0800461f 	.word	0x0800461f
 80045ec:	08004655 	.word	0x08004655
 80045f0:	08004655 	.word	0x08004655
 80045f4:	08004655 	.word	0x08004655
 80045f8:	08004631 	.word	0x08004631
 80045fc:	08004655 	.word	0x08004655
 8004600:	08004655 	.word	0x08004655
 8004604:	08004655 	.word	0x08004655
 8004608:	08004643 	.word	0x08004643
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0202 	bic.w	r2, r2, #2
 800461a:	60da      	str	r2, [r3, #12]
      break;
 800461c:	e01d      	b.n	800465a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0204 	bic.w	r2, r2, #4
 800462c:	60da      	str	r2, [r3, #12]
      break;
 800462e:	e014      	b.n	800465a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0208 	bic.w	r2, r2, #8
 800463e:	60da      	str	r2, [r3, #12]
      break;
 8004640:	e00b      	b.n	800465a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0210 	bic.w	r2, r2, #16
 8004650:	60da      	str	r2, [r3, #12]
      break;
 8004652:	e002      	b.n	800465a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	73fb      	strb	r3, [r7, #15]
      break;
 8004658:	bf00      	nop
  }

  if (status == HAL_OK)
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f040 8081 	bne.w	8004764 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2200      	movs	r2, #0
 8004668:	6839      	ldr	r1, [r7, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fe56 	bl	800531c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a3e      	ldr	r2, [pc, #248]	; (8004770 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d013      	beq.n	80046a2 <HAL_TIM_PWM_Stop_IT+0xe6>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a3d      	ldr	r2, [pc, #244]	; (8004774 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00e      	beq.n	80046a2 <HAL_TIM_PWM_Stop_IT+0xe6>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a3b      	ldr	r2, [pc, #236]	; (8004778 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d009      	beq.n	80046a2 <HAL_TIM_PWM_Stop_IT+0xe6>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a3a      	ldr	r2, [pc, #232]	; (800477c <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d004      	beq.n	80046a2 <HAL_TIM_PWM_Stop_IT+0xe6>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a38      	ldr	r2, [pc, #224]	; (8004780 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d101      	bne.n	80046a6 <HAL_TIM_PWM_Stop_IT+0xea>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <HAL_TIM_PWM_Stop_IT+0xec>
 80046a6:	2300      	movs	r3, #0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d017      	beq.n	80046dc <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6a1a      	ldr	r2, [r3, #32]
 80046b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10f      	bne.n	80046dc <HAL_TIM_PWM_Stop_IT+0x120>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6a1a      	ldr	r2, [r3, #32]
 80046c2:	f240 4344 	movw	r3, #1092	; 0x444
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d107      	bne.n	80046dc <HAL_TIM_PWM_Stop_IT+0x120>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046da:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6a1a      	ldr	r2, [r3, #32]
 80046e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80046e6:	4013      	ands	r3, r2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10f      	bne.n	800470c <HAL_TIM_PWM_Stop_IT+0x150>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6a1a      	ldr	r2, [r3, #32]
 80046f2:	f240 4344 	movw	r3, #1092	; 0x444
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d107      	bne.n	800470c <HAL_TIM_PWM_Stop_IT+0x150>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0201 	bic.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d104      	bne.n	800471c <HAL_TIM_PWM_Stop_IT+0x160>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800471a:	e023      	b.n	8004764 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2b04      	cmp	r3, #4
 8004720:	d104      	bne.n	800472c <HAL_TIM_PWM_Stop_IT+0x170>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800472a:	e01b      	b.n	8004764 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2b08      	cmp	r3, #8
 8004730:	d104      	bne.n	800473c <HAL_TIM_PWM_Stop_IT+0x180>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800473a:	e013      	b.n	8004764 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b0c      	cmp	r3, #12
 8004740:	d104      	bne.n	800474c <HAL_TIM_PWM_Stop_IT+0x190>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800474a:	e00b      	b.n	8004764 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b10      	cmp	r3, #16
 8004750:	d104      	bne.n	800475c <HAL_TIM_PWM_Stop_IT+0x1a0>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800475a:	e003      	b.n	8004764 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8004764:	7bfb      	ldrb	r3, [r7, #15]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40012c00 	.word	0x40012c00
 8004774:	40013400 	.word	0x40013400
 8004778:	40014000 	.word	0x40014000
 800477c:	40014400 	.word	0x40014400
 8004780:	40014800 	.word	0x40014800

08004784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b02      	cmp	r3, #2
 8004798:	d122      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d11b      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0202 	mvn.w	r2, #2
 80047b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fa1a 	bl	8004c00 <HAL_TIM_IC_CaptureCallback>
 80047cc:	e005      	b.n	80047da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fa0c 	bl	8004bec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fa1d 	bl	8004c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d122      	bne.n	8004834 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d11b      	bne.n	8004834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0204 	mvn.w	r2, #4
 8004804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f9f0 	bl	8004c00 <HAL_TIM_IC_CaptureCallback>
 8004820:	e005      	b.n	800482e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f9e2 	bl	8004bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f9f3 	bl	8004c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b08      	cmp	r3, #8
 8004840:	d122      	bne.n	8004888 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b08      	cmp	r3, #8
 800484e:	d11b      	bne.n	8004888 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0208 	mvn.w	r2, #8
 8004858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2204      	movs	r2, #4
 800485e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f9c6 	bl	8004c00 <HAL_TIM_IC_CaptureCallback>
 8004874:	e005      	b.n	8004882 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f9b8 	bl	8004bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f9c9 	bl	8004c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	2b10      	cmp	r3, #16
 8004894:	d122      	bne.n	80048dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	2b10      	cmp	r3, #16
 80048a2:	d11b      	bne.n	80048dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0210 	mvn.w	r2, #16
 80048ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2208      	movs	r2, #8
 80048b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f99c 	bl	8004c00 <HAL_TIM_IC_CaptureCallback>
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f98e 	bl	8004bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f99f 	bl	8004c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d10e      	bne.n	8004908 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d107      	bne.n	8004908 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0201 	mvn.w	r2, #1
 8004900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fc fed0 	bl	80016a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d10e      	bne.n	8004934 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004920:	2b80      	cmp	r3, #128	; 0x80
 8004922:	d107      	bne.n	8004934 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800492c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fdac 	bl	800548c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004942:	d10e      	bne.n	8004962 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	2b80      	cmp	r3, #128	; 0x80
 8004950:	d107      	bne.n	8004962 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800495a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fd9f 	bl	80054a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496c:	2b40      	cmp	r3, #64	; 0x40
 800496e:	d10e      	bne.n	800498e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497a:	2b40      	cmp	r3, #64	; 0x40
 800497c:	d107      	bne.n	800498e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f94d 	bl	8004c28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b20      	cmp	r3, #32
 800499a:	d10e      	bne.n	80049ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f003 0320 	and.w	r3, r3, #32
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d107      	bne.n	80049ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f06f 0220 	mvn.w	r2, #32
 80049b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fd5f 	bl	8005478 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049ba:	bf00      	nop
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049de:	2302      	movs	r3, #2
 80049e0:	e0ff      	b.n	8004be2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b14      	cmp	r3, #20
 80049ee:	f200 80f0 	bhi.w	8004bd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80049f2:	a201      	add	r2, pc, #4	; (adr r2, 80049f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f8:	08004a4d 	.word	0x08004a4d
 80049fc:	08004bd3 	.word	0x08004bd3
 8004a00:	08004bd3 	.word	0x08004bd3
 8004a04:	08004bd3 	.word	0x08004bd3
 8004a08:	08004a8d 	.word	0x08004a8d
 8004a0c:	08004bd3 	.word	0x08004bd3
 8004a10:	08004bd3 	.word	0x08004bd3
 8004a14:	08004bd3 	.word	0x08004bd3
 8004a18:	08004acf 	.word	0x08004acf
 8004a1c:	08004bd3 	.word	0x08004bd3
 8004a20:	08004bd3 	.word	0x08004bd3
 8004a24:	08004bd3 	.word	0x08004bd3
 8004a28:	08004b0f 	.word	0x08004b0f
 8004a2c:	08004bd3 	.word	0x08004bd3
 8004a30:	08004bd3 	.word	0x08004bd3
 8004a34:	08004bd3 	.word	0x08004bd3
 8004a38:	08004b51 	.word	0x08004b51
 8004a3c:	08004bd3 	.word	0x08004bd3
 8004a40:	08004bd3 	.word	0x08004bd3
 8004a44:	08004bd3 	.word	0x08004bd3
 8004a48:	08004b91 	.word	0x08004b91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 f98c 	bl	8004d70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0208 	orr.w	r2, r2, #8
 8004a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0204 	bic.w	r2, r2, #4
 8004a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6999      	ldr	r1, [r3, #24]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	619a      	str	r2, [r3, #24]
      break;
 8004a8a:	e0a5      	b.n	8004bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f9fc 	bl	8004e90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6999      	ldr	r1, [r3, #24]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	021a      	lsls	r2, r3, #8
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	619a      	str	r2, [r3, #24]
      break;
 8004acc:	e084      	b.n	8004bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fa65 	bl	8004fa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0208 	orr.w	r2, r2, #8
 8004ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0204 	bic.w	r2, r2, #4
 8004af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69d9      	ldr	r1, [r3, #28]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	61da      	str	r2, [r3, #28]
      break;
 8004b0c:	e064      	b.n	8004bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 facd 	bl	80050b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69d9      	ldr	r1, [r3, #28]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	021a      	lsls	r2, r3, #8
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	61da      	str	r2, [r3, #28]
      break;
 8004b4e:	e043      	b.n	8004bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68b9      	ldr	r1, [r7, #8]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fb16 	bl	8005188 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0208 	orr.w	r2, r2, #8
 8004b6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0204 	bic.w	r2, r2, #4
 8004b7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	691a      	ldr	r2, [r3, #16]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b8e:	e023      	b.n	8004bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fb5a 	bl	8005250 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004baa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	021a      	lsls	r2, r3, #8
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004bd0:	e002      	b.n	8004bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop

08004bec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a40      	ldr	r2, [pc, #256]	; (8004d50 <TIM_Base_SetConfig+0x114>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d013      	beq.n	8004c7c <TIM_Base_SetConfig+0x40>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5a:	d00f      	beq.n	8004c7c <TIM_Base_SetConfig+0x40>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a3d      	ldr	r2, [pc, #244]	; (8004d54 <TIM_Base_SetConfig+0x118>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00b      	beq.n	8004c7c <TIM_Base_SetConfig+0x40>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a3c      	ldr	r2, [pc, #240]	; (8004d58 <TIM_Base_SetConfig+0x11c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d007      	beq.n	8004c7c <TIM_Base_SetConfig+0x40>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a3b      	ldr	r2, [pc, #236]	; (8004d5c <TIM_Base_SetConfig+0x120>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d003      	beq.n	8004c7c <TIM_Base_SetConfig+0x40>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a3a      	ldr	r2, [pc, #232]	; (8004d60 <TIM_Base_SetConfig+0x124>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d108      	bne.n	8004c8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a2f      	ldr	r2, [pc, #188]	; (8004d50 <TIM_Base_SetConfig+0x114>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d01f      	beq.n	8004cd6 <TIM_Base_SetConfig+0x9a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9c:	d01b      	beq.n	8004cd6 <TIM_Base_SetConfig+0x9a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a2c      	ldr	r2, [pc, #176]	; (8004d54 <TIM_Base_SetConfig+0x118>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d017      	beq.n	8004cd6 <TIM_Base_SetConfig+0x9a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a2b      	ldr	r2, [pc, #172]	; (8004d58 <TIM_Base_SetConfig+0x11c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d013      	beq.n	8004cd6 <TIM_Base_SetConfig+0x9a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a2a      	ldr	r2, [pc, #168]	; (8004d5c <TIM_Base_SetConfig+0x120>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00f      	beq.n	8004cd6 <TIM_Base_SetConfig+0x9a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a29      	ldr	r2, [pc, #164]	; (8004d60 <TIM_Base_SetConfig+0x124>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00b      	beq.n	8004cd6 <TIM_Base_SetConfig+0x9a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a28      	ldr	r2, [pc, #160]	; (8004d64 <TIM_Base_SetConfig+0x128>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d007      	beq.n	8004cd6 <TIM_Base_SetConfig+0x9a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a27      	ldr	r2, [pc, #156]	; (8004d68 <TIM_Base_SetConfig+0x12c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d003      	beq.n	8004cd6 <TIM_Base_SetConfig+0x9a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a26      	ldr	r2, [pc, #152]	; (8004d6c <TIM_Base_SetConfig+0x130>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d108      	bne.n	8004ce8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a10      	ldr	r2, [pc, #64]	; (8004d50 <TIM_Base_SetConfig+0x114>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00f      	beq.n	8004d34 <TIM_Base_SetConfig+0xf8>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a12      	ldr	r2, [pc, #72]	; (8004d60 <TIM_Base_SetConfig+0x124>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00b      	beq.n	8004d34 <TIM_Base_SetConfig+0xf8>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a11      	ldr	r2, [pc, #68]	; (8004d64 <TIM_Base_SetConfig+0x128>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d007      	beq.n	8004d34 <TIM_Base_SetConfig+0xf8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a10      	ldr	r2, [pc, #64]	; (8004d68 <TIM_Base_SetConfig+0x12c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d003      	beq.n	8004d34 <TIM_Base_SetConfig+0xf8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a0f      	ldr	r2, [pc, #60]	; (8004d6c <TIM_Base_SetConfig+0x130>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d103      	bne.n	8004d3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	615a      	str	r2, [r3, #20]
}
 8004d42:	bf00      	nop
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40012c00 	.word	0x40012c00
 8004d54:	40000400 	.word	0x40000400
 8004d58:	40000800 	.word	0x40000800
 8004d5c:	40000c00 	.word	0x40000c00
 8004d60:	40013400 	.word	0x40013400
 8004d64:	40014000 	.word	0x40014000
 8004d68:	40014400 	.word	0x40014400
 8004d6c:	40014800 	.word	0x40014800

08004d70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	f023 0201 	bic.w	r2, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0303 	bic.w	r3, r3, #3
 8004daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f023 0302 	bic.w	r3, r3, #2
 8004dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a2c      	ldr	r2, [pc, #176]	; (8004e7c <TIM_OC1_SetConfig+0x10c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d00f      	beq.n	8004df0 <TIM_OC1_SetConfig+0x80>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a2b      	ldr	r2, [pc, #172]	; (8004e80 <TIM_OC1_SetConfig+0x110>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00b      	beq.n	8004df0 <TIM_OC1_SetConfig+0x80>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a2a      	ldr	r2, [pc, #168]	; (8004e84 <TIM_OC1_SetConfig+0x114>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d007      	beq.n	8004df0 <TIM_OC1_SetConfig+0x80>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a29      	ldr	r2, [pc, #164]	; (8004e88 <TIM_OC1_SetConfig+0x118>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d003      	beq.n	8004df0 <TIM_OC1_SetConfig+0x80>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a28      	ldr	r2, [pc, #160]	; (8004e8c <TIM_OC1_SetConfig+0x11c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d10c      	bne.n	8004e0a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f023 0308 	bic.w	r3, r3, #8
 8004df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f023 0304 	bic.w	r3, r3, #4
 8004e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a1b      	ldr	r2, [pc, #108]	; (8004e7c <TIM_OC1_SetConfig+0x10c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00f      	beq.n	8004e32 <TIM_OC1_SetConfig+0xc2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a1a      	ldr	r2, [pc, #104]	; (8004e80 <TIM_OC1_SetConfig+0x110>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00b      	beq.n	8004e32 <TIM_OC1_SetConfig+0xc2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a19      	ldr	r2, [pc, #100]	; (8004e84 <TIM_OC1_SetConfig+0x114>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d007      	beq.n	8004e32 <TIM_OC1_SetConfig+0xc2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a18      	ldr	r2, [pc, #96]	; (8004e88 <TIM_OC1_SetConfig+0x118>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d003      	beq.n	8004e32 <TIM_OC1_SetConfig+0xc2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a17      	ldr	r2, [pc, #92]	; (8004e8c <TIM_OC1_SetConfig+0x11c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d111      	bne.n	8004e56 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	621a      	str	r2, [r3, #32]
}
 8004e70:	bf00      	nop
 8004e72:	371c      	adds	r7, #28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	40012c00 	.word	0x40012c00
 8004e80:	40013400 	.word	0x40013400
 8004e84:	40014000 	.word	0x40014000
 8004e88:	40014400 	.word	0x40014400
 8004e8c:	40014800 	.word	0x40014800

08004e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	f023 0210 	bic.w	r2, r3, #16
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f023 0320 	bic.w	r3, r3, #32
 8004ede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a28      	ldr	r2, [pc, #160]	; (8004f90 <TIM_OC2_SetConfig+0x100>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d003      	beq.n	8004efc <TIM_OC2_SetConfig+0x6c>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a27      	ldr	r2, [pc, #156]	; (8004f94 <TIM_OC2_SetConfig+0x104>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d10d      	bne.n	8004f18 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a1d      	ldr	r2, [pc, #116]	; (8004f90 <TIM_OC2_SetConfig+0x100>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00f      	beq.n	8004f40 <TIM_OC2_SetConfig+0xb0>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a1c      	ldr	r2, [pc, #112]	; (8004f94 <TIM_OC2_SetConfig+0x104>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00b      	beq.n	8004f40 <TIM_OC2_SetConfig+0xb0>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a1b      	ldr	r2, [pc, #108]	; (8004f98 <TIM_OC2_SetConfig+0x108>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d007      	beq.n	8004f40 <TIM_OC2_SetConfig+0xb0>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a1a      	ldr	r2, [pc, #104]	; (8004f9c <TIM_OC2_SetConfig+0x10c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_OC2_SetConfig+0xb0>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a19      	ldr	r2, [pc, #100]	; (8004fa0 <TIM_OC2_SetConfig+0x110>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d113      	bne.n	8004f68 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	40013400 	.word	0x40013400
 8004f98:	40014000 	.word	0x40014000
 8004f9c:	40014400 	.word	0x40014400
 8004fa0:	40014800 	.word	0x40014800

08004fa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a27      	ldr	r2, [pc, #156]	; (80050a0 <TIM_OC3_SetConfig+0xfc>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d003      	beq.n	800500e <TIM_OC3_SetConfig+0x6a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a26      	ldr	r2, [pc, #152]	; (80050a4 <TIM_OC3_SetConfig+0x100>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d10d      	bne.n	800502a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	021b      	lsls	r3, r3, #8
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a1c      	ldr	r2, [pc, #112]	; (80050a0 <TIM_OC3_SetConfig+0xfc>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00f      	beq.n	8005052 <TIM_OC3_SetConfig+0xae>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a1b      	ldr	r2, [pc, #108]	; (80050a4 <TIM_OC3_SetConfig+0x100>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00b      	beq.n	8005052 <TIM_OC3_SetConfig+0xae>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a1a      	ldr	r2, [pc, #104]	; (80050a8 <TIM_OC3_SetConfig+0x104>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d007      	beq.n	8005052 <TIM_OC3_SetConfig+0xae>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a19      	ldr	r2, [pc, #100]	; (80050ac <TIM_OC3_SetConfig+0x108>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d003      	beq.n	8005052 <TIM_OC3_SetConfig+0xae>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a18      	ldr	r2, [pc, #96]	; (80050b0 <TIM_OC3_SetConfig+0x10c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d113      	bne.n	800507a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	621a      	str	r2, [r3, #32]
}
 8005094:	bf00      	nop
 8005096:	371c      	adds	r7, #28
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	40013400 	.word	0x40013400
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40014400 	.word	0x40014400
 80050b0:	40014800 	.word	0x40014800

080050b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	021b      	lsls	r3, r3, #8
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	031b      	lsls	r3, r3, #12
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a18      	ldr	r2, [pc, #96]	; (8005174 <TIM_OC4_SetConfig+0xc0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00f      	beq.n	8005138 <TIM_OC4_SetConfig+0x84>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a17      	ldr	r2, [pc, #92]	; (8005178 <TIM_OC4_SetConfig+0xc4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00b      	beq.n	8005138 <TIM_OC4_SetConfig+0x84>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a16      	ldr	r2, [pc, #88]	; (800517c <TIM_OC4_SetConfig+0xc8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d007      	beq.n	8005138 <TIM_OC4_SetConfig+0x84>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a15      	ldr	r2, [pc, #84]	; (8005180 <TIM_OC4_SetConfig+0xcc>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_OC4_SetConfig+0x84>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a14      	ldr	r2, [pc, #80]	; (8005184 <TIM_OC4_SetConfig+0xd0>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d109      	bne.n	800514c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800513e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	019b      	lsls	r3, r3, #6
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	621a      	str	r2, [r3, #32]
}
 8005166:	bf00      	nop
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40012c00 	.word	0x40012c00
 8005178:	40013400 	.word	0x40013400
 800517c:	40014000 	.word	0x40014000
 8005180:	40014400 	.word	0x40014400
 8005184:	40014800 	.word	0x40014800

08005188 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80051cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	041b      	lsls	r3, r3, #16
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a17      	ldr	r2, [pc, #92]	; (800523c <TIM_OC5_SetConfig+0xb4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00f      	beq.n	8005202 <TIM_OC5_SetConfig+0x7a>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a16      	ldr	r2, [pc, #88]	; (8005240 <TIM_OC5_SetConfig+0xb8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00b      	beq.n	8005202 <TIM_OC5_SetConfig+0x7a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a15      	ldr	r2, [pc, #84]	; (8005244 <TIM_OC5_SetConfig+0xbc>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d007      	beq.n	8005202 <TIM_OC5_SetConfig+0x7a>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a14      	ldr	r2, [pc, #80]	; (8005248 <TIM_OC5_SetConfig+0xc0>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d003      	beq.n	8005202 <TIM_OC5_SetConfig+0x7a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a13      	ldr	r2, [pc, #76]	; (800524c <TIM_OC5_SetConfig+0xc4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d109      	bne.n	8005216 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005208:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	021b      	lsls	r3, r3, #8
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	621a      	str	r2, [r3, #32]
}
 8005230:	bf00      	nop
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	40012c00 	.word	0x40012c00
 8005240:	40013400 	.word	0x40013400
 8005244:	40014000 	.word	0x40014000
 8005248:	40014400 	.word	0x40014400
 800524c:	40014800 	.word	0x40014800

08005250 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800527e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4313      	orrs	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005296:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	051b      	lsls	r3, r3, #20
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a18      	ldr	r2, [pc, #96]	; (8005308 <TIM_OC6_SetConfig+0xb8>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00f      	beq.n	80052cc <TIM_OC6_SetConfig+0x7c>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a17      	ldr	r2, [pc, #92]	; (800530c <TIM_OC6_SetConfig+0xbc>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00b      	beq.n	80052cc <TIM_OC6_SetConfig+0x7c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a16      	ldr	r2, [pc, #88]	; (8005310 <TIM_OC6_SetConfig+0xc0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d007      	beq.n	80052cc <TIM_OC6_SetConfig+0x7c>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a15      	ldr	r2, [pc, #84]	; (8005314 <TIM_OC6_SetConfig+0xc4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d003      	beq.n	80052cc <TIM_OC6_SetConfig+0x7c>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a14      	ldr	r2, [pc, #80]	; (8005318 <TIM_OC6_SetConfig+0xc8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d109      	bne.n	80052e0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	029b      	lsls	r3, r3, #10
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	4313      	orrs	r3, r2
 80052de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	621a      	str	r2, [r3, #32]
}
 80052fa:	bf00      	nop
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40012c00 	.word	0x40012c00
 800530c:	40013400 	.word	0x40013400
 8005310:	40014000 	.word	0x40014000
 8005314:	40014400 	.word	0x40014400
 8005318:	40014800 	.word	0x40014800

0800531c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f003 031f 	and.w	r3, r3, #31
 800532e:	2201      	movs	r2, #1
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a1a      	ldr	r2, [r3, #32]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	43db      	mvns	r3, r3
 800533e:	401a      	ands	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a1a      	ldr	r2, [r3, #32]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 031f 	and.w	r3, r3, #31
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	fa01 f303 	lsl.w	r3, r1, r3
 8005354:	431a      	orrs	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	621a      	str	r2, [r3, #32]
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
	...

08005368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005378:	2b01      	cmp	r3, #1
 800537a:	d101      	bne.n	8005380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800537c:	2302      	movs	r3, #2
 800537e:	e068      	b.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a2e      	ldr	r2, [pc, #184]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d004      	beq.n	80053b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a2d      	ldr	r2, [pc, #180]	; (8005464 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d108      	bne.n	80053c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a1e      	ldr	r2, [pc, #120]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d01d      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f2:	d018      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a1b      	ldr	r2, [pc, #108]	; (8005468 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d013      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a1a      	ldr	r2, [pc, #104]	; (800546c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00e      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a18      	ldr	r2, [pc, #96]	; (8005470 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d009      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a13      	ldr	r2, [pc, #76]	; (8005464 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d004      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a14      	ldr	r2, [pc, #80]	; (8005474 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d10c      	bne.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800542c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	4313      	orrs	r3, r2
 8005436:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40012c00 	.word	0x40012c00
 8005464:	40013400 	.word	0x40013400
 8005468:	40000400 	.word	0x40000400
 800546c:	40000800 	.word	0x40000800
 8005470:	40000c00 	.word	0x40000c00
 8005474:	40014000 	.word	0x40014000

08005478 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e040      	b.n	8005548 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fc fca0 	bl	8001e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2224      	movs	r2, #36	; 0x24
 80054e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0201 	bic.w	r2, r2, #1
 80054f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fc94 	bl	8005e20 <UART_SetConfig>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d101      	bne.n	8005502 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e022      	b.n	8005548 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 ff40 	bl	8006390 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800551e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800552e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0201 	orr.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 ffc7 	bl	80064d4 <UART_CheckIdleState>
 8005546:	4603      	mov	r3, r0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08a      	sub	sp, #40	; 0x28
 8005554:	af02      	add	r7, sp, #8
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	4613      	mov	r3, r2
 800555e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005564:	2b20      	cmp	r3, #32
 8005566:	f040 8082 	bne.w	800566e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <HAL_UART_Transmit+0x26>
 8005570:	88fb      	ldrh	r3, [r7, #6]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e07a      	b.n	8005670 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_UART_Transmit+0x38>
 8005584:	2302      	movs	r3, #2
 8005586:	e073      	b.n	8005670 <HAL_UART_Transmit+0x120>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2221      	movs	r2, #33	; 0x21
 800559c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800559e:	f7fc fe3b 	bl	8002218 <HAL_GetTick>
 80055a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	88fa      	ldrh	r2, [r7, #6]
 80055a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	88fa      	ldrh	r2, [r7, #6]
 80055b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055bc:	d108      	bne.n	80055d0 <HAL_UART_Transmit+0x80>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d104      	bne.n	80055d0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	61bb      	str	r3, [r7, #24]
 80055ce:	e003      	b.n	80055d8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80055e0:	e02d      	b.n	800563e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2200      	movs	r2, #0
 80055ea:	2180      	movs	r1, #128	; 0x80
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 ffba 	bl	8006566 <UART_WaitOnFlagUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e039      	b.n	8005670 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10b      	bne.n	800561a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	881a      	ldrh	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800560e:	b292      	uxth	r2, r2
 8005610:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	3302      	adds	r3, #2
 8005616:	61bb      	str	r3, [r7, #24]
 8005618:	e008      	b.n	800562c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	781a      	ldrb	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	b292      	uxth	r2, r2
 8005624:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	3301      	adds	r3, #1
 800562a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1cb      	bne.n	80055e2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2200      	movs	r2, #0
 8005652:	2140      	movs	r1, #64	; 0x40
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 ff86 	bl	8006566 <UART_WaitOnFlagUntilTimeout>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e005      	b.n	8005670 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2220      	movs	r2, #32
 8005668:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	e000      	b.n	8005670 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800566e:	2302      	movs	r3, #2
  }
}
 8005670:	4618      	mov	r0, r3
 8005672:	3720      	adds	r7, #32
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08a      	sub	sp, #40	; 0x28
 800567c:	af02      	add	r7, sp, #8
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	4613      	mov	r3, r2
 8005686:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800568c:	2b20      	cmp	r3, #32
 800568e:	f040 80bf 	bne.w	8005810 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <HAL_UART_Receive+0x26>
 8005698:	88fb      	ldrh	r3, [r7, #6]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e0b7      	b.n	8005812 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d101      	bne.n	80056b0 <HAL_UART_Receive+0x38>
 80056ac:	2302      	movs	r3, #2
 80056ae:	e0b0      	b.n	8005812 <HAL_UART_Receive+0x19a>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2222      	movs	r2, #34	; 0x22
 80056c4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056cc:	f7fc fda4 	bl	8002218 <HAL_GetTick>
 80056d0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	88fa      	ldrh	r2, [r7, #6]
 80056d6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	88fa      	ldrh	r2, [r7, #6]
 80056de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ea:	d10e      	bne.n	800570a <HAL_UART_Receive+0x92>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d105      	bne.n	8005700 <HAL_UART_Receive+0x88>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80056fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056fe:	e02d      	b.n	800575c <HAL_UART_Receive+0xe4>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	22ff      	movs	r2, #255	; 0xff
 8005704:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005708:	e028      	b.n	800575c <HAL_UART_Receive+0xe4>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10d      	bne.n	800572e <HAL_UART_Receive+0xb6>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d104      	bne.n	8005724 <HAL_UART_Receive+0xac>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	22ff      	movs	r2, #255	; 0xff
 800571e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005722:	e01b      	b.n	800575c <HAL_UART_Receive+0xe4>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	227f      	movs	r2, #127	; 0x7f
 8005728:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800572c:	e016      	b.n	800575c <HAL_UART_Receive+0xe4>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005736:	d10d      	bne.n	8005754 <HAL_UART_Receive+0xdc>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d104      	bne.n	800574a <HAL_UART_Receive+0xd2>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	227f      	movs	r2, #127	; 0x7f
 8005744:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005748:	e008      	b.n	800575c <HAL_UART_Receive+0xe4>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	223f      	movs	r2, #63	; 0x3f
 800574e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005752:	e003      	b.n	800575c <HAL_UART_Receive+0xe4>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005762:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576c:	d108      	bne.n	8005780 <HAL_UART_Receive+0x108>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d104      	bne.n	8005780 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005776:	2300      	movs	r3, #0
 8005778:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	e003      	b.n	8005788 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005784:	2300      	movs	r3, #0
 8005786:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005790:	e033      	b.n	80057fa <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2200      	movs	r2, #0
 800579a:	2120      	movs	r1, #32
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 fee2 	bl	8006566 <UART_WaitOnFlagUntilTimeout>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e032      	b.n	8005812 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10c      	bne.n	80057cc <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	8a7b      	ldrh	r3, [r7, #18]
 80057bc:	4013      	ands	r3, r2
 80057be:	b29a      	uxth	r2, r3
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	3302      	adds	r3, #2
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	e00d      	b.n	80057e8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	8a7b      	ldrh	r3, [r7, #18]
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	4013      	ands	r3, r2
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	3301      	adds	r3, #1
 80057e6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005800:	b29b      	uxth	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1c5      	bne.n	8005792 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2220      	movs	r2, #32
 800580a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	e000      	b.n	8005812 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005810:	2302      	movs	r3, #2
  }
}
 8005812:	4618      	mov	r0, r3
 8005814:	3720      	adds	r7, #32
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b0ba      	sub	sp, #232	; 0xe8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005842:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005846:	f640 030f 	movw	r3, #2063	; 0x80f
 800584a:	4013      	ands	r3, r2
 800584c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005850:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005854:	2b00      	cmp	r3, #0
 8005856:	d115      	bne.n	8005884 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585c:	f003 0320 	and.w	r3, r3, #32
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00f      	beq.n	8005884 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005868:	f003 0320 	and.w	r3, r3, #32
 800586c:	2b00      	cmp	r3, #0
 800586e:	d009      	beq.n	8005884 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 82a6 	beq.w	8005dc6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	4798      	blx	r3
      }
      return;
 8005882:	e2a0      	b.n	8005dc6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 8117 	beq.w	8005abc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800588e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d106      	bne.n	80058a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800589a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800589e:	4b85      	ldr	r3, [pc, #532]	; (8005ab4 <HAL_UART_IRQHandler+0x298>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 810a 	beq.w	8005abc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d011      	beq.n	80058d8 <HAL_UART_IRQHandler+0xbc>
 80058b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00b      	beq.n	80058d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2201      	movs	r2, #1
 80058c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ce:	f043 0201 	orr.w	r2, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d011      	beq.n	8005908 <HAL_UART_IRQHandler+0xec>
 80058e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00b      	beq.n	8005908 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2202      	movs	r2, #2
 80058f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058fe:	f043 0204 	orr.w	r2, r3, #4
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	d011      	beq.n	8005938 <HAL_UART_IRQHandler+0x11c>
 8005914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00b      	beq.n	8005938 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2204      	movs	r2, #4
 8005926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800592e:	f043 0202 	orr.w	r2, r3, #2
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b00      	cmp	r3, #0
 8005942:	d017      	beq.n	8005974 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005948:	f003 0320 	and.w	r3, r3, #32
 800594c:	2b00      	cmp	r3, #0
 800594e:	d105      	bne.n	800595c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005954:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00b      	beq.n	8005974 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2208      	movs	r2, #8
 8005962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800596a:	f043 0208 	orr.w	r2, r3, #8
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800597c:	2b00      	cmp	r3, #0
 800597e:	d012      	beq.n	80059a6 <HAL_UART_IRQHandler+0x18a>
 8005980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005984:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00c      	beq.n	80059a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005994:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800599c:	f043 0220 	orr.w	r2, r3, #32
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 820c 	beq.w	8005dca <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80059b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00d      	beq.n	80059da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d007      	beq.n	80059da <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ee:	2b40      	cmp	r3, #64	; 0x40
 80059f0:	d005      	beq.n	80059fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d04f      	beq.n	8005a9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fe75 	bl	80066ee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0e:	2b40      	cmp	r3, #64	; 0x40
 8005a10:	d141      	bne.n	8005a96 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3308      	adds	r3, #8
 8005a18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a20:	e853 3f00 	ldrex	r3, [r3]
 8005a24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3308      	adds	r3, #8
 8005a3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1d9      	bne.n	8005a12 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d013      	beq.n	8005a8e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6a:	4a13      	ldr	r2, [pc, #76]	; (8005ab8 <HAL_UART_IRQHandler+0x29c>)
 8005a6c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fc fd2b 	bl	80024ce <HAL_DMA_Abort_IT>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d017      	beq.n	8005aae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a8c:	e00f      	b.n	8005aae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f9b0 	bl	8005df4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a94:	e00b      	b.n	8005aae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f9ac 	bl	8005df4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9c:	e007      	b.n	8005aae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f9a8 	bl	8005df4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005aac:	e18d      	b.n	8005dca <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aae:	bf00      	nop
    return;
 8005ab0:	e18b      	b.n	8005dca <HAL_UART_IRQHandler+0x5ae>
 8005ab2:	bf00      	nop
 8005ab4:	04000120 	.word	0x04000120
 8005ab8:	080067b5 	.word	0x080067b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	f040 8146 	bne.w	8005d52 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aca:	f003 0310 	and.w	r3, r3, #16
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 813f 	beq.w	8005d52 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 8138 	beq.w	8005d52 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2210      	movs	r2, #16
 8005ae8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af4:	2b40      	cmp	r3, #64	; 0x40
 8005af6:	f040 80b4 	bne.w	8005c62 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 815f 	beq.w	8005dce <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	f080 8157 	bcs.w	8005dce <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0320 	and.w	r3, r3, #32
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f040 8085 	bne.w	8005c46 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	461a      	mov	r2, r3
 8005b62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b6a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1da      	bne.n	8005b3c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b98:	f023 0301 	bic.w	r3, r3, #1
 8005b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3308      	adds	r3, #8
 8005ba6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005baa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005bb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bb6:	e841 2300 	strex	r3, r2, [r1]
 8005bba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005bbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1e1      	bne.n	8005b86 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3308      	adds	r3, #8
 8005bc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3308      	adds	r3, #8
 8005be2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005be6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005be8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005bec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005bee:	e841 2300 	strex	r3, r2, [r1]
 8005bf2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1e3      	bne.n	8005bc2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c0e:	e853 3f00 	ldrex	r3, [r3]
 8005c12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c16:	f023 0310 	bic.w	r3, r3, #16
 8005c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c28:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c2a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c30:	e841 2300 	strex	r3, r2, [r1]
 8005c34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1e4      	bne.n	8005c06 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fc fc06 	bl	8002452 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	4619      	mov	r1, r3
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f8d4 	bl	8005e08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c60:	e0b5      	b.n	8005dce <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 80a7 	beq.w	8005dd2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005c84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 80a2 	beq.w	8005dd2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ca2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	461a      	mov	r2, r3
 8005cac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8005cb2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cb8:	e841 2300 	strex	r3, r2, [r1]
 8005cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e4      	bne.n	8005c8e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3308      	adds	r3, #8
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	e853 3f00 	ldrex	r3, [r3]
 8005cd2:	623b      	str	r3, [r7, #32]
   return(result);
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	f023 0301 	bic.w	r3, r3, #1
 8005cda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ce8:	633a      	str	r2, [r7, #48]	; 0x30
 8005cea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e3      	bne.n	8005cc4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	e853 3f00 	ldrex	r3, [r3]
 8005d1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0310 	bic.w	r3, r3, #16
 8005d22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d30:	61fb      	str	r3, [r7, #28]
 8005d32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d34:	69b9      	ldr	r1, [r7, #24]
 8005d36:	69fa      	ldr	r2, [r7, #28]
 8005d38:	e841 2300 	strex	r3, r2, [r1]
 8005d3c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e4      	bne.n	8005d0e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d48:	4619      	mov	r1, r3
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f85c 	bl	8005e08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d50:	e03f      	b.n	8005dd2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00e      	beq.n	8005d7c <HAL_UART_IRQHandler+0x560>
 8005d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d008      	beq.n	8005d7c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fd5d 	bl	8006834 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d7a:	e02d      	b.n	8005dd8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00e      	beq.n	8005da6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d008      	beq.n	8005da6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d01c      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	4798      	blx	r3
    }
    return;
 8005da4:	e017      	b.n	8005dd6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d012      	beq.n	8005dd8 <HAL_UART_IRQHandler+0x5bc>
 8005db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00c      	beq.n	8005dd8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fd0e 	bl	80067e0 <UART_EndTransmit_IT>
    return;
 8005dc4:	e008      	b.n	8005dd8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005dc6:	bf00      	nop
 8005dc8:	e006      	b.n	8005dd8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005dca:	bf00      	nop
 8005dcc:	e004      	b.n	8005dd8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005dce:	bf00      	nop
 8005dd0:	e002      	b.n	8005dd8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005dd2:	bf00      	nop
 8005dd4:	e000      	b.n	8005dd8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005dd6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005dd8:	37e8      	adds	r7, #232	; 0xe8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop

08005de0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	460b      	mov	r3, r1
 8005e12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e24:	b08a      	sub	sp, #40	; 0x28
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	4ba4      	ldr	r3, [pc, #656]	; (80060e0 <UART_SetConfig+0x2c0>)
 8005e50:	4013      	ands	r3, r2
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	6812      	ldr	r2, [r2, #0]
 8005e56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e58:	430b      	orrs	r3, r1
 8005e5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a99      	ldr	r2, [pc, #612]	; (80060e4 <UART_SetConfig+0x2c4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d004      	beq.n	8005e8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a90      	ldr	r2, [pc, #576]	; (80060e8 <UART_SetConfig+0x2c8>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d126      	bne.n	8005ef8 <UART_SetConfig+0xd8>
 8005eaa:	4b90      	ldr	r3, [pc, #576]	; (80060ec <UART_SetConfig+0x2cc>)
 8005eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	2b03      	cmp	r3, #3
 8005eb6:	d81b      	bhi.n	8005ef0 <UART_SetConfig+0xd0>
 8005eb8:	a201      	add	r2, pc, #4	; (adr r2, 8005ec0 <UART_SetConfig+0xa0>)
 8005eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebe:	bf00      	nop
 8005ec0:	08005ed1 	.word	0x08005ed1
 8005ec4:	08005ee1 	.word	0x08005ee1
 8005ec8:	08005ed9 	.word	0x08005ed9
 8005ecc:	08005ee9 	.word	0x08005ee9
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ed6:	e116      	b.n	8006106 <UART_SetConfig+0x2e6>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ede:	e112      	b.n	8006106 <UART_SetConfig+0x2e6>
 8005ee0:	2304      	movs	r3, #4
 8005ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ee6:	e10e      	b.n	8006106 <UART_SetConfig+0x2e6>
 8005ee8:	2308      	movs	r3, #8
 8005eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eee:	e10a      	b.n	8006106 <UART_SetConfig+0x2e6>
 8005ef0:	2310      	movs	r3, #16
 8005ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ef6:	e106      	b.n	8006106 <UART_SetConfig+0x2e6>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a7c      	ldr	r2, [pc, #496]	; (80060f0 <UART_SetConfig+0x2d0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d138      	bne.n	8005f74 <UART_SetConfig+0x154>
 8005f02:	4b7a      	ldr	r3, [pc, #488]	; (80060ec <UART_SetConfig+0x2cc>)
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f08:	f003 030c 	and.w	r3, r3, #12
 8005f0c:	2b0c      	cmp	r3, #12
 8005f0e:	d82d      	bhi.n	8005f6c <UART_SetConfig+0x14c>
 8005f10:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <UART_SetConfig+0xf8>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005f4d 	.word	0x08005f4d
 8005f1c:	08005f6d 	.word	0x08005f6d
 8005f20:	08005f6d 	.word	0x08005f6d
 8005f24:	08005f6d 	.word	0x08005f6d
 8005f28:	08005f5d 	.word	0x08005f5d
 8005f2c:	08005f6d 	.word	0x08005f6d
 8005f30:	08005f6d 	.word	0x08005f6d
 8005f34:	08005f6d 	.word	0x08005f6d
 8005f38:	08005f55 	.word	0x08005f55
 8005f3c:	08005f6d 	.word	0x08005f6d
 8005f40:	08005f6d 	.word	0x08005f6d
 8005f44:	08005f6d 	.word	0x08005f6d
 8005f48:	08005f65 	.word	0x08005f65
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f52:	e0d8      	b.n	8006106 <UART_SetConfig+0x2e6>
 8005f54:	2302      	movs	r3, #2
 8005f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f5a:	e0d4      	b.n	8006106 <UART_SetConfig+0x2e6>
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f62:	e0d0      	b.n	8006106 <UART_SetConfig+0x2e6>
 8005f64:	2308      	movs	r3, #8
 8005f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f6a:	e0cc      	b.n	8006106 <UART_SetConfig+0x2e6>
 8005f6c:	2310      	movs	r3, #16
 8005f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f72:	e0c8      	b.n	8006106 <UART_SetConfig+0x2e6>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a5e      	ldr	r2, [pc, #376]	; (80060f4 <UART_SetConfig+0x2d4>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d125      	bne.n	8005fca <UART_SetConfig+0x1aa>
 8005f7e:	4b5b      	ldr	r3, [pc, #364]	; (80060ec <UART_SetConfig+0x2cc>)
 8005f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f88:	2b30      	cmp	r3, #48	; 0x30
 8005f8a:	d016      	beq.n	8005fba <UART_SetConfig+0x19a>
 8005f8c:	2b30      	cmp	r3, #48	; 0x30
 8005f8e:	d818      	bhi.n	8005fc2 <UART_SetConfig+0x1a2>
 8005f90:	2b20      	cmp	r3, #32
 8005f92:	d00a      	beq.n	8005faa <UART_SetConfig+0x18a>
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	d814      	bhi.n	8005fc2 <UART_SetConfig+0x1a2>
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <UART_SetConfig+0x182>
 8005f9c:	2b10      	cmp	r3, #16
 8005f9e:	d008      	beq.n	8005fb2 <UART_SetConfig+0x192>
 8005fa0:	e00f      	b.n	8005fc2 <UART_SetConfig+0x1a2>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fa8:	e0ad      	b.n	8006106 <UART_SetConfig+0x2e6>
 8005faa:	2302      	movs	r3, #2
 8005fac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fb0:	e0a9      	b.n	8006106 <UART_SetConfig+0x2e6>
 8005fb2:	2304      	movs	r3, #4
 8005fb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fb8:	e0a5      	b.n	8006106 <UART_SetConfig+0x2e6>
 8005fba:	2308      	movs	r3, #8
 8005fbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc0:	e0a1      	b.n	8006106 <UART_SetConfig+0x2e6>
 8005fc2:	2310      	movs	r3, #16
 8005fc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc8:	e09d      	b.n	8006106 <UART_SetConfig+0x2e6>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a4a      	ldr	r2, [pc, #296]	; (80060f8 <UART_SetConfig+0x2d8>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d125      	bne.n	8006020 <UART_SetConfig+0x200>
 8005fd4:	4b45      	ldr	r3, [pc, #276]	; (80060ec <UART_SetConfig+0x2cc>)
 8005fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005fde:	2bc0      	cmp	r3, #192	; 0xc0
 8005fe0:	d016      	beq.n	8006010 <UART_SetConfig+0x1f0>
 8005fe2:	2bc0      	cmp	r3, #192	; 0xc0
 8005fe4:	d818      	bhi.n	8006018 <UART_SetConfig+0x1f8>
 8005fe6:	2b80      	cmp	r3, #128	; 0x80
 8005fe8:	d00a      	beq.n	8006000 <UART_SetConfig+0x1e0>
 8005fea:	2b80      	cmp	r3, #128	; 0x80
 8005fec:	d814      	bhi.n	8006018 <UART_SetConfig+0x1f8>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <UART_SetConfig+0x1d8>
 8005ff2:	2b40      	cmp	r3, #64	; 0x40
 8005ff4:	d008      	beq.n	8006008 <UART_SetConfig+0x1e8>
 8005ff6:	e00f      	b.n	8006018 <UART_SetConfig+0x1f8>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ffe:	e082      	b.n	8006106 <UART_SetConfig+0x2e6>
 8006000:	2302      	movs	r3, #2
 8006002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006006:	e07e      	b.n	8006106 <UART_SetConfig+0x2e6>
 8006008:	2304      	movs	r3, #4
 800600a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800600e:	e07a      	b.n	8006106 <UART_SetConfig+0x2e6>
 8006010:	2308      	movs	r3, #8
 8006012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006016:	e076      	b.n	8006106 <UART_SetConfig+0x2e6>
 8006018:	2310      	movs	r3, #16
 800601a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800601e:	e072      	b.n	8006106 <UART_SetConfig+0x2e6>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a35      	ldr	r2, [pc, #212]	; (80060fc <UART_SetConfig+0x2dc>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d12a      	bne.n	8006080 <UART_SetConfig+0x260>
 800602a:	4b30      	ldr	r3, [pc, #192]	; (80060ec <UART_SetConfig+0x2cc>)
 800602c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006034:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006038:	d01a      	beq.n	8006070 <UART_SetConfig+0x250>
 800603a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800603e:	d81b      	bhi.n	8006078 <UART_SetConfig+0x258>
 8006040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006044:	d00c      	beq.n	8006060 <UART_SetConfig+0x240>
 8006046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800604a:	d815      	bhi.n	8006078 <UART_SetConfig+0x258>
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <UART_SetConfig+0x238>
 8006050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006054:	d008      	beq.n	8006068 <UART_SetConfig+0x248>
 8006056:	e00f      	b.n	8006078 <UART_SetConfig+0x258>
 8006058:	2300      	movs	r3, #0
 800605a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800605e:	e052      	b.n	8006106 <UART_SetConfig+0x2e6>
 8006060:	2302      	movs	r3, #2
 8006062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006066:	e04e      	b.n	8006106 <UART_SetConfig+0x2e6>
 8006068:	2304      	movs	r3, #4
 800606a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800606e:	e04a      	b.n	8006106 <UART_SetConfig+0x2e6>
 8006070:	2308      	movs	r3, #8
 8006072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006076:	e046      	b.n	8006106 <UART_SetConfig+0x2e6>
 8006078:	2310      	movs	r3, #16
 800607a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800607e:	e042      	b.n	8006106 <UART_SetConfig+0x2e6>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a17      	ldr	r2, [pc, #92]	; (80060e4 <UART_SetConfig+0x2c4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d13a      	bne.n	8006100 <UART_SetConfig+0x2e0>
 800608a:	4b18      	ldr	r3, [pc, #96]	; (80060ec <UART_SetConfig+0x2cc>)
 800608c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006090:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006094:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006098:	d01a      	beq.n	80060d0 <UART_SetConfig+0x2b0>
 800609a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800609e:	d81b      	bhi.n	80060d8 <UART_SetConfig+0x2b8>
 80060a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a4:	d00c      	beq.n	80060c0 <UART_SetConfig+0x2a0>
 80060a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060aa:	d815      	bhi.n	80060d8 <UART_SetConfig+0x2b8>
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <UART_SetConfig+0x298>
 80060b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060b4:	d008      	beq.n	80060c8 <UART_SetConfig+0x2a8>
 80060b6:	e00f      	b.n	80060d8 <UART_SetConfig+0x2b8>
 80060b8:	2300      	movs	r3, #0
 80060ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060be:	e022      	b.n	8006106 <UART_SetConfig+0x2e6>
 80060c0:	2302      	movs	r3, #2
 80060c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060c6:	e01e      	b.n	8006106 <UART_SetConfig+0x2e6>
 80060c8:	2304      	movs	r3, #4
 80060ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ce:	e01a      	b.n	8006106 <UART_SetConfig+0x2e6>
 80060d0:	2308      	movs	r3, #8
 80060d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060d6:	e016      	b.n	8006106 <UART_SetConfig+0x2e6>
 80060d8:	2310      	movs	r3, #16
 80060da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060de:	e012      	b.n	8006106 <UART_SetConfig+0x2e6>
 80060e0:	efff69f3 	.word	0xefff69f3
 80060e4:	40008000 	.word	0x40008000
 80060e8:	40013800 	.word	0x40013800
 80060ec:	40021000 	.word	0x40021000
 80060f0:	40004400 	.word	0x40004400
 80060f4:	40004800 	.word	0x40004800
 80060f8:	40004c00 	.word	0x40004c00
 80060fc:	40005000 	.word	0x40005000
 8006100:	2310      	movs	r3, #16
 8006102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a9f      	ldr	r2, [pc, #636]	; (8006388 <UART_SetConfig+0x568>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d17a      	bne.n	8006206 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006110:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006114:	2b08      	cmp	r3, #8
 8006116:	d824      	bhi.n	8006162 <UART_SetConfig+0x342>
 8006118:	a201      	add	r2, pc, #4	; (adr r2, 8006120 <UART_SetConfig+0x300>)
 800611a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611e:	bf00      	nop
 8006120:	08006145 	.word	0x08006145
 8006124:	08006163 	.word	0x08006163
 8006128:	0800614d 	.word	0x0800614d
 800612c:	08006163 	.word	0x08006163
 8006130:	08006153 	.word	0x08006153
 8006134:	08006163 	.word	0x08006163
 8006138:	08006163 	.word	0x08006163
 800613c:	08006163 	.word	0x08006163
 8006140:	0800615b 	.word	0x0800615b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006144:	f7fd f9e8 	bl	8003518 <HAL_RCC_GetPCLK1Freq>
 8006148:	61f8      	str	r0, [r7, #28]
        break;
 800614a:	e010      	b.n	800616e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800614c:	4b8f      	ldr	r3, [pc, #572]	; (800638c <UART_SetConfig+0x56c>)
 800614e:	61fb      	str	r3, [r7, #28]
        break;
 8006150:	e00d      	b.n	800616e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006152:	f7fd f949 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 8006156:	61f8      	str	r0, [r7, #28]
        break;
 8006158:	e009      	b.n	800616e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800615a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800615e:	61fb      	str	r3, [r7, #28]
        break;
 8006160:	e005      	b.n	800616e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006162:	2300      	movs	r3, #0
 8006164:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800616c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 80fb 	beq.w	800636c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	4613      	mov	r3, r2
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	4413      	add	r3, r2
 8006180:	69fa      	ldr	r2, [r7, #28]
 8006182:	429a      	cmp	r2, r3
 8006184:	d305      	bcc.n	8006192 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800618c:	69fa      	ldr	r2, [r7, #28]
 800618e:	429a      	cmp	r2, r3
 8006190:	d903      	bls.n	800619a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006198:	e0e8      	b.n	800636c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	2200      	movs	r2, #0
 800619e:	461c      	mov	r4, r3
 80061a0:	4615      	mov	r5, r2
 80061a2:	f04f 0200 	mov.w	r2, #0
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	022b      	lsls	r3, r5, #8
 80061ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80061b0:	0222      	lsls	r2, r4, #8
 80061b2:	68f9      	ldr	r1, [r7, #12]
 80061b4:	6849      	ldr	r1, [r1, #4]
 80061b6:	0849      	lsrs	r1, r1, #1
 80061b8:	2000      	movs	r0, #0
 80061ba:	4688      	mov	r8, r1
 80061bc:	4681      	mov	r9, r0
 80061be:	eb12 0a08 	adds.w	sl, r2, r8
 80061c2:	eb43 0b09 	adc.w	fp, r3, r9
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	603b      	str	r3, [r7, #0]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d4:	4650      	mov	r0, sl
 80061d6:	4659      	mov	r1, fp
 80061d8:	f7fa fb48 	bl	800086c <__aeabi_uldivmod>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4613      	mov	r3, r2
 80061e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ea:	d308      	bcc.n	80061fe <UART_SetConfig+0x3de>
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061f2:	d204      	bcs.n	80061fe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	60da      	str	r2, [r3, #12]
 80061fc:	e0b6      	b.n	800636c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006204:	e0b2      	b.n	800636c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800620e:	d15e      	bne.n	80062ce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006210:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006214:	2b08      	cmp	r3, #8
 8006216:	d828      	bhi.n	800626a <UART_SetConfig+0x44a>
 8006218:	a201      	add	r2, pc, #4	; (adr r2, 8006220 <UART_SetConfig+0x400>)
 800621a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621e:	bf00      	nop
 8006220:	08006245 	.word	0x08006245
 8006224:	0800624d 	.word	0x0800624d
 8006228:	08006255 	.word	0x08006255
 800622c:	0800626b 	.word	0x0800626b
 8006230:	0800625b 	.word	0x0800625b
 8006234:	0800626b 	.word	0x0800626b
 8006238:	0800626b 	.word	0x0800626b
 800623c:	0800626b 	.word	0x0800626b
 8006240:	08006263 	.word	0x08006263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006244:	f7fd f968 	bl	8003518 <HAL_RCC_GetPCLK1Freq>
 8006248:	61f8      	str	r0, [r7, #28]
        break;
 800624a:	e014      	b.n	8006276 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800624c:	f7fd f97a 	bl	8003544 <HAL_RCC_GetPCLK2Freq>
 8006250:	61f8      	str	r0, [r7, #28]
        break;
 8006252:	e010      	b.n	8006276 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006254:	4b4d      	ldr	r3, [pc, #308]	; (800638c <UART_SetConfig+0x56c>)
 8006256:	61fb      	str	r3, [r7, #28]
        break;
 8006258:	e00d      	b.n	8006276 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800625a:	f7fd f8c5 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 800625e:	61f8      	str	r0, [r7, #28]
        break;
 8006260:	e009      	b.n	8006276 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006266:	61fb      	str	r3, [r7, #28]
        break;
 8006268:	e005      	b.n	8006276 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006274:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d077      	beq.n	800636c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	005a      	lsls	r2, r3, #1
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	085b      	lsrs	r3, r3, #1
 8006286:	441a      	add	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006290:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	2b0f      	cmp	r3, #15
 8006296:	d916      	bls.n	80062c6 <UART_SetConfig+0x4a6>
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800629e:	d212      	bcs.n	80062c6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	f023 030f 	bic.w	r3, r3, #15
 80062a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	085b      	lsrs	r3, r3, #1
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	f003 0307 	and.w	r3, r3, #7
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	8afb      	ldrh	r3, [r7, #22]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	8afa      	ldrh	r2, [r7, #22]
 80062c2:	60da      	str	r2, [r3, #12]
 80062c4:	e052      	b.n	800636c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80062cc:	e04e      	b.n	800636c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062d2:	2b08      	cmp	r3, #8
 80062d4:	d827      	bhi.n	8006326 <UART_SetConfig+0x506>
 80062d6:	a201      	add	r2, pc, #4	; (adr r2, 80062dc <UART_SetConfig+0x4bc>)
 80062d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062dc:	08006301 	.word	0x08006301
 80062e0:	08006309 	.word	0x08006309
 80062e4:	08006311 	.word	0x08006311
 80062e8:	08006327 	.word	0x08006327
 80062ec:	08006317 	.word	0x08006317
 80062f0:	08006327 	.word	0x08006327
 80062f4:	08006327 	.word	0x08006327
 80062f8:	08006327 	.word	0x08006327
 80062fc:	0800631f 	.word	0x0800631f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006300:	f7fd f90a 	bl	8003518 <HAL_RCC_GetPCLK1Freq>
 8006304:	61f8      	str	r0, [r7, #28]
        break;
 8006306:	e014      	b.n	8006332 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006308:	f7fd f91c 	bl	8003544 <HAL_RCC_GetPCLK2Freq>
 800630c:	61f8      	str	r0, [r7, #28]
        break;
 800630e:	e010      	b.n	8006332 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006310:	4b1e      	ldr	r3, [pc, #120]	; (800638c <UART_SetConfig+0x56c>)
 8006312:	61fb      	str	r3, [r7, #28]
        break;
 8006314:	e00d      	b.n	8006332 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006316:	f7fd f867 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 800631a:	61f8      	str	r0, [r7, #28]
        break;
 800631c:	e009      	b.n	8006332 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800631e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006322:	61fb      	str	r3, [r7, #28]
        break;
 8006324:	e005      	b.n	8006332 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006330:	bf00      	nop
    }

    if (pclk != 0U)
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d019      	beq.n	800636c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	085a      	lsrs	r2, r3, #1
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	441a      	add	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	fbb2 f3f3 	udiv	r3, r2, r3
 800634a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	2b0f      	cmp	r3, #15
 8006350:	d909      	bls.n	8006366 <UART_SetConfig+0x546>
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006358:	d205      	bcs.n	8006366 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	b29a      	uxth	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	60da      	str	r2, [r3, #12]
 8006364:	e002      	b.n	800636c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006378:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800637c:	4618      	mov	r0, r3
 800637e:	3728      	adds	r7, #40	; 0x28
 8006380:	46bd      	mov	sp, r7
 8006382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006386:	bf00      	nop
 8006388:	40008000 	.word	0x40008000
 800638c:	00f42400 	.word	0x00f42400

08006390 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00a      	beq.n	80063ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00a      	beq.n	80063dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	430a      	orrs	r2, r1
 80063da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00a      	beq.n	80063fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	f003 0308 	and.w	r3, r3, #8
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	430a      	orrs	r2, r1
 800641e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	f003 0310 	and.w	r3, r3, #16
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00a      	beq.n	8006442 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646c:	2b00      	cmp	r3, #0
 800646e:	d01a      	beq.n	80064a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800648e:	d10a      	bne.n	80064a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	605a      	str	r2, [r3, #4]
  }
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af02      	add	r7, sp, #8
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064e4:	f7fb fe98 	bl	8002218 <HAL_GetTick>
 80064e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b08      	cmp	r3, #8
 80064f6:	d10e      	bne.n	8006516 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f82d 	bl	8006566 <UART_WaitOnFlagUntilTimeout>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e023      	b.n	800655e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b04      	cmp	r3, #4
 8006522:	d10e      	bne.n	8006542 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006524:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f817 	bl	8006566 <UART_WaitOnFlagUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e00d      	b.n	800655e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2220      	movs	r2, #32
 8006546:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2220      	movs	r2, #32
 800654c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b09c      	sub	sp, #112	; 0x70
 800656a:	af00      	add	r7, sp, #0
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	603b      	str	r3, [r7, #0]
 8006572:	4613      	mov	r3, r2
 8006574:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006576:	e0a5      	b.n	80066c4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800657a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657e:	f000 80a1 	beq.w	80066c4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006582:	f7fb fe49 	bl	8002218 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800658e:	429a      	cmp	r2, r3
 8006590:	d302      	bcc.n	8006598 <UART_WaitOnFlagUntilTimeout+0x32>
 8006592:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006594:	2b00      	cmp	r3, #0
 8006596:	d13e      	bne.n	8006616 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065a0:	e853 3f00 	ldrex	r3, [r3]
 80065a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065ac:	667b      	str	r3, [r7, #100]	; 0x64
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065b8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065be:	e841 2300 	strex	r3, r2, [r1]
 80065c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1e6      	bne.n	8006598 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3308      	adds	r3, #8
 80065d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065dc:	f023 0301 	bic.w	r3, r3, #1
 80065e0:	663b      	str	r3, [r7, #96]	; 0x60
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3308      	adds	r3, #8
 80065e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80065ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065f2:	e841 2300 	strex	r3, r2, [r1]
 80065f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1e5      	bne.n	80065ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2220      	movs	r2, #32
 8006602:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2220      	movs	r2, #32
 8006608:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e067      	b.n	80066e6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0304 	and.w	r3, r3, #4
 8006620:	2b00      	cmp	r3, #0
 8006622:	d04f      	beq.n	80066c4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800662e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006632:	d147      	bne.n	80066c4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800663c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006652:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800665c:	637b      	str	r3, [r7, #52]	; 0x34
 800665e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e6      	bne.n	800663e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3308      	adds	r3, #8
 8006676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	613b      	str	r3, [r7, #16]
   return(result);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f023 0301 	bic.w	r3, r3, #1
 8006686:	66bb      	str	r3, [r7, #104]	; 0x68
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3308      	adds	r3, #8
 800668e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006690:	623a      	str	r2, [r7, #32]
 8006692:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	69f9      	ldr	r1, [r7, #28]
 8006696:	6a3a      	ldr	r2, [r7, #32]
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	61bb      	str	r3, [r7, #24]
   return(result);
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e5      	bne.n	8006670 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2220      	movs	r2, #32
 80066a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e010      	b.n	80066e6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	69da      	ldr	r2, [r3, #28]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	4013      	ands	r3, r2
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	bf0c      	ite	eq
 80066d4:	2301      	moveq	r3, #1
 80066d6:	2300      	movne	r3, #0
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	461a      	mov	r2, r3
 80066dc:	79fb      	ldrb	r3, [r7, #7]
 80066de:	429a      	cmp	r2, r3
 80066e0:	f43f af4a 	beq.w	8006578 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3770      	adds	r7, #112	; 0x70
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b095      	sub	sp, #84	; 0x54
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fe:	e853 3f00 	ldrex	r3, [r3]
 8006702:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006706:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800670a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	461a      	mov	r2, r3
 8006712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006714:	643b      	str	r3, [r7, #64]	; 0x40
 8006716:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006718:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800671a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800671c:	e841 2300 	strex	r3, r2, [r1]
 8006720:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1e6      	bne.n	80066f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3308      	adds	r3, #8
 800672e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	e853 3f00 	ldrex	r3, [r3]
 8006736:	61fb      	str	r3, [r7, #28]
   return(result);
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f023 0301 	bic.w	r3, r3, #1
 800673e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3308      	adds	r3, #8
 8006746:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006748:	62fa      	str	r2, [r7, #44]	; 0x2c
 800674a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800674e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006750:	e841 2300 	strex	r3, r2, [r1]
 8006754:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e5      	bne.n	8006728 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006760:	2b01      	cmp	r3, #1
 8006762:	d118      	bne.n	8006796 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	e853 3f00 	ldrex	r3, [r3]
 8006770:	60bb      	str	r3, [r7, #8]
   return(result);
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	f023 0310 	bic.w	r3, r3, #16
 8006778:	647b      	str	r3, [r7, #68]	; 0x44
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	461a      	mov	r2, r3
 8006780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006782:	61bb      	str	r3, [r7, #24]
 8006784:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	6979      	ldr	r1, [r7, #20]
 8006788:	69ba      	ldr	r2, [r7, #24]
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	613b      	str	r3, [r7, #16]
   return(result);
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1e6      	bne.n	8006764 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2220      	movs	r2, #32
 800679a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80067a8:	bf00      	nop
 80067aa:	3754      	adds	r7, #84	; 0x54
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f7ff fb0e 	bl	8005df4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067d8:	bf00      	nop
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067fc:	61fb      	str	r3, [r7, #28]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	61bb      	str	r3, [r7, #24]
 8006808:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	6979      	ldr	r1, [r7, #20]
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	613b      	str	r3, [r7, #16]
   return(result);
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1e6      	bne.n	80067e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2220      	movs	r2, #32
 800681e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff fada 	bl	8005de0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800682c:	bf00      	nop
 800682e:	3720      	adds	r7, #32
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <atoi>:
 8006848:	220a      	movs	r2, #10
 800684a:	2100      	movs	r1, #0
 800684c:	f000 b9b6 	b.w	8006bbc <strtol>

08006850 <__errno>:
 8006850:	4b01      	ldr	r3, [pc, #4]	; (8006858 <__errno+0x8>)
 8006852:	6818      	ldr	r0, [r3, #0]
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	200000cc 	.word	0x200000cc

0800685c <__libc_init_array>:
 800685c:	b570      	push	{r4, r5, r6, lr}
 800685e:	4d0d      	ldr	r5, [pc, #52]	; (8006894 <__libc_init_array+0x38>)
 8006860:	4c0d      	ldr	r4, [pc, #52]	; (8006898 <__libc_init_array+0x3c>)
 8006862:	1b64      	subs	r4, r4, r5
 8006864:	10a4      	asrs	r4, r4, #2
 8006866:	2600      	movs	r6, #0
 8006868:	42a6      	cmp	r6, r4
 800686a:	d109      	bne.n	8006880 <__libc_init_array+0x24>
 800686c:	4d0b      	ldr	r5, [pc, #44]	; (800689c <__libc_init_array+0x40>)
 800686e:	4c0c      	ldr	r4, [pc, #48]	; (80068a0 <__libc_init_array+0x44>)
 8006870:	f001 fd30 	bl	80082d4 <_init>
 8006874:	1b64      	subs	r4, r4, r5
 8006876:	10a4      	asrs	r4, r4, #2
 8006878:	2600      	movs	r6, #0
 800687a:	42a6      	cmp	r6, r4
 800687c:	d105      	bne.n	800688a <__libc_init_array+0x2e>
 800687e:	bd70      	pop	{r4, r5, r6, pc}
 8006880:	f855 3b04 	ldr.w	r3, [r5], #4
 8006884:	4798      	blx	r3
 8006886:	3601      	adds	r6, #1
 8006888:	e7ee      	b.n	8006868 <__libc_init_array+0xc>
 800688a:	f855 3b04 	ldr.w	r3, [r5], #4
 800688e:	4798      	blx	r3
 8006890:	3601      	adds	r6, #1
 8006892:	e7f2      	b.n	800687a <__libc_init_array+0x1e>
 8006894:	080085d0 	.word	0x080085d0
 8006898:	080085d0 	.word	0x080085d0
 800689c:	080085d0 	.word	0x080085d0
 80068a0:	080085d4 	.word	0x080085d4

080068a4 <memset>:
 80068a4:	4402      	add	r2, r0
 80068a6:	4603      	mov	r3, r0
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d100      	bne.n	80068ae <memset+0xa>
 80068ac:	4770      	bx	lr
 80068ae:	f803 1b01 	strb.w	r1, [r3], #1
 80068b2:	e7f9      	b.n	80068a8 <memset+0x4>

080068b4 <iprintf>:
 80068b4:	b40f      	push	{r0, r1, r2, r3}
 80068b6:	4b0a      	ldr	r3, [pc, #40]	; (80068e0 <iprintf+0x2c>)
 80068b8:	b513      	push	{r0, r1, r4, lr}
 80068ba:	681c      	ldr	r4, [r3, #0]
 80068bc:	b124      	cbz	r4, 80068c8 <iprintf+0x14>
 80068be:	69a3      	ldr	r3, [r4, #24]
 80068c0:	b913      	cbnz	r3, 80068c8 <iprintf+0x14>
 80068c2:	4620      	mov	r0, r4
 80068c4:	f000 fb80 	bl	8006fc8 <__sinit>
 80068c8:	ab05      	add	r3, sp, #20
 80068ca:	9a04      	ldr	r2, [sp, #16]
 80068cc:	68a1      	ldr	r1, [r4, #8]
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	4620      	mov	r0, r4
 80068d2:	f000 ff6d 	bl	80077b0 <_vfiprintf_r>
 80068d6:	b002      	add	sp, #8
 80068d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068dc:	b004      	add	sp, #16
 80068de:	4770      	bx	lr
 80068e0:	200000cc 	.word	0x200000cc

080068e4 <_puts_r>:
 80068e4:	b570      	push	{r4, r5, r6, lr}
 80068e6:	460e      	mov	r6, r1
 80068e8:	4605      	mov	r5, r0
 80068ea:	b118      	cbz	r0, 80068f4 <_puts_r+0x10>
 80068ec:	6983      	ldr	r3, [r0, #24]
 80068ee:	b90b      	cbnz	r3, 80068f4 <_puts_r+0x10>
 80068f0:	f000 fb6a 	bl	8006fc8 <__sinit>
 80068f4:	69ab      	ldr	r3, [r5, #24]
 80068f6:	68ac      	ldr	r4, [r5, #8]
 80068f8:	b913      	cbnz	r3, 8006900 <_puts_r+0x1c>
 80068fa:	4628      	mov	r0, r5
 80068fc:	f000 fb64 	bl	8006fc8 <__sinit>
 8006900:	4b2c      	ldr	r3, [pc, #176]	; (80069b4 <_puts_r+0xd0>)
 8006902:	429c      	cmp	r4, r3
 8006904:	d120      	bne.n	8006948 <_puts_r+0x64>
 8006906:	686c      	ldr	r4, [r5, #4]
 8006908:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800690a:	07db      	lsls	r3, r3, #31
 800690c:	d405      	bmi.n	800691a <_puts_r+0x36>
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	0598      	lsls	r0, r3, #22
 8006912:	d402      	bmi.n	800691a <_puts_r+0x36>
 8006914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006916:	f000 fbf5 	bl	8007104 <__retarget_lock_acquire_recursive>
 800691a:	89a3      	ldrh	r3, [r4, #12]
 800691c:	0719      	lsls	r1, r3, #28
 800691e:	d51d      	bpl.n	800695c <_puts_r+0x78>
 8006920:	6923      	ldr	r3, [r4, #16]
 8006922:	b1db      	cbz	r3, 800695c <_puts_r+0x78>
 8006924:	3e01      	subs	r6, #1
 8006926:	68a3      	ldr	r3, [r4, #8]
 8006928:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800692c:	3b01      	subs	r3, #1
 800692e:	60a3      	str	r3, [r4, #8]
 8006930:	bb39      	cbnz	r1, 8006982 <_puts_r+0x9e>
 8006932:	2b00      	cmp	r3, #0
 8006934:	da38      	bge.n	80069a8 <_puts_r+0xc4>
 8006936:	4622      	mov	r2, r4
 8006938:	210a      	movs	r1, #10
 800693a:	4628      	mov	r0, r5
 800693c:	f000 f948 	bl	8006bd0 <__swbuf_r>
 8006940:	3001      	adds	r0, #1
 8006942:	d011      	beq.n	8006968 <_puts_r+0x84>
 8006944:	250a      	movs	r5, #10
 8006946:	e011      	b.n	800696c <_puts_r+0x88>
 8006948:	4b1b      	ldr	r3, [pc, #108]	; (80069b8 <_puts_r+0xd4>)
 800694a:	429c      	cmp	r4, r3
 800694c:	d101      	bne.n	8006952 <_puts_r+0x6e>
 800694e:	68ac      	ldr	r4, [r5, #8]
 8006950:	e7da      	b.n	8006908 <_puts_r+0x24>
 8006952:	4b1a      	ldr	r3, [pc, #104]	; (80069bc <_puts_r+0xd8>)
 8006954:	429c      	cmp	r4, r3
 8006956:	bf08      	it	eq
 8006958:	68ec      	ldreq	r4, [r5, #12]
 800695a:	e7d5      	b.n	8006908 <_puts_r+0x24>
 800695c:	4621      	mov	r1, r4
 800695e:	4628      	mov	r0, r5
 8006960:	f000 f99a 	bl	8006c98 <__swsetup_r>
 8006964:	2800      	cmp	r0, #0
 8006966:	d0dd      	beq.n	8006924 <_puts_r+0x40>
 8006968:	f04f 35ff 	mov.w	r5, #4294967295
 800696c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800696e:	07da      	lsls	r2, r3, #31
 8006970:	d405      	bmi.n	800697e <_puts_r+0x9a>
 8006972:	89a3      	ldrh	r3, [r4, #12]
 8006974:	059b      	lsls	r3, r3, #22
 8006976:	d402      	bmi.n	800697e <_puts_r+0x9a>
 8006978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800697a:	f000 fbc4 	bl	8007106 <__retarget_lock_release_recursive>
 800697e:	4628      	mov	r0, r5
 8006980:	bd70      	pop	{r4, r5, r6, pc}
 8006982:	2b00      	cmp	r3, #0
 8006984:	da04      	bge.n	8006990 <_puts_r+0xac>
 8006986:	69a2      	ldr	r2, [r4, #24]
 8006988:	429a      	cmp	r2, r3
 800698a:	dc06      	bgt.n	800699a <_puts_r+0xb6>
 800698c:	290a      	cmp	r1, #10
 800698e:	d004      	beq.n	800699a <_puts_r+0xb6>
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	6022      	str	r2, [r4, #0]
 8006996:	7019      	strb	r1, [r3, #0]
 8006998:	e7c5      	b.n	8006926 <_puts_r+0x42>
 800699a:	4622      	mov	r2, r4
 800699c:	4628      	mov	r0, r5
 800699e:	f000 f917 	bl	8006bd0 <__swbuf_r>
 80069a2:	3001      	adds	r0, #1
 80069a4:	d1bf      	bne.n	8006926 <_puts_r+0x42>
 80069a6:	e7df      	b.n	8006968 <_puts_r+0x84>
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	250a      	movs	r5, #10
 80069ac:	1c5a      	adds	r2, r3, #1
 80069ae:	6022      	str	r2, [r4, #0]
 80069b0:	701d      	strb	r5, [r3, #0]
 80069b2:	e7db      	b.n	800696c <_puts_r+0x88>
 80069b4:	08008538 	.word	0x08008538
 80069b8:	08008558 	.word	0x08008558
 80069bc:	08008518 	.word	0x08008518

080069c0 <puts>:
 80069c0:	4b02      	ldr	r3, [pc, #8]	; (80069cc <puts+0xc>)
 80069c2:	4601      	mov	r1, r0
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	f7ff bf8d 	b.w	80068e4 <_puts_r>
 80069ca:	bf00      	nop
 80069cc:	200000cc 	.word	0x200000cc

080069d0 <siscanf>:
 80069d0:	b40e      	push	{r1, r2, r3}
 80069d2:	b510      	push	{r4, lr}
 80069d4:	b09f      	sub	sp, #124	; 0x7c
 80069d6:	ac21      	add	r4, sp, #132	; 0x84
 80069d8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80069dc:	f854 2b04 	ldr.w	r2, [r4], #4
 80069e0:	9201      	str	r2, [sp, #4]
 80069e2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80069e6:	9004      	str	r0, [sp, #16]
 80069e8:	9008      	str	r0, [sp, #32]
 80069ea:	f7f9 fbfb 	bl	80001e4 <strlen>
 80069ee:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <siscanf+0x50>)
 80069f0:	9005      	str	r0, [sp, #20]
 80069f2:	9009      	str	r0, [sp, #36]	; 0x24
 80069f4:	930d      	str	r3, [sp, #52]	; 0x34
 80069f6:	480b      	ldr	r0, [pc, #44]	; (8006a24 <siscanf+0x54>)
 80069f8:	9a01      	ldr	r2, [sp, #4]
 80069fa:	6800      	ldr	r0, [r0, #0]
 80069fc:	9403      	str	r4, [sp, #12]
 80069fe:	2300      	movs	r3, #0
 8006a00:	9311      	str	r3, [sp, #68]	; 0x44
 8006a02:	9316      	str	r3, [sp, #88]	; 0x58
 8006a04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a08:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006a0c:	a904      	add	r1, sp, #16
 8006a0e:	4623      	mov	r3, r4
 8006a10:	f000 fd2c 	bl	800746c <__ssvfiscanf_r>
 8006a14:	b01f      	add	sp, #124	; 0x7c
 8006a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a1a:	b003      	add	sp, #12
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	08006a4b 	.word	0x08006a4b
 8006a24:	200000cc 	.word	0x200000cc

08006a28 <__sread>:
 8006a28:	b510      	push	{r4, lr}
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a30:	f001 fad4 	bl	8007fdc <_read_r>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	bfab      	itete	ge
 8006a38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a3a:	89a3      	ldrhlt	r3, [r4, #12]
 8006a3c:	181b      	addge	r3, r3, r0
 8006a3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a42:	bfac      	ite	ge
 8006a44:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a46:	81a3      	strhlt	r3, [r4, #12]
 8006a48:	bd10      	pop	{r4, pc}

08006a4a <__seofread>:
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	4770      	bx	lr

08006a4e <__swrite>:
 8006a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a52:	461f      	mov	r7, r3
 8006a54:	898b      	ldrh	r3, [r1, #12]
 8006a56:	05db      	lsls	r3, r3, #23
 8006a58:	4605      	mov	r5, r0
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	4616      	mov	r6, r2
 8006a5e:	d505      	bpl.n	8006a6c <__swrite+0x1e>
 8006a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a64:	2302      	movs	r3, #2
 8006a66:	2200      	movs	r2, #0
 8006a68:	f000 fb4e 	bl	8007108 <_lseek_r>
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a76:	81a3      	strh	r3, [r4, #12]
 8006a78:	4632      	mov	r2, r6
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a82:	f000 b8f7 	b.w	8006c74 <_write_r>

08006a86 <__sseek>:
 8006a86:	b510      	push	{r4, lr}
 8006a88:	460c      	mov	r4, r1
 8006a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a8e:	f000 fb3b 	bl	8007108 <_lseek_r>
 8006a92:	1c43      	adds	r3, r0, #1
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	bf15      	itete	ne
 8006a98:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006aa2:	81a3      	strheq	r3, [r4, #12]
 8006aa4:	bf18      	it	ne
 8006aa6:	81a3      	strhne	r3, [r4, #12]
 8006aa8:	bd10      	pop	{r4, pc}

08006aaa <__sclose>:
 8006aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aae:	f000 b961 	b.w	8006d74 <_close_r>
	...

08006ab4 <_strtol_l.constprop.0>:
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aba:	d001      	beq.n	8006ac0 <_strtol_l.constprop.0+0xc>
 8006abc:	2b24      	cmp	r3, #36	; 0x24
 8006abe:	d906      	bls.n	8006ace <_strtol_l.constprop.0+0x1a>
 8006ac0:	f7ff fec6 	bl	8006850 <__errno>
 8006ac4:	2316      	movs	r3, #22
 8006ac6:	6003      	str	r3, [r0, #0]
 8006ac8:	2000      	movs	r0, #0
 8006aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ace:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006bb4 <_strtol_l.constprop.0+0x100>
 8006ad2:	460d      	mov	r5, r1
 8006ad4:	462e      	mov	r6, r5
 8006ad6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ada:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006ade:	f017 0708 	ands.w	r7, r7, #8
 8006ae2:	d1f7      	bne.n	8006ad4 <_strtol_l.constprop.0+0x20>
 8006ae4:	2c2d      	cmp	r4, #45	; 0x2d
 8006ae6:	d132      	bne.n	8006b4e <_strtol_l.constprop.0+0x9a>
 8006ae8:	782c      	ldrb	r4, [r5, #0]
 8006aea:	2701      	movs	r7, #1
 8006aec:	1cb5      	adds	r5, r6, #2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d05b      	beq.n	8006baa <_strtol_l.constprop.0+0xf6>
 8006af2:	2b10      	cmp	r3, #16
 8006af4:	d109      	bne.n	8006b0a <_strtol_l.constprop.0+0x56>
 8006af6:	2c30      	cmp	r4, #48	; 0x30
 8006af8:	d107      	bne.n	8006b0a <_strtol_l.constprop.0+0x56>
 8006afa:	782c      	ldrb	r4, [r5, #0]
 8006afc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006b00:	2c58      	cmp	r4, #88	; 0x58
 8006b02:	d14d      	bne.n	8006ba0 <_strtol_l.constprop.0+0xec>
 8006b04:	786c      	ldrb	r4, [r5, #1]
 8006b06:	2310      	movs	r3, #16
 8006b08:	3502      	adds	r5, #2
 8006b0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006b0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b12:	f04f 0c00 	mov.w	ip, #0
 8006b16:	fbb8 f9f3 	udiv	r9, r8, r3
 8006b1a:	4666      	mov	r6, ip
 8006b1c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006b20:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006b24:	f1be 0f09 	cmp.w	lr, #9
 8006b28:	d816      	bhi.n	8006b58 <_strtol_l.constprop.0+0xa4>
 8006b2a:	4674      	mov	r4, lr
 8006b2c:	42a3      	cmp	r3, r4
 8006b2e:	dd24      	ble.n	8006b7a <_strtol_l.constprop.0+0xc6>
 8006b30:	f1bc 0f00 	cmp.w	ip, #0
 8006b34:	db1e      	blt.n	8006b74 <_strtol_l.constprop.0+0xc0>
 8006b36:	45b1      	cmp	r9, r6
 8006b38:	d31c      	bcc.n	8006b74 <_strtol_l.constprop.0+0xc0>
 8006b3a:	d101      	bne.n	8006b40 <_strtol_l.constprop.0+0x8c>
 8006b3c:	45a2      	cmp	sl, r4
 8006b3e:	db19      	blt.n	8006b74 <_strtol_l.constprop.0+0xc0>
 8006b40:	fb06 4603 	mla	r6, r6, r3, r4
 8006b44:	f04f 0c01 	mov.w	ip, #1
 8006b48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b4c:	e7e8      	b.n	8006b20 <_strtol_l.constprop.0+0x6c>
 8006b4e:	2c2b      	cmp	r4, #43	; 0x2b
 8006b50:	bf04      	itt	eq
 8006b52:	782c      	ldrbeq	r4, [r5, #0]
 8006b54:	1cb5      	addeq	r5, r6, #2
 8006b56:	e7ca      	b.n	8006aee <_strtol_l.constprop.0+0x3a>
 8006b58:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006b5c:	f1be 0f19 	cmp.w	lr, #25
 8006b60:	d801      	bhi.n	8006b66 <_strtol_l.constprop.0+0xb2>
 8006b62:	3c37      	subs	r4, #55	; 0x37
 8006b64:	e7e2      	b.n	8006b2c <_strtol_l.constprop.0+0x78>
 8006b66:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006b6a:	f1be 0f19 	cmp.w	lr, #25
 8006b6e:	d804      	bhi.n	8006b7a <_strtol_l.constprop.0+0xc6>
 8006b70:	3c57      	subs	r4, #87	; 0x57
 8006b72:	e7db      	b.n	8006b2c <_strtol_l.constprop.0+0x78>
 8006b74:	f04f 3cff 	mov.w	ip, #4294967295
 8006b78:	e7e6      	b.n	8006b48 <_strtol_l.constprop.0+0x94>
 8006b7a:	f1bc 0f00 	cmp.w	ip, #0
 8006b7e:	da05      	bge.n	8006b8c <_strtol_l.constprop.0+0xd8>
 8006b80:	2322      	movs	r3, #34	; 0x22
 8006b82:	6003      	str	r3, [r0, #0]
 8006b84:	4646      	mov	r6, r8
 8006b86:	b942      	cbnz	r2, 8006b9a <_strtol_l.constprop.0+0xe6>
 8006b88:	4630      	mov	r0, r6
 8006b8a:	e79e      	b.n	8006aca <_strtol_l.constprop.0+0x16>
 8006b8c:	b107      	cbz	r7, 8006b90 <_strtol_l.constprop.0+0xdc>
 8006b8e:	4276      	negs	r6, r6
 8006b90:	2a00      	cmp	r2, #0
 8006b92:	d0f9      	beq.n	8006b88 <_strtol_l.constprop.0+0xd4>
 8006b94:	f1bc 0f00 	cmp.w	ip, #0
 8006b98:	d000      	beq.n	8006b9c <_strtol_l.constprop.0+0xe8>
 8006b9a:	1e69      	subs	r1, r5, #1
 8006b9c:	6011      	str	r1, [r2, #0]
 8006b9e:	e7f3      	b.n	8006b88 <_strtol_l.constprop.0+0xd4>
 8006ba0:	2430      	movs	r4, #48	; 0x30
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1b1      	bne.n	8006b0a <_strtol_l.constprop.0+0x56>
 8006ba6:	2308      	movs	r3, #8
 8006ba8:	e7af      	b.n	8006b0a <_strtol_l.constprop.0+0x56>
 8006baa:	2c30      	cmp	r4, #48	; 0x30
 8006bac:	d0a5      	beq.n	8006afa <_strtol_l.constprop.0+0x46>
 8006bae:	230a      	movs	r3, #10
 8006bb0:	e7ab      	b.n	8006b0a <_strtol_l.constprop.0+0x56>
 8006bb2:	bf00      	nop
 8006bb4:	08008415 	.word	0x08008415

08006bb8 <_strtol_r>:
 8006bb8:	f7ff bf7c 	b.w	8006ab4 <_strtol_l.constprop.0>

08006bbc <strtol>:
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	460a      	mov	r2, r1
 8006bc0:	4601      	mov	r1, r0
 8006bc2:	4802      	ldr	r0, [pc, #8]	; (8006bcc <strtol+0x10>)
 8006bc4:	6800      	ldr	r0, [r0, #0]
 8006bc6:	f7ff bf75 	b.w	8006ab4 <_strtol_l.constprop.0>
 8006bca:	bf00      	nop
 8006bcc:	200000cc 	.word	0x200000cc

08006bd0 <__swbuf_r>:
 8006bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd2:	460e      	mov	r6, r1
 8006bd4:	4614      	mov	r4, r2
 8006bd6:	4605      	mov	r5, r0
 8006bd8:	b118      	cbz	r0, 8006be2 <__swbuf_r+0x12>
 8006bda:	6983      	ldr	r3, [r0, #24]
 8006bdc:	b90b      	cbnz	r3, 8006be2 <__swbuf_r+0x12>
 8006bde:	f000 f9f3 	bl	8006fc8 <__sinit>
 8006be2:	4b21      	ldr	r3, [pc, #132]	; (8006c68 <__swbuf_r+0x98>)
 8006be4:	429c      	cmp	r4, r3
 8006be6:	d12b      	bne.n	8006c40 <__swbuf_r+0x70>
 8006be8:	686c      	ldr	r4, [r5, #4]
 8006bea:	69a3      	ldr	r3, [r4, #24]
 8006bec:	60a3      	str	r3, [r4, #8]
 8006bee:	89a3      	ldrh	r3, [r4, #12]
 8006bf0:	071a      	lsls	r2, r3, #28
 8006bf2:	d52f      	bpl.n	8006c54 <__swbuf_r+0x84>
 8006bf4:	6923      	ldr	r3, [r4, #16]
 8006bf6:	b36b      	cbz	r3, 8006c54 <__swbuf_r+0x84>
 8006bf8:	6923      	ldr	r3, [r4, #16]
 8006bfa:	6820      	ldr	r0, [r4, #0]
 8006bfc:	1ac0      	subs	r0, r0, r3
 8006bfe:	6963      	ldr	r3, [r4, #20]
 8006c00:	b2f6      	uxtb	r6, r6
 8006c02:	4283      	cmp	r3, r0
 8006c04:	4637      	mov	r7, r6
 8006c06:	dc04      	bgt.n	8006c12 <__swbuf_r+0x42>
 8006c08:	4621      	mov	r1, r4
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	f000 f948 	bl	8006ea0 <_fflush_r>
 8006c10:	bb30      	cbnz	r0, 8006c60 <__swbuf_r+0x90>
 8006c12:	68a3      	ldr	r3, [r4, #8]
 8006c14:	3b01      	subs	r3, #1
 8006c16:	60a3      	str	r3, [r4, #8]
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	6022      	str	r2, [r4, #0]
 8006c1e:	701e      	strb	r6, [r3, #0]
 8006c20:	6963      	ldr	r3, [r4, #20]
 8006c22:	3001      	adds	r0, #1
 8006c24:	4283      	cmp	r3, r0
 8006c26:	d004      	beq.n	8006c32 <__swbuf_r+0x62>
 8006c28:	89a3      	ldrh	r3, [r4, #12]
 8006c2a:	07db      	lsls	r3, r3, #31
 8006c2c:	d506      	bpl.n	8006c3c <__swbuf_r+0x6c>
 8006c2e:	2e0a      	cmp	r6, #10
 8006c30:	d104      	bne.n	8006c3c <__swbuf_r+0x6c>
 8006c32:	4621      	mov	r1, r4
 8006c34:	4628      	mov	r0, r5
 8006c36:	f000 f933 	bl	8006ea0 <_fflush_r>
 8006c3a:	b988      	cbnz	r0, 8006c60 <__swbuf_r+0x90>
 8006c3c:	4638      	mov	r0, r7
 8006c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c40:	4b0a      	ldr	r3, [pc, #40]	; (8006c6c <__swbuf_r+0x9c>)
 8006c42:	429c      	cmp	r4, r3
 8006c44:	d101      	bne.n	8006c4a <__swbuf_r+0x7a>
 8006c46:	68ac      	ldr	r4, [r5, #8]
 8006c48:	e7cf      	b.n	8006bea <__swbuf_r+0x1a>
 8006c4a:	4b09      	ldr	r3, [pc, #36]	; (8006c70 <__swbuf_r+0xa0>)
 8006c4c:	429c      	cmp	r4, r3
 8006c4e:	bf08      	it	eq
 8006c50:	68ec      	ldreq	r4, [r5, #12]
 8006c52:	e7ca      	b.n	8006bea <__swbuf_r+0x1a>
 8006c54:	4621      	mov	r1, r4
 8006c56:	4628      	mov	r0, r5
 8006c58:	f000 f81e 	bl	8006c98 <__swsetup_r>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	d0cb      	beq.n	8006bf8 <__swbuf_r+0x28>
 8006c60:	f04f 37ff 	mov.w	r7, #4294967295
 8006c64:	e7ea      	b.n	8006c3c <__swbuf_r+0x6c>
 8006c66:	bf00      	nop
 8006c68:	08008538 	.word	0x08008538
 8006c6c:	08008558 	.word	0x08008558
 8006c70:	08008518 	.word	0x08008518

08006c74 <_write_r>:
 8006c74:	b538      	push	{r3, r4, r5, lr}
 8006c76:	4d07      	ldr	r5, [pc, #28]	; (8006c94 <_write_r+0x20>)
 8006c78:	4604      	mov	r4, r0
 8006c7a:	4608      	mov	r0, r1
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	2200      	movs	r2, #0
 8006c80:	602a      	str	r2, [r5, #0]
 8006c82:	461a      	mov	r2, r3
 8006c84:	f7fa fcfa 	bl	800167c <_write>
 8006c88:	1c43      	adds	r3, r0, #1
 8006c8a:	d102      	bne.n	8006c92 <_write_r+0x1e>
 8006c8c:	682b      	ldr	r3, [r5, #0]
 8006c8e:	b103      	cbz	r3, 8006c92 <_write_r+0x1e>
 8006c90:	6023      	str	r3, [r4, #0]
 8006c92:	bd38      	pop	{r3, r4, r5, pc}
 8006c94:	20000568 	.word	0x20000568

08006c98 <__swsetup_r>:
 8006c98:	4b32      	ldr	r3, [pc, #200]	; (8006d64 <__swsetup_r+0xcc>)
 8006c9a:	b570      	push	{r4, r5, r6, lr}
 8006c9c:	681d      	ldr	r5, [r3, #0]
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	b125      	cbz	r5, 8006cae <__swsetup_r+0x16>
 8006ca4:	69ab      	ldr	r3, [r5, #24]
 8006ca6:	b913      	cbnz	r3, 8006cae <__swsetup_r+0x16>
 8006ca8:	4628      	mov	r0, r5
 8006caa:	f000 f98d 	bl	8006fc8 <__sinit>
 8006cae:	4b2e      	ldr	r3, [pc, #184]	; (8006d68 <__swsetup_r+0xd0>)
 8006cb0:	429c      	cmp	r4, r3
 8006cb2:	d10f      	bne.n	8006cd4 <__swsetup_r+0x3c>
 8006cb4:	686c      	ldr	r4, [r5, #4]
 8006cb6:	89a3      	ldrh	r3, [r4, #12]
 8006cb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cbc:	0719      	lsls	r1, r3, #28
 8006cbe:	d42c      	bmi.n	8006d1a <__swsetup_r+0x82>
 8006cc0:	06dd      	lsls	r5, r3, #27
 8006cc2:	d411      	bmi.n	8006ce8 <__swsetup_r+0x50>
 8006cc4:	2309      	movs	r3, #9
 8006cc6:	6033      	str	r3, [r6, #0]
 8006cc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ccc:	81a3      	strh	r3, [r4, #12]
 8006cce:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd2:	e03e      	b.n	8006d52 <__swsetup_r+0xba>
 8006cd4:	4b25      	ldr	r3, [pc, #148]	; (8006d6c <__swsetup_r+0xd4>)
 8006cd6:	429c      	cmp	r4, r3
 8006cd8:	d101      	bne.n	8006cde <__swsetup_r+0x46>
 8006cda:	68ac      	ldr	r4, [r5, #8]
 8006cdc:	e7eb      	b.n	8006cb6 <__swsetup_r+0x1e>
 8006cde:	4b24      	ldr	r3, [pc, #144]	; (8006d70 <__swsetup_r+0xd8>)
 8006ce0:	429c      	cmp	r4, r3
 8006ce2:	bf08      	it	eq
 8006ce4:	68ec      	ldreq	r4, [r5, #12]
 8006ce6:	e7e6      	b.n	8006cb6 <__swsetup_r+0x1e>
 8006ce8:	0758      	lsls	r0, r3, #29
 8006cea:	d512      	bpl.n	8006d12 <__swsetup_r+0x7a>
 8006cec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cee:	b141      	cbz	r1, 8006d02 <__swsetup_r+0x6a>
 8006cf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cf4:	4299      	cmp	r1, r3
 8006cf6:	d002      	beq.n	8006cfe <__swsetup_r+0x66>
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	f000 fa7d 	bl	80071f8 <_free_r>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	6363      	str	r3, [r4, #52]	; 0x34
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d08:	81a3      	strh	r3, [r4, #12]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	6063      	str	r3, [r4, #4]
 8006d0e:	6923      	ldr	r3, [r4, #16]
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	89a3      	ldrh	r3, [r4, #12]
 8006d14:	f043 0308 	orr.w	r3, r3, #8
 8006d18:	81a3      	strh	r3, [r4, #12]
 8006d1a:	6923      	ldr	r3, [r4, #16]
 8006d1c:	b94b      	cbnz	r3, 8006d32 <__swsetup_r+0x9a>
 8006d1e:	89a3      	ldrh	r3, [r4, #12]
 8006d20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d28:	d003      	beq.n	8006d32 <__swsetup_r+0x9a>
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	f000 fa23 	bl	8007178 <__smakebuf_r>
 8006d32:	89a0      	ldrh	r0, [r4, #12]
 8006d34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d38:	f010 0301 	ands.w	r3, r0, #1
 8006d3c:	d00a      	beq.n	8006d54 <__swsetup_r+0xbc>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60a3      	str	r3, [r4, #8]
 8006d42:	6963      	ldr	r3, [r4, #20]
 8006d44:	425b      	negs	r3, r3
 8006d46:	61a3      	str	r3, [r4, #24]
 8006d48:	6923      	ldr	r3, [r4, #16]
 8006d4a:	b943      	cbnz	r3, 8006d5e <__swsetup_r+0xc6>
 8006d4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d50:	d1ba      	bne.n	8006cc8 <__swsetup_r+0x30>
 8006d52:	bd70      	pop	{r4, r5, r6, pc}
 8006d54:	0781      	lsls	r1, r0, #30
 8006d56:	bf58      	it	pl
 8006d58:	6963      	ldrpl	r3, [r4, #20]
 8006d5a:	60a3      	str	r3, [r4, #8]
 8006d5c:	e7f4      	b.n	8006d48 <__swsetup_r+0xb0>
 8006d5e:	2000      	movs	r0, #0
 8006d60:	e7f7      	b.n	8006d52 <__swsetup_r+0xba>
 8006d62:	bf00      	nop
 8006d64:	200000cc 	.word	0x200000cc
 8006d68:	08008538 	.word	0x08008538
 8006d6c:	08008558 	.word	0x08008558
 8006d70:	08008518 	.word	0x08008518

08006d74 <_close_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4d06      	ldr	r5, [pc, #24]	; (8006d90 <_close_r+0x1c>)
 8006d78:	2300      	movs	r3, #0
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	4608      	mov	r0, r1
 8006d7e:	602b      	str	r3, [r5, #0]
 8006d80:	f7fb f933 	bl	8001fea <_close>
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	d102      	bne.n	8006d8e <_close_r+0x1a>
 8006d88:	682b      	ldr	r3, [r5, #0]
 8006d8a:	b103      	cbz	r3, 8006d8e <_close_r+0x1a>
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	bd38      	pop	{r3, r4, r5, pc}
 8006d90:	20000568 	.word	0x20000568

08006d94 <__sflush_r>:
 8006d94:	898a      	ldrh	r2, [r1, #12]
 8006d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d9a:	4605      	mov	r5, r0
 8006d9c:	0710      	lsls	r0, r2, #28
 8006d9e:	460c      	mov	r4, r1
 8006da0:	d458      	bmi.n	8006e54 <__sflush_r+0xc0>
 8006da2:	684b      	ldr	r3, [r1, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	dc05      	bgt.n	8006db4 <__sflush_r+0x20>
 8006da8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	dc02      	bgt.n	8006db4 <__sflush_r+0x20>
 8006dae:	2000      	movs	r0, #0
 8006db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006db6:	2e00      	cmp	r6, #0
 8006db8:	d0f9      	beq.n	8006dae <__sflush_r+0x1a>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006dc0:	682f      	ldr	r7, [r5, #0]
 8006dc2:	602b      	str	r3, [r5, #0]
 8006dc4:	d032      	beq.n	8006e2c <__sflush_r+0x98>
 8006dc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	075a      	lsls	r2, r3, #29
 8006dcc:	d505      	bpl.n	8006dda <__sflush_r+0x46>
 8006dce:	6863      	ldr	r3, [r4, #4]
 8006dd0:	1ac0      	subs	r0, r0, r3
 8006dd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006dd4:	b10b      	cbz	r3, 8006dda <__sflush_r+0x46>
 8006dd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006dd8:	1ac0      	subs	r0, r0, r3
 8006dda:	2300      	movs	r3, #0
 8006ddc:	4602      	mov	r2, r0
 8006dde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006de0:	6a21      	ldr	r1, [r4, #32]
 8006de2:	4628      	mov	r0, r5
 8006de4:	47b0      	blx	r6
 8006de6:	1c43      	adds	r3, r0, #1
 8006de8:	89a3      	ldrh	r3, [r4, #12]
 8006dea:	d106      	bne.n	8006dfa <__sflush_r+0x66>
 8006dec:	6829      	ldr	r1, [r5, #0]
 8006dee:	291d      	cmp	r1, #29
 8006df0:	d82c      	bhi.n	8006e4c <__sflush_r+0xb8>
 8006df2:	4a2a      	ldr	r2, [pc, #168]	; (8006e9c <__sflush_r+0x108>)
 8006df4:	40ca      	lsrs	r2, r1
 8006df6:	07d6      	lsls	r6, r2, #31
 8006df8:	d528      	bpl.n	8006e4c <__sflush_r+0xb8>
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	6062      	str	r2, [r4, #4]
 8006dfe:	04d9      	lsls	r1, r3, #19
 8006e00:	6922      	ldr	r2, [r4, #16]
 8006e02:	6022      	str	r2, [r4, #0]
 8006e04:	d504      	bpl.n	8006e10 <__sflush_r+0x7c>
 8006e06:	1c42      	adds	r2, r0, #1
 8006e08:	d101      	bne.n	8006e0e <__sflush_r+0x7a>
 8006e0a:	682b      	ldr	r3, [r5, #0]
 8006e0c:	b903      	cbnz	r3, 8006e10 <__sflush_r+0x7c>
 8006e0e:	6560      	str	r0, [r4, #84]	; 0x54
 8006e10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e12:	602f      	str	r7, [r5, #0]
 8006e14:	2900      	cmp	r1, #0
 8006e16:	d0ca      	beq.n	8006dae <__sflush_r+0x1a>
 8006e18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e1c:	4299      	cmp	r1, r3
 8006e1e:	d002      	beq.n	8006e26 <__sflush_r+0x92>
 8006e20:	4628      	mov	r0, r5
 8006e22:	f000 f9e9 	bl	80071f8 <_free_r>
 8006e26:	2000      	movs	r0, #0
 8006e28:	6360      	str	r0, [r4, #52]	; 0x34
 8006e2a:	e7c1      	b.n	8006db0 <__sflush_r+0x1c>
 8006e2c:	6a21      	ldr	r1, [r4, #32]
 8006e2e:	2301      	movs	r3, #1
 8006e30:	4628      	mov	r0, r5
 8006e32:	47b0      	blx	r6
 8006e34:	1c41      	adds	r1, r0, #1
 8006e36:	d1c7      	bne.n	8006dc8 <__sflush_r+0x34>
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0c4      	beq.n	8006dc8 <__sflush_r+0x34>
 8006e3e:	2b1d      	cmp	r3, #29
 8006e40:	d001      	beq.n	8006e46 <__sflush_r+0xb2>
 8006e42:	2b16      	cmp	r3, #22
 8006e44:	d101      	bne.n	8006e4a <__sflush_r+0xb6>
 8006e46:	602f      	str	r7, [r5, #0]
 8006e48:	e7b1      	b.n	8006dae <__sflush_r+0x1a>
 8006e4a:	89a3      	ldrh	r3, [r4, #12]
 8006e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e50:	81a3      	strh	r3, [r4, #12]
 8006e52:	e7ad      	b.n	8006db0 <__sflush_r+0x1c>
 8006e54:	690f      	ldr	r7, [r1, #16]
 8006e56:	2f00      	cmp	r7, #0
 8006e58:	d0a9      	beq.n	8006dae <__sflush_r+0x1a>
 8006e5a:	0793      	lsls	r3, r2, #30
 8006e5c:	680e      	ldr	r6, [r1, #0]
 8006e5e:	bf08      	it	eq
 8006e60:	694b      	ldreq	r3, [r1, #20]
 8006e62:	600f      	str	r7, [r1, #0]
 8006e64:	bf18      	it	ne
 8006e66:	2300      	movne	r3, #0
 8006e68:	eba6 0807 	sub.w	r8, r6, r7
 8006e6c:	608b      	str	r3, [r1, #8]
 8006e6e:	f1b8 0f00 	cmp.w	r8, #0
 8006e72:	dd9c      	ble.n	8006dae <__sflush_r+0x1a>
 8006e74:	6a21      	ldr	r1, [r4, #32]
 8006e76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e78:	4643      	mov	r3, r8
 8006e7a:	463a      	mov	r2, r7
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	47b0      	blx	r6
 8006e80:	2800      	cmp	r0, #0
 8006e82:	dc06      	bgt.n	8006e92 <__sflush_r+0xfe>
 8006e84:	89a3      	ldrh	r3, [r4, #12]
 8006e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e8a:	81a3      	strh	r3, [r4, #12]
 8006e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e90:	e78e      	b.n	8006db0 <__sflush_r+0x1c>
 8006e92:	4407      	add	r7, r0
 8006e94:	eba8 0800 	sub.w	r8, r8, r0
 8006e98:	e7e9      	b.n	8006e6e <__sflush_r+0xda>
 8006e9a:	bf00      	nop
 8006e9c:	20400001 	.word	0x20400001

08006ea0 <_fflush_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	690b      	ldr	r3, [r1, #16]
 8006ea4:	4605      	mov	r5, r0
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	b913      	cbnz	r3, 8006eb0 <_fflush_r+0x10>
 8006eaa:	2500      	movs	r5, #0
 8006eac:	4628      	mov	r0, r5
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	b118      	cbz	r0, 8006eba <_fflush_r+0x1a>
 8006eb2:	6983      	ldr	r3, [r0, #24]
 8006eb4:	b90b      	cbnz	r3, 8006eba <_fflush_r+0x1a>
 8006eb6:	f000 f887 	bl	8006fc8 <__sinit>
 8006eba:	4b14      	ldr	r3, [pc, #80]	; (8006f0c <_fflush_r+0x6c>)
 8006ebc:	429c      	cmp	r4, r3
 8006ebe:	d11b      	bne.n	8006ef8 <_fflush_r+0x58>
 8006ec0:	686c      	ldr	r4, [r5, #4]
 8006ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d0ef      	beq.n	8006eaa <_fflush_r+0xa>
 8006eca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ecc:	07d0      	lsls	r0, r2, #31
 8006ece:	d404      	bmi.n	8006eda <_fflush_r+0x3a>
 8006ed0:	0599      	lsls	r1, r3, #22
 8006ed2:	d402      	bmi.n	8006eda <_fflush_r+0x3a>
 8006ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ed6:	f000 f915 	bl	8007104 <__retarget_lock_acquire_recursive>
 8006eda:	4628      	mov	r0, r5
 8006edc:	4621      	mov	r1, r4
 8006ede:	f7ff ff59 	bl	8006d94 <__sflush_r>
 8006ee2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ee4:	07da      	lsls	r2, r3, #31
 8006ee6:	4605      	mov	r5, r0
 8006ee8:	d4e0      	bmi.n	8006eac <_fflush_r+0xc>
 8006eea:	89a3      	ldrh	r3, [r4, #12]
 8006eec:	059b      	lsls	r3, r3, #22
 8006eee:	d4dd      	bmi.n	8006eac <_fflush_r+0xc>
 8006ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ef2:	f000 f908 	bl	8007106 <__retarget_lock_release_recursive>
 8006ef6:	e7d9      	b.n	8006eac <_fflush_r+0xc>
 8006ef8:	4b05      	ldr	r3, [pc, #20]	; (8006f10 <_fflush_r+0x70>)
 8006efa:	429c      	cmp	r4, r3
 8006efc:	d101      	bne.n	8006f02 <_fflush_r+0x62>
 8006efe:	68ac      	ldr	r4, [r5, #8]
 8006f00:	e7df      	b.n	8006ec2 <_fflush_r+0x22>
 8006f02:	4b04      	ldr	r3, [pc, #16]	; (8006f14 <_fflush_r+0x74>)
 8006f04:	429c      	cmp	r4, r3
 8006f06:	bf08      	it	eq
 8006f08:	68ec      	ldreq	r4, [r5, #12]
 8006f0a:	e7da      	b.n	8006ec2 <_fflush_r+0x22>
 8006f0c:	08008538 	.word	0x08008538
 8006f10:	08008558 	.word	0x08008558
 8006f14:	08008518 	.word	0x08008518

08006f18 <std>:
 8006f18:	2300      	movs	r3, #0
 8006f1a:	b510      	push	{r4, lr}
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	e9c0 3300 	strd	r3, r3, [r0]
 8006f22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f26:	6083      	str	r3, [r0, #8]
 8006f28:	8181      	strh	r1, [r0, #12]
 8006f2a:	6643      	str	r3, [r0, #100]	; 0x64
 8006f2c:	81c2      	strh	r2, [r0, #14]
 8006f2e:	6183      	str	r3, [r0, #24]
 8006f30:	4619      	mov	r1, r3
 8006f32:	2208      	movs	r2, #8
 8006f34:	305c      	adds	r0, #92	; 0x5c
 8006f36:	f7ff fcb5 	bl	80068a4 <memset>
 8006f3a:	4b05      	ldr	r3, [pc, #20]	; (8006f50 <std+0x38>)
 8006f3c:	6263      	str	r3, [r4, #36]	; 0x24
 8006f3e:	4b05      	ldr	r3, [pc, #20]	; (8006f54 <std+0x3c>)
 8006f40:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f42:	4b05      	ldr	r3, [pc, #20]	; (8006f58 <std+0x40>)
 8006f44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f46:	4b05      	ldr	r3, [pc, #20]	; (8006f5c <std+0x44>)
 8006f48:	6224      	str	r4, [r4, #32]
 8006f4a:	6323      	str	r3, [r4, #48]	; 0x30
 8006f4c:	bd10      	pop	{r4, pc}
 8006f4e:	bf00      	nop
 8006f50:	08006a29 	.word	0x08006a29
 8006f54:	08006a4f 	.word	0x08006a4f
 8006f58:	08006a87 	.word	0x08006a87
 8006f5c:	08006aab 	.word	0x08006aab

08006f60 <_cleanup_r>:
 8006f60:	4901      	ldr	r1, [pc, #4]	; (8006f68 <_cleanup_r+0x8>)
 8006f62:	f000 b8af 	b.w	80070c4 <_fwalk_reent>
 8006f66:	bf00      	nop
 8006f68:	08006ea1 	.word	0x08006ea1

08006f6c <__sfmoreglue>:
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	2268      	movs	r2, #104	; 0x68
 8006f70:	1e4d      	subs	r5, r1, #1
 8006f72:	4355      	muls	r5, r2
 8006f74:	460e      	mov	r6, r1
 8006f76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f7a:	f000 f9a9 	bl	80072d0 <_malloc_r>
 8006f7e:	4604      	mov	r4, r0
 8006f80:	b140      	cbz	r0, 8006f94 <__sfmoreglue+0x28>
 8006f82:	2100      	movs	r1, #0
 8006f84:	e9c0 1600 	strd	r1, r6, [r0]
 8006f88:	300c      	adds	r0, #12
 8006f8a:	60a0      	str	r0, [r4, #8]
 8006f8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f90:	f7ff fc88 	bl	80068a4 <memset>
 8006f94:	4620      	mov	r0, r4
 8006f96:	bd70      	pop	{r4, r5, r6, pc}

08006f98 <__sfp_lock_acquire>:
 8006f98:	4801      	ldr	r0, [pc, #4]	; (8006fa0 <__sfp_lock_acquire+0x8>)
 8006f9a:	f000 b8b3 	b.w	8007104 <__retarget_lock_acquire_recursive>
 8006f9e:	bf00      	nop
 8006fa0:	2000055d 	.word	0x2000055d

08006fa4 <__sfp_lock_release>:
 8006fa4:	4801      	ldr	r0, [pc, #4]	; (8006fac <__sfp_lock_release+0x8>)
 8006fa6:	f000 b8ae 	b.w	8007106 <__retarget_lock_release_recursive>
 8006faa:	bf00      	nop
 8006fac:	2000055d 	.word	0x2000055d

08006fb0 <__sinit_lock_acquire>:
 8006fb0:	4801      	ldr	r0, [pc, #4]	; (8006fb8 <__sinit_lock_acquire+0x8>)
 8006fb2:	f000 b8a7 	b.w	8007104 <__retarget_lock_acquire_recursive>
 8006fb6:	bf00      	nop
 8006fb8:	2000055e 	.word	0x2000055e

08006fbc <__sinit_lock_release>:
 8006fbc:	4801      	ldr	r0, [pc, #4]	; (8006fc4 <__sinit_lock_release+0x8>)
 8006fbe:	f000 b8a2 	b.w	8007106 <__retarget_lock_release_recursive>
 8006fc2:	bf00      	nop
 8006fc4:	2000055e 	.word	0x2000055e

08006fc8 <__sinit>:
 8006fc8:	b510      	push	{r4, lr}
 8006fca:	4604      	mov	r4, r0
 8006fcc:	f7ff fff0 	bl	8006fb0 <__sinit_lock_acquire>
 8006fd0:	69a3      	ldr	r3, [r4, #24]
 8006fd2:	b11b      	cbz	r3, 8006fdc <__sinit+0x14>
 8006fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fd8:	f7ff bff0 	b.w	8006fbc <__sinit_lock_release>
 8006fdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006fe0:	6523      	str	r3, [r4, #80]	; 0x50
 8006fe2:	4b13      	ldr	r3, [pc, #76]	; (8007030 <__sinit+0x68>)
 8006fe4:	4a13      	ldr	r2, [pc, #76]	; (8007034 <__sinit+0x6c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006fea:	42a3      	cmp	r3, r4
 8006fec:	bf04      	itt	eq
 8006fee:	2301      	moveq	r3, #1
 8006ff0:	61a3      	streq	r3, [r4, #24]
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f000 f820 	bl	8007038 <__sfp>
 8006ff8:	6060      	str	r0, [r4, #4]
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f000 f81c 	bl	8007038 <__sfp>
 8007000:	60a0      	str	r0, [r4, #8]
 8007002:	4620      	mov	r0, r4
 8007004:	f000 f818 	bl	8007038 <__sfp>
 8007008:	2200      	movs	r2, #0
 800700a:	60e0      	str	r0, [r4, #12]
 800700c:	2104      	movs	r1, #4
 800700e:	6860      	ldr	r0, [r4, #4]
 8007010:	f7ff ff82 	bl	8006f18 <std>
 8007014:	68a0      	ldr	r0, [r4, #8]
 8007016:	2201      	movs	r2, #1
 8007018:	2109      	movs	r1, #9
 800701a:	f7ff ff7d 	bl	8006f18 <std>
 800701e:	68e0      	ldr	r0, [r4, #12]
 8007020:	2202      	movs	r2, #2
 8007022:	2112      	movs	r1, #18
 8007024:	f7ff ff78 	bl	8006f18 <std>
 8007028:	2301      	movs	r3, #1
 800702a:	61a3      	str	r3, [r4, #24]
 800702c:	e7d2      	b.n	8006fd4 <__sinit+0xc>
 800702e:	bf00      	nop
 8007030:	08008410 	.word	0x08008410
 8007034:	08006f61 	.word	0x08006f61

08007038 <__sfp>:
 8007038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703a:	4607      	mov	r7, r0
 800703c:	f7ff ffac 	bl	8006f98 <__sfp_lock_acquire>
 8007040:	4b1e      	ldr	r3, [pc, #120]	; (80070bc <__sfp+0x84>)
 8007042:	681e      	ldr	r6, [r3, #0]
 8007044:	69b3      	ldr	r3, [r6, #24]
 8007046:	b913      	cbnz	r3, 800704e <__sfp+0x16>
 8007048:	4630      	mov	r0, r6
 800704a:	f7ff ffbd 	bl	8006fc8 <__sinit>
 800704e:	3648      	adds	r6, #72	; 0x48
 8007050:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007054:	3b01      	subs	r3, #1
 8007056:	d503      	bpl.n	8007060 <__sfp+0x28>
 8007058:	6833      	ldr	r3, [r6, #0]
 800705a:	b30b      	cbz	r3, 80070a0 <__sfp+0x68>
 800705c:	6836      	ldr	r6, [r6, #0]
 800705e:	e7f7      	b.n	8007050 <__sfp+0x18>
 8007060:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007064:	b9d5      	cbnz	r5, 800709c <__sfp+0x64>
 8007066:	4b16      	ldr	r3, [pc, #88]	; (80070c0 <__sfp+0x88>)
 8007068:	60e3      	str	r3, [r4, #12]
 800706a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800706e:	6665      	str	r5, [r4, #100]	; 0x64
 8007070:	f000 f847 	bl	8007102 <__retarget_lock_init_recursive>
 8007074:	f7ff ff96 	bl	8006fa4 <__sfp_lock_release>
 8007078:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800707c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007080:	6025      	str	r5, [r4, #0]
 8007082:	61a5      	str	r5, [r4, #24]
 8007084:	2208      	movs	r2, #8
 8007086:	4629      	mov	r1, r5
 8007088:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800708c:	f7ff fc0a 	bl	80068a4 <memset>
 8007090:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007094:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007098:	4620      	mov	r0, r4
 800709a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800709c:	3468      	adds	r4, #104	; 0x68
 800709e:	e7d9      	b.n	8007054 <__sfp+0x1c>
 80070a0:	2104      	movs	r1, #4
 80070a2:	4638      	mov	r0, r7
 80070a4:	f7ff ff62 	bl	8006f6c <__sfmoreglue>
 80070a8:	4604      	mov	r4, r0
 80070aa:	6030      	str	r0, [r6, #0]
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d1d5      	bne.n	800705c <__sfp+0x24>
 80070b0:	f7ff ff78 	bl	8006fa4 <__sfp_lock_release>
 80070b4:	230c      	movs	r3, #12
 80070b6:	603b      	str	r3, [r7, #0]
 80070b8:	e7ee      	b.n	8007098 <__sfp+0x60>
 80070ba:	bf00      	nop
 80070bc:	08008410 	.word	0x08008410
 80070c0:	ffff0001 	.word	0xffff0001

080070c4 <_fwalk_reent>:
 80070c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c8:	4606      	mov	r6, r0
 80070ca:	4688      	mov	r8, r1
 80070cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070d0:	2700      	movs	r7, #0
 80070d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070d6:	f1b9 0901 	subs.w	r9, r9, #1
 80070da:	d505      	bpl.n	80070e8 <_fwalk_reent+0x24>
 80070dc:	6824      	ldr	r4, [r4, #0]
 80070de:	2c00      	cmp	r4, #0
 80070e0:	d1f7      	bne.n	80070d2 <_fwalk_reent+0xe>
 80070e2:	4638      	mov	r0, r7
 80070e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070e8:	89ab      	ldrh	r3, [r5, #12]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d907      	bls.n	80070fe <_fwalk_reent+0x3a>
 80070ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070f2:	3301      	adds	r3, #1
 80070f4:	d003      	beq.n	80070fe <_fwalk_reent+0x3a>
 80070f6:	4629      	mov	r1, r5
 80070f8:	4630      	mov	r0, r6
 80070fa:	47c0      	blx	r8
 80070fc:	4307      	orrs	r7, r0
 80070fe:	3568      	adds	r5, #104	; 0x68
 8007100:	e7e9      	b.n	80070d6 <_fwalk_reent+0x12>

08007102 <__retarget_lock_init_recursive>:
 8007102:	4770      	bx	lr

08007104 <__retarget_lock_acquire_recursive>:
 8007104:	4770      	bx	lr

08007106 <__retarget_lock_release_recursive>:
 8007106:	4770      	bx	lr

08007108 <_lseek_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4d07      	ldr	r5, [pc, #28]	; (8007128 <_lseek_r+0x20>)
 800710c:	4604      	mov	r4, r0
 800710e:	4608      	mov	r0, r1
 8007110:	4611      	mov	r1, r2
 8007112:	2200      	movs	r2, #0
 8007114:	602a      	str	r2, [r5, #0]
 8007116:	461a      	mov	r2, r3
 8007118:	f7fa ff8e 	bl	8002038 <_lseek>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d102      	bne.n	8007126 <_lseek_r+0x1e>
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	b103      	cbz	r3, 8007126 <_lseek_r+0x1e>
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	20000568 	.word	0x20000568

0800712c <__swhatbuf_r>:
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	460e      	mov	r6, r1
 8007130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007134:	2900      	cmp	r1, #0
 8007136:	b096      	sub	sp, #88	; 0x58
 8007138:	4614      	mov	r4, r2
 800713a:	461d      	mov	r5, r3
 800713c:	da08      	bge.n	8007150 <__swhatbuf_r+0x24>
 800713e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	602a      	str	r2, [r5, #0]
 8007146:	061a      	lsls	r2, r3, #24
 8007148:	d410      	bmi.n	800716c <__swhatbuf_r+0x40>
 800714a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800714e:	e00e      	b.n	800716e <__swhatbuf_r+0x42>
 8007150:	466a      	mov	r2, sp
 8007152:	f001 f84b 	bl	80081ec <_fstat_r>
 8007156:	2800      	cmp	r0, #0
 8007158:	dbf1      	blt.n	800713e <__swhatbuf_r+0x12>
 800715a:	9a01      	ldr	r2, [sp, #4]
 800715c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007160:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007164:	425a      	negs	r2, r3
 8007166:	415a      	adcs	r2, r3
 8007168:	602a      	str	r2, [r5, #0]
 800716a:	e7ee      	b.n	800714a <__swhatbuf_r+0x1e>
 800716c:	2340      	movs	r3, #64	; 0x40
 800716e:	2000      	movs	r0, #0
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	b016      	add	sp, #88	; 0x58
 8007174:	bd70      	pop	{r4, r5, r6, pc}
	...

08007178 <__smakebuf_r>:
 8007178:	898b      	ldrh	r3, [r1, #12]
 800717a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800717c:	079d      	lsls	r5, r3, #30
 800717e:	4606      	mov	r6, r0
 8007180:	460c      	mov	r4, r1
 8007182:	d507      	bpl.n	8007194 <__smakebuf_r+0x1c>
 8007184:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	6123      	str	r3, [r4, #16]
 800718c:	2301      	movs	r3, #1
 800718e:	6163      	str	r3, [r4, #20]
 8007190:	b002      	add	sp, #8
 8007192:	bd70      	pop	{r4, r5, r6, pc}
 8007194:	ab01      	add	r3, sp, #4
 8007196:	466a      	mov	r2, sp
 8007198:	f7ff ffc8 	bl	800712c <__swhatbuf_r>
 800719c:	9900      	ldr	r1, [sp, #0]
 800719e:	4605      	mov	r5, r0
 80071a0:	4630      	mov	r0, r6
 80071a2:	f000 f895 	bl	80072d0 <_malloc_r>
 80071a6:	b948      	cbnz	r0, 80071bc <__smakebuf_r+0x44>
 80071a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ac:	059a      	lsls	r2, r3, #22
 80071ae:	d4ef      	bmi.n	8007190 <__smakebuf_r+0x18>
 80071b0:	f023 0303 	bic.w	r3, r3, #3
 80071b4:	f043 0302 	orr.w	r3, r3, #2
 80071b8:	81a3      	strh	r3, [r4, #12]
 80071ba:	e7e3      	b.n	8007184 <__smakebuf_r+0xc>
 80071bc:	4b0d      	ldr	r3, [pc, #52]	; (80071f4 <__smakebuf_r+0x7c>)
 80071be:	62b3      	str	r3, [r6, #40]	; 0x28
 80071c0:	89a3      	ldrh	r3, [r4, #12]
 80071c2:	6020      	str	r0, [r4, #0]
 80071c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c8:	81a3      	strh	r3, [r4, #12]
 80071ca:	9b00      	ldr	r3, [sp, #0]
 80071cc:	6163      	str	r3, [r4, #20]
 80071ce:	9b01      	ldr	r3, [sp, #4]
 80071d0:	6120      	str	r0, [r4, #16]
 80071d2:	b15b      	cbz	r3, 80071ec <__smakebuf_r+0x74>
 80071d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071d8:	4630      	mov	r0, r6
 80071da:	f001 f819 	bl	8008210 <_isatty_r>
 80071de:	b128      	cbz	r0, 80071ec <__smakebuf_r+0x74>
 80071e0:	89a3      	ldrh	r3, [r4, #12]
 80071e2:	f023 0303 	bic.w	r3, r3, #3
 80071e6:	f043 0301 	orr.w	r3, r3, #1
 80071ea:	81a3      	strh	r3, [r4, #12]
 80071ec:	89a0      	ldrh	r0, [r4, #12]
 80071ee:	4305      	orrs	r5, r0
 80071f0:	81a5      	strh	r5, [r4, #12]
 80071f2:	e7cd      	b.n	8007190 <__smakebuf_r+0x18>
 80071f4:	08006f61 	.word	0x08006f61

080071f8 <_free_r>:
 80071f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071fa:	2900      	cmp	r1, #0
 80071fc:	d044      	beq.n	8007288 <_free_r+0x90>
 80071fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007202:	9001      	str	r0, [sp, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	f1a1 0404 	sub.w	r4, r1, #4
 800720a:	bfb8      	it	lt
 800720c:	18e4      	addlt	r4, r4, r3
 800720e:	f001 f81d 	bl	800824c <__malloc_lock>
 8007212:	4a1e      	ldr	r2, [pc, #120]	; (800728c <_free_r+0x94>)
 8007214:	9801      	ldr	r0, [sp, #4]
 8007216:	6813      	ldr	r3, [r2, #0]
 8007218:	b933      	cbnz	r3, 8007228 <_free_r+0x30>
 800721a:	6063      	str	r3, [r4, #4]
 800721c:	6014      	str	r4, [r2, #0]
 800721e:	b003      	add	sp, #12
 8007220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007224:	f001 b818 	b.w	8008258 <__malloc_unlock>
 8007228:	42a3      	cmp	r3, r4
 800722a:	d908      	bls.n	800723e <_free_r+0x46>
 800722c:	6825      	ldr	r5, [r4, #0]
 800722e:	1961      	adds	r1, r4, r5
 8007230:	428b      	cmp	r3, r1
 8007232:	bf01      	itttt	eq
 8007234:	6819      	ldreq	r1, [r3, #0]
 8007236:	685b      	ldreq	r3, [r3, #4]
 8007238:	1949      	addeq	r1, r1, r5
 800723a:	6021      	streq	r1, [r4, #0]
 800723c:	e7ed      	b.n	800721a <_free_r+0x22>
 800723e:	461a      	mov	r2, r3
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	b10b      	cbz	r3, 8007248 <_free_r+0x50>
 8007244:	42a3      	cmp	r3, r4
 8007246:	d9fa      	bls.n	800723e <_free_r+0x46>
 8007248:	6811      	ldr	r1, [r2, #0]
 800724a:	1855      	adds	r5, r2, r1
 800724c:	42a5      	cmp	r5, r4
 800724e:	d10b      	bne.n	8007268 <_free_r+0x70>
 8007250:	6824      	ldr	r4, [r4, #0]
 8007252:	4421      	add	r1, r4
 8007254:	1854      	adds	r4, r2, r1
 8007256:	42a3      	cmp	r3, r4
 8007258:	6011      	str	r1, [r2, #0]
 800725a:	d1e0      	bne.n	800721e <_free_r+0x26>
 800725c:	681c      	ldr	r4, [r3, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	6053      	str	r3, [r2, #4]
 8007262:	4421      	add	r1, r4
 8007264:	6011      	str	r1, [r2, #0]
 8007266:	e7da      	b.n	800721e <_free_r+0x26>
 8007268:	d902      	bls.n	8007270 <_free_r+0x78>
 800726a:	230c      	movs	r3, #12
 800726c:	6003      	str	r3, [r0, #0]
 800726e:	e7d6      	b.n	800721e <_free_r+0x26>
 8007270:	6825      	ldr	r5, [r4, #0]
 8007272:	1961      	adds	r1, r4, r5
 8007274:	428b      	cmp	r3, r1
 8007276:	bf04      	itt	eq
 8007278:	6819      	ldreq	r1, [r3, #0]
 800727a:	685b      	ldreq	r3, [r3, #4]
 800727c:	6063      	str	r3, [r4, #4]
 800727e:	bf04      	itt	eq
 8007280:	1949      	addeq	r1, r1, r5
 8007282:	6021      	streq	r1, [r4, #0]
 8007284:	6054      	str	r4, [r2, #4]
 8007286:	e7ca      	b.n	800721e <_free_r+0x26>
 8007288:	b003      	add	sp, #12
 800728a:	bd30      	pop	{r4, r5, pc}
 800728c:	20000560 	.word	0x20000560

08007290 <sbrk_aligned>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	4e0e      	ldr	r6, [pc, #56]	; (80072cc <sbrk_aligned+0x3c>)
 8007294:	460c      	mov	r4, r1
 8007296:	6831      	ldr	r1, [r6, #0]
 8007298:	4605      	mov	r5, r0
 800729a:	b911      	cbnz	r1, 80072a2 <sbrk_aligned+0x12>
 800729c:	f000 feb0 	bl	8008000 <_sbrk_r>
 80072a0:	6030      	str	r0, [r6, #0]
 80072a2:	4621      	mov	r1, r4
 80072a4:	4628      	mov	r0, r5
 80072a6:	f000 feab 	bl	8008000 <_sbrk_r>
 80072aa:	1c43      	adds	r3, r0, #1
 80072ac:	d00a      	beq.n	80072c4 <sbrk_aligned+0x34>
 80072ae:	1cc4      	adds	r4, r0, #3
 80072b0:	f024 0403 	bic.w	r4, r4, #3
 80072b4:	42a0      	cmp	r0, r4
 80072b6:	d007      	beq.n	80072c8 <sbrk_aligned+0x38>
 80072b8:	1a21      	subs	r1, r4, r0
 80072ba:	4628      	mov	r0, r5
 80072bc:	f000 fea0 	bl	8008000 <_sbrk_r>
 80072c0:	3001      	adds	r0, #1
 80072c2:	d101      	bne.n	80072c8 <sbrk_aligned+0x38>
 80072c4:	f04f 34ff 	mov.w	r4, #4294967295
 80072c8:	4620      	mov	r0, r4
 80072ca:	bd70      	pop	{r4, r5, r6, pc}
 80072cc:	20000564 	.word	0x20000564

080072d0 <_malloc_r>:
 80072d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d4:	1ccd      	adds	r5, r1, #3
 80072d6:	f025 0503 	bic.w	r5, r5, #3
 80072da:	3508      	adds	r5, #8
 80072dc:	2d0c      	cmp	r5, #12
 80072de:	bf38      	it	cc
 80072e0:	250c      	movcc	r5, #12
 80072e2:	2d00      	cmp	r5, #0
 80072e4:	4607      	mov	r7, r0
 80072e6:	db01      	blt.n	80072ec <_malloc_r+0x1c>
 80072e8:	42a9      	cmp	r1, r5
 80072ea:	d905      	bls.n	80072f8 <_malloc_r+0x28>
 80072ec:	230c      	movs	r3, #12
 80072ee:	603b      	str	r3, [r7, #0]
 80072f0:	2600      	movs	r6, #0
 80072f2:	4630      	mov	r0, r6
 80072f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f8:	4e2e      	ldr	r6, [pc, #184]	; (80073b4 <_malloc_r+0xe4>)
 80072fa:	f000 ffa7 	bl	800824c <__malloc_lock>
 80072fe:	6833      	ldr	r3, [r6, #0]
 8007300:	461c      	mov	r4, r3
 8007302:	bb34      	cbnz	r4, 8007352 <_malloc_r+0x82>
 8007304:	4629      	mov	r1, r5
 8007306:	4638      	mov	r0, r7
 8007308:	f7ff ffc2 	bl	8007290 <sbrk_aligned>
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	4604      	mov	r4, r0
 8007310:	d14d      	bne.n	80073ae <_malloc_r+0xde>
 8007312:	6834      	ldr	r4, [r6, #0]
 8007314:	4626      	mov	r6, r4
 8007316:	2e00      	cmp	r6, #0
 8007318:	d140      	bne.n	800739c <_malloc_r+0xcc>
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	4631      	mov	r1, r6
 800731e:	4638      	mov	r0, r7
 8007320:	eb04 0803 	add.w	r8, r4, r3
 8007324:	f000 fe6c 	bl	8008000 <_sbrk_r>
 8007328:	4580      	cmp	r8, r0
 800732a:	d13a      	bne.n	80073a2 <_malloc_r+0xd2>
 800732c:	6821      	ldr	r1, [r4, #0]
 800732e:	3503      	adds	r5, #3
 8007330:	1a6d      	subs	r5, r5, r1
 8007332:	f025 0503 	bic.w	r5, r5, #3
 8007336:	3508      	adds	r5, #8
 8007338:	2d0c      	cmp	r5, #12
 800733a:	bf38      	it	cc
 800733c:	250c      	movcc	r5, #12
 800733e:	4629      	mov	r1, r5
 8007340:	4638      	mov	r0, r7
 8007342:	f7ff ffa5 	bl	8007290 <sbrk_aligned>
 8007346:	3001      	adds	r0, #1
 8007348:	d02b      	beq.n	80073a2 <_malloc_r+0xd2>
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	442b      	add	r3, r5
 800734e:	6023      	str	r3, [r4, #0]
 8007350:	e00e      	b.n	8007370 <_malloc_r+0xa0>
 8007352:	6822      	ldr	r2, [r4, #0]
 8007354:	1b52      	subs	r2, r2, r5
 8007356:	d41e      	bmi.n	8007396 <_malloc_r+0xc6>
 8007358:	2a0b      	cmp	r2, #11
 800735a:	d916      	bls.n	800738a <_malloc_r+0xba>
 800735c:	1961      	adds	r1, r4, r5
 800735e:	42a3      	cmp	r3, r4
 8007360:	6025      	str	r5, [r4, #0]
 8007362:	bf18      	it	ne
 8007364:	6059      	strne	r1, [r3, #4]
 8007366:	6863      	ldr	r3, [r4, #4]
 8007368:	bf08      	it	eq
 800736a:	6031      	streq	r1, [r6, #0]
 800736c:	5162      	str	r2, [r4, r5]
 800736e:	604b      	str	r3, [r1, #4]
 8007370:	4638      	mov	r0, r7
 8007372:	f104 060b 	add.w	r6, r4, #11
 8007376:	f000 ff6f 	bl	8008258 <__malloc_unlock>
 800737a:	f026 0607 	bic.w	r6, r6, #7
 800737e:	1d23      	adds	r3, r4, #4
 8007380:	1af2      	subs	r2, r6, r3
 8007382:	d0b6      	beq.n	80072f2 <_malloc_r+0x22>
 8007384:	1b9b      	subs	r3, r3, r6
 8007386:	50a3      	str	r3, [r4, r2]
 8007388:	e7b3      	b.n	80072f2 <_malloc_r+0x22>
 800738a:	6862      	ldr	r2, [r4, #4]
 800738c:	42a3      	cmp	r3, r4
 800738e:	bf0c      	ite	eq
 8007390:	6032      	streq	r2, [r6, #0]
 8007392:	605a      	strne	r2, [r3, #4]
 8007394:	e7ec      	b.n	8007370 <_malloc_r+0xa0>
 8007396:	4623      	mov	r3, r4
 8007398:	6864      	ldr	r4, [r4, #4]
 800739a:	e7b2      	b.n	8007302 <_malloc_r+0x32>
 800739c:	4634      	mov	r4, r6
 800739e:	6876      	ldr	r6, [r6, #4]
 80073a0:	e7b9      	b.n	8007316 <_malloc_r+0x46>
 80073a2:	230c      	movs	r3, #12
 80073a4:	603b      	str	r3, [r7, #0]
 80073a6:	4638      	mov	r0, r7
 80073a8:	f000 ff56 	bl	8008258 <__malloc_unlock>
 80073ac:	e7a1      	b.n	80072f2 <_malloc_r+0x22>
 80073ae:	6025      	str	r5, [r4, #0]
 80073b0:	e7de      	b.n	8007370 <_malloc_r+0xa0>
 80073b2:	bf00      	nop
 80073b4:	20000560 	.word	0x20000560

080073b8 <_sungetc_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	1c4b      	adds	r3, r1, #1
 80073bc:	4614      	mov	r4, r2
 80073be:	d103      	bne.n	80073c8 <_sungetc_r+0x10>
 80073c0:	f04f 35ff 	mov.w	r5, #4294967295
 80073c4:	4628      	mov	r0, r5
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	8993      	ldrh	r3, [r2, #12]
 80073ca:	f023 0320 	bic.w	r3, r3, #32
 80073ce:	8193      	strh	r3, [r2, #12]
 80073d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073d2:	6852      	ldr	r2, [r2, #4]
 80073d4:	b2cd      	uxtb	r5, r1
 80073d6:	b18b      	cbz	r3, 80073fc <_sungetc_r+0x44>
 80073d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80073da:	4293      	cmp	r3, r2
 80073dc:	dd08      	ble.n	80073f0 <_sungetc_r+0x38>
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	1e5a      	subs	r2, r3, #1
 80073e2:	6022      	str	r2, [r4, #0]
 80073e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80073e8:	6863      	ldr	r3, [r4, #4]
 80073ea:	3301      	adds	r3, #1
 80073ec:	6063      	str	r3, [r4, #4]
 80073ee:	e7e9      	b.n	80073c4 <_sungetc_r+0xc>
 80073f0:	4621      	mov	r1, r4
 80073f2:	f000 fec1 	bl	8008178 <__submore>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d0f1      	beq.n	80073de <_sungetc_r+0x26>
 80073fa:	e7e1      	b.n	80073c0 <_sungetc_r+0x8>
 80073fc:	6921      	ldr	r1, [r4, #16]
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	b151      	cbz	r1, 8007418 <_sungetc_r+0x60>
 8007402:	4299      	cmp	r1, r3
 8007404:	d208      	bcs.n	8007418 <_sungetc_r+0x60>
 8007406:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800740a:	42a9      	cmp	r1, r5
 800740c:	d104      	bne.n	8007418 <_sungetc_r+0x60>
 800740e:	3b01      	subs	r3, #1
 8007410:	3201      	adds	r2, #1
 8007412:	6023      	str	r3, [r4, #0]
 8007414:	6062      	str	r2, [r4, #4]
 8007416:	e7d5      	b.n	80073c4 <_sungetc_r+0xc>
 8007418:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800741c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007420:	6363      	str	r3, [r4, #52]	; 0x34
 8007422:	2303      	movs	r3, #3
 8007424:	63a3      	str	r3, [r4, #56]	; 0x38
 8007426:	4623      	mov	r3, r4
 8007428:	f803 5f46 	strb.w	r5, [r3, #70]!
 800742c:	6023      	str	r3, [r4, #0]
 800742e:	2301      	movs	r3, #1
 8007430:	e7dc      	b.n	80073ec <_sungetc_r+0x34>

08007432 <__ssrefill_r>:
 8007432:	b510      	push	{r4, lr}
 8007434:	460c      	mov	r4, r1
 8007436:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007438:	b169      	cbz	r1, 8007456 <__ssrefill_r+0x24>
 800743a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800743e:	4299      	cmp	r1, r3
 8007440:	d001      	beq.n	8007446 <__ssrefill_r+0x14>
 8007442:	f7ff fed9 	bl	80071f8 <_free_r>
 8007446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007448:	6063      	str	r3, [r4, #4]
 800744a:	2000      	movs	r0, #0
 800744c:	6360      	str	r0, [r4, #52]	; 0x34
 800744e:	b113      	cbz	r3, 8007456 <__ssrefill_r+0x24>
 8007450:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007452:	6023      	str	r3, [r4, #0]
 8007454:	bd10      	pop	{r4, pc}
 8007456:	6923      	ldr	r3, [r4, #16]
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	2300      	movs	r3, #0
 800745c:	6063      	str	r3, [r4, #4]
 800745e:	89a3      	ldrh	r3, [r4, #12]
 8007460:	f043 0320 	orr.w	r3, r3, #32
 8007464:	81a3      	strh	r3, [r4, #12]
 8007466:	f04f 30ff 	mov.w	r0, #4294967295
 800746a:	e7f3      	b.n	8007454 <__ssrefill_r+0x22>

0800746c <__ssvfiscanf_r>:
 800746c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007470:	460c      	mov	r4, r1
 8007472:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007476:	2100      	movs	r1, #0
 8007478:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800747c:	49a6      	ldr	r1, [pc, #664]	; (8007718 <__ssvfiscanf_r+0x2ac>)
 800747e:	91a0      	str	r1, [sp, #640]	; 0x280
 8007480:	f10d 0804 	add.w	r8, sp, #4
 8007484:	49a5      	ldr	r1, [pc, #660]	; (800771c <__ssvfiscanf_r+0x2b0>)
 8007486:	4fa6      	ldr	r7, [pc, #664]	; (8007720 <__ssvfiscanf_r+0x2b4>)
 8007488:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007724 <__ssvfiscanf_r+0x2b8>
 800748c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007490:	4606      	mov	r6, r0
 8007492:	91a1      	str	r1, [sp, #644]	; 0x284
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	7813      	ldrb	r3, [r2, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	f000 815a 	beq.w	8007752 <__ssvfiscanf_r+0x2e6>
 800749e:	5dd9      	ldrb	r1, [r3, r7]
 80074a0:	f011 0108 	ands.w	r1, r1, #8
 80074a4:	f102 0501 	add.w	r5, r2, #1
 80074a8:	d019      	beq.n	80074de <__ssvfiscanf_r+0x72>
 80074aa:	6863      	ldr	r3, [r4, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	dd0f      	ble.n	80074d0 <__ssvfiscanf_r+0x64>
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	781a      	ldrb	r2, [r3, #0]
 80074b4:	5cba      	ldrb	r2, [r7, r2]
 80074b6:	0712      	lsls	r2, r2, #28
 80074b8:	d401      	bmi.n	80074be <__ssvfiscanf_r+0x52>
 80074ba:	462a      	mov	r2, r5
 80074bc:	e7eb      	b.n	8007496 <__ssvfiscanf_r+0x2a>
 80074be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80074c0:	3201      	adds	r2, #1
 80074c2:	9245      	str	r2, [sp, #276]	; 0x114
 80074c4:	6862      	ldr	r2, [r4, #4]
 80074c6:	3301      	adds	r3, #1
 80074c8:	3a01      	subs	r2, #1
 80074ca:	6062      	str	r2, [r4, #4]
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	e7ec      	b.n	80074aa <__ssvfiscanf_r+0x3e>
 80074d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80074d2:	4621      	mov	r1, r4
 80074d4:	4630      	mov	r0, r6
 80074d6:	4798      	blx	r3
 80074d8:	2800      	cmp	r0, #0
 80074da:	d0e9      	beq.n	80074b0 <__ssvfiscanf_r+0x44>
 80074dc:	e7ed      	b.n	80074ba <__ssvfiscanf_r+0x4e>
 80074de:	2b25      	cmp	r3, #37	; 0x25
 80074e0:	d012      	beq.n	8007508 <__ssvfiscanf_r+0x9c>
 80074e2:	469a      	mov	sl, r3
 80074e4:	6863      	ldr	r3, [r4, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f340 8091 	ble.w	800760e <__ssvfiscanf_r+0x1a2>
 80074ec:	6822      	ldr	r2, [r4, #0]
 80074ee:	7813      	ldrb	r3, [r2, #0]
 80074f0:	4553      	cmp	r3, sl
 80074f2:	f040 812e 	bne.w	8007752 <__ssvfiscanf_r+0x2e6>
 80074f6:	6863      	ldr	r3, [r4, #4]
 80074f8:	3b01      	subs	r3, #1
 80074fa:	6063      	str	r3, [r4, #4]
 80074fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80074fe:	3201      	adds	r2, #1
 8007500:	3301      	adds	r3, #1
 8007502:	6022      	str	r2, [r4, #0]
 8007504:	9345      	str	r3, [sp, #276]	; 0x114
 8007506:	e7d8      	b.n	80074ba <__ssvfiscanf_r+0x4e>
 8007508:	9141      	str	r1, [sp, #260]	; 0x104
 800750a:	9143      	str	r1, [sp, #268]	; 0x10c
 800750c:	7853      	ldrb	r3, [r2, #1]
 800750e:	2b2a      	cmp	r3, #42	; 0x2a
 8007510:	bf02      	ittt	eq
 8007512:	2310      	moveq	r3, #16
 8007514:	1c95      	addeq	r5, r2, #2
 8007516:	9341      	streq	r3, [sp, #260]	; 0x104
 8007518:	220a      	movs	r2, #10
 800751a:	46aa      	mov	sl, r5
 800751c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007520:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007524:	2b09      	cmp	r3, #9
 8007526:	d91d      	bls.n	8007564 <__ssvfiscanf_r+0xf8>
 8007528:	487e      	ldr	r0, [pc, #504]	; (8007724 <__ssvfiscanf_r+0x2b8>)
 800752a:	2203      	movs	r2, #3
 800752c:	f7f8 fe68 	bl	8000200 <memchr>
 8007530:	b140      	cbz	r0, 8007544 <__ssvfiscanf_r+0xd8>
 8007532:	2301      	movs	r3, #1
 8007534:	eba0 0009 	sub.w	r0, r0, r9
 8007538:	fa03 f000 	lsl.w	r0, r3, r0
 800753c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800753e:	4318      	orrs	r0, r3
 8007540:	9041      	str	r0, [sp, #260]	; 0x104
 8007542:	4655      	mov	r5, sl
 8007544:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007548:	2b78      	cmp	r3, #120	; 0x78
 800754a:	d806      	bhi.n	800755a <__ssvfiscanf_r+0xee>
 800754c:	2b57      	cmp	r3, #87	; 0x57
 800754e:	d810      	bhi.n	8007572 <__ssvfiscanf_r+0x106>
 8007550:	2b25      	cmp	r3, #37	; 0x25
 8007552:	d0c6      	beq.n	80074e2 <__ssvfiscanf_r+0x76>
 8007554:	d856      	bhi.n	8007604 <__ssvfiscanf_r+0x198>
 8007556:	2b00      	cmp	r3, #0
 8007558:	d064      	beq.n	8007624 <__ssvfiscanf_r+0x1b8>
 800755a:	2303      	movs	r3, #3
 800755c:	9347      	str	r3, [sp, #284]	; 0x11c
 800755e:	230a      	movs	r3, #10
 8007560:	9342      	str	r3, [sp, #264]	; 0x108
 8007562:	e071      	b.n	8007648 <__ssvfiscanf_r+0x1dc>
 8007564:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007566:	fb02 1103 	mla	r1, r2, r3, r1
 800756a:	3930      	subs	r1, #48	; 0x30
 800756c:	9143      	str	r1, [sp, #268]	; 0x10c
 800756e:	4655      	mov	r5, sl
 8007570:	e7d3      	b.n	800751a <__ssvfiscanf_r+0xae>
 8007572:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007576:	2a20      	cmp	r2, #32
 8007578:	d8ef      	bhi.n	800755a <__ssvfiscanf_r+0xee>
 800757a:	a101      	add	r1, pc, #4	; (adr r1, 8007580 <__ssvfiscanf_r+0x114>)
 800757c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007580:	08007633 	.word	0x08007633
 8007584:	0800755b 	.word	0x0800755b
 8007588:	0800755b 	.word	0x0800755b
 800758c:	08007691 	.word	0x08007691
 8007590:	0800755b 	.word	0x0800755b
 8007594:	0800755b 	.word	0x0800755b
 8007598:	0800755b 	.word	0x0800755b
 800759c:	0800755b 	.word	0x0800755b
 80075a0:	0800755b 	.word	0x0800755b
 80075a4:	0800755b 	.word	0x0800755b
 80075a8:	0800755b 	.word	0x0800755b
 80075ac:	080076a7 	.word	0x080076a7
 80075b0:	0800767d 	.word	0x0800767d
 80075b4:	0800760b 	.word	0x0800760b
 80075b8:	0800760b 	.word	0x0800760b
 80075bc:	0800760b 	.word	0x0800760b
 80075c0:	0800755b 	.word	0x0800755b
 80075c4:	08007681 	.word	0x08007681
 80075c8:	0800755b 	.word	0x0800755b
 80075cc:	0800755b 	.word	0x0800755b
 80075d0:	0800755b 	.word	0x0800755b
 80075d4:	0800755b 	.word	0x0800755b
 80075d8:	080076b7 	.word	0x080076b7
 80075dc:	08007689 	.word	0x08007689
 80075e0:	0800762b 	.word	0x0800762b
 80075e4:	0800755b 	.word	0x0800755b
 80075e8:	0800755b 	.word	0x0800755b
 80075ec:	080076b3 	.word	0x080076b3
 80075f0:	0800755b 	.word	0x0800755b
 80075f4:	0800767d 	.word	0x0800767d
 80075f8:	0800755b 	.word	0x0800755b
 80075fc:	0800755b 	.word	0x0800755b
 8007600:	08007633 	.word	0x08007633
 8007604:	3b45      	subs	r3, #69	; 0x45
 8007606:	2b02      	cmp	r3, #2
 8007608:	d8a7      	bhi.n	800755a <__ssvfiscanf_r+0xee>
 800760a:	2305      	movs	r3, #5
 800760c:	e01b      	b.n	8007646 <__ssvfiscanf_r+0x1da>
 800760e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007610:	4621      	mov	r1, r4
 8007612:	4630      	mov	r0, r6
 8007614:	4798      	blx	r3
 8007616:	2800      	cmp	r0, #0
 8007618:	f43f af68 	beq.w	80074ec <__ssvfiscanf_r+0x80>
 800761c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800761e:	2800      	cmp	r0, #0
 8007620:	f040 808d 	bne.w	800773e <__ssvfiscanf_r+0x2d2>
 8007624:	f04f 30ff 	mov.w	r0, #4294967295
 8007628:	e08f      	b.n	800774a <__ssvfiscanf_r+0x2de>
 800762a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800762c:	f042 0220 	orr.w	r2, r2, #32
 8007630:	9241      	str	r2, [sp, #260]	; 0x104
 8007632:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007638:	9241      	str	r2, [sp, #260]	; 0x104
 800763a:	2210      	movs	r2, #16
 800763c:	2b6f      	cmp	r3, #111	; 0x6f
 800763e:	9242      	str	r2, [sp, #264]	; 0x108
 8007640:	bf34      	ite	cc
 8007642:	2303      	movcc	r3, #3
 8007644:	2304      	movcs	r3, #4
 8007646:	9347      	str	r3, [sp, #284]	; 0x11c
 8007648:	6863      	ldr	r3, [r4, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	dd42      	ble.n	80076d4 <__ssvfiscanf_r+0x268>
 800764e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007650:	0659      	lsls	r1, r3, #25
 8007652:	d404      	bmi.n	800765e <__ssvfiscanf_r+0x1f2>
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	781a      	ldrb	r2, [r3, #0]
 8007658:	5cba      	ldrb	r2, [r7, r2]
 800765a:	0712      	lsls	r2, r2, #28
 800765c:	d441      	bmi.n	80076e2 <__ssvfiscanf_r+0x276>
 800765e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007660:	2b02      	cmp	r3, #2
 8007662:	dc50      	bgt.n	8007706 <__ssvfiscanf_r+0x29a>
 8007664:	466b      	mov	r3, sp
 8007666:	4622      	mov	r2, r4
 8007668:	a941      	add	r1, sp, #260	; 0x104
 800766a:	4630      	mov	r0, r6
 800766c:	f000 fb64 	bl	8007d38 <_scanf_chars>
 8007670:	2801      	cmp	r0, #1
 8007672:	d06e      	beq.n	8007752 <__ssvfiscanf_r+0x2e6>
 8007674:	2802      	cmp	r0, #2
 8007676:	f47f af20 	bne.w	80074ba <__ssvfiscanf_r+0x4e>
 800767a:	e7cf      	b.n	800761c <__ssvfiscanf_r+0x1b0>
 800767c:	220a      	movs	r2, #10
 800767e:	e7dd      	b.n	800763c <__ssvfiscanf_r+0x1d0>
 8007680:	2300      	movs	r3, #0
 8007682:	9342      	str	r3, [sp, #264]	; 0x108
 8007684:	2303      	movs	r3, #3
 8007686:	e7de      	b.n	8007646 <__ssvfiscanf_r+0x1da>
 8007688:	2308      	movs	r3, #8
 800768a:	9342      	str	r3, [sp, #264]	; 0x108
 800768c:	2304      	movs	r3, #4
 800768e:	e7da      	b.n	8007646 <__ssvfiscanf_r+0x1da>
 8007690:	4629      	mov	r1, r5
 8007692:	4640      	mov	r0, r8
 8007694:	f000 fcc4 	bl	8008020 <__sccl>
 8007698:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800769a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800769e:	9341      	str	r3, [sp, #260]	; 0x104
 80076a0:	4605      	mov	r5, r0
 80076a2:	2301      	movs	r3, #1
 80076a4:	e7cf      	b.n	8007646 <__ssvfiscanf_r+0x1da>
 80076a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80076a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ac:	9341      	str	r3, [sp, #260]	; 0x104
 80076ae:	2300      	movs	r3, #0
 80076b0:	e7c9      	b.n	8007646 <__ssvfiscanf_r+0x1da>
 80076b2:	2302      	movs	r3, #2
 80076b4:	e7c7      	b.n	8007646 <__ssvfiscanf_r+0x1da>
 80076b6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80076b8:	06c3      	lsls	r3, r0, #27
 80076ba:	f53f aefe 	bmi.w	80074ba <__ssvfiscanf_r+0x4e>
 80076be:	9b00      	ldr	r3, [sp, #0]
 80076c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80076c2:	1d19      	adds	r1, r3, #4
 80076c4:	9100      	str	r1, [sp, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f010 0f01 	tst.w	r0, #1
 80076cc:	bf14      	ite	ne
 80076ce:	801a      	strhne	r2, [r3, #0]
 80076d0:	601a      	streq	r2, [r3, #0]
 80076d2:	e6f2      	b.n	80074ba <__ssvfiscanf_r+0x4e>
 80076d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80076d6:	4621      	mov	r1, r4
 80076d8:	4630      	mov	r0, r6
 80076da:	4798      	blx	r3
 80076dc:	2800      	cmp	r0, #0
 80076de:	d0b6      	beq.n	800764e <__ssvfiscanf_r+0x1e2>
 80076e0:	e79c      	b.n	800761c <__ssvfiscanf_r+0x1b0>
 80076e2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80076e4:	3201      	adds	r2, #1
 80076e6:	9245      	str	r2, [sp, #276]	; 0x114
 80076e8:	6862      	ldr	r2, [r4, #4]
 80076ea:	3a01      	subs	r2, #1
 80076ec:	2a00      	cmp	r2, #0
 80076ee:	6062      	str	r2, [r4, #4]
 80076f0:	dd02      	ble.n	80076f8 <__ssvfiscanf_r+0x28c>
 80076f2:	3301      	adds	r3, #1
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	e7ad      	b.n	8007654 <__ssvfiscanf_r+0x1e8>
 80076f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80076fa:	4621      	mov	r1, r4
 80076fc:	4630      	mov	r0, r6
 80076fe:	4798      	blx	r3
 8007700:	2800      	cmp	r0, #0
 8007702:	d0a7      	beq.n	8007654 <__ssvfiscanf_r+0x1e8>
 8007704:	e78a      	b.n	800761c <__ssvfiscanf_r+0x1b0>
 8007706:	2b04      	cmp	r3, #4
 8007708:	dc0e      	bgt.n	8007728 <__ssvfiscanf_r+0x2bc>
 800770a:	466b      	mov	r3, sp
 800770c:	4622      	mov	r2, r4
 800770e:	a941      	add	r1, sp, #260	; 0x104
 8007710:	4630      	mov	r0, r6
 8007712:	f000 fb6b 	bl	8007dec <_scanf_i>
 8007716:	e7ab      	b.n	8007670 <__ssvfiscanf_r+0x204>
 8007718:	080073b9 	.word	0x080073b9
 800771c:	08007433 	.word	0x08007433
 8007720:	08008415 	.word	0x08008415
 8007724:	08008578 	.word	0x08008578
 8007728:	4b0b      	ldr	r3, [pc, #44]	; (8007758 <__ssvfiscanf_r+0x2ec>)
 800772a:	2b00      	cmp	r3, #0
 800772c:	f43f aec5 	beq.w	80074ba <__ssvfiscanf_r+0x4e>
 8007730:	466b      	mov	r3, sp
 8007732:	4622      	mov	r2, r4
 8007734:	a941      	add	r1, sp, #260	; 0x104
 8007736:	4630      	mov	r0, r6
 8007738:	f3af 8000 	nop.w
 800773c:	e798      	b.n	8007670 <__ssvfiscanf_r+0x204>
 800773e:	89a3      	ldrh	r3, [r4, #12]
 8007740:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007744:	bf18      	it	ne
 8007746:	f04f 30ff 	movne.w	r0, #4294967295
 800774a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800774e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007752:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007754:	e7f9      	b.n	800774a <__ssvfiscanf_r+0x2de>
 8007756:	bf00      	nop
 8007758:	00000000 	.word	0x00000000

0800775c <__sfputc_r>:
 800775c:	6893      	ldr	r3, [r2, #8]
 800775e:	3b01      	subs	r3, #1
 8007760:	2b00      	cmp	r3, #0
 8007762:	b410      	push	{r4}
 8007764:	6093      	str	r3, [r2, #8]
 8007766:	da08      	bge.n	800777a <__sfputc_r+0x1e>
 8007768:	6994      	ldr	r4, [r2, #24]
 800776a:	42a3      	cmp	r3, r4
 800776c:	db01      	blt.n	8007772 <__sfputc_r+0x16>
 800776e:	290a      	cmp	r1, #10
 8007770:	d103      	bne.n	800777a <__sfputc_r+0x1e>
 8007772:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007776:	f7ff ba2b 	b.w	8006bd0 <__swbuf_r>
 800777a:	6813      	ldr	r3, [r2, #0]
 800777c:	1c58      	adds	r0, r3, #1
 800777e:	6010      	str	r0, [r2, #0]
 8007780:	7019      	strb	r1, [r3, #0]
 8007782:	4608      	mov	r0, r1
 8007784:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007788:	4770      	bx	lr

0800778a <__sfputs_r>:
 800778a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778c:	4606      	mov	r6, r0
 800778e:	460f      	mov	r7, r1
 8007790:	4614      	mov	r4, r2
 8007792:	18d5      	adds	r5, r2, r3
 8007794:	42ac      	cmp	r4, r5
 8007796:	d101      	bne.n	800779c <__sfputs_r+0x12>
 8007798:	2000      	movs	r0, #0
 800779a:	e007      	b.n	80077ac <__sfputs_r+0x22>
 800779c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077a0:	463a      	mov	r2, r7
 80077a2:	4630      	mov	r0, r6
 80077a4:	f7ff ffda 	bl	800775c <__sfputc_r>
 80077a8:	1c43      	adds	r3, r0, #1
 80077aa:	d1f3      	bne.n	8007794 <__sfputs_r+0xa>
 80077ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080077b0 <_vfiprintf_r>:
 80077b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b4:	460d      	mov	r5, r1
 80077b6:	b09d      	sub	sp, #116	; 0x74
 80077b8:	4614      	mov	r4, r2
 80077ba:	4698      	mov	r8, r3
 80077bc:	4606      	mov	r6, r0
 80077be:	b118      	cbz	r0, 80077c8 <_vfiprintf_r+0x18>
 80077c0:	6983      	ldr	r3, [r0, #24]
 80077c2:	b90b      	cbnz	r3, 80077c8 <_vfiprintf_r+0x18>
 80077c4:	f7ff fc00 	bl	8006fc8 <__sinit>
 80077c8:	4b89      	ldr	r3, [pc, #548]	; (80079f0 <_vfiprintf_r+0x240>)
 80077ca:	429d      	cmp	r5, r3
 80077cc:	d11b      	bne.n	8007806 <_vfiprintf_r+0x56>
 80077ce:	6875      	ldr	r5, [r6, #4]
 80077d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077d2:	07d9      	lsls	r1, r3, #31
 80077d4:	d405      	bmi.n	80077e2 <_vfiprintf_r+0x32>
 80077d6:	89ab      	ldrh	r3, [r5, #12]
 80077d8:	059a      	lsls	r2, r3, #22
 80077da:	d402      	bmi.n	80077e2 <_vfiprintf_r+0x32>
 80077dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077de:	f7ff fc91 	bl	8007104 <__retarget_lock_acquire_recursive>
 80077e2:	89ab      	ldrh	r3, [r5, #12]
 80077e4:	071b      	lsls	r3, r3, #28
 80077e6:	d501      	bpl.n	80077ec <_vfiprintf_r+0x3c>
 80077e8:	692b      	ldr	r3, [r5, #16]
 80077ea:	b9eb      	cbnz	r3, 8007828 <_vfiprintf_r+0x78>
 80077ec:	4629      	mov	r1, r5
 80077ee:	4630      	mov	r0, r6
 80077f0:	f7ff fa52 	bl	8006c98 <__swsetup_r>
 80077f4:	b1c0      	cbz	r0, 8007828 <_vfiprintf_r+0x78>
 80077f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077f8:	07dc      	lsls	r4, r3, #31
 80077fa:	d50e      	bpl.n	800781a <_vfiprintf_r+0x6a>
 80077fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007800:	b01d      	add	sp, #116	; 0x74
 8007802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007806:	4b7b      	ldr	r3, [pc, #492]	; (80079f4 <_vfiprintf_r+0x244>)
 8007808:	429d      	cmp	r5, r3
 800780a:	d101      	bne.n	8007810 <_vfiprintf_r+0x60>
 800780c:	68b5      	ldr	r5, [r6, #8]
 800780e:	e7df      	b.n	80077d0 <_vfiprintf_r+0x20>
 8007810:	4b79      	ldr	r3, [pc, #484]	; (80079f8 <_vfiprintf_r+0x248>)
 8007812:	429d      	cmp	r5, r3
 8007814:	bf08      	it	eq
 8007816:	68f5      	ldreq	r5, [r6, #12]
 8007818:	e7da      	b.n	80077d0 <_vfiprintf_r+0x20>
 800781a:	89ab      	ldrh	r3, [r5, #12]
 800781c:	0598      	lsls	r0, r3, #22
 800781e:	d4ed      	bmi.n	80077fc <_vfiprintf_r+0x4c>
 8007820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007822:	f7ff fc70 	bl	8007106 <__retarget_lock_release_recursive>
 8007826:	e7e9      	b.n	80077fc <_vfiprintf_r+0x4c>
 8007828:	2300      	movs	r3, #0
 800782a:	9309      	str	r3, [sp, #36]	; 0x24
 800782c:	2320      	movs	r3, #32
 800782e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007832:	f8cd 800c 	str.w	r8, [sp, #12]
 8007836:	2330      	movs	r3, #48	; 0x30
 8007838:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80079fc <_vfiprintf_r+0x24c>
 800783c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007840:	f04f 0901 	mov.w	r9, #1
 8007844:	4623      	mov	r3, r4
 8007846:	469a      	mov	sl, r3
 8007848:	f813 2b01 	ldrb.w	r2, [r3], #1
 800784c:	b10a      	cbz	r2, 8007852 <_vfiprintf_r+0xa2>
 800784e:	2a25      	cmp	r2, #37	; 0x25
 8007850:	d1f9      	bne.n	8007846 <_vfiprintf_r+0x96>
 8007852:	ebba 0b04 	subs.w	fp, sl, r4
 8007856:	d00b      	beq.n	8007870 <_vfiprintf_r+0xc0>
 8007858:	465b      	mov	r3, fp
 800785a:	4622      	mov	r2, r4
 800785c:	4629      	mov	r1, r5
 800785e:	4630      	mov	r0, r6
 8007860:	f7ff ff93 	bl	800778a <__sfputs_r>
 8007864:	3001      	adds	r0, #1
 8007866:	f000 80aa 	beq.w	80079be <_vfiprintf_r+0x20e>
 800786a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800786c:	445a      	add	r2, fp
 800786e:	9209      	str	r2, [sp, #36]	; 0x24
 8007870:	f89a 3000 	ldrb.w	r3, [sl]
 8007874:	2b00      	cmp	r3, #0
 8007876:	f000 80a2 	beq.w	80079be <_vfiprintf_r+0x20e>
 800787a:	2300      	movs	r3, #0
 800787c:	f04f 32ff 	mov.w	r2, #4294967295
 8007880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007884:	f10a 0a01 	add.w	sl, sl, #1
 8007888:	9304      	str	r3, [sp, #16]
 800788a:	9307      	str	r3, [sp, #28]
 800788c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007890:	931a      	str	r3, [sp, #104]	; 0x68
 8007892:	4654      	mov	r4, sl
 8007894:	2205      	movs	r2, #5
 8007896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800789a:	4858      	ldr	r0, [pc, #352]	; (80079fc <_vfiprintf_r+0x24c>)
 800789c:	f7f8 fcb0 	bl	8000200 <memchr>
 80078a0:	9a04      	ldr	r2, [sp, #16]
 80078a2:	b9d8      	cbnz	r0, 80078dc <_vfiprintf_r+0x12c>
 80078a4:	06d1      	lsls	r1, r2, #27
 80078a6:	bf44      	itt	mi
 80078a8:	2320      	movmi	r3, #32
 80078aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078ae:	0713      	lsls	r3, r2, #28
 80078b0:	bf44      	itt	mi
 80078b2:	232b      	movmi	r3, #43	; 0x2b
 80078b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078b8:	f89a 3000 	ldrb.w	r3, [sl]
 80078bc:	2b2a      	cmp	r3, #42	; 0x2a
 80078be:	d015      	beq.n	80078ec <_vfiprintf_r+0x13c>
 80078c0:	9a07      	ldr	r2, [sp, #28]
 80078c2:	4654      	mov	r4, sl
 80078c4:	2000      	movs	r0, #0
 80078c6:	f04f 0c0a 	mov.w	ip, #10
 80078ca:	4621      	mov	r1, r4
 80078cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078d0:	3b30      	subs	r3, #48	; 0x30
 80078d2:	2b09      	cmp	r3, #9
 80078d4:	d94e      	bls.n	8007974 <_vfiprintf_r+0x1c4>
 80078d6:	b1b0      	cbz	r0, 8007906 <_vfiprintf_r+0x156>
 80078d8:	9207      	str	r2, [sp, #28]
 80078da:	e014      	b.n	8007906 <_vfiprintf_r+0x156>
 80078dc:	eba0 0308 	sub.w	r3, r0, r8
 80078e0:	fa09 f303 	lsl.w	r3, r9, r3
 80078e4:	4313      	orrs	r3, r2
 80078e6:	9304      	str	r3, [sp, #16]
 80078e8:	46a2      	mov	sl, r4
 80078ea:	e7d2      	b.n	8007892 <_vfiprintf_r+0xe2>
 80078ec:	9b03      	ldr	r3, [sp, #12]
 80078ee:	1d19      	adds	r1, r3, #4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	9103      	str	r1, [sp, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	bfbb      	ittet	lt
 80078f8:	425b      	neglt	r3, r3
 80078fa:	f042 0202 	orrlt.w	r2, r2, #2
 80078fe:	9307      	strge	r3, [sp, #28]
 8007900:	9307      	strlt	r3, [sp, #28]
 8007902:	bfb8      	it	lt
 8007904:	9204      	strlt	r2, [sp, #16]
 8007906:	7823      	ldrb	r3, [r4, #0]
 8007908:	2b2e      	cmp	r3, #46	; 0x2e
 800790a:	d10c      	bne.n	8007926 <_vfiprintf_r+0x176>
 800790c:	7863      	ldrb	r3, [r4, #1]
 800790e:	2b2a      	cmp	r3, #42	; 0x2a
 8007910:	d135      	bne.n	800797e <_vfiprintf_r+0x1ce>
 8007912:	9b03      	ldr	r3, [sp, #12]
 8007914:	1d1a      	adds	r2, r3, #4
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	9203      	str	r2, [sp, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	bfb8      	it	lt
 800791e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007922:	3402      	adds	r4, #2
 8007924:	9305      	str	r3, [sp, #20]
 8007926:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a0c <_vfiprintf_r+0x25c>
 800792a:	7821      	ldrb	r1, [r4, #0]
 800792c:	2203      	movs	r2, #3
 800792e:	4650      	mov	r0, sl
 8007930:	f7f8 fc66 	bl	8000200 <memchr>
 8007934:	b140      	cbz	r0, 8007948 <_vfiprintf_r+0x198>
 8007936:	2340      	movs	r3, #64	; 0x40
 8007938:	eba0 000a 	sub.w	r0, r0, sl
 800793c:	fa03 f000 	lsl.w	r0, r3, r0
 8007940:	9b04      	ldr	r3, [sp, #16]
 8007942:	4303      	orrs	r3, r0
 8007944:	3401      	adds	r4, #1
 8007946:	9304      	str	r3, [sp, #16]
 8007948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800794c:	482c      	ldr	r0, [pc, #176]	; (8007a00 <_vfiprintf_r+0x250>)
 800794e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007952:	2206      	movs	r2, #6
 8007954:	f7f8 fc54 	bl	8000200 <memchr>
 8007958:	2800      	cmp	r0, #0
 800795a:	d03f      	beq.n	80079dc <_vfiprintf_r+0x22c>
 800795c:	4b29      	ldr	r3, [pc, #164]	; (8007a04 <_vfiprintf_r+0x254>)
 800795e:	bb1b      	cbnz	r3, 80079a8 <_vfiprintf_r+0x1f8>
 8007960:	9b03      	ldr	r3, [sp, #12]
 8007962:	3307      	adds	r3, #7
 8007964:	f023 0307 	bic.w	r3, r3, #7
 8007968:	3308      	adds	r3, #8
 800796a:	9303      	str	r3, [sp, #12]
 800796c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800796e:	443b      	add	r3, r7
 8007970:	9309      	str	r3, [sp, #36]	; 0x24
 8007972:	e767      	b.n	8007844 <_vfiprintf_r+0x94>
 8007974:	fb0c 3202 	mla	r2, ip, r2, r3
 8007978:	460c      	mov	r4, r1
 800797a:	2001      	movs	r0, #1
 800797c:	e7a5      	b.n	80078ca <_vfiprintf_r+0x11a>
 800797e:	2300      	movs	r3, #0
 8007980:	3401      	adds	r4, #1
 8007982:	9305      	str	r3, [sp, #20]
 8007984:	4619      	mov	r1, r3
 8007986:	f04f 0c0a 	mov.w	ip, #10
 800798a:	4620      	mov	r0, r4
 800798c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007990:	3a30      	subs	r2, #48	; 0x30
 8007992:	2a09      	cmp	r2, #9
 8007994:	d903      	bls.n	800799e <_vfiprintf_r+0x1ee>
 8007996:	2b00      	cmp	r3, #0
 8007998:	d0c5      	beq.n	8007926 <_vfiprintf_r+0x176>
 800799a:	9105      	str	r1, [sp, #20]
 800799c:	e7c3      	b.n	8007926 <_vfiprintf_r+0x176>
 800799e:	fb0c 2101 	mla	r1, ip, r1, r2
 80079a2:	4604      	mov	r4, r0
 80079a4:	2301      	movs	r3, #1
 80079a6:	e7f0      	b.n	800798a <_vfiprintf_r+0x1da>
 80079a8:	ab03      	add	r3, sp, #12
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	462a      	mov	r2, r5
 80079ae:	4b16      	ldr	r3, [pc, #88]	; (8007a08 <_vfiprintf_r+0x258>)
 80079b0:	a904      	add	r1, sp, #16
 80079b2:	4630      	mov	r0, r6
 80079b4:	f3af 8000 	nop.w
 80079b8:	4607      	mov	r7, r0
 80079ba:	1c78      	adds	r0, r7, #1
 80079bc:	d1d6      	bne.n	800796c <_vfiprintf_r+0x1bc>
 80079be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079c0:	07d9      	lsls	r1, r3, #31
 80079c2:	d405      	bmi.n	80079d0 <_vfiprintf_r+0x220>
 80079c4:	89ab      	ldrh	r3, [r5, #12]
 80079c6:	059a      	lsls	r2, r3, #22
 80079c8:	d402      	bmi.n	80079d0 <_vfiprintf_r+0x220>
 80079ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079cc:	f7ff fb9b 	bl	8007106 <__retarget_lock_release_recursive>
 80079d0:	89ab      	ldrh	r3, [r5, #12]
 80079d2:	065b      	lsls	r3, r3, #25
 80079d4:	f53f af12 	bmi.w	80077fc <_vfiprintf_r+0x4c>
 80079d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079da:	e711      	b.n	8007800 <_vfiprintf_r+0x50>
 80079dc:	ab03      	add	r3, sp, #12
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	462a      	mov	r2, r5
 80079e2:	4b09      	ldr	r3, [pc, #36]	; (8007a08 <_vfiprintf_r+0x258>)
 80079e4:	a904      	add	r1, sp, #16
 80079e6:	4630      	mov	r0, r6
 80079e8:	f000 f880 	bl	8007aec <_printf_i>
 80079ec:	e7e4      	b.n	80079b8 <_vfiprintf_r+0x208>
 80079ee:	bf00      	nop
 80079f0:	08008538 	.word	0x08008538
 80079f4:	08008558 	.word	0x08008558
 80079f8:	08008518 	.word	0x08008518
 80079fc:	0800857c 	.word	0x0800857c
 8007a00:	08008582 	.word	0x08008582
 8007a04:	00000000 	.word	0x00000000
 8007a08:	0800778b 	.word	0x0800778b
 8007a0c:	08008578 	.word	0x08008578

08007a10 <_printf_common>:
 8007a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a14:	4616      	mov	r6, r2
 8007a16:	4699      	mov	r9, r3
 8007a18:	688a      	ldr	r2, [r1, #8]
 8007a1a:	690b      	ldr	r3, [r1, #16]
 8007a1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a20:	4293      	cmp	r3, r2
 8007a22:	bfb8      	it	lt
 8007a24:	4613      	movlt	r3, r2
 8007a26:	6033      	str	r3, [r6, #0]
 8007a28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a2c:	4607      	mov	r7, r0
 8007a2e:	460c      	mov	r4, r1
 8007a30:	b10a      	cbz	r2, 8007a36 <_printf_common+0x26>
 8007a32:	3301      	adds	r3, #1
 8007a34:	6033      	str	r3, [r6, #0]
 8007a36:	6823      	ldr	r3, [r4, #0]
 8007a38:	0699      	lsls	r1, r3, #26
 8007a3a:	bf42      	ittt	mi
 8007a3c:	6833      	ldrmi	r3, [r6, #0]
 8007a3e:	3302      	addmi	r3, #2
 8007a40:	6033      	strmi	r3, [r6, #0]
 8007a42:	6825      	ldr	r5, [r4, #0]
 8007a44:	f015 0506 	ands.w	r5, r5, #6
 8007a48:	d106      	bne.n	8007a58 <_printf_common+0x48>
 8007a4a:	f104 0a19 	add.w	sl, r4, #25
 8007a4e:	68e3      	ldr	r3, [r4, #12]
 8007a50:	6832      	ldr	r2, [r6, #0]
 8007a52:	1a9b      	subs	r3, r3, r2
 8007a54:	42ab      	cmp	r3, r5
 8007a56:	dc26      	bgt.n	8007aa6 <_printf_common+0x96>
 8007a58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a5c:	1e13      	subs	r3, r2, #0
 8007a5e:	6822      	ldr	r2, [r4, #0]
 8007a60:	bf18      	it	ne
 8007a62:	2301      	movne	r3, #1
 8007a64:	0692      	lsls	r2, r2, #26
 8007a66:	d42b      	bmi.n	8007ac0 <_printf_common+0xb0>
 8007a68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a6c:	4649      	mov	r1, r9
 8007a6e:	4638      	mov	r0, r7
 8007a70:	47c0      	blx	r8
 8007a72:	3001      	adds	r0, #1
 8007a74:	d01e      	beq.n	8007ab4 <_printf_common+0xa4>
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	68e5      	ldr	r5, [r4, #12]
 8007a7a:	6832      	ldr	r2, [r6, #0]
 8007a7c:	f003 0306 	and.w	r3, r3, #6
 8007a80:	2b04      	cmp	r3, #4
 8007a82:	bf08      	it	eq
 8007a84:	1aad      	subeq	r5, r5, r2
 8007a86:	68a3      	ldr	r3, [r4, #8]
 8007a88:	6922      	ldr	r2, [r4, #16]
 8007a8a:	bf0c      	ite	eq
 8007a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a90:	2500      	movne	r5, #0
 8007a92:	4293      	cmp	r3, r2
 8007a94:	bfc4      	itt	gt
 8007a96:	1a9b      	subgt	r3, r3, r2
 8007a98:	18ed      	addgt	r5, r5, r3
 8007a9a:	2600      	movs	r6, #0
 8007a9c:	341a      	adds	r4, #26
 8007a9e:	42b5      	cmp	r5, r6
 8007aa0:	d11a      	bne.n	8007ad8 <_printf_common+0xc8>
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	e008      	b.n	8007ab8 <_printf_common+0xa8>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	4652      	mov	r2, sl
 8007aaa:	4649      	mov	r1, r9
 8007aac:	4638      	mov	r0, r7
 8007aae:	47c0      	blx	r8
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	d103      	bne.n	8007abc <_printf_common+0xac>
 8007ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007abc:	3501      	adds	r5, #1
 8007abe:	e7c6      	b.n	8007a4e <_printf_common+0x3e>
 8007ac0:	18e1      	adds	r1, r4, r3
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	2030      	movs	r0, #48	; 0x30
 8007ac6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007aca:	4422      	add	r2, r4
 8007acc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ad0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ad4:	3302      	adds	r3, #2
 8007ad6:	e7c7      	b.n	8007a68 <_printf_common+0x58>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	4622      	mov	r2, r4
 8007adc:	4649      	mov	r1, r9
 8007ade:	4638      	mov	r0, r7
 8007ae0:	47c0      	blx	r8
 8007ae2:	3001      	adds	r0, #1
 8007ae4:	d0e6      	beq.n	8007ab4 <_printf_common+0xa4>
 8007ae6:	3601      	adds	r6, #1
 8007ae8:	e7d9      	b.n	8007a9e <_printf_common+0x8e>
	...

08007aec <_printf_i>:
 8007aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007af0:	7e0f      	ldrb	r7, [r1, #24]
 8007af2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007af4:	2f78      	cmp	r7, #120	; 0x78
 8007af6:	4691      	mov	r9, r2
 8007af8:	4680      	mov	r8, r0
 8007afa:	460c      	mov	r4, r1
 8007afc:	469a      	mov	sl, r3
 8007afe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b02:	d807      	bhi.n	8007b14 <_printf_i+0x28>
 8007b04:	2f62      	cmp	r7, #98	; 0x62
 8007b06:	d80a      	bhi.n	8007b1e <_printf_i+0x32>
 8007b08:	2f00      	cmp	r7, #0
 8007b0a:	f000 80d8 	beq.w	8007cbe <_printf_i+0x1d2>
 8007b0e:	2f58      	cmp	r7, #88	; 0x58
 8007b10:	f000 80a3 	beq.w	8007c5a <_printf_i+0x16e>
 8007b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b1c:	e03a      	b.n	8007b94 <_printf_i+0xa8>
 8007b1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b22:	2b15      	cmp	r3, #21
 8007b24:	d8f6      	bhi.n	8007b14 <_printf_i+0x28>
 8007b26:	a101      	add	r1, pc, #4	; (adr r1, 8007b2c <_printf_i+0x40>)
 8007b28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b2c:	08007b85 	.word	0x08007b85
 8007b30:	08007b99 	.word	0x08007b99
 8007b34:	08007b15 	.word	0x08007b15
 8007b38:	08007b15 	.word	0x08007b15
 8007b3c:	08007b15 	.word	0x08007b15
 8007b40:	08007b15 	.word	0x08007b15
 8007b44:	08007b99 	.word	0x08007b99
 8007b48:	08007b15 	.word	0x08007b15
 8007b4c:	08007b15 	.word	0x08007b15
 8007b50:	08007b15 	.word	0x08007b15
 8007b54:	08007b15 	.word	0x08007b15
 8007b58:	08007ca5 	.word	0x08007ca5
 8007b5c:	08007bc9 	.word	0x08007bc9
 8007b60:	08007c87 	.word	0x08007c87
 8007b64:	08007b15 	.word	0x08007b15
 8007b68:	08007b15 	.word	0x08007b15
 8007b6c:	08007cc7 	.word	0x08007cc7
 8007b70:	08007b15 	.word	0x08007b15
 8007b74:	08007bc9 	.word	0x08007bc9
 8007b78:	08007b15 	.word	0x08007b15
 8007b7c:	08007b15 	.word	0x08007b15
 8007b80:	08007c8f 	.word	0x08007c8f
 8007b84:	682b      	ldr	r3, [r5, #0]
 8007b86:	1d1a      	adds	r2, r3, #4
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	602a      	str	r2, [r5, #0]
 8007b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b94:	2301      	movs	r3, #1
 8007b96:	e0a3      	b.n	8007ce0 <_printf_i+0x1f4>
 8007b98:	6820      	ldr	r0, [r4, #0]
 8007b9a:	6829      	ldr	r1, [r5, #0]
 8007b9c:	0606      	lsls	r6, r0, #24
 8007b9e:	f101 0304 	add.w	r3, r1, #4
 8007ba2:	d50a      	bpl.n	8007bba <_printf_i+0xce>
 8007ba4:	680e      	ldr	r6, [r1, #0]
 8007ba6:	602b      	str	r3, [r5, #0]
 8007ba8:	2e00      	cmp	r6, #0
 8007baa:	da03      	bge.n	8007bb4 <_printf_i+0xc8>
 8007bac:	232d      	movs	r3, #45	; 0x2d
 8007bae:	4276      	negs	r6, r6
 8007bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bb4:	485e      	ldr	r0, [pc, #376]	; (8007d30 <_printf_i+0x244>)
 8007bb6:	230a      	movs	r3, #10
 8007bb8:	e019      	b.n	8007bee <_printf_i+0x102>
 8007bba:	680e      	ldr	r6, [r1, #0]
 8007bbc:	602b      	str	r3, [r5, #0]
 8007bbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007bc2:	bf18      	it	ne
 8007bc4:	b236      	sxthne	r6, r6
 8007bc6:	e7ef      	b.n	8007ba8 <_printf_i+0xbc>
 8007bc8:	682b      	ldr	r3, [r5, #0]
 8007bca:	6820      	ldr	r0, [r4, #0]
 8007bcc:	1d19      	adds	r1, r3, #4
 8007bce:	6029      	str	r1, [r5, #0]
 8007bd0:	0601      	lsls	r1, r0, #24
 8007bd2:	d501      	bpl.n	8007bd8 <_printf_i+0xec>
 8007bd4:	681e      	ldr	r6, [r3, #0]
 8007bd6:	e002      	b.n	8007bde <_printf_i+0xf2>
 8007bd8:	0646      	lsls	r6, r0, #25
 8007bda:	d5fb      	bpl.n	8007bd4 <_printf_i+0xe8>
 8007bdc:	881e      	ldrh	r6, [r3, #0]
 8007bde:	4854      	ldr	r0, [pc, #336]	; (8007d30 <_printf_i+0x244>)
 8007be0:	2f6f      	cmp	r7, #111	; 0x6f
 8007be2:	bf0c      	ite	eq
 8007be4:	2308      	moveq	r3, #8
 8007be6:	230a      	movne	r3, #10
 8007be8:	2100      	movs	r1, #0
 8007bea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bee:	6865      	ldr	r5, [r4, #4]
 8007bf0:	60a5      	str	r5, [r4, #8]
 8007bf2:	2d00      	cmp	r5, #0
 8007bf4:	bfa2      	ittt	ge
 8007bf6:	6821      	ldrge	r1, [r4, #0]
 8007bf8:	f021 0104 	bicge.w	r1, r1, #4
 8007bfc:	6021      	strge	r1, [r4, #0]
 8007bfe:	b90e      	cbnz	r6, 8007c04 <_printf_i+0x118>
 8007c00:	2d00      	cmp	r5, #0
 8007c02:	d04d      	beq.n	8007ca0 <_printf_i+0x1b4>
 8007c04:	4615      	mov	r5, r2
 8007c06:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c0a:	fb03 6711 	mls	r7, r3, r1, r6
 8007c0e:	5dc7      	ldrb	r7, [r0, r7]
 8007c10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c14:	4637      	mov	r7, r6
 8007c16:	42bb      	cmp	r3, r7
 8007c18:	460e      	mov	r6, r1
 8007c1a:	d9f4      	bls.n	8007c06 <_printf_i+0x11a>
 8007c1c:	2b08      	cmp	r3, #8
 8007c1e:	d10b      	bne.n	8007c38 <_printf_i+0x14c>
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	07de      	lsls	r6, r3, #31
 8007c24:	d508      	bpl.n	8007c38 <_printf_i+0x14c>
 8007c26:	6923      	ldr	r3, [r4, #16]
 8007c28:	6861      	ldr	r1, [r4, #4]
 8007c2a:	4299      	cmp	r1, r3
 8007c2c:	bfde      	ittt	le
 8007c2e:	2330      	movle	r3, #48	; 0x30
 8007c30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c38:	1b52      	subs	r2, r2, r5
 8007c3a:	6122      	str	r2, [r4, #16]
 8007c3c:	f8cd a000 	str.w	sl, [sp]
 8007c40:	464b      	mov	r3, r9
 8007c42:	aa03      	add	r2, sp, #12
 8007c44:	4621      	mov	r1, r4
 8007c46:	4640      	mov	r0, r8
 8007c48:	f7ff fee2 	bl	8007a10 <_printf_common>
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d14c      	bne.n	8007cea <_printf_i+0x1fe>
 8007c50:	f04f 30ff 	mov.w	r0, #4294967295
 8007c54:	b004      	add	sp, #16
 8007c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c5a:	4835      	ldr	r0, [pc, #212]	; (8007d30 <_printf_i+0x244>)
 8007c5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007c60:	6829      	ldr	r1, [r5, #0]
 8007c62:	6823      	ldr	r3, [r4, #0]
 8007c64:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c68:	6029      	str	r1, [r5, #0]
 8007c6a:	061d      	lsls	r5, r3, #24
 8007c6c:	d514      	bpl.n	8007c98 <_printf_i+0x1ac>
 8007c6e:	07df      	lsls	r7, r3, #31
 8007c70:	bf44      	itt	mi
 8007c72:	f043 0320 	orrmi.w	r3, r3, #32
 8007c76:	6023      	strmi	r3, [r4, #0]
 8007c78:	b91e      	cbnz	r6, 8007c82 <_printf_i+0x196>
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	f023 0320 	bic.w	r3, r3, #32
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	2310      	movs	r3, #16
 8007c84:	e7b0      	b.n	8007be8 <_printf_i+0xfc>
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	f043 0320 	orr.w	r3, r3, #32
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	2378      	movs	r3, #120	; 0x78
 8007c90:	4828      	ldr	r0, [pc, #160]	; (8007d34 <_printf_i+0x248>)
 8007c92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c96:	e7e3      	b.n	8007c60 <_printf_i+0x174>
 8007c98:	0659      	lsls	r1, r3, #25
 8007c9a:	bf48      	it	mi
 8007c9c:	b2b6      	uxthmi	r6, r6
 8007c9e:	e7e6      	b.n	8007c6e <_printf_i+0x182>
 8007ca0:	4615      	mov	r5, r2
 8007ca2:	e7bb      	b.n	8007c1c <_printf_i+0x130>
 8007ca4:	682b      	ldr	r3, [r5, #0]
 8007ca6:	6826      	ldr	r6, [r4, #0]
 8007ca8:	6961      	ldr	r1, [r4, #20]
 8007caa:	1d18      	adds	r0, r3, #4
 8007cac:	6028      	str	r0, [r5, #0]
 8007cae:	0635      	lsls	r5, r6, #24
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	d501      	bpl.n	8007cb8 <_printf_i+0x1cc>
 8007cb4:	6019      	str	r1, [r3, #0]
 8007cb6:	e002      	b.n	8007cbe <_printf_i+0x1d2>
 8007cb8:	0670      	lsls	r0, r6, #25
 8007cba:	d5fb      	bpl.n	8007cb4 <_printf_i+0x1c8>
 8007cbc:	8019      	strh	r1, [r3, #0]
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	6123      	str	r3, [r4, #16]
 8007cc2:	4615      	mov	r5, r2
 8007cc4:	e7ba      	b.n	8007c3c <_printf_i+0x150>
 8007cc6:	682b      	ldr	r3, [r5, #0]
 8007cc8:	1d1a      	adds	r2, r3, #4
 8007cca:	602a      	str	r2, [r5, #0]
 8007ccc:	681d      	ldr	r5, [r3, #0]
 8007cce:	6862      	ldr	r2, [r4, #4]
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	f7f8 fa94 	bl	8000200 <memchr>
 8007cd8:	b108      	cbz	r0, 8007cde <_printf_i+0x1f2>
 8007cda:	1b40      	subs	r0, r0, r5
 8007cdc:	6060      	str	r0, [r4, #4]
 8007cde:	6863      	ldr	r3, [r4, #4]
 8007ce0:	6123      	str	r3, [r4, #16]
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ce8:	e7a8      	b.n	8007c3c <_printf_i+0x150>
 8007cea:	6923      	ldr	r3, [r4, #16]
 8007cec:	462a      	mov	r2, r5
 8007cee:	4649      	mov	r1, r9
 8007cf0:	4640      	mov	r0, r8
 8007cf2:	47d0      	blx	sl
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	d0ab      	beq.n	8007c50 <_printf_i+0x164>
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	079b      	lsls	r3, r3, #30
 8007cfc:	d413      	bmi.n	8007d26 <_printf_i+0x23a>
 8007cfe:	68e0      	ldr	r0, [r4, #12]
 8007d00:	9b03      	ldr	r3, [sp, #12]
 8007d02:	4298      	cmp	r0, r3
 8007d04:	bfb8      	it	lt
 8007d06:	4618      	movlt	r0, r3
 8007d08:	e7a4      	b.n	8007c54 <_printf_i+0x168>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	4632      	mov	r2, r6
 8007d0e:	4649      	mov	r1, r9
 8007d10:	4640      	mov	r0, r8
 8007d12:	47d0      	blx	sl
 8007d14:	3001      	adds	r0, #1
 8007d16:	d09b      	beq.n	8007c50 <_printf_i+0x164>
 8007d18:	3501      	adds	r5, #1
 8007d1a:	68e3      	ldr	r3, [r4, #12]
 8007d1c:	9903      	ldr	r1, [sp, #12]
 8007d1e:	1a5b      	subs	r3, r3, r1
 8007d20:	42ab      	cmp	r3, r5
 8007d22:	dcf2      	bgt.n	8007d0a <_printf_i+0x21e>
 8007d24:	e7eb      	b.n	8007cfe <_printf_i+0x212>
 8007d26:	2500      	movs	r5, #0
 8007d28:	f104 0619 	add.w	r6, r4, #25
 8007d2c:	e7f5      	b.n	8007d1a <_printf_i+0x22e>
 8007d2e:	bf00      	nop
 8007d30:	08008589 	.word	0x08008589
 8007d34:	0800859a 	.word	0x0800859a

08007d38 <_scanf_chars>:
 8007d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d3c:	4615      	mov	r5, r2
 8007d3e:	688a      	ldr	r2, [r1, #8]
 8007d40:	4680      	mov	r8, r0
 8007d42:	460c      	mov	r4, r1
 8007d44:	b932      	cbnz	r2, 8007d54 <_scanf_chars+0x1c>
 8007d46:	698a      	ldr	r2, [r1, #24]
 8007d48:	2a00      	cmp	r2, #0
 8007d4a:	bf0c      	ite	eq
 8007d4c:	2201      	moveq	r2, #1
 8007d4e:	f04f 32ff 	movne.w	r2, #4294967295
 8007d52:	608a      	str	r2, [r1, #8]
 8007d54:	6822      	ldr	r2, [r4, #0]
 8007d56:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007de8 <_scanf_chars+0xb0>
 8007d5a:	06d1      	lsls	r1, r2, #27
 8007d5c:	bf5f      	itttt	pl
 8007d5e:	681a      	ldrpl	r2, [r3, #0]
 8007d60:	1d11      	addpl	r1, r2, #4
 8007d62:	6019      	strpl	r1, [r3, #0]
 8007d64:	6816      	ldrpl	r6, [r2, #0]
 8007d66:	2700      	movs	r7, #0
 8007d68:	69a0      	ldr	r0, [r4, #24]
 8007d6a:	b188      	cbz	r0, 8007d90 <_scanf_chars+0x58>
 8007d6c:	2801      	cmp	r0, #1
 8007d6e:	d107      	bne.n	8007d80 <_scanf_chars+0x48>
 8007d70:	682a      	ldr	r2, [r5, #0]
 8007d72:	7811      	ldrb	r1, [r2, #0]
 8007d74:	6962      	ldr	r2, [r4, #20]
 8007d76:	5c52      	ldrb	r2, [r2, r1]
 8007d78:	b952      	cbnz	r2, 8007d90 <_scanf_chars+0x58>
 8007d7a:	2f00      	cmp	r7, #0
 8007d7c:	d031      	beq.n	8007de2 <_scanf_chars+0xaa>
 8007d7e:	e022      	b.n	8007dc6 <_scanf_chars+0x8e>
 8007d80:	2802      	cmp	r0, #2
 8007d82:	d120      	bne.n	8007dc6 <_scanf_chars+0x8e>
 8007d84:	682b      	ldr	r3, [r5, #0]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007d8c:	071b      	lsls	r3, r3, #28
 8007d8e:	d41a      	bmi.n	8007dc6 <_scanf_chars+0x8e>
 8007d90:	6823      	ldr	r3, [r4, #0]
 8007d92:	06da      	lsls	r2, r3, #27
 8007d94:	bf5e      	ittt	pl
 8007d96:	682b      	ldrpl	r3, [r5, #0]
 8007d98:	781b      	ldrbpl	r3, [r3, #0]
 8007d9a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007d9e:	682a      	ldr	r2, [r5, #0]
 8007da0:	686b      	ldr	r3, [r5, #4]
 8007da2:	3201      	adds	r2, #1
 8007da4:	602a      	str	r2, [r5, #0]
 8007da6:	68a2      	ldr	r2, [r4, #8]
 8007da8:	3b01      	subs	r3, #1
 8007daa:	3a01      	subs	r2, #1
 8007dac:	606b      	str	r3, [r5, #4]
 8007dae:	3701      	adds	r7, #1
 8007db0:	60a2      	str	r2, [r4, #8]
 8007db2:	b142      	cbz	r2, 8007dc6 <_scanf_chars+0x8e>
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	dcd7      	bgt.n	8007d68 <_scanf_chars+0x30>
 8007db8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007dbc:	4629      	mov	r1, r5
 8007dbe:	4640      	mov	r0, r8
 8007dc0:	4798      	blx	r3
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d0d0      	beq.n	8007d68 <_scanf_chars+0x30>
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	f013 0310 	ands.w	r3, r3, #16
 8007dcc:	d105      	bne.n	8007dda <_scanf_chars+0xa2>
 8007dce:	68e2      	ldr	r2, [r4, #12]
 8007dd0:	3201      	adds	r2, #1
 8007dd2:	60e2      	str	r2, [r4, #12]
 8007dd4:	69a2      	ldr	r2, [r4, #24]
 8007dd6:	b102      	cbz	r2, 8007dda <_scanf_chars+0xa2>
 8007dd8:	7033      	strb	r3, [r6, #0]
 8007dda:	6923      	ldr	r3, [r4, #16]
 8007ddc:	443b      	add	r3, r7
 8007dde:	6123      	str	r3, [r4, #16]
 8007de0:	2000      	movs	r0, #0
 8007de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007de6:	bf00      	nop
 8007de8:	08008415 	.word	0x08008415

08007dec <_scanf_i>:
 8007dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df0:	4698      	mov	r8, r3
 8007df2:	4b76      	ldr	r3, [pc, #472]	; (8007fcc <_scanf_i+0x1e0>)
 8007df4:	460c      	mov	r4, r1
 8007df6:	4682      	mov	sl, r0
 8007df8:	4616      	mov	r6, r2
 8007dfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	ab03      	add	r3, sp, #12
 8007e02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007e06:	4b72      	ldr	r3, [pc, #456]	; (8007fd0 <_scanf_i+0x1e4>)
 8007e08:	69a1      	ldr	r1, [r4, #24]
 8007e0a:	4a72      	ldr	r2, [pc, #456]	; (8007fd4 <_scanf_i+0x1e8>)
 8007e0c:	2903      	cmp	r1, #3
 8007e0e:	bf18      	it	ne
 8007e10:	461a      	movne	r2, r3
 8007e12:	68a3      	ldr	r3, [r4, #8]
 8007e14:	9201      	str	r2, [sp, #4]
 8007e16:	1e5a      	subs	r2, r3, #1
 8007e18:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007e1c:	bf88      	it	hi
 8007e1e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007e22:	4627      	mov	r7, r4
 8007e24:	bf82      	ittt	hi
 8007e26:	eb03 0905 	addhi.w	r9, r3, r5
 8007e2a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007e2e:	60a3      	strhi	r3, [r4, #8]
 8007e30:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007e34:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007e38:	bf98      	it	ls
 8007e3a:	f04f 0900 	movls.w	r9, #0
 8007e3e:	6023      	str	r3, [r4, #0]
 8007e40:	463d      	mov	r5, r7
 8007e42:	f04f 0b00 	mov.w	fp, #0
 8007e46:	6831      	ldr	r1, [r6, #0]
 8007e48:	ab03      	add	r3, sp, #12
 8007e4a:	7809      	ldrb	r1, [r1, #0]
 8007e4c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007e50:	2202      	movs	r2, #2
 8007e52:	f7f8 f9d5 	bl	8000200 <memchr>
 8007e56:	b328      	cbz	r0, 8007ea4 <_scanf_i+0xb8>
 8007e58:	f1bb 0f01 	cmp.w	fp, #1
 8007e5c:	d159      	bne.n	8007f12 <_scanf_i+0x126>
 8007e5e:	6862      	ldr	r2, [r4, #4]
 8007e60:	b92a      	cbnz	r2, 8007e6e <_scanf_i+0x82>
 8007e62:	6822      	ldr	r2, [r4, #0]
 8007e64:	2308      	movs	r3, #8
 8007e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e6a:	6063      	str	r3, [r4, #4]
 8007e6c:	6022      	str	r2, [r4, #0]
 8007e6e:	6822      	ldr	r2, [r4, #0]
 8007e70:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007e74:	6022      	str	r2, [r4, #0]
 8007e76:	68a2      	ldr	r2, [r4, #8]
 8007e78:	1e51      	subs	r1, r2, #1
 8007e7a:	60a1      	str	r1, [r4, #8]
 8007e7c:	b192      	cbz	r2, 8007ea4 <_scanf_i+0xb8>
 8007e7e:	6832      	ldr	r2, [r6, #0]
 8007e80:	1c51      	adds	r1, r2, #1
 8007e82:	6031      	str	r1, [r6, #0]
 8007e84:	7812      	ldrb	r2, [r2, #0]
 8007e86:	f805 2b01 	strb.w	r2, [r5], #1
 8007e8a:	6872      	ldr	r2, [r6, #4]
 8007e8c:	3a01      	subs	r2, #1
 8007e8e:	2a00      	cmp	r2, #0
 8007e90:	6072      	str	r2, [r6, #4]
 8007e92:	dc07      	bgt.n	8007ea4 <_scanf_i+0xb8>
 8007e94:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007e98:	4631      	mov	r1, r6
 8007e9a:	4650      	mov	r0, sl
 8007e9c:	4790      	blx	r2
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	f040 8085 	bne.w	8007fae <_scanf_i+0x1c2>
 8007ea4:	f10b 0b01 	add.w	fp, fp, #1
 8007ea8:	f1bb 0f03 	cmp.w	fp, #3
 8007eac:	d1cb      	bne.n	8007e46 <_scanf_i+0x5a>
 8007eae:	6863      	ldr	r3, [r4, #4]
 8007eb0:	b90b      	cbnz	r3, 8007eb6 <_scanf_i+0xca>
 8007eb2:	230a      	movs	r3, #10
 8007eb4:	6063      	str	r3, [r4, #4]
 8007eb6:	6863      	ldr	r3, [r4, #4]
 8007eb8:	4947      	ldr	r1, [pc, #284]	; (8007fd8 <_scanf_i+0x1ec>)
 8007eba:	6960      	ldr	r0, [r4, #20]
 8007ebc:	1ac9      	subs	r1, r1, r3
 8007ebe:	f000 f8af 	bl	8008020 <__sccl>
 8007ec2:	f04f 0b00 	mov.w	fp, #0
 8007ec6:	68a3      	ldr	r3, [r4, #8]
 8007ec8:	6822      	ldr	r2, [r4, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d03d      	beq.n	8007f4a <_scanf_i+0x15e>
 8007ece:	6831      	ldr	r1, [r6, #0]
 8007ed0:	6960      	ldr	r0, [r4, #20]
 8007ed2:	f891 c000 	ldrb.w	ip, [r1]
 8007ed6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d035      	beq.n	8007f4a <_scanf_i+0x15e>
 8007ede:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007ee2:	d124      	bne.n	8007f2e <_scanf_i+0x142>
 8007ee4:	0510      	lsls	r0, r2, #20
 8007ee6:	d522      	bpl.n	8007f2e <_scanf_i+0x142>
 8007ee8:	f10b 0b01 	add.w	fp, fp, #1
 8007eec:	f1b9 0f00 	cmp.w	r9, #0
 8007ef0:	d003      	beq.n	8007efa <_scanf_i+0x10e>
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	f109 39ff 	add.w	r9, r9, #4294967295
 8007ef8:	60a3      	str	r3, [r4, #8]
 8007efa:	6873      	ldr	r3, [r6, #4]
 8007efc:	3b01      	subs	r3, #1
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	6073      	str	r3, [r6, #4]
 8007f02:	dd1b      	ble.n	8007f3c <_scanf_i+0x150>
 8007f04:	6833      	ldr	r3, [r6, #0]
 8007f06:	3301      	adds	r3, #1
 8007f08:	6033      	str	r3, [r6, #0]
 8007f0a:	68a3      	ldr	r3, [r4, #8]
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	60a3      	str	r3, [r4, #8]
 8007f10:	e7d9      	b.n	8007ec6 <_scanf_i+0xda>
 8007f12:	f1bb 0f02 	cmp.w	fp, #2
 8007f16:	d1ae      	bne.n	8007e76 <_scanf_i+0x8a>
 8007f18:	6822      	ldr	r2, [r4, #0]
 8007f1a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007f1e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007f22:	d1bf      	bne.n	8007ea4 <_scanf_i+0xb8>
 8007f24:	2310      	movs	r3, #16
 8007f26:	6063      	str	r3, [r4, #4]
 8007f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f2c:	e7a2      	b.n	8007e74 <_scanf_i+0x88>
 8007f2e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007f32:	6022      	str	r2, [r4, #0]
 8007f34:	780b      	ldrb	r3, [r1, #0]
 8007f36:	f805 3b01 	strb.w	r3, [r5], #1
 8007f3a:	e7de      	b.n	8007efa <_scanf_i+0x10e>
 8007f3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007f40:	4631      	mov	r1, r6
 8007f42:	4650      	mov	r0, sl
 8007f44:	4798      	blx	r3
 8007f46:	2800      	cmp	r0, #0
 8007f48:	d0df      	beq.n	8007f0a <_scanf_i+0x11e>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	05db      	lsls	r3, r3, #23
 8007f4e:	d50d      	bpl.n	8007f6c <_scanf_i+0x180>
 8007f50:	42bd      	cmp	r5, r7
 8007f52:	d909      	bls.n	8007f68 <_scanf_i+0x17c>
 8007f54:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007f58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f5c:	4632      	mov	r2, r6
 8007f5e:	4650      	mov	r0, sl
 8007f60:	4798      	blx	r3
 8007f62:	f105 39ff 	add.w	r9, r5, #4294967295
 8007f66:	464d      	mov	r5, r9
 8007f68:	42bd      	cmp	r5, r7
 8007f6a:	d02d      	beq.n	8007fc8 <_scanf_i+0x1dc>
 8007f6c:	6822      	ldr	r2, [r4, #0]
 8007f6e:	f012 0210 	ands.w	r2, r2, #16
 8007f72:	d113      	bne.n	8007f9c <_scanf_i+0x1b0>
 8007f74:	702a      	strb	r2, [r5, #0]
 8007f76:	6863      	ldr	r3, [r4, #4]
 8007f78:	9e01      	ldr	r6, [sp, #4]
 8007f7a:	4639      	mov	r1, r7
 8007f7c:	4650      	mov	r0, sl
 8007f7e:	47b0      	blx	r6
 8007f80:	6821      	ldr	r1, [r4, #0]
 8007f82:	f8d8 3000 	ldr.w	r3, [r8]
 8007f86:	f011 0f20 	tst.w	r1, #32
 8007f8a:	d013      	beq.n	8007fb4 <_scanf_i+0x1c8>
 8007f8c:	1d1a      	adds	r2, r3, #4
 8007f8e:	f8c8 2000 	str.w	r2, [r8]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6018      	str	r0, [r3, #0]
 8007f96:	68e3      	ldr	r3, [r4, #12]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	60e3      	str	r3, [r4, #12]
 8007f9c:	1bed      	subs	r5, r5, r7
 8007f9e:	44ab      	add	fp, r5
 8007fa0:	6925      	ldr	r5, [r4, #16]
 8007fa2:	445d      	add	r5, fp
 8007fa4:	6125      	str	r5, [r4, #16]
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	b007      	add	sp, #28
 8007faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fae:	f04f 0b00 	mov.w	fp, #0
 8007fb2:	e7ca      	b.n	8007f4a <_scanf_i+0x15e>
 8007fb4:	1d1a      	adds	r2, r3, #4
 8007fb6:	f8c8 2000 	str.w	r2, [r8]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f011 0f01 	tst.w	r1, #1
 8007fc0:	bf14      	ite	ne
 8007fc2:	8018      	strhne	r0, [r3, #0]
 8007fc4:	6018      	streq	r0, [r3, #0]
 8007fc6:	e7e6      	b.n	8007f96 <_scanf_i+0x1aa>
 8007fc8:	2001      	movs	r0, #1
 8007fca:	e7ed      	b.n	8007fa8 <_scanf_i+0x1bc>
 8007fcc:	080083bc 	.word	0x080083bc
 8007fd0:	08008175 	.word	0x08008175
 8007fd4:	08006bb9 	.word	0x08006bb9
 8007fd8:	080085c4 	.word	0x080085c4

08007fdc <_read_r>:
 8007fdc:	b538      	push	{r3, r4, r5, lr}
 8007fde:	4d07      	ldr	r5, [pc, #28]	; (8007ffc <_read_r+0x20>)
 8007fe0:	4604      	mov	r4, r0
 8007fe2:	4608      	mov	r0, r1
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	602a      	str	r2, [r5, #0]
 8007fea:	461a      	mov	r2, r3
 8007fec:	f7f9 ffe0 	bl	8001fb0 <_read>
 8007ff0:	1c43      	adds	r3, r0, #1
 8007ff2:	d102      	bne.n	8007ffa <_read_r+0x1e>
 8007ff4:	682b      	ldr	r3, [r5, #0]
 8007ff6:	b103      	cbz	r3, 8007ffa <_read_r+0x1e>
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	bd38      	pop	{r3, r4, r5, pc}
 8007ffc:	20000568 	.word	0x20000568

08008000 <_sbrk_r>:
 8008000:	b538      	push	{r3, r4, r5, lr}
 8008002:	4d06      	ldr	r5, [pc, #24]	; (800801c <_sbrk_r+0x1c>)
 8008004:	2300      	movs	r3, #0
 8008006:	4604      	mov	r4, r0
 8008008:	4608      	mov	r0, r1
 800800a:	602b      	str	r3, [r5, #0]
 800800c:	f7fa f822 	bl	8002054 <_sbrk>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d102      	bne.n	800801a <_sbrk_r+0x1a>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	b103      	cbz	r3, 800801a <_sbrk_r+0x1a>
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	20000568 	.word	0x20000568

08008020 <__sccl>:
 8008020:	b570      	push	{r4, r5, r6, lr}
 8008022:	780b      	ldrb	r3, [r1, #0]
 8008024:	4604      	mov	r4, r0
 8008026:	2b5e      	cmp	r3, #94	; 0x5e
 8008028:	bf0b      	itete	eq
 800802a:	784b      	ldrbeq	r3, [r1, #1]
 800802c:	1c48      	addne	r0, r1, #1
 800802e:	1c88      	addeq	r0, r1, #2
 8008030:	2200      	movne	r2, #0
 8008032:	bf08      	it	eq
 8008034:	2201      	moveq	r2, #1
 8008036:	1e61      	subs	r1, r4, #1
 8008038:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800803c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008040:	42a9      	cmp	r1, r5
 8008042:	d1fb      	bne.n	800803c <__sccl+0x1c>
 8008044:	b90b      	cbnz	r3, 800804a <__sccl+0x2a>
 8008046:	3801      	subs	r0, #1
 8008048:	bd70      	pop	{r4, r5, r6, pc}
 800804a:	f082 0201 	eor.w	r2, r2, #1
 800804e:	54e2      	strb	r2, [r4, r3]
 8008050:	4605      	mov	r5, r0
 8008052:	4628      	mov	r0, r5
 8008054:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008058:	292d      	cmp	r1, #45	; 0x2d
 800805a:	d006      	beq.n	800806a <__sccl+0x4a>
 800805c:	295d      	cmp	r1, #93	; 0x5d
 800805e:	d0f3      	beq.n	8008048 <__sccl+0x28>
 8008060:	b909      	cbnz	r1, 8008066 <__sccl+0x46>
 8008062:	4628      	mov	r0, r5
 8008064:	e7f0      	b.n	8008048 <__sccl+0x28>
 8008066:	460b      	mov	r3, r1
 8008068:	e7f1      	b.n	800804e <__sccl+0x2e>
 800806a:	786e      	ldrb	r6, [r5, #1]
 800806c:	2e5d      	cmp	r6, #93	; 0x5d
 800806e:	d0fa      	beq.n	8008066 <__sccl+0x46>
 8008070:	42b3      	cmp	r3, r6
 8008072:	dcf8      	bgt.n	8008066 <__sccl+0x46>
 8008074:	3502      	adds	r5, #2
 8008076:	4619      	mov	r1, r3
 8008078:	3101      	adds	r1, #1
 800807a:	428e      	cmp	r6, r1
 800807c:	5462      	strb	r2, [r4, r1]
 800807e:	dcfb      	bgt.n	8008078 <__sccl+0x58>
 8008080:	1af1      	subs	r1, r6, r3
 8008082:	3901      	subs	r1, #1
 8008084:	1c58      	adds	r0, r3, #1
 8008086:	42b3      	cmp	r3, r6
 8008088:	bfa8      	it	ge
 800808a:	2100      	movge	r1, #0
 800808c:	1843      	adds	r3, r0, r1
 800808e:	e7e0      	b.n	8008052 <__sccl+0x32>

08008090 <_strtoul_l.constprop.0>:
 8008090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008094:	4f36      	ldr	r7, [pc, #216]	; (8008170 <_strtoul_l.constprop.0+0xe0>)
 8008096:	4686      	mov	lr, r0
 8008098:	460d      	mov	r5, r1
 800809a:	4628      	mov	r0, r5
 800809c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080a0:	5de6      	ldrb	r6, [r4, r7]
 80080a2:	f016 0608 	ands.w	r6, r6, #8
 80080a6:	d1f8      	bne.n	800809a <_strtoul_l.constprop.0+0xa>
 80080a8:	2c2d      	cmp	r4, #45	; 0x2d
 80080aa:	d12f      	bne.n	800810c <_strtoul_l.constprop.0+0x7c>
 80080ac:	782c      	ldrb	r4, [r5, #0]
 80080ae:	2601      	movs	r6, #1
 80080b0:	1c85      	adds	r5, r0, #2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d057      	beq.n	8008166 <_strtoul_l.constprop.0+0xd6>
 80080b6:	2b10      	cmp	r3, #16
 80080b8:	d109      	bne.n	80080ce <_strtoul_l.constprop.0+0x3e>
 80080ba:	2c30      	cmp	r4, #48	; 0x30
 80080bc:	d107      	bne.n	80080ce <_strtoul_l.constprop.0+0x3e>
 80080be:	7828      	ldrb	r0, [r5, #0]
 80080c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80080c4:	2858      	cmp	r0, #88	; 0x58
 80080c6:	d149      	bne.n	800815c <_strtoul_l.constprop.0+0xcc>
 80080c8:	786c      	ldrb	r4, [r5, #1]
 80080ca:	2310      	movs	r3, #16
 80080cc:	3502      	adds	r5, #2
 80080ce:	f04f 38ff 	mov.w	r8, #4294967295
 80080d2:	2700      	movs	r7, #0
 80080d4:	fbb8 f8f3 	udiv	r8, r8, r3
 80080d8:	fb03 f908 	mul.w	r9, r3, r8
 80080dc:	ea6f 0909 	mvn.w	r9, r9
 80080e0:	4638      	mov	r0, r7
 80080e2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80080e6:	f1bc 0f09 	cmp.w	ip, #9
 80080ea:	d814      	bhi.n	8008116 <_strtoul_l.constprop.0+0x86>
 80080ec:	4664      	mov	r4, ip
 80080ee:	42a3      	cmp	r3, r4
 80080f0:	dd22      	ble.n	8008138 <_strtoul_l.constprop.0+0xa8>
 80080f2:	2f00      	cmp	r7, #0
 80080f4:	db1d      	blt.n	8008132 <_strtoul_l.constprop.0+0xa2>
 80080f6:	4580      	cmp	r8, r0
 80080f8:	d31b      	bcc.n	8008132 <_strtoul_l.constprop.0+0xa2>
 80080fa:	d101      	bne.n	8008100 <_strtoul_l.constprop.0+0x70>
 80080fc:	45a1      	cmp	r9, r4
 80080fe:	db18      	blt.n	8008132 <_strtoul_l.constprop.0+0xa2>
 8008100:	fb00 4003 	mla	r0, r0, r3, r4
 8008104:	2701      	movs	r7, #1
 8008106:	f815 4b01 	ldrb.w	r4, [r5], #1
 800810a:	e7ea      	b.n	80080e2 <_strtoul_l.constprop.0+0x52>
 800810c:	2c2b      	cmp	r4, #43	; 0x2b
 800810e:	bf04      	itt	eq
 8008110:	782c      	ldrbeq	r4, [r5, #0]
 8008112:	1c85      	addeq	r5, r0, #2
 8008114:	e7cd      	b.n	80080b2 <_strtoul_l.constprop.0+0x22>
 8008116:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800811a:	f1bc 0f19 	cmp.w	ip, #25
 800811e:	d801      	bhi.n	8008124 <_strtoul_l.constprop.0+0x94>
 8008120:	3c37      	subs	r4, #55	; 0x37
 8008122:	e7e4      	b.n	80080ee <_strtoul_l.constprop.0+0x5e>
 8008124:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008128:	f1bc 0f19 	cmp.w	ip, #25
 800812c:	d804      	bhi.n	8008138 <_strtoul_l.constprop.0+0xa8>
 800812e:	3c57      	subs	r4, #87	; 0x57
 8008130:	e7dd      	b.n	80080ee <_strtoul_l.constprop.0+0x5e>
 8008132:	f04f 37ff 	mov.w	r7, #4294967295
 8008136:	e7e6      	b.n	8008106 <_strtoul_l.constprop.0+0x76>
 8008138:	2f00      	cmp	r7, #0
 800813a:	da07      	bge.n	800814c <_strtoul_l.constprop.0+0xbc>
 800813c:	2322      	movs	r3, #34	; 0x22
 800813e:	f8ce 3000 	str.w	r3, [lr]
 8008142:	f04f 30ff 	mov.w	r0, #4294967295
 8008146:	b932      	cbnz	r2, 8008156 <_strtoul_l.constprop.0+0xc6>
 8008148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800814c:	b106      	cbz	r6, 8008150 <_strtoul_l.constprop.0+0xc0>
 800814e:	4240      	negs	r0, r0
 8008150:	2a00      	cmp	r2, #0
 8008152:	d0f9      	beq.n	8008148 <_strtoul_l.constprop.0+0xb8>
 8008154:	b107      	cbz	r7, 8008158 <_strtoul_l.constprop.0+0xc8>
 8008156:	1e69      	subs	r1, r5, #1
 8008158:	6011      	str	r1, [r2, #0]
 800815a:	e7f5      	b.n	8008148 <_strtoul_l.constprop.0+0xb8>
 800815c:	2430      	movs	r4, #48	; 0x30
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1b5      	bne.n	80080ce <_strtoul_l.constprop.0+0x3e>
 8008162:	2308      	movs	r3, #8
 8008164:	e7b3      	b.n	80080ce <_strtoul_l.constprop.0+0x3e>
 8008166:	2c30      	cmp	r4, #48	; 0x30
 8008168:	d0a9      	beq.n	80080be <_strtoul_l.constprop.0+0x2e>
 800816a:	230a      	movs	r3, #10
 800816c:	e7af      	b.n	80080ce <_strtoul_l.constprop.0+0x3e>
 800816e:	bf00      	nop
 8008170:	08008415 	.word	0x08008415

08008174 <_strtoul_r>:
 8008174:	f7ff bf8c 	b.w	8008090 <_strtoul_l.constprop.0>

08008178 <__submore>:
 8008178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800817c:	460c      	mov	r4, r1
 800817e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008184:	4299      	cmp	r1, r3
 8008186:	d11d      	bne.n	80081c4 <__submore+0x4c>
 8008188:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800818c:	f7ff f8a0 	bl	80072d0 <_malloc_r>
 8008190:	b918      	cbnz	r0, 800819a <__submore+0x22>
 8008192:	f04f 30ff 	mov.w	r0, #4294967295
 8008196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800819a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800819e:	63a3      	str	r3, [r4, #56]	; 0x38
 80081a0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80081a4:	6360      	str	r0, [r4, #52]	; 0x34
 80081a6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80081aa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80081ae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80081b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80081b6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80081ba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80081be:	6020      	str	r0, [r4, #0]
 80081c0:	2000      	movs	r0, #0
 80081c2:	e7e8      	b.n	8008196 <__submore+0x1e>
 80081c4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80081c6:	0077      	lsls	r7, r6, #1
 80081c8:	463a      	mov	r2, r7
 80081ca:	f000 f84b 	bl	8008264 <_realloc_r>
 80081ce:	4605      	mov	r5, r0
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d0de      	beq.n	8008192 <__submore+0x1a>
 80081d4:	eb00 0806 	add.w	r8, r0, r6
 80081d8:	4601      	mov	r1, r0
 80081da:	4632      	mov	r2, r6
 80081dc:	4640      	mov	r0, r8
 80081de:	f000 f827 	bl	8008230 <memcpy>
 80081e2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80081e6:	f8c4 8000 	str.w	r8, [r4]
 80081ea:	e7e9      	b.n	80081c0 <__submore+0x48>

080081ec <_fstat_r>:
 80081ec:	b538      	push	{r3, r4, r5, lr}
 80081ee:	4d07      	ldr	r5, [pc, #28]	; (800820c <_fstat_r+0x20>)
 80081f0:	2300      	movs	r3, #0
 80081f2:	4604      	mov	r4, r0
 80081f4:	4608      	mov	r0, r1
 80081f6:	4611      	mov	r1, r2
 80081f8:	602b      	str	r3, [r5, #0]
 80081fa:	f7f9 ff02 	bl	8002002 <_fstat>
 80081fe:	1c43      	adds	r3, r0, #1
 8008200:	d102      	bne.n	8008208 <_fstat_r+0x1c>
 8008202:	682b      	ldr	r3, [r5, #0]
 8008204:	b103      	cbz	r3, 8008208 <_fstat_r+0x1c>
 8008206:	6023      	str	r3, [r4, #0]
 8008208:	bd38      	pop	{r3, r4, r5, pc}
 800820a:	bf00      	nop
 800820c:	20000568 	.word	0x20000568

08008210 <_isatty_r>:
 8008210:	b538      	push	{r3, r4, r5, lr}
 8008212:	4d06      	ldr	r5, [pc, #24]	; (800822c <_isatty_r+0x1c>)
 8008214:	2300      	movs	r3, #0
 8008216:	4604      	mov	r4, r0
 8008218:	4608      	mov	r0, r1
 800821a:	602b      	str	r3, [r5, #0]
 800821c:	f7f9 ff01 	bl	8002022 <_isatty>
 8008220:	1c43      	adds	r3, r0, #1
 8008222:	d102      	bne.n	800822a <_isatty_r+0x1a>
 8008224:	682b      	ldr	r3, [r5, #0]
 8008226:	b103      	cbz	r3, 800822a <_isatty_r+0x1a>
 8008228:	6023      	str	r3, [r4, #0]
 800822a:	bd38      	pop	{r3, r4, r5, pc}
 800822c:	20000568 	.word	0x20000568

08008230 <memcpy>:
 8008230:	440a      	add	r2, r1
 8008232:	4291      	cmp	r1, r2
 8008234:	f100 33ff 	add.w	r3, r0, #4294967295
 8008238:	d100      	bne.n	800823c <memcpy+0xc>
 800823a:	4770      	bx	lr
 800823c:	b510      	push	{r4, lr}
 800823e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008242:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008246:	4291      	cmp	r1, r2
 8008248:	d1f9      	bne.n	800823e <memcpy+0xe>
 800824a:	bd10      	pop	{r4, pc}

0800824c <__malloc_lock>:
 800824c:	4801      	ldr	r0, [pc, #4]	; (8008254 <__malloc_lock+0x8>)
 800824e:	f7fe bf59 	b.w	8007104 <__retarget_lock_acquire_recursive>
 8008252:	bf00      	nop
 8008254:	2000055c 	.word	0x2000055c

08008258 <__malloc_unlock>:
 8008258:	4801      	ldr	r0, [pc, #4]	; (8008260 <__malloc_unlock+0x8>)
 800825a:	f7fe bf54 	b.w	8007106 <__retarget_lock_release_recursive>
 800825e:	bf00      	nop
 8008260:	2000055c 	.word	0x2000055c

08008264 <_realloc_r>:
 8008264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008268:	4680      	mov	r8, r0
 800826a:	4614      	mov	r4, r2
 800826c:	460e      	mov	r6, r1
 800826e:	b921      	cbnz	r1, 800827a <_realloc_r+0x16>
 8008270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008274:	4611      	mov	r1, r2
 8008276:	f7ff b82b 	b.w	80072d0 <_malloc_r>
 800827a:	b92a      	cbnz	r2, 8008288 <_realloc_r+0x24>
 800827c:	f7fe ffbc 	bl	80071f8 <_free_r>
 8008280:	4625      	mov	r5, r4
 8008282:	4628      	mov	r0, r5
 8008284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008288:	f000 f81b 	bl	80082c2 <_malloc_usable_size_r>
 800828c:	4284      	cmp	r4, r0
 800828e:	4607      	mov	r7, r0
 8008290:	d802      	bhi.n	8008298 <_realloc_r+0x34>
 8008292:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008296:	d812      	bhi.n	80082be <_realloc_r+0x5a>
 8008298:	4621      	mov	r1, r4
 800829a:	4640      	mov	r0, r8
 800829c:	f7ff f818 	bl	80072d0 <_malloc_r>
 80082a0:	4605      	mov	r5, r0
 80082a2:	2800      	cmp	r0, #0
 80082a4:	d0ed      	beq.n	8008282 <_realloc_r+0x1e>
 80082a6:	42bc      	cmp	r4, r7
 80082a8:	4622      	mov	r2, r4
 80082aa:	4631      	mov	r1, r6
 80082ac:	bf28      	it	cs
 80082ae:	463a      	movcs	r2, r7
 80082b0:	f7ff ffbe 	bl	8008230 <memcpy>
 80082b4:	4631      	mov	r1, r6
 80082b6:	4640      	mov	r0, r8
 80082b8:	f7fe ff9e 	bl	80071f8 <_free_r>
 80082bc:	e7e1      	b.n	8008282 <_realloc_r+0x1e>
 80082be:	4635      	mov	r5, r6
 80082c0:	e7df      	b.n	8008282 <_realloc_r+0x1e>

080082c2 <_malloc_usable_size_r>:
 80082c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082c6:	1f18      	subs	r0, r3, #4
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	bfbc      	itt	lt
 80082cc:	580b      	ldrlt	r3, [r1, r0]
 80082ce:	18c0      	addlt	r0, r0, r3
 80082d0:	4770      	bx	lr
	...

080082d4 <_init>:
 80082d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d6:	bf00      	nop
 80082d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082da:	bc08      	pop	{r3}
 80082dc:	469e      	mov	lr, r3
 80082de:	4770      	bx	lr

080082e0 <_fini>:
 80082e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e2:	bf00      	nop
 80082e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082e6:	bc08      	pop	{r3}
 80082e8:	469e      	mov	lr, r3
 80082ea:	4770      	bx	lr
