
mystm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08007060  08007060  00017060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800729c  0800729c  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  0800729c  0800729c  0001729c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072a4  080072a4  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072a4  080072a4  000172a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072a8  080072a8  000172a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  080072ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000130  080073dc  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  080073dc  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015655  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003029  00000000  00000000  000357b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  000387e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  00039978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002912f  00000000  00000000  0003a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161c3  00000000  00000000  00063ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f61f6  00000000  00000000  00079caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016fea0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052c4  00000000  00000000  0016fef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000130 	.word	0x20000130
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007048 	.word	0x08007048

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000134 	.word	0x20000134
 80001cc:	08007048 	.word	0x08007048

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <cliInit>:
#include "commTask.h"

extern LED ledR;


void cliInit(){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	RegisterCommand("led", "on", ledOn, &ledR);
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <cliInit+0x20>)
 80005aa:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <cliInit+0x24>)
 80005ac:	4907      	ldr	r1, [pc, #28]	; (80005cc <cliInit+0x28>)
 80005ae:	4808      	ldr	r0, [pc, #32]	; (80005d0 <cliInit+0x2c>)
 80005b0:	f000 fad4 	bl	8000b5c <RegisterCommand>
	RegisterCommand("led", "off", ledOff, &ledR);
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <cliInit+0x20>)
 80005b6:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <cliInit+0x30>)
 80005b8:	4907      	ldr	r1, [pc, #28]	; (80005d8 <cliInit+0x34>)
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <cliInit+0x2c>)
 80005bc:	f000 face 	bl	8000b5c <RegisterCommand>
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	2000014c 	.word	0x2000014c
 80005c8:	08000bfb 	.word	0x08000bfb
 80005cc:	08007060 	.word	0x08007060
 80005d0:	08007064 	.word	0x08007064
 80005d4:	08000c25 	.word	0x08000c25
 80005d8:	08007068 	.word	0x08007068

080005dc <_write>:
BUTTON button1;
BUZZER buzzer;
CLOCK clock1;

int _write(int fd, char* ptr, int len)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	f04f 33ff 	mov.w	r3, #4294967295
 80005f0:	68b9      	ldr	r1, [r7, #8]
 80005f2:	4804      	ldr	r0, [pc, #16]	; (8000604 <_write+0x28>)
 80005f4:	f003 feea 	bl	80043cc <HAL_UART_Transmit>
	return len;
 80005f8:	687b      	ldr	r3, [r7, #4]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000448 	.word	0x20000448

08000608 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a0b      	ldr	r2, [pc, #44]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d10e      	bne.n	8000636 <HAL_TIM_PeriodElapsedCallback+0x2e>
    ////////////////led////////////////////////////////////
	  ledOnTimerInterrupt(&ledB);
 8000618:	480a      	ldr	r0, [pc, #40]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800061a:	f000 fb18 	bl	8000c4e <ledOnTimerInterrupt>
	  ledOnTimerInterrupt(&ledR);
 800061e:	480a      	ldr	r0, [pc, #40]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000620:	f000 fb15 	bl	8000c4e <ledOnTimerInterrupt>

	//////////////clock//////////////////////////////////
	  clockOnTimerInterrupt(&clock1);
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000626:	f000 f98f 	bl	8000948 <clockOnTimerInterrupt>

	/////////////buzzer/////////////////////////////////
	  buzzerOnTimerInterrupt(&buzzer);
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800062c:	f000 f956 	bl	80008dc <buzzerOnTimerInterrupt>

	///////////button//////////////////////////////////
	  buttonOnTimerInterrupt (&button1);
 8000630:	4808      	ldr	r0, [pc, #32]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000632:	f000 f8c3 	bl	80007bc <buttonOnTimerInterrupt>

	}


}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200003fc 	.word	0x200003fc
 8000644:	20000160 	.word	0x20000160
 8000648:	2000014c 	.word	0x2000014c
 800064c:	2000019c 	.word	0x2000019c
 8000650:	20000188 	.word	0x20000188
 8000654:	20000174 	.word	0x20000174

08000658 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]
	buttonInterrupt(&button1);
 8000662:	4803      	ldr	r0, [pc, #12]	; (8000670 <HAL_GPIO_EXTI_Callback+0x18>)
 8000664:	f000 f856 	bl	8000714 <buttonInterrupt>
//			HAL_TIM_Base_Stop_IT(&htim3);
//			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
//		}


}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000174 	.word	0x20000174

08000674 <mainloop>:




void mainloop()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8000678:	4812      	ldr	r0, [pc, #72]	; (80006c4 <mainloop+0x50>)
 800067a:	f002 ff21 	bl	80034c0 <HAL_TIM_Base_Start_IT>

	ledInit(&ledB , LD2_GPIO_Port , LD2_Pin );
 800067e:	2220      	movs	r2, #32
 8000680:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000684:	4810      	ldr	r0, [pc, #64]	; (80006c8 <mainloop+0x54>)
 8000686:	f000 fa9f 	bl	8000bc8 <ledInit>
	ledInit(&ledR , LD3_GPIO_Port , LD3_Pin );
 800068a:	2240      	movs	r2, #64	; 0x40
 800068c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000690:	480e      	ldr	r0, [pc, #56]	; (80006cc <mainloop+0x58>)
 8000692:	f000 fa99 	bl	8000bc8 <ledInit>
	buzzerInit(&buzzer);
 8000696:	480e      	ldr	r0, [pc, #56]	; (80006d0 <mainloop+0x5c>)
 8000698:	f000 f8b2 	bl	8000800 <buzzerInit>
	clockInit(&clock1);
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <mainloop+0x60>)
 800069e:	f000 f93a 	bl	8000916 <clockInit>
	buttonInit(&button1, B2_GPIO_Port ,  B2_Pin);
 80006a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006a6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80006aa:	480b      	ldr	r0, [pc, #44]	; (80006d8 <mainloop+0x64>)
 80006ac:	f000 f816 	bl	80006dc <buttonInit>
//	StateButon sw1State;
	cliInit();
 80006b0:	f7ff ff78 	bl	80005a4 <cliInit>

	while(1)
	{
		if (commTask()){
 80006b4:	f000 f984 	bl	80009c0 <commTask>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d0fa      	beq.n	80006b4 <mainloop+0x40>
			 handleCommand();
 80006be:	f000 f9fd 	bl	8000abc <handleCommand>
		if (commTask()){
 80006c2:	e7f7      	b.n	80006b4 <mainloop+0x40>
 80006c4:	200003fc 	.word	0x200003fc
 80006c8:	20000160 	.word	0x20000160
 80006cc:	2000014c 	.word	0x2000014c
 80006d0:	20000188 	.word	0x20000188
 80006d4:	2000019c 	.word	0x2000019c
 80006d8:	20000174 	.word	0x20000174

080006dc <buttonInit>:

uint32_t counter = 0;
int flagPrees = 0;

void buttonInit(BUTTON* button , GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	4613      	mov	r3, r2
 80006e8:	80fb      	strh	r3, [r7, #6]
	button->state = BUTTON_STATE_NONE;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
	button->timeTickOn = 0 ;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
	button->timeTickOff = 0 ;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
	button->GPIOx = GPIOx;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	60da      	str	r2, [r3, #12]
	button->GPIO_Pin = GPIO_Pin;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	88fa      	ldrh	r2, [r7, #6]
 8000706:	821a      	strh	r2, [r3, #16]
}
 8000708:	bf00      	nop
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <buttonInterrupt>:


void buttonInterrupt(BUTTON* button)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	uint32_t DelayTick = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]

	if(HAL_GPIO_ReadPin(button->GPIOx, button->GPIO_Pin) == 0){
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	68da      	ldr	r2, [r3, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	8a1b      	ldrh	r3, [r3, #16]
 8000728:	4619      	mov	r1, r3
 800072a:	4610      	mov	r0, r2
 800072c:	f001 faee 	bl	8001d0c <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d105      	bne.n	8000742 <buttonInterrupt+0x2e>
		button->timeTickOn = HAL_GetTick();
 8000736:	f000 ffa3 	bl	8001680 <HAL_GetTick>
 800073a:	4602      	mov	r2, r0
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	605a      	str	r2, [r3, #4]
	     }
	     else{
		   button->state = BUTTON_STATE;
	     }
	}
}
 8000740:	e031      	b.n	80007a6 <buttonInterrupt+0x92>
	else if(HAL_GPIO_ReadPin(button->GPIOx, button->GPIO_Pin) == 1){
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	68da      	ldr	r2, [r3, #12]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	8a1b      	ldrh	r3, [r3, #16]
 800074a:	4619      	mov	r1, r3
 800074c:	4610      	mov	r0, r2
 800074e:	f001 fadd 	bl	8001d0c <HAL_GPIO_ReadPin>
 8000752:	4603      	mov	r3, r0
 8000754:	2b01      	cmp	r3, #1
 8000756:	d126      	bne.n	80007a6 <buttonInterrupt+0x92>
			button->timeTickOff = HAL_GetTick();
 8000758:	f000 ff92 	bl	8001680 <HAL_GetTick>
 800075c:	4602      	mov	r2, r0
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	609a      	str	r2, [r3, #8]
			DelayTick = button->timeTickOff - button->timeTickOn;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	689a      	ldr	r2, [r3, #8]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	60fb      	str	r3, [r7, #12]
	     if(DelayTick > 500){
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000774:	d906      	bls.n	8000784 <buttonInterrupt+0x70>
	       button->state = BUTTON_LONG_PRESS;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2203      	movs	r2, #3
 800077a:	701a      	strb	r2, [r3, #0]
	       printf("Long \n\r");
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <buttonInterrupt+0x9c>)
 800077e:	f004 ffd3 	bl	8005728 <iprintf>
}
 8000782:	e010      	b.n	80007a6 <buttonInterrupt+0x92>
	     else if (button->state == BUTTON_STATE) {
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d109      	bne.n	80007a0 <buttonInterrupt+0x8c>
		   button->state = BUTTON_DOUBLE_PRESS;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2204      	movs	r2, #4
 8000790:	701a      	strb	r2, [r3, #0]
		   counter = 0;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <buttonInterrupt+0xa0>)
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
		   printf("Double \n\r");
 8000798:	4807      	ldr	r0, [pc, #28]	; (80007b8 <buttonInterrupt+0xa4>)
 800079a:	f004 ffc5 	bl	8005728 <iprintf>
}
 800079e:	e002      	b.n	80007a6 <buttonInterrupt+0x92>
		   button->state = BUTTON_STATE;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2201      	movs	r2, #1
 80007a4:	701a      	strb	r2, [r3, #0]
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	0800706c 	.word	0x0800706c
 80007b4:	200001b0 	.word	0x200001b0
 80007b8:	08007074 	.word	0x08007074

080007bc <buttonOnTimerInterrupt>:

void buttonOnTimerInterrupt (BUTTON* button)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	if (button->state == BUTTON_STATE) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d111      	bne.n	80007f0 <buttonOnTimerInterrupt+0x34>
		counter++;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <buttonOnTimerInterrupt+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	4a09      	ldr	r2, [pc, #36]	; (80007f8 <buttonOnTimerInterrupt+0x3c>)
 80007d4:	6013      	str	r3, [r2, #0]
		if(counter > 200 ){
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <buttonOnTimerInterrupt+0x3c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2bc8      	cmp	r3, #200	; 0xc8
 80007dc:	d908      	bls.n	80007f0 <buttonOnTimerInterrupt+0x34>
			button->state = BUTTON_STATE_PRESS;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2202      	movs	r2, #2
 80007e2:	701a      	strb	r2, [r3, #0]
			counter = 0;
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <buttonOnTimerInterrupt+0x3c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
			printf("One \n\r");
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <buttonOnTimerInterrupt+0x40>)
 80007ec:	f004 ff9c 	bl	8005728 <iprintf>
		}
	}
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200001b0 	.word	0x200001b0
 80007fc:	08007080 	.word	0x08007080

08000800 <buzzerInit>:
int noteJonatan []= {255 , 303,  303,  286, 340, 340, 390, 340, 303, 286, 255, 255, 255, 255 , 303,  303,  286, 340, 340 ,390, 303, 255, 255,390};
int periodeJonatan[]={250, 250,  500,  250, 250, 500, 250, 250, 250, 250, 500, 250, 250, 250,  250,  500,  250, 250, 500, 250, 250, 250 ,500,250};


void buzzerInit(BUZZER* buzzer)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	buzzer->state = MUSIC_OFF;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2201      	movs	r2, #1
 800080c:	701a      	strb	r2, [r3, #0]
	buzzer->sizeOfMusic = (sizeof(noteJonatan) / sizeof(noteJonatan[0]));
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2218      	movs	r2, #24
 8000812:	605a      	str	r2, [r3, #4]
	buzzer->currentNote= 0;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
	buzzer->counter = 0;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
	buzzer->Maxcount = periodeJonatan[0];
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <buzzerInit+0x34>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	611a      	str	r2, [r3, #16]
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	20000060 	.word	0x20000060

08000838 <playNote>:

void playNote(BUZZER* buzzer)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <playNote+0x54>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim3, noteJonatan[buzzer->currentNote]);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	4a10      	ldr	r2, [pc, #64]	; (8000890 <playNote+0x58>)
 800084e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <playNote+0x54>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <playNote+0x58>)
 800085e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000862:	461a      	mov	r2, r3
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <playNote+0x54>)
 8000866:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (noteJonatan[buzzer->currentNote]/2));
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	4a08      	ldr	r2, [pc, #32]	; (8000890 <playNote+0x58>)
 800086e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000872:	0fda      	lsrs	r2, r3, #31
 8000874:	4413      	add	r3, r2
 8000876:	105b      	asrs	r3, r3, #1
 8000878:	461a      	mov	r2, r3
 800087a:	4b04      	ldr	r3, [pc, #16]	; (800088c <playNote+0x54>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	635a      	str	r2, [r3, #52]	; 0x34

}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	20000364 	.word	0x20000364
 8000890:	20000000 	.word	0x20000000

08000894 <playNextNote>:

void playNextNote(BUZZER* buzzer)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	buzzer->currentNote++;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	1c5a      	adds	r2, r3, #1
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	609a      	str	r2, [r3, #8]
	if(buzzer->currentNote >= buzzer->sizeOfMusic){
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	461a      	mov	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d302      	bcc.n	80008ba <playNextNote+0x26>
		buzzer->currentNote = 0;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
	}
	buzzer->Maxcount = periodeJonatan [buzzer->currentNote];
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	4a06      	ldr	r2, [pc, #24]	; (80008d8 <playNextNote+0x44>)
 80008c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	611a      	str	r2, [r3, #16]
	playNote(buzzer);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ffb5 	bl	8000838 <playNote>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000060 	.word	0x20000060

080008dc <buzzerOnTimerInterrupt>:

void buzzerOnTimerInterrupt(BUZZER* buzzer)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	if(buzzer->state == MUSIC_ON){
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d110      	bne.n	800090e <buzzerOnTimerInterrupt+0x32>
		buzzer->counter++;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	1c5a      	adds	r2, r3, #1
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	60da      	str	r2, [r3, #12]
		if(buzzer->counter >= buzzer->Maxcount){
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	68da      	ldr	r2, [r3, #12]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	691b      	ldr	r3, [r3, #16]
 80008fe:	429a      	cmp	r2, r3
 8000900:	db05      	blt.n	800090e <buzzerOnTimerInterrupt+0x32>
		   playNextNote(buzzer);
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ffc6 	bl	8000894 <playNextNote>
		   buzzer->counter = 0;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
		}
	}


}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <clockInit>:

#include "clock.h"

void clockInit(CLOCK* clock)
{
 8000916:	b480      	push	{r7}
 8000918:	b083      	sub	sp, #12
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
	clock->tick = 0;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
	clock->seconds = 0;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	605a      	str	r2, [r3, #4]
	clock->minutes =0;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
	clock->hours = 0;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
	clock->days = 0;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <clockOnTimerInterrupt>:

void clockOnTimerInterrupt(CLOCK* clock)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	clock->tick++;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	601a      	str	r2, [r3, #0]
	clock->seconds = clock->tick/1000;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <clockOnTimerInterrupt+0x68>)
 8000960:	fba2 2303 	umull	r2, r3, r2, r3
 8000964:	099b      	lsrs	r3, r3, #6
 8000966:	461a      	mov	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	605a      	str	r2, [r3, #4]
	clock->minutes = clock->tick/60000;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <clockOnTimerInterrupt+0x6c>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	0b9b      	lsrs	r3, r3, #14
 8000978:	461a      	mov	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	609a      	str	r2, [r3, #8]
	clock->hours = clock->tick/360000;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	099b      	lsrs	r3, r3, #6
 8000984:	4a0c      	ldr	r2, [pc, #48]	; (80009b8 <clockOnTimerInterrupt+0x70>)
 8000986:	fba2 2303 	umull	r2, r3, r2, r3
 800098a:	089b      	lsrs	r3, r3, #2
 800098c:	461a      	mov	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	60da      	str	r2, [r3, #12]
	clock->days = clock->tick/8640000;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a09      	ldr	r2, [pc, #36]	; (80009bc <clockOnTimerInterrupt+0x74>)
 8000998:	fba2 2303 	umull	r2, r3, r2, r3
 800099c:	0ddb      	lsrs	r3, r3, #23
 800099e:	461a      	mov	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	611a      	str	r2, [r3, #16]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	10624dd3 	.word	0x10624dd3
 80009b4:	45e7b273 	.word	0x45e7b273
 80009b8:	002e9a77 	.word	0x002e9a77
 80009bc:	f88d2527 	.word	0xf88d2527

080009c0 <commTask>:

COMAND comands[20];
static int counterComand = 0;

int commTask()
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 80009c6:	1db9      	adds	r1, r7, #6
 80009c8:	230a      	movs	r3, #10
 80009ca:	2201      	movs	r2, #1
 80009cc:	4836      	ldr	r0, [pc, #216]	; (8000aa8 <commTask+0xe8>)
 80009ce:	f003 fd91 	bl	80044f4 <HAL_UART_Receive>
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d020      	beq.n	8000a1e <commTask+0x5e>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 80009dc:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <commTask+0xe8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	f003 0308 	and.w	r3, r3, #8
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d011      	beq.n	8000a0e <commTask+0x4e>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 80009ea:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <commTask+0xe8>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2208      	movs	r2, #8
 80009f0:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 80009f2:	e00c      	b.n	8000a0e <commTask+0x4e>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 80009f4:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <commTask+0xec>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	1c5a      	adds	r2, r3, #1
 80009fa:	492c      	ldr	r1, [pc, #176]	; (8000aac <commTask+0xec>)
 80009fc:	600a      	str	r2, [r1, #0]
 80009fe:	4a2c      	ldr	r2, [pc, #176]	; (8000ab0 <commTask+0xf0>)
 8000a00:	1899      	adds	r1, r3, r2
 8000a02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a06:	2201      	movs	r2, #1
 8000a08:	4827      	ldr	r0, [pc, #156]	; (8000aa8 <commTask+0xe8>)
 8000a0a:	f003 fcdf 	bl	80043cc <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <commTask+0xec>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <commTask+0xf4>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	dbec      	blt.n	80009f4 <commTask+0x34>
		}

		return 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e03f      	b.n	8000a9e <commTask+0xde>
	}

	if (ch != '\r' && ch != '\n')
 8000a1e:	79bb      	ldrb	r3, [r7, #6]
 8000a20:	2b0d      	cmp	r3, #13
 8000a22:	d023      	beq.n	8000a6c <commTask+0xac>
 8000a24:	79bb      	ldrb	r3, [r7, #6]
 8000a26:	2b0a      	cmp	r3, #10
 8000a28:	d020      	beq.n	8000a6c <commTask+0xac>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 8000a2a:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <commTask+0xf4>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b63      	cmp	r3, #99	; 0x63
 8000a30:	dd05      	ble.n	8000a3e <commTask+0x7e>
		{
			cmdcount = 0;
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <commTask+0xf4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8000a38:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <commTask+0xec>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <commTask+0xf4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	491b      	ldr	r1, [pc, #108]	; (8000ab4 <commTask+0xf4>)
 8000a46:	600a      	str	r2, [r1, #0]
 8000a48:	79b9      	ldrb	r1, [r7, #6]
 8000a4a:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <commTask+0xf0>)
 8000a4c:	54d1      	strb	r1, [r2, r3]
		return 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e025      	b.n	8000a9e <commTask+0xde>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount)
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <commTask+0xec>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	4914      	ldr	r1, [pc, #80]	; (8000aac <commTask+0xec>)
 8000a5a:	600a      	str	r2, [r1, #0]
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <commTask+0xf0>)
 8000a5e:	1899      	adds	r1, r3, r2
 8000a60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a64:	2201      	movs	r2, #1
 8000a66:	4810      	ldr	r0, [pc, #64]	; (8000aa8 <commTask+0xe8>)
 8000a68:	f003 fcb0 	bl	80043cc <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <commTask+0xec>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <commTask+0xf4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	dbec      	blt.n	8000a52 <commTask+0x92>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000a78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	490e      	ldr	r1, [pc, #56]	; (8000ab8 <commTask+0xf8>)
 8000a80:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <commTask+0xe8>)
 8000a82:	f003 fca3 	bl	80043cc <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <commTask+0xf4>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a09      	ldr	r2, [pc, #36]	; (8000ab0 <commTask+0xf0>)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <commTask+0xf4>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <commTask+0xec>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
	return 1;
 8000a9c:	2301      	movs	r3, #1
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000448 	.word	0x20000448
 8000aac:	2000021c 	.word	0x2000021c
 8000ab0:	200001b4 	.word	0x200001b4
 8000ab4:	20000218 	.word	0x20000218
 8000ab8:	08007088 	.word	0x08007088

08000abc <handleCommand>:


void handleCommand()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08c      	sub	sp, #48	; 0x30
 8000ac0:	af00      	add	r7, sp, #0
   char cmd[20];
   char state[20];

  int params = sscanf((const char*)cmdbuffer, "%s %s", cmd, state);
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	f107 0214 	add.w	r2, r7, #20
 8000ac8:	4920      	ldr	r1, [pc, #128]	; (8000b4c <handleCommand+0x90>)
 8000aca:	4821      	ldr	r0, [pc, #132]	; (8000b50 <handleCommand+0x94>)
 8000acc:	f004 fe44 	bl	8005758 <siscanf>
 8000ad0:	62b8      	str	r0, [r7, #40]	; 0x28
  if (params == 0){
 8000ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d035      	beq.n	8000b44 <handleCommand+0x88>
	  return;
  }
  for(int i=0; i<counterComand ; i++){
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000adc:	e02c      	b.n	8000b38 <handleCommand+0x7c>
	  if(strcmp(cmd, comands[i].comandName) == 0){
 8000ade:	4a1d      	ldr	r2, [pc, #116]	; (8000b54 <handleCommand+0x98>)
 8000ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae2:	011b      	lsls	r3, r3, #4
 8000ae4:	4413      	add	r3, r2
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fb6e 	bl	80001d0 <strcmp>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d11b      	bne.n	8000b32 <handleCommand+0x76>
		   if(strcmp(state, comands[i].stateComand) == 0){
 8000afa:	4a16      	ldr	r2, [pc, #88]	; (8000b54 <handleCommand+0x98>)
 8000afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000afe:	011b      	lsls	r3, r3, #4
 8000b00:	4413      	add	r3, r2
 8000b02:	3304      	adds	r3, #4
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	463b      	mov	r3, r7
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fb60 	bl	80001d0 <strcmp>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d10d      	bne.n	8000b32 <handleCommand+0x76>
			   comands[i].comandPointer(comands[i].object);
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <handleCommand+0x98>)
 8000b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b1a:	011b      	lsls	r3, r3, #4
 8000b1c:	4413      	add	r3, r2
 8000b1e:	3308      	adds	r3, #8
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	490c      	ldr	r1, [pc, #48]	; (8000b54 <handleCommand+0x98>)
 8000b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b26:	0112      	lsls	r2, r2, #4
 8000b28:	440a      	add	r2, r1
 8000b2a:	320c      	adds	r2, #12
 8000b2c:	6812      	ldr	r2, [r2, #0]
 8000b2e:	4610      	mov	r0, r2
 8000b30:	4798      	blx	r3
  for(int i=0; i<counterComand ; i++){
 8000b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b34:	3301      	adds	r3, #1
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <handleCommand+0x9c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	dbcd      	blt.n	8000ade <handleCommand+0x22>
 8000b42:	e000      	b.n	8000b46 <handleCommand+0x8a>
	  return;
 8000b44:	bf00      	nop
		   }
	  }

  }

}
 8000b46:	3730      	adds	r7, #48	; 0x30
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	0800708c 	.word	0x0800708c
 8000b50:	200001b4 	.word	0x200001b4
 8000b54:	20000220 	.word	0x20000220
 8000b58:	20000360 	.word	0x20000360

08000b5c <RegisterCommand>:


void RegisterCommand(char* comandName, char* stateComand, HandlerFunc comandPointer, void* object){
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	603b      	str	r3, [r7, #0]
	comands[counterComand].comandName = comandName;
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <RegisterCommand+0x64>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a15      	ldr	r2, [pc, #84]	; (8000bc4 <RegisterCommand+0x68>)
 8000b70:	011b      	lsls	r3, r3, #4
 8000b72:	4413      	add	r3, r2
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	601a      	str	r2, [r3, #0]
	comands[counterComand].stateComand = stateComand;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <RegisterCommand+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a11      	ldr	r2, [pc, #68]	; (8000bc4 <RegisterCommand+0x68>)
 8000b7e:	011b      	lsls	r3, r3, #4
 8000b80:	4413      	add	r3, r2
 8000b82:	3304      	adds	r3, #4
 8000b84:	68ba      	ldr	r2, [r7, #8]
 8000b86:	601a      	str	r2, [r3, #0]
	comands[counterComand].comandPointer = comandPointer;
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <RegisterCommand+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <RegisterCommand+0x68>)
 8000b8e:	011b      	lsls	r3, r3, #4
 8000b90:	4413      	add	r3, r2
 8000b92:	3308      	adds	r3, #8
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	601a      	str	r2, [r3, #0]
	comands[counterComand].object = object;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <RegisterCommand+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a09      	ldr	r2, [pc, #36]	; (8000bc4 <RegisterCommand+0x68>)
 8000b9e:	011b      	lsls	r3, r3, #4
 8000ba0:	4413      	add	r3, r2
 8000ba2:	330c      	adds	r3, #12
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	601a      	str	r2, [r3, #0]
	counterComand++;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <RegisterCommand+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	3301      	adds	r3, #1
 8000bae:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <RegisterCommand+0x64>)
 8000bb0:	6013      	str	r3, [r2, #0]

}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000360 	.word	0x20000360
 8000bc4:	20000220 	.word	0x20000220

08000bc8 <ledInit>:
#include "led.h"
#include <stdio.h>
extern TIM_HandleTypeDef htim4;

void ledInit(LED* led , GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	80fb      	strh	r3, [r7, #6]
 led->state = STATE_OFF;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
 led->counter = 0 ;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
 led->GPIOx = GPIOx;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	68ba      	ldr	r2, [r7, #8]
 8000be6:	609a      	str	r2, [r3, #8]
 led->GPIO_Pin = GPIO_Pin;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	88fa      	ldrh	r2, [r7, #6]
 8000bec:	819a      	strh	r2, [r3, #12]
}
 8000bee:	bf00      	nop
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <ledOn>:

void ledOn(void* obg)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b084      	sub	sp, #16
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
	LED *led = (LED*)obg;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	60fb      	str	r3, [r7, #12]
	led->state = STATE_ON;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2201      	movs	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 1);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	6898      	ldr	r0, [r3, #8]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	899b      	ldrh	r3, [r3, #12]
 8000c14:	2201      	movs	r2, #1
 8000c16:	4619      	mov	r1, r3
 8000c18:	f001 f890 	bl	8001d3c <HAL_GPIO_WritePin>
}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <ledOff>:

void ledOff(void* obg)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
    LED *led = (LED*)obg;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	60fb      	str	r3, [r7, #12]
	led->state = STATE_OFF;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 0);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	6898      	ldr	r0, [r3, #8]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	899b      	ldrh	r3, [r3, #12]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	4619      	mov	r1, r3
 8000c42:	f001 f87b 	bl	8001d3c <HAL_GPIO_WritePin>
}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <ledOnTimerInterrupt>:
	led->period = period;
	led->counter = 0;
}

void ledOnTimerInterrupt(LED* led)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
	if(led->state == STATE_BLINKING){
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d115      	bne.n	8000c8a <ledOnTimerInterrupt+0x3c>
		led->counter++;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	605a      	str	r2, [r3, #4]
		if((led->counter) >= (led->period) ){
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685a      	ldr	r2, [r3, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	db0a      	blt.n	8000c8a <ledOnTimerInterrupt+0x3c>
			HAL_GPIO_TogglePin(led->GPIOx, led->GPIO_Pin);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	899b      	ldrh	r3, [r3, #12]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4610      	mov	r0, r2
 8000c80:	f001 f874 	bl	8001d6c <HAL_GPIO_TogglePin>
			led->counter = 0;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	605a      	str	r2, [r3, #4]

		}
	}
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c96:	f000 fc83 	bl	80015a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9a:	f000 f80d 	bl	8000cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9e:	f000 f975 	bl	8000f8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ca2:	f000 f943 	bl	8000f2c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000ca6:	f000 f90b 	bl	8000ec0 <MX_TIM6_Init>
  MX_TIM3_Init();
 8000caa:	f000 f857 	bl	8000d5c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cae:	f000 f8ad 	bl	8000e0c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  mainloop();
 8000cb2:	f7ff fcdf 	bl	8000674 <mainloop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <main+0x24>

08000cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b096      	sub	sp, #88	; 0x58
 8000cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	2244      	movs	r2, #68	; 0x44
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f004 fd26 	bl	8005718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ccc:	463b      	mov	r3, r7
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
 8000cd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cda:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cde:	f001 f885 	bl	8001dec <HAL_PWREx_ControlVoltageScaling>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ce8:	f000 f9ce 	bl	8001088 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cec:	2302      	movs	r3, #2
 8000cee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf6:	2310      	movs	r3, #16
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d06:	230a      	movs	r3, #10
 8000d08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d0a:	2307      	movs	r3, #7
 8000d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 f8bc 	bl	8001e98 <HAL_RCC_OscConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000d26:	f000 f9af 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2a:	230f      	movs	r3, #15
 8000d2c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2104      	movs	r1, #4
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 fc84 	bl	8002650 <HAL_RCC_ClockConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d4e:	f000 f99b 	bl	8001088 <Error_Handler>
  }
}
 8000d52:	bf00      	nop
 8000d54:	3758      	adds	r7, #88	; 0x58
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
 8000d7c:	615a      	str	r2, [r3, #20]
 8000d7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d80:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <MX_TIM3_Init+0xa8>)
 8000d82:	4a21      	ldr	r2, [pc, #132]	; (8000e08 <MX_TIM3_Init+0xac>)
 8000d84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800;
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <MX_TIM3_Init+0xa8>)
 8000d88:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000d8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <MX_TIM3_Init+0xa8>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000d94:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <MX_TIM3_Init+0xa8>)
 8000d96:	2264      	movs	r2, #100	; 0x64
 8000d98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MX_TIM3_Init+0xa8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da0:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_TIM3_Init+0xa8>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000da6:	4817      	ldr	r0, [pc, #92]	; (8000e04 <MX_TIM3_Init+0xa8>)
 8000da8:	f002 fbfa 	bl	80035a0 <HAL_TIM_PWM_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000db2:	f000 f969 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480f      	ldr	r0, [pc, #60]	; (8000e04 <MX_TIM3_Init+0xa8>)
 8000dc6:	f003 fa0d 	bl	80041e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000dd0:	f000 f95a 	bl	8001088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd4:	2360      	movs	r3, #96	; 0x60
 8000dd6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8000dd8:	230a      	movs	r3, #10
 8000dda:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	2200      	movs	r2, #0
 8000de8:	4619      	mov	r1, r3
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <MX_TIM3_Init+0xa8>)
 8000dec:	f002 fd4e 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000df6:	f000 f947 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	; 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000364 	.word	0x20000364
 8000e08:	40000400 	.word	0x40000400

08000e0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e1e:	463b      	mov	r3, r7
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
 8000e2c:	615a      	str	r2, [r3, #20]
 8000e2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e30:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <MX_TIM4_Init+0xac>)
 8000e32:	4a22      	ldr	r2, [pc, #136]	; (8000ebc <MX_TIM4_Init+0xb0>)
 8000e34:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000;
 8000e36:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <MX_TIM4_Init+0xac>)
 8000e38:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000e3c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <MX_TIM4_Init+0xac>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000e44:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <MX_TIM4_Init+0xac>)
 8000e46:	2264      	movs	r2, #100	; 0x64
 8000e48:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_TIM4_Init+0xac>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <MX_TIM4_Init+0xac>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e56:	4818      	ldr	r0, [pc, #96]	; (8000eb8 <MX_TIM4_Init+0xac>)
 8000e58:	f002 fba2 	bl	80035a0 <HAL_TIM_PWM_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000e62:	f000 f911 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4619      	mov	r1, r3
 8000e74:	4810      	ldr	r0, [pc, #64]	; (8000eb8 <MX_TIM4_Init+0xac>)
 8000e76:	f003 f9b5 	bl	80041e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000e80:	f000 f902 	bl	8001088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e84:	2360      	movs	r3, #96	; 0x60
 8000e86:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30;
 8000e88:	231e      	movs	r3, #30
 8000e8a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	2200      	movs	r2, #0
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4807      	ldr	r0, [pc, #28]	; (8000eb8 <MX_TIM4_Init+0xac>)
 8000e9c:	f002 fcf6 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000ea6:	f000 f8ef 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000eaa:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <MX_TIM4_Init+0xac>)
 8000eac:	f000 f9b2 	bl	8001214 <HAL_TIM_MspPostInit>

}
 8000eb0:	bf00      	nop
 8000eb2:	3728      	adds	r7, #40	; 0x28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200003b0 	.word	0x200003b0
 8000ebc:	40000800 	.word	0x40000800

08000ec0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_TIM6_Init+0x64>)
 8000ed2:	4a15      	ldr	r2, [pc, #84]	; (8000f28 <MX_TIM6_Init+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000;
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <MX_TIM6_Init+0x64>)
 8000ed8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000edc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_TIM6_Init+0x64>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_TIM6_Init+0x64>)
 8000ee6:	220a      	movs	r2, #10
 8000ee8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_TIM6_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <MX_TIM6_Init+0x64>)
 8000ef2:	f002 fa8d 	bl	8003410 <HAL_TIM_Base_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000efc:	f000 f8c4 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f00:	2300      	movs	r3, #0
 8000f02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_TIM6_Init+0x64>)
 8000f0e:	f003 f969 	bl	80041e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f18:	f000 f8b6 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200003fc 	.word	0x200003fc
 8000f28:	40001000 	.word	0x40001000

08000f2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f32:	4a15      	ldr	r2, [pc, #84]	; (8000f88 <MX_USART2_UART_Init+0x5c>)
 8000f34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f52:	220c      	movs	r2, #12
 8000f54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f70:	f003 f9de 	bl	8004330 <HAL_UART_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f7a:	f000 f885 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000448 	.word	0x20000448
 8000f88:	40004400 	.word	0x40004400

08000f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	4b37      	ldr	r3, [pc, #220]	; (8001080 <MX_GPIO_Init+0xf4>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	4a36      	ldr	r2, [pc, #216]	; (8001080 <MX_GPIO_Init+0xf4>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fae:	4b34      	ldr	r3, [pc, #208]	; (8001080 <MX_GPIO_Init+0xf4>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fba:	4b31      	ldr	r3, [pc, #196]	; (8001080 <MX_GPIO_Init+0xf4>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a30      	ldr	r2, [pc, #192]	; (8001080 <MX_GPIO_Init+0xf4>)
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b2e      	ldr	r3, [pc, #184]	; (8001080 <MX_GPIO_Init+0xf4>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <MX_GPIO_Init+0xf4>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	4a2a      	ldr	r2, [pc, #168]	; (8001080 <MX_GPIO_Init+0xf4>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fde:	4b28      	ldr	r3, [pc, #160]	; (8001080 <MX_GPIO_Init+0xf4>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b25      	ldr	r3, [pc, #148]	; (8001080 <MX_GPIO_Init+0xf4>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	4a24      	ldr	r2, [pc, #144]	; (8001080 <MX_GPIO_Init+0xf4>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff6:	4b22      	ldr	r3, [pc, #136]	; (8001080 <MX_GPIO_Init+0xf4>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	2160      	movs	r1, #96	; 0x60
 8001006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100a:	f000 fe97 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800100e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001014:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	4817      	ldr	r0, [pc, #92]	; (8001084 <MX_GPIO_Init+0xf8>)
 8001026:	f000 fcc7 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 800102a:	2360      	movs	r3, #96	; 0x60
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001044:	f000 fcb8 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8001048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800104e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001062:	f000 fca9 	bl	80019b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2028      	movs	r0, #40	; 0x28
 800106c:	f000 fbef 	bl	800184e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001070:	2028      	movs	r0, #40	; 0x28
 8001072:	f000 fc08 	bl	8001886 <HAL_NVIC_EnableIRQ>

}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	; 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000
 8001084:	48000800 	.word	0x48000800

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001090:	e7fe      	b.n	8001090 <Error_Handler+0x8>
	...

08001094 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HAL_MspInit+0x60>)
 800109c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109e:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <HAL_MspInit+0x60>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6613      	str	r3, [r2, #96]	; 0x60
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <HAL_MspInit+0x60>)
 80010a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_MspInit+0x60>)
 80010b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b6:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <HAL_MspInit+0x60>)
 80010b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010bc:	6593      	str	r3, [r2, #88]	; 0x58
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_MspInit+0x60>)
 80010c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	2005      	movs	r0, #5
 80010d0:	f000 fbbd 	bl	800184e <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80010d4:	2005      	movs	r0, #5
 80010d6:	f000 fbd6 	bl	8001886 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	2005      	movs	r0, #5
 80010e0:	f000 fbb5 	bl	800184e <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80010e4:	2005      	movs	r0, #5
 80010e6:	f000 fbce 	bl	8001886 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000

080010f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM3)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a28      	ldr	r2, [pc, #160]	; (80011b8 <HAL_TIM_PWM_MspInit+0xc0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d130      	bne.n	800117c <HAL_TIM_PWM_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800111a:	4b28      	ldr	r3, [pc, #160]	; (80011bc <HAL_TIM_PWM_MspInit+0xc4>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111e:	4a27      	ldr	r2, [pc, #156]	; (80011bc <HAL_TIM_PWM_MspInit+0xc4>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6593      	str	r3, [r2, #88]	; 0x58
 8001126:	4b25      	ldr	r3, [pc, #148]	; (80011bc <HAL_TIM_PWM_MspInit+0xc4>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	4b22      	ldr	r3, [pc, #136]	; (80011bc <HAL_TIM_PWM_MspInit+0xc4>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	4a21      	ldr	r2, [pc, #132]	; (80011bc <HAL_TIM_PWM_MspInit+0xc4>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113e:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <HAL_TIM_PWM_MspInit+0xc4>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800114a:	2310      	movs	r3, #16
 800114c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800115a:	2302      	movs	r3, #2
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	4816      	ldr	r0, [pc, #88]	; (80011c0 <HAL_TIM_PWM_MspInit+0xc8>)
 8001166:	f000 fc27 	bl	80019b8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	201d      	movs	r0, #29
 8001170:	f000 fb6d 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001174:	201d      	movs	r0, #29
 8001176:	f000 fb86 	bl	8001886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800117a:	e018      	b.n	80011ae <HAL_TIM_PWM_MspInit+0xb6>
  else if(htim_pwm->Instance==TIM4)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a10      	ldr	r2, [pc, #64]	; (80011c4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d113      	bne.n	80011ae <HAL_TIM_PWM_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <HAL_TIM_PWM_MspInit+0xc4>)
 8001188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118a:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <HAL_TIM_PWM_MspInit+0xc4>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6593      	str	r3, [r2, #88]	; 0x58
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_TIM_PWM_MspInit+0xc4>)
 8001194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	201e      	movs	r0, #30
 80011a4:	f000 fb53 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011a8:	201e      	movs	r0, #30
 80011aa:	f000 fb6c 	bl	8001886 <HAL_NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3728      	adds	r7, #40	; 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40000400 	.word	0x40000400
 80011bc:	40021000 	.word	0x40021000
 80011c0:	48000400 	.word	0x48000400
 80011c4:	40000800 	.word	0x40000800

080011c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0d      	ldr	r2, [pc, #52]	; (800120c <HAL_TIM_Base_MspInit+0x44>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d113      	bne.n	8001202 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_TIM_Base_MspInit+0x48>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011de:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <HAL_TIM_Base_MspInit+0x48>)
 80011e0:	f043 0310 	orr.w	r3, r3, #16
 80011e4:	6593      	str	r3, [r2, #88]	; 0x58
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_TIM_Base_MspInit+0x48>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	f003 0310 	and.w	r3, r3, #16
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	2036      	movs	r0, #54	; 0x36
 80011f8:	f000 fb29 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011fc:	2036      	movs	r0, #54	; 0x36
 80011fe:	f000 fb42 	bl	8001886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40001000 	.word	0x40001000
 8001210:	40021000 	.word	0x40021000

08001214 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a11      	ldr	r2, [pc, #68]	; (8001278 <HAL_TIM_MspPostInit+0x64>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d11b      	bne.n	800126e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_TIM_MspPostInit+0x68>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	4a10      	ldr	r2, [pc, #64]	; (800127c <HAL_TIM_MspPostInit+0x68>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_TIM_MspPostInit+0x68>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800124e:	2340      	movs	r3, #64	; 0x40
 8001250:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800125e:	2302      	movs	r3, #2
 8001260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <HAL_TIM_MspPostInit+0x6c>)
 800126a:	f000 fba5 	bl	80019b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800126e:	bf00      	nop
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40000800 	.word	0x40000800
 800127c:	40021000 	.word	0x40021000
 8001280:	48000400 	.word	0x48000400

08001284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b0ac      	sub	sp, #176	; 0xb0
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2288      	movs	r2, #136	; 0x88
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f004 fa37 	bl	8005718 <memset>
  if(huart->Instance==USART2)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a25      	ldr	r2, [pc, #148]	; (8001344 <HAL_UART_MspInit+0xc0>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d143      	bne.n	800133c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4618      	mov	r0, r3
 80012c2:	f001 fbe9 	bl	8002a98 <HAL_RCCEx_PeriphCLKConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012cc:	f7ff fedc 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_UART_MspInit+0xc4>)
 80012d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d4:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <HAL_UART_MspInit+0xc4>)
 80012d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012da:	6593      	str	r3, [r2, #88]	; 0x58
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <HAL_UART_MspInit+0xc4>)
 80012de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <HAL_UART_MspInit+0xc4>)
 80012ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ec:	4a16      	ldr	r2, [pc, #88]	; (8001348 <HAL_UART_MspInit+0xc4>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <HAL_UART_MspInit+0xc4>)
 80012f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001300:	230c      	movs	r3, #12
 8001302:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001318:	2307      	movs	r3, #7
 800131a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001322:	4619      	mov	r1, r3
 8001324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001328:	f000 fb46 	bl	80019b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2100      	movs	r1, #0
 8001330:	2026      	movs	r0, #38	; 0x26
 8001332:	f000 fa8c 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001336:	2026      	movs	r0, #38	; 0x26
 8001338:	f000 faa5 	bl	8001886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800133c:	bf00      	nop
 800133e:	37b0      	adds	r7, #176	; 0xb0
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40004400 	.word	0x40004400
 8001348:	40021000 	.word	0x40021000

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <NMI_Handler+0x4>

08001352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler+0x4>

08001358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <MemManage_Handler+0x4>

0800135e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <UsageFault_Handler+0x4>

0800136a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001398:	f000 f95e 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <TIM3_IRQHandler+0x10>)
 80013b6:	f002 f94a 	bl	800364e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000364 	.word	0x20000364

080013c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <TIM4_IRQHandler+0x10>)
 80013ca:	f002 f940 	bl	800364e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200003b0 	.word	0x200003b0

080013d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <USART2_IRQHandler+0x10>)
 80013de:	f003 f95b 	bl	8004698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000448 	.word	0x20000448

080013ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 80013f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013f4:	f000 fcd4 	bl	8001da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013fc:	f000 fcd0 	bl	8001da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <TIM6_DAC_IRQHandler+0x10>)
 800140a:	f002 f920 	bl	800364e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200003fc 	.word	0x200003fc

08001418 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	e00a      	b.n	8001440 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800142a:	f3af 8000 	nop.w
 800142e:	4601      	mov	r1, r0
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	60ba      	str	r2, [r7, #8]
 8001436:	b2ca      	uxtb	r2, r1
 8001438:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	3301      	adds	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	429a      	cmp	r2, r3
 8001446:	dbf0      	blt.n	800142a <_read+0x12>
	}

return len;
 8001448:	687b      	ldr	r3, [r7, #4]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
	return -1;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800147a:	605a      	str	r2, [r3, #4]
	return 0;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_isatty>:

int _isatty(int file)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
	return 1;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
	return 0;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c4:	4a14      	ldr	r2, [pc, #80]	; (8001518 <_sbrk+0x5c>)
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <_sbrk+0x60>)
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <_sbrk+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d102      	bne.n	80014de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <_sbrk+0x64>)
 80014da:	4a12      	ldr	r2, [pc, #72]	; (8001524 <_sbrk+0x68>)
 80014dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <_sbrk+0x64>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d207      	bcs.n	80014fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014ec:	f004 f8ea 	bl	80056c4 <__errno>
 80014f0:	4603      	mov	r3, r0
 80014f2:	220c      	movs	r2, #12
 80014f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	e009      	b.n	8001510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	4a05      	ldr	r2, [pc, #20]	; (8001520 <_sbrk+0x64>)
 800150c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20018000 	.word	0x20018000
 800151c:	00000400 	.word	0x00000400
 8001520:	200004cc 	.word	0x200004cc
 8001524:	200004e8 	.word	0x200004e8

08001528 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <SystemInit+0x20>)
 800152e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001532:	4a05      	ldr	r2, [pc, #20]	; (8001548 <SystemInit+0x20>)
 8001534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800154c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001584 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001550:	f7ff ffea 	bl	8001528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001554:	480c      	ldr	r0, [pc, #48]	; (8001588 <LoopForever+0x6>)
  ldr r1, =_edata
 8001556:	490d      	ldr	r1, [pc, #52]	; (800158c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001558:	4a0d      	ldr	r2, [pc, #52]	; (8001590 <LoopForever+0xe>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800155c:	e002      	b.n	8001564 <LoopCopyDataInit>

0800155e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001562:	3304      	adds	r3, #4

08001564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001568:	d3f9      	bcc.n	800155e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <LoopForever+0x12>)
  ldr r4, =_ebss
 800156c:	4c0a      	ldr	r4, [pc, #40]	; (8001598 <LoopForever+0x16>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001570:	e001      	b.n	8001576 <LoopFillZerobss>

08001572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001574:	3204      	adds	r2, #4

08001576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001578:	d3fb      	bcc.n	8001572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800157a:	f004 f8a9 	bl	80056d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800157e:	f7ff fb88 	bl	8000c92 <main>

08001582 <LoopForever>:

LoopForever:
    b LoopForever
 8001582:	e7fe      	b.n	8001582 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001584:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800158c:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8001590:	080072ac 	.word	0x080072ac
  ldr r2, =_sbss
 8001594:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8001598:	200004e4 	.word	0x200004e4

0800159c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800159c:	e7fe      	b.n	800159c <ADC1_2_IRQHandler>
	...

080015a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <HAL_Init+0x3c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <HAL_Init+0x3c>)
 80015b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b6:	2003      	movs	r0, #3
 80015b8:	f000 f93e 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015bc:	2000      	movs	r0, #0
 80015be:	f000 f80f 	bl	80015e0 <HAL_InitTick>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	71fb      	strb	r3, [r7, #7]
 80015cc:	e001      	b.n	80015d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015ce:	f7ff fd61 	bl	8001094 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015d2:	79fb      	ldrb	r3, [r7, #7]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40022000 	.word	0x40022000

080015e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <HAL_InitTick+0x6c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d023      	beq.n	800163c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_InitTick+0x70>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <HAL_InitTick+0x6c>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001602:	fbb3 f3f1 	udiv	r3, r3, r1
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f949 	bl	80018a2 <HAL_SYSTICK_Config>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10f      	bne.n	8001636 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d809      	bhi.n	8001630 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f000 f913 	bl	800184e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HAL_InitTick+0x74>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e007      	b.n	8001640 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	e004      	b.n	8001640 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	73fb      	strb	r3, [r7, #15]
 800163a:	e001      	b.n	8001640 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200000c8 	.word	0x200000c8
 8001650:	200000c0 	.word	0x200000c0
 8001654:	200000c4 	.word	0x200000c4

08001658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x20>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x24>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <HAL_IncTick+0x24>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	200000c8 	.word	0x200000c8
 800167c:	200004d0 	.word	0x200004d0

08001680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	200004d0 	.word	0x200004d0

08001698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b4:	4013      	ands	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ca:	4a04      	ldr	r2, [pc, #16]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	60d3      	str	r3, [r2, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <__NVIC_GetPriorityGrouping+0x18>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	f003 0307 	and.w	r3, r3, #7
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	2b00      	cmp	r3, #0
 800170c:	db0b      	blt.n	8001726 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	f003 021f 	and.w	r2, r3, #31
 8001714:	4907      	ldr	r1, [pc, #28]	; (8001734 <__NVIC_EnableIRQ+0x38>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	2001      	movs	r0, #1
 800171e:	fa00 f202 	lsl.w	r2, r0, r2
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100

08001738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	db0a      	blt.n	8001762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	490c      	ldr	r1, [pc, #48]	; (8001784 <__NVIC_SetPriority+0x4c>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	0112      	lsls	r2, r2, #4
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	440b      	add	r3, r1
 800175c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001760:	e00a      	b.n	8001778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4908      	ldr	r1, [pc, #32]	; (8001788 <__NVIC_SetPriority+0x50>)
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	3b04      	subs	r3, #4
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	440b      	add	r3, r1
 8001776:	761a      	strb	r2, [r3, #24]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f1c3 0307 	rsb	r3, r3, #7
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	bf28      	it	cs
 80017aa:	2304      	movcs	r3, #4
 80017ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d902      	bls.n	80017bc <NVIC_EncodePriority+0x30>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3b03      	subs	r3, #3
 80017ba:	e000      	b.n	80017be <NVIC_EncodePriority+0x32>
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	43d9      	mvns	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	4313      	orrs	r3, r2
         );
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3724      	adds	r7, #36	; 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001804:	d301      	bcc.n	800180a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001806:	2301      	movs	r3, #1
 8001808:	e00f      	b.n	800182a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <SysTick_Config+0x40>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001812:	210f      	movs	r1, #15
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f7ff ff8e 	bl	8001738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <SysTick_Config+0x40>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <SysTick_Config+0x40>)
 8001824:	2207      	movs	r2, #7
 8001826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	e000e010 	.word	0xe000e010

08001838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff29 	bl	8001698 <__NVIC_SetPriorityGrouping>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001860:	f7ff ff3e 	bl	80016e0 <__NVIC_GetPriorityGrouping>
 8001864:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	6978      	ldr	r0, [r7, #20]
 800186c:	f7ff ff8e 	bl	800178c <NVIC_EncodePriority>
 8001870:	4602      	mov	r2, r0
 8001872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff5d 	bl	8001738 <__NVIC_SetPriority>
}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff31 	bl	80016fc <__NVIC_EnableIRQ>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ffa2 	bl	80017f4 <SysTick_Config>
 80018b0:	4603      	mov	r3, r0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b085      	sub	sp, #20
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d008      	beq.n	80018e4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2204      	movs	r2, #4
 80018d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e022      	b.n	800192a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 020e 	bic.w	r2, r2, #14
 80018f2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0201 	bic.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001908:	f003 021c 	and.w	r2, r3, #28
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	2101      	movs	r1, #1
 8001912:	fa01 f202 	lsl.w	r2, r1, r2
 8001916:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001928:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d005      	beq.n	800195a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2204      	movs	r2, #4
 8001952:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
 8001958:	e029      	b.n	80019ae <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 020e 	bic.w	r2, r2, #14
 8001968:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0201 	bic.w	r2, r2, #1
 8001978:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	f003 021c 	and.w	r2, r3, #28
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	2101      	movs	r1, #1
 8001988:	fa01 f202 	lsl.w	r2, r1, r2
 800198c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	4798      	blx	r3
    }
  }
  return status;
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c6:	e17f      	b.n	8001cc8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2101      	movs	r1, #1
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	4013      	ands	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8171 	beq.w	8001cc2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d005      	beq.n	80019f8 <HAL_GPIO_Init+0x40>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d130      	bne.n	8001a5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a2e:	2201      	movs	r2, #1
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	091b      	lsrs	r3, r3, #4
 8001a44:	f003 0201 	and.w	r2, r3, #1
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d118      	bne.n	8001a98 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	08db      	lsrs	r3, r3, #3
 8001a82:	f003 0201 	and.w	r2, r3, #1
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	d017      	beq.n	8001ad4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	2203      	movs	r2, #3
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d123      	bne.n	8001b28 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	08da      	lsrs	r2, r3, #3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3208      	adds	r2, #8
 8001ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	220f      	movs	r2, #15
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	691a      	ldr	r2, [r3, #16]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	08da      	lsrs	r2, r3, #3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3208      	adds	r2, #8
 8001b22:	6939      	ldr	r1, [r7, #16]
 8001b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	2203      	movs	r2, #3
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0203 	and.w	r2, r3, #3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80ac 	beq.w	8001cc2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6a:	4b5f      	ldr	r3, [pc, #380]	; (8001ce8 <HAL_GPIO_Init+0x330>)
 8001b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b6e:	4a5e      	ldr	r2, [pc, #376]	; (8001ce8 <HAL_GPIO_Init+0x330>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6613      	str	r3, [r2, #96]	; 0x60
 8001b76:	4b5c      	ldr	r3, [pc, #368]	; (8001ce8 <HAL_GPIO_Init+0x330>)
 8001b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b82:	4a5a      	ldr	r2, [pc, #360]	; (8001cec <HAL_GPIO_Init+0x334>)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	220f      	movs	r2, #15
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bac:	d025      	beq.n	8001bfa <HAL_GPIO_Init+0x242>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4f      	ldr	r2, [pc, #316]	; (8001cf0 <HAL_GPIO_Init+0x338>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d01f      	beq.n	8001bf6 <HAL_GPIO_Init+0x23e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4e      	ldr	r2, [pc, #312]	; (8001cf4 <HAL_GPIO_Init+0x33c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d019      	beq.n	8001bf2 <HAL_GPIO_Init+0x23a>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4d      	ldr	r2, [pc, #308]	; (8001cf8 <HAL_GPIO_Init+0x340>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d013      	beq.n	8001bee <HAL_GPIO_Init+0x236>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4c      	ldr	r2, [pc, #304]	; (8001cfc <HAL_GPIO_Init+0x344>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00d      	beq.n	8001bea <HAL_GPIO_Init+0x232>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4b      	ldr	r2, [pc, #300]	; (8001d00 <HAL_GPIO_Init+0x348>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d007      	beq.n	8001be6 <HAL_GPIO_Init+0x22e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4a      	ldr	r2, [pc, #296]	; (8001d04 <HAL_GPIO_Init+0x34c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d101      	bne.n	8001be2 <HAL_GPIO_Init+0x22a>
 8001bde:	2306      	movs	r3, #6
 8001be0:	e00c      	b.n	8001bfc <HAL_GPIO_Init+0x244>
 8001be2:	2307      	movs	r3, #7
 8001be4:	e00a      	b.n	8001bfc <HAL_GPIO_Init+0x244>
 8001be6:	2305      	movs	r3, #5
 8001be8:	e008      	b.n	8001bfc <HAL_GPIO_Init+0x244>
 8001bea:	2304      	movs	r3, #4
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x244>
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e004      	b.n	8001bfc <HAL_GPIO_Init+0x244>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e002      	b.n	8001bfc <HAL_GPIO_Init+0x244>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x244>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	f002 0203 	and.w	r2, r2, #3
 8001c02:	0092      	lsls	r2, r2, #2
 8001c04:	4093      	lsls	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c0c:	4937      	ldr	r1, [pc, #220]	; (8001cec <HAL_GPIO_Init+0x334>)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c1a:	4b3b      	ldr	r3, [pc, #236]	; (8001d08 <HAL_GPIO_Init+0x350>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c3e:	4a32      	ldr	r2, [pc, #200]	; (8001d08 <HAL_GPIO_Init+0x350>)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c44:	4b30      	ldr	r3, [pc, #192]	; (8001d08 <HAL_GPIO_Init+0x350>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c68:	4a27      	ldr	r2, [pc, #156]	; (8001d08 <HAL_GPIO_Init+0x350>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c6e:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <HAL_GPIO_Init+0x350>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c92:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <HAL_GPIO_Init+0x350>)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c98:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <HAL_GPIO_Init+0x350>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cbc:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <HAL_GPIO_Init+0x350>)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f47f ae78 	bne.w	80019c8 <HAL_GPIO_Init+0x10>
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	371c      	adds	r7, #28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40010000 	.word	0x40010000
 8001cf0:	48000400 	.word	0x48000400
 8001cf4:	48000800 	.word	0x48000800
 8001cf8:	48000c00 	.word	0x48000c00
 8001cfc:	48001000 	.word	0x48001000
 8001d00:	48001400 	.word	0x48001400
 8001d04:	48001800 	.word	0x48001800
 8001d08:	40010400 	.word	0x40010400

08001d0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	887b      	ldrh	r3, [r7, #2]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
 8001d28:	e001      	b.n	8001d2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d4c:	787b      	ldrb	r3, [r7, #1]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d52:	887a      	ldrh	r2, [r7, #2]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d58:	e002      	b.n	8001d60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d7e:	887a      	ldrh	r2, [r7, #2]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4013      	ands	r3, r2
 8001d84:	041a      	lsls	r2, r3, #16
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	43d9      	mvns	r1, r3
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	400b      	ands	r3, r1
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	619a      	str	r2, [r3, #24]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	88fb      	ldrh	r3, [r7, #6]
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d006      	beq.n	8001dc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001db6:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dbc:	88fb      	ldrh	r3, [r7, #6]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fc4a 	bl	8000658 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40010400 	.word	0x40010400

08001dd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40007000 	.word	0x40007000

08001dec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dfa:	d130      	bne.n	8001e5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dfc:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e08:	d038      	beq.n	8001e7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e0a:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e12:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2232      	movs	r2, #50	; 0x32
 8001e20:	fb02 f303 	mul.w	r3, r2, r3
 8001e24:	4a1b      	ldr	r2, [pc, #108]	; (8001e94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	0c9b      	lsrs	r3, r3, #18
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e30:	e002      	b.n	8001e38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e38:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e44:	d102      	bne.n	8001e4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f2      	bne.n	8001e32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e58:	d110      	bne.n	8001e7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e00f      	b.n	8001e7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e6a:	d007      	beq.n	8001e7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e6c:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e74:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40007000 	.word	0x40007000
 8001e90:	200000c0 	.word	0x200000c0
 8001e94:	431bde83 	.word	0x431bde83

08001e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e3ca      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eaa:	4b97      	ldr	r3, [pc, #604]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eb4:	4b94      	ldr	r3, [pc, #592]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80e4 	beq.w	8002094 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x4a>
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	2b0c      	cmp	r3, #12
 8001ed6:	f040 808b 	bne.w	8001ff0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	f040 8087 	bne.w	8001ff0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ee2:	4b89      	ldr	r3, [pc, #548]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d005      	beq.n	8001efa <HAL_RCC_OscConfig+0x62>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e3a2      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1a      	ldr	r2, [r3, #32]
 8001efe:	4b82      	ldr	r3, [pc, #520]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d004      	beq.n	8001f14 <HAL_RCC_OscConfig+0x7c>
 8001f0a:	4b7f      	ldr	r3, [pc, #508]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f12:	e005      	b.n	8001f20 <HAL_RCC_OscConfig+0x88>
 8001f14:	4b7c      	ldr	r3, [pc, #496]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d223      	bcs.n	8001f6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 fd55 	bl	80029d8 <RCC_SetFlashLatencyFromMSIRange>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e383      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f38:	4b73      	ldr	r3, [pc, #460]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a72      	ldr	r2, [pc, #456]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001f3e:	f043 0308 	orr.w	r3, r3, #8
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b70      	ldr	r3, [pc, #448]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	496d      	ldr	r1, [pc, #436]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f56:	4b6c      	ldr	r3, [pc, #432]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	4968      	ldr	r1, [pc, #416]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
 8001f6a:	e025      	b.n	8001fb8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f6c:	4b66      	ldr	r3, [pc, #408]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a65      	ldr	r2, [pc, #404]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001f72:	f043 0308 	orr.w	r3, r3, #8
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b63      	ldr	r3, [pc, #396]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4960      	ldr	r1, [pc, #384]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f8a:	4b5f      	ldr	r3, [pc, #380]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	495b      	ldr	r1, [pc, #364]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d109      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 fd15 	bl	80029d8 <RCC_SetFlashLatencyFromMSIRange>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e343      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fb8:	f000 fc4a 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b52      	ldr	r3, [pc, #328]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	091b      	lsrs	r3, r3, #4
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	4950      	ldr	r1, [pc, #320]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd4:	4a4e      	ldr	r2, [pc, #312]	; (8002110 <HAL_RCC_OscConfig+0x278>)
 8001fd6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fd8:	4b4e      	ldr	r3, [pc, #312]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff faff 	bl	80015e0 <HAL_InitTick>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d052      	beq.n	8002092 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	e327      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d032      	beq.n	800205e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ff8:	4b43      	ldr	r3, [pc, #268]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a42      	ldr	r2, [pc, #264]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002004:	f7ff fb3c 	bl	8001680 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800200c:	f7ff fb38 	bl	8001680 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e310      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800201e:	4b3a      	ldr	r3, [pc, #232]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800202a:	4b37      	ldr	r3, [pc, #220]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a36      	ldr	r2, [pc, #216]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8002030:	f043 0308 	orr.w	r3, r3, #8
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	4b34      	ldr	r3, [pc, #208]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4931      	ldr	r1, [pc, #196]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8002044:	4313      	orrs	r3, r2
 8002046:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002048:	4b2f      	ldr	r3, [pc, #188]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	492c      	ldr	r1, [pc, #176]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
 800205c:	e01a      	b.n	8002094 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800205e:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a29      	ldr	r2, [pc, #164]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8002064:	f023 0301 	bic.w	r3, r3, #1
 8002068:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800206a:	f7ff fb09 	bl	8001680 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002072:	f7ff fb05 	bl	8001680 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e2dd      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002084:	4b20      	ldr	r3, [pc, #128]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f0      	bne.n	8002072 <HAL_RCC_OscConfig+0x1da>
 8002090:	e000      	b.n	8002094 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002092:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d074      	beq.n	800218a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d005      	beq.n	80020b2 <HAL_RCC_OscConfig+0x21a>
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	2b0c      	cmp	r3, #12
 80020aa:	d10e      	bne.n	80020ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d10b      	bne.n	80020ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d064      	beq.n	8002188 <HAL_RCC_OscConfig+0x2f0>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d160      	bne.n	8002188 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e2ba      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d2:	d106      	bne.n	80020e2 <HAL_RCC_OscConfig+0x24a>
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 80020da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	e026      	b.n	8002130 <HAL_RCC_OscConfig+0x298>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ea:	d115      	bne.n	8002118 <HAL_RCC_OscConfig+0x280>
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a05      	ldr	r2, [pc, #20]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 80020f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a02      	ldr	r2, [pc, #8]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 80020fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	e014      	b.n	8002130 <HAL_RCC_OscConfig+0x298>
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	080070a0 	.word	0x080070a0
 8002110:	200000c0 	.word	0x200000c0
 8002114:	200000c4 	.word	0x200000c4
 8002118:	4ba0      	ldr	r3, [pc, #640]	; (800239c <HAL_RCC_OscConfig+0x504>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a9f      	ldr	r2, [pc, #636]	; (800239c <HAL_RCC_OscConfig+0x504>)
 800211e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b9d      	ldr	r3, [pc, #628]	; (800239c <HAL_RCC_OscConfig+0x504>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a9c      	ldr	r2, [pc, #624]	; (800239c <HAL_RCC_OscConfig+0x504>)
 800212a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7ff faa2 	bl	8001680 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002140:	f7ff fa9e 	bl	8001680 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	; 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e276      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002152:	4b92      	ldr	r3, [pc, #584]	; (800239c <HAL_RCC_OscConfig+0x504>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x2a8>
 800215e:	e014      	b.n	800218a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7ff fa8e 	bl	8001680 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002168:	f7ff fa8a 	bl	8001680 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e262      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800217a:	4b88      	ldr	r3, [pc, #544]	; (800239c <HAL_RCC_OscConfig+0x504>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x2d0>
 8002186:	e000      	b.n	800218a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d060      	beq.n	8002258 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	2b04      	cmp	r3, #4
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_OscConfig+0x310>
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2b0c      	cmp	r3, #12
 80021a0:	d119      	bne.n	80021d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d116      	bne.n	80021d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021a8:	4b7c      	ldr	r3, [pc, #496]	; (800239c <HAL_RCC_OscConfig+0x504>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_OscConfig+0x328>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e23f      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c0:	4b76      	ldr	r3, [pc, #472]	; (800239c <HAL_RCC_OscConfig+0x504>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	061b      	lsls	r3, r3, #24
 80021ce:	4973      	ldr	r1, [pc, #460]	; (800239c <HAL_RCC_OscConfig+0x504>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021d4:	e040      	b.n	8002258 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d023      	beq.n	8002226 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021de:	4b6f      	ldr	r3, [pc, #444]	; (800239c <HAL_RCC_OscConfig+0x504>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a6e      	ldr	r2, [pc, #440]	; (800239c <HAL_RCC_OscConfig+0x504>)
 80021e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ea:	f7ff fa49 	bl	8001680 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f2:	f7ff fa45 	bl	8001680 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e21d      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002204:	4b65      	ldr	r3, [pc, #404]	; (800239c <HAL_RCC_OscConfig+0x504>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002210:	4b62      	ldr	r3, [pc, #392]	; (800239c <HAL_RCC_OscConfig+0x504>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	061b      	lsls	r3, r3, #24
 800221e:	495f      	ldr	r1, [pc, #380]	; (800239c <HAL_RCC_OscConfig+0x504>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
 8002224:	e018      	b.n	8002258 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002226:	4b5d      	ldr	r3, [pc, #372]	; (800239c <HAL_RCC_OscConfig+0x504>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a5c      	ldr	r2, [pc, #368]	; (800239c <HAL_RCC_OscConfig+0x504>)
 800222c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002232:	f7ff fa25 	bl	8001680 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223a:	f7ff fa21 	bl	8001680 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e1f9      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800224c:	4b53      	ldr	r3, [pc, #332]	; (800239c <HAL_RCC_OscConfig+0x504>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f0      	bne.n	800223a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d03c      	beq.n	80022de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d01c      	beq.n	80022a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800226c:	4b4b      	ldr	r3, [pc, #300]	; (800239c <HAL_RCC_OscConfig+0x504>)
 800226e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002272:	4a4a      	ldr	r2, [pc, #296]	; (800239c <HAL_RCC_OscConfig+0x504>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227c:	f7ff fa00 	bl	8001680 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002284:	f7ff f9fc 	bl	8001680 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e1d4      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002296:	4b41      	ldr	r3, [pc, #260]	; (800239c <HAL_RCC_OscConfig+0x504>)
 8002298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0ef      	beq.n	8002284 <HAL_RCC_OscConfig+0x3ec>
 80022a4:	e01b      	b.n	80022de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a6:	4b3d      	ldr	r3, [pc, #244]	; (800239c <HAL_RCC_OscConfig+0x504>)
 80022a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ac:	4a3b      	ldr	r2, [pc, #236]	; (800239c <HAL_RCC_OscConfig+0x504>)
 80022ae:	f023 0301 	bic.w	r3, r3, #1
 80022b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b6:	f7ff f9e3 	bl	8001680 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022be:	f7ff f9df 	bl	8001680 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e1b7      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022d0:	4b32      	ldr	r3, [pc, #200]	; (800239c <HAL_RCC_OscConfig+0x504>)
 80022d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1ef      	bne.n	80022be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80a6 	beq.w	8002438 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ec:	2300      	movs	r3, #0
 80022ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022f0:	4b2a      	ldr	r3, [pc, #168]	; (800239c <HAL_RCC_OscConfig+0x504>)
 80022f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10d      	bne.n	8002318 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fc:	4b27      	ldr	r3, [pc, #156]	; (800239c <HAL_RCC_OscConfig+0x504>)
 80022fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002300:	4a26      	ldr	r2, [pc, #152]	; (800239c <HAL_RCC_OscConfig+0x504>)
 8002302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002306:	6593      	str	r3, [r2, #88]	; 0x58
 8002308:	4b24      	ldr	r3, [pc, #144]	; (800239c <HAL_RCC_OscConfig+0x504>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002314:	2301      	movs	r3, #1
 8002316:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002318:	4b21      	ldr	r3, [pc, #132]	; (80023a0 <HAL_RCC_OscConfig+0x508>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d118      	bne.n	8002356 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002324:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <HAL_RCC_OscConfig+0x508>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a1d      	ldr	r2, [pc, #116]	; (80023a0 <HAL_RCC_OscConfig+0x508>)
 800232a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002330:	f7ff f9a6 	bl	8001680 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002338:	f7ff f9a2 	bl	8001680 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e17a      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_RCC_OscConfig+0x508>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d108      	bne.n	8002370 <HAL_RCC_OscConfig+0x4d8>
 800235e:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_RCC_OscConfig+0x504>)
 8002360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002364:	4a0d      	ldr	r2, [pc, #52]	; (800239c <HAL_RCC_OscConfig+0x504>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800236e:	e029      	b.n	80023c4 <HAL_RCC_OscConfig+0x52c>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b05      	cmp	r3, #5
 8002376:	d115      	bne.n	80023a4 <HAL_RCC_OscConfig+0x50c>
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <HAL_RCC_OscConfig+0x504>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	4a07      	ldr	r2, [pc, #28]	; (800239c <HAL_RCC_OscConfig+0x504>)
 8002380:	f043 0304 	orr.w	r3, r3, #4
 8002384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <HAL_RCC_OscConfig+0x504>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	4a03      	ldr	r2, [pc, #12]	; (800239c <HAL_RCC_OscConfig+0x504>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002398:	e014      	b.n	80023c4 <HAL_RCC_OscConfig+0x52c>
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	40007000 	.word	0x40007000
 80023a4:	4b9c      	ldr	r3, [pc, #624]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023aa:	4a9b      	ldr	r2, [pc, #620]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023b4:	4b98      	ldr	r3, [pc, #608]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ba:	4a97      	ldr	r2, [pc, #604]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 80023bc:	f023 0304 	bic.w	r3, r3, #4
 80023c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d016      	beq.n	80023fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023cc:	f7ff f958 	bl	8001680 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023d2:	e00a      	b.n	80023ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d4:	f7ff f954 	bl	8001680 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e12a      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ea:	4b8b      	ldr	r3, [pc, #556]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 80023ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0ed      	beq.n	80023d4 <HAL_RCC_OscConfig+0x53c>
 80023f8:	e015      	b.n	8002426 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fa:	f7ff f941 	bl	8001680 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002400:	e00a      	b.n	8002418 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002402:	f7ff f93d 	bl	8001680 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002410:	4293      	cmp	r3, r2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e113      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002418:	4b7f      	ldr	r3, [pc, #508]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1ed      	bne.n	8002402 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002426:	7ffb      	ldrb	r3, [r7, #31]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d105      	bne.n	8002438 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242c:	4b7a      	ldr	r3, [pc, #488]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	4a79      	ldr	r2, [pc, #484]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 8002432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002436:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80fe 	beq.w	800263e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	2b02      	cmp	r3, #2
 8002448:	f040 80d0 	bne.w	80025ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800244c:	4b72      	ldr	r3, [pc, #456]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f003 0203 	and.w	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	429a      	cmp	r2, r3
 800245e:	d130      	bne.n	80024c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	3b01      	subs	r3, #1
 800246c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800246e:	429a      	cmp	r2, r3
 8002470:	d127      	bne.n	80024c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d11f      	bne.n	80024c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800248c:	2a07      	cmp	r2, #7
 800248e:	bf14      	ite	ne
 8002490:	2201      	movne	r2, #1
 8002492:	2200      	moveq	r2, #0
 8002494:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002496:	4293      	cmp	r3, r2
 8002498:	d113      	bne.n	80024c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a4:	085b      	lsrs	r3, r3, #1
 80024a6:	3b01      	subs	r3, #1
 80024a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d109      	bne.n	80024c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	085b      	lsrs	r3, r3, #1
 80024ba:	3b01      	subs	r3, #1
 80024bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d06e      	beq.n	80025a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	2b0c      	cmp	r3, #12
 80024c6:	d069      	beq.n	800259c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024c8:	4b53      	ldr	r3, [pc, #332]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024d4:	4b50      	ldr	r3, [pc, #320]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0ad      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024e4:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a4b      	ldr	r2, [pc, #300]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 80024ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024f0:	f7ff f8c6 	bl	8001680 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f8:	f7ff f8c2 	bl	8001680 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e09a      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800250a:	4b43      	ldr	r3, [pc, #268]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002516:	4b40      	ldr	r3, [pc, #256]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	4b40      	ldr	r3, [pc, #256]	; (800261c <HAL_RCC_OscConfig+0x784>)
 800251c:	4013      	ands	r3, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002526:	3a01      	subs	r2, #1
 8002528:	0112      	lsls	r2, r2, #4
 800252a:	4311      	orrs	r1, r2
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002530:	0212      	lsls	r2, r2, #8
 8002532:	4311      	orrs	r1, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002538:	0852      	lsrs	r2, r2, #1
 800253a:	3a01      	subs	r2, #1
 800253c:	0552      	lsls	r2, r2, #21
 800253e:	4311      	orrs	r1, r2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002544:	0852      	lsrs	r2, r2, #1
 8002546:	3a01      	subs	r2, #1
 8002548:	0652      	lsls	r2, r2, #25
 800254a:	4311      	orrs	r1, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002550:	0912      	lsrs	r2, r2, #4
 8002552:	0452      	lsls	r2, r2, #17
 8002554:	430a      	orrs	r2, r1
 8002556:	4930      	ldr	r1, [pc, #192]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 8002558:	4313      	orrs	r3, r2
 800255a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800255c:	4b2e      	ldr	r3, [pc, #184]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a2d      	ldr	r2, [pc, #180]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 8002562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002566:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002568:	4b2b      	ldr	r3, [pc, #172]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4a2a      	ldr	r2, [pc, #168]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 800256e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002572:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002574:	f7ff f884 	bl	8001680 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257c:	f7ff f880 	bl	8001680 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e058      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800258e:	4b22      	ldr	r3, [pc, #136]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800259a:	e050      	b.n	800263e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e04f      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d148      	bne.n	800263e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025ac:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a19      	ldr	r2, [pc, #100]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 80025b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025b8:	4b17      	ldr	r3, [pc, #92]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4a16      	ldr	r2, [pc, #88]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 80025be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025c4:	f7ff f85c 	bl	8001680 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025cc:	f7ff f858 	bl	8001680 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e030      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0x734>
 80025ea:	e028      	b.n	800263e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	2b0c      	cmp	r3, #12
 80025f0:	d023      	beq.n	800263a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a08      	ldr	r2, [pc, #32]	; (8002618 <HAL_RCC_OscConfig+0x780>)
 80025f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fe:	f7ff f83f 	bl	8001680 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002604:	e00c      	b.n	8002620 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002606:	f7ff f83b 	bl	8001680 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d905      	bls.n	8002620 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e013      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
 8002618:	40021000 	.word	0x40021000
 800261c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RCC_OscConfig+0x7b0>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1ec      	bne.n	8002606 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_RCC_OscConfig+0x7b0>)
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	4905      	ldr	r1, [pc, #20]	; (8002648 <HAL_RCC_OscConfig+0x7b0>)
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_RCC_OscConfig+0x7b4>)
 8002634:	4013      	ands	r3, r2
 8002636:	60cb      	str	r3, [r1, #12]
 8002638:	e001      	b.n	800263e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3720      	adds	r7, #32
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	feeefffc 	.word	0xfeeefffc

08002650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0e7      	b.n	8002834 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002664:	4b75      	ldr	r3, [pc, #468]	; (800283c <HAL_RCC_ClockConfig+0x1ec>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d910      	bls.n	8002694 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b72      	ldr	r3, [pc, #456]	; (800283c <HAL_RCC_ClockConfig+0x1ec>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 0207 	bic.w	r2, r3, #7
 800267a:	4970      	ldr	r1, [pc, #448]	; (800283c <HAL_RCC_ClockConfig+0x1ec>)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b6e      	ldr	r3, [pc, #440]	; (800283c <HAL_RCC_ClockConfig+0x1ec>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0cf      	b.n	8002834 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d010      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	4b66      	ldr	r3, [pc, #408]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d908      	bls.n	80026c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b0:	4b63      	ldr	r3, [pc, #396]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	4960      	ldr	r1, [pc, #384]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d04c      	beq.n	8002768 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d6:	4b5a      	ldr	r3, [pc, #360]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d121      	bne.n	8002726 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e0a6      	b.n	8002834 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ee:	4b54      	ldr	r3, [pc, #336]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d115      	bne.n	8002726 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e09a      	b.n	8002834 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d107      	bne.n	8002716 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002706:	4b4e      	ldr	r3, [pc, #312]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e08e      	b.n	8002834 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002716:	4b4a      	ldr	r3, [pc, #296]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e086      	b.n	8002834 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002726:	4b46      	ldr	r3, [pc, #280]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f023 0203 	bic.w	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4943      	ldr	r1, [pc, #268]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 8002734:	4313      	orrs	r3, r2
 8002736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002738:	f7fe ffa2 	bl	8001680 <HAL_GetTick>
 800273c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	e00a      	b.n	8002756 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002740:	f7fe ff9e 	bl	8001680 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	; 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e06e      	b.n	8002834 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002756:	4b3a      	ldr	r3, [pc, #232]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 020c 	and.w	r2, r3, #12
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	429a      	cmp	r2, r3
 8002766:	d1eb      	bne.n	8002740 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d010      	beq.n	8002796 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	4b31      	ldr	r3, [pc, #196]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002780:	429a      	cmp	r2, r3
 8002782:	d208      	bcs.n	8002796 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002784:	4b2e      	ldr	r3, [pc, #184]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	492b      	ldr	r1, [pc, #172]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002796:	4b29      	ldr	r3, [pc, #164]	; (800283c <HAL_RCC_ClockConfig+0x1ec>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d210      	bcs.n	80027c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a4:	4b25      	ldr	r3, [pc, #148]	; (800283c <HAL_RCC_ClockConfig+0x1ec>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f023 0207 	bic.w	r2, r3, #7
 80027ac:	4923      	ldr	r1, [pc, #140]	; (800283c <HAL_RCC_ClockConfig+0x1ec>)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b4:	4b21      	ldr	r3, [pc, #132]	; (800283c <HAL_RCC_ClockConfig+0x1ec>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d001      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e036      	b.n	8002834 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d008      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d2:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	4918      	ldr	r1, [pc, #96]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d009      	beq.n	8002804 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027f0:	4b13      	ldr	r3, [pc, #76]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4910      	ldr	r1, [pc, #64]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 8002800:	4313      	orrs	r3, r2
 8002802:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002804:	f000 f824 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8002808:	4602      	mov	r2, r0
 800280a:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	490b      	ldr	r1, [pc, #44]	; (8002844 <HAL_RCC_ClockConfig+0x1f4>)
 8002816:	5ccb      	ldrb	r3, [r1, r3]
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	fa22 f303 	lsr.w	r3, r2, r3
 8002820:	4a09      	ldr	r2, [pc, #36]	; (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 8002822:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_ClockConfig+0x1fc>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7fe fed9 	bl	80015e0 <HAL_InitTick>
 800282e:	4603      	mov	r3, r0
 8002830:	72fb      	strb	r3, [r7, #11]

  return status;
 8002832:	7afb      	ldrb	r3, [r7, #11]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40022000 	.word	0x40022000
 8002840:	40021000 	.word	0x40021000
 8002844:	080070a0 	.word	0x080070a0
 8002848:	200000c0 	.word	0x200000c0
 800284c:	200000c4 	.word	0x200000c4

08002850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800285e:	4b3e      	ldr	r3, [pc, #248]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002868:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x34>
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	2b0c      	cmp	r3, #12
 800287c:	d121      	bne.n	80028c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d11e      	bne.n	80028c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002884:	4b34      	ldr	r3, [pc, #208]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d107      	bne.n	80028a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002890:	4b31      	ldr	r3, [pc, #196]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 8002892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002896:	0a1b      	lsrs	r3, r3, #8
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	e005      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028a0:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028ac:	4a2b      	ldr	r2, [pc, #172]	; (800295c <HAL_RCC_GetSysClockFreq+0x10c>)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10d      	bne.n	80028d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d102      	bne.n	80028ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028c8:	4b25      	ldr	r3, [pc, #148]	; (8002960 <HAL_RCC_GetSysClockFreq+0x110>)
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	e004      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028d4:	4b23      	ldr	r3, [pc, #140]	; (8002964 <HAL_RCC_GetSysClockFreq+0x114>)
 80028d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	2b0c      	cmp	r3, #12
 80028dc:	d134      	bne.n	8002948 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028de:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d003      	beq.n	80028f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d003      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0xac>
 80028f4:	e005      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028f6:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <HAL_RCC_GetSysClockFreq+0x110>)
 80028f8:	617b      	str	r3, [r7, #20]
      break;
 80028fa:	e005      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <HAL_RCC_GetSysClockFreq+0x114>)
 80028fe:	617b      	str	r3, [r7, #20]
      break;
 8002900:	e002      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	617b      	str	r3, [r7, #20]
      break;
 8002906:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	3301      	adds	r3, #1
 8002914:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	0a1b      	lsrs	r3, r3, #8
 800291c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	fb03 f202 	mul.w	r2, r3, r2
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	0e5b      	lsrs	r3, r3, #25
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	3301      	adds	r3, #1
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	fbb2 f3f3 	udiv	r3, r2, r3
 8002946:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002948:	69bb      	ldr	r3, [r7, #24]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3724      	adds	r7, #36	; 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	080070b8 	.word	0x080070b8
 8002960:	00f42400 	.word	0x00f42400
 8002964:	007a1200 	.word	0x007a1200

08002968 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <HAL_RCC_GetHCLKFreq+0x14>)
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	200000c0 	.word	0x200000c0

08002980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002984:	f7ff fff0 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 8002988:	4602      	mov	r2, r0
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	4904      	ldr	r1, [pc, #16]	; (80029a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002996:	5ccb      	ldrb	r3, [r1, r3]
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40021000 	.word	0x40021000
 80029a8:	080070b0 	.word	0x080070b0

080029ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029b0:	f7ff ffda 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	0adb      	lsrs	r3, r3, #11
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	4904      	ldr	r1, [pc, #16]	; (80029d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029c2:	5ccb      	ldrb	r3, [r1, r3]
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40021000 	.word	0x40021000
 80029d4:	080070b0 	.word	0x080070b0

080029d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029e0:	2300      	movs	r3, #0
 80029e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029e4:	4b2a      	ldr	r3, [pc, #168]	; (8002a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029f0:	f7ff f9ee 	bl	8001dd0 <HAL_PWREx_GetVoltageRange>
 80029f4:	6178      	str	r0, [r7, #20]
 80029f6:	e014      	b.n	8002a22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029f8:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fc:	4a24      	ldr	r2, [pc, #144]	; (8002a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a02:	6593      	str	r3, [r2, #88]	; 0x58
 8002a04:	4b22      	ldr	r3, [pc, #136]	; (8002a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a10:	f7ff f9de 	bl	8001dd0 <HAL_PWREx_GetVoltageRange>
 8002a14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a16:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	4a1d      	ldr	r2, [pc, #116]	; (8002a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a28:	d10b      	bne.n	8002a42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b80      	cmp	r3, #128	; 0x80
 8002a2e:	d919      	bls.n	8002a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2ba0      	cmp	r3, #160	; 0xa0
 8002a34:	d902      	bls.n	8002a3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a36:	2302      	movs	r3, #2
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	e013      	b.n	8002a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	e010      	b.n	8002a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b80      	cmp	r3, #128	; 0x80
 8002a46:	d902      	bls.n	8002a4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a48:	2303      	movs	r3, #3
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	e00a      	b.n	8002a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b80      	cmp	r3, #128	; 0x80
 8002a52:	d102      	bne.n	8002a5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a54:	2302      	movs	r3, #2
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	e004      	b.n	8002a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b70      	cmp	r3, #112	; 0x70
 8002a5e:	d101      	bne.n	8002a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a60:	2301      	movs	r3, #1
 8002a62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f023 0207 	bic.w	r2, r3, #7
 8002a6c:	4909      	ldr	r1, [pc, #36]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a74:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d001      	beq.n	8002a86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40022000 	.word	0x40022000

08002a98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d041      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ab8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002abc:	d02a      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002abe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ac2:	d824      	bhi.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ac4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ac8:	d008      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002aca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ace:	d81e      	bhi.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ad4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad8:	d010      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ada:	e018      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002adc:	4b86      	ldr	r3, [pc, #536]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4a85      	ldr	r2, [pc, #532]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ae8:	e015      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3304      	adds	r3, #4
 8002aee:	2100      	movs	r1, #0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fabb 	bl	800306c <RCCEx_PLLSAI1_Config>
 8002af6:	4603      	mov	r3, r0
 8002af8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002afa:	e00c      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3320      	adds	r3, #32
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fba6 	bl	8003254 <RCCEx_PLLSAI2_Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b0c:	e003      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	74fb      	strb	r3, [r7, #19]
      break;
 8002b12:	e000      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b16:	7cfb      	ldrb	r3, [r7, #19]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b1c:	4b76      	ldr	r3, [pc, #472]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b2a:	4973      	ldr	r1, [pc, #460]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b32:	e001      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b34:	7cfb      	ldrb	r3, [r7, #19]
 8002b36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d041      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b4c:	d02a      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b52:	d824      	bhi.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b58:	d008      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b5e:	d81e      	bhi.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b68:	d010      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b6a:	e018      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b6c:	4b62      	ldr	r3, [pc, #392]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4a61      	ldr	r2, [pc, #388]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b78:	e015      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 fa73 	bl	800306c <RCCEx_PLLSAI1_Config>
 8002b86:	4603      	mov	r3, r0
 8002b88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b8a:	e00c      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3320      	adds	r3, #32
 8002b90:	2100      	movs	r1, #0
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 fb5e 	bl	8003254 <RCCEx_PLLSAI2_Config>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b9c:	e003      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ba6:	7cfb      	ldrb	r3, [r7, #19]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10b      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bac:	4b52      	ldr	r3, [pc, #328]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bba:	494f      	ldr	r1, [pc, #316]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bc2:	e001      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc4:	7cfb      	ldrb	r3, [r7, #19]
 8002bc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80a0 	beq.w	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bda:	4b47      	ldr	r3, [pc, #284]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002bea:	2300      	movs	r3, #0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00d      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf0:	4b41      	ldr	r3, [pc, #260]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf4:	4a40      	ldr	r2, [pc, #256]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8002bfc:	4b3e      	ldr	r3, [pc, #248]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c0c:	4b3b      	ldr	r3, [pc, #236]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a3a      	ldr	r2, [pc, #232]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c18:	f7fe fd32 	bl	8001680 <HAL_GetTick>
 8002c1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c1e:	e009      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c20:	f7fe fd2e 	bl	8001680 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d902      	bls.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	74fb      	strb	r3, [r7, #19]
        break;
 8002c32:	e005      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c34:	4b31      	ldr	r3, [pc, #196]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0ef      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c40:	7cfb      	ldrb	r3, [r7, #19]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d15c      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c46:	4b2c      	ldr	r3, [pc, #176]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d01f      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d019      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c64:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c70:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	4a20      	ldr	r2, [pc, #128]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c80:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c86:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c90:	4a19      	ldr	r2, [pc, #100]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d016      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca2:	f7fe fced 	bl	8001680 <HAL_GetTick>
 8002ca6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca8:	e00b      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002caa:	f7fe fce9 	bl	8001680 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d902      	bls.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	74fb      	strb	r3, [r7, #19]
            break;
 8002cc0:	e006      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0ec      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002cd0:	7cfb      	ldrb	r3, [r7, #19]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cd6:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce6:	4904      	ldr	r1, [pc, #16]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cee:	e009      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	74bb      	strb	r3, [r7, #18]
 8002cf4:	e006      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d00:	7cfb      	ldrb	r3, [r7, #19]
 8002d02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d04:	7c7b      	ldrb	r3, [r7, #17]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d105      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0a:	4b9e      	ldr	r3, [pc, #632]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0e:	4a9d      	ldr	r2, [pc, #628]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d22:	4b98      	ldr	r3, [pc, #608]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d28:	f023 0203 	bic.w	r2, r3, #3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d30:	4994      	ldr	r1, [pc, #592]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d44:	4b8f      	ldr	r3, [pc, #572]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4a:	f023 020c 	bic.w	r2, r3, #12
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	498c      	ldr	r1, [pc, #560]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d66:	4b87      	ldr	r3, [pc, #540]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	4983      	ldr	r1, [pc, #524]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d88:	4b7e      	ldr	r3, [pc, #504]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	497b      	ldr	r1, [pc, #492]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002daa:	4b76      	ldr	r3, [pc, #472]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db8:	4972      	ldr	r1, [pc, #456]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dcc:	4b6d      	ldr	r3, [pc, #436]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dda:	496a      	ldr	r1, [pc, #424]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dee:	4b65      	ldr	r3, [pc, #404]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfc:	4961      	ldr	r1, [pc, #388]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e10:	4b5c      	ldr	r3, [pc, #368]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e1e:	4959      	ldr	r1, [pc, #356]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e32:	4b54      	ldr	r3, [pc, #336]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e40:	4950      	ldr	r1, [pc, #320]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e54:	4b4b      	ldr	r3, [pc, #300]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e62:	4948      	ldr	r1, [pc, #288]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e76:	4b43      	ldr	r3, [pc, #268]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	493f      	ldr	r1, [pc, #252]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d028      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e98:	4b3a      	ldr	r3, [pc, #232]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea6:	4937      	ldr	r1, [pc, #220]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eb6:	d106      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eb8:	4b32      	ldr	r3, [pc, #200]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	4a31      	ldr	r2, [pc, #196]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ec2:	60d3      	str	r3, [r2, #12]
 8002ec4:	e011      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ece:	d10c      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 f8c8 	bl	800306c <RCCEx_PLLSAI1_Config>
 8002edc:	4603      	mov	r3, r0
 8002ede:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ee0:	7cfb      	ldrb	r3, [r7, #19]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ee6:	7cfb      	ldrb	r3, [r7, #19]
 8002ee8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d028      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ef6:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	491f      	ldr	r1, [pc, #124]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f14:	d106      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f16:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	4a1a      	ldr	r2, [pc, #104]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f20:	60d3      	str	r3, [r2, #12]
 8002f22:	e011      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3304      	adds	r3, #4
 8002f32:	2101      	movs	r1, #1
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 f899 	bl	800306c <RCCEx_PLLSAI1_Config>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f3e:	7cfb      	ldrb	r3, [r7, #19]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d02b      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f62:	4908      	ldr	r1, [pc, #32]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f72:	d109      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f74:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4a02      	ldr	r2, [pc, #8]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f7e:	60d3      	str	r3, [r2, #12]
 8002f80:	e014      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f90:	d10c      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3304      	adds	r3, #4
 8002f96:	2101      	movs	r1, #1
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 f867 	bl	800306c <RCCEx_PLLSAI1_Config>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fa2:	7cfb      	ldrb	r3, [r7, #19]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002fa8:	7cfb      	ldrb	r3, [r7, #19]
 8002faa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d02f      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fc6:	4928      	ldr	r1, [pc, #160]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fd6:	d10d      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3304      	adds	r3, #4
 8002fdc:	2102      	movs	r1, #2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 f844 	bl	800306c <RCCEx_PLLSAI1_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fe8:	7cfb      	ldrb	r3, [r7, #19]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d014      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002fee:	7cfb      	ldrb	r3, [r7, #19]
 8002ff0:	74bb      	strb	r3, [r7, #18]
 8002ff2:	e011      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ffc:	d10c      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3320      	adds	r3, #32
 8003002:	2102      	movs	r1, #2
 8003004:	4618      	mov	r0, r3
 8003006:	f000 f925 	bl	8003254 <RCCEx_PLLSAI2_Config>
 800300a:	4603      	mov	r3, r0
 800300c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800300e:	7cfb      	ldrb	r3, [r7, #19]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003014:	7cfb      	ldrb	r3, [r7, #19]
 8003016:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003024:	4b10      	ldr	r3, [pc, #64]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003032:	490d      	ldr	r1, [pc, #52]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00b      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003056:	4904      	ldr	r1, [pc, #16]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800305e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000

0800306c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800307a:	4b75      	ldr	r3, [pc, #468]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d018      	beq.n	80030b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003086:	4b72      	ldr	r3, [pc, #456]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f003 0203 	and.w	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d10d      	bne.n	80030b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
       ||
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800309e:	4b6c      	ldr	r3, [pc, #432]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
       ||
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d047      	beq.n	8003142 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
 80030b6:	e044      	b.n	8003142 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d018      	beq.n	80030f2 <RCCEx_PLLSAI1_Config+0x86>
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d825      	bhi.n	8003110 <RCCEx_PLLSAI1_Config+0xa4>
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d002      	beq.n	80030ce <RCCEx_PLLSAI1_Config+0x62>
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d009      	beq.n	80030e0 <RCCEx_PLLSAI1_Config+0x74>
 80030cc:	e020      	b.n	8003110 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030ce:	4b60      	ldr	r3, [pc, #384]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d11d      	bne.n	8003116 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030de:	e01a      	b.n	8003116 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030e0:	4b5b      	ldr	r3, [pc, #364]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d116      	bne.n	800311a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f0:	e013      	b.n	800311a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030f2:	4b57      	ldr	r3, [pc, #348]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10f      	bne.n	800311e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030fe:	4b54      	ldr	r3, [pc, #336]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800310e:	e006      	b.n	800311e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
      break;
 8003114:	e004      	b.n	8003120 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003116:	bf00      	nop
 8003118:	e002      	b.n	8003120 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800311a:	bf00      	nop
 800311c:	e000      	b.n	8003120 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800311e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10d      	bne.n	8003142 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003126:	4b4a      	ldr	r3, [pc, #296]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6819      	ldr	r1, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	3b01      	subs	r3, #1
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	430b      	orrs	r3, r1
 800313c:	4944      	ldr	r1, [pc, #272]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 800313e:	4313      	orrs	r3, r2
 8003140:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d17d      	bne.n	8003244 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003148:	4b41      	ldr	r3, [pc, #260]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a40      	ldr	r2, [pc, #256]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003152:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003154:	f7fe fa94 	bl	8001680 <HAL_GetTick>
 8003158:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800315a:	e009      	b.n	8003170 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800315c:	f7fe fa90 	bl	8001680 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d902      	bls.n	8003170 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	73fb      	strb	r3, [r7, #15]
        break;
 800316e:	e005      	b.n	800317c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003170:	4b37      	ldr	r3, [pc, #220]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1ef      	bne.n	800315c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d160      	bne.n	8003244 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d111      	bne.n	80031ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003188:	4b31      	ldr	r3, [pc, #196]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6892      	ldr	r2, [r2, #8]
 8003198:	0211      	lsls	r1, r2, #8
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68d2      	ldr	r2, [r2, #12]
 800319e:	0912      	lsrs	r2, r2, #4
 80031a0:	0452      	lsls	r2, r2, #17
 80031a2:	430a      	orrs	r2, r1
 80031a4:	492a      	ldr	r1, [pc, #168]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	610b      	str	r3, [r1, #16]
 80031aa:	e027      	b.n	80031fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d112      	bne.n	80031d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031b2:	4b27      	ldr	r3, [pc, #156]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80031ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6892      	ldr	r2, [r2, #8]
 80031c2:	0211      	lsls	r1, r2, #8
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6912      	ldr	r2, [r2, #16]
 80031c8:	0852      	lsrs	r2, r2, #1
 80031ca:	3a01      	subs	r2, #1
 80031cc:	0552      	lsls	r2, r2, #21
 80031ce:	430a      	orrs	r2, r1
 80031d0:	491f      	ldr	r1, [pc, #124]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	610b      	str	r3, [r1, #16]
 80031d6:	e011      	b.n	80031fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6892      	ldr	r2, [r2, #8]
 80031e8:	0211      	lsls	r1, r2, #8
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6952      	ldr	r2, [r2, #20]
 80031ee:	0852      	lsrs	r2, r2, #1
 80031f0:	3a01      	subs	r2, #1
 80031f2:	0652      	lsls	r2, r2, #25
 80031f4:	430a      	orrs	r2, r1
 80031f6:	4916      	ldr	r1, [pc, #88]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031fc:	4b14      	ldr	r3, [pc, #80]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a13      	ldr	r2, [pc, #76]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003202:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003206:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7fe fa3a 	bl	8001680 <HAL_GetTick>
 800320c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800320e:	e009      	b.n	8003224 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003210:	f7fe fa36 	bl	8001680 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d902      	bls.n	8003224 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	73fb      	strb	r3, [r7, #15]
          break;
 8003222:	e005      	b.n	8003230 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003224:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0ef      	beq.n	8003210 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d106      	bne.n	8003244 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	4904      	ldr	r1, [pc, #16]	; (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003240:	4313      	orrs	r3, r2
 8003242:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000

08003254 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003262:	4b6a      	ldr	r3, [pc, #424]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d018      	beq.n	80032a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800326e:	4b67      	ldr	r3, [pc, #412]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f003 0203 	and.w	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d10d      	bne.n	800329a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
       ||
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003286:	4b61      	ldr	r3, [pc, #388]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	091b      	lsrs	r3, r3, #4
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
       ||
 8003296:	429a      	cmp	r2, r3
 8003298:	d047      	beq.n	800332a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
 800329e:	e044      	b.n	800332a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d018      	beq.n	80032da <RCCEx_PLLSAI2_Config+0x86>
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d825      	bhi.n	80032f8 <RCCEx_PLLSAI2_Config+0xa4>
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d002      	beq.n	80032b6 <RCCEx_PLLSAI2_Config+0x62>
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d009      	beq.n	80032c8 <RCCEx_PLLSAI2_Config+0x74>
 80032b4:	e020      	b.n	80032f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032b6:	4b55      	ldr	r3, [pc, #340]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d11d      	bne.n	80032fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032c6:	e01a      	b.n	80032fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032c8:	4b50      	ldr	r3, [pc, #320]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d116      	bne.n	8003302 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d8:	e013      	b.n	8003302 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032da:	4b4c      	ldr	r3, [pc, #304]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10f      	bne.n	8003306 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032e6:	4b49      	ldr	r3, [pc, #292]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d109      	bne.n	8003306 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032f6:	e006      	b.n	8003306 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
      break;
 80032fc:	e004      	b.n	8003308 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032fe:	bf00      	nop
 8003300:	e002      	b.n	8003308 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003302:	bf00      	nop
 8003304:	e000      	b.n	8003308 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003306:	bf00      	nop
    }

    if(status == HAL_OK)
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10d      	bne.n	800332a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800330e:	4b3f      	ldr	r3, [pc, #252]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6819      	ldr	r1, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	3b01      	subs	r3, #1
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	430b      	orrs	r3, r1
 8003324:	4939      	ldr	r1, [pc, #228]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003326:	4313      	orrs	r3, r2
 8003328:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d167      	bne.n	8003400 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003330:	4b36      	ldr	r3, [pc, #216]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a35      	ldr	r2, [pc, #212]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800333c:	f7fe f9a0 	bl	8001680 <HAL_GetTick>
 8003340:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003342:	e009      	b.n	8003358 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003344:	f7fe f99c 	bl	8001680 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d902      	bls.n	8003358 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	73fb      	strb	r3, [r7, #15]
        break;
 8003356:	e005      	b.n	8003364 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003358:	4b2c      	ldr	r3, [pc, #176]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ef      	bne.n	8003344 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d14a      	bne.n	8003400 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d111      	bne.n	8003394 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003370:	4b26      	ldr	r3, [pc, #152]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6892      	ldr	r2, [r2, #8]
 8003380:	0211      	lsls	r1, r2, #8
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	68d2      	ldr	r2, [r2, #12]
 8003386:	0912      	lsrs	r2, r2, #4
 8003388:	0452      	lsls	r2, r2, #17
 800338a:	430a      	orrs	r2, r1
 800338c:	491f      	ldr	r1, [pc, #124]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 800338e:	4313      	orrs	r3, r2
 8003390:	614b      	str	r3, [r1, #20]
 8003392:	e011      	b.n	80033b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003394:	4b1d      	ldr	r3, [pc, #116]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800339c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6892      	ldr	r2, [r2, #8]
 80033a4:	0211      	lsls	r1, r2, #8
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6912      	ldr	r2, [r2, #16]
 80033aa:	0852      	lsrs	r2, r2, #1
 80033ac:	3a01      	subs	r2, #1
 80033ae:	0652      	lsls	r2, r2, #25
 80033b0:	430a      	orrs	r2, r1
 80033b2:	4916      	ldr	r1, [pc, #88]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033b8:	4b14      	ldr	r3, [pc, #80]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a13      	ldr	r2, [pc, #76]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7fe f95c 	bl	8001680 <HAL_GetTick>
 80033c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033ca:	e009      	b.n	80033e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033cc:	f7fe f958 	bl	8001680 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d902      	bls.n	80033e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	73fb      	strb	r3, [r7, #15]
          break;
 80033de:	e005      	b.n	80033ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033e0:	4b0a      	ldr	r3, [pc, #40]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0ef      	beq.n	80033cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80033f2:	4b06      	ldr	r3, [pc, #24]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	4904      	ldr	r1, [pc, #16]	; (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003400:	7bfb      	ldrb	r3, [r7, #15]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000

08003410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e049      	b.n	80034b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fd fec6 	bl	80011c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3304      	adds	r3, #4
 800344c:	4619      	mov	r1, r3
 800344e:	4610      	mov	r0, r2
 8003450:	f000 fb58 	bl	8003b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d001      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e04f      	b.n	8003578 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a23      	ldr	r2, [pc, #140]	; (8003584 <HAL_TIM_Base_Start_IT+0xc4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01d      	beq.n	8003536 <HAL_TIM_Base_Start_IT+0x76>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003502:	d018      	beq.n	8003536 <HAL_TIM_Base_Start_IT+0x76>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a1f      	ldr	r2, [pc, #124]	; (8003588 <HAL_TIM_Base_Start_IT+0xc8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d013      	beq.n	8003536 <HAL_TIM_Base_Start_IT+0x76>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1e      	ldr	r2, [pc, #120]	; (800358c <HAL_TIM_Base_Start_IT+0xcc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00e      	beq.n	8003536 <HAL_TIM_Base_Start_IT+0x76>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a1c      	ldr	r2, [pc, #112]	; (8003590 <HAL_TIM_Base_Start_IT+0xd0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d009      	beq.n	8003536 <HAL_TIM_Base_Start_IT+0x76>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a1b      	ldr	r2, [pc, #108]	; (8003594 <HAL_TIM_Base_Start_IT+0xd4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d004      	beq.n	8003536 <HAL_TIM_Base_Start_IT+0x76>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a19      	ldr	r2, [pc, #100]	; (8003598 <HAL_TIM_Base_Start_IT+0xd8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d115      	bne.n	8003562 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	4b17      	ldr	r3, [pc, #92]	; (800359c <HAL_TIM_Base_Start_IT+0xdc>)
 800353e:	4013      	ands	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b06      	cmp	r3, #6
 8003546:	d015      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0xb4>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354e:	d011      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003560:	e008      	b.n	8003574 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	e000      	b.n	8003576 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003574:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	40012c00 	.word	0x40012c00
 8003588:	40000400 	.word	0x40000400
 800358c:	40000800 	.word	0x40000800
 8003590:	40000c00 	.word	0x40000c00
 8003594:	40013400 	.word	0x40013400
 8003598:	40014000 	.word	0x40014000
 800359c:	00010007 	.word	0x00010007

080035a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e049      	b.n	8003646 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fd fd96 	bl	80010f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3304      	adds	r3, #4
 80035dc:	4619      	mov	r1, r3
 80035de:	4610      	mov	r0, r2
 80035e0:	f000 fa90 	bl	8003b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b02      	cmp	r3, #2
 8003662:	d122      	bne.n	80036aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b02      	cmp	r3, #2
 8003670:	d11b      	bne.n	80036aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f06f 0202 	mvn.w	r2, #2
 800367a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 fa19 	bl	8003ac8 <HAL_TIM_IC_CaptureCallback>
 8003696:	e005      	b.n	80036a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fa0b 	bl	8003ab4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 fa1c 	bl	8003adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d122      	bne.n	80036fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d11b      	bne.n	80036fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f06f 0204 	mvn.w	r2, #4
 80036ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f9ef 	bl	8003ac8 <HAL_TIM_IC_CaptureCallback>
 80036ea:	e005      	b.n	80036f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f9e1 	bl	8003ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f9f2 	bl	8003adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b08      	cmp	r3, #8
 800370a:	d122      	bne.n	8003752 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b08      	cmp	r3, #8
 8003718:	d11b      	bne.n	8003752 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f06f 0208 	mvn.w	r2, #8
 8003722:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2204      	movs	r2, #4
 8003728:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f9c5 	bl	8003ac8 <HAL_TIM_IC_CaptureCallback>
 800373e:	e005      	b.n	800374c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f9b7 	bl	8003ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f9c8 	bl	8003adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b10      	cmp	r3, #16
 800375e:	d122      	bne.n	80037a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	2b10      	cmp	r3, #16
 800376c:	d11b      	bne.n	80037a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f06f 0210 	mvn.w	r2, #16
 8003776:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2208      	movs	r2, #8
 800377c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f99b 	bl	8003ac8 <HAL_TIM_IC_CaptureCallback>
 8003792:	e005      	b.n	80037a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f98d 	bl	8003ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f99e 	bl	8003adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d10e      	bne.n	80037d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d107      	bne.n	80037d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f06f 0201 	mvn.w	r2, #1
 80037ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7fc ff1b 	bl	8000608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037dc:	2b80      	cmp	r3, #128	; 0x80
 80037de:	d10e      	bne.n	80037fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ea:	2b80      	cmp	r3, #128	; 0x80
 80037ec:	d107      	bne.n	80037fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fd85 	bl	8004308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800380c:	d10e      	bne.n	800382c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003818:	2b80      	cmp	r3, #128	; 0x80
 800381a:	d107      	bne.n	800382c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fd78 	bl	800431c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003836:	2b40      	cmp	r3, #64	; 0x40
 8003838:	d10e      	bne.n	8003858 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b40      	cmp	r3, #64	; 0x40
 8003846:	d107      	bne.n	8003858 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f94c 	bl	8003af0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	2b20      	cmp	r3, #32
 8003864:	d10e      	bne.n	8003884 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b20      	cmp	r3, #32
 8003872:	d107      	bne.n	8003884 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0220 	mvn.w	r2, #32
 800387c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fd38 	bl	80042f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003884:	bf00      	nop
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e0ff      	b.n	8003aaa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b14      	cmp	r3, #20
 80038b6:	f200 80f0 	bhi.w	8003a9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80038ba:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c0:	08003915 	.word	0x08003915
 80038c4:	08003a9b 	.word	0x08003a9b
 80038c8:	08003a9b 	.word	0x08003a9b
 80038cc:	08003a9b 	.word	0x08003a9b
 80038d0:	08003955 	.word	0x08003955
 80038d4:	08003a9b 	.word	0x08003a9b
 80038d8:	08003a9b 	.word	0x08003a9b
 80038dc:	08003a9b 	.word	0x08003a9b
 80038e0:	08003997 	.word	0x08003997
 80038e4:	08003a9b 	.word	0x08003a9b
 80038e8:	08003a9b 	.word	0x08003a9b
 80038ec:	08003a9b 	.word	0x08003a9b
 80038f0:	080039d7 	.word	0x080039d7
 80038f4:	08003a9b 	.word	0x08003a9b
 80038f8:	08003a9b 	.word	0x08003a9b
 80038fc:	08003a9b 	.word	0x08003a9b
 8003900:	08003a19 	.word	0x08003a19
 8003904:	08003a9b 	.word	0x08003a9b
 8003908:	08003a9b 	.word	0x08003a9b
 800390c:	08003a9b 	.word	0x08003a9b
 8003910:	08003a59 	.word	0x08003a59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	4618      	mov	r0, r3
 800391c:	f000 f98c 	bl	8003c38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0208 	orr.w	r2, r2, #8
 800392e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0204 	bic.w	r2, r2, #4
 800393e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6999      	ldr	r1, [r3, #24]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	619a      	str	r2, [r3, #24]
      break;
 8003952:	e0a5      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	4618      	mov	r0, r3
 800395c:	f000 f9fc 	bl	8003d58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800396e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699a      	ldr	r2, [r3, #24]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6999      	ldr	r1, [r3, #24]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	021a      	lsls	r2, r3, #8
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	619a      	str	r2, [r3, #24]
      break;
 8003994:	e084      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fa65 	bl	8003e6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69da      	ldr	r2, [r3, #28]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0208 	orr.w	r2, r2, #8
 80039b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69da      	ldr	r2, [r3, #28]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0204 	bic.w	r2, r2, #4
 80039c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69d9      	ldr	r1, [r3, #28]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	61da      	str	r2, [r3, #28]
      break;
 80039d4:	e064      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 facd 	bl	8003f7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69da      	ldr	r2, [r3, #28]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69d9      	ldr	r1, [r3, #28]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	021a      	lsls	r2, r3, #8
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	61da      	str	r2, [r3, #28]
      break;
 8003a16:	e043      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fb16 	bl	8004050 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0208 	orr.w	r2, r2, #8
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0204 	bic.w	r2, r2, #4
 8003a42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	691a      	ldr	r2, [r3, #16]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a56:	e023      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68b9      	ldr	r1, [r7, #8]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fb5a 	bl	8004118 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	021a      	lsls	r2, r3, #8
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a98:	e002      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop

08003ab4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a40      	ldr	r2, [pc, #256]	; (8003c18 <TIM_Base_SetConfig+0x114>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d013      	beq.n	8003b44 <TIM_Base_SetConfig+0x40>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b22:	d00f      	beq.n	8003b44 <TIM_Base_SetConfig+0x40>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a3d      	ldr	r2, [pc, #244]	; (8003c1c <TIM_Base_SetConfig+0x118>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00b      	beq.n	8003b44 <TIM_Base_SetConfig+0x40>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a3c      	ldr	r2, [pc, #240]	; (8003c20 <TIM_Base_SetConfig+0x11c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d007      	beq.n	8003b44 <TIM_Base_SetConfig+0x40>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a3b      	ldr	r2, [pc, #236]	; (8003c24 <TIM_Base_SetConfig+0x120>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d003      	beq.n	8003b44 <TIM_Base_SetConfig+0x40>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a3a      	ldr	r2, [pc, #232]	; (8003c28 <TIM_Base_SetConfig+0x124>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d108      	bne.n	8003b56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a2f      	ldr	r2, [pc, #188]	; (8003c18 <TIM_Base_SetConfig+0x114>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d01f      	beq.n	8003b9e <TIM_Base_SetConfig+0x9a>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b64:	d01b      	beq.n	8003b9e <TIM_Base_SetConfig+0x9a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a2c      	ldr	r2, [pc, #176]	; (8003c1c <TIM_Base_SetConfig+0x118>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d017      	beq.n	8003b9e <TIM_Base_SetConfig+0x9a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a2b      	ldr	r2, [pc, #172]	; (8003c20 <TIM_Base_SetConfig+0x11c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d013      	beq.n	8003b9e <TIM_Base_SetConfig+0x9a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a2a      	ldr	r2, [pc, #168]	; (8003c24 <TIM_Base_SetConfig+0x120>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00f      	beq.n	8003b9e <TIM_Base_SetConfig+0x9a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a29      	ldr	r2, [pc, #164]	; (8003c28 <TIM_Base_SetConfig+0x124>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00b      	beq.n	8003b9e <TIM_Base_SetConfig+0x9a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a28      	ldr	r2, [pc, #160]	; (8003c2c <TIM_Base_SetConfig+0x128>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d007      	beq.n	8003b9e <TIM_Base_SetConfig+0x9a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a27      	ldr	r2, [pc, #156]	; (8003c30 <TIM_Base_SetConfig+0x12c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d003      	beq.n	8003b9e <TIM_Base_SetConfig+0x9a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a26      	ldr	r2, [pc, #152]	; (8003c34 <TIM_Base_SetConfig+0x130>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d108      	bne.n	8003bb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a10      	ldr	r2, [pc, #64]	; (8003c18 <TIM_Base_SetConfig+0x114>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00f      	beq.n	8003bfc <TIM_Base_SetConfig+0xf8>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a12      	ldr	r2, [pc, #72]	; (8003c28 <TIM_Base_SetConfig+0x124>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00b      	beq.n	8003bfc <TIM_Base_SetConfig+0xf8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a11      	ldr	r2, [pc, #68]	; (8003c2c <TIM_Base_SetConfig+0x128>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d007      	beq.n	8003bfc <TIM_Base_SetConfig+0xf8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a10      	ldr	r2, [pc, #64]	; (8003c30 <TIM_Base_SetConfig+0x12c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <TIM_Base_SetConfig+0xf8>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a0f      	ldr	r2, [pc, #60]	; (8003c34 <TIM_Base_SetConfig+0x130>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d103      	bne.n	8003c04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	615a      	str	r2, [r3, #20]
}
 8003c0a:	bf00      	nop
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40012c00 	.word	0x40012c00
 8003c1c:	40000400 	.word	0x40000400
 8003c20:	40000800 	.word	0x40000800
 8003c24:	40000c00 	.word	0x40000c00
 8003c28:	40013400 	.word	0x40013400
 8003c2c:	40014000 	.word	0x40014000
 8003c30:	40014400 	.word	0x40014400
 8003c34:	40014800 	.word	0x40014800

08003c38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f023 0201 	bic.w	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0303 	bic.w	r3, r3, #3
 8003c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f023 0302 	bic.w	r3, r3, #2
 8003c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a2c      	ldr	r2, [pc, #176]	; (8003d44 <TIM_OC1_SetConfig+0x10c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00f      	beq.n	8003cb8 <TIM_OC1_SetConfig+0x80>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a2b      	ldr	r2, [pc, #172]	; (8003d48 <TIM_OC1_SetConfig+0x110>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00b      	beq.n	8003cb8 <TIM_OC1_SetConfig+0x80>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a2a      	ldr	r2, [pc, #168]	; (8003d4c <TIM_OC1_SetConfig+0x114>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d007      	beq.n	8003cb8 <TIM_OC1_SetConfig+0x80>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a29      	ldr	r2, [pc, #164]	; (8003d50 <TIM_OC1_SetConfig+0x118>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d003      	beq.n	8003cb8 <TIM_OC1_SetConfig+0x80>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a28      	ldr	r2, [pc, #160]	; (8003d54 <TIM_OC1_SetConfig+0x11c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d10c      	bne.n	8003cd2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f023 0308 	bic.w	r3, r3, #8
 8003cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f023 0304 	bic.w	r3, r3, #4
 8003cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a1b      	ldr	r2, [pc, #108]	; (8003d44 <TIM_OC1_SetConfig+0x10c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00f      	beq.n	8003cfa <TIM_OC1_SetConfig+0xc2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a1a      	ldr	r2, [pc, #104]	; (8003d48 <TIM_OC1_SetConfig+0x110>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00b      	beq.n	8003cfa <TIM_OC1_SetConfig+0xc2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a19      	ldr	r2, [pc, #100]	; (8003d4c <TIM_OC1_SetConfig+0x114>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d007      	beq.n	8003cfa <TIM_OC1_SetConfig+0xc2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a18      	ldr	r2, [pc, #96]	; (8003d50 <TIM_OC1_SetConfig+0x118>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d003      	beq.n	8003cfa <TIM_OC1_SetConfig+0xc2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a17      	ldr	r2, [pc, #92]	; (8003d54 <TIM_OC1_SetConfig+0x11c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d111      	bne.n	8003d1e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	621a      	str	r2, [r3, #32]
}
 8003d38:	bf00      	nop
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	40012c00 	.word	0x40012c00
 8003d48:	40013400 	.word	0x40013400
 8003d4c:	40014000 	.word	0x40014000
 8003d50:	40014400 	.word	0x40014400
 8003d54:	40014800 	.word	0x40014800

08003d58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	f023 0210 	bic.w	r2, r3, #16
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	021b      	lsls	r3, r3, #8
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f023 0320 	bic.w	r3, r3, #32
 8003da6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a28      	ldr	r2, [pc, #160]	; (8003e58 <TIM_OC2_SetConfig+0x100>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d003      	beq.n	8003dc4 <TIM_OC2_SetConfig+0x6c>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a27      	ldr	r2, [pc, #156]	; (8003e5c <TIM_OC2_SetConfig+0x104>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d10d      	bne.n	8003de0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <TIM_OC2_SetConfig+0x100>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00f      	beq.n	8003e08 <TIM_OC2_SetConfig+0xb0>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a1c      	ldr	r2, [pc, #112]	; (8003e5c <TIM_OC2_SetConfig+0x104>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d00b      	beq.n	8003e08 <TIM_OC2_SetConfig+0xb0>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a1b      	ldr	r2, [pc, #108]	; (8003e60 <TIM_OC2_SetConfig+0x108>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d007      	beq.n	8003e08 <TIM_OC2_SetConfig+0xb0>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a1a      	ldr	r2, [pc, #104]	; (8003e64 <TIM_OC2_SetConfig+0x10c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d003      	beq.n	8003e08 <TIM_OC2_SetConfig+0xb0>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a19      	ldr	r2, [pc, #100]	; (8003e68 <TIM_OC2_SetConfig+0x110>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d113      	bne.n	8003e30 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	621a      	str	r2, [r3, #32]
}
 8003e4a:	bf00      	nop
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40012c00 	.word	0x40012c00
 8003e5c:	40013400 	.word	0x40013400
 8003e60:	40014000 	.word	0x40014000
 8003e64:	40014400 	.word	0x40014400
 8003e68:	40014800 	.word	0x40014800

08003e6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 0303 	bic.w	r3, r3, #3
 8003ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	021b      	lsls	r3, r3, #8
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a27      	ldr	r2, [pc, #156]	; (8003f68 <TIM_OC3_SetConfig+0xfc>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d003      	beq.n	8003ed6 <TIM_OC3_SetConfig+0x6a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a26      	ldr	r2, [pc, #152]	; (8003f6c <TIM_OC3_SetConfig+0x100>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d10d      	bne.n	8003ef2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003edc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a1c      	ldr	r2, [pc, #112]	; (8003f68 <TIM_OC3_SetConfig+0xfc>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00f      	beq.n	8003f1a <TIM_OC3_SetConfig+0xae>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a1b      	ldr	r2, [pc, #108]	; (8003f6c <TIM_OC3_SetConfig+0x100>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00b      	beq.n	8003f1a <TIM_OC3_SetConfig+0xae>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a1a      	ldr	r2, [pc, #104]	; (8003f70 <TIM_OC3_SetConfig+0x104>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d007      	beq.n	8003f1a <TIM_OC3_SetConfig+0xae>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a19      	ldr	r2, [pc, #100]	; (8003f74 <TIM_OC3_SetConfig+0x108>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d003      	beq.n	8003f1a <TIM_OC3_SetConfig+0xae>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a18      	ldr	r2, [pc, #96]	; (8003f78 <TIM_OC3_SetConfig+0x10c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d113      	bne.n	8003f42 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	621a      	str	r2, [r3, #32]
}
 8003f5c:	bf00      	nop
 8003f5e:	371c      	adds	r7, #28
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	40012c00 	.word	0x40012c00
 8003f6c:	40013400 	.word	0x40013400
 8003f70:	40014000 	.word	0x40014000
 8003f74:	40014400 	.word	0x40014400
 8003f78:	40014800 	.word	0x40014800

08003f7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	031b      	lsls	r3, r3, #12
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a18      	ldr	r2, [pc, #96]	; (800403c <TIM_OC4_SetConfig+0xc0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00f      	beq.n	8004000 <TIM_OC4_SetConfig+0x84>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a17      	ldr	r2, [pc, #92]	; (8004040 <TIM_OC4_SetConfig+0xc4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00b      	beq.n	8004000 <TIM_OC4_SetConfig+0x84>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a16      	ldr	r2, [pc, #88]	; (8004044 <TIM_OC4_SetConfig+0xc8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d007      	beq.n	8004000 <TIM_OC4_SetConfig+0x84>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a15      	ldr	r2, [pc, #84]	; (8004048 <TIM_OC4_SetConfig+0xcc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d003      	beq.n	8004000 <TIM_OC4_SetConfig+0x84>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a14      	ldr	r2, [pc, #80]	; (800404c <TIM_OC4_SetConfig+0xd0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d109      	bne.n	8004014 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004006:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	019b      	lsls	r3, r3, #6
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	621a      	str	r2, [r3, #32]
}
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40012c00 	.word	0x40012c00
 8004040:	40013400 	.word	0x40013400
 8004044:	40014000 	.word	0x40014000
 8004048:	40014400 	.word	0x40014400
 800404c:	40014800 	.word	0x40014800

08004050 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800407e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004094:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	041b      	lsls	r3, r3, #16
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4313      	orrs	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a17      	ldr	r2, [pc, #92]	; (8004104 <TIM_OC5_SetConfig+0xb4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00f      	beq.n	80040ca <TIM_OC5_SetConfig+0x7a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a16      	ldr	r2, [pc, #88]	; (8004108 <TIM_OC5_SetConfig+0xb8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00b      	beq.n	80040ca <TIM_OC5_SetConfig+0x7a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a15      	ldr	r2, [pc, #84]	; (800410c <TIM_OC5_SetConfig+0xbc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d007      	beq.n	80040ca <TIM_OC5_SetConfig+0x7a>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a14      	ldr	r2, [pc, #80]	; (8004110 <TIM_OC5_SetConfig+0xc0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_OC5_SetConfig+0x7a>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a13      	ldr	r2, [pc, #76]	; (8004114 <TIM_OC5_SetConfig+0xc4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d109      	bne.n	80040de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	621a      	str	r2, [r3, #32]
}
 80040f8:	bf00      	nop
 80040fa:	371c      	adds	r7, #28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	40012c00 	.word	0x40012c00
 8004108:	40013400 	.word	0x40013400
 800410c:	40014000 	.word	0x40014000
 8004110:	40014400 	.word	0x40014400
 8004114:	40014800 	.word	0x40014800

08004118 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800414a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800415e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	051b      	lsls	r3, r3, #20
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a18      	ldr	r2, [pc, #96]	; (80041d0 <TIM_OC6_SetConfig+0xb8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d00f      	beq.n	8004194 <TIM_OC6_SetConfig+0x7c>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a17      	ldr	r2, [pc, #92]	; (80041d4 <TIM_OC6_SetConfig+0xbc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00b      	beq.n	8004194 <TIM_OC6_SetConfig+0x7c>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a16      	ldr	r2, [pc, #88]	; (80041d8 <TIM_OC6_SetConfig+0xc0>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d007      	beq.n	8004194 <TIM_OC6_SetConfig+0x7c>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a15      	ldr	r2, [pc, #84]	; (80041dc <TIM_OC6_SetConfig+0xc4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d003      	beq.n	8004194 <TIM_OC6_SetConfig+0x7c>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a14      	ldr	r2, [pc, #80]	; (80041e0 <TIM_OC6_SetConfig+0xc8>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d109      	bne.n	80041a8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800419a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	029b      	lsls	r3, r3, #10
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	621a      	str	r2, [r3, #32]
}
 80041c2:	bf00      	nop
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40012c00 	.word	0x40012c00
 80041d4:	40013400 	.word	0x40013400
 80041d8:	40014000 	.word	0x40014000
 80041dc:	40014400 	.word	0x40014400
 80041e0:	40014800 	.word	0x40014800

080041e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e068      	b.n	80042ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a2e      	ldr	r2, [pc, #184]	; (80042dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d004      	beq.n	8004230 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a2d      	ldr	r2, [pc, #180]	; (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d108      	bne.n	8004242 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004236:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004248:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4313      	orrs	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1e      	ldr	r2, [pc, #120]	; (80042dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d01d      	beq.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426e:	d018      	beq.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a1b      	ldr	r2, [pc, #108]	; (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d013      	beq.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1a      	ldr	r2, [pc, #104]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00e      	beq.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a18      	ldr	r2, [pc, #96]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d009      	beq.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a13      	ldr	r2, [pc, #76]	; (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d004      	beq.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a14      	ldr	r2, [pc, #80]	; (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d10c      	bne.n	80042bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40013400 	.word	0x40013400
 80042e4:	40000400 	.word	0x40000400
 80042e8:	40000800 	.word	0x40000800
 80042ec:	40000c00 	.word	0x40000c00
 80042f0:	40014000 	.word	0x40014000

080042f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e040      	b.n	80043c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fc ff96 	bl	8001284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2224      	movs	r2, #36	; 0x24
 800435c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0201 	bic.w	r2, r2, #1
 800436c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fc94 	bl	8004c9c <UART_SetConfig>
 8004374:	4603      	mov	r3, r0
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e022      	b.n	80043c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 ff40 	bl	800520c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800439a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 ffc7 	bl	8005350 <UART_CheckIdleState>
 80043c2:	4603      	mov	r3, r0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08a      	sub	sp, #40	; 0x28
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	4613      	mov	r3, r2
 80043da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	f040 8082 	bne.w	80044ea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <HAL_UART_Transmit+0x26>
 80043ec:	88fb      	ldrh	r3, [r7, #6]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e07a      	b.n	80044ec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_UART_Transmit+0x38>
 8004400:	2302      	movs	r3, #2
 8004402:	e073      	b.n	80044ec <HAL_UART_Transmit+0x120>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2221      	movs	r2, #33	; 0x21
 8004418:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800441a:	f7fd f931 	bl	8001680 <HAL_GetTick>
 800441e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	88fa      	ldrh	r2, [r7, #6]
 8004424:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	88fa      	ldrh	r2, [r7, #6]
 800442c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004438:	d108      	bne.n	800444c <HAL_UART_Transmit+0x80>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d104      	bne.n	800444c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004442:	2300      	movs	r3, #0
 8004444:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	61bb      	str	r3, [r7, #24]
 800444a:	e003      	b.n	8004454 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004450:	2300      	movs	r3, #0
 8004452:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800445c:	e02d      	b.n	80044ba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2200      	movs	r2, #0
 8004466:	2180      	movs	r1, #128	; 0x80
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 ffba 	bl	80053e2 <UART_WaitOnFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e039      	b.n	80044ec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10b      	bne.n	8004496 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	881a      	ldrh	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800448a:	b292      	uxth	r2, r2
 800448c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	3302      	adds	r3, #2
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	e008      	b.n	80044a8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	781a      	ldrb	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	b292      	uxth	r2, r2
 80044a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	3301      	adds	r3, #1
 80044a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1cb      	bne.n	800445e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2200      	movs	r2, #0
 80044ce:	2140      	movs	r1, #64	; 0x40
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 ff86 	bl	80053e2 <UART_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e005      	b.n	80044ec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	e000      	b.n	80044ec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80044ea:	2302      	movs	r3, #2
  }
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3720      	adds	r7, #32
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	; 0x28
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	4613      	mov	r3, r2
 8004502:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004508:	2b20      	cmp	r3, #32
 800450a:	f040 80bf 	bne.w	800468c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <HAL_UART_Receive+0x26>
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e0b7      	b.n	800468e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_UART_Receive+0x38>
 8004528:	2302      	movs	r3, #2
 800452a:	e0b0      	b.n	800468e <HAL_UART_Receive+0x19a>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2222      	movs	r2, #34	; 0x22
 8004540:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004548:	f7fd f89a 	bl	8001680 <HAL_GetTick>
 800454c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	88fa      	ldrh	r2, [r7, #6]
 8004552:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	88fa      	ldrh	r2, [r7, #6]
 800455a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004566:	d10e      	bne.n	8004586 <HAL_UART_Receive+0x92>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d105      	bne.n	800457c <HAL_UART_Receive+0x88>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004576:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800457a:	e02d      	b.n	80045d8 <HAL_UART_Receive+0xe4>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	22ff      	movs	r2, #255	; 0xff
 8004580:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004584:	e028      	b.n	80045d8 <HAL_UART_Receive+0xe4>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10d      	bne.n	80045aa <HAL_UART_Receive+0xb6>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d104      	bne.n	80045a0 <HAL_UART_Receive+0xac>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	22ff      	movs	r2, #255	; 0xff
 800459a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800459e:	e01b      	b.n	80045d8 <HAL_UART_Receive+0xe4>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	227f      	movs	r2, #127	; 0x7f
 80045a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045a8:	e016      	b.n	80045d8 <HAL_UART_Receive+0xe4>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045b2:	d10d      	bne.n	80045d0 <HAL_UART_Receive+0xdc>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d104      	bne.n	80045c6 <HAL_UART_Receive+0xd2>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	227f      	movs	r2, #127	; 0x7f
 80045c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045c4:	e008      	b.n	80045d8 <HAL_UART_Receive+0xe4>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	223f      	movs	r2, #63	; 0x3f
 80045ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045ce:	e003      	b.n	80045d8 <HAL_UART_Receive+0xe4>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80045de:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e8:	d108      	bne.n	80045fc <HAL_UART_Receive+0x108>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d104      	bne.n	80045fc <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	61bb      	str	r3, [r7, #24]
 80045fa:	e003      	b.n	8004604 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004600:	2300      	movs	r3, #0
 8004602:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800460c:	e033      	b.n	8004676 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2200      	movs	r2, #0
 8004616:	2120      	movs	r1, #32
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 fee2 	bl	80053e2 <UART_WaitOnFlagUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e032      	b.n	800468e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10c      	bne.n	8004648 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004634:	b29a      	uxth	r2, r3
 8004636:	8a7b      	ldrh	r3, [r7, #18]
 8004638:	4013      	ands	r3, r2
 800463a:	b29a      	uxth	r2, r3
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	3302      	adds	r3, #2
 8004644:	61bb      	str	r3, [r7, #24]
 8004646:	e00d      	b.n	8004664 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800464e:	b29b      	uxth	r3, r3
 8004650:	b2da      	uxtb	r2, r3
 8004652:	8a7b      	ldrh	r3, [r7, #18]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	4013      	ands	r3, r2
 8004658:	b2da      	uxtb	r2, r3
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	3301      	adds	r3, #1
 8004662:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1c5      	bne.n	800460e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2220      	movs	r2, #32
 8004686:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	e000      	b.n	800468e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800468c:	2302      	movs	r3, #2
  }
}
 800468e:	4618      	mov	r0, r3
 8004690:	3720      	adds	r7, #32
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b0ba      	sub	sp, #232	; 0xe8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80046c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80046c6:	4013      	ands	r3, r2
 80046c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80046cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d115      	bne.n	8004700 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80046d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00f      	beq.n	8004700 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d009      	beq.n	8004700 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 82a6 	beq.w	8004c42 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	4798      	blx	r3
      }
      return;
 80046fe:	e2a0      	b.n	8004c42 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 8117 	beq.w	8004938 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800470a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004716:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800471a:	4b85      	ldr	r3, [pc, #532]	; (8004930 <HAL_UART_IRQHandler+0x298>)
 800471c:	4013      	ands	r3, r2
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 810a 	beq.w	8004938 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d011      	beq.n	8004754 <HAL_UART_IRQHandler+0xbc>
 8004730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00b      	beq.n	8004754 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2201      	movs	r2, #1
 8004742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800474a:	f043 0201 	orr.w	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d011      	beq.n	8004784 <HAL_UART_IRQHandler+0xec>
 8004760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00b      	beq.n	8004784 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2202      	movs	r2, #2
 8004772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800477a:	f043 0204 	orr.w	r2, r3, #4
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d011      	beq.n	80047b4 <HAL_UART_IRQHandler+0x11c>
 8004790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00b      	beq.n	80047b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2204      	movs	r2, #4
 80047a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047aa:	f043 0202 	orr.w	r2, r3, #2
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d017      	beq.n	80047f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d105      	bne.n	80047d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00b      	beq.n	80047f0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2208      	movs	r2, #8
 80047de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e6:	f043 0208 	orr.w	r2, r3, #8
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d012      	beq.n	8004822 <HAL_UART_IRQHandler+0x18a>
 80047fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004800:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00c      	beq.n	8004822 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004818:	f043 0220 	orr.w	r2, r3, #32
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 820c 	beq.w	8004c46 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800482e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00d      	beq.n	8004856 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800483a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800485c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486a:	2b40      	cmp	r3, #64	; 0x40
 800486c:	d005      	beq.n	800487a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800486e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004872:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004876:	2b00      	cmp	r3, #0
 8004878:	d04f      	beq.n	800491a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fe75 	bl	800556a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488a:	2b40      	cmp	r3, #64	; 0x40
 800488c:	d141      	bne.n	8004912 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3308      	adds	r3, #8
 8004894:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004898:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800489c:	e853 3f00 	ldrex	r3, [r3]
 80048a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3308      	adds	r3, #8
 80048b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1d9      	bne.n	800488e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d013      	beq.n	800490a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e6:	4a13      	ldr	r2, [pc, #76]	; (8004934 <HAL_UART_IRQHandler+0x29c>)
 80048e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fd f821 	bl	8001936 <HAL_DMA_Abort_IT>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d017      	beq.n	800492a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004904:	4610      	mov	r0, r2
 8004906:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004908:	e00f      	b.n	800492a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f9b0 	bl	8004c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004910:	e00b      	b.n	800492a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f9ac 	bl	8004c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004918:	e007      	b.n	800492a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f9a8 	bl	8004c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004928:	e18d      	b.n	8004c46 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800492a:	bf00      	nop
    return;
 800492c:	e18b      	b.n	8004c46 <HAL_UART_IRQHandler+0x5ae>
 800492e:	bf00      	nop
 8004930:	04000120 	.word	0x04000120
 8004934:	08005631 	.word	0x08005631

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800493c:	2b01      	cmp	r3, #1
 800493e:	f040 8146 	bne.w	8004bce <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004946:	f003 0310 	and.w	r3, r3, #16
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 813f 	beq.w	8004bce <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 8138 	beq.w	8004bce <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2210      	movs	r2, #16
 8004964:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004970:	2b40      	cmp	r3, #64	; 0x40
 8004972:	f040 80b4 	bne.w	8004ade <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004982:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 815f 	beq.w	8004c4a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004992:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004996:	429a      	cmp	r2, r3
 8004998:	f080 8157 	bcs.w	8004c4a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f040 8085 	bne.w	8004ac2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049f2:	e841 2300 	strex	r3, r2, [r1]
 80049f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1da      	bne.n	80049b8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3308      	adds	r3, #8
 8004a08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3308      	adds	r3, #8
 8004a22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e1      	bne.n	8004a02 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3308      	adds	r3, #8
 8004a44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e3      	bne.n	8004a3e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a92:	f023 0310 	bic.w	r3, r3, #16
 8004a96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004aa4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004aa6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004aaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004aac:	e841 2300 	strex	r3, r2, [r1]
 8004ab0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e4      	bne.n	8004a82 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fc fefc 	bl	80018ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f8d4 	bl	8004c84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004adc:	e0b5      	b.n	8004c4a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 80a7 	beq.w	8004c4e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004b00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 80a2 	beq.w	8004c4e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b12:	e853 3f00 	ldrex	r3, [r3]
 8004b16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	461a      	mov	r2, r3
 8004b28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b34:	e841 2300 	strex	r3, r2, [r1]
 8004b38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e4      	bne.n	8004b0a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3308      	adds	r3, #8
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	e853 3f00 	ldrex	r3, [r3]
 8004b4e:	623b      	str	r3, [r7, #32]
   return(result);
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	f023 0301 	bic.w	r3, r3, #1
 8004b56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3308      	adds	r3, #8
 8004b60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b64:	633a      	str	r2, [r7, #48]	; 0x30
 8004b66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e3      	bne.n	8004b40 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	e853 3f00 	ldrex	r3, [r3]
 8004b96:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0310 	bic.w	r3, r3, #16
 8004b9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004bac:	61fb      	str	r3, [r7, #28]
 8004bae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	69b9      	ldr	r1, [r7, #24]
 8004bb2:	69fa      	ldr	r2, [r7, #28]
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	617b      	str	r3, [r7, #20]
   return(result);
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e4      	bne.n	8004b8a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f85c 	bl	8004c84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bcc:	e03f      	b.n	8004c4e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00e      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x560>
 8004bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d008      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004bee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fd5d 	bl	80056b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bf6:	e02d      	b.n	8004c54 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00e      	beq.n	8004c22 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01c      	beq.n	8004c52 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	4798      	blx	r3
    }
    return;
 8004c20:	e017      	b.n	8004c52 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d012      	beq.n	8004c54 <HAL_UART_IRQHandler+0x5bc>
 8004c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00c      	beq.n	8004c54 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fd0e 	bl	800565c <UART_EndTransmit_IT>
    return;
 8004c40:	e008      	b.n	8004c54 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004c42:	bf00      	nop
 8004c44:	e006      	b.n	8004c54 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004c46:	bf00      	nop
 8004c48:	e004      	b.n	8004c54 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004c4a:	bf00      	nop
 8004c4c:	e002      	b.n	8004c54 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004c4e:	bf00      	nop
 8004c50:	e000      	b.n	8004c54 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004c52:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004c54:	37e8      	adds	r7, #232	; 0xe8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop

08004c5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ca0:	b08a      	sub	sp, #40	; 0x28
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	4ba4      	ldr	r3, [pc, #656]	; (8004f5c <UART_SetConfig+0x2c0>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	6812      	ldr	r2, [r2, #0]
 8004cd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a99      	ldr	r2, [pc, #612]	; (8004f60 <UART_SetConfig+0x2c4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d004      	beq.n	8004d08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d04:	4313      	orrs	r3, r2
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a90      	ldr	r2, [pc, #576]	; (8004f64 <UART_SetConfig+0x2c8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d126      	bne.n	8004d74 <UART_SetConfig+0xd8>
 8004d26:	4b90      	ldr	r3, [pc, #576]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2c:	f003 0303 	and.w	r3, r3, #3
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d81b      	bhi.n	8004d6c <UART_SetConfig+0xd0>
 8004d34:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <UART_SetConfig+0xa0>)
 8004d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3a:	bf00      	nop
 8004d3c:	08004d4d 	.word	0x08004d4d
 8004d40:	08004d5d 	.word	0x08004d5d
 8004d44:	08004d55 	.word	0x08004d55
 8004d48:	08004d65 	.word	0x08004d65
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d52:	e116      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004d54:	2302      	movs	r3, #2
 8004d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5a:	e112      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d62:	e10e      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004d64:	2308      	movs	r3, #8
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6a:	e10a      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d72:	e106      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a7c      	ldr	r2, [pc, #496]	; (8004f6c <UART_SetConfig+0x2d0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d138      	bne.n	8004df0 <UART_SetConfig+0x154>
 8004d7e:	4b7a      	ldr	r3, [pc, #488]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d84:	f003 030c 	and.w	r3, r3, #12
 8004d88:	2b0c      	cmp	r3, #12
 8004d8a:	d82d      	bhi.n	8004de8 <UART_SetConfig+0x14c>
 8004d8c:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <UART_SetConfig+0xf8>)
 8004d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d92:	bf00      	nop
 8004d94:	08004dc9 	.word	0x08004dc9
 8004d98:	08004de9 	.word	0x08004de9
 8004d9c:	08004de9 	.word	0x08004de9
 8004da0:	08004de9 	.word	0x08004de9
 8004da4:	08004dd9 	.word	0x08004dd9
 8004da8:	08004de9 	.word	0x08004de9
 8004dac:	08004de9 	.word	0x08004de9
 8004db0:	08004de9 	.word	0x08004de9
 8004db4:	08004dd1 	.word	0x08004dd1
 8004db8:	08004de9 	.word	0x08004de9
 8004dbc:	08004de9 	.word	0x08004de9
 8004dc0:	08004de9 	.word	0x08004de9
 8004dc4:	08004de1 	.word	0x08004de1
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dce:	e0d8      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd6:	e0d4      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004dd8:	2304      	movs	r3, #4
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dde:	e0d0      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004de0:	2308      	movs	r3, #8
 8004de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de6:	e0cc      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004de8:	2310      	movs	r3, #16
 8004dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dee:	e0c8      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a5e      	ldr	r2, [pc, #376]	; (8004f70 <UART_SetConfig+0x2d4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d125      	bne.n	8004e46 <UART_SetConfig+0x1aa>
 8004dfa:	4b5b      	ldr	r3, [pc, #364]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e04:	2b30      	cmp	r3, #48	; 0x30
 8004e06:	d016      	beq.n	8004e36 <UART_SetConfig+0x19a>
 8004e08:	2b30      	cmp	r3, #48	; 0x30
 8004e0a:	d818      	bhi.n	8004e3e <UART_SetConfig+0x1a2>
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d00a      	beq.n	8004e26 <UART_SetConfig+0x18a>
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d814      	bhi.n	8004e3e <UART_SetConfig+0x1a2>
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <UART_SetConfig+0x182>
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d008      	beq.n	8004e2e <UART_SetConfig+0x192>
 8004e1c:	e00f      	b.n	8004e3e <UART_SetConfig+0x1a2>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e24:	e0ad      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e26:	2302      	movs	r3, #2
 8004e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e2c:	e0a9      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e2e:	2304      	movs	r3, #4
 8004e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e34:	e0a5      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e36:	2308      	movs	r3, #8
 8004e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3c:	e0a1      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e3e:	2310      	movs	r3, #16
 8004e40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e44:	e09d      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a4a      	ldr	r2, [pc, #296]	; (8004f74 <UART_SetConfig+0x2d8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d125      	bne.n	8004e9c <UART_SetConfig+0x200>
 8004e50:	4b45      	ldr	r3, [pc, #276]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e5a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e5c:	d016      	beq.n	8004e8c <UART_SetConfig+0x1f0>
 8004e5e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e60:	d818      	bhi.n	8004e94 <UART_SetConfig+0x1f8>
 8004e62:	2b80      	cmp	r3, #128	; 0x80
 8004e64:	d00a      	beq.n	8004e7c <UART_SetConfig+0x1e0>
 8004e66:	2b80      	cmp	r3, #128	; 0x80
 8004e68:	d814      	bhi.n	8004e94 <UART_SetConfig+0x1f8>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <UART_SetConfig+0x1d8>
 8004e6e:	2b40      	cmp	r3, #64	; 0x40
 8004e70:	d008      	beq.n	8004e84 <UART_SetConfig+0x1e8>
 8004e72:	e00f      	b.n	8004e94 <UART_SetConfig+0x1f8>
 8004e74:	2300      	movs	r3, #0
 8004e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e7a:	e082      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e82:	e07e      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e84:	2304      	movs	r3, #4
 8004e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e8a:	e07a      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e8c:	2308      	movs	r3, #8
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e92:	e076      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e94:	2310      	movs	r3, #16
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9a:	e072      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a35      	ldr	r2, [pc, #212]	; (8004f78 <UART_SetConfig+0x2dc>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d12a      	bne.n	8004efc <UART_SetConfig+0x260>
 8004ea6:	4b30      	ldr	r3, [pc, #192]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eb4:	d01a      	beq.n	8004eec <UART_SetConfig+0x250>
 8004eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eba:	d81b      	bhi.n	8004ef4 <UART_SetConfig+0x258>
 8004ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ec0:	d00c      	beq.n	8004edc <UART_SetConfig+0x240>
 8004ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ec6:	d815      	bhi.n	8004ef4 <UART_SetConfig+0x258>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <UART_SetConfig+0x238>
 8004ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ed0:	d008      	beq.n	8004ee4 <UART_SetConfig+0x248>
 8004ed2:	e00f      	b.n	8004ef4 <UART_SetConfig+0x258>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eda:	e052      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004edc:	2302      	movs	r3, #2
 8004ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee2:	e04e      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eea:	e04a      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004eec:	2308      	movs	r3, #8
 8004eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ef2:	e046      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004efa:	e042      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a17      	ldr	r2, [pc, #92]	; (8004f60 <UART_SetConfig+0x2c4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d13a      	bne.n	8004f7c <UART_SetConfig+0x2e0>
 8004f06:	4b18      	ldr	r3, [pc, #96]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f14:	d01a      	beq.n	8004f4c <UART_SetConfig+0x2b0>
 8004f16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f1a:	d81b      	bhi.n	8004f54 <UART_SetConfig+0x2b8>
 8004f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f20:	d00c      	beq.n	8004f3c <UART_SetConfig+0x2a0>
 8004f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f26:	d815      	bhi.n	8004f54 <UART_SetConfig+0x2b8>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <UART_SetConfig+0x298>
 8004f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f30:	d008      	beq.n	8004f44 <UART_SetConfig+0x2a8>
 8004f32:	e00f      	b.n	8004f54 <UART_SetConfig+0x2b8>
 8004f34:	2300      	movs	r3, #0
 8004f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f3a:	e022      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f42:	e01e      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004f44:	2304      	movs	r3, #4
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f4a:	e01a      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004f4c:	2308      	movs	r3, #8
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f52:	e016      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004f54:	2310      	movs	r3, #16
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5a:	e012      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004f5c:	efff69f3 	.word	0xefff69f3
 8004f60:	40008000 	.word	0x40008000
 8004f64:	40013800 	.word	0x40013800
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	40004400 	.word	0x40004400
 8004f70:	40004800 	.word	0x40004800
 8004f74:	40004c00 	.word	0x40004c00
 8004f78:	40005000 	.word	0x40005000
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a9f      	ldr	r2, [pc, #636]	; (8005204 <UART_SetConfig+0x568>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d17a      	bne.n	8005082 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d824      	bhi.n	8004fde <UART_SetConfig+0x342>
 8004f94:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <UART_SetConfig+0x300>)
 8004f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9a:	bf00      	nop
 8004f9c:	08004fc1 	.word	0x08004fc1
 8004fa0:	08004fdf 	.word	0x08004fdf
 8004fa4:	08004fc9 	.word	0x08004fc9
 8004fa8:	08004fdf 	.word	0x08004fdf
 8004fac:	08004fcf 	.word	0x08004fcf
 8004fb0:	08004fdf 	.word	0x08004fdf
 8004fb4:	08004fdf 	.word	0x08004fdf
 8004fb8:	08004fdf 	.word	0x08004fdf
 8004fbc:	08004fd7 	.word	0x08004fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fc0:	f7fd fcde 	bl	8002980 <HAL_RCC_GetPCLK1Freq>
 8004fc4:	61f8      	str	r0, [r7, #28]
        break;
 8004fc6:	e010      	b.n	8004fea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fc8:	4b8f      	ldr	r3, [pc, #572]	; (8005208 <UART_SetConfig+0x56c>)
 8004fca:	61fb      	str	r3, [r7, #28]
        break;
 8004fcc:	e00d      	b.n	8004fea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fce:	f7fd fc3f 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8004fd2:	61f8      	str	r0, [r7, #28]
        break;
 8004fd4:	e009      	b.n	8004fea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fda:	61fb      	str	r3, [r7, #28]
        break;
 8004fdc:	e005      	b.n	8004fea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fe8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 80fb 	beq.w	80051e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	4413      	add	r3, r2
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d305      	bcc.n	800500e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005008:	69fa      	ldr	r2, [r7, #28]
 800500a:	429a      	cmp	r2, r3
 800500c:	d903      	bls.n	8005016 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005014:	e0e8      	b.n	80051e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	2200      	movs	r2, #0
 800501a:	461c      	mov	r4, r3
 800501c:	4615      	mov	r5, r2
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	022b      	lsls	r3, r5, #8
 8005028:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800502c:	0222      	lsls	r2, r4, #8
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	6849      	ldr	r1, [r1, #4]
 8005032:	0849      	lsrs	r1, r1, #1
 8005034:	2000      	movs	r0, #0
 8005036:	4688      	mov	r8, r1
 8005038:	4681      	mov	r9, r0
 800503a:	eb12 0a08 	adds.w	sl, r2, r8
 800503e:	eb43 0b09 	adc.w	fp, r3, r9
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005050:	4650      	mov	r0, sl
 8005052:	4659      	mov	r1, fp
 8005054:	f7fb f924 	bl	80002a0 <__aeabi_uldivmod>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4613      	mov	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005066:	d308      	bcc.n	800507a <UART_SetConfig+0x3de>
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800506e:	d204      	bcs.n	800507a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	60da      	str	r2, [r3, #12]
 8005078:	e0b6      	b.n	80051e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005080:	e0b2      	b.n	80051e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800508a:	d15e      	bne.n	800514a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800508c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005090:	2b08      	cmp	r3, #8
 8005092:	d828      	bhi.n	80050e6 <UART_SetConfig+0x44a>
 8005094:	a201      	add	r2, pc, #4	; (adr r2, 800509c <UART_SetConfig+0x400>)
 8005096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509a:	bf00      	nop
 800509c:	080050c1 	.word	0x080050c1
 80050a0:	080050c9 	.word	0x080050c9
 80050a4:	080050d1 	.word	0x080050d1
 80050a8:	080050e7 	.word	0x080050e7
 80050ac:	080050d7 	.word	0x080050d7
 80050b0:	080050e7 	.word	0x080050e7
 80050b4:	080050e7 	.word	0x080050e7
 80050b8:	080050e7 	.word	0x080050e7
 80050bc:	080050df 	.word	0x080050df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c0:	f7fd fc5e 	bl	8002980 <HAL_RCC_GetPCLK1Freq>
 80050c4:	61f8      	str	r0, [r7, #28]
        break;
 80050c6:	e014      	b.n	80050f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050c8:	f7fd fc70 	bl	80029ac <HAL_RCC_GetPCLK2Freq>
 80050cc:	61f8      	str	r0, [r7, #28]
        break;
 80050ce:	e010      	b.n	80050f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d0:	4b4d      	ldr	r3, [pc, #308]	; (8005208 <UART_SetConfig+0x56c>)
 80050d2:	61fb      	str	r3, [r7, #28]
        break;
 80050d4:	e00d      	b.n	80050f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050d6:	f7fd fbbb 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 80050da:	61f8      	str	r0, [r7, #28]
        break;
 80050dc:	e009      	b.n	80050f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050e2:	61fb      	str	r3, [r7, #28]
        break;
 80050e4:	e005      	b.n	80050f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d077      	beq.n	80051e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	005a      	lsls	r2, r3, #1
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	085b      	lsrs	r3, r3, #1
 8005102:	441a      	add	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	fbb2 f3f3 	udiv	r3, r2, r3
 800510c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	2b0f      	cmp	r3, #15
 8005112:	d916      	bls.n	8005142 <UART_SetConfig+0x4a6>
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511a:	d212      	bcs.n	8005142 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f023 030f 	bic.w	r3, r3, #15
 8005124:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	085b      	lsrs	r3, r3, #1
 800512a:	b29b      	uxth	r3, r3
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	b29a      	uxth	r2, r3
 8005132:	8afb      	ldrh	r3, [r7, #22]
 8005134:	4313      	orrs	r3, r2
 8005136:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	8afa      	ldrh	r2, [r7, #22]
 800513e:	60da      	str	r2, [r3, #12]
 8005140:	e052      	b.n	80051e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005148:	e04e      	b.n	80051e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800514a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800514e:	2b08      	cmp	r3, #8
 8005150:	d827      	bhi.n	80051a2 <UART_SetConfig+0x506>
 8005152:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <UART_SetConfig+0x4bc>)
 8005154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005158:	0800517d 	.word	0x0800517d
 800515c:	08005185 	.word	0x08005185
 8005160:	0800518d 	.word	0x0800518d
 8005164:	080051a3 	.word	0x080051a3
 8005168:	08005193 	.word	0x08005193
 800516c:	080051a3 	.word	0x080051a3
 8005170:	080051a3 	.word	0x080051a3
 8005174:	080051a3 	.word	0x080051a3
 8005178:	0800519b 	.word	0x0800519b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800517c:	f7fd fc00 	bl	8002980 <HAL_RCC_GetPCLK1Freq>
 8005180:	61f8      	str	r0, [r7, #28]
        break;
 8005182:	e014      	b.n	80051ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005184:	f7fd fc12 	bl	80029ac <HAL_RCC_GetPCLK2Freq>
 8005188:	61f8      	str	r0, [r7, #28]
        break;
 800518a:	e010      	b.n	80051ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800518c:	4b1e      	ldr	r3, [pc, #120]	; (8005208 <UART_SetConfig+0x56c>)
 800518e:	61fb      	str	r3, [r7, #28]
        break;
 8005190:	e00d      	b.n	80051ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005192:	f7fd fb5d 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8005196:	61f8      	str	r0, [r7, #28]
        break;
 8005198:	e009      	b.n	80051ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800519a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800519e:	61fb      	str	r3, [r7, #28]
        break;
 80051a0:	e005      	b.n	80051ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051ac:	bf00      	nop
    }

    if (pclk != 0U)
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d019      	beq.n	80051e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	085a      	lsrs	r2, r3, #1
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	441a      	add	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	2b0f      	cmp	r3, #15
 80051cc:	d909      	bls.n	80051e2 <UART_SetConfig+0x546>
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d4:	d205      	bcs.n	80051e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60da      	str	r2, [r3, #12]
 80051e0:	e002      	b.n	80051e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80051f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3728      	adds	r7, #40	; 0x28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005202:	bf00      	nop
 8005204:	40008000 	.word	0x40008000
 8005208:	00f42400 	.word	0x00f42400

0800520c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	f003 0310 	and.w	r3, r3, #16
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01a      	beq.n	8005322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800530a:	d10a      	bne.n	8005322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	605a      	str	r2, [r3, #4]
  }
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af02      	add	r7, sp, #8
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005360:	f7fc f98e 	bl	8001680 <HAL_GetTick>
 8005364:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b08      	cmp	r3, #8
 8005372:	d10e      	bne.n	8005392 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f82d 	bl	80053e2 <UART_WaitOnFlagUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e023      	b.n	80053da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b04      	cmp	r3, #4
 800539e:	d10e      	bne.n	80053be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f817 	bl	80053e2 <UART_WaitOnFlagUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e00d      	b.n	80053da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2220      	movs	r2, #32
 80053c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b09c      	sub	sp, #112	; 0x70
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	603b      	str	r3, [r7, #0]
 80053ee:	4613      	mov	r3, r2
 80053f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f2:	e0a5      	b.n	8005540 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	f000 80a1 	beq.w	8005540 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fe:	f7fc f93f 	bl	8001680 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800540a:	429a      	cmp	r2, r3
 800540c:	d302      	bcc.n	8005414 <UART_WaitOnFlagUntilTimeout+0x32>
 800540e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005410:	2b00      	cmp	r3, #0
 8005412:	d13e      	bne.n	8005492 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005424:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005428:	667b      	str	r3, [r7, #100]	; 0x64
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005434:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005438:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e6      	bne.n	8005414 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3308      	adds	r3, #8
 800544c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	f023 0301 	bic.w	r3, r3, #1
 800545c:	663b      	str	r3, [r7, #96]	; 0x60
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3308      	adds	r3, #8
 8005464:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005466:	64ba      	str	r2, [r7, #72]	; 0x48
 8005468:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800546c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e5      	bne.n	8005446 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2220      	movs	r2, #32
 800547e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e067      	b.n	8005562 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d04f      	beq.n	8005540 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ae:	d147      	bne.n	8005540 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054b8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d8:	637b      	str	r3, [r7, #52]	; 0x34
 80054da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e6      	bne.n	80054ba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3308      	adds	r3, #8
 80054f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	613b      	str	r3, [r7, #16]
   return(result);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f023 0301 	bic.w	r3, r3, #1
 8005502:	66bb      	str	r3, [r7, #104]	; 0x68
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3308      	adds	r3, #8
 800550a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800550c:	623a      	str	r2, [r7, #32]
 800550e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	69f9      	ldr	r1, [r7, #28]
 8005512:	6a3a      	ldr	r2, [r7, #32]
 8005514:	e841 2300 	strex	r3, r2, [r1]
 8005518:	61bb      	str	r3, [r7, #24]
   return(result);
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e5      	bne.n	80054ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2220      	movs	r2, #32
 8005524:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2220      	movs	r2, #32
 8005530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e010      	b.n	8005562 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69da      	ldr	r2, [r3, #28]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	4013      	ands	r3, r2
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	429a      	cmp	r2, r3
 800554e:	bf0c      	ite	eq
 8005550:	2301      	moveq	r3, #1
 8005552:	2300      	movne	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	79fb      	ldrb	r3, [r7, #7]
 800555a:	429a      	cmp	r2, r3
 800555c:	f43f af4a 	beq.w	80053f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3770      	adds	r7, #112	; 0x70
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800556a:	b480      	push	{r7}
 800556c:	b095      	sub	sp, #84	; 0x54
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557a:	e853 3f00 	ldrex	r3, [r3]
 800557e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	461a      	mov	r2, r3
 800558e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005590:	643b      	str	r3, [r7, #64]	; 0x40
 8005592:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005594:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005596:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005598:	e841 2300 	strex	r3, r2, [r1]
 800559c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800559e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1e6      	bne.n	8005572 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3308      	adds	r3, #8
 80055aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	f023 0301 	bic.w	r3, r3, #1
 80055ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3308      	adds	r3, #8
 80055c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e5      	bne.n	80055a4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d118      	bne.n	8005612 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	e853 3f00 	ldrex	r3, [r3]
 80055ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f023 0310 	bic.w	r3, r3, #16
 80055f4:	647b      	str	r3, [r7, #68]	; 0x44
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055fe:	61bb      	str	r3, [r7, #24]
 8005600:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	6979      	ldr	r1, [r7, #20]
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	613b      	str	r3, [r7, #16]
   return(result);
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e6      	bne.n	80055e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2220      	movs	r2, #32
 8005616:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005624:	bf00      	nop
 8005626:	3754      	adds	r7, #84	; 0x54
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f7ff fb0e 	bl	8004c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005654:	bf00      	nop
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	60bb      	str	r3, [r7, #8]
   return(result);
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	61bb      	str	r3, [r7, #24]
 8005684:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	6979      	ldr	r1, [r7, #20]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	613b      	str	r3, [r7, #16]
   return(result);
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1e6      	bne.n	8005664 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2220      	movs	r2, #32
 800569a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff fada 	bl	8004c5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056a8:	bf00      	nop
 80056aa:	3720      	adds	r7, #32
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <__errno>:
 80056c4:	4b01      	ldr	r3, [pc, #4]	; (80056cc <__errno+0x8>)
 80056c6:	6818      	ldr	r0, [r3, #0]
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	200000cc 	.word	0x200000cc

080056d0 <__libc_init_array>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	4d0d      	ldr	r5, [pc, #52]	; (8005708 <__libc_init_array+0x38>)
 80056d4:	4c0d      	ldr	r4, [pc, #52]	; (800570c <__libc_init_array+0x3c>)
 80056d6:	1b64      	subs	r4, r4, r5
 80056d8:	10a4      	asrs	r4, r4, #2
 80056da:	2600      	movs	r6, #0
 80056dc:	42a6      	cmp	r6, r4
 80056de:	d109      	bne.n	80056f4 <__libc_init_array+0x24>
 80056e0:	4d0b      	ldr	r5, [pc, #44]	; (8005710 <__libc_init_array+0x40>)
 80056e2:	4c0c      	ldr	r4, [pc, #48]	; (8005714 <__libc_init_array+0x44>)
 80056e4:	f001 fcb0 	bl	8007048 <_init>
 80056e8:	1b64      	subs	r4, r4, r5
 80056ea:	10a4      	asrs	r4, r4, #2
 80056ec:	2600      	movs	r6, #0
 80056ee:	42a6      	cmp	r6, r4
 80056f0:	d105      	bne.n	80056fe <__libc_init_array+0x2e>
 80056f2:	bd70      	pop	{r4, r5, r6, pc}
 80056f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f8:	4798      	blx	r3
 80056fa:	3601      	adds	r6, #1
 80056fc:	e7ee      	b.n	80056dc <__libc_init_array+0xc>
 80056fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005702:	4798      	blx	r3
 8005704:	3601      	adds	r6, #1
 8005706:	e7f2      	b.n	80056ee <__libc_init_array+0x1e>
 8005708:	080072a4 	.word	0x080072a4
 800570c:	080072a4 	.word	0x080072a4
 8005710:	080072a4 	.word	0x080072a4
 8005714:	080072a8 	.word	0x080072a8

08005718 <memset>:
 8005718:	4402      	add	r2, r0
 800571a:	4603      	mov	r3, r0
 800571c:	4293      	cmp	r3, r2
 800571e:	d100      	bne.n	8005722 <memset+0xa>
 8005720:	4770      	bx	lr
 8005722:	f803 1b01 	strb.w	r1, [r3], #1
 8005726:	e7f9      	b.n	800571c <memset+0x4>

08005728 <iprintf>:
 8005728:	b40f      	push	{r0, r1, r2, r3}
 800572a:	4b0a      	ldr	r3, [pc, #40]	; (8005754 <iprintf+0x2c>)
 800572c:	b513      	push	{r0, r1, r4, lr}
 800572e:	681c      	ldr	r4, [r3, #0]
 8005730:	b124      	cbz	r4, 800573c <iprintf+0x14>
 8005732:	69a3      	ldr	r3, [r4, #24]
 8005734:	b913      	cbnz	r3, 800573c <iprintf+0x14>
 8005736:	4620      	mov	r0, r4
 8005738:	f000 fa7c 	bl	8005c34 <__sinit>
 800573c:	ab05      	add	r3, sp, #20
 800573e:	9a04      	ldr	r2, [sp, #16]
 8005740:	68a1      	ldr	r1, [r4, #8]
 8005742:	9301      	str	r3, [sp, #4]
 8005744:	4620      	mov	r0, r4
 8005746:	f000 fe69 	bl	800641c <_vfiprintf_r>
 800574a:	b002      	add	sp, #8
 800574c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005750:	b004      	add	sp, #16
 8005752:	4770      	bx	lr
 8005754:	200000cc 	.word	0x200000cc

08005758 <siscanf>:
 8005758:	b40e      	push	{r1, r2, r3}
 800575a:	b510      	push	{r4, lr}
 800575c:	b09f      	sub	sp, #124	; 0x7c
 800575e:	ac21      	add	r4, sp, #132	; 0x84
 8005760:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005764:	f854 2b04 	ldr.w	r2, [r4], #4
 8005768:	9201      	str	r2, [sp, #4]
 800576a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800576e:	9004      	str	r0, [sp, #16]
 8005770:	9008      	str	r0, [sp, #32]
 8005772:	f7fa fd37 	bl	80001e4 <strlen>
 8005776:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <siscanf+0x50>)
 8005778:	9005      	str	r0, [sp, #20]
 800577a:	9009      	str	r0, [sp, #36]	; 0x24
 800577c:	930d      	str	r3, [sp, #52]	; 0x34
 800577e:	480b      	ldr	r0, [pc, #44]	; (80057ac <siscanf+0x54>)
 8005780:	9a01      	ldr	r2, [sp, #4]
 8005782:	6800      	ldr	r0, [r0, #0]
 8005784:	9403      	str	r4, [sp, #12]
 8005786:	2300      	movs	r3, #0
 8005788:	9311      	str	r3, [sp, #68]	; 0x44
 800578a:	9316      	str	r3, [sp, #88]	; 0x58
 800578c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005790:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005794:	a904      	add	r1, sp, #16
 8005796:	4623      	mov	r3, r4
 8005798:	f000 fc9e 	bl	80060d8 <__ssvfiscanf_r>
 800579c:	b01f      	add	sp, #124	; 0x7c
 800579e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057a2:	b003      	add	sp, #12
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	080057d3 	.word	0x080057d3
 80057ac:	200000cc 	.word	0x200000cc

080057b0 <__sread>:
 80057b0:	b510      	push	{r4, lr}
 80057b2:	460c      	mov	r4, r1
 80057b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057b8:	f001 fa46 	bl	8006c48 <_read_r>
 80057bc:	2800      	cmp	r0, #0
 80057be:	bfab      	itete	ge
 80057c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057c2:	89a3      	ldrhlt	r3, [r4, #12]
 80057c4:	181b      	addge	r3, r3, r0
 80057c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057ca:	bfac      	ite	ge
 80057cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80057ce:	81a3      	strhlt	r3, [r4, #12]
 80057d0:	bd10      	pop	{r4, pc}

080057d2 <__seofread>:
 80057d2:	2000      	movs	r0, #0
 80057d4:	4770      	bx	lr

080057d6 <__swrite>:
 80057d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057da:	461f      	mov	r7, r3
 80057dc:	898b      	ldrh	r3, [r1, #12]
 80057de:	05db      	lsls	r3, r3, #23
 80057e0:	4605      	mov	r5, r0
 80057e2:	460c      	mov	r4, r1
 80057e4:	4616      	mov	r6, r2
 80057e6:	d505      	bpl.n	80057f4 <__swrite+0x1e>
 80057e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ec:	2302      	movs	r3, #2
 80057ee:	2200      	movs	r2, #0
 80057f0:	f000 fac0 	bl	8005d74 <_lseek_r>
 80057f4:	89a3      	ldrh	r3, [r4, #12]
 80057f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057fe:	81a3      	strh	r3, [r4, #12]
 8005800:	4632      	mov	r2, r6
 8005802:	463b      	mov	r3, r7
 8005804:	4628      	mov	r0, r5
 8005806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800580a:	f000 b869 	b.w	80058e0 <_write_r>

0800580e <__sseek>:
 800580e:	b510      	push	{r4, lr}
 8005810:	460c      	mov	r4, r1
 8005812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005816:	f000 faad 	bl	8005d74 <_lseek_r>
 800581a:	1c43      	adds	r3, r0, #1
 800581c:	89a3      	ldrh	r3, [r4, #12]
 800581e:	bf15      	itete	ne
 8005820:	6560      	strne	r0, [r4, #84]	; 0x54
 8005822:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005826:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800582a:	81a3      	strheq	r3, [r4, #12]
 800582c:	bf18      	it	ne
 800582e:	81a3      	strhne	r3, [r4, #12]
 8005830:	bd10      	pop	{r4, pc}

08005832 <__sclose>:
 8005832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005836:	f000 b8d3 	b.w	80059e0 <_close_r>
	...

0800583c <__swbuf_r>:
 800583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583e:	460e      	mov	r6, r1
 8005840:	4614      	mov	r4, r2
 8005842:	4605      	mov	r5, r0
 8005844:	b118      	cbz	r0, 800584e <__swbuf_r+0x12>
 8005846:	6983      	ldr	r3, [r0, #24]
 8005848:	b90b      	cbnz	r3, 800584e <__swbuf_r+0x12>
 800584a:	f000 f9f3 	bl	8005c34 <__sinit>
 800584e:	4b21      	ldr	r3, [pc, #132]	; (80058d4 <__swbuf_r+0x98>)
 8005850:	429c      	cmp	r4, r3
 8005852:	d12b      	bne.n	80058ac <__swbuf_r+0x70>
 8005854:	686c      	ldr	r4, [r5, #4]
 8005856:	69a3      	ldr	r3, [r4, #24]
 8005858:	60a3      	str	r3, [r4, #8]
 800585a:	89a3      	ldrh	r3, [r4, #12]
 800585c:	071a      	lsls	r2, r3, #28
 800585e:	d52f      	bpl.n	80058c0 <__swbuf_r+0x84>
 8005860:	6923      	ldr	r3, [r4, #16]
 8005862:	b36b      	cbz	r3, 80058c0 <__swbuf_r+0x84>
 8005864:	6923      	ldr	r3, [r4, #16]
 8005866:	6820      	ldr	r0, [r4, #0]
 8005868:	1ac0      	subs	r0, r0, r3
 800586a:	6963      	ldr	r3, [r4, #20]
 800586c:	b2f6      	uxtb	r6, r6
 800586e:	4283      	cmp	r3, r0
 8005870:	4637      	mov	r7, r6
 8005872:	dc04      	bgt.n	800587e <__swbuf_r+0x42>
 8005874:	4621      	mov	r1, r4
 8005876:	4628      	mov	r0, r5
 8005878:	f000 f948 	bl	8005b0c <_fflush_r>
 800587c:	bb30      	cbnz	r0, 80058cc <__swbuf_r+0x90>
 800587e:	68a3      	ldr	r3, [r4, #8]
 8005880:	3b01      	subs	r3, #1
 8005882:	60a3      	str	r3, [r4, #8]
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	6022      	str	r2, [r4, #0]
 800588a:	701e      	strb	r6, [r3, #0]
 800588c:	6963      	ldr	r3, [r4, #20]
 800588e:	3001      	adds	r0, #1
 8005890:	4283      	cmp	r3, r0
 8005892:	d004      	beq.n	800589e <__swbuf_r+0x62>
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	07db      	lsls	r3, r3, #31
 8005898:	d506      	bpl.n	80058a8 <__swbuf_r+0x6c>
 800589a:	2e0a      	cmp	r6, #10
 800589c:	d104      	bne.n	80058a8 <__swbuf_r+0x6c>
 800589e:	4621      	mov	r1, r4
 80058a0:	4628      	mov	r0, r5
 80058a2:	f000 f933 	bl	8005b0c <_fflush_r>
 80058a6:	b988      	cbnz	r0, 80058cc <__swbuf_r+0x90>
 80058a8:	4638      	mov	r0, r7
 80058aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ac:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <__swbuf_r+0x9c>)
 80058ae:	429c      	cmp	r4, r3
 80058b0:	d101      	bne.n	80058b6 <__swbuf_r+0x7a>
 80058b2:	68ac      	ldr	r4, [r5, #8]
 80058b4:	e7cf      	b.n	8005856 <__swbuf_r+0x1a>
 80058b6:	4b09      	ldr	r3, [pc, #36]	; (80058dc <__swbuf_r+0xa0>)
 80058b8:	429c      	cmp	r4, r3
 80058ba:	bf08      	it	eq
 80058bc:	68ec      	ldreq	r4, [r5, #12]
 80058be:	e7ca      	b.n	8005856 <__swbuf_r+0x1a>
 80058c0:	4621      	mov	r1, r4
 80058c2:	4628      	mov	r0, r5
 80058c4:	f000 f81e 	bl	8005904 <__swsetup_r>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d0cb      	beq.n	8005864 <__swbuf_r+0x28>
 80058cc:	f04f 37ff 	mov.w	r7, #4294967295
 80058d0:	e7ea      	b.n	80058a8 <__swbuf_r+0x6c>
 80058d2:	bf00      	nop
 80058d4:	0800710c 	.word	0x0800710c
 80058d8:	0800712c 	.word	0x0800712c
 80058dc:	080070ec 	.word	0x080070ec

080058e0 <_write_r>:
 80058e0:	b538      	push	{r3, r4, r5, lr}
 80058e2:	4d07      	ldr	r5, [pc, #28]	; (8005900 <_write_r+0x20>)
 80058e4:	4604      	mov	r4, r0
 80058e6:	4608      	mov	r0, r1
 80058e8:	4611      	mov	r1, r2
 80058ea:	2200      	movs	r2, #0
 80058ec:	602a      	str	r2, [r5, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	f7fa fe74 	bl	80005dc <_write>
 80058f4:	1c43      	adds	r3, r0, #1
 80058f6:	d102      	bne.n	80058fe <_write_r+0x1e>
 80058f8:	682b      	ldr	r3, [r5, #0]
 80058fa:	b103      	cbz	r3, 80058fe <_write_r+0x1e>
 80058fc:	6023      	str	r3, [r4, #0]
 80058fe:	bd38      	pop	{r3, r4, r5, pc}
 8005900:	200004e0 	.word	0x200004e0

08005904 <__swsetup_r>:
 8005904:	4b32      	ldr	r3, [pc, #200]	; (80059d0 <__swsetup_r+0xcc>)
 8005906:	b570      	push	{r4, r5, r6, lr}
 8005908:	681d      	ldr	r5, [r3, #0]
 800590a:	4606      	mov	r6, r0
 800590c:	460c      	mov	r4, r1
 800590e:	b125      	cbz	r5, 800591a <__swsetup_r+0x16>
 8005910:	69ab      	ldr	r3, [r5, #24]
 8005912:	b913      	cbnz	r3, 800591a <__swsetup_r+0x16>
 8005914:	4628      	mov	r0, r5
 8005916:	f000 f98d 	bl	8005c34 <__sinit>
 800591a:	4b2e      	ldr	r3, [pc, #184]	; (80059d4 <__swsetup_r+0xd0>)
 800591c:	429c      	cmp	r4, r3
 800591e:	d10f      	bne.n	8005940 <__swsetup_r+0x3c>
 8005920:	686c      	ldr	r4, [r5, #4]
 8005922:	89a3      	ldrh	r3, [r4, #12]
 8005924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005928:	0719      	lsls	r1, r3, #28
 800592a:	d42c      	bmi.n	8005986 <__swsetup_r+0x82>
 800592c:	06dd      	lsls	r5, r3, #27
 800592e:	d411      	bmi.n	8005954 <__swsetup_r+0x50>
 8005930:	2309      	movs	r3, #9
 8005932:	6033      	str	r3, [r6, #0]
 8005934:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005938:	81a3      	strh	r3, [r4, #12]
 800593a:	f04f 30ff 	mov.w	r0, #4294967295
 800593e:	e03e      	b.n	80059be <__swsetup_r+0xba>
 8005940:	4b25      	ldr	r3, [pc, #148]	; (80059d8 <__swsetup_r+0xd4>)
 8005942:	429c      	cmp	r4, r3
 8005944:	d101      	bne.n	800594a <__swsetup_r+0x46>
 8005946:	68ac      	ldr	r4, [r5, #8]
 8005948:	e7eb      	b.n	8005922 <__swsetup_r+0x1e>
 800594a:	4b24      	ldr	r3, [pc, #144]	; (80059dc <__swsetup_r+0xd8>)
 800594c:	429c      	cmp	r4, r3
 800594e:	bf08      	it	eq
 8005950:	68ec      	ldreq	r4, [r5, #12]
 8005952:	e7e6      	b.n	8005922 <__swsetup_r+0x1e>
 8005954:	0758      	lsls	r0, r3, #29
 8005956:	d512      	bpl.n	800597e <__swsetup_r+0x7a>
 8005958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800595a:	b141      	cbz	r1, 800596e <__swsetup_r+0x6a>
 800595c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005960:	4299      	cmp	r1, r3
 8005962:	d002      	beq.n	800596a <__swsetup_r+0x66>
 8005964:	4630      	mov	r0, r6
 8005966:	f000 fa7d 	bl	8005e64 <_free_r>
 800596a:	2300      	movs	r3, #0
 800596c:	6363      	str	r3, [r4, #52]	; 0x34
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005974:	81a3      	strh	r3, [r4, #12]
 8005976:	2300      	movs	r3, #0
 8005978:	6063      	str	r3, [r4, #4]
 800597a:	6923      	ldr	r3, [r4, #16]
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	89a3      	ldrh	r3, [r4, #12]
 8005980:	f043 0308 	orr.w	r3, r3, #8
 8005984:	81a3      	strh	r3, [r4, #12]
 8005986:	6923      	ldr	r3, [r4, #16]
 8005988:	b94b      	cbnz	r3, 800599e <__swsetup_r+0x9a>
 800598a:	89a3      	ldrh	r3, [r4, #12]
 800598c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005994:	d003      	beq.n	800599e <__swsetup_r+0x9a>
 8005996:	4621      	mov	r1, r4
 8005998:	4630      	mov	r0, r6
 800599a:	f000 fa23 	bl	8005de4 <__smakebuf_r>
 800599e:	89a0      	ldrh	r0, [r4, #12]
 80059a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059a4:	f010 0301 	ands.w	r3, r0, #1
 80059a8:	d00a      	beq.n	80059c0 <__swsetup_r+0xbc>
 80059aa:	2300      	movs	r3, #0
 80059ac:	60a3      	str	r3, [r4, #8]
 80059ae:	6963      	ldr	r3, [r4, #20]
 80059b0:	425b      	negs	r3, r3
 80059b2:	61a3      	str	r3, [r4, #24]
 80059b4:	6923      	ldr	r3, [r4, #16]
 80059b6:	b943      	cbnz	r3, 80059ca <__swsetup_r+0xc6>
 80059b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059bc:	d1ba      	bne.n	8005934 <__swsetup_r+0x30>
 80059be:	bd70      	pop	{r4, r5, r6, pc}
 80059c0:	0781      	lsls	r1, r0, #30
 80059c2:	bf58      	it	pl
 80059c4:	6963      	ldrpl	r3, [r4, #20]
 80059c6:	60a3      	str	r3, [r4, #8]
 80059c8:	e7f4      	b.n	80059b4 <__swsetup_r+0xb0>
 80059ca:	2000      	movs	r0, #0
 80059cc:	e7f7      	b.n	80059be <__swsetup_r+0xba>
 80059ce:	bf00      	nop
 80059d0:	200000cc 	.word	0x200000cc
 80059d4:	0800710c 	.word	0x0800710c
 80059d8:	0800712c 	.word	0x0800712c
 80059dc:	080070ec 	.word	0x080070ec

080059e0 <_close_r>:
 80059e0:	b538      	push	{r3, r4, r5, lr}
 80059e2:	4d06      	ldr	r5, [pc, #24]	; (80059fc <_close_r+0x1c>)
 80059e4:	2300      	movs	r3, #0
 80059e6:	4604      	mov	r4, r0
 80059e8:	4608      	mov	r0, r1
 80059ea:	602b      	str	r3, [r5, #0]
 80059ec:	f7fb fd31 	bl	8001452 <_close>
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	d102      	bne.n	80059fa <_close_r+0x1a>
 80059f4:	682b      	ldr	r3, [r5, #0]
 80059f6:	b103      	cbz	r3, 80059fa <_close_r+0x1a>
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	bd38      	pop	{r3, r4, r5, pc}
 80059fc:	200004e0 	.word	0x200004e0

08005a00 <__sflush_r>:
 8005a00:	898a      	ldrh	r2, [r1, #12]
 8005a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a06:	4605      	mov	r5, r0
 8005a08:	0710      	lsls	r0, r2, #28
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	d458      	bmi.n	8005ac0 <__sflush_r+0xc0>
 8005a0e:	684b      	ldr	r3, [r1, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	dc05      	bgt.n	8005a20 <__sflush_r+0x20>
 8005a14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	dc02      	bgt.n	8005a20 <__sflush_r+0x20>
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a22:	2e00      	cmp	r6, #0
 8005a24:	d0f9      	beq.n	8005a1a <__sflush_r+0x1a>
 8005a26:	2300      	movs	r3, #0
 8005a28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a2c:	682f      	ldr	r7, [r5, #0]
 8005a2e:	602b      	str	r3, [r5, #0]
 8005a30:	d032      	beq.n	8005a98 <__sflush_r+0x98>
 8005a32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a34:	89a3      	ldrh	r3, [r4, #12]
 8005a36:	075a      	lsls	r2, r3, #29
 8005a38:	d505      	bpl.n	8005a46 <__sflush_r+0x46>
 8005a3a:	6863      	ldr	r3, [r4, #4]
 8005a3c:	1ac0      	subs	r0, r0, r3
 8005a3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a40:	b10b      	cbz	r3, 8005a46 <__sflush_r+0x46>
 8005a42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a44:	1ac0      	subs	r0, r0, r3
 8005a46:	2300      	movs	r3, #0
 8005a48:	4602      	mov	r2, r0
 8005a4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a4c:	6a21      	ldr	r1, [r4, #32]
 8005a4e:	4628      	mov	r0, r5
 8005a50:	47b0      	blx	r6
 8005a52:	1c43      	adds	r3, r0, #1
 8005a54:	89a3      	ldrh	r3, [r4, #12]
 8005a56:	d106      	bne.n	8005a66 <__sflush_r+0x66>
 8005a58:	6829      	ldr	r1, [r5, #0]
 8005a5a:	291d      	cmp	r1, #29
 8005a5c:	d82c      	bhi.n	8005ab8 <__sflush_r+0xb8>
 8005a5e:	4a2a      	ldr	r2, [pc, #168]	; (8005b08 <__sflush_r+0x108>)
 8005a60:	40ca      	lsrs	r2, r1
 8005a62:	07d6      	lsls	r6, r2, #31
 8005a64:	d528      	bpl.n	8005ab8 <__sflush_r+0xb8>
 8005a66:	2200      	movs	r2, #0
 8005a68:	6062      	str	r2, [r4, #4]
 8005a6a:	04d9      	lsls	r1, r3, #19
 8005a6c:	6922      	ldr	r2, [r4, #16]
 8005a6e:	6022      	str	r2, [r4, #0]
 8005a70:	d504      	bpl.n	8005a7c <__sflush_r+0x7c>
 8005a72:	1c42      	adds	r2, r0, #1
 8005a74:	d101      	bne.n	8005a7a <__sflush_r+0x7a>
 8005a76:	682b      	ldr	r3, [r5, #0]
 8005a78:	b903      	cbnz	r3, 8005a7c <__sflush_r+0x7c>
 8005a7a:	6560      	str	r0, [r4, #84]	; 0x54
 8005a7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a7e:	602f      	str	r7, [r5, #0]
 8005a80:	2900      	cmp	r1, #0
 8005a82:	d0ca      	beq.n	8005a1a <__sflush_r+0x1a>
 8005a84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a88:	4299      	cmp	r1, r3
 8005a8a:	d002      	beq.n	8005a92 <__sflush_r+0x92>
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	f000 f9e9 	bl	8005e64 <_free_r>
 8005a92:	2000      	movs	r0, #0
 8005a94:	6360      	str	r0, [r4, #52]	; 0x34
 8005a96:	e7c1      	b.n	8005a1c <__sflush_r+0x1c>
 8005a98:	6a21      	ldr	r1, [r4, #32]
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	47b0      	blx	r6
 8005aa0:	1c41      	adds	r1, r0, #1
 8005aa2:	d1c7      	bne.n	8005a34 <__sflush_r+0x34>
 8005aa4:	682b      	ldr	r3, [r5, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0c4      	beq.n	8005a34 <__sflush_r+0x34>
 8005aaa:	2b1d      	cmp	r3, #29
 8005aac:	d001      	beq.n	8005ab2 <__sflush_r+0xb2>
 8005aae:	2b16      	cmp	r3, #22
 8005ab0:	d101      	bne.n	8005ab6 <__sflush_r+0xb6>
 8005ab2:	602f      	str	r7, [r5, #0]
 8005ab4:	e7b1      	b.n	8005a1a <__sflush_r+0x1a>
 8005ab6:	89a3      	ldrh	r3, [r4, #12]
 8005ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005abc:	81a3      	strh	r3, [r4, #12]
 8005abe:	e7ad      	b.n	8005a1c <__sflush_r+0x1c>
 8005ac0:	690f      	ldr	r7, [r1, #16]
 8005ac2:	2f00      	cmp	r7, #0
 8005ac4:	d0a9      	beq.n	8005a1a <__sflush_r+0x1a>
 8005ac6:	0793      	lsls	r3, r2, #30
 8005ac8:	680e      	ldr	r6, [r1, #0]
 8005aca:	bf08      	it	eq
 8005acc:	694b      	ldreq	r3, [r1, #20]
 8005ace:	600f      	str	r7, [r1, #0]
 8005ad0:	bf18      	it	ne
 8005ad2:	2300      	movne	r3, #0
 8005ad4:	eba6 0807 	sub.w	r8, r6, r7
 8005ad8:	608b      	str	r3, [r1, #8]
 8005ada:	f1b8 0f00 	cmp.w	r8, #0
 8005ade:	dd9c      	ble.n	8005a1a <__sflush_r+0x1a>
 8005ae0:	6a21      	ldr	r1, [r4, #32]
 8005ae2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ae4:	4643      	mov	r3, r8
 8005ae6:	463a      	mov	r2, r7
 8005ae8:	4628      	mov	r0, r5
 8005aea:	47b0      	blx	r6
 8005aec:	2800      	cmp	r0, #0
 8005aee:	dc06      	bgt.n	8005afe <__sflush_r+0xfe>
 8005af0:	89a3      	ldrh	r3, [r4, #12]
 8005af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005af6:	81a3      	strh	r3, [r4, #12]
 8005af8:	f04f 30ff 	mov.w	r0, #4294967295
 8005afc:	e78e      	b.n	8005a1c <__sflush_r+0x1c>
 8005afe:	4407      	add	r7, r0
 8005b00:	eba8 0800 	sub.w	r8, r8, r0
 8005b04:	e7e9      	b.n	8005ada <__sflush_r+0xda>
 8005b06:	bf00      	nop
 8005b08:	20400001 	.word	0x20400001

08005b0c <_fflush_r>:
 8005b0c:	b538      	push	{r3, r4, r5, lr}
 8005b0e:	690b      	ldr	r3, [r1, #16]
 8005b10:	4605      	mov	r5, r0
 8005b12:	460c      	mov	r4, r1
 8005b14:	b913      	cbnz	r3, 8005b1c <_fflush_r+0x10>
 8005b16:	2500      	movs	r5, #0
 8005b18:	4628      	mov	r0, r5
 8005b1a:	bd38      	pop	{r3, r4, r5, pc}
 8005b1c:	b118      	cbz	r0, 8005b26 <_fflush_r+0x1a>
 8005b1e:	6983      	ldr	r3, [r0, #24]
 8005b20:	b90b      	cbnz	r3, 8005b26 <_fflush_r+0x1a>
 8005b22:	f000 f887 	bl	8005c34 <__sinit>
 8005b26:	4b14      	ldr	r3, [pc, #80]	; (8005b78 <_fflush_r+0x6c>)
 8005b28:	429c      	cmp	r4, r3
 8005b2a:	d11b      	bne.n	8005b64 <_fflush_r+0x58>
 8005b2c:	686c      	ldr	r4, [r5, #4]
 8005b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0ef      	beq.n	8005b16 <_fflush_r+0xa>
 8005b36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b38:	07d0      	lsls	r0, r2, #31
 8005b3a:	d404      	bmi.n	8005b46 <_fflush_r+0x3a>
 8005b3c:	0599      	lsls	r1, r3, #22
 8005b3e:	d402      	bmi.n	8005b46 <_fflush_r+0x3a>
 8005b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b42:	f000 f915 	bl	8005d70 <__retarget_lock_acquire_recursive>
 8005b46:	4628      	mov	r0, r5
 8005b48:	4621      	mov	r1, r4
 8005b4a:	f7ff ff59 	bl	8005a00 <__sflush_r>
 8005b4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b50:	07da      	lsls	r2, r3, #31
 8005b52:	4605      	mov	r5, r0
 8005b54:	d4e0      	bmi.n	8005b18 <_fflush_r+0xc>
 8005b56:	89a3      	ldrh	r3, [r4, #12]
 8005b58:	059b      	lsls	r3, r3, #22
 8005b5a:	d4dd      	bmi.n	8005b18 <_fflush_r+0xc>
 8005b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b5e:	f000 f908 	bl	8005d72 <__retarget_lock_release_recursive>
 8005b62:	e7d9      	b.n	8005b18 <_fflush_r+0xc>
 8005b64:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <_fflush_r+0x70>)
 8005b66:	429c      	cmp	r4, r3
 8005b68:	d101      	bne.n	8005b6e <_fflush_r+0x62>
 8005b6a:	68ac      	ldr	r4, [r5, #8]
 8005b6c:	e7df      	b.n	8005b2e <_fflush_r+0x22>
 8005b6e:	4b04      	ldr	r3, [pc, #16]	; (8005b80 <_fflush_r+0x74>)
 8005b70:	429c      	cmp	r4, r3
 8005b72:	bf08      	it	eq
 8005b74:	68ec      	ldreq	r4, [r5, #12]
 8005b76:	e7da      	b.n	8005b2e <_fflush_r+0x22>
 8005b78:	0800710c 	.word	0x0800710c
 8005b7c:	0800712c 	.word	0x0800712c
 8005b80:	080070ec 	.word	0x080070ec

08005b84 <std>:
 8005b84:	2300      	movs	r3, #0
 8005b86:	b510      	push	{r4, lr}
 8005b88:	4604      	mov	r4, r0
 8005b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b92:	6083      	str	r3, [r0, #8]
 8005b94:	8181      	strh	r1, [r0, #12]
 8005b96:	6643      	str	r3, [r0, #100]	; 0x64
 8005b98:	81c2      	strh	r2, [r0, #14]
 8005b9a:	6183      	str	r3, [r0, #24]
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	2208      	movs	r2, #8
 8005ba0:	305c      	adds	r0, #92	; 0x5c
 8005ba2:	f7ff fdb9 	bl	8005718 <memset>
 8005ba6:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <std+0x38>)
 8005ba8:	6263      	str	r3, [r4, #36]	; 0x24
 8005baa:	4b05      	ldr	r3, [pc, #20]	; (8005bc0 <std+0x3c>)
 8005bac:	62a3      	str	r3, [r4, #40]	; 0x28
 8005bae:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <std+0x40>)
 8005bb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bb2:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <std+0x44>)
 8005bb4:	6224      	str	r4, [r4, #32]
 8005bb6:	6323      	str	r3, [r4, #48]	; 0x30
 8005bb8:	bd10      	pop	{r4, pc}
 8005bba:	bf00      	nop
 8005bbc:	080057b1 	.word	0x080057b1
 8005bc0:	080057d7 	.word	0x080057d7
 8005bc4:	0800580f 	.word	0x0800580f
 8005bc8:	08005833 	.word	0x08005833

08005bcc <_cleanup_r>:
 8005bcc:	4901      	ldr	r1, [pc, #4]	; (8005bd4 <_cleanup_r+0x8>)
 8005bce:	f000 b8af 	b.w	8005d30 <_fwalk_reent>
 8005bd2:	bf00      	nop
 8005bd4:	08005b0d 	.word	0x08005b0d

08005bd8 <__sfmoreglue>:
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	2268      	movs	r2, #104	; 0x68
 8005bdc:	1e4d      	subs	r5, r1, #1
 8005bde:	4355      	muls	r5, r2
 8005be0:	460e      	mov	r6, r1
 8005be2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005be6:	f000 f9a9 	bl	8005f3c <_malloc_r>
 8005bea:	4604      	mov	r4, r0
 8005bec:	b140      	cbz	r0, 8005c00 <__sfmoreglue+0x28>
 8005bee:	2100      	movs	r1, #0
 8005bf0:	e9c0 1600 	strd	r1, r6, [r0]
 8005bf4:	300c      	adds	r0, #12
 8005bf6:	60a0      	str	r0, [r4, #8]
 8005bf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bfc:	f7ff fd8c 	bl	8005718 <memset>
 8005c00:	4620      	mov	r0, r4
 8005c02:	bd70      	pop	{r4, r5, r6, pc}

08005c04 <__sfp_lock_acquire>:
 8005c04:	4801      	ldr	r0, [pc, #4]	; (8005c0c <__sfp_lock_acquire+0x8>)
 8005c06:	f000 b8b3 	b.w	8005d70 <__retarget_lock_acquire_recursive>
 8005c0a:	bf00      	nop
 8005c0c:	200004d5 	.word	0x200004d5

08005c10 <__sfp_lock_release>:
 8005c10:	4801      	ldr	r0, [pc, #4]	; (8005c18 <__sfp_lock_release+0x8>)
 8005c12:	f000 b8ae 	b.w	8005d72 <__retarget_lock_release_recursive>
 8005c16:	bf00      	nop
 8005c18:	200004d5 	.word	0x200004d5

08005c1c <__sinit_lock_acquire>:
 8005c1c:	4801      	ldr	r0, [pc, #4]	; (8005c24 <__sinit_lock_acquire+0x8>)
 8005c1e:	f000 b8a7 	b.w	8005d70 <__retarget_lock_acquire_recursive>
 8005c22:	bf00      	nop
 8005c24:	200004d6 	.word	0x200004d6

08005c28 <__sinit_lock_release>:
 8005c28:	4801      	ldr	r0, [pc, #4]	; (8005c30 <__sinit_lock_release+0x8>)
 8005c2a:	f000 b8a2 	b.w	8005d72 <__retarget_lock_release_recursive>
 8005c2e:	bf00      	nop
 8005c30:	200004d6 	.word	0x200004d6

08005c34 <__sinit>:
 8005c34:	b510      	push	{r4, lr}
 8005c36:	4604      	mov	r4, r0
 8005c38:	f7ff fff0 	bl	8005c1c <__sinit_lock_acquire>
 8005c3c:	69a3      	ldr	r3, [r4, #24]
 8005c3e:	b11b      	cbz	r3, 8005c48 <__sinit+0x14>
 8005c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c44:	f7ff bff0 	b.w	8005c28 <__sinit_lock_release>
 8005c48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c4c:	6523      	str	r3, [r4, #80]	; 0x50
 8005c4e:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <__sinit+0x68>)
 8005c50:	4a13      	ldr	r2, [pc, #76]	; (8005ca0 <__sinit+0x6c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c56:	42a3      	cmp	r3, r4
 8005c58:	bf04      	itt	eq
 8005c5a:	2301      	moveq	r3, #1
 8005c5c:	61a3      	streq	r3, [r4, #24]
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f000 f820 	bl	8005ca4 <__sfp>
 8005c64:	6060      	str	r0, [r4, #4]
 8005c66:	4620      	mov	r0, r4
 8005c68:	f000 f81c 	bl	8005ca4 <__sfp>
 8005c6c:	60a0      	str	r0, [r4, #8]
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f000 f818 	bl	8005ca4 <__sfp>
 8005c74:	2200      	movs	r2, #0
 8005c76:	60e0      	str	r0, [r4, #12]
 8005c78:	2104      	movs	r1, #4
 8005c7a:	6860      	ldr	r0, [r4, #4]
 8005c7c:	f7ff ff82 	bl	8005b84 <std>
 8005c80:	68a0      	ldr	r0, [r4, #8]
 8005c82:	2201      	movs	r2, #1
 8005c84:	2109      	movs	r1, #9
 8005c86:	f7ff ff7d 	bl	8005b84 <std>
 8005c8a:	68e0      	ldr	r0, [r4, #12]
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	2112      	movs	r1, #18
 8005c90:	f7ff ff78 	bl	8005b84 <std>
 8005c94:	2301      	movs	r3, #1
 8005c96:	61a3      	str	r3, [r4, #24]
 8005c98:	e7d2      	b.n	8005c40 <__sinit+0xc>
 8005c9a:	bf00      	nop
 8005c9c:	080070e8 	.word	0x080070e8
 8005ca0:	08005bcd 	.word	0x08005bcd

08005ca4 <__sfp>:
 8005ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca6:	4607      	mov	r7, r0
 8005ca8:	f7ff ffac 	bl	8005c04 <__sfp_lock_acquire>
 8005cac:	4b1e      	ldr	r3, [pc, #120]	; (8005d28 <__sfp+0x84>)
 8005cae:	681e      	ldr	r6, [r3, #0]
 8005cb0:	69b3      	ldr	r3, [r6, #24]
 8005cb2:	b913      	cbnz	r3, 8005cba <__sfp+0x16>
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	f7ff ffbd 	bl	8005c34 <__sinit>
 8005cba:	3648      	adds	r6, #72	; 0x48
 8005cbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	d503      	bpl.n	8005ccc <__sfp+0x28>
 8005cc4:	6833      	ldr	r3, [r6, #0]
 8005cc6:	b30b      	cbz	r3, 8005d0c <__sfp+0x68>
 8005cc8:	6836      	ldr	r6, [r6, #0]
 8005cca:	e7f7      	b.n	8005cbc <__sfp+0x18>
 8005ccc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cd0:	b9d5      	cbnz	r5, 8005d08 <__sfp+0x64>
 8005cd2:	4b16      	ldr	r3, [pc, #88]	; (8005d2c <__sfp+0x88>)
 8005cd4:	60e3      	str	r3, [r4, #12]
 8005cd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cda:	6665      	str	r5, [r4, #100]	; 0x64
 8005cdc:	f000 f847 	bl	8005d6e <__retarget_lock_init_recursive>
 8005ce0:	f7ff ff96 	bl	8005c10 <__sfp_lock_release>
 8005ce4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ce8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005cec:	6025      	str	r5, [r4, #0]
 8005cee:	61a5      	str	r5, [r4, #24]
 8005cf0:	2208      	movs	r2, #8
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cf8:	f7ff fd0e 	bl	8005718 <memset>
 8005cfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d04:	4620      	mov	r0, r4
 8005d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d08:	3468      	adds	r4, #104	; 0x68
 8005d0a:	e7d9      	b.n	8005cc0 <__sfp+0x1c>
 8005d0c:	2104      	movs	r1, #4
 8005d0e:	4638      	mov	r0, r7
 8005d10:	f7ff ff62 	bl	8005bd8 <__sfmoreglue>
 8005d14:	4604      	mov	r4, r0
 8005d16:	6030      	str	r0, [r6, #0]
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d1d5      	bne.n	8005cc8 <__sfp+0x24>
 8005d1c:	f7ff ff78 	bl	8005c10 <__sfp_lock_release>
 8005d20:	230c      	movs	r3, #12
 8005d22:	603b      	str	r3, [r7, #0]
 8005d24:	e7ee      	b.n	8005d04 <__sfp+0x60>
 8005d26:	bf00      	nop
 8005d28:	080070e8 	.word	0x080070e8
 8005d2c:	ffff0001 	.word	0xffff0001

08005d30 <_fwalk_reent>:
 8005d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d34:	4606      	mov	r6, r0
 8005d36:	4688      	mov	r8, r1
 8005d38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d3c:	2700      	movs	r7, #0
 8005d3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d42:	f1b9 0901 	subs.w	r9, r9, #1
 8005d46:	d505      	bpl.n	8005d54 <_fwalk_reent+0x24>
 8005d48:	6824      	ldr	r4, [r4, #0]
 8005d4a:	2c00      	cmp	r4, #0
 8005d4c:	d1f7      	bne.n	8005d3e <_fwalk_reent+0xe>
 8005d4e:	4638      	mov	r0, r7
 8005d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d54:	89ab      	ldrh	r3, [r5, #12]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d907      	bls.n	8005d6a <_fwalk_reent+0x3a>
 8005d5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	d003      	beq.n	8005d6a <_fwalk_reent+0x3a>
 8005d62:	4629      	mov	r1, r5
 8005d64:	4630      	mov	r0, r6
 8005d66:	47c0      	blx	r8
 8005d68:	4307      	orrs	r7, r0
 8005d6a:	3568      	adds	r5, #104	; 0x68
 8005d6c:	e7e9      	b.n	8005d42 <_fwalk_reent+0x12>

08005d6e <__retarget_lock_init_recursive>:
 8005d6e:	4770      	bx	lr

08005d70 <__retarget_lock_acquire_recursive>:
 8005d70:	4770      	bx	lr

08005d72 <__retarget_lock_release_recursive>:
 8005d72:	4770      	bx	lr

08005d74 <_lseek_r>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	4d07      	ldr	r5, [pc, #28]	; (8005d94 <_lseek_r+0x20>)
 8005d78:	4604      	mov	r4, r0
 8005d7a:	4608      	mov	r0, r1
 8005d7c:	4611      	mov	r1, r2
 8005d7e:	2200      	movs	r2, #0
 8005d80:	602a      	str	r2, [r5, #0]
 8005d82:	461a      	mov	r2, r3
 8005d84:	f7fb fb8c 	bl	80014a0 <_lseek>
 8005d88:	1c43      	adds	r3, r0, #1
 8005d8a:	d102      	bne.n	8005d92 <_lseek_r+0x1e>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	b103      	cbz	r3, 8005d92 <_lseek_r+0x1e>
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	200004e0 	.word	0x200004e0

08005d98 <__swhatbuf_r>:
 8005d98:	b570      	push	{r4, r5, r6, lr}
 8005d9a:	460e      	mov	r6, r1
 8005d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da0:	2900      	cmp	r1, #0
 8005da2:	b096      	sub	sp, #88	; 0x58
 8005da4:	4614      	mov	r4, r2
 8005da6:	461d      	mov	r5, r3
 8005da8:	da08      	bge.n	8005dbc <__swhatbuf_r+0x24>
 8005daa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	602a      	str	r2, [r5, #0]
 8005db2:	061a      	lsls	r2, r3, #24
 8005db4:	d410      	bmi.n	8005dd8 <__swhatbuf_r+0x40>
 8005db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dba:	e00e      	b.n	8005dda <__swhatbuf_r+0x42>
 8005dbc:	466a      	mov	r2, sp
 8005dbe:	f001 f8cf 	bl	8006f60 <_fstat_r>
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	dbf1      	blt.n	8005daa <__swhatbuf_r+0x12>
 8005dc6:	9a01      	ldr	r2, [sp, #4]
 8005dc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005dcc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005dd0:	425a      	negs	r2, r3
 8005dd2:	415a      	adcs	r2, r3
 8005dd4:	602a      	str	r2, [r5, #0]
 8005dd6:	e7ee      	b.n	8005db6 <__swhatbuf_r+0x1e>
 8005dd8:	2340      	movs	r3, #64	; 0x40
 8005dda:	2000      	movs	r0, #0
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	b016      	add	sp, #88	; 0x58
 8005de0:	bd70      	pop	{r4, r5, r6, pc}
	...

08005de4 <__smakebuf_r>:
 8005de4:	898b      	ldrh	r3, [r1, #12]
 8005de6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005de8:	079d      	lsls	r5, r3, #30
 8005dea:	4606      	mov	r6, r0
 8005dec:	460c      	mov	r4, r1
 8005dee:	d507      	bpl.n	8005e00 <__smakebuf_r+0x1c>
 8005df0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	6123      	str	r3, [r4, #16]
 8005df8:	2301      	movs	r3, #1
 8005dfa:	6163      	str	r3, [r4, #20]
 8005dfc:	b002      	add	sp, #8
 8005dfe:	bd70      	pop	{r4, r5, r6, pc}
 8005e00:	ab01      	add	r3, sp, #4
 8005e02:	466a      	mov	r2, sp
 8005e04:	f7ff ffc8 	bl	8005d98 <__swhatbuf_r>
 8005e08:	9900      	ldr	r1, [sp, #0]
 8005e0a:	4605      	mov	r5, r0
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f000 f895 	bl	8005f3c <_malloc_r>
 8005e12:	b948      	cbnz	r0, 8005e28 <__smakebuf_r+0x44>
 8005e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e18:	059a      	lsls	r2, r3, #22
 8005e1a:	d4ef      	bmi.n	8005dfc <__smakebuf_r+0x18>
 8005e1c:	f023 0303 	bic.w	r3, r3, #3
 8005e20:	f043 0302 	orr.w	r3, r3, #2
 8005e24:	81a3      	strh	r3, [r4, #12]
 8005e26:	e7e3      	b.n	8005df0 <__smakebuf_r+0xc>
 8005e28:	4b0d      	ldr	r3, [pc, #52]	; (8005e60 <__smakebuf_r+0x7c>)
 8005e2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	6020      	str	r0, [r4, #0]
 8005e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e34:	81a3      	strh	r3, [r4, #12]
 8005e36:	9b00      	ldr	r3, [sp, #0]
 8005e38:	6163      	str	r3, [r4, #20]
 8005e3a:	9b01      	ldr	r3, [sp, #4]
 8005e3c:	6120      	str	r0, [r4, #16]
 8005e3e:	b15b      	cbz	r3, 8005e58 <__smakebuf_r+0x74>
 8005e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e44:	4630      	mov	r0, r6
 8005e46:	f001 f89d 	bl	8006f84 <_isatty_r>
 8005e4a:	b128      	cbz	r0, 8005e58 <__smakebuf_r+0x74>
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	f023 0303 	bic.w	r3, r3, #3
 8005e52:	f043 0301 	orr.w	r3, r3, #1
 8005e56:	81a3      	strh	r3, [r4, #12]
 8005e58:	89a0      	ldrh	r0, [r4, #12]
 8005e5a:	4305      	orrs	r5, r0
 8005e5c:	81a5      	strh	r5, [r4, #12]
 8005e5e:	e7cd      	b.n	8005dfc <__smakebuf_r+0x18>
 8005e60:	08005bcd 	.word	0x08005bcd

08005e64 <_free_r>:
 8005e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e66:	2900      	cmp	r1, #0
 8005e68:	d044      	beq.n	8005ef4 <_free_r+0x90>
 8005e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e6e:	9001      	str	r0, [sp, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f1a1 0404 	sub.w	r4, r1, #4
 8005e76:	bfb8      	it	lt
 8005e78:	18e4      	addlt	r4, r4, r3
 8005e7a:	f001 f8a1 	bl	8006fc0 <__malloc_lock>
 8005e7e:	4a1e      	ldr	r2, [pc, #120]	; (8005ef8 <_free_r+0x94>)
 8005e80:	9801      	ldr	r0, [sp, #4]
 8005e82:	6813      	ldr	r3, [r2, #0]
 8005e84:	b933      	cbnz	r3, 8005e94 <_free_r+0x30>
 8005e86:	6063      	str	r3, [r4, #4]
 8005e88:	6014      	str	r4, [r2, #0]
 8005e8a:	b003      	add	sp, #12
 8005e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e90:	f001 b89c 	b.w	8006fcc <__malloc_unlock>
 8005e94:	42a3      	cmp	r3, r4
 8005e96:	d908      	bls.n	8005eaa <_free_r+0x46>
 8005e98:	6825      	ldr	r5, [r4, #0]
 8005e9a:	1961      	adds	r1, r4, r5
 8005e9c:	428b      	cmp	r3, r1
 8005e9e:	bf01      	itttt	eq
 8005ea0:	6819      	ldreq	r1, [r3, #0]
 8005ea2:	685b      	ldreq	r3, [r3, #4]
 8005ea4:	1949      	addeq	r1, r1, r5
 8005ea6:	6021      	streq	r1, [r4, #0]
 8005ea8:	e7ed      	b.n	8005e86 <_free_r+0x22>
 8005eaa:	461a      	mov	r2, r3
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	b10b      	cbz	r3, 8005eb4 <_free_r+0x50>
 8005eb0:	42a3      	cmp	r3, r4
 8005eb2:	d9fa      	bls.n	8005eaa <_free_r+0x46>
 8005eb4:	6811      	ldr	r1, [r2, #0]
 8005eb6:	1855      	adds	r5, r2, r1
 8005eb8:	42a5      	cmp	r5, r4
 8005eba:	d10b      	bne.n	8005ed4 <_free_r+0x70>
 8005ebc:	6824      	ldr	r4, [r4, #0]
 8005ebe:	4421      	add	r1, r4
 8005ec0:	1854      	adds	r4, r2, r1
 8005ec2:	42a3      	cmp	r3, r4
 8005ec4:	6011      	str	r1, [r2, #0]
 8005ec6:	d1e0      	bne.n	8005e8a <_free_r+0x26>
 8005ec8:	681c      	ldr	r4, [r3, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	6053      	str	r3, [r2, #4]
 8005ece:	4421      	add	r1, r4
 8005ed0:	6011      	str	r1, [r2, #0]
 8005ed2:	e7da      	b.n	8005e8a <_free_r+0x26>
 8005ed4:	d902      	bls.n	8005edc <_free_r+0x78>
 8005ed6:	230c      	movs	r3, #12
 8005ed8:	6003      	str	r3, [r0, #0]
 8005eda:	e7d6      	b.n	8005e8a <_free_r+0x26>
 8005edc:	6825      	ldr	r5, [r4, #0]
 8005ede:	1961      	adds	r1, r4, r5
 8005ee0:	428b      	cmp	r3, r1
 8005ee2:	bf04      	itt	eq
 8005ee4:	6819      	ldreq	r1, [r3, #0]
 8005ee6:	685b      	ldreq	r3, [r3, #4]
 8005ee8:	6063      	str	r3, [r4, #4]
 8005eea:	bf04      	itt	eq
 8005eec:	1949      	addeq	r1, r1, r5
 8005eee:	6021      	streq	r1, [r4, #0]
 8005ef0:	6054      	str	r4, [r2, #4]
 8005ef2:	e7ca      	b.n	8005e8a <_free_r+0x26>
 8005ef4:	b003      	add	sp, #12
 8005ef6:	bd30      	pop	{r4, r5, pc}
 8005ef8:	200004d8 	.word	0x200004d8

08005efc <sbrk_aligned>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	4e0e      	ldr	r6, [pc, #56]	; (8005f38 <sbrk_aligned+0x3c>)
 8005f00:	460c      	mov	r4, r1
 8005f02:	6831      	ldr	r1, [r6, #0]
 8005f04:	4605      	mov	r5, r0
 8005f06:	b911      	cbnz	r1, 8005f0e <sbrk_aligned+0x12>
 8005f08:	f000 feb0 	bl	8006c6c <_sbrk_r>
 8005f0c:	6030      	str	r0, [r6, #0]
 8005f0e:	4621      	mov	r1, r4
 8005f10:	4628      	mov	r0, r5
 8005f12:	f000 feab 	bl	8006c6c <_sbrk_r>
 8005f16:	1c43      	adds	r3, r0, #1
 8005f18:	d00a      	beq.n	8005f30 <sbrk_aligned+0x34>
 8005f1a:	1cc4      	adds	r4, r0, #3
 8005f1c:	f024 0403 	bic.w	r4, r4, #3
 8005f20:	42a0      	cmp	r0, r4
 8005f22:	d007      	beq.n	8005f34 <sbrk_aligned+0x38>
 8005f24:	1a21      	subs	r1, r4, r0
 8005f26:	4628      	mov	r0, r5
 8005f28:	f000 fea0 	bl	8006c6c <_sbrk_r>
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	d101      	bne.n	8005f34 <sbrk_aligned+0x38>
 8005f30:	f04f 34ff 	mov.w	r4, #4294967295
 8005f34:	4620      	mov	r0, r4
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	200004dc 	.word	0x200004dc

08005f3c <_malloc_r>:
 8005f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f40:	1ccd      	adds	r5, r1, #3
 8005f42:	f025 0503 	bic.w	r5, r5, #3
 8005f46:	3508      	adds	r5, #8
 8005f48:	2d0c      	cmp	r5, #12
 8005f4a:	bf38      	it	cc
 8005f4c:	250c      	movcc	r5, #12
 8005f4e:	2d00      	cmp	r5, #0
 8005f50:	4607      	mov	r7, r0
 8005f52:	db01      	blt.n	8005f58 <_malloc_r+0x1c>
 8005f54:	42a9      	cmp	r1, r5
 8005f56:	d905      	bls.n	8005f64 <_malloc_r+0x28>
 8005f58:	230c      	movs	r3, #12
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	2600      	movs	r6, #0
 8005f5e:	4630      	mov	r0, r6
 8005f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f64:	4e2e      	ldr	r6, [pc, #184]	; (8006020 <_malloc_r+0xe4>)
 8005f66:	f001 f82b 	bl	8006fc0 <__malloc_lock>
 8005f6a:	6833      	ldr	r3, [r6, #0]
 8005f6c:	461c      	mov	r4, r3
 8005f6e:	bb34      	cbnz	r4, 8005fbe <_malloc_r+0x82>
 8005f70:	4629      	mov	r1, r5
 8005f72:	4638      	mov	r0, r7
 8005f74:	f7ff ffc2 	bl	8005efc <sbrk_aligned>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	d14d      	bne.n	800601a <_malloc_r+0xde>
 8005f7e:	6834      	ldr	r4, [r6, #0]
 8005f80:	4626      	mov	r6, r4
 8005f82:	2e00      	cmp	r6, #0
 8005f84:	d140      	bne.n	8006008 <_malloc_r+0xcc>
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	4631      	mov	r1, r6
 8005f8a:	4638      	mov	r0, r7
 8005f8c:	eb04 0803 	add.w	r8, r4, r3
 8005f90:	f000 fe6c 	bl	8006c6c <_sbrk_r>
 8005f94:	4580      	cmp	r8, r0
 8005f96:	d13a      	bne.n	800600e <_malloc_r+0xd2>
 8005f98:	6821      	ldr	r1, [r4, #0]
 8005f9a:	3503      	adds	r5, #3
 8005f9c:	1a6d      	subs	r5, r5, r1
 8005f9e:	f025 0503 	bic.w	r5, r5, #3
 8005fa2:	3508      	adds	r5, #8
 8005fa4:	2d0c      	cmp	r5, #12
 8005fa6:	bf38      	it	cc
 8005fa8:	250c      	movcc	r5, #12
 8005faa:	4629      	mov	r1, r5
 8005fac:	4638      	mov	r0, r7
 8005fae:	f7ff ffa5 	bl	8005efc <sbrk_aligned>
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	d02b      	beq.n	800600e <_malloc_r+0xd2>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	442b      	add	r3, r5
 8005fba:	6023      	str	r3, [r4, #0]
 8005fbc:	e00e      	b.n	8005fdc <_malloc_r+0xa0>
 8005fbe:	6822      	ldr	r2, [r4, #0]
 8005fc0:	1b52      	subs	r2, r2, r5
 8005fc2:	d41e      	bmi.n	8006002 <_malloc_r+0xc6>
 8005fc4:	2a0b      	cmp	r2, #11
 8005fc6:	d916      	bls.n	8005ff6 <_malloc_r+0xba>
 8005fc8:	1961      	adds	r1, r4, r5
 8005fca:	42a3      	cmp	r3, r4
 8005fcc:	6025      	str	r5, [r4, #0]
 8005fce:	bf18      	it	ne
 8005fd0:	6059      	strne	r1, [r3, #4]
 8005fd2:	6863      	ldr	r3, [r4, #4]
 8005fd4:	bf08      	it	eq
 8005fd6:	6031      	streq	r1, [r6, #0]
 8005fd8:	5162      	str	r2, [r4, r5]
 8005fda:	604b      	str	r3, [r1, #4]
 8005fdc:	4638      	mov	r0, r7
 8005fde:	f104 060b 	add.w	r6, r4, #11
 8005fe2:	f000 fff3 	bl	8006fcc <__malloc_unlock>
 8005fe6:	f026 0607 	bic.w	r6, r6, #7
 8005fea:	1d23      	adds	r3, r4, #4
 8005fec:	1af2      	subs	r2, r6, r3
 8005fee:	d0b6      	beq.n	8005f5e <_malloc_r+0x22>
 8005ff0:	1b9b      	subs	r3, r3, r6
 8005ff2:	50a3      	str	r3, [r4, r2]
 8005ff4:	e7b3      	b.n	8005f5e <_malloc_r+0x22>
 8005ff6:	6862      	ldr	r2, [r4, #4]
 8005ff8:	42a3      	cmp	r3, r4
 8005ffa:	bf0c      	ite	eq
 8005ffc:	6032      	streq	r2, [r6, #0]
 8005ffe:	605a      	strne	r2, [r3, #4]
 8006000:	e7ec      	b.n	8005fdc <_malloc_r+0xa0>
 8006002:	4623      	mov	r3, r4
 8006004:	6864      	ldr	r4, [r4, #4]
 8006006:	e7b2      	b.n	8005f6e <_malloc_r+0x32>
 8006008:	4634      	mov	r4, r6
 800600a:	6876      	ldr	r6, [r6, #4]
 800600c:	e7b9      	b.n	8005f82 <_malloc_r+0x46>
 800600e:	230c      	movs	r3, #12
 8006010:	603b      	str	r3, [r7, #0]
 8006012:	4638      	mov	r0, r7
 8006014:	f000 ffda 	bl	8006fcc <__malloc_unlock>
 8006018:	e7a1      	b.n	8005f5e <_malloc_r+0x22>
 800601a:	6025      	str	r5, [r4, #0]
 800601c:	e7de      	b.n	8005fdc <_malloc_r+0xa0>
 800601e:	bf00      	nop
 8006020:	200004d8 	.word	0x200004d8

08006024 <_sungetc_r>:
 8006024:	b538      	push	{r3, r4, r5, lr}
 8006026:	1c4b      	adds	r3, r1, #1
 8006028:	4614      	mov	r4, r2
 800602a:	d103      	bne.n	8006034 <_sungetc_r+0x10>
 800602c:	f04f 35ff 	mov.w	r5, #4294967295
 8006030:	4628      	mov	r0, r5
 8006032:	bd38      	pop	{r3, r4, r5, pc}
 8006034:	8993      	ldrh	r3, [r2, #12]
 8006036:	f023 0320 	bic.w	r3, r3, #32
 800603a:	8193      	strh	r3, [r2, #12]
 800603c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800603e:	6852      	ldr	r2, [r2, #4]
 8006040:	b2cd      	uxtb	r5, r1
 8006042:	b18b      	cbz	r3, 8006068 <_sungetc_r+0x44>
 8006044:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006046:	4293      	cmp	r3, r2
 8006048:	dd08      	ble.n	800605c <_sungetc_r+0x38>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	1e5a      	subs	r2, r3, #1
 800604e:	6022      	str	r2, [r4, #0]
 8006050:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006054:	6863      	ldr	r3, [r4, #4]
 8006056:	3301      	adds	r3, #1
 8006058:	6063      	str	r3, [r4, #4]
 800605a:	e7e9      	b.n	8006030 <_sungetc_r+0xc>
 800605c:	4621      	mov	r1, r4
 800605e:	f000 ff45 	bl	8006eec <__submore>
 8006062:	2800      	cmp	r0, #0
 8006064:	d0f1      	beq.n	800604a <_sungetc_r+0x26>
 8006066:	e7e1      	b.n	800602c <_sungetc_r+0x8>
 8006068:	6921      	ldr	r1, [r4, #16]
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	b151      	cbz	r1, 8006084 <_sungetc_r+0x60>
 800606e:	4299      	cmp	r1, r3
 8006070:	d208      	bcs.n	8006084 <_sungetc_r+0x60>
 8006072:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006076:	42a9      	cmp	r1, r5
 8006078:	d104      	bne.n	8006084 <_sungetc_r+0x60>
 800607a:	3b01      	subs	r3, #1
 800607c:	3201      	adds	r2, #1
 800607e:	6023      	str	r3, [r4, #0]
 8006080:	6062      	str	r2, [r4, #4]
 8006082:	e7d5      	b.n	8006030 <_sungetc_r+0xc>
 8006084:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800608c:	6363      	str	r3, [r4, #52]	; 0x34
 800608e:	2303      	movs	r3, #3
 8006090:	63a3      	str	r3, [r4, #56]	; 0x38
 8006092:	4623      	mov	r3, r4
 8006094:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006098:	6023      	str	r3, [r4, #0]
 800609a:	2301      	movs	r3, #1
 800609c:	e7dc      	b.n	8006058 <_sungetc_r+0x34>

0800609e <__ssrefill_r>:
 800609e:	b510      	push	{r4, lr}
 80060a0:	460c      	mov	r4, r1
 80060a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80060a4:	b169      	cbz	r1, 80060c2 <__ssrefill_r+0x24>
 80060a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060aa:	4299      	cmp	r1, r3
 80060ac:	d001      	beq.n	80060b2 <__ssrefill_r+0x14>
 80060ae:	f7ff fed9 	bl	8005e64 <_free_r>
 80060b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060b4:	6063      	str	r3, [r4, #4]
 80060b6:	2000      	movs	r0, #0
 80060b8:	6360      	str	r0, [r4, #52]	; 0x34
 80060ba:	b113      	cbz	r3, 80060c2 <__ssrefill_r+0x24>
 80060bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80060be:	6023      	str	r3, [r4, #0]
 80060c0:	bd10      	pop	{r4, pc}
 80060c2:	6923      	ldr	r3, [r4, #16]
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	2300      	movs	r3, #0
 80060c8:	6063      	str	r3, [r4, #4]
 80060ca:	89a3      	ldrh	r3, [r4, #12]
 80060cc:	f043 0320 	orr.w	r3, r3, #32
 80060d0:	81a3      	strh	r3, [r4, #12]
 80060d2:	f04f 30ff 	mov.w	r0, #4294967295
 80060d6:	e7f3      	b.n	80060c0 <__ssrefill_r+0x22>

080060d8 <__ssvfiscanf_r>:
 80060d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060dc:	460c      	mov	r4, r1
 80060de:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80060e2:	2100      	movs	r1, #0
 80060e4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80060e8:	49a6      	ldr	r1, [pc, #664]	; (8006384 <__ssvfiscanf_r+0x2ac>)
 80060ea:	91a0      	str	r1, [sp, #640]	; 0x280
 80060ec:	f10d 0804 	add.w	r8, sp, #4
 80060f0:	49a5      	ldr	r1, [pc, #660]	; (8006388 <__ssvfiscanf_r+0x2b0>)
 80060f2:	4fa6      	ldr	r7, [pc, #664]	; (800638c <__ssvfiscanf_r+0x2b4>)
 80060f4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006390 <__ssvfiscanf_r+0x2b8>
 80060f8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80060fc:	4606      	mov	r6, r0
 80060fe:	91a1      	str	r1, [sp, #644]	; 0x284
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	7813      	ldrb	r3, [r2, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 815a 	beq.w	80063be <__ssvfiscanf_r+0x2e6>
 800610a:	5dd9      	ldrb	r1, [r3, r7]
 800610c:	f011 0108 	ands.w	r1, r1, #8
 8006110:	f102 0501 	add.w	r5, r2, #1
 8006114:	d019      	beq.n	800614a <__ssvfiscanf_r+0x72>
 8006116:	6863      	ldr	r3, [r4, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	dd0f      	ble.n	800613c <__ssvfiscanf_r+0x64>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	781a      	ldrb	r2, [r3, #0]
 8006120:	5cba      	ldrb	r2, [r7, r2]
 8006122:	0712      	lsls	r2, r2, #28
 8006124:	d401      	bmi.n	800612a <__ssvfiscanf_r+0x52>
 8006126:	462a      	mov	r2, r5
 8006128:	e7eb      	b.n	8006102 <__ssvfiscanf_r+0x2a>
 800612a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800612c:	3201      	adds	r2, #1
 800612e:	9245      	str	r2, [sp, #276]	; 0x114
 8006130:	6862      	ldr	r2, [r4, #4]
 8006132:	3301      	adds	r3, #1
 8006134:	3a01      	subs	r2, #1
 8006136:	6062      	str	r2, [r4, #4]
 8006138:	6023      	str	r3, [r4, #0]
 800613a:	e7ec      	b.n	8006116 <__ssvfiscanf_r+0x3e>
 800613c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800613e:	4621      	mov	r1, r4
 8006140:	4630      	mov	r0, r6
 8006142:	4798      	blx	r3
 8006144:	2800      	cmp	r0, #0
 8006146:	d0e9      	beq.n	800611c <__ssvfiscanf_r+0x44>
 8006148:	e7ed      	b.n	8006126 <__ssvfiscanf_r+0x4e>
 800614a:	2b25      	cmp	r3, #37	; 0x25
 800614c:	d012      	beq.n	8006174 <__ssvfiscanf_r+0x9c>
 800614e:	469a      	mov	sl, r3
 8006150:	6863      	ldr	r3, [r4, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	f340 8091 	ble.w	800627a <__ssvfiscanf_r+0x1a2>
 8006158:	6822      	ldr	r2, [r4, #0]
 800615a:	7813      	ldrb	r3, [r2, #0]
 800615c:	4553      	cmp	r3, sl
 800615e:	f040 812e 	bne.w	80063be <__ssvfiscanf_r+0x2e6>
 8006162:	6863      	ldr	r3, [r4, #4]
 8006164:	3b01      	subs	r3, #1
 8006166:	6063      	str	r3, [r4, #4]
 8006168:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800616a:	3201      	adds	r2, #1
 800616c:	3301      	adds	r3, #1
 800616e:	6022      	str	r2, [r4, #0]
 8006170:	9345      	str	r3, [sp, #276]	; 0x114
 8006172:	e7d8      	b.n	8006126 <__ssvfiscanf_r+0x4e>
 8006174:	9141      	str	r1, [sp, #260]	; 0x104
 8006176:	9143      	str	r1, [sp, #268]	; 0x10c
 8006178:	7853      	ldrb	r3, [r2, #1]
 800617a:	2b2a      	cmp	r3, #42	; 0x2a
 800617c:	bf02      	ittt	eq
 800617e:	2310      	moveq	r3, #16
 8006180:	1c95      	addeq	r5, r2, #2
 8006182:	9341      	streq	r3, [sp, #260]	; 0x104
 8006184:	220a      	movs	r2, #10
 8006186:	46aa      	mov	sl, r5
 8006188:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800618c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006190:	2b09      	cmp	r3, #9
 8006192:	d91d      	bls.n	80061d0 <__ssvfiscanf_r+0xf8>
 8006194:	487e      	ldr	r0, [pc, #504]	; (8006390 <__ssvfiscanf_r+0x2b8>)
 8006196:	2203      	movs	r2, #3
 8006198:	f7fa f832 	bl	8000200 <memchr>
 800619c:	b140      	cbz	r0, 80061b0 <__ssvfiscanf_r+0xd8>
 800619e:	2301      	movs	r3, #1
 80061a0:	eba0 0009 	sub.w	r0, r0, r9
 80061a4:	fa03 f000 	lsl.w	r0, r3, r0
 80061a8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80061aa:	4318      	orrs	r0, r3
 80061ac:	9041      	str	r0, [sp, #260]	; 0x104
 80061ae:	4655      	mov	r5, sl
 80061b0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80061b4:	2b78      	cmp	r3, #120	; 0x78
 80061b6:	d806      	bhi.n	80061c6 <__ssvfiscanf_r+0xee>
 80061b8:	2b57      	cmp	r3, #87	; 0x57
 80061ba:	d810      	bhi.n	80061de <__ssvfiscanf_r+0x106>
 80061bc:	2b25      	cmp	r3, #37	; 0x25
 80061be:	d0c6      	beq.n	800614e <__ssvfiscanf_r+0x76>
 80061c0:	d856      	bhi.n	8006270 <__ssvfiscanf_r+0x198>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d064      	beq.n	8006290 <__ssvfiscanf_r+0x1b8>
 80061c6:	2303      	movs	r3, #3
 80061c8:	9347      	str	r3, [sp, #284]	; 0x11c
 80061ca:	230a      	movs	r3, #10
 80061cc:	9342      	str	r3, [sp, #264]	; 0x108
 80061ce:	e071      	b.n	80062b4 <__ssvfiscanf_r+0x1dc>
 80061d0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80061d2:	fb02 1103 	mla	r1, r2, r3, r1
 80061d6:	3930      	subs	r1, #48	; 0x30
 80061d8:	9143      	str	r1, [sp, #268]	; 0x10c
 80061da:	4655      	mov	r5, sl
 80061dc:	e7d3      	b.n	8006186 <__ssvfiscanf_r+0xae>
 80061de:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80061e2:	2a20      	cmp	r2, #32
 80061e4:	d8ef      	bhi.n	80061c6 <__ssvfiscanf_r+0xee>
 80061e6:	a101      	add	r1, pc, #4	; (adr r1, 80061ec <__ssvfiscanf_r+0x114>)
 80061e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80061ec:	0800629f 	.word	0x0800629f
 80061f0:	080061c7 	.word	0x080061c7
 80061f4:	080061c7 	.word	0x080061c7
 80061f8:	080062fd 	.word	0x080062fd
 80061fc:	080061c7 	.word	0x080061c7
 8006200:	080061c7 	.word	0x080061c7
 8006204:	080061c7 	.word	0x080061c7
 8006208:	080061c7 	.word	0x080061c7
 800620c:	080061c7 	.word	0x080061c7
 8006210:	080061c7 	.word	0x080061c7
 8006214:	080061c7 	.word	0x080061c7
 8006218:	08006313 	.word	0x08006313
 800621c:	080062e9 	.word	0x080062e9
 8006220:	08006277 	.word	0x08006277
 8006224:	08006277 	.word	0x08006277
 8006228:	08006277 	.word	0x08006277
 800622c:	080061c7 	.word	0x080061c7
 8006230:	080062ed 	.word	0x080062ed
 8006234:	080061c7 	.word	0x080061c7
 8006238:	080061c7 	.word	0x080061c7
 800623c:	080061c7 	.word	0x080061c7
 8006240:	080061c7 	.word	0x080061c7
 8006244:	08006323 	.word	0x08006323
 8006248:	080062f5 	.word	0x080062f5
 800624c:	08006297 	.word	0x08006297
 8006250:	080061c7 	.word	0x080061c7
 8006254:	080061c7 	.word	0x080061c7
 8006258:	0800631f 	.word	0x0800631f
 800625c:	080061c7 	.word	0x080061c7
 8006260:	080062e9 	.word	0x080062e9
 8006264:	080061c7 	.word	0x080061c7
 8006268:	080061c7 	.word	0x080061c7
 800626c:	0800629f 	.word	0x0800629f
 8006270:	3b45      	subs	r3, #69	; 0x45
 8006272:	2b02      	cmp	r3, #2
 8006274:	d8a7      	bhi.n	80061c6 <__ssvfiscanf_r+0xee>
 8006276:	2305      	movs	r3, #5
 8006278:	e01b      	b.n	80062b2 <__ssvfiscanf_r+0x1da>
 800627a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800627c:	4621      	mov	r1, r4
 800627e:	4630      	mov	r0, r6
 8006280:	4798      	blx	r3
 8006282:	2800      	cmp	r0, #0
 8006284:	f43f af68 	beq.w	8006158 <__ssvfiscanf_r+0x80>
 8006288:	9844      	ldr	r0, [sp, #272]	; 0x110
 800628a:	2800      	cmp	r0, #0
 800628c:	f040 808d 	bne.w	80063aa <__ssvfiscanf_r+0x2d2>
 8006290:	f04f 30ff 	mov.w	r0, #4294967295
 8006294:	e08f      	b.n	80063b6 <__ssvfiscanf_r+0x2de>
 8006296:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006298:	f042 0220 	orr.w	r2, r2, #32
 800629c:	9241      	str	r2, [sp, #260]	; 0x104
 800629e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80062a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062a4:	9241      	str	r2, [sp, #260]	; 0x104
 80062a6:	2210      	movs	r2, #16
 80062a8:	2b6f      	cmp	r3, #111	; 0x6f
 80062aa:	9242      	str	r2, [sp, #264]	; 0x108
 80062ac:	bf34      	ite	cc
 80062ae:	2303      	movcc	r3, #3
 80062b0:	2304      	movcs	r3, #4
 80062b2:	9347      	str	r3, [sp, #284]	; 0x11c
 80062b4:	6863      	ldr	r3, [r4, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	dd42      	ble.n	8006340 <__ssvfiscanf_r+0x268>
 80062ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80062bc:	0659      	lsls	r1, r3, #25
 80062be:	d404      	bmi.n	80062ca <__ssvfiscanf_r+0x1f2>
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	781a      	ldrb	r2, [r3, #0]
 80062c4:	5cba      	ldrb	r2, [r7, r2]
 80062c6:	0712      	lsls	r2, r2, #28
 80062c8:	d441      	bmi.n	800634e <__ssvfiscanf_r+0x276>
 80062ca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	dc50      	bgt.n	8006372 <__ssvfiscanf_r+0x29a>
 80062d0:	466b      	mov	r3, sp
 80062d2:	4622      	mov	r2, r4
 80062d4:	a941      	add	r1, sp, #260	; 0x104
 80062d6:	4630      	mov	r0, r6
 80062d8:	f000 fb64 	bl	80069a4 <_scanf_chars>
 80062dc:	2801      	cmp	r0, #1
 80062de:	d06e      	beq.n	80063be <__ssvfiscanf_r+0x2e6>
 80062e0:	2802      	cmp	r0, #2
 80062e2:	f47f af20 	bne.w	8006126 <__ssvfiscanf_r+0x4e>
 80062e6:	e7cf      	b.n	8006288 <__ssvfiscanf_r+0x1b0>
 80062e8:	220a      	movs	r2, #10
 80062ea:	e7dd      	b.n	80062a8 <__ssvfiscanf_r+0x1d0>
 80062ec:	2300      	movs	r3, #0
 80062ee:	9342      	str	r3, [sp, #264]	; 0x108
 80062f0:	2303      	movs	r3, #3
 80062f2:	e7de      	b.n	80062b2 <__ssvfiscanf_r+0x1da>
 80062f4:	2308      	movs	r3, #8
 80062f6:	9342      	str	r3, [sp, #264]	; 0x108
 80062f8:	2304      	movs	r3, #4
 80062fa:	e7da      	b.n	80062b2 <__ssvfiscanf_r+0x1da>
 80062fc:	4629      	mov	r1, r5
 80062fe:	4640      	mov	r0, r8
 8006300:	f000 fcc4 	bl	8006c8c <__sccl>
 8006304:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800630a:	9341      	str	r3, [sp, #260]	; 0x104
 800630c:	4605      	mov	r5, r0
 800630e:	2301      	movs	r3, #1
 8006310:	e7cf      	b.n	80062b2 <__ssvfiscanf_r+0x1da>
 8006312:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006318:	9341      	str	r3, [sp, #260]	; 0x104
 800631a:	2300      	movs	r3, #0
 800631c:	e7c9      	b.n	80062b2 <__ssvfiscanf_r+0x1da>
 800631e:	2302      	movs	r3, #2
 8006320:	e7c7      	b.n	80062b2 <__ssvfiscanf_r+0x1da>
 8006322:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006324:	06c3      	lsls	r3, r0, #27
 8006326:	f53f aefe 	bmi.w	8006126 <__ssvfiscanf_r+0x4e>
 800632a:	9b00      	ldr	r3, [sp, #0]
 800632c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800632e:	1d19      	adds	r1, r3, #4
 8006330:	9100      	str	r1, [sp, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f010 0f01 	tst.w	r0, #1
 8006338:	bf14      	ite	ne
 800633a:	801a      	strhne	r2, [r3, #0]
 800633c:	601a      	streq	r2, [r3, #0]
 800633e:	e6f2      	b.n	8006126 <__ssvfiscanf_r+0x4e>
 8006340:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006342:	4621      	mov	r1, r4
 8006344:	4630      	mov	r0, r6
 8006346:	4798      	blx	r3
 8006348:	2800      	cmp	r0, #0
 800634a:	d0b6      	beq.n	80062ba <__ssvfiscanf_r+0x1e2>
 800634c:	e79c      	b.n	8006288 <__ssvfiscanf_r+0x1b0>
 800634e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006350:	3201      	adds	r2, #1
 8006352:	9245      	str	r2, [sp, #276]	; 0x114
 8006354:	6862      	ldr	r2, [r4, #4]
 8006356:	3a01      	subs	r2, #1
 8006358:	2a00      	cmp	r2, #0
 800635a:	6062      	str	r2, [r4, #4]
 800635c:	dd02      	ble.n	8006364 <__ssvfiscanf_r+0x28c>
 800635e:	3301      	adds	r3, #1
 8006360:	6023      	str	r3, [r4, #0]
 8006362:	e7ad      	b.n	80062c0 <__ssvfiscanf_r+0x1e8>
 8006364:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006366:	4621      	mov	r1, r4
 8006368:	4630      	mov	r0, r6
 800636a:	4798      	blx	r3
 800636c:	2800      	cmp	r0, #0
 800636e:	d0a7      	beq.n	80062c0 <__ssvfiscanf_r+0x1e8>
 8006370:	e78a      	b.n	8006288 <__ssvfiscanf_r+0x1b0>
 8006372:	2b04      	cmp	r3, #4
 8006374:	dc0e      	bgt.n	8006394 <__ssvfiscanf_r+0x2bc>
 8006376:	466b      	mov	r3, sp
 8006378:	4622      	mov	r2, r4
 800637a:	a941      	add	r1, sp, #260	; 0x104
 800637c:	4630      	mov	r0, r6
 800637e:	f000 fb6b 	bl	8006a58 <_scanf_i>
 8006382:	e7ab      	b.n	80062dc <__ssvfiscanf_r+0x204>
 8006384:	08006025 	.word	0x08006025
 8006388:	0800609f 	.word	0x0800609f
 800638c:	0800719b 	.word	0x0800719b
 8006390:	0800714c 	.word	0x0800714c
 8006394:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <__ssvfiscanf_r+0x2ec>)
 8006396:	2b00      	cmp	r3, #0
 8006398:	f43f aec5 	beq.w	8006126 <__ssvfiscanf_r+0x4e>
 800639c:	466b      	mov	r3, sp
 800639e:	4622      	mov	r2, r4
 80063a0:	a941      	add	r1, sp, #260	; 0x104
 80063a2:	4630      	mov	r0, r6
 80063a4:	f3af 8000 	nop.w
 80063a8:	e798      	b.n	80062dc <__ssvfiscanf_r+0x204>
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80063b0:	bf18      	it	ne
 80063b2:	f04f 30ff 	movne.w	r0, #4294967295
 80063b6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80063ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063be:	9844      	ldr	r0, [sp, #272]	; 0x110
 80063c0:	e7f9      	b.n	80063b6 <__ssvfiscanf_r+0x2de>
 80063c2:	bf00      	nop
 80063c4:	00000000 	.word	0x00000000

080063c8 <__sfputc_r>:
 80063c8:	6893      	ldr	r3, [r2, #8]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	b410      	push	{r4}
 80063d0:	6093      	str	r3, [r2, #8]
 80063d2:	da08      	bge.n	80063e6 <__sfputc_r+0x1e>
 80063d4:	6994      	ldr	r4, [r2, #24]
 80063d6:	42a3      	cmp	r3, r4
 80063d8:	db01      	blt.n	80063de <__sfputc_r+0x16>
 80063da:	290a      	cmp	r1, #10
 80063dc:	d103      	bne.n	80063e6 <__sfputc_r+0x1e>
 80063de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063e2:	f7ff ba2b 	b.w	800583c <__swbuf_r>
 80063e6:	6813      	ldr	r3, [r2, #0]
 80063e8:	1c58      	adds	r0, r3, #1
 80063ea:	6010      	str	r0, [r2, #0]
 80063ec:	7019      	strb	r1, [r3, #0]
 80063ee:	4608      	mov	r0, r1
 80063f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <__sfputs_r>:
 80063f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f8:	4606      	mov	r6, r0
 80063fa:	460f      	mov	r7, r1
 80063fc:	4614      	mov	r4, r2
 80063fe:	18d5      	adds	r5, r2, r3
 8006400:	42ac      	cmp	r4, r5
 8006402:	d101      	bne.n	8006408 <__sfputs_r+0x12>
 8006404:	2000      	movs	r0, #0
 8006406:	e007      	b.n	8006418 <__sfputs_r+0x22>
 8006408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800640c:	463a      	mov	r2, r7
 800640e:	4630      	mov	r0, r6
 8006410:	f7ff ffda 	bl	80063c8 <__sfputc_r>
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	d1f3      	bne.n	8006400 <__sfputs_r+0xa>
 8006418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800641c <_vfiprintf_r>:
 800641c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006420:	460d      	mov	r5, r1
 8006422:	b09d      	sub	sp, #116	; 0x74
 8006424:	4614      	mov	r4, r2
 8006426:	4698      	mov	r8, r3
 8006428:	4606      	mov	r6, r0
 800642a:	b118      	cbz	r0, 8006434 <_vfiprintf_r+0x18>
 800642c:	6983      	ldr	r3, [r0, #24]
 800642e:	b90b      	cbnz	r3, 8006434 <_vfiprintf_r+0x18>
 8006430:	f7ff fc00 	bl	8005c34 <__sinit>
 8006434:	4b89      	ldr	r3, [pc, #548]	; (800665c <_vfiprintf_r+0x240>)
 8006436:	429d      	cmp	r5, r3
 8006438:	d11b      	bne.n	8006472 <_vfiprintf_r+0x56>
 800643a:	6875      	ldr	r5, [r6, #4]
 800643c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800643e:	07d9      	lsls	r1, r3, #31
 8006440:	d405      	bmi.n	800644e <_vfiprintf_r+0x32>
 8006442:	89ab      	ldrh	r3, [r5, #12]
 8006444:	059a      	lsls	r2, r3, #22
 8006446:	d402      	bmi.n	800644e <_vfiprintf_r+0x32>
 8006448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800644a:	f7ff fc91 	bl	8005d70 <__retarget_lock_acquire_recursive>
 800644e:	89ab      	ldrh	r3, [r5, #12]
 8006450:	071b      	lsls	r3, r3, #28
 8006452:	d501      	bpl.n	8006458 <_vfiprintf_r+0x3c>
 8006454:	692b      	ldr	r3, [r5, #16]
 8006456:	b9eb      	cbnz	r3, 8006494 <_vfiprintf_r+0x78>
 8006458:	4629      	mov	r1, r5
 800645a:	4630      	mov	r0, r6
 800645c:	f7ff fa52 	bl	8005904 <__swsetup_r>
 8006460:	b1c0      	cbz	r0, 8006494 <_vfiprintf_r+0x78>
 8006462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006464:	07dc      	lsls	r4, r3, #31
 8006466:	d50e      	bpl.n	8006486 <_vfiprintf_r+0x6a>
 8006468:	f04f 30ff 	mov.w	r0, #4294967295
 800646c:	b01d      	add	sp, #116	; 0x74
 800646e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006472:	4b7b      	ldr	r3, [pc, #492]	; (8006660 <_vfiprintf_r+0x244>)
 8006474:	429d      	cmp	r5, r3
 8006476:	d101      	bne.n	800647c <_vfiprintf_r+0x60>
 8006478:	68b5      	ldr	r5, [r6, #8]
 800647a:	e7df      	b.n	800643c <_vfiprintf_r+0x20>
 800647c:	4b79      	ldr	r3, [pc, #484]	; (8006664 <_vfiprintf_r+0x248>)
 800647e:	429d      	cmp	r5, r3
 8006480:	bf08      	it	eq
 8006482:	68f5      	ldreq	r5, [r6, #12]
 8006484:	e7da      	b.n	800643c <_vfiprintf_r+0x20>
 8006486:	89ab      	ldrh	r3, [r5, #12]
 8006488:	0598      	lsls	r0, r3, #22
 800648a:	d4ed      	bmi.n	8006468 <_vfiprintf_r+0x4c>
 800648c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800648e:	f7ff fc70 	bl	8005d72 <__retarget_lock_release_recursive>
 8006492:	e7e9      	b.n	8006468 <_vfiprintf_r+0x4c>
 8006494:	2300      	movs	r3, #0
 8006496:	9309      	str	r3, [sp, #36]	; 0x24
 8006498:	2320      	movs	r3, #32
 800649a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800649e:	f8cd 800c 	str.w	r8, [sp, #12]
 80064a2:	2330      	movs	r3, #48	; 0x30
 80064a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006668 <_vfiprintf_r+0x24c>
 80064a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064ac:	f04f 0901 	mov.w	r9, #1
 80064b0:	4623      	mov	r3, r4
 80064b2:	469a      	mov	sl, r3
 80064b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064b8:	b10a      	cbz	r2, 80064be <_vfiprintf_r+0xa2>
 80064ba:	2a25      	cmp	r2, #37	; 0x25
 80064bc:	d1f9      	bne.n	80064b2 <_vfiprintf_r+0x96>
 80064be:	ebba 0b04 	subs.w	fp, sl, r4
 80064c2:	d00b      	beq.n	80064dc <_vfiprintf_r+0xc0>
 80064c4:	465b      	mov	r3, fp
 80064c6:	4622      	mov	r2, r4
 80064c8:	4629      	mov	r1, r5
 80064ca:	4630      	mov	r0, r6
 80064cc:	f7ff ff93 	bl	80063f6 <__sfputs_r>
 80064d0:	3001      	adds	r0, #1
 80064d2:	f000 80aa 	beq.w	800662a <_vfiprintf_r+0x20e>
 80064d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064d8:	445a      	add	r2, fp
 80064da:	9209      	str	r2, [sp, #36]	; 0x24
 80064dc:	f89a 3000 	ldrb.w	r3, [sl]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 80a2 	beq.w	800662a <_vfiprintf_r+0x20e>
 80064e6:	2300      	movs	r3, #0
 80064e8:	f04f 32ff 	mov.w	r2, #4294967295
 80064ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064f0:	f10a 0a01 	add.w	sl, sl, #1
 80064f4:	9304      	str	r3, [sp, #16]
 80064f6:	9307      	str	r3, [sp, #28]
 80064f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064fc:	931a      	str	r3, [sp, #104]	; 0x68
 80064fe:	4654      	mov	r4, sl
 8006500:	2205      	movs	r2, #5
 8006502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006506:	4858      	ldr	r0, [pc, #352]	; (8006668 <_vfiprintf_r+0x24c>)
 8006508:	f7f9 fe7a 	bl	8000200 <memchr>
 800650c:	9a04      	ldr	r2, [sp, #16]
 800650e:	b9d8      	cbnz	r0, 8006548 <_vfiprintf_r+0x12c>
 8006510:	06d1      	lsls	r1, r2, #27
 8006512:	bf44      	itt	mi
 8006514:	2320      	movmi	r3, #32
 8006516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800651a:	0713      	lsls	r3, r2, #28
 800651c:	bf44      	itt	mi
 800651e:	232b      	movmi	r3, #43	; 0x2b
 8006520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006524:	f89a 3000 	ldrb.w	r3, [sl]
 8006528:	2b2a      	cmp	r3, #42	; 0x2a
 800652a:	d015      	beq.n	8006558 <_vfiprintf_r+0x13c>
 800652c:	9a07      	ldr	r2, [sp, #28]
 800652e:	4654      	mov	r4, sl
 8006530:	2000      	movs	r0, #0
 8006532:	f04f 0c0a 	mov.w	ip, #10
 8006536:	4621      	mov	r1, r4
 8006538:	f811 3b01 	ldrb.w	r3, [r1], #1
 800653c:	3b30      	subs	r3, #48	; 0x30
 800653e:	2b09      	cmp	r3, #9
 8006540:	d94e      	bls.n	80065e0 <_vfiprintf_r+0x1c4>
 8006542:	b1b0      	cbz	r0, 8006572 <_vfiprintf_r+0x156>
 8006544:	9207      	str	r2, [sp, #28]
 8006546:	e014      	b.n	8006572 <_vfiprintf_r+0x156>
 8006548:	eba0 0308 	sub.w	r3, r0, r8
 800654c:	fa09 f303 	lsl.w	r3, r9, r3
 8006550:	4313      	orrs	r3, r2
 8006552:	9304      	str	r3, [sp, #16]
 8006554:	46a2      	mov	sl, r4
 8006556:	e7d2      	b.n	80064fe <_vfiprintf_r+0xe2>
 8006558:	9b03      	ldr	r3, [sp, #12]
 800655a:	1d19      	adds	r1, r3, #4
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	9103      	str	r1, [sp, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	bfbb      	ittet	lt
 8006564:	425b      	neglt	r3, r3
 8006566:	f042 0202 	orrlt.w	r2, r2, #2
 800656a:	9307      	strge	r3, [sp, #28]
 800656c:	9307      	strlt	r3, [sp, #28]
 800656e:	bfb8      	it	lt
 8006570:	9204      	strlt	r2, [sp, #16]
 8006572:	7823      	ldrb	r3, [r4, #0]
 8006574:	2b2e      	cmp	r3, #46	; 0x2e
 8006576:	d10c      	bne.n	8006592 <_vfiprintf_r+0x176>
 8006578:	7863      	ldrb	r3, [r4, #1]
 800657a:	2b2a      	cmp	r3, #42	; 0x2a
 800657c:	d135      	bne.n	80065ea <_vfiprintf_r+0x1ce>
 800657e:	9b03      	ldr	r3, [sp, #12]
 8006580:	1d1a      	adds	r2, r3, #4
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	9203      	str	r2, [sp, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	bfb8      	it	lt
 800658a:	f04f 33ff 	movlt.w	r3, #4294967295
 800658e:	3402      	adds	r4, #2
 8006590:	9305      	str	r3, [sp, #20]
 8006592:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006678 <_vfiprintf_r+0x25c>
 8006596:	7821      	ldrb	r1, [r4, #0]
 8006598:	2203      	movs	r2, #3
 800659a:	4650      	mov	r0, sl
 800659c:	f7f9 fe30 	bl	8000200 <memchr>
 80065a0:	b140      	cbz	r0, 80065b4 <_vfiprintf_r+0x198>
 80065a2:	2340      	movs	r3, #64	; 0x40
 80065a4:	eba0 000a 	sub.w	r0, r0, sl
 80065a8:	fa03 f000 	lsl.w	r0, r3, r0
 80065ac:	9b04      	ldr	r3, [sp, #16]
 80065ae:	4303      	orrs	r3, r0
 80065b0:	3401      	adds	r4, #1
 80065b2:	9304      	str	r3, [sp, #16]
 80065b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b8:	482c      	ldr	r0, [pc, #176]	; (800666c <_vfiprintf_r+0x250>)
 80065ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065be:	2206      	movs	r2, #6
 80065c0:	f7f9 fe1e 	bl	8000200 <memchr>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	d03f      	beq.n	8006648 <_vfiprintf_r+0x22c>
 80065c8:	4b29      	ldr	r3, [pc, #164]	; (8006670 <_vfiprintf_r+0x254>)
 80065ca:	bb1b      	cbnz	r3, 8006614 <_vfiprintf_r+0x1f8>
 80065cc:	9b03      	ldr	r3, [sp, #12]
 80065ce:	3307      	adds	r3, #7
 80065d0:	f023 0307 	bic.w	r3, r3, #7
 80065d4:	3308      	adds	r3, #8
 80065d6:	9303      	str	r3, [sp, #12]
 80065d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065da:	443b      	add	r3, r7
 80065dc:	9309      	str	r3, [sp, #36]	; 0x24
 80065de:	e767      	b.n	80064b0 <_vfiprintf_r+0x94>
 80065e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80065e4:	460c      	mov	r4, r1
 80065e6:	2001      	movs	r0, #1
 80065e8:	e7a5      	b.n	8006536 <_vfiprintf_r+0x11a>
 80065ea:	2300      	movs	r3, #0
 80065ec:	3401      	adds	r4, #1
 80065ee:	9305      	str	r3, [sp, #20]
 80065f0:	4619      	mov	r1, r3
 80065f2:	f04f 0c0a 	mov.w	ip, #10
 80065f6:	4620      	mov	r0, r4
 80065f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065fc:	3a30      	subs	r2, #48	; 0x30
 80065fe:	2a09      	cmp	r2, #9
 8006600:	d903      	bls.n	800660a <_vfiprintf_r+0x1ee>
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0c5      	beq.n	8006592 <_vfiprintf_r+0x176>
 8006606:	9105      	str	r1, [sp, #20]
 8006608:	e7c3      	b.n	8006592 <_vfiprintf_r+0x176>
 800660a:	fb0c 2101 	mla	r1, ip, r1, r2
 800660e:	4604      	mov	r4, r0
 8006610:	2301      	movs	r3, #1
 8006612:	e7f0      	b.n	80065f6 <_vfiprintf_r+0x1da>
 8006614:	ab03      	add	r3, sp, #12
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	462a      	mov	r2, r5
 800661a:	4b16      	ldr	r3, [pc, #88]	; (8006674 <_vfiprintf_r+0x258>)
 800661c:	a904      	add	r1, sp, #16
 800661e:	4630      	mov	r0, r6
 8006620:	f3af 8000 	nop.w
 8006624:	4607      	mov	r7, r0
 8006626:	1c78      	adds	r0, r7, #1
 8006628:	d1d6      	bne.n	80065d8 <_vfiprintf_r+0x1bc>
 800662a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800662c:	07d9      	lsls	r1, r3, #31
 800662e:	d405      	bmi.n	800663c <_vfiprintf_r+0x220>
 8006630:	89ab      	ldrh	r3, [r5, #12]
 8006632:	059a      	lsls	r2, r3, #22
 8006634:	d402      	bmi.n	800663c <_vfiprintf_r+0x220>
 8006636:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006638:	f7ff fb9b 	bl	8005d72 <__retarget_lock_release_recursive>
 800663c:	89ab      	ldrh	r3, [r5, #12]
 800663e:	065b      	lsls	r3, r3, #25
 8006640:	f53f af12 	bmi.w	8006468 <_vfiprintf_r+0x4c>
 8006644:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006646:	e711      	b.n	800646c <_vfiprintf_r+0x50>
 8006648:	ab03      	add	r3, sp, #12
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	462a      	mov	r2, r5
 800664e:	4b09      	ldr	r3, [pc, #36]	; (8006674 <_vfiprintf_r+0x258>)
 8006650:	a904      	add	r1, sp, #16
 8006652:	4630      	mov	r0, r6
 8006654:	f000 f880 	bl	8006758 <_printf_i>
 8006658:	e7e4      	b.n	8006624 <_vfiprintf_r+0x208>
 800665a:	bf00      	nop
 800665c:	0800710c 	.word	0x0800710c
 8006660:	0800712c 	.word	0x0800712c
 8006664:	080070ec 	.word	0x080070ec
 8006668:	08007150 	.word	0x08007150
 800666c:	08007156 	.word	0x08007156
 8006670:	00000000 	.word	0x00000000
 8006674:	080063f7 	.word	0x080063f7
 8006678:	0800714c 	.word	0x0800714c

0800667c <_printf_common>:
 800667c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006680:	4616      	mov	r6, r2
 8006682:	4699      	mov	r9, r3
 8006684:	688a      	ldr	r2, [r1, #8]
 8006686:	690b      	ldr	r3, [r1, #16]
 8006688:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800668c:	4293      	cmp	r3, r2
 800668e:	bfb8      	it	lt
 8006690:	4613      	movlt	r3, r2
 8006692:	6033      	str	r3, [r6, #0]
 8006694:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006698:	4607      	mov	r7, r0
 800669a:	460c      	mov	r4, r1
 800669c:	b10a      	cbz	r2, 80066a2 <_printf_common+0x26>
 800669e:	3301      	adds	r3, #1
 80066a0:	6033      	str	r3, [r6, #0]
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	0699      	lsls	r1, r3, #26
 80066a6:	bf42      	ittt	mi
 80066a8:	6833      	ldrmi	r3, [r6, #0]
 80066aa:	3302      	addmi	r3, #2
 80066ac:	6033      	strmi	r3, [r6, #0]
 80066ae:	6825      	ldr	r5, [r4, #0]
 80066b0:	f015 0506 	ands.w	r5, r5, #6
 80066b4:	d106      	bne.n	80066c4 <_printf_common+0x48>
 80066b6:	f104 0a19 	add.w	sl, r4, #25
 80066ba:	68e3      	ldr	r3, [r4, #12]
 80066bc:	6832      	ldr	r2, [r6, #0]
 80066be:	1a9b      	subs	r3, r3, r2
 80066c0:	42ab      	cmp	r3, r5
 80066c2:	dc26      	bgt.n	8006712 <_printf_common+0x96>
 80066c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066c8:	1e13      	subs	r3, r2, #0
 80066ca:	6822      	ldr	r2, [r4, #0]
 80066cc:	bf18      	it	ne
 80066ce:	2301      	movne	r3, #1
 80066d0:	0692      	lsls	r2, r2, #26
 80066d2:	d42b      	bmi.n	800672c <_printf_common+0xb0>
 80066d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066d8:	4649      	mov	r1, r9
 80066da:	4638      	mov	r0, r7
 80066dc:	47c0      	blx	r8
 80066de:	3001      	adds	r0, #1
 80066e0:	d01e      	beq.n	8006720 <_printf_common+0xa4>
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	68e5      	ldr	r5, [r4, #12]
 80066e6:	6832      	ldr	r2, [r6, #0]
 80066e8:	f003 0306 	and.w	r3, r3, #6
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	bf08      	it	eq
 80066f0:	1aad      	subeq	r5, r5, r2
 80066f2:	68a3      	ldr	r3, [r4, #8]
 80066f4:	6922      	ldr	r2, [r4, #16]
 80066f6:	bf0c      	ite	eq
 80066f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066fc:	2500      	movne	r5, #0
 80066fe:	4293      	cmp	r3, r2
 8006700:	bfc4      	itt	gt
 8006702:	1a9b      	subgt	r3, r3, r2
 8006704:	18ed      	addgt	r5, r5, r3
 8006706:	2600      	movs	r6, #0
 8006708:	341a      	adds	r4, #26
 800670a:	42b5      	cmp	r5, r6
 800670c:	d11a      	bne.n	8006744 <_printf_common+0xc8>
 800670e:	2000      	movs	r0, #0
 8006710:	e008      	b.n	8006724 <_printf_common+0xa8>
 8006712:	2301      	movs	r3, #1
 8006714:	4652      	mov	r2, sl
 8006716:	4649      	mov	r1, r9
 8006718:	4638      	mov	r0, r7
 800671a:	47c0      	blx	r8
 800671c:	3001      	adds	r0, #1
 800671e:	d103      	bne.n	8006728 <_printf_common+0xac>
 8006720:	f04f 30ff 	mov.w	r0, #4294967295
 8006724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006728:	3501      	adds	r5, #1
 800672a:	e7c6      	b.n	80066ba <_printf_common+0x3e>
 800672c:	18e1      	adds	r1, r4, r3
 800672e:	1c5a      	adds	r2, r3, #1
 8006730:	2030      	movs	r0, #48	; 0x30
 8006732:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006736:	4422      	add	r2, r4
 8006738:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800673c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006740:	3302      	adds	r3, #2
 8006742:	e7c7      	b.n	80066d4 <_printf_common+0x58>
 8006744:	2301      	movs	r3, #1
 8006746:	4622      	mov	r2, r4
 8006748:	4649      	mov	r1, r9
 800674a:	4638      	mov	r0, r7
 800674c:	47c0      	blx	r8
 800674e:	3001      	adds	r0, #1
 8006750:	d0e6      	beq.n	8006720 <_printf_common+0xa4>
 8006752:	3601      	adds	r6, #1
 8006754:	e7d9      	b.n	800670a <_printf_common+0x8e>
	...

08006758 <_printf_i>:
 8006758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800675c:	7e0f      	ldrb	r7, [r1, #24]
 800675e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006760:	2f78      	cmp	r7, #120	; 0x78
 8006762:	4691      	mov	r9, r2
 8006764:	4680      	mov	r8, r0
 8006766:	460c      	mov	r4, r1
 8006768:	469a      	mov	sl, r3
 800676a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800676e:	d807      	bhi.n	8006780 <_printf_i+0x28>
 8006770:	2f62      	cmp	r7, #98	; 0x62
 8006772:	d80a      	bhi.n	800678a <_printf_i+0x32>
 8006774:	2f00      	cmp	r7, #0
 8006776:	f000 80d8 	beq.w	800692a <_printf_i+0x1d2>
 800677a:	2f58      	cmp	r7, #88	; 0x58
 800677c:	f000 80a3 	beq.w	80068c6 <_printf_i+0x16e>
 8006780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006784:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006788:	e03a      	b.n	8006800 <_printf_i+0xa8>
 800678a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800678e:	2b15      	cmp	r3, #21
 8006790:	d8f6      	bhi.n	8006780 <_printf_i+0x28>
 8006792:	a101      	add	r1, pc, #4	; (adr r1, 8006798 <_printf_i+0x40>)
 8006794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006798:	080067f1 	.word	0x080067f1
 800679c:	08006805 	.word	0x08006805
 80067a0:	08006781 	.word	0x08006781
 80067a4:	08006781 	.word	0x08006781
 80067a8:	08006781 	.word	0x08006781
 80067ac:	08006781 	.word	0x08006781
 80067b0:	08006805 	.word	0x08006805
 80067b4:	08006781 	.word	0x08006781
 80067b8:	08006781 	.word	0x08006781
 80067bc:	08006781 	.word	0x08006781
 80067c0:	08006781 	.word	0x08006781
 80067c4:	08006911 	.word	0x08006911
 80067c8:	08006835 	.word	0x08006835
 80067cc:	080068f3 	.word	0x080068f3
 80067d0:	08006781 	.word	0x08006781
 80067d4:	08006781 	.word	0x08006781
 80067d8:	08006933 	.word	0x08006933
 80067dc:	08006781 	.word	0x08006781
 80067e0:	08006835 	.word	0x08006835
 80067e4:	08006781 	.word	0x08006781
 80067e8:	08006781 	.word	0x08006781
 80067ec:	080068fb 	.word	0x080068fb
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	1d1a      	adds	r2, r3, #4
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	602a      	str	r2, [r5, #0]
 80067f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006800:	2301      	movs	r3, #1
 8006802:	e0a3      	b.n	800694c <_printf_i+0x1f4>
 8006804:	6820      	ldr	r0, [r4, #0]
 8006806:	6829      	ldr	r1, [r5, #0]
 8006808:	0606      	lsls	r6, r0, #24
 800680a:	f101 0304 	add.w	r3, r1, #4
 800680e:	d50a      	bpl.n	8006826 <_printf_i+0xce>
 8006810:	680e      	ldr	r6, [r1, #0]
 8006812:	602b      	str	r3, [r5, #0]
 8006814:	2e00      	cmp	r6, #0
 8006816:	da03      	bge.n	8006820 <_printf_i+0xc8>
 8006818:	232d      	movs	r3, #45	; 0x2d
 800681a:	4276      	negs	r6, r6
 800681c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006820:	485e      	ldr	r0, [pc, #376]	; (800699c <_printf_i+0x244>)
 8006822:	230a      	movs	r3, #10
 8006824:	e019      	b.n	800685a <_printf_i+0x102>
 8006826:	680e      	ldr	r6, [r1, #0]
 8006828:	602b      	str	r3, [r5, #0]
 800682a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800682e:	bf18      	it	ne
 8006830:	b236      	sxthne	r6, r6
 8006832:	e7ef      	b.n	8006814 <_printf_i+0xbc>
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	6820      	ldr	r0, [r4, #0]
 8006838:	1d19      	adds	r1, r3, #4
 800683a:	6029      	str	r1, [r5, #0]
 800683c:	0601      	lsls	r1, r0, #24
 800683e:	d501      	bpl.n	8006844 <_printf_i+0xec>
 8006840:	681e      	ldr	r6, [r3, #0]
 8006842:	e002      	b.n	800684a <_printf_i+0xf2>
 8006844:	0646      	lsls	r6, r0, #25
 8006846:	d5fb      	bpl.n	8006840 <_printf_i+0xe8>
 8006848:	881e      	ldrh	r6, [r3, #0]
 800684a:	4854      	ldr	r0, [pc, #336]	; (800699c <_printf_i+0x244>)
 800684c:	2f6f      	cmp	r7, #111	; 0x6f
 800684e:	bf0c      	ite	eq
 8006850:	2308      	moveq	r3, #8
 8006852:	230a      	movne	r3, #10
 8006854:	2100      	movs	r1, #0
 8006856:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800685a:	6865      	ldr	r5, [r4, #4]
 800685c:	60a5      	str	r5, [r4, #8]
 800685e:	2d00      	cmp	r5, #0
 8006860:	bfa2      	ittt	ge
 8006862:	6821      	ldrge	r1, [r4, #0]
 8006864:	f021 0104 	bicge.w	r1, r1, #4
 8006868:	6021      	strge	r1, [r4, #0]
 800686a:	b90e      	cbnz	r6, 8006870 <_printf_i+0x118>
 800686c:	2d00      	cmp	r5, #0
 800686e:	d04d      	beq.n	800690c <_printf_i+0x1b4>
 8006870:	4615      	mov	r5, r2
 8006872:	fbb6 f1f3 	udiv	r1, r6, r3
 8006876:	fb03 6711 	mls	r7, r3, r1, r6
 800687a:	5dc7      	ldrb	r7, [r0, r7]
 800687c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006880:	4637      	mov	r7, r6
 8006882:	42bb      	cmp	r3, r7
 8006884:	460e      	mov	r6, r1
 8006886:	d9f4      	bls.n	8006872 <_printf_i+0x11a>
 8006888:	2b08      	cmp	r3, #8
 800688a:	d10b      	bne.n	80068a4 <_printf_i+0x14c>
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	07de      	lsls	r6, r3, #31
 8006890:	d508      	bpl.n	80068a4 <_printf_i+0x14c>
 8006892:	6923      	ldr	r3, [r4, #16]
 8006894:	6861      	ldr	r1, [r4, #4]
 8006896:	4299      	cmp	r1, r3
 8006898:	bfde      	ittt	le
 800689a:	2330      	movle	r3, #48	; 0x30
 800689c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068a4:	1b52      	subs	r2, r2, r5
 80068a6:	6122      	str	r2, [r4, #16]
 80068a8:	f8cd a000 	str.w	sl, [sp]
 80068ac:	464b      	mov	r3, r9
 80068ae:	aa03      	add	r2, sp, #12
 80068b0:	4621      	mov	r1, r4
 80068b2:	4640      	mov	r0, r8
 80068b4:	f7ff fee2 	bl	800667c <_printf_common>
 80068b8:	3001      	adds	r0, #1
 80068ba:	d14c      	bne.n	8006956 <_printf_i+0x1fe>
 80068bc:	f04f 30ff 	mov.w	r0, #4294967295
 80068c0:	b004      	add	sp, #16
 80068c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c6:	4835      	ldr	r0, [pc, #212]	; (800699c <_printf_i+0x244>)
 80068c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068cc:	6829      	ldr	r1, [r5, #0]
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80068d4:	6029      	str	r1, [r5, #0]
 80068d6:	061d      	lsls	r5, r3, #24
 80068d8:	d514      	bpl.n	8006904 <_printf_i+0x1ac>
 80068da:	07df      	lsls	r7, r3, #31
 80068dc:	bf44      	itt	mi
 80068de:	f043 0320 	orrmi.w	r3, r3, #32
 80068e2:	6023      	strmi	r3, [r4, #0]
 80068e4:	b91e      	cbnz	r6, 80068ee <_printf_i+0x196>
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	f023 0320 	bic.w	r3, r3, #32
 80068ec:	6023      	str	r3, [r4, #0]
 80068ee:	2310      	movs	r3, #16
 80068f0:	e7b0      	b.n	8006854 <_printf_i+0xfc>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	f043 0320 	orr.w	r3, r3, #32
 80068f8:	6023      	str	r3, [r4, #0]
 80068fa:	2378      	movs	r3, #120	; 0x78
 80068fc:	4828      	ldr	r0, [pc, #160]	; (80069a0 <_printf_i+0x248>)
 80068fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006902:	e7e3      	b.n	80068cc <_printf_i+0x174>
 8006904:	0659      	lsls	r1, r3, #25
 8006906:	bf48      	it	mi
 8006908:	b2b6      	uxthmi	r6, r6
 800690a:	e7e6      	b.n	80068da <_printf_i+0x182>
 800690c:	4615      	mov	r5, r2
 800690e:	e7bb      	b.n	8006888 <_printf_i+0x130>
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	6826      	ldr	r6, [r4, #0]
 8006914:	6961      	ldr	r1, [r4, #20]
 8006916:	1d18      	adds	r0, r3, #4
 8006918:	6028      	str	r0, [r5, #0]
 800691a:	0635      	lsls	r5, r6, #24
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	d501      	bpl.n	8006924 <_printf_i+0x1cc>
 8006920:	6019      	str	r1, [r3, #0]
 8006922:	e002      	b.n	800692a <_printf_i+0x1d2>
 8006924:	0670      	lsls	r0, r6, #25
 8006926:	d5fb      	bpl.n	8006920 <_printf_i+0x1c8>
 8006928:	8019      	strh	r1, [r3, #0]
 800692a:	2300      	movs	r3, #0
 800692c:	6123      	str	r3, [r4, #16]
 800692e:	4615      	mov	r5, r2
 8006930:	e7ba      	b.n	80068a8 <_printf_i+0x150>
 8006932:	682b      	ldr	r3, [r5, #0]
 8006934:	1d1a      	adds	r2, r3, #4
 8006936:	602a      	str	r2, [r5, #0]
 8006938:	681d      	ldr	r5, [r3, #0]
 800693a:	6862      	ldr	r2, [r4, #4]
 800693c:	2100      	movs	r1, #0
 800693e:	4628      	mov	r0, r5
 8006940:	f7f9 fc5e 	bl	8000200 <memchr>
 8006944:	b108      	cbz	r0, 800694a <_printf_i+0x1f2>
 8006946:	1b40      	subs	r0, r0, r5
 8006948:	6060      	str	r0, [r4, #4]
 800694a:	6863      	ldr	r3, [r4, #4]
 800694c:	6123      	str	r3, [r4, #16]
 800694e:	2300      	movs	r3, #0
 8006950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006954:	e7a8      	b.n	80068a8 <_printf_i+0x150>
 8006956:	6923      	ldr	r3, [r4, #16]
 8006958:	462a      	mov	r2, r5
 800695a:	4649      	mov	r1, r9
 800695c:	4640      	mov	r0, r8
 800695e:	47d0      	blx	sl
 8006960:	3001      	adds	r0, #1
 8006962:	d0ab      	beq.n	80068bc <_printf_i+0x164>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	079b      	lsls	r3, r3, #30
 8006968:	d413      	bmi.n	8006992 <_printf_i+0x23a>
 800696a:	68e0      	ldr	r0, [r4, #12]
 800696c:	9b03      	ldr	r3, [sp, #12]
 800696e:	4298      	cmp	r0, r3
 8006970:	bfb8      	it	lt
 8006972:	4618      	movlt	r0, r3
 8006974:	e7a4      	b.n	80068c0 <_printf_i+0x168>
 8006976:	2301      	movs	r3, #1
 8006978:	4632      	mov	r2, r6
 800697a:	4649      	mov	r1, r9
 800697c:	4640      	mov	r0, r8
 800697e:	47d0      	blx	sl
 8006980:	3001      	adds	r0, #1
 8006982:	d09b      	beq.n	80068bc <_printf_i+0x164>
 8006984:	3501      	adds	r5, #1
 8006986:	68e3      	ldr	r3, [r4, #12]
 8006988:	9903      	ldr	r1, [sp, #12]
 800698a:	1a5b      	subs	r3, r3, r1
 800698c:	42ab      	cmp	r3, r5
 800698e:	dcf2      	bgt.n	8006976 <_printf_i+0x21e>
 8006990:	e7eb      	b.n	800696a <_printf_i+0x212>
 8006992:	2500      	movs	r5, #0
 8006994:	f104 0619 	add.w	r6, r4, #25
 8006998:	e7f5      	b.n	8006986 <_printf_i+0x22e>
 800699a:	bf00      	nop
 800699c:	0800715d 	.word	0x0800715d
 80069a0:	0800716e 	.word	0x0800716e

080069a4 <_scanf_chars>:
 80069a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069a8:	4615      	mov	r5, r2
 80069aa:	688a      	ldr	r2, [r1, #8]
 80069ac:	4680      	mov	r8, r0
 80069ae:	460c      	mov	r4, r1
 80069b0:	b932      	cbnz	r2, 80069c0 <_scanf_chars+0x1c>
 80069b2:	698a      	ldr	r2, [r1, #24]
 80069b4:	2a00      	cmp	r2, #0
 80069b6:	bf0c      	ite	eq
 80069b8:	2201      	moveq	r2, #1
 80069ba:	f04f 32ff 	movne.w	r2, #4294967295
 80069be:	608a      	str	r2, [r1, #8]
 80069c0:	6822      	ldr	r2, [r4, #0]
 80069c2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006a54 <_scanf_chars+0xb0>
 80069c6:	06d1      	lsls	r1, r2, #27
 80069c8:	bf5f      	itttt	pl
 80069ca:	681a      	ldrpl	r2, [r3, #0]
 80069cc:	1d11      	addpl	r1, r2, #4
 80069ce:	6019      	strpl	r1, [r3, #0]
 80069d0:	6816      	ldrpl	r6, [r2, #0]
 80069d2:	2700      	movs	r7, #0
 80069d4:	69a0      	ldr	r0, [r4, #24]
 80069d6:	b188      	cbz	r0, 80069fc <_scanf_chars+0x58>
 80069d8:	2801      	cmp	r0, #1
 80069da:	d107      	bne.n	80069ec <_scanf_chars+0x48>
 80069dc:	682a      	ldr	r2, [r5, #0]
 80069de:	7811      	ldrb	r1, [r2, #0]
 80069e0:	6962      	ldr	r2, [r4, #20]
 80069e2:	5c52      	ldrb	r2, [r2, r1]
 80069e4:	b952      	cbnz	r2, 80069fc <_scanf_chars+0x58>
 80069e6:	2f00      	cmp	r7, #0
 80069e8:	d031      	beq.n	8006a4e <_scanf_chars+0xaa>
 80069ea:	e022      	b.n	8006a32 <_scanf_chars+0x8e>
 80069ec:	2802      	cmp	r0, #2
 80069ee:	d120      	bne.n	8006a32 <_scanf_chars+0x8e>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80069f8:	071b      	lsls	r3, r3, #28
 80069fa:	d41a      	bmi.n	8006a32 <_scanf_chars+0x8e>
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	06da      	lsls	r2, r3, #27
 8006a00:	bf5e      	ittt	pl
 8006a02:	682b      	ldrpl	r3, [r5, #0]
 8006a04:	781b      	ldrbpl	r3, [r3, #0]
 8006a06:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006a0a:	682a      	ldr	r2, [r5, #0]
 8006a0c:	686b      	ldr	r3, [r5, #4]
 8006a0e:	3201      	adds	r2, #1
 8006a10:	602a      	str	r2, [r5, #0]
 8006a12:	68a2      	ldr	r2, [r4, #8]
 8006a14:	3b01      	subs	r3, #1
 8006a16:	3a01      	subs	r2, #1
 8006a18:	606b      	str	r3, [r5, #4]
 8006a1a:	3701      	adds	r7, #1
 8006a1c:	60a2      	str	r2, [r4, #8]
 8006a1e:	b142      	cbz	r2, 8006a32 <_scanf_chars+0x8e>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	dcd7      	bgt.n	80069d4 <_scanf_chars+0x30>
 8006a24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006a28:	4629      	mov	r1, r5
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	4798      	blx	r3
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	d0d0      	beq.n	80069d4 <_scanf_chars+0x30>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	f013 0310 	ands.w	r3, r3, #16
 8006a38:	d105      	bne.n	8006a46 <_scanf_chars+0xa2>
 8006a3a:	68e2      	ldr	r2, [r4, #12]
 8006a3c:	3201      	adds	r2, #1
 8006a3e:	60e2      	str	r2, [r4, #12]
 8006a40:	69a2      	ldr	r2, [r4, #24]
 8006a42:	b102      	cbz	r2, 8006a46 <_scanf_chars+0xa2>
 8006a44:	7033      	strb	r3, [r6, #0]
 8006a46:	6923      	ldr	r3, [r4, #16]
 8006a48:	443b      	add	r3, r7
 8006a4a:	6123      	str	r3, [r4, #16]
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a52:	bf00      	nop
 8006a54:	0800719b 	.word	0x0800719b

08006a58 <_scanf_i>:
 8006a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5c:	4698      	mov	r8, r3
 8006a5e:	4b76      	ldr	r3, [pc, #472]	; (8006c38 <_scanf_i+0x1e0>)
 8006a60:	460c      	mov	r4, r1
 8006a62:	4682      	mov	sl, r0
 8006a64:	4616      	mov	r6, r2
 8006a66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	ab03      	add	r3, sp, #12
 8006a6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006a72:	4b72      	ldr	r3, [pc, #456]	; (8006c3c <_scanf_i+0x1e4>)
 8006a74:	69a1      	ldr	r1, [r4, #24]
 8006a76:	4a72      	ldr	r2, [pc, #456]	; (8006c40 <_scanf_i+0x1e8>)
 8006a78:	2903      	cmp	r1, #3
 8006a7a:	bf18      	it	ne
 8006a7c:	461a      	movne	r2, r3
 8006a7e:	68a3      	ldr	r3, [r4, #8]
 8006a80:	9201      	str	r2, [sp, #4]
 8006a82:	1e5a      	subs	r2, r3, #1
 8006a84:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006a88:	bf88      	it	hi
 8006a8a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006a8e:	4627      	mov	r7, r4
 8006a90:	bf82      	ittt	hi
 8006a92:	eb03 0905 	addhi.w	r9, r3, r5
 8006a96:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006a9a:	60a3      	strhi	r3, [r4, #8]
 8006a9c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006aa0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006aa4:	bf98      	it	ls
 8006aa6:	f04f 0900 	movls.w	r9, #0
 8006aaa:	6023      	str	r3, [r4, #0]
 8006aac:	463d      	mov	r5, r7
 8006aae:	f04f 0b00 	mov.w	fp, #0
 8006ab2:	6831      	ldr	r1, [r6, #0]
 8006ab4:	ab03      	add	r3, sp, #12
 8006ab6:	7809      	ldrb	r1, [r1, #0]
 8006ab8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006abc:	2202      	movs	r2, #2
 8006abe:	f7f9 fb9f 	bl	8000200 <memchr>
 8006ac2:	b328      	cbz	r0, 8006b10 <_scanf_i+0xb8>
 8006ac4:	f1bb 0f01 	cmp.w	fp, #1
 8006ac8:	d159      	bne.n	8006b7e <_scanf_i+0x126>
 8006aca:	6862      	ldr	r2, [r4, #4]
 8006acc:	b92a      	cbnz	r2, 8006ada <_scanf_i+0x82>
 8006ace:	6822      	ldr	r2, [r4, #0]
 8006ad0:	2308      	movs	r3, #8
 8006ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ad6:	6063      	str	r3, [r4, #4]
 8006ad8:	6022      	str	r2, [r4, #0]
 8006ada:	6822      	ldr	r2, [r4, #0]
 8006adc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006ae0:	6022      	str	r2, [r4, #0]
 8006ae2:	68a2      	ldr	r2, [r4, #8]
 8006ae4:	1e51      	subs	r1, r2, #1
 8006ae6:	60a1      	str	r1, [r4, #8]
 8006ae8:	b192      	cbz	r2, 8006b10 <_scanf_i+0xb8>
 8006aea:	6832      	ldr	r2, [r6, #0]
 8006aec:	1c51      	adds	r1, r2, #1
 8006aee:	6031      	str	r1, [r6, #0]
 8006af0:	7812      	ldrb	r2, [r2, #0]
 8006af2:	f805 2b01 	strb.w	r2, [r5], #1
 8006af6:	6872      	ldr	r2, [r6, #4]
 8006af8:	3a01      	subs	r2, #1
 8006afa:	2a00      	cmp	r2, #0
 8006afc:	6072      	str	r2, [r6, #4]
 8006afe:	dc07      	bgt.n	8006b10 <_scanf_i+0xb8>
 8006b00:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006b04:	4631      	mov	r1, r6
 8006b06:	4650      	mov	r0, sl
 8006b08:	4790      	blx	r2
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	f040 8085 	bne.w	8006c1a <_scanf_i+0x1c2>
 8006b10:	f10b 0b01 	add.w	fp, fp, #1
 8006b14:	f1bb 0f03 	cmp.w	fp, #3
 8006b18:	d1cb      	bne.n	8006ab2 <_scanf_i+0x5a>
 8006b1a:	6863      	ldr	r3, [r4, #4]
 8006b1c:	b90b      	cbnz	r3, 8006b22 <_scanf_i+0xca>
 8006b1e:	230a      	movs	r3, #10
 8006b20:	6063      	str	r3, [r4, #4]
 8006b22:	6863      	ldr	r3, [r4, #4]
 8006b24:	4947      	ldr	r1, [pc, #284]	; (8006c44 <_scanf_i+0x1ec>)
 8006b26:	6960      	ldr	r0, [r4, #20]
 8006b28:	1ac9      	subs	r1, r1, r3
 8006b2a:	f000 f8af 	bl	8006c8c <__sccl>
 8006b2e:	f04f 0b00 	mov.w	fp, #0
 8006b32:	68a3      	ldr	r3, [r4, #8]
 8006b34:	6822      	ldr	r2, [r4, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d03d      	beq.n	8006bb6 <_scanf_i+0x15e>
 8006b3a:	6831      	ldr	r1, [r6, #0]
 8006b3c:	6960      	ldr	r0, [r4, #20]
 8006b3e:	f891 c000 	ldrb.w	ip, [r1]
 8006b42:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006b46:	2800      	cmp	r0, #0
 8006b48:	d035      	beq.n	8006bb6 <_scanf_i+0x15e>
 8006b4a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006b4e:	d124      	bne.n	8006b9a <_scanf_i+0x142>
 8006b50:	0510      	lsls	r0, r2, #20
 8006b52:	d522      	bpl.n	8006b9a <_scanf_i+0x142>
 8006b54:	f10b 0b01 	add.w	fp, fp, #1
 8006b58:	f1b9 0f00 	cmp.w	r9, #0
 8006b5c:	d003      	beq.n	8006b66 <_scanf_i+0x10e>
 8006b5e:	3301      	adds	r3, #1
 8006b60:	f109 39ff 	add.w	r9, r9, #4294967295
 8006b64:	60a3      	str	r3, [r4, #8]
 8006b66:	6873      	ldr	r3, [r6, #4]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	6073      	str	r3, [r6, #4]
 8006b6e:	dd1b      	ble.n	8006ba8 <_scanf_i+0x150>
 8006b70:	6833      	ldr	r3, [r6, #0]
 8006b72:	3301      	adds	r3, #1
 8006b74:	6033      	str	r3, [r6, #0]
 8006b76:	68a3      	ldr	r3, [r4, #8]
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	60a3      	str	r3, [r4, #8]
 8006b7c:	e7d9      	b.n	8006b32 <_scanf_i+0xda>
 8006b7e:	f1bb 0f02 	cmp.w	fp, #2
 8006b82:	d1ae      	bne.n	8006ae2 <_scanf_i+0x8a>
 8006b84:	6822      	ldr	r2, [r4, #0]
 8006b86:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006b8a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006b8e:	d1bf      	bne.n	8006b10 <_scanf_i+0xb8>
 8006b90:	2310      	movs	r3, #16
 8006b92:	6063      	str	r3, [r4, #4]
 8006b94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b98:	e7a2      	b.n	8006ae0 <_scanf_i+0x88>
 8006b9a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006b9e:	6022      	str	r2, [r4, #0]
 8006ba0:	780b      	ldrb	r3, [r1, #0]
 8006ba2:	f805 3b01 	strb.w	r3, [r5], #1
 8006ba6:	e7de      	b.n	8006b66 <_scanf_i+0x10e>
 8006ba8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006bac:	4631      	mov	r1, r6
 8006bae:	4650      	mov	r0, sl
 8006bb0:	4798      	blx	r3
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	d0df      	beq.n	8006b76 <_scanf_i+0x11e>
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	05db      	lsls	r3, r3, #23
 8006bba:	d50d      	bpl.n	8006bd8 <_scanf_i+0x180>
 8006bbc:	42bd      	cmp	r5, r7
 8006bbe:	d909      	bls.n	8006bd4 <_scanf_i+0x17c>
 8006bc0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006bc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bc8:	4632      	mov	r2, r6
 8006bca:	4650      	mov	r0, sl
 8006bcc:	4798      	blx	r3
 8006bce:	f105 39ff 	add.w	r9, r5, #4294967295
 8006bd2:	464d      	mov	r5, r9
 8006bd4:	42bd      	cmp	r5, r7
 8006bd6:	d02d      	beq.n	8006c34 <_scanf_i+0x1dc>
 8006bd8:	6822      	ldr	r2, [r4, #0]
 8006bda:	f012 0210 	ands.w	r2, r2, #16
 8006bde:	d113      	bne.n	8006c08 <_scanf_i+0x1b0>
 8006be0:	702a      	strb	r2, [r5, #0]
 8006be2:	6863      	ldr	r3, [r4, #4]
 8006be4:	9e01      	ldr	r6, [sp, #4]
 8006be6:	4639      	mov	r1, r7
 8006be8:	4650      	mov	r0, sl
 8006bea:	47b0      	blx	r6
 8006bec:	6821      	ldr	r1, [r4, #0]
 8006bee:	f8d8 3000 	ldr.w	r3, [r8]
 8006bf2:	f011 0f20 	tst.w	r1, #32
 8006bf6:	d013      	beq.n	8006c20 <_scanf_i+0x1c8>
 8006bf8:	1d1a      	adds	r2, r3, #4
 8006bfa:	f8c8 2000 	str.w	r2, [r8]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6018      	str	r0, [r3, #0]
 8006c02:	68e3      	ldr	r3, [r4, #12]
 8006c04:	3301      	adds	r3, #1
 8006c06:	60e3      	str	r3, [r4, #12]
 8006c08:	1bed      	subs	r5, r5, r7
 8006c0a:	44ab      	add	fp, r5
 8006c0c:	6925      	ldr	r5, [r4, #16]
 8006c0e:	445d      	add	r5, fp
 8006c10:	6125      	str	r5, [r4, #16]
 8006c12:	2000      	movs	r0, #0
 8006c14:	b007      	add	sp, #28
 8006c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c1a:	f04f 0b00 	mov.w	fp, #0
 8006c1e:	e7ca      	b.n	8006bb6 <_scanf_i+0x15e>
 8006c20:	1d1a      	adds	r2, r3, #4
 8006c22:	f8c8 2000 	str.w	r2, [r8]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f011 0f01 	tst.w	r1, #1
 8006c2c:	bf14      	ite	ne
 8006c2e:	8018      	strhne	r0, [r3, #0]
 8006c30:	6018      	streq	r0, [r3, #0]
 8006c32:	e7e6      	b.n	8006c02 <_scanf_i+0x1aa>
 8006c34:	2001      	movs	r0, #1
 8006c36:	e7ed      	b.n	8006c14 <_scanf_i+0x1bc>
 8006c38:	08007094 	.word	0x08007094
 8006c3c:	08006ee9 	.word	0x08006ee9
 8006c40:	08006e01 	.word	0x08006e01
 8006c44:	08007198 	.word	0x08007198

08006c48 <_read_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	4d07      	ldr	r5, [pc, #28]	; (8006c68 <_read_r+0x20>)
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	4608      	mov	r0, r1
 8006c50:	4611      	mov	r1, r2
 8006c52:	2200      	movs	r2, #0
 8006c54:	602a      	str	r2, [r5, #0]
 8006c56:	461a      	mov	r2, r3
 8006c58:	f7fa fbde 	bl	8001418 <_read>
 8006c5c:	1c43      	adds	r3, r0, #1
 8006c5e:	d102      	bne.n	8006c66 <_read_r+0x1e>
 8006c60:	682b      	ldr	r3, [r5, #0]
 8006c62:	b103      	cbz	r3, 8006c66 <_read_r+0x1e>
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	bd38      	pop	{r3, r4, r5, pc}
 8006c68:	200004e0 	.word	0x200004e0

08006c6c <_sbrk_r>:
 8006c6c:	b538      	push	{r3, r4, r5, lr}
 8006c6e:	4d06      	ldr	r5, [pc, #24]	; (8006c88 <_sbrk_r+0x1c>)
 8006c70:	2300      	movs	r3, #0
 8006c72:	4604      	mov	r4, r0
 8006c74:	4608      	mov	r0, r1
 8006c76:	602b      	str	r3, [r5, #0]
 8006c78:	f7fa fc20 	bl	80014bc <_sbrk>
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	d102      	bne.n	8006c86 <_sbrk_r+0x1a>
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	b103      	cbz	r3, 8006c86 <_sbrk_r+0x1a>
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	bd38      	pop	{r3, r4, r5, pc}
 8006c88:	200004e0 	.word	0x200004e0

08006c8c <__sccl>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	780b      	ldrb	r3, [r1, #0]
 8006c90:	4604      	mov	r4, r0
 8006c92:	2b5e      	cmp	r3, #94	; 0x5e
 8006c94:	bf0b      	itete	eq
 8006c96:	784b      	ldrbeq	r3, [r1, #1]
 8006c98:	1c48      	addne	r0, r1, #1
 8006c9a:	1c88      	addeq	r0, r1, #2
 8006c9c:	2200      	movne	r2, #0
 8006c9e:	bf08      	it	eq
 8006ca0:	2201      	moveq	r2, #1
 8006ca2:	1e61      	subs	r1, r4, #1
 8006ca4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006ca8:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006cac:	42a9      	cmp	r1, r5
 8006cae:	d1fb      	bne.n	8006ca8 <__sccl+0x1c>
 8006cb0:	b90b      	cbnz	r3, 8006cb6 <__sccl+0x2a>
 8006cb2:	3801      	subs	r0, #1
 8006cb4:	bd70      	pop	{r4, r5, r6, pc}
 8006cb6:	f082 0201 	eor.w	r2, r2, #1
 8006cba:	54e2      	strb	r2, [r4, r3]
 8006cbc:	4605      	mov	r5, r0
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006cc4:	292d      	cmp	r1, #45	; 0x2d
 8006cc6:	d006      	beq.n	8006cd6 <__sccl+0x4a>
 8006cc8:	295d      	cmp	r1, #93	; 0x5d
 8006cca:	d0f3      	beq.n	8006cb4 <__sccl+0x28>
 8006ccc:	b909      	cbnz	r1, 8006cd2 <__sccl+0x46>
 8006cce:	4628      	mov	r0, r5
 8006cd0:	e7f0      	b.n	8006cb4 <__sccl+0x28>
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	e7f1      	b.n	8006cba <__sccl+0x2e>
 8006cd6:	786e      	ldrb	r6, [r5, #1]
 8006cd8:	2e5d      	cmp	r6, #93	; 0x5d
 8006cda:	d0fa      	beq.n	8006cd2 <__sccl+0x46>
 8006cdc:	42b3      	cmp	r3, r6
 8006cde:	dcf8      	bgt.n	8006cd2 <__sccl+0x46>
 8006ce0:	3502      	adds	r5, #2
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	3101      	adds	r1, #1
 8006ce6:	428e      	cmp	r6, r1
 8006ce8:	5462      	strb	r2, [r4, r1]
 8006cea:	dcfb      	bgt.n	8006ce4 <__sccl+0x58>
 8006cec:	1af1      	subs	r1, r6, r3
 8006cee:	3901      	subs	r1, #1
 8006cf0:	1c58      	adds	r0, r3, #1
 8006cf2:	42b3      	cmp	r3, r6
 8006cf4:	bfa8      	it	ge
 8006cf6:	2100      	movge	r1, #0
 8006cf8:	1843      	adds	r3, r0, r1
 8006cfa:	e7e0      	b.n	8006cbe <__sccl+0x32>

08006cfc <_strtol_l.constprop.0>:
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d02:	d001      	beq.n	8006d08 <_strtol_l.constprop.0+0xc>
 8006d04:	2b24      	cmp	r3, #36	; 0x24
 8006d06:	d906      	bls.n	8006d16 <_strtol_l.constprop.0+0x1a>
 8006d08:	f7fe fcdc 	bl	80056c4 <__errno>
 8006d0c:	2316      	movs	r3, #22
 8006d0e:	6003      	str	r3, [r0, #0]
 8006d10:	2000      	movs	r0, #0
 8006d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d16:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006dfc <_strtol_l.constprop.0+0x100>
 8006d1a:	460d      	mov	r5, r1
 8006d1c:	462e      	mov	r6, r5
 8006d1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d22:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006d26:	f017 0708 	ands.w	r7, r7, #8
 8006d2a:	d1f7      	bne.n	8006d1c <_strtol_l.constprop.0+0x20>
 8006d2c:	2c2d      	cmp	r4, #45	; 0x2d
 8006d2e:	d132      	bne.n	8006d96 <_strtol_l.constprop.0+0x9a>
 8006d30:	782c      	ldrb	r4, [r5, #0]
 8006d32:	2701      	movs	r7, #1
 8006d34:	1cb5      	adds	r5, r6, #2
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d05b      	beq.n	8006df2 <_strtol_l.constprop.0+0xf6>
 8006d3a:	2b10      	cmp	r3, #16
 8006d3c:	d109      	bne.n	8006d52 <_strtol_l.constprop.0+0x56>
 8006d3e:	2c30      	cmp	r4, #48	; 0x30
 8006d40:	d107      	bne.n	8006d52 <_strtol_l.constprop.0+0x56>
 8006d42:	782c      	ldrb	r4, [r5, #0]
 8006d44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006d48:	2c58      	cmp	r4, #88	; 0x58
 8006d4a:	d14d      	bne.n	8006de8 <_strtol_l.constprop.0+0xec>
 8006d4c:	786c      	ldrb	r4, [r5, #1]
 8006d4e:	2310      	movs	r3, #16
 8006d50:	3502      	adds	r5, #2
 8006d52:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006d56:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d5a:	f04f 0c00 	mov.w	ip, #0
 8006d5e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006d62:	4666      	mov	r6, ip
 8006d64:	fb03 8a19 	mls	sl, r3, r9, r8
 8006d68:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006d6c:	f1be 0f09 	cmp.w	lr, #9
 8006d70:	d816      	bhi.n	8006da0 <_strtol_l.constprop.0+0xa4>
 8006d72:	4674      	mov	r4, lr
 8006d74:	42a3      	cmp	r3, r4
 8006d76:	dd24      	ble.n	8006dc2 <_strtol_l.constprop.0+0xc6>
 8006d78:	f1bc 0f00 	cmp.w	ip, #0
 8006d7c:	db1e      	blt.n	8006dbc <_strtol_l.constprop.0+0xc0>
 8006d7e:	45b1      	cmp	r9, r6
 8006d80:	d31c      	bcc.n	8006dbc <_strtol_l.constprop.0+0xc0>
 8006d82:	d101      	bne.n	8006d88 <_strtol_l.constprop.0+0x8c>
 8006d84:	45a2      	cmp	sl, r4
 8006d86:	db19      	blt.n	8006dbc <_strtol_l.constprop.0+0xc0>
 8006d88:	fb06 4603 	mla	r6, r6, r3, r4
 8006d8c:	f04f 0c01 	mov.w	ip, #1
 8006d90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d94:	e7e8      	b.n	8006d68 <_strtol_l.constprop.0+0x6c>
 8006d96:	2c2b      	cmp	r4, #43	; 0x2b
 8006d98:	bf04      	itt	eq
 8006d9a:	782c      	ldrbeq	r4, [r5, #0]
 8006d9c:	1cb5      	addeq	r5, r6, #2
 8006d9e:	e7ca      	b.n	8006d36 <_strtol_l.constprop.0+0x3a>
 8006da0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006da4:	f1be 0f19 	cmp.w	lr, #25
 8006da8:	d801      	bhi.n	8006dae <_strtol_l.constprop.0+0xb2>
 8006daa:	3c37      	subs	r4, #55	; 0x37
 8006dac:	e7e2      	b.n	8006d74 <_strtol_l.constprop.0+0x78>
 8006dae:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006db2:	f1be 0f19 	cmp.w	lr, #25
 8006db6:	d804      	bhi.n	8006dc2 <_strtol_l.constprop.0+0xc6>
 8006db8:	3c57      	subs	r4, #87	; 0x57
 8006dba:	e7db      	b.n	8006d74 <_strtol_l.constprop.0+0x78>
 8006dbc:	f04f 3cff 	mov.w	ip, #4294967295
 8006dc0:	e7e6      	b.n	8006d90 <_strtol_l.constprop.0+0x94>
 8006dc2:	f1bc 0f00 	cmp.w	ip, #0
 8006dc6:	da05      	bge.n	8006dd4 <_strtol_l.constprop.0+0xd8>
 8006dc8:	2322      	movs	r3, #34	; 0x22
 8006dca:	6003      	str	r3, [r0, #0]
 8006dcc:	4646      	mov	r6, r8
 8006dce:	b942      	cbnz	r2, 8006de2 <_strtol_l.constprop.0+0xe6>
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	e79e      	b.n	8006d12 <_strtol_l.constprop.0+0x16>
 8006dd4:	b107      	cbz	r7, 8006dd8 <_strtol_l.constprop.0+0xdc>
 8006dd6:	4276      	negs	r6, r6
 8006dd8:	2a00      	cmp	r2, #0
 8006dda:	d0f9      	beq.n	8006dd0 <_strtol_l.constprop.0+0xd4>
 8006ddc:	f1bc 0f00 	cmp.w	ip, #0
 8006de0:	d000      	beq.n	8006de4 <_strtol_l.constprop.0+0xe8>
 8006de2:	1e69      	subs	r1, r5, #1
 8006de4:	6011      	str	r1, [r2, #0]
 8006de6:	e7f3      	b.n	8006dd0 <_strtol_l.constprop.0+0xd4>
 8006de8:	2430      	movs	r4, #48	; 0x30
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1b1      	bne.n	8006d52 <_strtol_l.constprop.0+0x56>
 8006dee:	2308      	movs	r3, #8
 8006df0:	e7af      	b.n	8006d52 <_strtol_l.constprop.0+0x56>
 8006df2:	2c30      	cmp	r4, #48	; 0x30
 8006df4:	d0a5      	beq.n	8006d42 <_strtol_l.constprop.0+0x46>
 8006df6:	230a      	movs	r3, #10
 8006df8:	e7ab      	b.n	8006d52 <_strtol_l.constprop.0+0x56>
 8006dfa:	bf00      	nop
 8006dfc:	0800719b 	.word	0x0800719b

08006e00 <_strtol_r>:
 8006e00:	f7ff bf7c 	b.w	8006cfc <_strtol_l.constprop.0>

08006e04 <_strtoul_l.constprop.0>:
 8006e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e08:	4f36      	ldr	r7, [pc, #216]	; (8006ee4 <_strtoul_l.constprop.0+0xe0>)
 8006e0a:	4686      	mov	lr, r0
 8006e0c:	460d      	mov	r5, r1
 8006e0e:	4628      	mov	r0, r5
 8006e10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e14:	5de6      	ldrb	r6, [r4, r7]
 8006e16:	f016 0608 	ands.w	r6, r6, #8
 8006e1a:	d1f8      	bne.n	8006e0e <_strtoul_l.constprop.0+0xa>
 8006e1c:	2c2d      	cmp	r4, #45	; 0x2d
 8006e1e:	d12f      	bne.n	8006e80 <_strtoul_l.constprop.0+0x7c>
 8006e20:	782c      	ldrb	r4, [r5, #0]
 8006e22:	2601      	movs	r6, #1
 8006e24:	1c85      	adds	r5, r0, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d057      	beq.n	8006eda <_strtoul_l.constprop.0+0xd6>
 8006e2a:	2b10      	cmp	r3, #16
 8006e2c:	d109      	bne.n	8006e42 <_strtoul_l.constprop.0+0x3e>
 8006e2e:	2c30      	cmp	r4, #48	; 0x30
 8006e30:	d107      	bne.n	8006e42 <_strtoul_l.constprop.0+0x3e>
 8006e32:	7828      	ldrb	r0, [r5, #0]
 8006e34:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006e38:	2858      	cmp	r0, #88	; 0x58
 8006e3a:	d149      	bne.n	8006ed0 <_strtoul_l.constprop.0+0xcc>
 8006e3c:	786c      	ldrb	r4, [r5, #1]
 8006e3e:	2310      	movs	r3, #16
 8006e40:	3502      	adds	r5, #2
 8006e42:	f04f 38ff 	mov.w	r8, #4294967295
 8006e46:	2700      	movs	r7, #0
 8006e48:	fbb8 f8f3 	udiv	r8, r8, r3
 8006e4c:	fb03 f908 	mul.w	r9, r3, r8
 8006e50:	ea6f 0909 	mvn.w	r9, r9
 8006e54:	4638      	mov	r0, r7
 8006e56:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006e5a:	f1bc 0f09 	cmp.w	ip, #9
 8006e5e:	d814      	bhi.n	8006e8a <_strtoul_l.constprop.0+0x86>
 8006e60:	4664      	mov	r4, ip
 8006e62:	42a3      	cmp	r3, r4
 8006e64:	dd22      	ble.n	8006eac <_strtoul_l.constprop.0+0xa8>
 8006e66:	2f00      	cmp	r7, #0
 8006e68:	db1d      	blt.n	8006ea6 <_strtoul_l.constprop.0+0xa2>
 8006e6a:	4580      	cmp	r8, r0
 8006e6c:	d31b      	bcc.n	8006ea6 <_strtoul_l.constprop.0+0xa2>
 8006e6e:	d101      	bne.n	8006e74 <_strtoul_l.constprop.0+0x70>
 8006e70:	45a1      	cmp	r9, r4
 8006e72:	db18      	blt.n	8006ea6 <_strtoul_l.constprop.0+0xa2>
 8006e74:	fb00 4003 	mla	r0, r0, r3, r4
 8006e78:	2701      	movs	r7, #1
 8006e7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e7e:	e7ea      	b.n	8006e56 <_strtoul_l.constprop.0+0x52>
 8006e80:	2c2b      	cmp	r4, #43	; 0x2b
 8006e82:	bf04      	itt	eq
 8006e84:	782c      	ldrbeq	r4, [r5, #0]
 8006e86:	1c85      	addeq	r5, r0, #2
 8006e88:	e7cd      	b.n	8006e26 <_strtoul_l.constprop.0+0x22>
 8006e8a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006e8e:	f1bc 0f19 	cmp.w	ip, #25
 8006e92:	d801      	bhi.n	8006e98 <_strtoul_l.constprop.0+0x94>
 8006e94:	3c37      	subs	r4, #55	; 0x37
 8006e96:	e7e4      	b.n	8006e62 <_strtoul_l.constprop.0+0x5e>
 8006e98:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006e9c:	f1bc 0f19 	cmp.w	ip, #25
 8006ea0:	d804      	bhi.n	8006eac <_strtoul_l.constprop.0+0xa8>
 8006ea2:	3c57      	subs	r4, #87	; 0x57
 8006ea4:	e7dd      	b.n	8006e62 <_strtoul_l.constprop.0+0x5e>
 8006ea6:	f04f 37ff 	mov.w	r7, #4294967295
 8006eaa:	e7e6      	b.n	8006e7a <_strtoul_l.constprop.0+0x76>
 8006eac:	2f00      	cmp	r7, #0
 8006eae:	da07      	bge.n	8006ec0 <_strtoul_l.constprop.0+0xbc>
 8006eb0:	2322      	movs	r3, #34	; 0x22
 8006eb2:	f8ce 3000 	str.w	r3, [lr]
 8006eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eba:	b932      	cbnz	r2, 8006eca <_strtoul_l.constprop.0+0xc6>
 8006ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ec0:	b106      	cbz	r6, 8006ec4 <_strtoul_l.constprop.0+0xc0>
 8006ec2:	4240      	negs	r0, r0
 8006ec4:	2a00      	cmp	r2, #0
 8006ec6:	d0f9      	beq.n	8006ebc <_strtoul_l.constprop.0+0xb8>
 8006ec8:	b107      	cbz	r7, 8006ecc <_strtoul_l.constprop.0+0xc8>
 8006eca:	1e69      	subs	r1, r5, #1
 8006ecc:	6011      	str	r1, [r2, #0]
 8006ece:	e7f5      	b.n	8006ebc <_strtoul_l.constprop.0+0xb8>
 8006ed0:	2430      	movs	r4, #48	; 0x30
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1b5      	bne.n	8006e42 <_strtoul_l.constprop.0+0x3e>
 8006ed6:	2308      	movs	r3, #8
 8006ed8:	e7b3      	b.n	8006e42 <_strtoul_l.constprop.0+0x3e>
 8006eda:	2c30      	cmp	r4, #48	; 0x30
 8006edc:	d0a9      	beq.n	8006e32 <_strtoul_l.constprop.0+0x2e>
 8006ede:	230a      	movs	r3, #10
 8006ee0:	e7af      	b.n	8006e42 <_strtoul_l.constprop.0+0x3e>
 8006ee2:	bf00      	nop
 8006ee4:	0800719b 	.word	0x0800719b

08006ee8 <_strtoul_r>:
 8006ee8:	f7ff bf8c 	b.w	8006e04 <_strtoul_l.constprop.0>

08006eec <__submore>:
 8006eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef0:	460c      	mov	r4, r1
 8006ef2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006ef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ef8:	4299      	cmp	r1, r3
 8006efa:	d11d      	bne.n	8006f38 <__submore+0x4c>
 8006efc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f00:	f7ff f81c 	bl	8005f3c <_malloc_r>
 8006f04:	b918      	cbnz	r0, 8006f0e <__submore+0x22>
 8006f06:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f12:	63a3      	str	r3, [r4, #56]	; 0x38
 8006f14:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006f18:	6360      	str	r0, [r4, #52]	; 0x34
 8006f1a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006f1e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006f22:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006f26:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006f2a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006f2e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006f32:	6020      	str	r0, [r4, #0]
 8006f34:	2000      	movs	r0, #0
 8006f36:	e7e8      	b.n	8006f0a <__submore+0x1e>
 8006f38:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006f3a:	0077      	lsls	r7, r6, #1
 8006f3c:	463a      	mov	r2, r7
 8006f3e:	f000 f84b 	bl	8006fd8 <_realloc_r>
 8006f42:	4605      	mov	r5, r0
 8006f44:	2800      	cmp	r0, #0
 8006f46:	d0de      	beq.n	8006f06 <__submore+0x1a>
 8006f48:	eb00 0806 	add.w	r8, r0, r6
 8006f4c:	4601      	mov	r1, r0
 8006f4e:	4632      	mov	r2, r6
 8006f50:	4640      	mov	r0, r8
 8006f52:	f000 f827 	bl	8006fa4 <memcpy>
 8006f56:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006f5a:	f8c4 8000 	str.w	r8, [r4]
 8006f5e:	e7e9      	b.n	8006f34 <__submore+0x48>

08006f60 <_fstat_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4d07      	ldr	r5, [pc, #28]	; (8006f80 <_fstat_r+0x20>)
 8006f64:	2300      	movs	r3, #0
 8006f66:	4604      	mov	r4, r0
 8006f68:	4608      	mov	r0, r1
 8006f6a:	4611      	mov	r1, r2
 8006f6c:	602b      	str	r3, [r5, #0]
 8006f6e:	f7fa fa7c 	bl	800146a <_fstat>
 8006f72:	1c43      	adds	r3, r0, #1
 8006f74:	d102      	bne.n	8006f7c <_fstat_r+0x1c>
 8006f76:	682b      	ldr	r3, [r5, #0]
 8006f78:	b103      	cbz	r3, 8006f7c <_fstat_r+0x1c>
 8006f7a:	6023      	str	r3, [r4, #0]
 8006f7c:	bd38      	pop	{r3, r4, r5, pc}
 8006f7e:	bf00      	nop
 8006f80:	200004e0 	.word	0x200004e0

08006f84 <_isatty_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	4d06      	ldr	r5, [pc, #24]	; (8006fa0 <_isatty_r+0x1c>)
 8006f88:	2300      	movs	r3, #0
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	4608      	mov	r0, r1
 8006f8e:	602b      	str	r3, [r5, #0]
 8006f90:	f7fa fa7b 	bl	800148a <_isatty>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	d102      	bne.n	8006f9e <_isatty_r+0x1a>
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	b103      	cbz	r3, 8006f9e <_isatty_r+0x1a>
 8006f9c:	6023      	str	r3, [r4, #0]
 8006f9e:	bd38      	pop	{r3, r4, r5, pc}
 8006fa0:	200004e0 	.word	0x200004e0

08006fa4 <memcpy>:
 8006fa4:	440a      	add	r2, r1
 8006fa6:	4291      	cmp	r1, r2
 8006fa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fac:	d100      	bne.n	8006fb0 <memcpy+0xc>
 8006fae:	4770      	bx	lr
 8006fb0:	b510      	push	{r4, lr}
 8006fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fba:	4291      	cmp	r1, r2
 8006fbc:	d1f9      	bne.n	8006fb2 <memcpy+0xe>
 8006fbe:	bd10      	pop	{r4, pc}

08006fc0 <__malloc_lock>:
 8006fc0:	4801      	ldr	r0, [pc, #4]	; (8006fc8 <__malloc_lock+0x8>)
 8006fc2:	f7fe bed5 	b.w	8005d70 <__retarget_lock_acquire_recursive>
 8006fc6:	bf00      	nop
 8006fc8:	200004d4 	.word	0x200004d4

08006fcc <__malloc_unlock>:
 8006fcc:	4801      	ldr	r0, [pc, #4]	; (8006fd4 <__malloc_unlock+0x8>)
 8006fce:	f7fe bed0 	b.w	8005d72 <__retarget_lock_release_recursive>
 8006fd2:	bf00      	nop
 8006fd4:	200004d4 	.word	0x200004d4

08006fd8 <_realloc_r>:
 8006fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fdc:	4680      	mov	r8, r0
 8006fde:	4614      	mov	r4, r2
 8006fe0:	460e      	mov	r6, r1
 8006fe2:	b921      	cbnz	r1, 8006fee <_realloc_r+0x16>
 8006fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe8:	4611      	mov	r1, r2
 8006fea:	f7fe bfa7 	b.w	8005f3c <_malloc_r>
 8006fee:	b92a      	cbnz	r2, 8006ffc <_realloc_r+0x24>
 8006ff0:	f7fe ff38 	bl	8005e64 <_free_r>
 8006ff4:	4625      	mov	r5, r4
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ffc:	f000 f81b 	bl	8007036 <_malloc_usable_size_r>
 8007000:	4284      	cmp	r4, r0
 8007002:	4607      	mov	r7, r0
 8007004:	d802      	bhi.n	800700c <_realloc_r+0x34>
 8007006:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800700a:	d812      	bhi.n	8007032 <_realloc_r+0x5a>
 800700c:	4621      	mov	r1, r4
 800700e:	4640      	mov	r0, r8
 8007010:	f7fe ff94 	bl	8005f3c <_malloc_r>
 8007014:	4605      	mov	r5, r0
 8007016:	2800      	cmp	r0, #0
 8007018:	d0ed      	beq.n	8006ff6 <_realloc_r+0x1e>
 800701a:	42bc      	cmp	r4, r7
 800701c:	4622      	mov	r2, r4
 800701e:	4631      	mov	r1, r6
 8007020:	bf28      	it	cs
 8007022:	463a      	movcs	r2, r7
 8007024:	f7ff ffbe 	bl	8006fa4 <memcpy>
 8007028:	4631      	mov	r1, r6
 800702a:	4640      	mov	r0, r8
 800702c:	f7fe ff1a 	bl	8005e64 <_free_r>
 8007030:	e7e1      	b.n	8006ff6 <_realloc_r+0x1e>
 8007032:	4635      	mov	r5, r6
 8007034:	e7df      	b.n	8006ff6 <_realloc_r+0x1e>

08007036 <_malloc_usable_size_r>:
 8007036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800703a:	1f18      	subs	r0, r3, #4
 800703c:	2b00      	cmp	r3, #0
 800703e:	bfbc      	itt	lt
 8007040:	580b      	ldrlt	r3, [r1, r0]
 8007042:	18c0      	addlt	r0, r0, r3
 8007044:	4770      	bx	lr
	...

08007048 <_init>:
 8007048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704a:	bf00      	nop
 800704c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800704e:	bc08      	pop	{r3}
 8007050:	469e      	mov	lr, r3
 8007052:	4770      	bx	lr

08007054 <_fini>:
 8007054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007056:	bf00      	nop
 8007058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800705a:	bc08      	pop	{r3}
 800705c:	469e      	mov	lr, r3
 800705e:	4770      	bx	lr
