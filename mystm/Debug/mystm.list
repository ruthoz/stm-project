
mystm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005f74  08005f74  00015f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006070  08006070  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  08006070  08006070  00016070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006078  08006078  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006078  08006078  00016078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800607c  0800607c  0001607c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08006080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000130  080061b0  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  080061b0  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149ad  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c4d  00000000  00000000  00034b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00037760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  00038890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289fb  00000000  00000000  00039888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014eb1  00000000  00000000  00062283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6031  00000000  00000000  00077134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016d165  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d1c  00000000  00000000  0016d1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000130 	.word	0x20000130
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005f5c 	.word	0x08005f5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000134 	.word	0x20000134
 80001c4:	08005f5c 	.word	0x08005f5c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <_write>:
BUTTON button1;
BUZZER buzzer;
CLOCK clock1;

int _write(int fd, char* ptr, int len)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	b29a      	uxth	r2, r3
 80004dc:	f04f 33ff 	mov.w	r3, #4294967295
 80004e0:	68b9      	ldr	r1, [r7, #8]
 80004e2:	4804      	ldr	r0, [pc, #16]	; (80004f4 <_write+0x28>)
 80004e4:	f003 ff60 	bl	80043a8 <HAL_UART_Transmit>
	return len;
 80004e8:	687b      	ldr	r3, [r7, #4]
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200002a0 	.word	0x200002a0

080004f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a09      	ldr	r2, [pc, #36]	; (8000528 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d10b      	bne.n	8000520 <HAL_TIM_PeriodElapsedCallback+0x28>
	ledOnTimerInterrupt(&ledB);
 8000508:	4808      	ldr	r0, [pc, #32]	; (800052c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800050a:	f000 f9f0 	bl	80008ee <ledOnTimerInterrupt>
	ledOnTimerInterrupt(&ledR);
 800050e:	4808      	ldr	r0, [pc, #32]	; (8000530 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000510:	f000 f9ed 	bl	80008ee <ledOnTimerInterrupt>
	clockOnTimerInterrupt(&clock1);
 8000514:	4807      	ldr	r0, [pc, #28]	; (8000534 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000516:	f000 f995 	bl	8000844 <clockOnTimerInterrupt>
	buzzerOnTimerInterrupt(&buzzer);
 800051a:	4807      	ldr	r0, [pc, #28]	; (8000538 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800051c:	f000 f95c 	bl	80007d8 <buzzerOnTimerInterrupt>
	}


}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000254 	.word	0x20000254
 800052c:	20000160 	.word	0x20000160
 8000530:	2000014c 	.word	0x2000014c
 8000534:	200001a0 	.word	0x200001a0
 8000538:	2000018c 	.word	0x2000018c

0800053c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	80fb      	strh	r3, [r7, #6]
	buttonInterrupt(&button1);
 8000546:	4803      	ldr	r0, [pc, #12]	; (8000554 <HAL_GPIO_EXTI_Callback+0x18>)
 8000548:	f000 f88a 	bl	8000660 <buttonInterrupt>
//			HAL_TIM_Base_Stop_IT(&htim3);
//			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
//		}


}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000174 	.word	0x20000174

08000558 <mainloop>:

int x=0;
void mainloop()
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 800055c:	4826      	ldr	r0, [pc, #152]	; (80005f8 <mainloop+0xa0>)
 800055e:	f002 fe21 	bl	80031a4 <HAL_TIM_Base_Start_IT>

	ledInit(&ledB , LD2_GPIO_Port , LD2_Pin );
 8000562:	2220      	movs	r2, #32
 8000564:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000568:	4824      	ldr	r0, [pc, #144]	; (80005fc <mainloop+0xa4>)
 800056a:	f000 f9a7 	bl	80008bc <ledInit>
	ledInit(&ledR , LD3_GPIO_Port , LD3_Pin );
 800056e:	2240      	movs	r2, #64	; 0x40
 8000570:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000574:	4822      	ldr	r0, [pc, #136]	; (8000600 <mainloop+0xa8>)
 8000576:	f000 f9a1 	bl	80008bc <ledInit>
	buttonInit(&button1, B2_GPIO_Port ,  B2_Pin);
 800057a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800057e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000582:	4820      	ldr	r0, [pc, #128]	; (8000604 <mainloop+0xac>)
 8000584:	f000 f84c 	bl	8000620 <buttonInit>
	buzzerInit(&buzzer);
 8000588:	481f      	ldr	r0, [pc, #124]	; (8000608 <mainloop+0xb0>)
 800058a:	f000 f8b7 	bl	80006fc <buzzerInit>
	clockInit(&clock1);
 800058e:	481f      	ldr	r0, [pc, #124]	; (800060c <mainloop+0xb4>)
 8000590:	f000 f93f 	bl	8000812 <clockInit>

	while(1)
	{
		if(button1.state != BUTTON_STATE_NONE){
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <mainloop+0xac>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d016      	beq.n	80005ca <mainloop+0x72>
		   switch(button1.state)
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <mainloop+0xac>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b03      	cmp	r3, #3
 80005a2:	d00e      	beq.n	80005c2 <mainloop+0x6a>
 80005a4:	2b03      	cmp	r3, #3
 80005a6:	dc11      	bgt.n	80005cc <mainloop+0x74>
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d002      	beq.n	80005b2 <mainloop+0x5a>
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d004      	beq.n	80005ba <mainloop+0x62>
 80005b0:	e00c      	b.n	80005cc <mainloop+0x74>
		  {
		     case BUTTON_STATE_PRESS:
			 printf("BUTTON_STATE \r\n"); break;
 80005b2:	4817      	ldr	r0, [pc, #92]	; (8000610 <mainloop+0xb8>)
 80005b4:	f005 f842 	bl	800563c <puts>
 80005b8:	e008      	b.n	80005cc <mainloop+0x74>

		     case BUTTON_LONG_PRESS:
			 printf("BUTTON_LONG_PRESS \r\n"); break;
 80005ba:	4816      	ldr	r0, [pc, #88]	; (8000614 <mainloop+0xbc>)
 80005bc:	f005 f83e 	bl	800563c <puts>
 80005c0:	e004      	b.n	80005cc <mainloop+0x74>

		     case BUTTON_DOBULE_PRESS:
			 printf("BUTTON_DOBULE_PRESS \r\n"); break;
 80005c2:	4815      	ldr	r0, [pc, #84]	; (8000618 <mainloop+0xc0>)
 80005c4:	f005 f83a 	bl	800563c <puts>
 80005c8:	e000      	b.n	80005cc <mainloop+0x74>
		  }

		}
 80005ca:	bf00      	nop
		button1.state = BUTTON_STATE_NONE;
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <mainloop+0xac>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
	    setBrightness(x);
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <mainloop+0xc4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f9ac 	bl	8000934 <setBrightness>
	    x++;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <mainloop+0xc4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <mainloop+0xc4>)
 80005e4:	6013      	str	r3, [r2, #0]
	    if(x>10){
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <mainloop+0xc4>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b0a      	cmp	r3, #10
 80005ec:	ddd2      	ble.n	8000594 <mainloop+0x3c>
	    	x=0;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <mainloop+0xc4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
		if(button1.state != BUTTON_STATE_NONE){
 80005f4:	e7ce      	b.n	8000594 <mainloop+0x3c>
 80005f6:	bf00      	nop
 80005f8:	20000254 	.word	0x20000254
 80005fc:	20000160 	.word	0x20000160
 8000600:	2000014c 	.word	0x2000014c
 8000604:	20000174 	.word	0x20000174
 8000608:	2000018c 	.word	0x2000018c
 800060c:	200001a0 	.word	0x200001a0
 8000610:	08005f74 	.word	0x08005f74
 8000614:	08005f84 	.word	0x08005f84
 8000618:	08005f98 	.word	0x08005f98
 800061c:	200001b4 	.word	0x200001b4

08000620 <buttonInit>:

uint32_t DelayTick = 0;


void buttonInit(BUTTON* button , GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	4613      	mov	r3, r2
 800062c:	80fb      	strh	r3, [r7, #6]
	button->state = BUTTON_STATE_NONE;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
	button->timeTickOn = 0 ;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2200      	movs	r2, #0
 8000638:	605a      	str	r2, [r3, #4]
	button->timeTickPrevOff = 0 ;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
	button->timeTickOff = 0 ;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
	button->GPIOx = GPIOx;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	68ba      	ldr	r2, [r7, #8]
 800064a:	611a      	str	r2, [r3, #16]
	button->GPIO_Pin = GPIO_Pin;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	88fa      	ldrh	r2, [r7, #6]
 8000650:	829a      	strh	r2, [r3, #20]
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <buttonInterrupt>:


void buttonInterrupt(BUTTON* button)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(button->GPIOx, button->GPIO_Pin) == 1){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	691a      	ldr	r2, [r3, #16]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	8a9b      	ldrh	r3, [r3, #20]
 8000670:	4619      	mov	r1, r3
 8000672:	4610      	mov	r0, r2
 8000674:	f001 f9bc 	bl	80019f0 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b01      	cmp	r3, #1
 800067c:	d109      	bne.n	8000692 <buttonInterrupt+0x32>
		button->timeTickPrevOff = button->timeTickOff;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	68da      	ldr	r2, [r3, #12]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	609a      	str	r2, [r3, #8]
		button->timeTickOff = HAL_GetTick();
 8000686:	f000 fe6d 	bl	8001364 <HAL_GetTick>
 800068a:	4602      	mov	r2, r0
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	e00f      	b.n	80006b2 <buttonInterrupt+0x52>
	}

	else if(HAL_GPIO_ReadPin(button->GPIOx, button->GPIO_Pin) == 0){
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	691a      	ldr	r2, [r3, #16]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	8a9b      	ldrh	r3, [r3, #20]
 800069a:	4619      	mov	r1, r3
 800069c:	4610      	mov	r0, r2
 800069e:	f001 f9a7 	bl	80019f0 <HAL_GPIO_ReadPin>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d104      	bne.n	80006b2 <buttonInterrupt+0x52>
		button->timeTickOn = HAL_GetTick();
 80006a8:	f000 fe5c 	bl	8001364 <HAL_GetTick>
 80006ac:	4602      	mov	r2, r0
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	605a      	str	r2, [r3, #4]
	}

	DelayTick = button->timeTickOff - button->timeTickOn;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	68da      	ldr	r2, [r3, #12]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <buttonInterrupt+0x98>)
 80006be:	6013      	str	r3, [r2, #0]


	if(DelayTick > 500){
 80006c0:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <buttonInterrupt+0x98>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80006c8:	d903      	bls.n	80006d2 <buttonInterrupt+0x72>
	   button->state = BUTTON_LONG_PRESS;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2202      	movs	r2, #2
 80006ce:	701a      	strb	r2, [r3, #0]
	   else{
		   button->state = BUTTON_STATE_PRESS;
	   }
	}

}
 80006d0:	e00d      	b.n	80006ee <buttonInterrupt+0x8e>
	   if((button->timeTickOn - button->timeTickPrevOff ) < 200 ){
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	685a      	ldr	r2, [r3, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	2bc7      	cmp	r3, #199	; 0xc7
 80006de:	d803      	bhi.n	80006e8 <buttonInterrupt+0x88>
		   button->state = BUTTON_DOBULE_PRESS;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2203      	movs	r2, #3
 80006e4:	701a      	strb	r2, [r3, #0]
}
 80006e6:	e002      	b.n	80006ee <buttonInterrupt+0x8e>
		   button->state = BUTTON_STATE_PRESS;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200001b8 	.word	0x200001b8

080006fc <buzzerInit>:
int noteJonatan []= {255 , 303,  303,  286, 340, 340, 390, 340, 303, 286, 255, 255, 255, 255 , 303,  303,  286, 340, 340 ,390, 303, 255, 255,390};
int periodeJonatan[]={250, 250,  500,  250, 250, 500, 250, 250, 250, 250, 500, 250, 250, 250,  250,  500,  250, 250, 500, 250, 250, 250 ,500,250};


void buzzerInit(BUZZER* buzzer)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	buzzer->state = MUSIC_OFF;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]
	buzzer->sizeOfMusic = (sizeof(noteJonatan) / sizeof(noteJonatan[0]));
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2218      	movs	r2, #24
 800070e:	605a      	str	r2, [r3, #4]
	buzzer->currentNote= 0;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
	buzzer->counter = 0;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
	buzzer->Maxcount = periodeJonatan[0];
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <buzzerInit+0x34>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	611a      	str	r2, [r3, #16]
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	20000060 	.word	0x20000060

08000734 <playNote>:

void playNote(BUZZER* buzzer)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <playNote+0x54>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim3, noteJonatan[buzzer->currentNote]);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	4a10      	ldr	r2, [pc, #64]	; (800078c <playNote+0x58>)
 800074a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <playNote+0x54>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	4a0c      	ldr	r2, [pc, #48]	; (800078c <playNote+0x58>)
 800075a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800075e:	461a      	mov	r2, r3
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <playNote+0x54>)
 8000762:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (noteJonatan[buzzer->currentNote]/2));
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	4a08      	ldr	r2, [pc, #32]	; (800078c <playNote+0x58>)
 800076a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800076e:	0fda      	lsrs	r2, r3, #31
 8000770:	4413      	add	r3, r2
 8000772:	105b      	asrs	r3, r3, #1
 8000774:	461a      	mov	r2, r3
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <playNote+0x54>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	635a      	str	r2, [r3, #52]	; 0x34

}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	200001bc 	.word	0x200001bc
 800078c:	20000000 	.word	0x20000000

08000790 <playNextNote>:

void playNextNote(BUZZER* buzzer)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	buzzer->currentNote++;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	609a      	str	r2, [r3, #8]
	if(buzzer->currentNote >= buzzer->sizeOfMusic){
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	461a      	mov	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d302      	bcc.n	80007b6 <playNextNote+0x26>
		buzzer->currentNote = 0;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
	}
	buzzer->Maxcount = periodeJonatan [buzzer->currentNote];
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	4a06      	ldr	r2, [pc, #24]	; (80007d4 <playNextNote+0x44>)
 80007bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	611a      	str	r2, [r3, #16]
	playNote(buzzer);
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f7ff ffb5 	bl	8000734 <playNote>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000060 	.word	0x20000060

080007d8 <buzzerOnTimerInterrupt>:

void buzzerOnTimerInterrupt(BUZZER* buzzer)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	if(buzzer->state == MUSIC_ON){
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d110      	bne.n	800080a <buzzerOnTimerInterrupt+0x32>
		buzzer->counter++;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	1c5a      	adds	r2, r3, #1
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	60da      	str	r2, [r3, #12]
		if(buzzer->counter >= buzzer->Maxcount){
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	68da      	ldr	r2, [r3, #12]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	691b      	ldr	r3, [r3, #16]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	db05      	blt.n	800080a <buzzerOnTimerInterrupt+0x32>
		   playNextNote(buzzer);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ffc6 	bl	8000790 <playNextNote>
		   buzzer->counter = 0;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
		}
	}


}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <clockInit>:

#include "clock.h"

void clockInit(CLOCK* clock)
{
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
	clock->tick = 0;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
	clock->seconds = 0;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
	clock->minutes =0;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
	clock->hours = 0;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
	clock->days = 0;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <clockOnTimerInterrupt>:

void clockOnTimerInterrupt(CLOCK* clock)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	clock->tick++;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	1c5a      	adds	r2, r3, #1
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	601a      	str	r2, [r3, #0]
	clock->seconds = clock->tick/1000;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a14      	ldr	r2, [pc, #80]	; (80008ac <clockOnTimerInterrupt+0x68>)
 800085c:	fba2 2303 	umull	r2, r3, r2, r3
 8000860:	099b      	lsrs	r3, r3, #6
 8000862:	461a      	mov	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	605a      	str	r2, [r3, #4]
	clock->minutes = clock->tick/60000;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a10      	ldr	r2, [pc, #64]	; (80008b0 <clockOnTimerInterrupt+0x6c>)
 800086e:	fba2 2303 	umull	r2, r3, r2, r3
 8000872:	0b9b      	lsrs	r3, r3, #14
 8000874:	461a      	mov	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	609a      	str	r2, [r3, #8]
	clock->hours = clock->tick/360000;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	099b      	lsrs	r3, r3, #6
 8000880:	4a0c      	ldr	r2, [pc, #48]	; (80008b4 <clockOnTimerInterrupt+0x70>)
 8000882:	fba2 2303 	umull	r2, r3, r2, r3
 8000886:	089b      	lsrs	r3, r3, #2
 8000888:	461a      	mov	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	60da      	str	r2, [r3, #12]
	clock->days = clock->tick/8640000;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a09      	ldr	r2, [pc, #36]	; (80008b8 <clockOnTimerInterrupt+0x74>)
 8000894:	fba2 2303 	umull	r2, r3, r2, r3
 8000898:	0ddb      	lsrs	r3, r3, #23
 800089a:	461a      	mov	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	611a      	str	r2, [r3, #16]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	10624dd3 	.word	0x10624dd3
 80008b0:	45e7b273 	.word	0x45e7b273
 80008b4:	002e9a77 	.word	0x002e9a77
 80008b8:	f88d2527 	.word	0xf88d2527

080008bc <ledInit>:
#include "led.h"
#include <stdio.h>
extern TIM_HandleTypeDef htim4;

void ledInit(LED* led , GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	4613      	mov	r3, r2
 80008c8:	80fb      	strh	r3, [r7, #6]
 led->state = STATE_OFF;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
 led->counter = 0 ;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2200      	movs	r2, #0
 80008d4:	605a      	str	r2, [r3, #4]
 led->GPIOx = GPIOx;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	68ba      	ldr	r2, [r7, #8]
 80008da:	609a      	str	r2, [r3, #8]
 led->GPIO_Pin = GPIO_Pin;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	88fa      	ldrh	r2, [r7, #6]
 80008e0:	819a      	strh	r2, [r3, #12]
}
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <ledOnTimerInterrupt>:
	led->period = period;
	led->counter = 0;
}

void ledOnTimerInterrupt(LED* led)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
	if(led->state == STATE_BLINKING){
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d115      	bne.n	800092a <ledOnTimerInterrupt+0x3c>
		led->counter++;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	1c5a      	adds	r2, r3, #1
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	605a      	str	r2, [r3, #4]
		if((led->counter) >= (led->period) ){
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685a      	ldr	r2, [r3, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	691b      	ldr	r3, [r3, #16]
 8000910:	429a      	cmp	r2, r3
 8000912:	db0a      	blt.n	800092a <ledOnTimerInterrupt+0x3c>
			HAL_GPIO_TogglePin(led->GPIOx, led->GPIO_Pin);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	689a      	ldr	r2, [r3, #8]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	899b      	ldrh	r3, [r3, #12]
 800091c:	4619      	mov	r1, r3
 800091e:	4610      	mov	r0, r2
 8000920:	f001 f896 	bl	8001a50 <HAL_GPIO_TogglePin>
			led->counter = 0;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	605a      	str	r2, [r3, #4]

		}
	}
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <setBrightness>:

void setBrightness(int brightness)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	if(brightness > 10 )
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b0a      	cmp	r3, #10
 8000940:	dd03      	ble.n	800094a <setBrightness+0x16>
	{
		printf("Invalid command\r\n");
 8000942:	480b      	ldr	r0, [pc, #44]	; (8000970 <setBrightness+0x3c>)
 8000944:	f004 fe7a 	bl	800563c <puts>
		return;
 8000948:	e00f      	b.n	800096a <setBrightness+0x36>
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightness*10);
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	4613      	mov	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4413      	add	r3, r2
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	461a      	mov	r2, r3
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <setBrightness+0x40>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_Base_Start_IT(&htim4);
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <setBrightness+0x40>)
 800095e:	f002 fc21 	bl	80031a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 8000962:	2100      	movs	r1, #0
 8000964:	4803      	ldr	r0, [pc, #12]	; (8000974 <setBrightness+0x40>)
 8000966:	f002 fce5 	bl	8003334 <HAL_TIM_PWM_Start_IT>
}
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	08005fb0 	.word	0x08005fb0
 8000974:	20000208 	.word	0x20000208

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097c:	f000 fc82 	bl	8001284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000980:	f000 f80d 	bl	800099e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000984:	f000 f974 	bl	8000c70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000988:	f000 f942 	bl	8000c10 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800098c:	f000 f90a 	bl	8000ba4 <MX_TIM6_Init>
  MX_TIM3_Init();
 8000990:	f000 f856 	bl	8000a40 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000994:	f000 f8ac 	bl	8000af0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  mainloop();
 8000998:	f7ff fdde 	bl	8000558 <mainloop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800099c:	e7fe      	b.n	800099c <main+0x24>

0800099e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b096      	sub	sp, #88	; 0x58
 80009a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2244      	movs	r2, #68	; 0x44
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f004 fdcf 	bl	8005550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b2:	463b      	mov	r3, r7
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009c4:	f001 f884 	bl	8001ad0 <HAL_PWREx_ControlVoltageScaling>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009ce:	f000 f9cd 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d2:	2302      	movs	r3, #2
 80009d4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009dc:	2310      	movs	r3, #16
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e0:	2302      	movs	r3, #2
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e4:	2302      	movs	r3, #2
 80009e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009ec:	230a      	movs	r3, #10
 80009ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009f0:	2307      	movs	r3, #7
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 f8bb 	bl	8001b7c <HAL_RCC_OscConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a0c:	f000 f9ae 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a10:	230f      	movs	r3, #15
 8000a12:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a14:	2303      	movs	r3, #3
 8000a16:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a24:	463b      	mov	r3, r7
 8000a26:	2104      	movs	r1, #4
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f001 fc83 	bl	8002334 <HAL_RCC_ClockConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a34:	f000 f99a 	bl	8000d6c <Error_Handler>
  }
}
 8000a38:	bf00      	nop
 8000a3a:	3758      	adds	r7, #88	; 0x58
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a52:	463b      	mov	r3, r7
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
 8000a60:	615a      	str	r2, [r3, #20]
 8000a62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a64:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <MX_TIM3_Init+0xa8>)
 8000a66:	4a21      	ldr	r2, [pc, #132]	; (8000aec <MX_TIM3_Init+0xac>)
 8000a68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800;
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <MX_TIM3_Init+0xa8>)
 8000a6c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000a70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a72:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <MX_TIM3_Init+0xa8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_TIM3_Init+0xa8>)
 8000a7a:	2264      	movs	r2, #100	; 0x64
 8000a7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_TIM3_Init+0xa8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_TIM3_Init+0xa8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a8a:	4817      	ldr	r0, [pc, #92]	; (8000ae8 <MX_TIM3_Init+0xa8>)
 8000a8c:	f002 fbfa 	bl	8003284 <HAL_TIM_PWM_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000a96:	f000 f969 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <MX_TIM3_Init+0xa8>)
 8000aaa:	f003 fb89 	bl	80041c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000ab4:	f000 f95a 	bl	8000d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab8:	2360      	movs	r3, #96	; 0x60
 8000aba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8000abc:	230a      	movs	r3, #10
 8000abe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <MX_TIM3_Init+0xa8>)
 8000ad0:	f002 fea4 	bl	800381c <HAL_TIM_PWM_ConfigChannel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000ada:	f000 f947 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	3728      	adds	r7, #40	; 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200001bc 	.word	0x200001bc
 8000aec:	40000400 	.word	0x40000400

08000af0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b02:	463b      	mov	r3, r7
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
 8000b10:	615a      	str	r2, [r3, #20]
 8000b12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <MX_TIM4_Init+0xac>)
 8000b16:	4a22      	ldr	r2, [pc, #136]	; (8000ba0 <MX_TIM4_Init+0xb0>)
 8000b18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000;
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <MX_TIM4_Init+0xac>)
 8000b1c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000b20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b22:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <MX_TIM4_Init+0xac>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000b28:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <MX_TIM4_Init+0xac>)
 8000b2a:	2264      	movs	r2, #100	; 0x64
 8000b2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <MX_TIM4_Init+0xac>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b34:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <MX_TIM4_Init+0xac>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b3a:	4818      	ldr	r0, [pc, #96]	; (8000b9c <MX_TIM4_Init+0xac>)
 8000b3c:	f002 fba2 	bl	8003284 <HAL_TIM_PWM_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000b46:	f000 f911 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4810      	ldr	r0, [pc, #64]	; (8000b9c <MX_TIM4_Init+0xac>)
 8000b5a:	f003 fb31 	bl	80041c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000b64:	f000 f902 	bl	8000d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b68:	2360      	movs	r3, #96	; 0x60
 8000b6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30;
 8000b6c:	231e      	movs	r3, #30
 8000b6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4807      	ldr	r0, [pc, #28]	; (8000b9c <MX_TIM4_Init+0xac>)
 8000b80:	f002 fe4c 	bl	800381c <HAL_TIM_PWM_ConfigChannel>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000b8a:	f000 f8ef 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b8e:	4803      	ldr	r0, [pc, #12]	; (8000b9c <MX_TIM4_Init+0xac>)
 8000b90:	f000 f9b2 	bl	8000ef8 <HAL_TIM_MspPostInit>

}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	; 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000208 	.word	0x20000208
 8000ba0:	40000800 	.word	0x40000800

08000ba4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_TIM6_Init+0x64>)
 8000bb6:	4a15      	ldr	r2, [pc, #84]	; (8000c0c <MX_TIM6_Init+0x68>)
 8000bb8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000;
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <MX_TIM6_Init+0x64>)
 8000bbc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000bc0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_TIM6_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_TIM6_Init+0x64>)
 8000bca:	220a      	movs	r2, #10
 8000bcc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_TIM6_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <MX_TIM6_Init+0x64>)
 8000bd6:	f002 fa8d 	bl	80030f4 <HAL_TIM_Base_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000be0:	f000 f8c4 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_TIM6_Init+0x64>)
 8000bf2:	f003 fae5 	bl	80041c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000bfc:	f000 f8b6 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000254 	.word	0x20000254
 8000c0c:	40001000 	.word	0x40001000

08000c10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c16:	4a15      	ldr	r2, [pc, #84]	; (8000c6c <MX_USART2_UART_Init+0x5c>)
 8000c18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c36:	220c      	movs	r2, #12
 8000c38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c54:	f003 fb5a 	bl	800430c <HAL_UART_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c5e:	f000 f885 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200002a0 	.word	0x200002a0
 8000c6c:	40004400 	.word	0x40004400

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	4b37      	ldr	r3, [pc, #220]	; (8000d64 <MX_GPIO_Init+0xf4>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	4a36      	ldr	r2, [pc, #216]	; (8000d64 <MX_GPIO_Init+0xf4>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c92:	4b34      	ldr	r3, [pc, #208]	; (8000d64 <MX_GPIO_Init+0xf4>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9e:	4b31      	ldr	r3, [pc, #196]	; (8000d64 <MX_GPIO_Init+0xf4>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	4a30      	ldr	r2, [pc, #192]	; (8000d64 <MX_GPIO_Init+0xf4>)
 8000ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000caa:	4b2e      	ldr	r3, [pc, #184]	; (8000d64 <MX_GPIO_Init+0xf4>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	4b2b      	ldr	r3, [pc, #172]	; (8000d64 <MX_GPIO_Init+0xf4>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	4a2a      	ldr	r2, [pc, #168]	; (8000d64 <MX_GPIO_Init+0xf4>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc2:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <MX_GPIO_Init+0xf4>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	4b25      	ldr	r3, [pc, #148]	; (8000d64 <MX_GPIO_Init+0xf4>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	4a24      	ldr	r2, [pc, #144]	; (8000d64 <MX_GPIO_Init+0xf4>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cda:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <MX_GPIO_Init+0xf4>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2160      	movs	r1, #96	; 0x60
 8000cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cee:	f000 fe97 	bl	8001a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cf8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	4817      	ldr	r0, [pc, #92]	; (8000d68 <MX_GPIO_Init+0xf8>)
 8000d0a:	f000 fcc7 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 8000d0e:	2360      	movs	r3, #96	; 0x60
 8000d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d28:	f000 fcb8 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d32:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d46:	f000 fca9 	bl	800169c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2028      	movs	r0, #40	; 0x28
 8000d50:	f000 fbef 	bl	8001532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d54:	2028      	movs	r0, #40	; 0x28
 8000d56:	f000 fc08 	bl	800156a <HAL_NVIC_EnableIRQ>

}
 8000d5a:	bf00      	nop
 8000d5c:	3728      	adds	r7, #40	; 0x28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48000800 	.word	0x48000800

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <Error_Handler+0x8>
	...

08000d78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_MspInit+0x60>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d82:	4a15      	ldr	r2, [pc, #84]	; (8000dd8 <HAL_MspInit+0x60>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <HAL_MspInit+0x60>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <HAL_MspInit+0x60>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <HAL_MspInit+0x60>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	6593      	str	r3, [r2, #88]	; 0x58
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <HAL_MspInit+0x60>)
 8000da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	2005      	movs	r0, #5
 8000db4:	f000 fbbd 	bl	8001532 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000db8:	2005      	movs	r0, #5
 8000dba:	f000 fbd6 	bl	800156a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2005      	movs	r0, #5
 8000dc4:	f000 fbb5 	bl	8001532 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000dc8:	2005      	movs	r0, #5
 8000dca:	f000 fbce 	bl	800156a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000

08000ddc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM3)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a28      	ldr	r2, [pc, #160]	; (8000e9c <HAL_TIM_PWM_MspInit+0xc0>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d130      	bne.n	8000e60 <HAL_TIM_PWM_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dfe:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <HAL_TIM_PWM_MspInit+0xc4>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e02:	4a27      	ldr	r2, [pc, #156]	; (8000ea0 <HAL_TIM_PWM_MspInit+0xc4>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	6593      	str	r3, [r2, #88]	; 0x58
 8000e0a:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <HAL_TIM_PWM_MspInit+0xc4>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <HAL_TIM_PWM_MspInit+0xc4>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	4a21      	ldr	r2, [pc, #132]	; (8000ea0 <HAL_TIM_PWM_MspInit+0xc4>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <HAL_TIM_PWM_MspInit+0xc4>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e2e:	2310      	movs	r3, #16
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4816      	ldr	r0, [pc, #88]	; (8000ea4 <HAL_TIM_PWM_MspInit+0xc8>)
 8000e4a:	f000 fc27 	bl	800169c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	201d      	movs	r0, #29
 8000e54:	f000 fb6d 	bl	8001532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e58:	201d      	movs	r0, #29
 8000e5a:	f000 fb86 	bl	800156a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e5e:	e018      	b.n	8000e92 <HAL_TIM_PWM_MspInit+0xb6>
  else if(htim_pwm->Instance==TIM4)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <HAL_TIM_PWM_MspInit+0xcc>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d113      	bne.n	8000e92 <HAL_TIM_PWM_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <HAL_TIM_PWM_MspInit+0xc4>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ea0 <HAL_TIM_PWM_MspInit+0xc4>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6593      	str	r3, [r2, #88]	; 0x58
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_TIM_PWM_MspInit+0xc4>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	201e      	movs	r0, #30
 8000e88:	f000 fb53 	bl	8001532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e8c:	201e      	movs	r0, #30
 8000e8e:	f000 fb6c 	bl	800156a <HAL_NVIC_EnableIRQ>
}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40000400 	.word	0x40000400
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	48000400 	.word	0x48000400
 8000ea8:	40000800 	.word	0x40000800

08000eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <HAL_TIM_Base_MspInit+0x44>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d113      	bne.n	8000ee6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_TIM_Base_MspInit+0x48>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec2:	4a0c      	ldr	r2, [pc, #48]	; (8000ef4 <HAL_TIM_Base_MspInit+0x48>)
 8000ec4:	f043 0310 	orr.w	r3, r3, #16
 8000ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_TIM_Base_MspInit+0x48>)
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ece:	f003 0310 	and.w	r3, r3, #16
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2036      	movs	r0, #54	; 0x36
 8000edc:	f000 fb29 	bl	8001532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ee0:	2036      	movs	r0, #54	; 0x36
 8000ee2:	f000 fb42 	bl	800156a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40001000 	.word	0x40001000
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a11      	ldr	r2, [pc, #68]	; (8000f5c <HAL_TIM_MspPostInit+0x64>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d11b      	bne.n	8000f52 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_TIM_MspPostInit+0x68>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <HAL_TIM_MspPostInit+0x68>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_TIM_MspPostInit+0x68>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f32:	2340      	movs	r3, #64	; 0x40
 8000f34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <HAL_TIM_MspPostInit+0x6c>)
 8000f4e:	f000 fba5 	bl	800169c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000f52:	bf00      	nop
 8000f54:	3720      	adds	r7, #32
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40000800 	.word	0x40000800
 8000f60:	40021000 	.word	0x40021000
 8000f64:	48000400 	.word	0x48000400

08000f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b0ac      	sub	sp, #176	; 0xb0
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2288      	movs	r2, #136	; 0x88
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f004 fae1 	bl	8005550 <memset>
  if(huart->Instance==USART2)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a25      	ldr	r2, [pc, #148]	; (8001028 <HAL_UART_MspInit+0xc0>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d143      	bne.n	8001020 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f001 fbe9 	bl	800277c <HAL_RCCEx_PeriphCLKConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fb0:	f7ff fedc 	bl	8000d6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb4:	4b1d      	ldr	r3, [pc, #116]	; (800102c <HAL_UART_MspInit+0xc4>)
 8000fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb8:	4a1c      	ldr	r2, [pc, #112]	; (800102c <HAL_UART_MspInit+0xc4>)
 8000fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <HAL_UART_MspInit+0xc4>)
 8000fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b17      	ldr	r3, [pc, #92]	; (800102c <HAL_UART_MspInit+0xc4>)
 8000fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd0:	4a16      	ldr	r2, [pc, #88]	; (800102c <HAL_UART_MspInit+0xc4>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <HAL_UART_MspInit+0xc4>)
 8000fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fe4:	230c      	movs	r3, #12
 8000fe6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ffc:	2307      	movs	r3, #7
 8000ffe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001006:	4619      	mov	r1, r3
 8001008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100c:	f000 fb46 	bl	800169c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2100      	movs	r1, #0
 8001014:	2026      	movs	r0, #38	; 0x26
 8001016:	f000 fa8c 	bl	8001532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800101a:	2026      	movs	r0, #38	; 0x26
 800101c:	f000 faa5 	bl	800156a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001020:	bf00      	nop
 8001022:	37b0      	adds	r7, #176	; 0xb0
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40004400 	.word	0x40004400
 800102c:	40021000 	.word	0x40021000

08001030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <NMI_Handler+0x4>

08001036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <HardFault_Handler+0x4>

0800103c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <MemManage_Handler+0x4>

08001042 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <BusFault_Handler+0x4>

08001048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <UsageFault_Handler+0x4>

0800104e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800107c:	f000 f95e 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <TIM3_IRQHandler+0x10>)
 800109a:	f002 fa9f 	bl	80035dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200001bc 	.word	0x200001bc

080010a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <TIM4_IRQHandler+0x10>)
 80010ae:	f002 fa95 	bl	80035dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000208 	.word	0x20000208

080010bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <USART2_IRQHandler+0x10>)
 80010c2:	f003 fa05 	bl	80044d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200002a0 	.word	0x200002a0

080010d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 80010d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010d8:	f000 fcd4 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010e0:	f000 fcd0 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <TIM6_DAC_IRQHandler+0x10>)
 80010ee:	f002 fa75 	bl	80035dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000254 	.word	0x20000254

080010fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	e00a      	b.n	8001124 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800110e:	f3af 8000 	nop.w
 8001112:	4601      	mov	r1, r0
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	60ba      	str	r2, [r7, #8]
 800111a:	b2ca      	uxtb	r2, r1
 800111c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3301      	adds	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	dbf0      	blt.n	800110e <_read+0x12>
	}

return len;
 800112c:	687b      	ldr	r3, [r7, #4]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
	return -1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800115e:	605a      	str	r2, [r3, #4]
	return 0;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <_isatty>:

int _isatty(int file)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
	return 1;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
	return 0;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a8:	4a14      	ldr	r2, [pc, #80]	; (80011fc <_sbrk+0x5c>)
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <_sbrk+0x60>)
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <_sbrk+0x64>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <_sbrk+0x68>)
 80011c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d207      	bcs.n	80011e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d0:	f004 f994 	bl	80054fc <__errno>
 80011d4:	4603      	mov	r3, r0
 80011d6:	220c      	movs	r2, #12
 80011d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
 80011de:	e009      	b.n	80011f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <_sbrk+0x64>)
 80011f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f2:	68fb      	ldr	r3, [r7, #12]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20018000 	.word	0x20018000
 8001200:	00000400 	.word	0x00000400
 8001204:	20000324 	.word	0x20000324
 8001208:	20000340 	.word	0x20000340

0800120c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <SystemInit+0x20>)
 8001212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <SystemInit+0x20>)
 8001218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800121c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001268 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001234:	f7ff ffea 	bl	800120c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001238:	480c      	ldr	r0, [pc, #48]	; (800126c <LoopForever+0x6>)
  ldr r1, =_edata
 800123a:	490d      	ldr	r1, [pc, #52]	; (8001270 <LoopForever+0xa>)
  ldr r2, =_sidata
 800123c:	4a0d      	ldr	r2, [pc, #52]	; (8001274 <LoopForever+0xe>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001240:	e002      	b.n	8001248 <LoopCopyDataInit>

08001242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001246:	3304      	adds	r3, #4

08001248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800124c:	d3f9      	bcc.n	8001242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001250:	4c0a      	ldr	r4, [pc, #40]	; (800127c <LoopForever+0x16>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001254:	e001      	b.n	800125a <LoopFillZerobss>

08001256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001258:	3204      	adds	r2, #4

0800125a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800125c:	d3fb      	bcc.n	8001256 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800125e:	f004 f953 	bl	8005508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001262:	f7ff fb89 	bl	8000978 <main>

08001266 <LoopForever>:

LoopForever:
    b LoopForever
 8001266:	e7fe      	b.n	8001266 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001268:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800126c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001270:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8001274:	08006080 	.word	0x08006080
  ldr r2, =_sbss
 8001278:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 800127c:	2000033c 	.word	0x2000033c

08001280 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001280:	e7fe      	b.n	8001280 <ADC1_2_IRQHandler>
	...

08001284 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <HAL_Init+0x3c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <HAL_Init+0x3c>)
 8001294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001298:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129a:	2003      	movs	r0, #3
 800129c:	f000 f93e 	bl	800151c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a0:	2000      	movs	r0, #0
 80012a2:	f000 f80f 	bl	80012c4 <HAL_InitTick>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	71fb      	strb	r3, [r7, #7]
 80012b0:	e001      	b.n	80012b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012b2:	f7ff fd61 	bl	8000d78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012b6:	79fb      	ldrb	r3, [r7, #7]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40022000 	.word	0x40022000

080012c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <HAL_InitTick+0x6c>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d023      	beq.n	8001320 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <HAL_InitTick+0x70>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <HAL_InitTick+0x6c>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f949 	bl	8001586 <HAL_SYSTICK_Config>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10f      	bne.n	800131a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b0f      	cmp	r3, #15
 80012fe:	d809      	bhi.n	8001314 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001300:	2200      	movs	r2, #0
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f000 f913 	bl	8001532 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800130c:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <HAL_InitTick+0x74>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e007      	b.n	8001324 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	e004      	b.n	8001324 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	e001      	b.n	8001324 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200000c8 	.word	0x200000c8
 8001334:	200000c0 	.word	0x200000c0
 8001338:	200000c4 	.word	0x200000c4

0800133c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x20>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x24>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_IncTick+0x24>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	200000c8 	.word	0x200000c8
 8001360:	20000328 	.word	0x20000328

08001364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <HAL_GetTick+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000328 	.word	0x20000328

0800137c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60d3      	str	r3, [r2, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <__NVIC_GetPriorityGrouping+0x18>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	f003 0307 	and.w	r3, r3, #7
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db0b      	blt.n	800140a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	f003 021f 	and.w	r2, r3, #31
 80013f8:	4907      	ldr	r1, [pc, #28]	; (8001418 <__NVIC_EnableIRQ+0x38>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	095b      	lsrs	r3, r3, #5
 8001400:	2001      	movs	r0, #1
 8001402:	fa00 f202 	lsl.w	r2, r0, r2
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000e100 	.word	0xe000e100

0800141c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	db0a      	blt.n	8001446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	490c      	ldr	r1, [pc, #48]	; (8001468 <__NVIC_SetPriority+0x4c>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	0112      	lsls	r2, r2, #4
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	440b      	add	r3, r1
 8001440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001444:	e00a      	b.n	800145c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4908      	ldr	r1, [pc, #32]	; (800146c <__NVIC_SetPriority+0x50>)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	3b04      	subs	r3, #4
 8001454:	0112      	lsls	r2, r2, #4
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	440b      	add	r3, r1
 800145a:	761a      	strb	r2, [r3, #24]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000e100 	.word	0xe000e100
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001470:	b480      	push	{r7}
 8001472:	b089      	sub	sp, #36	; 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f1c3 0307 	rsb	r3, r3, #7
 800148a:	2b04      	cmp	r3, #4
 800148c:	bf28      	it	cs
 800148e:	2304      	movcs	r3, #4
 8001490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3304      	adds	r3, #4
 8001496:	2b06      	cmp	r3, #6
 8001498:	d902      	bls.n	80014a0 <NVIC_EncodePriority+0x30>
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3b03      	subs	r3, #3
 800149e:	e000      	b.n	80014a2 <NVIC_EncodePriority+0x32>
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	f04f 32ff 	mov.w	r2, #4294967295
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43da      	mvns	r2, r3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	401a      	ands	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b8:	f04f 31ff 	mov.w	r1, #4294967295
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43d9      	mvns	r1, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	4313      	orrs	r3, r2
         );
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3724      	adds	r7, #36	; 0x24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e8:	d301      	bcc.n	80014ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00f      	b.n	800150e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <SysTick_Config+0x40>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f6:	210f      	movs	r1, #15
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f7ff ff8e 	bl	800141c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <SysTick_Config+0x40>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001506:	4b04      	ldr	r3, [pc, #16]	; (8001518 <SysTick_Config+0x40>)
 8001508:	2207      	movs	r2, #7
 800150a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	e000e010 	.word	0xe000e010

0800151c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ff29 	bl	800137c <__NVIC_SetPriorityGrouping>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001544:	f7ff ff3e 	bl	80013c4 <__NVIC_GetPriorityGrouping>
 8001548:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f7ff ff8e 	bl	8001470 <NVIC_EncodePriority>
 8001554:	4602      	mov	r2, r0
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff5d 	bl	800141c <__NVIC_SetPriority>
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff31 	bl	80013e0 <__NVIC_EnableIRQ>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ffa2 	bl	80014d8 <SysTick_Config>
 8001594:	4603      	mov	r3, r0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800159e:	b480      	push	{r7}
 80015a0:	b085      	sub	sp, #20
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d008      	beq.n	80015c8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2204      	movs	r2, #4
 80015ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e022      	b.n	800160e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 020e 	bic.w	r2, r2, #14
 80015d6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0201 	bic.w	r2, r2, #1
 80015e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	f003 021c 	and.w	r2, r3, #28
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	2101      	movs	r1, #1
 80015f6:	fa01 f202 	lsl.w	r2, r1, r2
 80015fa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800160e:	4618      	mov	r0, r3
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b084      	sub	sp, #16
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d005      	beq.n	800163e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2204      	movs	r2, #4
 8001636:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	e029      	b.n	8001692 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 020e 	bic.w	r2, r2, #14
 800164c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0201 	bic.w	r2, r2, #1
 800165c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f003 021c 	and.w	r2, r3, #28
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	2101      	movs	r1, #1
 800166c:	fa01 f202 	lsl.w	r2, r1, r2
 8001670:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	4798      	blx	r3
    }
  }
  return status;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016aa:	e17f      	b.n	80019ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2101      	movs	r1, #1
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	4013      	ands	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 8171 	beq.w	80019a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d005      	beq.n	80016dc <HAL_GPIO_Init+0x40>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d130      	bne.n	800173e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	2203      	movs	r2, #3
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001712:	2201      	movs	r2, #1
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	f003 0201 	and.w	r2, r3, #1
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	2b03      	cmp	r3, #3
 8001748:	d118      	bne.n	800177c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001750:	2201      	movs	r2, #1
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	08db      	lsrs	r3, r3, #3
 8001766:	f003 0201 	and.w	r2, r3, #1
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b03      	cmp	r3, #3
 8001786:	d017      	beq.n	80017b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	2203      	movs	r2, #3
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d123      	bne.n	800180c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	08da      	lsrs	r2, r3, #3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3208      	adds	r2, #8
 80017cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	220f      	movs	r2, #15
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	691a      	ldr	r2, [r3, #16]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	08da      	lsrs	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3208      	adds	r2, #8
 8001806:	6939      	ldr	r1, [r7, #16]
 8001808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	2203      	movs	r2, #3
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0203 	and.w	r2, r3, #3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80ac 	beq.w	80019a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184e:	4b5f      	ldr	r3, [pc, #380]	; (80019cc <HAL_GPIO_Init+0x330>)
 8001850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001852:	4a5e      	ldr	r2, [pc, #376]	; (80019cc <HAL_GPIO_Init+0x330>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6613      	str	r3, [r2, #96]	; 0x60
 800185a:	4b5c      	ldr	r3, [pc, #368]	; (80019cc <HAL_GPIO_Init+0x330>)
 800185c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001866:	4a5a      	ldr	r2, [pc, #360]	; (80019d0 <HAL_GPIO_Init+0x334>)
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	3302      	adds	r3, #2
 800186e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	220f      	movs	r2, #15
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001890:	d025      	beq.n	80018de <HAL_GPIO_Init+0x242>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4f      	ldr	r2, [pc, #316]	; (80019d4 <HAL_GPIO_Init+0x338>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d01f      	beq.n	80018da <HAL_GPIO_Init+0x23e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4e      	ldr	r2, [pc, #312]	; (80019d8 <HAL_GPIO_Init+0x33c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d019      	beq.n	80018d6 <HAL_GPIO_Init+0x23a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4d      	ldr	r2, [pc, #308]	; (80019dc <HAL_GPIO_Init+0x340>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <HAL_GPIO_Init+0x236>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4c      	ldr	r2, [pc, #304]	; (80019e0 <HAL_GPIO_Init+0x344>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d00d      	beq.n	80018ce <HAL_GPIO_Init+0x232>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4b      	ldr	r2, [pc, #300]	; (80019e4 <HAL_GPIO_Init+0x348>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d007      	beq.n	80018ca <HAL_GPIO_Init+0x22e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4a      	ldr	r2, [pc, #296]	; (80019e8 <HAL_GPIO_Init+0x34c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d101      	bne.n	80018c6 <HAL_GPIO_Init+0x22a>
 80018c2:	2306      	movs	r3, #6
 80018c4:	e00c      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018c6:	2307      	movs	r3, #7
 80018c8:	e00a      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018ca:	2305      	movs	r3, #5
 80018cc:	e008      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018ce:	2304      	movs	r3, #4
 80018d0:	e006      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018d2:	2303      	movs	r3, #3
 80018d4:	e004      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e002      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018de:	2300      	movs	r3, #0
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	f002 0203 	and.w	r2, r2, #3
 80018e6:	0092      	lsls	r2, r2, #2
 80018e8:	4093      	lsls	r3, r2
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018f0:	4937      	ldr	r1, [pc, #220]	; (80019d0 <HAL_GPIO_Init+0x334>)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	3302      	adds	r3, #2
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018fe:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <HAL_GPIO_Init+0x350>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001922:	4a32      	ldr	r2, [pc, #200]	; (80019ec <HAL_GPIO_Init+0x350>)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001928:	4b30      	ldr	r3, [pc, #192]	; (80019ec <HAL_GPIO_Init+0x350>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800194c:	4a27      	ldr	r2, [pc, #156]	; (80019ec <HAL_GPIO_Init+0x350>)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001952:	4b26      	ldr	r3, [pc, #152]	; (80019ec <HAL_GPIO_Init+0x350>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001976:	4a1d      	ldr	r2, [pc, #116]	; (80019ec <HAL_GPIO_Init+0x350>)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800197c:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <HAL_GPIO_Init+0x350>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019a0:	4a12      	ldr	r2, [pc, #72]	; (80019ec <HAL_GPIO_Init+0x350>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa22 f303 	lsr.w	r3, r2, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f47f ae78 	bne.w	80016ac <HAL_GPIO_Init+0x10>
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	371c      	adds	r7, #28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40010000 	.word	0x40010000
 80019d4:	48000400 	.word	0x48000400
 80019d8:	48000800 	.word	0x48000800
 80019dc:	48000c00 	.word	0x48000c00
 80019e0:	48001000 	.word	0x48001000
 80019e4:	48001400 	.word	0x48001400
 80019e8:	48001800 	.word	0x48001800
 80019ec:	40010400 	.word	0x40010400

080019f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	887b      	ldrh	r3, [r7, #2]
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	e001      	b.n	8001a12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a30:	787b      	ldrb	r3, [r7, #1]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4013      	ands	r3, r2
 8001a68:	041a      	lsls	r2, r3, #16
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	43d9      	mvns	r1, r3
 8001a6e:	887b      	ldrh	r3, [r7, #2]
 8001a70:	400b      	ands	r3, r1
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	619a      	str	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d006      	beq.n	8001aa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a9a:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fd4a 	bl	800053c <HAL_GPIO_EXTI_Callback>
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <HAL_PWREx_GetVoltageRange+0x18>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40007000 	.word	0x40007000

08001ad0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ade:	d130      	bne.n	8001b42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ae0:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aec:	d038      	beq.n	8001b60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aee:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001af6:	4a1e      	ldr	r2, [pc, #120]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001afc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2232      	movs	r2, #50	; 0x32
 8001b04:	fb02 f303 	mul.w	r3, r2, r3
 8001b08:	4a1b      	ldr	r2, [pc, #108]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	0c9b      	lsrs	r3, r3, #18
 8001b10:	3301      	adds	r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b14:	e002      	b.n	8001b1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b28:	d102      	bne.n	8001b30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f2      	bne.n	8001b16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b3c:	d110      	bne.n	8001b60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e00f      	b.n	8001b62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b4e:	d007      	beq.n	8001b60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b58:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40007000 	.word	0x40007000
 8001b74:	200000c0 	.word	0x200000c0
 8001b78:	431bde83 	.word	0x431bde83

08001b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e3ca      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b8e:	4b97      	ldr	r3, [pc, #604]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b98:	4b94      	ldr	r3, [pc, #592]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 80e4 	beq.w	8001d78 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d007      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x4a>
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	2b0c      	cmp	r3, #12
 8001bba:	f040 808b 	bne.w	8001cd4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	f040 8087 	bne.w	8001cd4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bc6:	4b89      	ldr	r3, [pc, #548]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <HAL_RCC_OscConfig+0x62>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e3a2      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1a      	ldr	r2, [r3, #32]
 8001be2:	4b82      	ldr	r3, [pc, #520]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d004      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x7c>
 8001bee:	4b7f      	ldr	r3, [pc, #508]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bf6:	e005      	b.n	8001c04 <HAL_RCC_OscConfig+0x88>
 8001bf8:	4b7c      	ldr	r3, [pc, #496]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d223      	bcs.n	8001c50 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 fd55 	bl	80026bc <RCC_SetFlashLatencyFromMSIRange>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e383      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c1c:	4b73      	ldr	r3, [pc, #460]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a72      	ldr	r2, [pc, #456]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001c22:	f043 0308 	orr.w	r3, r3, #8
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b70      	ldr	r3, [pc, #448]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	496d      	ldr	r1, [pc, #436]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c3a:	4b6c      	ldr	r3, [pc, #432]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	4968      	ldr	r1, [pc, #416]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]
 8001c4e:	e025      	b.n	8001c9c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c50:	4b66      	ldr	r3, [pc, #408]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a65      	ldr	r2, [pc, #404]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001c56:	f043 0308 	orr.w	r3, r3, #8
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b63      	ldr	r3, [pc, #396]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4960      	ldr	r1, [pc, #384]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c6e:	4b5f      	ldr	r3, [pc, #380]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	495b      	ldr	r1, [pc, #364]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d109      	bne.n	8001c9c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 fd15 	bl	80026bc <RCC_SetFlashLatencyFromMSIRange>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e343      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c9c:	f000 fc4a 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b52      	ldr	r3, [pc, #328]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	091b      	lsrs	r3, r3, #4
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	4950      	ldr	r1, [pc, #320]	; (8001df0 <HAL_RCC_OscConfig+0x274>)
 8001cae:	5ccb      	ldrb	r3, [r1, r3]
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb8:	4a4e      	ldr	r2, [pc, #312]	; (8001df4 <HAL_RCC_OscConfig+0x278>)
 8001cba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cbc:	4b4e      	ldr	r3, [pc, #312]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff faff 	bl	80012c4 <HAL_InitTick>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d052      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	e327      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d032      	beq.n	8001d42 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cdc:	4b43      	ldr	r3, [pc, #268]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a42      	ldr	r2, [pc, #264]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fb3c 	bl	8001364 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cf0:	f7ff fb38 	bl	8001364 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e310      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d02:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d0e:	4b37      	ldr	r3, [pc, #220]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a36      	ldr	r2, [pc, #216]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001d14:	f043 0308 	orr.w	r3, r3, #8
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	4b34      	ldr	r3, [pc, #208]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	4931      	ldr	r1, [pc, #196]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d2c:	4b2f      	ldr	r3, [pc, #188]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	021b      	lsls	r3, r3, #8
 8001d3a:	492c      	ldr	r1, [pc, #176]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	604b      	str	r3, [r1, #4]
 8001d40:	e01a      	b.n	8001d78 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d42:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a29      	ldr	r2, [pc, #164]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001d48:	f023 0301 	bic.w	r3, r3, #1
 8001d4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d4e:	f7ff fb09 	bl	8001364 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d56:	f7ff fb05 	bl	8001364 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e2dd      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d68:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f0      	bne.n	8001d56 <HAL_RCC_OscConfig+0x1da>
 8001d74:	e000      	b.n	8001d78 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d074      	beq.n	8001e6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d005      	beq.n	8001d96 <HAL_RCC_OscConfig+0x21a>
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	2b0c      	cmp	r3, #12
 8001d8e:	d10e      	bne.n	8001dae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d10b      	bne.n	8001dae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d064      	beq.n	8001e6c <HAL_RCC_OscConfig+0x2f0>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d160      	bne.n	8001e6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e2ba      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db6:	d106      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x24a>
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	e026      	b.n	8001e14 <HAL_RCC_OscConfig+0x298>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dce:	d115      	bne.n	8001dfc <HAL_RCC_OscConfig+0x280>
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a05      	ldr	r2, [pc, #20]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a02      	ldr	r2, [pc, #8]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	e014      	b.n	8001e14 <HAL_RCC_OscConfig+0x298>
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000
 8001df0:	08005fc4 	.word	0x08005fc4
 8001df4:	200000c0 	.word	0x200000c0
 8001df8:	200000c4 	.word	0x200000c4
 8001dfc:	4ba0      	ldr	r3, [pc, #640]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a9f      	ldr	r2, [pc, #636]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b9d      	ldr	r3, [pc, #628]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a9c      	ldr	r2, [pc, #624]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d013      	beq.n	8001e44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff faa2 	bl	8001364 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e24:	f7ff fa9e 	bl	8001364 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	; 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e276      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e36:	4b92      	ldr	r3, [pc, #584]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0x2a8>
 8001e42:	e014      	b.n	8001e6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff fa8e 	bl	8001364 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7ff fa8a 	bl	8001364 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e262      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e5e:	4b88      	ldr	r3, [pc, #544]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x2d0>
 8001e6a:	e000      	b.n	8001e6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d060      	beq.n	8001f3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_OscConfig+0x310>
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	2b0c      	cmp	r3, #12
 8001e84:	d119      	bne.n	8001eba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d116      	bne.n	8001eba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e8c:	4b7c      	ldr	r3, [pc, #496]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x328>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e23f      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea4:	4b76      	ldr	r3, [pc, #472]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	061b      	lsls	r3, r3, #24
 8001eb2:	4973      	ldr	r1, [pc, #460]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb8:	e040      	b.n	8001f3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d023      	beq.n	8001f0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec2:	4b6f      	ldr	r3, [pc, #444]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a6e      	ldr	r2, [pc, #440]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ece:	f7ff fa49 	bl	8001364 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed6:	f7ff fa45 	bl	8001364 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e21d      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee8:	4b65      	ldr	r3, [pc, #404]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4b62      	ldr	r3, [pc, #392]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	061b      	lsls	r3, r3, #24
 8001f02:	495f      	ldr	r1, [pc, #380]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
 8001f08:	e018      	b.n	8001f3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0a:	4b5d      	ldr	r3, [pc, #372]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a5c      	ldr	r2, [pc, #368]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f16:	f7ff fa25 	bl	8001364 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1e:	f7ff fa21 	bl	8001364 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e1f9      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f30:	4b53      	ldr	r3, [pc, #332]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f0      	bne.n	8001f1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d03c      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01c      	beq.n	8001f8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f50:	4b4b      	ldr	r3, [pc, #300]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f56:	4a4a      	ldr	r2, [pc, #296]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f60:	f7ff fa00 	bl	8001364 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f68:	f7ff f9fc 	bl	8001364 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e1d4      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f7a:	4b41      	ldr	r3, [pc, #260]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0ef      	beq.n	8001f68 <HAL_RCC_OscConfig+0x3ec>
 8001f88:	e01b      	b.n	8001fc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f8a:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f90:	4a3b      	ldr	r2, [pc, #236]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001f92:	f023 0301 	bic.w	r3, r3, #1
 8001f96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9a:	f7ff f9e3 	bl	8001364 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa2:	f7ff f9df 	bl	8001364 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e1b7      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb4:	4b32      	ldr	r3, [pc, #200]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1ef      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80a6 	beq.w	800211c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fd4:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10d      	bne.n	8001ffc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe0:	4b27      	ldr	r3, [pc, #156]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	4a26      	ldr	r2, [pc, #152]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fea:	6593      	str	r3, [r2, #88]	; 0x58
 8001fec:	4b24      	ldr	r3, [pc, #144]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ffc:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_RCC_OscConfig+0x508>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d118      	bne.n	800203a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002008:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <HAL_RCC_OscConfig+0x508>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a1d      	ldr	r2, [pc, #116]	; (8002084 <HAL_RCC_OscConfig+0x508>)
 800200e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002012:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002014:	f7ff f9a6 	bl	8001364 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201c:	f7ff f9a2 	bl	8001364 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e17a      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <HAL_RCC_OscConfig+0x508>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d108      	bne.n	8002054 <HAL_RCC_OscConfig+0x4d8>
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8002044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002048:	4a0d      	ldr	r2, [pc, #52]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002052:	e029      	b.n	80020a8 <HAL_RCC_OscConfig+0x52c>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b05      	cmp	r3, #5
 800205a:	d115      	bne.n	8002088 <HAL_RCC_OscConfig+0x50c>
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002062:	4a07      	ldr	r2, [pc, #28]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002072:	4a03      	ldr	r2, [pc, #12]	; (8002080 <HAL_RCC_OscConfig+0x504>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800207c:	e014      	b.n	80020a8 <HAL_RCC_OscConfig+0x52c>
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	40007000 	.word	0x40007000
 8002088:	4b9c      	ldr	r3, [pc, #624]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208e:	4a9b      	ldr	r2, [pc, #620]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 8002090:	f023 0301 	bic.w	r3, r3, #1
 8002094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002098:	4b98      	ldr	r3, [pc, #608]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209e:	4a97      	ldr	r2, [pc, #604]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 80020a0:	f023 0304 	bic.w	r3, r3, #4
 80020a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d016      	beq.n	80020de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7ff f958 	bl	8001364 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7ff f954 	bl	8001364 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e12a      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ce:	4b8b      	ldr	r3, [pc, #556]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0ed      	beq.n	80020b8 <HAL_RCC_OscConfig+0x53c>
 80020dc:	e015      	b.n	800210a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020de:	f7ff f941 	bl	8001364 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020e4:	e00a      	b.n	80020fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7ff f93d 	bl	8001364 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e113      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020fc:	4b7f      	ldr	r3, [pc, #508]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1ed      	bne.n	80020e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800210a:	7ffb      	ldrb	r3, [r7, #31]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d105      	bne.n	800211c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002110:	4b7a      	ldr	r3, [pc, #488]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002114:	4a79      	ldr	r2, [pc, #484]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 8002116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800211a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80fe 	beq.w	8002322 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	2b02      	cmp	r3, #2
 800212c:	f040 80d0 	bne.w	80022d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002130:	4b72      	ldr	r3, [pc, #456]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f003 0203 	and.w	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	429a      	cmp	r2, r3
 8002142:	d130      	bne.n	80021a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	3b01      	subs	r3, #1
 8002150:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d127      	bne.n	80021a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002160:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d11f      	bne.n	80021a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002170:	2a07      	cmp	r2, #7
 8002172:	bf14      	ite	ne
 8002174:	2201      	movne	r2, #1
 8002176:	2200      	moveq	r2, #0
 8002178:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800217a:	4293      	cmp	r3, r2
 800217c:	d113      	bne.n	80021a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002188:	085b      	lsrs	r3, r3, #1
 800218a:	3b01      	subs	r3, #1
 800218c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800218e:	429a      	cmp	r2, r3
 8002190:	d109      	bne.n	80021a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	085b      	lsrs	r3, r3, #1
 800219e:	3b01      	subs	r3, #1
 80021a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d06e      	beq.n	8002284 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2b0c      	cmp	r3, #12
 80021aa:	d069      	beq.n	8002280 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021ac:	4b53      	ldr	r3, [pc, #332]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d105      	bne.n	80021c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021b8:	4b50      	ldr	r3, [pc, #320]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0ad      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021c8:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a4b      	ldr	r2, [pc, #300]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 80021ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021d4:	f7ff f8c6 	bl	8001364 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021dc:	f7ff f8c2 	bl	8001364 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e09a      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ee:	4b43      	ldr	r3, [pc, #268]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021fa:	4b40      	ldr	r3, [pc, #256]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	4b40      	ldr	r3, [pc, #256]	; (8002300 <HAL_RCC_OscConfig+0x784>)
 8002200:	4013      	ands	r3, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800220a:	3a01      	subs	r2, #1
 800220c:	0112      	lsls	r2, r2, #4
 800220e:	4311      	orrs	r1, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002214:	0212      	lsls	r2, r2, #8
 8002216:	4311      	orrs	r1, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800221c:	0852      	lsrs	r2, r2, #1
 800221e:	3a01      	subs	r2, #1
 8002220:	0552      	lsls	r2, r2, #21
 8002222:	4311      	orrs	r1, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002228:	0852      	lsrs	r2, r2, #1
 800222a:	3a01      	subs	r2, #1
 800222c:	0652      	lsls	r2, r2, #25
 800222e:	4311      	orrs	r1, r2
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002234:	0912      	lsrs	r2, r2, #4
 8002236:	0452      	lsls	r2, r2, #17
 8002238:	430a      	orrs	r2, r1
 800223a:	4930      	ldr	r1, [pc, #192]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 800223c:	4313      	orrs	r3, r2
 800223e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002240:	4b2e      	ldr	r3, [pc, #184]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a2d      	ldr	r2, [pc, #180]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 8002246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800224a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800224c:	4b2b      	ldr	r3, [pc, #172]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a2a      	ldr	r2, [pc, #168]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 8002252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002256:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002258:	f7ff f884 	bl	8001364 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002260:	f7ff f880 	bl	8001364 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e058      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002272:	4b22      	ldr	r3, [pc, #136]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800227e:	e050      	b.n	8002322 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e04f      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d148      	bne.n	8002322 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a19      	ldr	r2, [pc, #100]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 8002296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800229a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800229c:	4b17      	ldr	r3, [pc, #92]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4a16      	ldr	r2, [pc, #88]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 80022a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022a8:	f7ff f85c 	bl	8001364 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b0:	f7ff f858 	bl	8001364 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e030      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x734>
 80022ce:	e028      	b.n	8002322 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	2b0c      	cmp	r3, #12
 80022d4:	d023      	beq.n	800231e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a08      	ldr	r2, [pc, #32]	; (80022fc <HAL_RCC_OscConfig+0x780>)
 80022dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e2:	f7ff f83f 	bl	8001364 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e8:	e00c      	b.n	8002304 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ea:	f7ff f83b 	bl	8001364 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d905      	bls.n	8002304 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e013      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
 80022fc:	40021000 	.word	0x40021000
 8002300:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002304:	4b09      	ldr	r3, [pc, #36]	; (800232c <HAL_RCC_OscConfig+0x7b0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1ec      	bne.n	80022ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_RCC_OscConfig+0x7b0>)
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	4905      	ldr	r1, [pc, #20]	; (800232c <HAL_RCC_OscConfig+0x7b0>)
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_RCC_OscConfig+0x7b4>)
 8002318:	4013      	ands	r3, r2
 800231a:	60cb      	str	r3, [r1, #12]
 800231c:	e001      	b.n	8002322 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40021000 	.word	0x40021000
 8002330:	feeefffc 	.word	0xfeeefffc

08002334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0e7      	b.n	8002518 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002348:	4b75      	ldr	r3, [pc, #468]	; (8002520 <HAL_RCC_ClockConfig+0x1ec>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d910      	bls.n	8002378 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b72      	ldr	r3, [pc, #456]	; (8002520 <HAL_RCC_ClockConfig+0x1ec>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 0207 	bic.w	r2, r3, #7
 800235e:	4970      	ldr	r1, [pc, #448]	; (8002520 <HAL_RCC_ClockConfig+0x1ec>)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b6e      	ldr	r3, [pc, #440]	; (8002520 <HAL_RCC_ClockConfig+0x1ec>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0cf      	b.n	8002518 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d010      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	4b66      	ldr	r3, [pc, #408]	; (8002524 <HAL_RCC_ClockConfig+0x1f0>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002390:	429a      	cmp	r2, r3
 8002392:	d908      	bls.n	80023a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002394:	4b63      	ldr	r3, [pc, #396]	; (8002524 <HAL_RCC_ClockConfig+0x1f0>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4960      	ldr	r1, [pc, #384]	; (8002524 <HAL_RCC_ClockConfig+0x1f0>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d04c      	beq.n	800244c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ba:	4b5a      	ldr	r3, [pc, #360]	; (8002524 <HAL_RCC_ClockConfig+0x1f0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d121      	bne.n	800240a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0a6      	b.n	8002518 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023d2:	4b54      	ldr	r3, [pc, #336]	; (8002524 <HAL_RCC_ClockConfig+0x1f0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d115      	bne.n	800240a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e09a      	b.n	8002518 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ea:	4b4e      	ldr	r3, [pc, #312]	; (8002524 <HAL_RCC_ClockConfig+0x1f0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e08e      	b.n	8002518 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023fa:	4b4a      	ldr	r3, [pc, #296]	; (8002524 <HAL_RCC_ClockConfig+0x1f0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e086      	b.n	8002518 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800240a:	4b46      	ldr	r3, [pc, #280]	; (8002524 <HAL_RCC_ClockConfig+0x1f0>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f023 0203 	bic.w	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	4943      	ldr	r1, [pc, #268]	; (8002524 <HAL_RCC_ClockConfig+0x1f0>)
 8002418:	4313      	orrs	r3, r2
 800241a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800241c:	f7fe ffa2 	bl	8001364 <HAL_GetTick>
 8002420:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002422:	e00a      	b.n	800243a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002424:	f7fe ff9e 	bl	8001364 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e06e      	b.n	8002518 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	4b3a      	ldr	r3, [pc, #232]	; (8002524 <HAL_RCC_ClockConfig+0x1f0>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 020c 	and.w	r2, r3, #12
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	429a      	cmp	r2, r3
 800244a:	d1eb      	bne.n	8002424 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d010      	beq.n	800247a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	4b31      	ldr	r3, [pc, #196]	; (8002524 <HAL_RCC_ClockConfig+0x1f0>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002464:	429a      	cmp	r2, r3
 8002466:	d208      	bcs.n	800247a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002468:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <HAL_RCC_ClockConfig+0x1f0>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	492b      	ldr	r1, [pc, #172]	; (8002524 <HAL_RCC_ClockConfig+0x1f0>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800247a:	4b29      	ldr	r3, [pc, #164]	; (8002520 <HAL_RCC_ClockConfig+0x1ec>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d210      	bcs.n	80024aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002488:	4b25      	ldr	r3, [pc, #148]	; (8002520 <HAL_RCC_ClockConfig+0x1ec>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 0207 	bic.w	r2, r3, #7
 8002490:	4923      	ldr	r1, [pc, #140]	; (8002520 <HAL_RCC_ClockConfig+0x1ec>)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002498:	4b21      	ldr	r3, [pc, #132]	; (8002520 <HAL_RCC_ClockConfig+0x1ec>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d001      	beq.n	80024aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e036      	b.n	8002518 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b6:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HAL_RCC_ClockConfig+0x1f0>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	4918      	ldr	r1, [pc, #96]	; (8002524 <HAL_RCC_ClockConfig+0x1f0>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d009      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d4:	4b13      	ldr	r3, [pc, #76]	; (8002524 <HAL_RCC_ClockConfig+0x1f0>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4910      	ldr	r1, [pc, #64]	; (8002524 <HAL_RCC_ClockConfig+0x1f0>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024e8:	f000 f824 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <HAL_RCC_ClockConfig+0x1f0>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	490b      	ldr	r1, [pc, #44]	; (8002528 <HAL_RCC_ClockConfig+0x1f4>)
 80024fa:	5ccb      	ldrb	r3, [r1, r3]
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
 8002504:	4a09      	ldr	r2, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x1f8>)
 8002506:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002508:	4b09      	ldr	r3, [pc, #36]	; (8002530 <HAL_RCC_ClockConfig+0x1fc>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe fed9 	bl	80012c4 <HAL_InitTick>
 8002512:	4603      	mov	r3, r0
 8002514:	72fb      	strb	r3, [r7, #11]

  return status;
 8002516:	7afb      	ldrb	r3, [r7, #11]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40022000 	.word	0x40022000
 8002524:	40021000 	.word	0x40021000
 8002528:	08005fc4 	.word	0x08005fc4
 800252c:	200000c0 	.word	0x200000c0
 8002530:	200000c4 	.word	0x200000c4

08002534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002542:	4b3e      	ldr	r3, [pc, #248]	; (800263c <HAL_RCC_GetSysClockFreq+0x108>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800254c:	4b3b      	ldr	r3, [pc, #236]	; (800263c <HAL_RCC_GetSysClockFreq+0x108>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x34>
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	2b0c      	cmp	r3, #12
 8002560:	d121      	bne.n	80025a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d11e      	bne.n	80025a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002568:	4b34      	ldr	r3, [pc, #208]	; (800263c <HAL_RCC_GetSysClockFreq+0x108>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d107      	bne.n	8002584 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002574:	4b31      	ldr	r3, [pc, #196]	; (800263c <HAL_RCC_GetSysClockFreq+0x108>)
 8002576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800257a:	0a1b      	lsrs	r3, r3, #8
 800257c:	f003 030f 	and.w	r3, r3, #15
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	e005      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002584:	4b2d      	ldr	r3, [pc, #180]	; (800263c <HAL_RCC_GetSysClockFreq+0x108>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002590:	4a2b      	ldr	r2, [pc, #172]	; (8002640 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002598:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10d      	bne.n	80025bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025a4:	e00a      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d102      	bne.n	80025b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025ac:	4b25      	ldr	r3, [pc, #148]	; (8002644 <HAL_RCC_GetSysClockFreq+0x110>)
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	e004      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025b8:	4b23      	ldr	r3, [pc, #140]	; (8002648 <HAL_RCC_GetSysClockFreq+0x114>)
 80025ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	2b0c      	cmp	r3, #12
 80025c0:	d134      	bne.n	800262c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025c2:	4b1e      	ldr	r3, [pc, #120]	; (800263c <HAL_RCC_GetSysClockFreq+0x108>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d003      	beq.n	80025da <HAL_RCC_GetSysClockFreq+0xa6>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d003      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0xac>
 80025d8:	e005      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025da:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <HAL_RCC_GetSysClockFreq+0x110>)
 80025dc:	617b      	str	r3, [r7, #20]
      break;
 80025de:	e005      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_RCC_GetSysClockFreq+0x114>)
 80025e2:	617b      	str	r3, [r7, #20]
      break;
 80025e4:	e002      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	617b      	str	r3, [r7, #20]
      break;
 80025ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025ec:	4b13      	ldr	r3, [pc, #76]	; (800263c <HAL_RCC_GetSysClockFreq+0x108>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	3301      	adds	r3, #1
 80025f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <HAL_RCC_GetSysClockFreq+0x108>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	0a1b      	lsrs	r3, r3, #8
 8002600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	fb03 f202 	mul.w	r2, r3, r2
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002610:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <HAL_RCC_GetSysClockFreq+0x108>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	0e5b      	lsrs	r3, r3, #25
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	3301      	adds	r3, #1
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	fbb2 f3f3 	udiv	r3, r2, r3
 800262a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800262c:	69bb      	ldr	r3, [r7, #24]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3724      	adds	r7, #36	; 0x24
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000
 8002640:	08005fdc 	.word	0x08005fdc
 8002644:	00f42400 	.word	0x00f42400
 8002648:	007a1200 	.word	0x007a1200

0800264c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <HAL_RCC_GetHCLKFreq+0x14>)
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	200000c0 	.word	0x200000c0

08002664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002668:	f7ff fff0 	bl	800264c <HAL_RCC_GetHCLKFreq>
 800266c:	4602      	mov	r2, r0
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	4904      	ldr	r1, [pc, #16]	; (800268c <HAL_RCC_GetPCLK1Freq+0x28>)
 800267a:	5ccb      	ldrb	r3, [r1, r3]
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002684:	4618      	mov	r0, r3
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40021000 	.word	0x40021000
 800268c:	08005fd4 	.word	0x08005fd4

08002690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002694:	f7ff ffda 	bl	800264c <HAL_RCC_GetHCLKFreq>
 8002698:	4602      	mov	r2, r0
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	0adb      	lsrs	r3, r3, #11
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	4904      	ldr	r1, [pc, #16]	; (80026b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026a6:	5ccb      	ldrb	r3, [r1, r3]
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000
 80026b8:	08005fd4 	.word	0x08005fd4

080026bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026c4:	2300      	movs	r3, #0
 80026c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026c8:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026d4:	f7ff f9ee 	bl	8001ab4 <HAL_PWREx_GetVoltageRange>
 80026d8:	6178      	str	r0, [r7, #20]
 80026da:	e014      	b.n	8002706 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026dc:	4b25      	ldr	r3, [pc, #148]	; (8002774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	4a24      	ldr	r2, [pc, #144]	; (8002774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e6:	6593      	str	r3, [r2, #88]	; 0x58
 80026e8:	4b22      	ldr	r3, [pc, #136]	; (8002774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026f4:	f7ff f9de 	bl	8001ab4 <HAL_PWREx_GetVoltageRange>
 80026f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026fa:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fe:	4a1d      	ldr	r2, [pc, #116]	; (8002774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002704:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800270c:	d10b      	bne.n	8002726 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b80      	cmp	r3, #128	; 0x80
 8002712:	d919      	bls.n	8002748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2ba0      	cmp	r3, #160	; 0xa0
 8002718:	d902      	bls.n	8002720 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800271a:	2302      	movs	r3, #2
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	e013      	b.n	8002748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002720:	2301      	movs	r3, #1
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	e010      	b.n	8002748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d902      	bls.n	8002732 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800272c:	2303      	movs	r3, #3
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	e00a      	b.n	8002748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b80      	cmp	r3, #128	; 0x80
 8002736:	d102      	bne.n	800273e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002738:	2302      	movs	r3, #2
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	e004      	b.n	8002748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b70      	cmp	r3, #112	; 0x70
 8002742:	d101      	bne.n	8002748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002744:	2301      	movs	r3, #1
 8002746:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f023 0207 	bic.w	r2, r3, #7
 8002750:	4909      	ldr	r1, [pc, #36]	; (8002778 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	429a      	cmp	r2, r3
 8002764:	d001      	beq.n	800276a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000
 8002778:	40022000 	.word	0x40022000

0800277c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002784:	2300      	movs	r3, #0
 8002786:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002788:	2300      	movs	r3, #0
 800278a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002794:	2b00      	cmp	r3, #0
 8002796:	d041      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800279c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027a0:	d02a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027a6:	d824      	bhi.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027ac:	d008      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027b2:	d81e      	bhi.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00a      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027bc:	d010      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027be:	e018      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027c0:	4b86      	ldr	r3, [pc, #536]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4a85      	ldr	r2, [pc, #532]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027cc:	e015      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3304      	adds	r3, #4
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 fabb 	bl	8002d50 <RCCEx_PLLSAI1_Config>
 80027da:	4603      	mov	r3, r0
 80027dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027de:	e00c      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3320      	adds	r3, #32
 80027e4:	2100      	movs	r1, #0
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fba6 	bl	8002f38 <RCCEx_PLLSAI2_Config>
 80027ec:	4603      	mov	r3, r0
 80027ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027f0:	e003      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	74fb      	strb	r3, [r7, #19]
      break;
 80027f6:	e000      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027fa:	7cfb      	ldrb	r3, [r7, #19]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10b      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002800:	4b76      	ldr	r3, [pc, #472]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002806:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800280e:	4973      	ldr	r1, [pc, #460]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002816:	e001      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002818:	7cfb      	ldrb	r3, [r7, #19]
 800281a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d041      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800282c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002830:	d02a      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002832:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002836:	d824      	bhi.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002838:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800283c:	d008      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800283e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002842:	d81e      	bhi.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800284c:	d010      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800284e:	e018      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002850:	4b62      	ldr	r3, [pc, #392]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4a61      	ldr	r2, [pc, #388]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800285c:	e015      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3304      	adds	r3, #4
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f000 fa73 	bl	8002d50 <RCCEx_PLLSAI1_Config>
 800286a:	4603      	mov	r3, r0
 800286c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800286e:	e00c      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3320      	adds	r3, #32
 8002874:	2100      	movs	r1, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fb5e 	bl	8002f38 <RCCEx_PLLSAI2_Config>
 800287c:	4603      	mov	r3, r0
 800287e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002880:	e003      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	74fb      	strb	r3, [r7, #19]
      break;
 8002886:	e000      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800288a:	7cfb      	ldrb	r3, [r7, #19]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10b      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002890:	4b52      	ldr	r3, [pc, #328]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800289e:	494f      	ldr	r1, [pc, #316]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028a6:	e001      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a8:	7cfb      	ldrb	r3, [r7, #19]
 80028aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80a0 	beq.w	80029fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ba:	2300      	movs	r3, #0
 80028bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028be:	4b47      	ldr	r3, [pc, #284]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80028ce:	2300      	movs	r3, #0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00d      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d4:	4b41      	ldr	r3, [pc, #260]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	4a40      	ldr	r2, [pc, #256]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028de:	6593      	str	r3, [r2, #88]	; 0x58
 80028e0:	4b3e      	ldr	r3, [pc, #248]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ec:	2301      	movs	r3, #1
 80028ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028f0:	4b3b      	ldr	r3, [pc, #236]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a3a      	ldr	r2, [pc, #232]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028fc:	f7fe fd32 	bl	8001364 <HAL_GetTick>
 8002900:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002902:	e009      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002904:	f7fe fd2e 	bl	8001364 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d902      	bls.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	74fb      	strb	r3, [r7, #19]
        break;
 8002916:	e005      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002918:	4b31      	ldr	r3, [pc, #196]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0ef      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002924:	7cfb      	ldrb	r3, [r7, #19]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d15c      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800292a:	4b2c      	ldr	r3, [pc, #176]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002934:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01f      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	429a      	cmp	r2, r3
 8002946:	d019      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002948:	4b24      	ldr	r3, [pc, #144]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002952:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002954:	4b21      	ldr	r3, [pc, #132]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295a:	4a20      	ldr	r2, [pc, #128]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002964:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296a:	4a1c      	ldr	r2, [pc, #112]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002974:	4a19      	ldr	r2, [pc, #100]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d016      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7fe fced 	bl	8001364 <HAL_GetTick>
 800298a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800298c:	e00b      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298e:	f7fe fce9 	bl	8001364 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f241 3288 	movw	r2, #5000	; 0x1388
 800299c:	4293      	cmp	r3, r2
 800299e:	d902      	bls.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	74fb      	strb	r3, [r7, #19]
            break;
 80029a4:	e006      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0ec      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ba:	4b08      	ldr	r3, [pc, #32]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ca:	4904      	ldr	r1, [pc, #16]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029d2:	e009      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029d4:	7cfb      	ldrb	r3, [r7, #19]
 80029d6:	74bb      	strb	r3, [r7, #18]
 80029d8:	e006      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e4:	7cfb      	ldrb	r3, [r7, #19]
 80029e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029e8:	7c7b      	ldrb	r3, [r7, #17]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d105      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ee:	4b9e      	ldr	r3, [pc, #632]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	4a9d      	ldr	r2, [pc, #628]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a06:	4b98      	ldr	r3, [pc, #608]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0c:	f023 0203 	bic.w	r2, r3, #3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a14:	4994      	ldr	r1, [pc, #592]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a28:	4b8f      	ldr	r3, [pc, #572]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f023 020c 	bic.w	r2, r3, #12
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a36:	498c      	ldr	r1, [pc, #560]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a4a:	4b87      	ldr	r3, [pc, #540]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	4983      	ldr	r1, [pc, #524]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a6c:	4b7e      	ldr	r3, [pc, #504]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	497b      	ldr	r1, [pc, #492]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a8e:	4b76      	ldr	r3, [pc, #472]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a9c:	4972      	ldr	r1, [pc, #456]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ab0:	4b6d      	ldr	r3, [pc, #436]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abe:	496a      	ldr	r1, [pc, #424]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ad2:	4b65      	ldr	r3, [pc, #404]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae0:	4961      	ldr	r1, [pc, #388]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002af4:	4b5c      	ldr	r3, [pc, #368]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b02:	4959      	ldr	r1, [pc, #356]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b16:	4b54      	ldr	r3, [pc, #336]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b24:	4950      	ldr	r1, [pc, #320]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b38:	4b4b      	ldr	r3, [pc, #300]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b46:	4948      	ldr	r1, [pc, #288]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b5a:	4b43      	ldr	r3, [pc, #268]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b68:	493f      	ldr	r1, [pc, #252]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d028      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b7c:	4b3a      	ldr	r3, [pc, #232]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b8a:	4937      	ldr	r1, [pc, #220]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b9a:	d106      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b9c:	4b32      	ldr	r3, [pc, #200]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4a31      	ldr	r2, [pc, #196]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ba6:	60d3      	str	r3, [r2, #12]
 8002ba8:	e011      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bb2:	d10c      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	2101      	movs	r1, #1
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f8c8 	bl	8002d50 <RCCEx_PLLSAI1_Config>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bc4:	7cfb      	ldrb	r3, [r7, #19]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002bca:	7cfb      	ldrb	r3, [r7, #19]
 8002bcc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d028      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bda:	4b23      	ldr	r3, [pc, #140]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	491f      	ldr	r1, [pc, #124]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bf8:	d106      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bfa:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	4a1a      	ldr	r2, [pc, #104]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c04:	60d3      	str	r3, [r2, #12]
 8002c06:	e011      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3304      	adds	r3, #4
 8002c16:	2101      	movs	r1, #1
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 f899 	bl	8002d50 <RCCEx_PLLSAI1_Config>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c22:	7cfb      	ldrb	r3, [r7, #19]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d02b      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c46:	4908      	ldr	r1, [pc, #32]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c56:	d109      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a02      	ldr	r2, [pc, #8]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c62:	60d3      	str	r3, [r2, #12]
 8002c64:	e014      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 f867 	bl	8002d50 <RCCEx_PLLSAI1_Config>
 8002c82:	4603      	mov	r3, r0
 8002c84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c86:	7cfb      	ldrb	r3, [r7, #19]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c8c:	7cfb      	ldrb	r3, [r7, #19]
 8002c8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d02f      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c9c:	4b2b      	ldr	r3, [pc, #172]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002caa:	4928      	ldr	r1, [pc, #160]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cba:	d10d      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	2102      	movs	r1, #2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 f844 	bl	8002d50 <RCCEx_PLLSAI1_Config>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ccc:	7cfb      	ldrb	r3, [r7, #19]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d014      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cd2:	7cfb      	ldrb	r3, [r7, #19]
 8002cd4:	74bb      	strb	r3, [r7, #18]
 8002cd6:	e011      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3320      	adds	r3, #32
 8002ce6:	2102      	movs	r1, #2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 f925 	bl	8002f38 <RCCEx_PLLSAI2_Config>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cf2:	7cfb      	ldrb	r3, [r7, #19]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cf8:	7cfb      	ldrb	r3, [r7, #19]
 8002cfa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d08:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d16:	490d      	ldr	r1, [pc, #52]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d2a:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d3a:	4904      	ldr	r1, [pc, #16]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d42:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40021000 	.word	0x40021000

08002d50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d5e:	4b75      	ldr	r3, [pc, #468]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d018      	beq.n	8002d9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d6a:	4b72      	ldr	r3, [pc, #456]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f003 0203 	and.w	r2, r3, #3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d10d      	bne.n	8002d96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
       ||
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d82:	4b6c      	ldr	r3, [pc, #432]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	091b      	lsrs	r3, r3, #4
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
       ||
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d047      	beq.n	8002e26 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	73fb      	strb	r3, [r7, #15]
 8002d9a:	e044      	b.n	8002e26 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d018      	beq.n	8002dd6 <RCCEx_PLLSAI1_Config+0x86>
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d825      	bhi.n	8002df4 <RCCEx_PLLSAI1_Config+0xa4>
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d002      	beq.n	8002db2 <RCCEx_PLLSAI1_Config+0x62>
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d009      	beq.n	8002dc4 <RCCEx_PLLSAI1_Config+0x74>
 8002db0:	e020      	b.n	8002df4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002db2:	4b60      	ldr	r3, [pc, #384]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d11d      	bne.n	8002dfa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc2:	e01a      	b.n	8002dfa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dc4:	4b5b      	ldr	r3, [pc, #364]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d116      	bne.n	8002dfe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd4:	e013      	b.n	8002dfe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dd6:	4b57      	ldr	r3, [pc, #348]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10f      	bne.n	8002e02 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002de2:	4b54      	ldr	r3, [pc, #336]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002df2:	e006      	b.n	8002e02 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	73fb      	strb	r3, [r7, #15]
      break;
 8002df8:	e004      	b.n	8002e04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dfa:	bf00      	nop
 8002dfc:	e002      	b.n	8002e04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dfe:	bf00      	nop
 8002e00:	e000      	b.n	8002e04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e02:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10d      	bne.n	8002e26 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e0a:	4b4a      	ldr	r3, [pc, #296]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6819      	ldr	r1, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	430b      	orrs	r3, r1
 8002e20:	4944      	ldr	r1, [pc, #272]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d17d      	bne.n	8002f28 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e2c:	4b41      	ldr	r3, [pc, #260]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a40      	ldr	r2, [pc, #256]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e38:	f7fe fa94 	bl	8001364 <HAL_GetTick>
 8002e3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e3e:	e009      	b.n	8002e54 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e40:	f7fe fa90 	bl	8001364 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d902      	bls.n	8002e54 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	73fb      	strb	r3, [r7, #15]
        break;
 8002e52:	e005      	b.n	8002e60 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e54:	4b37      	ldr	r3, [pc, #220]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1ef      	bne.n	8002e40 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d160      	bne.n	8002f28 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d111      	bne.n	8002e90 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e6c:	4b31      	ldr	r3, [pc, #196]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6892      	ldr	r2, [r2, #8]
 8002e7c:	0211      	lsls	r1, r2, #8
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68d2      	ldr	r2, [r2, #12]
 8002e82:	0912      	lsrs	r2, r2, #4
 8002e84:	0452      	lsls	r2, r2, #17
 8002e86:	430a      	orrs	r2, r1
 8002e88:	492a      	ldr	r1, [pc, #168]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	610b      	str	r3, [r1, #16]
 8002e8e:	e027      	b.n	8002ee0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d112      	bne.n	8002ebc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e96:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6892      	ldr	r2, [r2, #8]
 8002ea6:	0211      	lsls	r1, r2, #8
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6912      	ldr	r2, [r2, #16]
 8002eac:	0852      	lsrs	r2, r2, #1
 8002eae:	3a01      	subs	r2, #1
 8002eb0:	0552      	lsls	r2, r2, #21
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	491f      	ldr	r1, [pc, #124]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	610b      	str	r3, [r1, #16]
 8002eba:	e011      	b.n	8002ee0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ec4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6892      	ldr	r2, [r2, #8]
 8002ecc:	0211      	lsls	r1, r2, #8
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6952      	ldr	r2, [r2, #20]
 8002ed2:	0852      	lsrs	r2, r2, #1
 8002ed4:	3a01      	subs	r2, #1
 8002ed6:	0652      	lsls	r2, r2, #25
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	4916      	ldr	r1, [pc, #88]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ee0:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eec:	f7fe fa3a 	bl	8001364 <HAL_GetTick>
 8002ef0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ef2:	e009      	b.n	8002f08 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ef4:	f7fe fa36 	bl	8001364 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d902      	bls.n	8002f08 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	73fb      	strb	r3, [r7, #15]
          break;
 8002f06:	e005      	b.n	8002f14 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f08:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0ef      	beq.n	8002ef4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	4904      	ldr	r1, [pc, #16]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000

08002f38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f46:	4b6a      	ldr	r3, [pc, #424]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d018      	beq.n	8002f84 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f52:	4b67      	ldr	r3, [pc, #412]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f003 0203 	and.w	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d10d      	bne.n	8002f7e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
       ||
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f6a:	4b61      	ldr	r3, [pc, #388]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	091b      	lsrs	r3, r3, #4
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
       ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d047      	beq.n	800300e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	73fb      	strb	r3, [r7, #15]
 8002f82:	e044      	b.n	800300e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d018      	beq.n	8002fbe <RCCEx_PLLSAI2_Config+0x86>
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d825      	bhi.n	8002fdc <RCCEx_PLLSAI2_Config+0xa4>
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d002      	beq.n	8002f9a <RCCEx_PLLSAI2_Config+0x62>
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d009      	beq.n	8002fac <RCCEx_PLLSAI2_Config+0x74>
 8002f98:	e020      	b.n	8002fdc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f9a:	4b55      	ldr	r3, [pc, #340]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d11d      	bne.n	8002fe2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002faa:	e01a      	b.n	8002fe2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fac:	4b50      	ldr	r3, [pc, #320]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d116      	bne.n	8002fe6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fbc:	e013      	b.n	8002fe6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fbe:	4b4c      	ldr	r3, [pc, #304]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10f      	bne.n	8002fea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fca:	4b49      	ldr	r3, [pc, #292]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fda:	e006      	b.n	8002fea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe0:	e004      	b.n	8002fec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fe2:	bf00      	nop
 8002fe4:	e002      	b.n	8002fec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fe6:	bf00      	nop
 8002fe8:	e000      	b.n	8002fec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fea:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10d      	bne.n	800300e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ff2:	4b3f      	ldr	r3, [pc, #252]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6819      	ldr	r1, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	3b01      	subs	r3, #1
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	430b      	orrs	r3, r1
 8003008:	4939      	ldr	r1, [pc, #228]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800300a:	4313      	orrs	r3, r2
 800300c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d167      	bne.n	80030e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003014:	4b36      	ldr	r3, [pc, #216]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a35      	ldr	r2, [pc, #212]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800301a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800301e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003020:	f7fe f9a0 	bl	8001364 <HAL_GetTick>
 8003024:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003026:	e009      	b.n	800303c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003028:	f7fe f99c 	bl	8001364 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d902      	bls.n	800303c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	73fb      	strb	r3, [r7, #15]
        break;
 800303a:	e005      	b.n	8003048 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800303c:	4b2c      	ldr	r3, [pc, #176]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1ef      	bne.n	8003028 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d14a      	bne.n	80030e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d111      	bne.n	8003078 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003054:	4b26      	ldr	r3, [pc, #152]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800305c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6892      	ldr	r2, [r2, #8]
 8003064:	0211      	lsls	r1, r2, #8
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68d2      	ldr	r2, [r2, #12]
 800306a:	0912      	lsrs	r2, r2, #4
 800306c:	0452      	lsls	r2, r2, #17
 800306e:	430a      	orrs	r2, r1
 8003070:	491f      	ldr	r1, [pc, #124]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003072:	4313      	orrs	r3, r2
 8003074:	614b      	str	r3, [r1, #20]
 8003076:	e011      	b.n	800309c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003078:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003080:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6892      	ldr	r2, [r2, #8]
 8003088:	0211      	lsls	r1, r2, #8
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6912      	ldr	r2, [r2, #16]
 800308e:	0852      	lsrs	r2, r2, #1
 8003090:	3a01      	subs	r2, #1
 8003092:	0652      	lsls	r2, r2, #25
 8003094:	430a      	orrs	r2, r1
 8003096:	4916      	ldr	r1, [pc, #88]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003098:	4313      	orrs	r3, r2
 800309a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800309c:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a13      	ldr	r2, [pc, #76]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a8:	f7fe f95c 	bl	8001364 <HAL_GetTick>
 80030ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030ae:	e009      	b.n	80030c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030b0:	f7fe f958 	bl	8001364 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d902      	bls.n	80030c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	73fb      	strb	r3, [r7, #15]
          break;
 80030c2:	e005      	b.n	80030d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030c4:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0ef      	beq.n	80030b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	4904      	ldr	r1, [pc, #16]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40021000 	.word	0x40021000

080030f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e049      	b.n	800319a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fd fec6 	bl	8000eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3304      	adds	r3, #4
 8003130:	4619      	mov	r1, r3
 8003132:	4610      	mov	r0, r2
 8003134:	f000 fcae 	bl	8003a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d001      	beq.n	80031bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e04f      	b.n	800325c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a23      	ldr	r2, [pc, #140]	; (8003268 <HAL_TIM_Base_Start_IT+0xc4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01d      	beq.n	800321a <HAL_TIM_Base_Start_IT+0x76>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e6:	d018      	beq.n	800321a <HAL_TIM_Base_Start_IT+0x76>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a1f      	ldr	r2, [pc, #124]	; (800326c <HAL_TIM_Base_Start_IT+0xc8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_TIM_Base_Start_IT+0x76>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a1e      	ldr	r2, [pc, #120]	; (8003270 <HAL_TIM_Base_Start_IT+0xcc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00e      	beq.n	800321a <HAL_TIM_Base_Start_IT+0x76>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1c      	ldr	r2, [pc, #112]	; (8003274 <HAL_TIM_Base_Start_IT+0xd0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d009      	beq.n	800321a <HAL_TIM_Base_Start_IT+0x76>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1b      	ldr	r2, [pc, #108]	; (8003278 <HAL_TIM_Base_Start_IT+0xd4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d004      	beq.n	800321a <HAL_TIM_Base_Start_IT+0x76>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a19      	ldr	r2, [pc, #100]	; (800327c <HAL_TIM_Base_Start_IT+0xd8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d115      	bne.n	8003246 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	4b17      	ldr	r3, [pc, #92]	; (8003280 <HAL_TIM_Base_Start_IT+0xdc>)
 8003222:	4013      	ands	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b06      	cmp	r3, #6
 800322a:	d015      	beq.n	8003258 <HAL_TIM_Base_Start_IT+0xb4>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003232:	d011      	beq.n	8003258 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003244:	e008      	b.n	8003258 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0201 	orr.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e000      	b.n	800325a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003258:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40012c00 	.word	0x40012c00
 800326c:	40000400 	.word	0x40000400
 8003270:	40000800 	.word	0x40000800
 8003274:	40000c00 	.word	0x40000c00
 8003278:	40013400 	.word	0x40013400
 800327c:	40014000 	.word	0x40014000
 8003280:	00010007 	.word	0x00010007

08003284 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e049      	b.n	800332a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fd fd96 	bl	8000ddc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3304      	adds	r3, #4
 80032c0:	4619      	mov	r1, r3
 80032c2:	4610      	mov	r0, r2
 80032c4:	f000 fbe6 	bl	8003a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d109      	bne.n	800335c <HAL_TIM_PWM_Start_IT+0x28>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	bf14      	ite	ne
 8003354:	2301      	movne	r3, #1
 8003356:	2300      	moveq	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	e03c      	b.n	80033d6 <HAL_TIM_PWM_Start_IT+0xa2>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b04      	cmp	r3, #4
 8003360:	d109      	bne.n	8003376 <HAL_TIM_PWM_Start_IT+0x42>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b01      	cmp	r3, #1
 800336c:	bf14      	ite	ne
 800336e:	2301      	movne	r3, #1
 8003370:	2300      	moveq	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	e02f      	b.n	80033d6 <HAL_TIM_PWM_Start_IT+0xa2>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d109      	bne.n	8003390 <HAL_TIM_PWM_Start_IT+0x5c>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b01      	cmp	r3, #1
 8003386:	bf14      	ite	ne
 8003388:	2301      	movne	r3, #1
 800338a:	2300      	moveq	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	e022      	b.n	80033d6 <HAL_TIM_PWM_Start_IT+0xa2>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b0c      	cmp	r3, #12
 8003394:	d109      	bne.n	80033aa <HAL_TIM_PWM_Start_IT+0x76>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b01      	cmp	r3, #1
 80033a0:	bf14      	ite	ne
 80033a2:	2301      	movne	r3, #1
 80033a4:	2300      	moveq	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	e015      	b.n	80033d6 <HAL_TIM_PWM_Start_IT+0xa2>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b10      	cmp	r3, #16
 80033ae:	d109      	bne.n	80033c4 <HAL_TIM_PWM_Start_IT+0x90>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	bf14      	ite	ne
 80033bc:	2301      	movne	r3, #1
 80033be:	2300      	moveq	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	e008      	b.n	80033d6 <HAL_TIM_PWM_Start_IT+0xa2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	bf14      	ite	ne
 80033d0:	2301      	movne	r3, #1
 80033d2:	2300      	moveq	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0e7      	b.n	80035ae <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d104      	bne.n	80033ee <HAL_TIM_PWM_Start_IT+0xba>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033ec:	e023      	b.n	8003436 <HAL_TIM_PWM_Start_IT+0x102>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d104      	bne.n	80033fe <HAL_TIM_PWM_Start_IT+0xca>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033fc:	e01b      	b.n	8003436 <HAL_TIM_PWM_Start_IT+0x102>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b08      	cmp	r3, #8
 8003402:	d104      	bne.n	800340e <HAL_TIM_PWM_Start_IT+0xda>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800340c:	e013      	b.n	8003436 <HAL_TIM_PWM_Start_IT+0x102>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b0c      	cmp	r3, #12
 8003412:	d104      	bne.n	800341e <HAL_TIM_PWM_Start_IT+0xea>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800341c:	e00b      	b.n	8003436 <HAL_TIM_PWM_Start_IT+0x102>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b10      	cmp	r3, #16
 8003422:	d104      	bne.n	800342e <HAL_TIM_PWM_Start_IT+0xfa>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800342c:	e003      	b.n	8003436 <HAL_TIM_PWM_Start_IT+0x102>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2202      	movs	r2, #2
 8003432:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b0c      	cmp	r3, #12
 800343a:	d841      	bhi.n	80034c0 <HAL_TIM_PWM_Start_IT+0x18c>
 800343c:	a201      	add	r2, pc, #4	; (adr r2, 8003444 <HAL_TIM_PWM_Start_IT+0x110>)
 800343e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003442:	bf00      	nop
 8003444:	08003479 	.word	0x08003479
 8003448:	080034c1 	.word	0x080034c1
 800344c:	080034c1 	.word	0x080034c1
 8003450:	080034c1 	.word	0x080034c1
 8003454:	0800348b 	.word	0x0800348b
 8003458:	080034c1 	.word	0x080034c1
 800345c:	080034c1 	.word	0x080034c1
 8003460:	080034c1 	.word	0x080034c1
 8003464:	0800349d 	.word	0x0800349d
 8003468:	080034c1 	.word	0x080034c1
 800346c:	080034c1 	.word	0x080034c1
 8003470:	080034c1 	.word	0x080034c1
 8003474:	080034af 	.word	0x080034af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0202 	orr.w	r2, r2, #2
 8003486:	60da      	str	r2, [r3, #12]
      break;
 8003488:	e01d      	b.n	80034c6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0204 	orr.w	r2, r2, #4
 8003498:	60da      	str	r2, [r3, #12]
      break;
 800349a:	e014      	b.n	80034c6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0208 	orr.w	r2, r2, #8
 80034aa:	60da      	str	r2, [r3, #12]
      break;
 80034ac:	e00b      	b.n	80034c6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0210 	orr.w	r2, r2, #16
 80034bc:	60da      	str	r2, [r3, #12]
      break;
 80034be:	e002      	b.n	80034c6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
      break;
 80034c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d16f      	bne.n	80035ac <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2201      	movs	r2, #1
 80034d2:	6839      	ldr	r1, [r7, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fe4d 	bl	8004174 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a36      	ldr	r2, [pc, #216]	; (80035b8 <HAL_TIM_PWM_Start_IT+0x284>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d013      	beq.n	800350c <HAL_TIM_PWM_Start_IT+0x1d8>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a34      	ldr	r2, [pc, #208]	; (80035bc <HAL_TIM_PWM_Start_IT+0x288>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00e      	beq.n	800350c <HAL_TIM_PWM_Start_IT+0x1d8>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a33      	ldr	r2, [pc, #204]	; (80035c0 <HAL_TIM_PWM_Start_IT+0x28c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d009      	beq.n	800350c <HAL_TIM_PWM_Start_IT+0x1d8>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a31      	ldr	r2, [pc, #196]	; (80035c4 <HAL_TIM_PWM_Start_IT+0x290>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <HAL_TIM_PWM_Start_IT+0x1d8>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a30      	ldr	r2, [pc, #192]	; (80035c8 <HAL_TIM_PWM_Start_IT+0x294>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d101      	bne.n	8003510 <HAL_TIM_PWM_Start_IT+0x1dc>
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <HAL_TIM_PWM_Start_IT+0x1de>
 8003510:	2300      	movs	r3, #0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d007      	beq.n	8003526 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003524:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a23      	ldr	r2, [pc, #140]	; (80035b8 <HAL_TIM_PWM_Start_IT+0x284>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d01d      	beq.n	800356c <HAL_TIM_PWM_Start_IT+0x238>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003538:	d018      	beq.n	800356c <HAL_TIM_PWM_Start_IT+0x238>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a23      	ldr	r2, [pc, #140]	; (80035cc <HAL_TIM_PWM_Start_IT+0x298>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d013      	beq.n	800356c <HAL_TIM_PWM_Start_IT+0x238>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a21      	ldr	r2, [pc, #132]	; (80035d0 <HAL_TIM_PWM_Start_IT+0x29c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00e      	beq.n	800356c <HAL_TIM_PWM_Start_IT+0x238>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a20      	ldr	r2, [pc, #128]	; (80035d4 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d009      	beq.n	800356c <HAL_TIM_PWM_Start_IT+0x238>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a17      	ldr	r2, [pc, #92]	; (80035bc <HAL_TIM_PWM_Start_IT+0x288>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d004      	beq.n	800356c <HAL_TIM_PWM_Start_IT+0x238>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a16      	ldr	r2, [pc, #88]	; (80035c0 <HAL_TIM_PWM_Start_IT+0x28c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d115      	bne.n	8003598 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8003574:	4013      	ands	r3, r2
 8003576:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b06      	cmp	r3, #6
 800357c:	d015      	beq.n	80035aa <HAL_TIM_PWM_Start_IT+0x276>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003584:	d011      	beq.n	80035aa <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003596:	e008      	b.n	80035aa <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	e000      	b.n	80035ac <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035aa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40012c00 	.word	0x40012c00
 80035bc:	40013400 	.word	0x40013400
 80035c0:	40014000 	.word	0x40014000
 80035c4:	40014400 	.word	0x40014400
 80035c8:	40014800 	.word	0x40014800
 80035cc:	40000400 	.word	0x40000400
 80035d0:	40000800 	.word	0x40000800
 80035d4:	40000c00 	.word	0x40000c00
 80035d8:	00010007 	.word	0x00010007

080035dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d122      	bne.n	8003638 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d11b      	bne.n	8003638 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0202 	mvn.w	r2, #2
 8003608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fa1a 	bl	8003a58 <HAL_TIM_IC_CaptureCallback>
 8003624:	e005      	b.n	8003632 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fa0c 	bl	8003a44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fa1d 	bl	8003a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b04      	cmp	r3, #4
 8003644:	d122      	bne.n	800368c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b04      	cmp	r3, #4
 8003652:	d11b      	bne.n	800368c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0204 	mvn.w	r2, #4
 800365c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2202      	movs	r2, #2
 8003662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f9f0 	bl	8003a58 <HAL_TIM_IC_CaptureCallback>
 8003678:	e005      	b.n	8003686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f9e2 	bl	8003a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f9f3 	bl	8003a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b08      	cmp	r3, #8
 8003698:	d122      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d11b      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0208 	mvn.w	r2, #8
 80036b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2204      	movs	r2, #4
 80036b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f9c6 	bl	8003a58 <HAL_TIM_IC_CaptureCallback>
 80036cc:	e005      	b.n	80036da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f9b8 	bl	8003a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f9c9 	bl	8003a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	2b10      	cmp	r3, #16
 80036ec:	d122      	bne.n	8003734 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b10      	cmp	r3, #16
 80036fa:	d11b      	bne.n	8003734 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0210 	mvn.w	r2, #16
 8003704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2208      	movs	r2, #8
 800370a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f99c 	bl	8003a58 <HAL_TIM_IC_CaptureCallback>
 8003720:	e005      	b.n	800372e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f98e 	bl	8003a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f99f 	bl	8003a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b01      	cmp	r3, #1
 8003740:	d10e      	bne.n	8003760 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b01      	cmp	r3, #1
 800374e:	d107      	bne.n	8003760 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0201 	mvn.w	r2, #1
 8003758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fc fecc 	bl	80004f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376a:	2b80      	cmp	r3, #128	; 0x80
 800376c:	d10e      	bne.n	800378c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003778:	2b80      	cmp	r3, #128	; 0x80
 800377a:	d107      	bne.n	800378c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fdac 	bl	80042e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800379a:	d10e      	bne.n	80037ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a6:	2b80      	cmp	r3, #128	; 0x80
 80037a8:	d107      	bne.n	80037ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fd9f 	bl	80042f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c4:	2b40      	cmp	r3, #64	; 0x40
 80037c6:	d10e      	bne.n	80037e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d2:	2b40      	cmp	r3, #64	; 0x40
 80037d4:	d107      	bne.n	80037e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f94d 	bl	8003a80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d10e      	bne.n	8003812 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0320 	and.w	r3, r3, #32
 80037fe:	2b20      	cmp	r3, #32
 8003800:	d107      	bne.n	8003812 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f06f 0220 	mvn.w	r2, #32
 800380a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fd5f 	bl	80042d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003812:	bf00      	nop
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003836:	2302      	movs	r3, #2
 8003838:	e0ff      	b.n	8003a3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b14      	cmp	r3, #20
 8003846:	f200 80f0 	bhi.w	8003a2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800384a:	a201      	add	r2, pc, #4	; (adr r2, 8003850 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003850:	080038a5 	.word	0x080038a5
 8003854:	08003a2b 	.word	0x08003a2b
 8003858:	08003a2b 	.word	0x08003a2b
 800385c:	08003a2b 	.word	0x08003a2b
 8003860:	080038e5 	.word	0x080038e5
 8003864:	08003a2b 	.word	0x08003a2b
 8003868:	08003a2b 	.word	0x08003a2b
 800386c:	08003a2b 	.word	0x08003a2b
 8003870:	08003927 	.word	0x08003927
 8003874:	08003a2b 	.word	0x08003a2b
 8003878:	08003a2b 	.word	0x08003a2b
 800387c:	08003a2b 	.word	0x08003a2b
 8003880:	08003967 	.word	0x08003967
 8003884:	08003a2b 	.word	0x08003a2b
 8003888:	08003a2b 	.word	0x08003a2b
 800388c:	08003a2b 	.word	0x08003a2b
 8003890:	080039a9 	.word	0x080039a9
 8003894:	08003a2b 	.word	0x08003a2b
 8003898:	08003a2b 	.word	0x08003a2b
 800389c:	08003a2b 	.word	0x08003a2b
 80038a0:	080039e9 	.word	0x080039e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68b9      	ldr	r1, [r7, #8]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 f98c 	bl	8003bc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699a      	ldr	r2, [r3, #24]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0208 	orr.w	r2, r2, #8
 80038be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0204 	bic.w	r2, r2, #4
 80038ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6999      	ldr	r1, [r3, #24]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	619a      	str	r2, [r3, #24]
      break;
 80038e2:	e0a5      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f9fc 	bl	8003ce8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699a      	ldr	r2, [r3, #24]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800390e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6999      	ldr	r1, [r3, #24]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	021a      	lsls	r2, r3, #8
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	619a      	str	r2, [r3, #24]
      break;
 8003924:	e084      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fa65 	bl	8003dfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0208 	orr.w	r2, r2, #8
 8003940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0204 	bic.w	r2, r2, #4
 8003950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69d9      	ldr	r1, [r3, #28]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	61da      	str	r2, [r3, #28]
      break;
 8003964:	e064      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	4618      	mov	r0, r3
 800396e:	f000 facd 	bl	8003f0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69da      	ldr	r2, [r3, #28]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69da      	ldr	r2, [r3, #28]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69d9      	ldr	r1, [r3, #28]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	021a      	lsls	r2, r3, #8
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	61da      	str	r2, [r3, #28]
      break;
 80039a6:	e043      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fb16 	bl	8003fe0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0208 	orr.w	r2, r2, #8
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0204 	bic.w	r2, r2, #4
 80039d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039e6:	e023      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fb5a 	bl	80040a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	021a      	lsls	r2, r3, #8
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a28:	e002      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop

08003a44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a40      	ldr	r2, [pc, #256]	; (8003ba8 <TIM_Base_SetConfig+0x114>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d013      	beq.n	8003ad4 <TIM_Base_SetConfig+0x40>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab2:	d00f      	beq.n	8003ad4 <TIM_Base_SetConfig+0x40>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a3d      	ldr	r2, [pc, #244]	; (8003bac <TIM_Base_SetConfig+0x118>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00b      	beq.n	8003ad4 <TIM_Base_SetConfig+0x40>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a3c      	ldr	r2, [pc, #240]	; (8003bb0 <TIM_Base_SetConfig+0x11c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d007      	beq.n	8003ad4 <TIM_Base_SetConfig+0x40>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a3b      	ldr	r2, [pc, #236]	; (8003bb4 <TIM_Base_SetConfig+0x120>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d003      	beq.n	8003ad4 <TIM_Base_SetConfig+0x40>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a3a      	ldr	r2, [pc, #232]	; (8003bb8 <TIM_Base_SetConfig+0x124>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d108      	bne.n	8003ae6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ada:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a2f      	ldr	r2, [pc, #188]	; (8003ba8 <TIM_Base_SetConfig+0x114>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d01f      	beq.n	8003b2e <TIM_Base_SetConfig+0x9a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af4:	d01b      	beq.n	8003b2e <TIM_Base_SetConfig+0x9a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2c      	ldr	r2, [pc, #176]	; (8003bac <TIM_Base_SetConfig+0x118>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d017      	beq.n	8003b2e <TIM_Base_SetConfig+0x9a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a2b      	ldr	r2, [pc, #172]	; (8003bb0 <TIM_Base_SetConfig+0x11c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <TIM_Base_SetConfig+0x9a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a2a      	ldr	r2, [pc, #168]	; (8003bb4 <TIM_Base_SetConfig+0x120>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00f      	beq.n	8003b2e <TIM_Base_SetConfig+0x9a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a29      	ldr	r2, [pc, #164]	; (8003bb8 <TIM_Base_SetConfig+0x124>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00b      	beq.n	8003b2e <TIM_Base_SetConfig+0x9a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a28      	ldr	r2, [pc, #160]	; (8003bbc <TIM_Base_SetConfig+0x128>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <TIM_Base_SetConfig+0x9a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a27      	ldr	r2, [pc, #156]	; (8003bc0 <TIM_Base_SetConfig+0x12c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d003      	beq.n	8003b2e <TIM_Base_SetConfig+0x9a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a26      	ldr	r2, [pc, #152]	; (8003bc4 <TIM_Base_SetConfig+0x130>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d108      	bne.n	8003b40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a10      	ldr	r2, [pc, #64]	; (8003ba8 <TIM_Base_SetConfig+0x114>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00f      	beq.n	8003b8c <TIM_Base_SetConfig+0xf8>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a12      	ldr	r2, [pc, #72]	; (8003bb8 <TIM_Base_SetConfig+0x124>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00b      	beq.n	8003b8c <TIM_Base_SetConfig+0xf8>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a11      	ldr	r2, [pc, #68]	; (8003bbc <TIM_Base_SetConfig+0x128>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d007      	beq.n	8003b8c <TIM_Base_SetConfig+0xf8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a10      	ldr	r2, [pc, #64]	; (8003bc0 <TIM_Base_SetConfig+0x12c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d003      	beq.n	8003b8c <TIM_Base_SetConfig+0xf8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a0f      	ldr	r2, [pc, #60]	; (8003bc4 <TIM_Base_SetConfig+0x130>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d103      	bne.n	8003b94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	615a      	str	r2, [r3, #20]
}
 8003b9a:	bf00      	nop
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40012c00 	.word	0x40012c00
 8003bac:	40000400 	.word	0x40000400
 8003bb0:	40000800 	.word	0x40000800
 8003bb4:	40000c00 	.word	0x40000c00
 8003bb8:	40013400 	.word	0x40013400
 8003bbc:	40014000 	.word	0x40014000
 8003bc0:	40014400 	.word	0x40014400
 8003bc4:	40014800 	.word	0x40014800

08003bc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f023 0201 	bic.w	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0303 	bic.w	r3, r3, #3
 8003c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f023 0302 	bic.w	r3, r3, #2
 8003c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a2c      	ldr	r2, [pc, #176]	; (8003cd4 <TIM_OC1_SetConfig+0x10c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00f      	beq.n	8003c48 <TIM_OC1_SetConfig+0x80>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a2b      	ldr	r2, [pc, #172]	; (8003cd8 <TIM_OC1_SetConfig+0x110>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d00b      	beq.n	8003c48 <TIM_OC1_SetConfig+0x80>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a2a      	ldr	r2, [pc, #168]	; (8003cdc <TIM_OC1_SetConfig+0x114>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d007      	beq.n	8003c48 <TIM_OC1_SetConfig+0x80>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a29      	ldr	r2, [pc, #164]	; (8003ce0 <TIM_OC1_SetConfig+0x118>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d003      	beq.n	8003c48 <TIM_OC1_SetConfig+0x80>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a28      	ldr	r2, [pc, #160]	; (8003ce4 <TIM_OC1_SetConfig+0x11c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d10c      	bne.n	8003c62 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f023 0308 	bic.w	r3, r3, #8
 8003c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f023 0304 	bic.w	r3, r3, #4
 8003c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <TIM_OC1_SetConfig+0x10c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00f      	beq.n	8003c8a <TIM_OC1_SetConfig+0xc2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a1a      	ldr	r2, [pc, #104]	; (8003cd8 <TIM_OC1_SetConfig+0x110>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00b      	beq.n	8003c8a <TIM_OC1_SetConfig+0xc2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <TIM_OC1_SetConfig+0x114>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d007      	beq.n	8003c8a <TIM_OC1_SetConfig+0xc2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a18      	ldr	r2, [pc, #96]	; (8003ce0 <TIM_OC1_SetConfig+0x118>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d003      	beq.n	8003c8a <TIM_OC1_SetConfig+0xc2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a17      	ldr	r2, [pc, #92]	; (8003ce4 <TIM_OC1_SetConfig+0x11c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d111      	bne.n	8003cae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	621a      	str	r2, [r3, #32]
}
 8003cc8:	bf00      	nop
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	40013400 	.word	0x40013400
 8003cdc:	40014000 	.word	0x40014000
 8003ce0:	40014400 	.word	0x40014400
 8003ce4:	40014800 	.word	0x40014800

08003ce8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f023 0210 	bic.w	r2, r3, #16
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f023 0320 	bic.w	r3, r3, #32
 8003d36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a28      	ldr	r2, [pc, #160]	; (8003de8 <TIM_OC2_SetConfig+0x100>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d003      	beq.n	8003d54 <TIM_OC2_SetConfig+0x6c>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a27      	ldr	r2, [pc, #156]	; (8003dec <TIM_OC2_SetConfig+0x104>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d10d      	bne.n	8003d70 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a1d      	ldr	r2, [pc, #116]	; (8003de8 <TIM_OC2_SetConfig+0x100>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00f      	beq.n	8003d98 <TIM_OC2_SetConfig+0xb0>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a1c      	ldr	r2, [pc, #112]	; (8003dec <TIM_OC2_SetConfig+0x104>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00b      	beq.n	8003d98 <TIM_OC2_SetConfig+0xb0>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a1b      	ldr	r2, [pc, #108]	; (8003df0 <TIM_OC2_SetConfig+0x108>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d007      	beq.n	8003d98 <TIM_OC2_SetConfig+0xb0>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a1a      	ldr	r2, [pc, #104]	; (8003df4 <TIM_OC2_SetConfig+0x10c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d003      	beq.n	8003d98 <TIM_OC2_SetConfig+0xb0>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a19      	ldr	r2, [pc, #100]	; (8003df8 <TIM_OC2_SetConfig+0x110>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d113      	bne.n	8003dc0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003da6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	621a      	str	r2, [r3, #32]
}
 8003dda:	bf00      	nop
 8003ddc:	371c      	adds	r7, #28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40012c00 	.word	0x40012c00
 8003dec:	40013400 	.word	0x40013400
 8003df0:	40014000 	.word	0x40014000
 8003df4:	40014400 	.word	0x40014400
 8003df8:	40014800 	.word	0x40014800

08003dfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0303 	bic.w	r3, r3, #3
 8003e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	021b      	lsls	r3, r3, #8
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a27      	ldr	r2, [pc, #156]	; (8003ef8 <TIM_OC3_SetConfig+0xfc>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d003      	beq.n	8003e66 <TIM_OC3_SetConfig+0x6a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a26      	ldr	r2, [pc, #152]	; (8003efc <TIM_OC3_SetConfig+0x100>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d10d      	bne.n	8003e82 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a1c      	ldr	r2, [pc, #112]	; (8003ef8 <TIM_OC3_SetConfig+0xfc>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00f      	beq.n	8003eaa <TIM_OC3_SetConfig+0xae>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a1b      	ldr	r2, [pc, #108]	; (8003efc <TIM_OC3_SetConfig+0x100>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00b      	beq.n	8003eaa <TIM_OC3_SetConfig+0xae>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a1a      	ldr	r2, [pc, #104]	; (8003f00 <TIM_OC3_SetConfig+0x104>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d007      	beq.n	8003eaa <TIM_OC3_SetConfig+0xae>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <TIM_OC3_SetConfig+0x108>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d003      	beq.n	8003eaa <TIM_OC3_SetConfig+0xae>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <TIM_OC3_SetConfig+0x10c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d113      	bne.n	8003ed2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	621a      	str	r2, [r3, #32]
}
 8003eec:	bf00      	nop
 8003eee:	371c      	adds	r7, #28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	40012c00 	.word	0x40012c00
 8003efc:	40013400 	.word	0x40013400
 8003f00:	40014000 	.word	0x40014000
 8003f04:	40014400 	.word	0x40014400
 8003f08:	40014800 	.word	0x40014800

08003f0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	021b      	lsls	r3, r3, #8
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	031b      	lsls	r3, r3, #12
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a18      	ldr	r2, [pc, #96]	; (8003fcc <TIM_OC4_SetConfig+0xc0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00f      	beq.n	8003f90 <TIM_OC4_SetConfig+0x84>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a17      	ldr	r2, [pc, #92]	; (8003fd0 <TIM_OC4_SetConfig+0xc4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00b      	beq.n	8003f90 <TIM_OC4_SetConfig+0x84>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a16      	ldr	r2, [pc, #88]	; (8003fd4 <TIM_OC4_SetConfig+0xc8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d007      	beq.n	8003f90 <TIM_OC4_SetConfig+0x84>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a15      	ldr	r2, [pc, #84]	; (8003fd8 <TIM_OC4_SetConfig+0xcc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d003      	beq.n	8003f90 <TIM_OC4_SetConfig+0x84>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a14      	ldr	r2, [pc, #80]	; (8003fdc <TIM_OC4_SetConfig+0xd0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d109      	bne.n	8003fa4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	019b      	lsls	r3, r3, #6
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	621a      	str	r2, [r3, #32]
}
 8003fbe:	bf00      	nop
 8003fc0:	371c      	adds	r7, #28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40012c00 	.word	0x40012c00
 8003fd0:	40013400 	.word	0x40013400
 8003fd4:	40014000 	.word	0x40014000
 8003fd8:	40014400 	.word	0x40014400
 8003fdc:	40014800 	.word	0x40014800

08003fe0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004024:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	041b      	lsls	r3, r3, #16
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a17      	ldr	r2, [pc, #92]	; (8004094 <TIM_OC5_SetConfig+0xb4>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00f      	beq.n	800405a <TIM_OC5_SetConfig+0x7a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a16      	ldr	r2, [pc, #88]	; (8004098 <TIM_OC5_SetConfig+0xb8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d00b      	beq.n	800405a <TIM_OC5_SetConfig+0x7a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a15      	ldr	r2, [pc, #84]	; (800409c <TIM_OC5_SetConfig+0xbc>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d007      	beq.n	800405a <TIM_OC5_SetConfig+0x7a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a14      	ldr	r2, [pc, #80]	; (80040a0 <TIM_OC5_SetConfig+0xc0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d003      	beq.n	800405a <TIM_OC5_SetConfig+0x7a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <TIM_OC5_SetConfig+0xc4>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d109      	bne.n	800406e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004060:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	021b      	lsls	r3, r3, #8
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	621a      	str	r2, [r3, #32]
}
 8004088:	bf00      	nop
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	40012c00 	.word	0x40012c00
 8004098:	40013400 	.word	0x40013400
 800409c:	40014000 	.word	0x40014000
 80040a0:	40014400 	.word	0x40014400
 80040a4:	40014800 	.word	0x40014800

080040a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	021b      	lsls	r3, r3, #8
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	051b      	lsls	r3, r3, #20
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a18      	ldr	r2, [pc, #96]	; (8004160 <TIM_OC6_SetConfig+0xb8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00f      	beq.n	8004124 <TIM_OC6_SetConfig+0x7c>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a17      	ldr	r2, [pc, #92]	; (8004164 <TIM_OC6_SetConfig+0xbc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00b      	beq.n	8004124 <TIM_OC6_SetConfig+0x7c>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a16      	ldr	r2, [pc, #88]	; (8004168 <TIM_OC6_SetConfig+0xc0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d007      	beq.n	8004124 <TIM_OC6_SetConfig+0x7c>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a15      	ldr	r2, [pc, #84]	; (800416c <TIM_OC6_SetConfig+0xc4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d003      	beq.n	8004124 <TIM_OC6_SetConfig+0x7c>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a14      	ldr	r2, [pc, #80]	; (8004170 <TIM_OC6_SetConfig+0xc8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d109      	bne.n	8004138 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	029b      	lsls	r3, r3, #10
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	621a      	str	r2, [r3, #32]
}
 8004152:	bf00      	nop
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40012c00 	.word	0x40012c00
 8004164:	40013400 	.word	0x40013400
 8004168:	40014000 	.word	0x40014000
 800416c:	40014400 	.word	0x40014400
 8004170:	40014800 	.word	0x40014800

08004174 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f003 031f 	and.w	r3, r3, #31
 8004186:	2201      	movs	r2, #1
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a1a      	ldr	r2, [r3, #32]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	43db      	mvns	r3, r3
 8004196:	401a      	ands	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a1a      	ldr	r2, [r3, #32]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f003 031f 	and.w	r3, r3, #31
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ac:	431a      	orrs	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	621a      	str	r2, [r3, #32]
}
 80041b2:	bf00      	nop
 80041b4:	371c      	adds	r7, #28
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e068      	b.n	80042aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a2e      	ldr	r2, [pc, #184]	; (80042b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d004      	beq.n	800420c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a2d      	ldr	r2, [pc, #180]	; (80042bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d108      	bne.n	800421e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004212:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004224:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a1e      	ldr	r2, [pc, #120]	; (80042b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d01d      	beq.n	800427e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424a:	d018      	beq.n	800427e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a1b      	ldr	r2, [pc, #108]	; (80042c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d013      	beq.n	800427e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a1a      	ldr	r2, [pc, #104]	; (80042c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00e      	beq.n	800427e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a18      	ldr	r2, [pc, #96]	; (80042c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d009      	beq.n	800427e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a13      	ldr	r2, [pc, #76]	; (80042bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d004      	beq.n	800427e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a14      	ldr	r2, [pc, #80]	; (80042cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d10c      	bne.n	8004298 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004284:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	4313      	orrs	r3, r2
 800428e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40012c00 	.word	0x40012c00
 80042bc:	40013400 	.word	0x40013400
 80042c0:	40000400 	.word	0x40000400
 80042c4:	40000800 	.word	0x40000800
 80042c8:	40000c00 	.word	0x40000c00
 80042cc:	40014000 	.word	0x40014000

080042d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e040      	b.n	80043a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fc fe1a 	bl	8000f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2224      	movs	r2, #36	; 0x24
 8004338:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0201 	bic.w	r2, r2, #1
 8004348:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fbc2 	bl	8004ad4 <UART_SetConfig>
 8004350:	4603      	mov	r3, r0
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e022      	b.n	80043a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 fe6e 	bl	8005044 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004386:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 fef5 	bl	8005188 <UART_CheckIdleState>
 800439e:	4603      	mov	r3, r0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08a      	sub	sp, #40	; 0x28
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	4613      	mov	r3, r2
 80043b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043bc:	2b20      	cmp	r3, #32
 80043be:	f040 8082 	bne.w	80044c6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <HAL_UART_Transmit+0x26>
 80043c8:	88fb      	ldrh	r3, [r7, #6]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e07a      	b.n	80044c8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_UART_Transmit+0x38>
 80043dc:	2302      	movs	r3, #2
 80043de:	e073      	b.n	80044c8 <HAL_UART_Transmit+0x120>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2221      	movs	r2, #33	; 0x21
 80043f4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043f6:	f7fc ffb5 	bl	8001364 <HAL_GetTick>
 80043fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	88fa      	ldrh	r2, [r7, #6]
 8004400:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	88fa      	ldrh	r2, [r7, #6]
 8004408:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004414:	d108      	bne.n	8004428 <HAL_UART_Transmit+0x80>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d104      	bne.n	8004428 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	e003      	b.n	8004430 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800442c:	2300      	movs	r3, #0
 800442e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004438:	e02d      	b.n	8004496 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2200      	movs	r2, #0
 8004442:	2180      	movs	r1, #128	; 0x80
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 fee8 	bl	800521a <UART_WaitOnFlagUntilTimeout>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e039      	b.n	80044c8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10b      	bne.n	8004472 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	881a      	ldrh	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004466:	b292      	uxth	r2, r2
 8004468:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	3302      	adds	r3, #2
 800446e:	61bb      	str	r3, [r7, #24]
 8004470:	e008      	b.n	8004484 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	781a      	ldrb	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	b292      	uxth	r2, r2
 800447c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	3301      	adds	r3, #1
 8004482:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1cb      	bne.n	800443a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2200      	movs	r2, #0
 80044aa:	2140      	movs	r1, #64	; 0x40
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 feb4 	bl	800521a <UART_WaitOnFlagUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e005      	b.n	80044c8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2220      	movs	r2, #32
 80044c0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	e000      	b.n	80044c8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80044c6:	2302      	movs	r3, #2
  }
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3720      	adds	r7, #32
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b0ba      	sub	sp, #232	; 0xe8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80044fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80044fe:	4013      	ands	r3, r2
 8004500:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004504:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004508:	2b00      	cmp	r3, #0
 800450a:	d115      	bne.n	8004538 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800450c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00f      	beq.n	8004538 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b00      	cmp	r3, #0
 8004522:	d009      	beq.n	8004538 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 82a6 	beq.w	8004a7a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	4798      	blx	r3
      }
      return;
 8004536:	e2a0      	b.n	8004a7a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004538:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8117 	beq.w	8004770 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800454e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004552:	4b85      	ldr	r3, [pc, #532]	; (8004768 <HAL_UART_IRQHandler+0x298>)
 8004554:	4013      	ands	r3, r2
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 810a 	beq.w	8004770 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800455c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d011      	beq.n	800458c <HAL_UART_IRQHandler+0xbc>
 8004568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800456c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00b      	beq.n	800458c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2201      	movs	r2, #1
 800457a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004582:	f043 0201 	orr.w	r2, r3, #1
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800458c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d011      	beq.n	80045bc <HAL_UART_IRQHandler+0xec>
 8004598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00b      	beq.n	80045bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2202      	movs	r2, #2
 80045aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045b2:	f043 0204 	orr.w	r2, r3, #4
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d011      	beq.n	80045ec <HAL_UART_IRQHandler+0x11c>
 80045c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00b      	beq.n	80045ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2204      	movs	r2, #4
 80045da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045e2:	f043 0202 	orr.w	r2, r3, #2
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d017      	beq.n	8004628 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045fc:	f003 0320 	and.w	r3, r3, #32
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004608:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00b      	beq.n	8004628 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2208      	movs	r2, #8
 8004616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800461e:	f043 0208 	orr.w	r2, r3, #8
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800462c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004630:	2b00      	cmp	r3, #0
 8004632:	d012      	beq.n	800465a <HAL_UART_IRQHandler+0x18a>
 8004634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00c      	beq.n	800465a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004648:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004650:	f043 0220 	orr.w	r2, r3, #32
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 820c 	beq.w	8004a7e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00d      	beq.n	800468e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d007      	beq.n	800468e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004694:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a2:	2b40      	cmp	r3, #64	; 0x40
 80046a4:	d005      	beq.n	80046b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d04f      	beq.n	8004752 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fe75 	bl	80053a2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c2:	2b40      	cmp	r3, #64	; 0x40
 80046c4:	d141      	bne.n	800474a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3308      	adds	r3, #8
 80046cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3308      	adds	r3, #8
 80046ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004702:	e841 2300 	strex	r3, r2, [r1]
 8004706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800470a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1d9      	bne.n	80046c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004716:	2b00      	cmp	r3, #0
 8004718:	d013      	beq.n	8004742 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471e:	4a13      	ldr	r2, [pc, #76]	; (800476c <HAL_UART_IRQHandler+0x29c>)
 8004720:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	4618      	mov	r0, r3
 8004728:	f7fc ff77 	bl	800161a <HAL_DMA_Abort_IT>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d017      	beq.n	8004762 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800473c:	4610      	mov	r0, r2
 800473e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	e00f      	b.n	8004762 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f9b0 	bl	8004aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004748:	e00b      	b.n	8004762 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f9ac 	bl	8004aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004750:	e007      	b.n	8004762 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f9a8 	bl	8004aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004760:	e18d      	b.n	8004a7e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004762:	bf00      	nop
    return;
 8004764:	e18b      	b.n	8004a7e <HAL_UART_IRQHandler+0x5ae>
 8004766:	bf00      	nop
 8004768:	04000120 	.word	0x04000120
 800476c:	08005469 	.word	0x08005469

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004774:	2b01      	cmp	r3, #1
 8004776:	f040 8146 	bne.w	8004a06 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800477a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800477e:	f003 0310 	and.w	r3, r3, #16
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 813f 	beq.w	8004a06 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8138 	beq.w	8004a06 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2210      	movs	r2, #16
 800479c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a8:	2b40      	cmp	r3, #64	; 0x40
 80047aa:	f040 80b4 	bne.w	8004916 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 815f 	beq.w	8004a82 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047ce:	429a      	cmp	r2, r3
 80047d0:	f080 8157 	bcs.w	8004a82 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0320 	and.w	r3, r3, #32
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f040 8085 	bne.w	80048fa <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004804:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800480c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800481a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800481e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004822:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004826:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800482a:	e841 2300 	strex	r3, r2, [r1]
 800482e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1da      	bne.n	80047f0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3308      	adds	r3, #8
 8004840:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004844:	e853 3f00 	ldrex	r3, [r3]
 8004848:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800484a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800484c:	f023 0301 	bic.w	r3, r3, #1
 8004850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3308      	adds	r3, #8
 800485a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800485e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004862:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004864:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004866:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e1      	bne.n	800483a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3308      	adds	r3, #8
 800487c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800488c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3308      	adds	r3, #8
 8004896:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800489a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800489c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048a2:	e841 2300 	strex	r3, r2, [r1]
 80048a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1e3      	bne.n	8004876 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ca:	f023 0310 	bic.w	r3, r3, #16
 80048ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80048de:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e4      	bne.n	80048ba <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fc fe52 	bl	800159e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004906:	b29b      	uxth	r3, r3
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	b29b      	uxth	r3, r3
 800490c:	4619      	mov	r1, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f8d4 	bl	8004abc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004914:	e0b5      	b.n	8004a82 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004922:	b29b      	uxth	r3, r3
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80a7 	beq.w	8004a86 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 80a2 	beq.w	8004a86 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494a:	e853 3f00 	ldrex	r3, [r3]
 800494e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004952:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004956:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004964:	647b      	str	r3, [r7, #68]	; 0x44
 8004966:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004968:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800496a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800496c:	e841 2300 	strex	r3, r2, [r1]
 8004970:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e4      	bne.n	8004942 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3308      	adds	r3, #8
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	e853 3f00 	ldrex	r3, [r3]
 8004986:	623b      	str	r3, [r7, #32]
   return(result);
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	f023 0301 	bic.w	r3, r3, #1
 800498e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3308      	adds	r3, #8
 8004998:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800499c:	633a      	str	r2, [r7, #48]	; 0x30
 800499e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049a4:	e841 2300 	strex	r3, r2, [r1]
 80049a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e3      	bne.n	8004978 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0310 	bic.w	r3, r3, #16
 80049d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049e4:	61fb      	str	r3, [r7, #28]
 80049e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	69b9      	ldr	r1, [r7, #24]
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	e841 2300 	strex	r3, r2, [r1]
 80049f0:	617b      	str	r3, [r7, #20]
   return(result);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e4      	bne.n	80049c2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049fc:	4619      	mov	r1, r3
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f85c 	bl	8004abc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a04:	e03f      	b.n	8004a86 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00e      	beq.n	8004a30 <HAL_UART_IRQHandler+0x560>
 8004a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d008      	beq.n	8004a30 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fd5d 	bl	80054e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a2e:	e02d      	b.n	8004a8c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00e      	beq.n	8004a5a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d01c      	beq.n	8004a8a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	4798      	blx	r3
    }
    return;
 8004a58:	e017      	b.n	8004a8a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d012      	beq.n	8004a8c <HAL_UART_IRQHandler+0x5bc>
 8004a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00c      	beq.n	8004a8c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fd0e 	bl	8005494 <UART_EndTransmit_IT>
    return;
 8004a78:	e008      	b.n	8004a8c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004a7a:	bf00      	nop
 8004a7c:	e006      	b.n	8004a8c <HAL_UART_IRQHandler+0x5bc>
    return;
 8004a7e:	bf00      	nop
 8004a80:	e004      	b.n	8004a8c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004a82:	bf00      	nop
 8004a84:	e002      	b.n	8004a8c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004a86:	bf00      	nop
 8004a88:	e000      	b.n	8004a8c <HAL_UART_IRQHandler+0x5bc>
    return;
 8004a8a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004a8c:	37e8      	adds	r7, #232	; 0xe8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop

08004a94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad8:	b08a      	sub	sp, #40	; 0x28
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	431a      	orrs	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	4ba4      	ldr	r3, [pc, #656]	; (8004d94 <UART_SetConfig+0x2c0>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a99      	ldr	r2, [pc, #612]	; (8004d98 <UART_SetConfig+0x2c4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d004      	beq.n	8004b40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b50:	430a      	orrs	r2, r1
 8004b52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a90      	ldr	r2, [pc, #576]	; (8004d9c <UART_SetConfig+0x2c8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d126      	bne.n	8004bac <UART_SetConfig+0xd8>
 8004b5e:	4b90      	ldr	r3, [pc, #576]	; (8004da0 <UART_SetConfig+0x2cc>)
 8004b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b64:	f003 0303 	and.w	r3, r3, #3
 8004b68:	2b03      	cmp	r3, #3
 8004b6a:	d81b      	bhi.n	8004ba4 <UART_SetConfig+0xd0>
 8004b6c:	a201      	add	r2, pc, #4	; (adr r2, 8004b74 <UART_SetConfig+0xa0>)
 8004b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b72:	bf00      	nop
 8004b74:	08004b85 	.word	0x08004b85
 8004b78:	08004b95 	.word	0x08004b95
 8004b7c:	08004b8d 	.word	0x08004b8d
 8004b80:	08004b9d 	.word	0x08004b9d
 8004b84:	2301      	movs	r3, #1
 8004b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8a:	e116      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b92:	e112      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004b94:	2304      	movs	r3, #4
 8004b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b9a:	e10e      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004b9c:	2308      	movs	r3, #8
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba2:	e10a      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004ba4:	2310      	movs	r3, #16
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004baa:	e106      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a7c      	ldr	r2, [pc, #496]	; (8004da4 <UART_SetConfig+0x2d0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d138      	bne.n	8004c28 <UART_SetConfig+0x154>
 8004bb6:	4b7a      	ldr	r3, [pc, #488]	; (8004da0 <UART_SetConfig+0x2cc>)
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbc:	f003 030c 	and.w	r3, r3, #12
 8004bc0:	2b0c      	cmp	r3, #12
 8004bc2:	d82d      	bhi.n	8004c20 <UART_SetConfig+0x14c>
 8004bc4:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <UART_SetConfig+0xf8>)
 8004bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bca:	bf00      	nop
 8004bcc:	08004c01 	.word	0x08004c01
 8004bd0:	08004c21 	.word	0x08004c21
 8004bd4:	08004c21 	.word	0x08004c21
 8004bd8:	08004c21 	.word	0x08004c21
 8004bdc:	08004c11 	.word	0x08004c11
 8004be0:	08004c21 	.word	0x08004c21
 8004be4:	08004c21 	.word	0x08004c21
 8004be8:	08004c21 	.word	0x08004c21
 8004bec:	08004c09 	.word	0x08004c09
 8004bf0:	08004c21 	.word	0x08004c21
 8004bf4:	08004c21 	.word	0x08004c21
 8004bf8:	08004c21 	.word	0x08004c21
 8004bfc:	08004c19 	.word	0x08004c19
 8004c00:	2300      	movs	r3, #0
 8004c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c06:	e0d8      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0e:	e0d4      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004c10:	2304      	movs	r3, #4
 8004c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c16:	e0d0      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004c18:	2308      	movs	r3, #8
 8004c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1e:	e0cc      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004c20:	2310      	movs	r3, #16
 8004c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c26:	e0c8      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a5e      	ldr	r2, [pc, #376]	; (8004da8 <UART_SetConfig+0x2d4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d125      	bne.n	8004c7e <UART_SetConfig+0x1aa>
 8004c32:	4b5b      	ldr	r3, [pc, #364]	; (8004da0 <UART_SetConfig+0x2cc>)
 8004c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c3c:	2b30      	cmp	r3, #48	; 0x30
 8004c3e:	d016      	beq.n	8004c6e <UART_SetConfig+0x19a>
 8004c40:	2b30      	cmp	r3, #48	; 0x30
 8004c42:	d818      	bhi.n	8004c76 <UART_SetConfig+0x1a2>
 8004c44:	2b20      	cmp	r3, #32
 8004c46:	d00a      	beq.n	8004c5e <UART_SetConfig+0x18a>
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d814      	bhi.n	8004c76 <UART_SetConfig+0x1a2>
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <UART_SetConfig+0x182>
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d008      	beq.n	8004c66 <UART_SetConfig+0x192>
 8004c54:	e00f      	b.n	8004c76 <UART_SetConfig+0x1a2>
 8004c56:	2300      	movs	r3, #0
 8004c58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5c:	e0ad      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c64:	e0a9      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004c66:	2304      	movs	r3, #4
 8004c68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6c:	e0a5      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004c6e:	2308      	movs	r3, #8
 8004c70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c74:	e0a1      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004c76:	2310      	movs	r3, #16
 8004c78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7c:	e09d      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a4a      	ldr	r2, [pc, #296]	; (8004dac <UART_SetConfig+0x2d8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d125      	bne.n	8004cd4 <UART_SetConfig+0x200>
 8004c88:	4b45      	ldr	r3, [pc, #276]	; (8004da0 <UART_SetConfig+0x2cc>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c92:	2bc0      	cmp	r3, #192	; 0xc0
 8004c94:	d016      	beq.n	8004cc4 <UART_SetConfig+0x1f0>
 8004c96:	2bc0      	cmp	r3, #192	; 0xc0
 8004c98:	d818      	bhi.n	8004ccc <UART_SetConfig+0x1f8>
 8004c9a:	2b80      	cmp	r3, #128	; 0x80
 8004c9c:	d00a      	beq.n	8004cb4 <UART_SetConfig+0x1e0>
 8004c9e:	2b80      	cmp	r3, #128	; 0x80
 8004ca0:	d814      	bhi.n	8004ccc <UART_SetConfig+0x1f8>
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <UART_SetConfig+0x1d8>
 8004ca6:	2b40      	cmp	r3, #64	; 0x40
 8004ca8:	d008      	beq.n	8004cbc <UART_SetConfig+0x1e8>
 8004caa:	e00f      	b.n	8004ccc <UART_SetConfig+0x1f8>
 8004cac:	2300      	movs	r3, #0
 8004cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb2:	e082      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cba:	e07e      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc2:	e07a      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cca:	e076      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004ccc:	2310      	movs	r3, #16
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd2:	e072      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a35      	ldr	r2, [pc, #212]	; (8004db0 <UART_SetConfig+0x2dc>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d12a      	bne.n	8004d34 <UART_SetConfig+0x260>
 8004cde:	4b30      	ldr	r3, [pc, #192]	; (8004da0 <UART_SetConfig+0x2cc>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cec:	d01a      	beq.n	8004d24 <UART_SetConfig+0x250>
 8004cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cf2:	d81b      	bhi.n	8004d2c <UART_SetConfig+0x258>
 8004cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf8:	d00c      	beq.n	8004d14 <UART_SetConfig+0x240>
 8004cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cfe:	d815      	bhi.n	8004d2c <UART_SetConfig+0x258>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <UART_SetConfig+0x238>
 8004d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d08:	d008      	beq.n	8004d1c <UART_SetConfig+0x248>
 8004d0a:	e00f      	b.n	8004d2c <UART_SetConfig+0x258>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d12:	e052      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004d14:	2302      	movs	r3, #2
 8004d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1a:	e04e      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d22:	e04a      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004d24:	2308      	movs	r3, #8
 8004d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2a:	e046      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004d2c:	2310      	movs	r3, #16
 8004d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d32:	e042      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a17      	ldr	r2, [pc, #92]	; (8004d98 <UART_SetConfig+0x2c4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d13a      	bne.n	8004db4 <UART_SetConfig+0x2e0>
 8004d3e:	4b18      	ldr	r3, [pc, #96]	; (8004da0 <UART_SetConfig+0x2cc>)
 8004d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d4c:	d01a      	beq.n	8004d84 <UART_SetConfig+0x2b0>
 8004d4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d52:	d81b      	bhi.n	8004d8c <UART_SetConfig+0x2b8>
 8004d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d58:	d00c      	beq.n	8004d74 <UART_SetConfig+0x2a0>
 8004d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d5e:	d815      	bhi.n	8004d8c <UART_SetConfig+0x2b8>
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <UART_SetConfig+0x298>
 8004d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d68:	d008      	beq.n	8004d7c <UART_SetConfig+0x2a8>
 8004d6a:	e00f      	b.n	8004d8c <UART_SetConfig+0x2b8>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d72:	e022      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004d74:	2302      	movs	r3, #2
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7a:	e01e      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d82:	e01a      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004d84:	2308      	movs	r3, #8
 8004d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8a:	e016      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004d8c:	2310      	movs	r3, #16
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d92:	e012      	b.n	8004dba <UART_SetConfig+0x2e6>
 8004d94:	efff69f3 	.word	0xefff69f3
 8004d98:	40008000 	.word	0x40008000
 8004d9c:	40013800 	.word	0x40013800
 8004da0:	40021000 	.word	0x40021000
 8004da4:	40004400 	.word	0x40004400
 8004da8:	40004800 	.word	0x40004800
 8004dac:	40004c00 	.word	0x40004c00
 8004db0:	40005000 	.word	0x40005000
 8004db4:	2310      	movs	r3, #16
 8004db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a9f      	ldr	r2, [pc, #636]	; (800503c <UART_SetConfig+0x568>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d17a      	bne.n	8004eba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004dc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d824      	bhi.n	8004e16 <UART_SetConfig+0x342>
 8004dcc:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <UART_SetConfig+0x300>)
 8004dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd2:	bf00      	nop
 8004dd4:	08004df9 	.word	0x08004df9
 8004dd8:	08004e17 	.word	0x08004e17
 8004ddc:	08004e01 	.word	0x08004e01
 8004de0:	08004e17 	.word	0x08004e17
 8004de4:	08004e07 	.word	0x08004e07
 8004de8:	08004e17 	.word	0x08004e17
 8004dec:	08004e17 	.word	0x08004e17
 8004df0:	08004e17 	.word	0x08004e17
 8004df4:	08004e0f 	.word	0x08004e0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004df8:	f7fd fc34 	bl	8002664 <HAL_RCC_GetPCLK1Freq>
 8004dfc:	61f8      	str	r0, [r7, #28]
        break;
 8004dfe:	e010      	b.n	8004e22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e00:	4b8f      	ldr	r3, [pc, #572]	; (8005040 <UART_SetConfig+0x56c>)
 8004e02:	61fb      	str	r3, [r7, #28]
        break;
 8004e04:	e00d      	b.n	8004e22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e06:	f7fd fb95 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8004e0a:	61f8      	str	r0, [r7, #28]
        break;
 8004e0c:	e009      	b.n	8004e22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e12:	61fb      	str	r3, [r7, #28]
        break;
 8004e14:	e005      	b.n	8004e22 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 80fb 	beq.w	8005020 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	4413      	add	r3, r2
 8004e34:	69fa      	ldr	r2, [r7, #28]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d305      	bcc.n	8004e46 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e40:	69fa      	ldr	r2, [r7, #28]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d903      	bls.n	8004e4e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e4c:	e0e8      	b.n	8005020 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	2200      	movs	r2, #0
 8004e52:	461c      	mov	r4, r3
 8004e54:	4615      	mov	r5, r2
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	022b      	lsls	r3, r5, #8
 8004e60:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e64:	0222      	lsls	r2, r4, #8
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	6849      	ldr	r1, [r1, #4]
 8004e6a:	0849      	lsrs	r1, r1, #1
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	4688      	mov	r8, r1
 8004e70:	4681      	mov	r9, r0
 8004e72:	eb12 0a08 	adds.w	sl, r2, r8
 8004e76:	eb43 0b09 	adc.w	fp, r3, r9
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	603b      	str	r3, [r7, #0]
 8004e82:	607a      	str	r2, [r7, #4]
 8004e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e88:	4650      	mov	r0, sl
 8004e8a:	4659      	mov	r1, fp
 8004e8c:	f7fb f99c 	bl	80001c8 <__aeabi_uldivmod>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4613      	mov	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e9e:	d308      	bcc.n	8004eb2 <UART_SetConfig+0x3de>
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ea6:	d204      	bcs.n	8004eb2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	60da      	str	r2, [r3, #12]
 8004eb0:	e0b6      	b.n	8005020 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004eb8:	e0b2      	b.n	8005020 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec2:	d15e      	bne.n	8004f82 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004ec4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d828      	bhi.n	8004f1e <UART_SetConfig+0x44a>
 8004ecc:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <UART_SetConfig+0x400>)
 8004ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed2:	bf00      	nop
 8004ed4:	08004ef9 	.word	0x08004ef9
 8004ed8:	08004f01 	.word	0x08004f01
 8004edc:	08004f09 	.word	0x08004f09
 8004ee0:	08004f1f 	.word	0x08004f1f
 8004ee4:	08004f0f 	.word	0x08004f0f
 8004ee8:	08004f1f 	.word	0x08004f1f
 8004eec:	08004f1f 	.word	0x08004f1f
 8004ef0:	08004f1f 	.word	0x08004f1f
 8004ef4:	08004f17 	.word	0x08004f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef8:	f7fd fbb4 	bl	8002664 <HAL_RCC_GetPCLK1Freq>
 8004efc:	61f8      	str	r0, [r7, #28]
        break;
 8004efe:	e014      	b.n	8004f2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f00:	f7fd fbc6 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 8004f04:	61f8      	str	r0, [r7, #28]
        break;
 8004f06:	e010      	b.n	8004f2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f08:	4b4d      	ldr	r3, [pc, #308]	; (8005040 <UART_SetConfig+0x56c>)
 8004f0a:	61fb      	str	r3, [r7, #28]
        break;
 8004f0c:	e00d      	b.n	8004f2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f0e:	f7fd fb11 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8004f12:	61f8      	str	r0, [r7, #28]
        break;
 8004f14:	e009      	b.n	8004f2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f1a:	61fb      	str	r3, [r7, #28]
        break;
 8004f1c:	e005      	b.n	8004f2a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d077      	beq.n	8005020 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	005a      	lsls	r2, r3, #1
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	085b      	lsrs	r3, r3, #1
 8004f3a:	441a      	add	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f44:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b0f      	cmp	r3, #15
 8004f4a:	d916      	bls.n	8004f7a <UART_SetConfig+0x4a6>
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f52:	d212      	bcs.n	8004f7a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	f023 030f 	bic.w	r3, r3, #15
 8004f5c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	085b      	lsrs	r3, r3, #1
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	8afb      	ldrh	r3, [r7, #22]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	8afa      	ldrh	r2, [r7, #22]
 8004f76:	60da      	str	r2, [r3, #12]
 8004f78:	e052      	b.n	8005020 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f80:	e04e      	b.n	8005020 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d827      	bhi.n	8004fda <UART_SetConfig+0x506>
 8004f8a:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <UART_SetConfig+0x4bc>)
 8004f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f90:	08004fb5 	.word	0x08004fb5
 8004f94:	08004fbd 	.word	0x08004fbd
 8004f98:	08004fc5 	.word	0x08004fc5
 8004f9c:	08004fdb 	.word	0x08004fdb
 8004fa0:	08004fcb 	.word	0x08004fcb
 8004fa4:	08004fdb 	.word	0x08004fdb
 8004fa8:	08004fdb 	.word	0x08004fdb
 8004fac:	08004fdb 	.word	0x08004fdb
 8004fb0:	08004fd3 	.word	0x08004fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fb4:	f7fd fb56 	bl	8002664 <HAL_RCC_GetPCLK1Freq>
 8004fb8:	61f8      	str	r0, [r7, #28]
        break;
 8004fba:	e014      	b.n	8004fe6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fbc:	f7fd fb68 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 8004fc0:	61f8      	str	r0, [r7, #28]
        break;
 8004fc2:	e010      	b.n	8004fe6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fc4:	4b1e      	ldr	r3, [pc, #120]	; (8005040 <UART_SetConfig+0x56c>)
 8004fc6:	61fb      	str	r3, [r7, #28]
        break;
 8004fc8:	e00d      	b.n	8004fe6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fca:	f7fd fab3 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8004fce:	61f8      	str	r0, [r7, #28]
        break;
 8004fd0:	e009      	b.n	8004fe6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fd6:	61fb      	str	r3, [r7, #28]
        break;
 8004fd8:	e005      	b.n	8004fe6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fe4:	bf00      	nop
    }

    if (pclk != 0U)
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d019      	beq.n	8005020 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	085a      	lsrs	r2, r3, #1
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	441a      	add	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	2b0f      	cmp	r3, #15
 8005004:	d909      	bls.n	800501a <UART_SetConfig+0x546>
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500c:	d205      	bcs.n	800501a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	60da      	str	r2, [r3, #12]
 8005018:	e002      	b.n	8005020 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800502c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005030:	4618      	mov	r0, r3
 8005032:	3728      	adds	r7, #40	; 0x28
 8005034:	46bd      	mov	sp, r7
 8005036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800503a:	bf00      	nop
 800503c:	40008000 	.word	0x40008000
 8005040:	00f42400 	.word	0x00f42400

08005044 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00a      	beq.n	80050f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01a      	beq.n	800515a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005142:	d10a      	bne.n	800515a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	605a      	str	r2, [r3, #4]
  }
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af02      	add	r7, sp, #8
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005198:	f7fc f8e4 	bl	8001364 <HAL_GetTick>
 800519c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d10e      	bne.n	80051ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f82d 	bl	800521a <UART_WaitOnFlagUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e023      	b.n	8005212 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d10e      	bne.n	80051f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f817 	bl	800521a <UART_WaitOnFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e00d      	b.n	8005212 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2220      	movs	r2, #32
 80051fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b09c      	sub	sp, #112	; 0x70
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	603b      	str	r3, [r7, #0]
 8005226:	4613      	mov	r3, r2
 8005228:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800522a:	e0a5      	b.n	8005378 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005232:	f000 80a1 	beq.w	8005378 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005236:	f7fc f895 	bl	8001364 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005242:	429a      	cmp	r2, r3
 8005244:	d302      	bcc.n	800524c <UART_WaitOnFlagUntilTimeout+0x32>
 8005246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005248:	2b00      	cmp	r3, #0
 800524a:	d13e      	bne.n	80052ca <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800525a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800525c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005260:	667b      	str	r3, [r7, #100]	; 0x64
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800526a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800526c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005270:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e6      	bne.n	800524c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3308      	adds	r3, #8
 8005284:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800528e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	663b      	str	r3, [r7, #96]	; 0x60
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3308      	adds	r3, #8
 800529c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800529e:	64ba      	str	r2, [r7, #72]	; 0x48
 80052a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1e5      	bne.n	800527e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2220      	movs	r2, #32
 80052b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e067      	b.n	800539a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d04f      	beq.n	8005378 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052e6:	d147      	bne.n	8005378 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052f0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	e853 3f00 	ldrex	r3, [r3]
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005306:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005310:	637b      	str	r3, [r7, #52]	; 0x34
 8005312:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800531e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e6      	bne.n	80052f2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3308      	adds	r3, #8
 800532a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	e853 3f00 	ldrex	r3, [r3]
 8005332:	613b      	str	r3, [r7, #16]
   return(result);
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f023 0301 	bic.w	r3, r3, #1
 800533a:	66bb      	str	r3, [r7, #104]	; 0x68
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3308      	adds	r3, #8
 8005342:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005344:	623a      	str	r2, [r7, #32]
 8005346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005348:	69f9      	ldr	r1, [r7, #28]
 800534a:	6a3a      	ldr	r2, [r7, #32]
 800534c:	e841 2300 	strex	r3, r2, [r1]
 8005350:	61bb      	str	r3, [r7, #24]
   return(result);
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1e5      	bne.n	8005324 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2220      	movs	r2, #32
 800535c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2220      	movs	r2, #32
 8005362:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2220      	movs	r2, #32
 8005368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e010      	b.n	800539a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	69da      	ldr	r2, [r3, #28]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	4013      	ands	r3, r2
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	429a      	cmp	r2, r3
 8005386:	bf0c      	ite	eq
 8005388:	2301      	moveq	r3, #1
 800538a:	2300      	movne	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	461a      	mov	r2, r3
 8005390:	79fb      	ldrb	r3, [r7, #7]
 8005392:	429a      	cmp	r2, r3
 8005394:	f43f af4a 	beq.w	800522c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3770      	adds	r7, #112	; 0x70
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b095      	sub	sp, #84	; 0x54
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b2:	e853 3f00 	ldrex	r3, [r3]
 80053b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	461a      	mov	r2, r3
 80053c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c8:	643b      	str	r3, [r7, #64]	; 0x40
 80053ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053d0:	e841 2300 	strex	r3, r2, [r1]
 80053d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1e6      	bne.n	80053aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3308      	adds	r3, #8
 80053e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	e853 3f00 	ldrex	r3, [r3]
 80053ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	f023 0301 	bic.w	r3, r3, #1
 80053f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3308      	adds	r3, #8
 80053fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005400:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005404:	e841 2300 	strex	r3, r2, [r1]
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1e5      	bne.n	80053dc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005414:	2b01      	cmp	r3, #1
 8005416:	d118      	bne.n	800544a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	e853 3f00 	ldrex	r3, [r3]
 8005424:	60bb      	str	r3, [r7, #8]
   return(result);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f023 0310 	bic.w	r3, r3, #16
 800542c:	647b      	str	r3, [r7, #68]	; 0x44
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005436:	61bb      	str	r3, [r7, #24]
 8005438:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	6979      	ldr	r1, [r7, #20]
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	613b      	str	r3, [r7, #16]
   return(result);
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1e6      	bne.n	8005418 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2220      	movs	r2, #32
 800544e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800545c:	bf00      	nop
 800545e:	3754      	adds	r7, #84	; 0x54
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005474:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f7ff fb0e 	bl	8004aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800548c:	bf00      	nop
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054b0:	61fb      	str	r3, [r7, #28]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	61bb      	str	r3, [r7, #24]
 80054bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6979      	ldr	r1, [r7, #20]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	613b      	str	r3, [r7, #16]
   return(result);
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e6      	bne.n	800549c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2220      	movs	r2, #32
 80054d2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff fada 	bl	8004a94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054e0:	bf00      	nop
 80054e2:	3720      	adds	r7, #32
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <__errno>:
 80054fc:	4b01      	ldr	r3, [pc, #4]	; (8005504 <__errno+0x8>)
 80054fe:	6818      	ldr	r0, [r3, #0]
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	200000cc 	.word	0x200000cc

08005508 <__libc_init_array>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	4d0d      	ldr	r5, [pc, #52]	; (8005540 <__libc_init_array+0x38>)
 800550c:	4c0d      	ldr	r4, [pc, #52]	; (8005544 <__libc_init_array+0x3c>)
 800550e:	1b64      	subs	r4, r4, r5
 8005510:	10a4      	asrs	r4, r4, #2
 8005512:	2600      	movs	r6, #0
 8005514:	42a6      	cmp	r6, r4
 8005516:	d109      	bne.n	800552c <__libc_init_array+0x24>
 8005518:	4d0b      	ldr	r5, [pc, #44]	; (8005548 <__libc_init_array+0x40>)
 800551a:	4c0c      	ldr	r4, [pc, #48]	; (800554c <__libc_init_array+0x44>)
 800551c:	f000 fd1e 	bl	8005f5c <_init>
 8005520:	1b64      	subs	r4, r4, r5
 8005522:	10a4      	asrs	r4, r4, #2
 8005524:	2600      	movs	r6, #0
 8005526:	42a6      	cmp	r6, r4
 8005528:	d105      	bne.n	8005536 <__libc_init_array+0x2e>
 800552a:	bd70      	pop	{r4, r5, r6, pc}
 800552c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005530:	4798      	blx	r3
 8005532:	3601      	adds	r6, #1
 8005534:	e7ee      	b.n	8005514 <__libc_init_array+0xc>
 8005536:	f855 3b04 	ldr.w	r3, [r5], #4
 800553a:	4798      	blx	r3
 800553c:	3601      	adds	r6, #1
 800553e:	e7f2      	b.n	8005526 <__libc_init_array+0x1e>
 8005540:	08006078 	.word	0x08006078
 8005544:	08006078 	.word	0x08006078
 8005548:	08006078 	.word	0x08006078
 800554c:	0800607c 	.word	0x0800607c

08005550 <memset>:
 8005550:	4402      	add	r2, r0
 8005552:	4603      	mov	r3, r0
 8005554:	4293      	cmp	r3, r2
 8005556:	d100      	bne.n	800555a <memset+0xa>
 8005558:	4770      	bx	lr
 800555a:	f803 1b01 	strb.w	r1, [r3], #1
 800555e:	e7f9      	b.n	8005554 <memset+0x4>

08005560 <_puts_r>:
 8005560:	b570      	push	{r4, r5, r6, lr}
 8005562:	460e      	mov	r6, r1
 8005564:	4605      	mov	r5, r0
 8005566:	b118      	cbz	r0, 8005570 <_puts_r+0x10>
 8005568:	6983      	ldr	r3, [r0, #24]
 800556a:	b90b      	cbnz	r3, 8005570 <_puts_r+0x10>
 800556c:	f000 fa48 	bl	8005a00 <__sinit>
 8005570:	69ab      	ldr	r3, [r5, #24]
 8005572:	68ac      	ldr	r4, [r5, #8]
 8005574:	b913      	cbnz	r3, 800557c <_puts_r+0x1c>
 8005576:	4628      	mov	r0, r5
 8005578:	f000 fa42 	bl	8005a00 <__sinit>
 800557c:	4b2c      	ldr	r3, [pc, #176]	; (8005630 <_puts_r+0xd0>)
 800557e:	429c      	cmp	r4, r3
 8005580:	d120      	bne.n	80055c4 <_puts_r+0x64>
 8005582:	686c      	ldr	r4, [r5, #4]
 8005584:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005586:	07db      	lsls	r3, r3, #31
 8005588:	d405      	bmi.n	8005596 <_puts_r+0x36>
 800558a:	89a3      	ldrh	r3, [r4, #12]
 800558c:	0598      	lsls	r0, r3, #22
 800558e:	d402      	bmi.n	8005596 <_puts_r+0x36>
 8005590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005592:	f000 fad3 	bl	8005b3c <__retarget_lock_acquire_recursive>
 8005596:	89a3      	ldrh	r3, [r4, #12]
 8005598:	0719      	lsls	r1, r3, #28
 800559a:	d51d      	bpl.n	80055d8 <_puts_r+0x78>
 800559c:	6923      	ldr	r3, [r4, #16]
 800559e:	b1db      	cbz	r3, 80055d8 <_puts_r+0x78>
 80055a0:	3e01      	subs	r6, #1
 80055a2:	68a3      	ldr	r3, [r4, #8]
 80055a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80055a8:	3b01      	subs	r3, #1
 80055aa:	60a3      	str	r3, [r4, #8]
 80055ac:	bb39      	cbnz	r1, 80055fe <_puts_r+0x9e>
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	da38      	bge.n	8005624 <_puts_r+0xc4>
 80055b2:	4622      	mov	r2, r4
 80055b4:	210a      	movs	r1, #10
 80055b6:	4628      	mov	r0, r5
 80055b8:	f000 f848 	bl	800564c <__swbuf_r>
 80055bc:	3001      	adds	r0, #1
 80055be:	d011      	beq.n	80055e4 <_puts_r+0x84>
 80055c0:	250a      	movs	r5, #10
 80055c2:	e011      	b.n	80055e8 <_puts_r+0x88>
 80055c4:	4b1b      	ldr	r3, [pc, #108]	; (8005634 <_puts_r+0xd4>)
 80055c6:	429c      	cmp	r4, r3
 80055c8:	d101      	bne.n	80055ce <_puts_r+0x6e>
 80055ca:	68ac      	ldr	r4, [r5, #8]
 80055cc:	e7da      	b.n	8005584 <_puts_r+0x24>
 80055ce:	4b1a      	ldr	r3, [pc, #104]	; (8005638 <_puts_r+0xd8>)
 80055d0:	429c      	cmp	r4, r3
 80055d2:	bf08      	it	eq
 80055d4:	68ec      	ldreq	r4, [r5, #12]
 80055d6:	e7d5      	b.n	8005584 <_puts_r+0x24>
 80055d8:	4621      	mov	r1, r4
 80055da:	4628      	mov	r0, r5
 80055dc:	f000 f888 	bl	80056f0 <__swsetup_r>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	d0dd      	beq.n	80055a0 <_puts_r+0x40>
 80055e4:	f04f 35ff 	mov.w	r5, #4294967295
 80055e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055ea:	07da      	lsls	r2, r3, #31
 80055ec:	d405      	bmi.n	80055fa <_puts_r+0x9a>
 80055ee:	89a3      	ldrh	r3, [r4, #12]
 80055f0:	059b      	lsls	r3, r3, #22
 80055f2:	d402      	bmi.n	80055fa <_puts_r+0x9a>
 80055f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055f6:	f000 faa2 	bl	8005b3e <__retarget_lock_release_recursive>
 80055fa:	4628      	mov	r0, r5
 80055fc:	bd70      	pop	{r4, r5, r6, pc}
 80055fe:	2b00      	cmp	r3, #0
 8005600:	da04      	bge.n	800560c <_puts_r+0xac>
 8005602:	69a2      	ldr	r2, [r4, #24]
 8005604:	429a      	cmp	r2, r3
 8005606:	dc06      	bgt.n	8005616 <_puts_r+0xb6>
 8005608:	290a      	cmp	r1, #10
 800560a:	d004      	beq.n	8005616 <_puts_r+0xb6>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	6022      	str	r2, [r4, #0]
 8005612:	7019      	strb	r1, [r3, #0]
 8005614:	e7c5      	b.n	80055a2 <_puts_r+0x42>
 8005616:	4622      	mov	r2, r4
 8005618:	4628      	mov	r0, r5
 800561a:	f000 f817 	bl	800564c <__swbuf_r>
 800561e:	3001      	adds	r0, #1
 8005620:	d1bf      	bne.n	80055a2 <_puts_r+0x42>
 8005622:	e7df      	b.n	80055e4 <_puts_r+0x84>
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	250a      	movs	r5, #10
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	6022      	str	r2, [r4, #0]
 800562c:	701d      	strb	r5, [r3, #0]
 800562e:	e7db      	b.n	80055e8 <_puts_r+0x88>
 8005630:	08006030 	.word	0x08006030
 8005634:	08006050 	.word	0x08006050
 8005638:	08006010 	.word	0x08006010

0800563c <puts>:
 800563c:	4b02      	ldr	r3, [pc, #8]	; (8005648 <puts+0xc>)
 800563e:	4601      	mov	r1, r0
 8005640:	6818      	ldr	r0, [r3, #0]
 8005642:	f7ff bf8d 	b.w	8005560 <_puts_r>
 8005646:	bf00      	nop
 8005648:	200000cc 	.word	0x200000cc

0800564c <__swbuf_r>:
 800564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564e:	460e      	mov	r6, r1
 8005650:	4614      	mov	r4, r2
 8005652:	4605      	mov	r5, r0
 8005654:	b118      	cbz	r0, 800565e <__swbuf_r+0x12>
 8005656:	6983      	ldr	r3, [r0, #24]
 8005658:	b90b      	cbnz	r3, 800565e <__swbuf_r+0x12>
 800565a:	f000 f9d1 	bl	8005a00 <__sinit>
 800565e:	4b21      	ldr	r3, [pc, #132]	; (80056e4 <__swbuf_r+0x98>)
 8005660:	429c      	cmp	r4, r3
 8005662:	d12b      	bne.n	80056bc <__swbuf_r+0x70>
 8005664:	686c      	ldr	r4, [r5, #4]
 8005666:	69a3      	ldr	r3, [r4, #24]
 8005668:	60a3      	str	r3, [r4, #8]
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	071a      	lsls	r2, r3, #28
 800566e:	d52f      	bpl.n	80056d0 <__swbuf_r+0x84>
 8005670:	6923      	ldr	r3, [r4, #16]
 8005672:	b36b      	cbz	r3, 80056d0 <__swbuf_r+0x84>
 8005674:	6923      	ldr	r3, [r4, #16]
 8005676:	6820      	ldr	r0, [r4, #0]
 8005678:	1ac0      	subs	r0, r0, r3
 800567a:	6963      	ldr	r3, [r4, #20]
 800567c:	b2f6      	uxtb	r6, r6
 800567e:	4283      	cmp	r3, r0
 8005680:	4637      	mov	r7, r6
 8005682:	dc04      	bgt.n	800568e <__swbuf_r+0x42>
 8005684:	4621      	mov	r1, r4
 8005686:	4628      	mov	r0, r5
 8005688:	f000 f926 	bl	80058d8 <_fflush_r>
 800568c:	bb30      	cbnz	r0, 80056dc <__swbuf_r+0x90>
 800568e:	68a3      	ldr	r3, [r4, #8]
 8005690:	3b01      	subs	r3, #1
 8005692:	60a3      	str	r3, [r4, #8]
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	6022      	str	r2, [r4, #0]
 800569a:	701e      	strb	r6, [r3, #0]
 800569c:	6963      	ldr	r3, [r4, #20]
 800569e:	3001      	adds	r0, #1
 80056a0:	4283      	cmp	r3, r0
 80056a2:	d004      	beq.n	80056ae <__swbuf_r+0x62>
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	07db      	lsls	r3, r3, #31
 80056a8:	d506      	bpl.n	80056b8 <__swbuf_r+0x6c>
 80056aa:	2e0a      	cmp	r6, #10
 80056ac:	d104      	bne.n	80056b8 <__swbuf_r+0x6c>
 80056ae:	4621      	mov	r1, r4
 80056b0:	4628      	mov	r0, r5
 80056b2:	f000 f911 	bl	80058d8 <_fflush_r>
 80056b6:	b988      	cbnz	r0, 80056dc <__swbuf_r+0x90>
 80056b8:	4638      	mov	r0, r7
 80056ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056bc:	4b0a      	ldr	r3, [pc, #40]	; (80056e8 <__swbuf_r+0x9c>)
 80056be:	429c      	cmp	r4, r3
 80056c0:	d101      	bne.n	80056c6 <__swbuf_r+0x7a>
 80056c2:	68ac      	ldr	r4, [r5, #8]
 80056c4:	e7cf      	b.n	8005666 <__swbuf_r+0x1a>
 80056c6:	4b09      	ldr	r3, [pc, #36]	; (80056ec <__swbuf_r+0xa0>)
 80056c8:	429c      	cmp	r4, r3
 80056ca:	bf08      	it	eq
 80056cc:	68ec      	ldreq	r4, [r5, #12]
 80056ce:	e7ca      	b.n	8005666 <__swbuf_r+0x1a>
 80056d0:	4621      	mov	r1, r4
 80056d2:	4628      	mov	r0, r5
 80056d4:	f000 f80c 	bl	80056f0 <__swsetup_r>
 80056d8:	2800      	cmp	r0, #0
 80056da:	d0cb      	beq.n	8005674 <__swbuf_r+0x28>
 80056dc:	f04f 37ff 	mov.w	r7, #4294967295
 80056e0:	e7ea      	b.n	80056b8 <__swbuf_r+0x6c>
 80056e2:	bf00      	nop
 80056e4:	08006030 	.word	0x08006030
 80056e8:	08006050 	.word	0x08006050
 80056ec:	08006010 	.word	0x08006010

080056f0 <__swsetup_r>:
 80056f0:	4b32      	ldr	r3, [pc, #200]	; (80057bc <__swsetup_r+0xcc>)
 80056f2:	b570      	push	{r4, r5, r6, lr}
 80056f4:	681d      	ldr	r5, [r3, #0]
 80056f6:	4606      	mov	r6, r0
 80056f8:	460c      	mov	r4, r1
 80056fa:	b125      	cbz	r5, 8005706 <__swsetup_r+0x16>
 80056fc:	69ab      	ldr	r3, [r5, #24]
 80056fe:	b913      	cbnz	r3, 8005706 <__swsetup_r+0x16>
 8005700:	4628      	mov	r0, r5
 8005702:	f000 f97d 	bl	8005a00 <__sinit>
 8005706:	4b2e      	ldr	r3, [pc, #184]	; (80057c0 <__swsetup_r+0xd0>)
 8005708:	429c      	cmp	r4, r3
 800570a:	d10f      	bne.n	800572c <__swsetup_r+0x3c>
 800570c:	686c      	ldr	r4, [r5, #4]
 800570e:	89a3      	ldrh	r3, [r4, #12]
 8005710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005714:	0719      	lsls	r1, r3, #28
 8005716:	d42c      	bmi.n	8005772 <__swsetup_r+0x82>
 8005718:	06dd      	lsls	r5, r3, #27
 800571a:	d411      	bmi.n	8005740 <__swsetup_r+0x50>
 800571c:	2309      	movs	r3, #9
 800571e:	6033      	str	r3, [r6, #0]
 8005720:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005724:	81a3      	strh	r3, [r4, #12]
 8005726:	f04f 30ff 	mov.w	r0, #4294967295
 800572a:	e03e      	b.n	80057aa <__swsetup_r+0xba>
 800572c:	4b25      	ldr	r3, [pc, #148]	; (80057c4 <__swsetup_r+0xd4>)
 800572e:	429c      	cmp	r4, r3
 8005730:	d101      	bne.n	8005736 <__swsetup_r+0x46>
 8005732:	68ac      	ldr	r4, [r5, #8]
 8005734:	e7eb      	b.n	800570e <__swsetup_r+0x1e>
 8005736:	4b24      	ldr	r3, [pc, #144]	; (80057c8 <__swsetup_r+0xd8>)
 8005738:	429c      	cmp	r4, r3
 800573a:	bf08      	it	eq
 800573c:	68ec      	ldreq	r4, [r5, #12]
 800573e:	e7e6      	b.n	800570e <__swsetup_r+0x1e>
 8005740:	0758      	lsls	r0, r3, #29
 8005742:	d512      	bpl.n	800576a <__swsetup_r+0x7a>
 8005744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005746:	b141      	cbz	r1, 800575a <__swsetup_r+0x6a>
 8005748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800574c:	4299      	cmp	r1, r3
 800574e:	d002      	beq.n	8005756 <__swsetup_r+0x66>
 8005750:	4630      	mov	r0, r6
 8005752:	f000 fa5b 	bl	8005c0c <_free_r>
 8005756:	2300      	movs	r3, #0
 8005758:	6363      	str	r3, [r4, #52]	; 0x34
 800575a:	89a3      	ldrh	r3, [r4, #12]
 800575c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005760:	81a3      	strh	r3, [r4, #12]
 8005762:	2300      	movs	r3, #0
 8005764:	6063      	str	r3, [r4, #4]
 8005766:	6923      	ldr	r3, [r4, #16]
 8005768:	6023      	str	r3, [r4, #0]
 800576a:	89a3      	ldrh	r3, [r4, #12]
 800576c:	f043 0308 	orr.w	r3, r3, #8
 8005770:	81a3      	strh	r3, [r4, #12]
 8005772:	6923      	ldr	r3, [r4, #16]
 8005774:	b94b      	cbnz	r3, 800578a <__swsetup_r+0x9a>
 8005776:	89a3      	ldrh	r3, [r4, #12]
 8005778:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800577c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005780:	d003      	beq.n	800578a <__swsetup_r+0x9a>
 8005782:	4621      	mov	r1, r4
 8005784:	4630      	mov	r0, r6
 8005786:	f000 fa01 	bl	8005b8c <__smakebuf_r>
 800578a:	89a0      	ldrh	r0, [r4, #12]
 800578c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005790:	f010 0301 	ands.w	r3, r0, #1
 8005794:	d00a      	beq.n	80057ac <__swsetup_r+0xbc>
 8005796:	2300      	movs	r3, #0
 8005798:	60a3      	str	r3, [r4, #8]
 800579a:	6963      	ldr	r3, [r4, #20]
 800579c:	425b      	negs	r3, r3
 800579e:	61a3      	str	r3, [r4, #24]
 80057a0:	6923      	ldr	r3, [r4, #16]
 80057a2:	b943      	cbnz	r3, 80057b6 <__swsetup_r+0xc6>
 80057a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057a8:	d1ba      	bne.n	8005720 <__swsetup_r+0x30>
 80057aa:	bd70      	pop	{r4, r5, r6, pc}
 80057ac:	0781      	lsls	r1, r0, #30
 80057ae:	bf58      	it	pl
 80057b0:	6963      	ldrpl	r3, [r4, #20]
 80057b2:	60a3      	str	r3, [r4, #8]
 80057b4:	e7f4      	b.n	80057a0 <__swsetup_r+0xb0>
 80057b6:	2000      	movs	r0, #0
 80057b8:	e7f7      	b.n	80057aa <__swsetup_r+0xba>
 80057ba:	bf00      	nop
 80057bc:	200000cc 	.word	0x200000cc
 80057c0:	08006030 	.word	0x08006030
 80057c4:	08006050 	.word	0x08006050
 80057c8:	08006010 	.word	0x08006010

080057cc <__sflush_r>:
 80057cc:	898a      	ldrh	r2, [r1, #12]
 80057ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d2:	4605      	mov	r5, r0
 80057d4:	0710      	lsls	r0, r2, #28
 80057d6:	460c      	mov	r4, r1
 80057d8:	d458      	bmi.n	800588c <__sflush_r+0xc0>
 80057da:	684b      	ldr	r3, [r1, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	dc05      	bgt.n	80057ec <__sflush_r+0x20>
 80057e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	dc02      	bgt.n	80057ec <__sflush_r+0x20>
 80057e6:	2000      	movs	r0, #0
 80057e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057ee:	2e00      	cmp	r6, #0
 80057f0:	d0f9      	beq.n	80057e6 <__sflush_r+0x1a>
 80057f2:	2300      	movs	r3, #0
 80057f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057f8:	682f      	ldr	r7, [r5, #0]
 80057fa:	602b      	str	r3, [r5, #0]
 80057fc:	d032      	beq.n	8005864 <__sflush_r+0x98>
 80057fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005800:	89a3      	ldrh	r3, [r4, #12]
 8005802:	075a      	lsls	r2, r3, #29
 8005804:	d505      	bpl.n	8005812 <__sflush_r+0x46>
 8005806:	6863      	ldr	r3, [r4, #4]
 8005808:	1ac0      	subs	r0, r0, r3
 800580a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800580c:	b10b      	cbz	r3, 8005812 <__sflush_r+0x46>
 800580e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005810:	1ac0      	subs	r0, r0, r3
 8005812:	2300      	movs	r3, #0
 8005814:	4602      	mov	r2, r0
 8005816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005818:	6a21      	ldr	r1, [r4, #32]
 800581a:	4628      	mov	r0, r5
 800581c:	47b0      	blx	r6
 800581e:	1c43      	adds	r3, r0, #1
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	d106      	bne.n	8005832 <__sflush_r+0x66>
 8005824:	6829      	ldr	r1, [r5, #0]
 8005826:	291d      	cmp	r1, #29
 8005828:	d82c      	bhi.n	8005884 <__sflush_r+0xb8>
 800582a:	4a2a      	ldr	r2, [pc, #168]	; (80058d4 <__sflush_r+0x108>)
 800582c:	40ca      	lsrs	r2, r1
 800582e:	07d6      	lsls	r6, r2, #31
 8005830:	d528      	bpl.n	8005884 <__sflush_r+0xb8>
 8005832:	2200      	movs	r2, #0
 8005834:	6062      	str	r2, [r4, #4]
 8005836:	04d9      	lsls	r1, r3, #19
 8005838:	6922      	ldr	r2, [r4, #16]
 800583a:	6022      	str	r2, [r4, #0]
 800583c:	d504      	bpl.n	8005848 <__sflush_r+0x7c>
 800583e:	1c42      	adds	r2, r0, #1
 8005840:	d101      	bne.n	8005846 <__sflush_r+0x7a>
 8005842:	682b      	ldr	r3, [r5, #0]
 8005844:	b903      	cbnz	r3, 8005848 <__sflush_r+0x7c>
 8005846:	6560      	str	r0, [r4, #84]	; 0x54
 8005848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800584a:	602f      	str	r7, [r5, #0]
 800584c:	2900      	cmp	r1, #0
 800584e:	d0ca      	beq.n	80057e6 <__sflush_r+0x1a>
 8005850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005854:	4299      	cmp	r1, r3
 8005856:	d002      	beq.n	800585e <__sflush_r+0x92>
 8005858:	4628      	mov	r0, r5
 800585a:	f000 f9d7 	bl	8005c0c <_free_r>
 800585e:	2000      	movs	r0, #0
 8005860:	6360      	str	r0, [r4, #52]	; 0x34
 8005862:	e7c1      	b.n	80057e8 <__sflush_r+0x1c>
 8005864:	6a21      	ldr	r1, [r4, #32]
 8005866:	2301      	movs	r3, #1
 8005868:	4628      	mov	r0, r5
 800586a:	47b0      	blx	r6
 800586c:	1c41      	adds	r1, r0, #1
 800586e:	d1c7      	bne.n	8005800 <__sflush_r+0x34>
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0c4      	beq.n	8005800 <__sflush_r+0x34>
 8005876:	2b1d      	cmp	r3, #29
 8005878:	d001      	beq.n	800587e <__sflush_r+0xb2>
 800587a:	2b16      	cmp	r3, #22
 800587c:	d101      	bne.n	8005882 <__sflush_r+0xb6>
 800587e:	602f      	str	r7, [r5, #0]
 8005880:	e7b1      	b.n	80057e6 <__sflush_r+0x1a>
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005888:	81a3      	strh	r3, [r4, #12]
 800588a:	e7ad      	b.n	80057e8 <__sflush_r+0x1c>
 800588c:	690f      	ldr	r7, [r1, #16]
 800588e:	2f00      	cmp	r7, #0
 8005890:	d0a9      	beq.n	80057e6 <__sflush_r+0x1a>
 8005892:	0793      	lsls	r3, r2, #30
 8005894:	680e      	ldr	r6, [r1, #0]
 8005896:	bf08      	it	eq
 8005898:	694b      	ldreq	r3, [r1, #20]
 800589a:	600f      	str	r7, [r1, #0]
 800589c:	bf18      	it	ne
 800589e:	2300      	movne	r3, #0
 80058a0:	eba6 0807 	sub.w	r8, r6, r7
 80058a4:	608b      	str	r3, [r1, #8]
 80058a6:	f1b8 0f00 	cmp.w	r8, #0
 80058aa:	dd9c      	ble.n	80057e6 <__sflush_r+0x1a>
 80058ac:	6a21      	ldr	r1, [r4, #32]
 80058ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058b0:	4643      	mov	r3, r8
 80058b2:	463a      	mov	r2, r7
 80058b4:	4628      	mov	r0, r5
 80058b6:	47b0      	blx	r6
 80058b8:	2800      	cmp	r0, #0
 80058ba:	dc06      	bgt.n	80058ca <__sflush_r+0xfe>
 80058bc:	89a3      	ldrh	r3, [r4, #12]
 80058be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c2:	81a3      	strh	r3, [r4, #12]
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295
 80058c8:	e78e      	b.n	80057e8 <__sflush_r+0x1c>
 80058ca:	4407      	add	r7, r0
 80058cc:	eba8 0800 	sub.w	r8, r8, r0
 80058d0:	e7e9      	b.n	80058a6 <__sflush_r+0xda>
 80058d2:	bf00      	nop
 80058d4:	20400001 	.word	0x20400001

080058d8 <_fflush_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	690b      	ldr	r3, [r1, #16]
 80058dc:	4605      	mov	r5, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	b913      	cbnz	r3, 80058e8 <_fflush_r+0x10>
 80058e2:	2500      	movs	r5, #0
 80058e4:	4628      	mov	r0, r5
 80058e6:	bd38      	pop	{r3, r4, r5, pc}
 80058e8:	b118      	cbz	r0, 80058f2 <_fflush_r+0x1a>
 80058ea:	6983      	ldr	r3, [r0, #24]
 80058ec:	b90b      	cbnz	r3, 80058f2 <_fflush_r+0x1a>
 80058ee:	f000 f887 	bl	8005a00 <__sinit>
 80058f2:	4b14      	ldr	r3, [pc, #80]	; (8005944 <_fflush_r+0x6c>)
 80058f4:	429c      	cmp	r4, r3
 80058f6:	d11b      	bne.n	8005930 <_fflush_r+0x58>
 80058f8:	686c      	ldr	r4, [r5, #4]
 80058fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0ef      	beq.n	80058e2 <_fflush_r+0xa>
 8005902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005904:	07d0      	lsls	r0, r2, #31
 8005906:	d404      	bmi.n	8005912 <_fflush_r+0x3a>
 8005908:	0599      	lsls	r1, r3, #22
 800590a:	d402      	bmi.n	8005912 <_fflush_r+0x3a>
 800590c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800590e:	f000 f915 	bl	8005b3c <__retarget_lock_acquire_recursive>
 8005912:	4628      	mov	r0, r5
 8005914:	4621      	mov	r1, r4
 8005916:	f7ff ff59 	bl	80057cc <__sflush_r>
 800591a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800591c:	07da      	lsls	r2, r3, #31
 800591e:	4605      	mov	r5, r0
 8005920:	d4e0      	bmi.n	80058e4 <_fflush_r+0xc>
 8005922:	89a3      	ldrh	r3, [r4, #12]
 8005924:	059b      	lsls	r3, r3, #22
 8005926:	d4dd      	bmi.n	80058e4 <_fflush_r+0xc>
 8005928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800592a:	f000 f908 	bl	8005b3e <__retarget_lock_release_recursive>
 800592e:	e7d9      	b.n	80058e4 <_fflush_r+0xc>
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <_fflush_r+0x70>)
 8005932:	429c      	cmp	r4, r3
 8005934:	d101      	bne.n	800593a <_fflush_r+0x62>
 8005936:	68ac      	ldr	r4, [r5, #8]
 8005938:	e7df      	b.n	80058fa <_fflush_r+0x22>
 800593a:	4b04      	ldr	r3, [pc, #16]	; (800594c <_fflush_r+0x74>)
 800593c:	429c      	cmp	r4, r3
 800593e:	bf08      	it	eq
 8005940:	68ec      	ldreq	r4, [r5, #12]
 8005942:	e7da      	b.n	80058fa <_fflush_r+0x22>
 8005944:	08006030 	.word	0x08006030
 8005948:	08006050 	.word	0x08006050
 800594c:	08006010 	.word	0x08006010

08005950 <std>:
 8005950:	2300      	movs	r3, #0
 8005952:	b510      	push	{r4, lr}
 8005954:	4604      	mov	r4, r0
 8005956:	e9c0 3300 	strd	r3, r3, [r0]
 800595a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800595e:	6083      	str	r3, [r0, #8]
 8005960:	8181      	strh	r1, [r0, #12]
 8005962:	6643      	str	r3, [r0, #100]	; 0x64
 8005964:	81c2      	strh	r2, [r0, #14]
 8005966:	6183      	str	r3, [r0, #24]
 8005968:	4619      	mov	r1, r3
 800596a:	2208      	movs	r2, #8
 800596c:	305c      	adds	r0, #92	; 0x5c
 800596e:	f7ff fdef 	bl	8005550 <memset>
 8005972:	4b05      	ldr	r3, [pc, #20]	; (8005988 <std+0x38>)
 8005974:	6263      	str	r3, [r4, #36]	; 0x24
 8005976:	4b05      	ldr	r3, [pc, #20]	; (800598c <std+0x3c>)
 8005978:	62a3      	str	r3, [r4, #40]	; 0x28
 800597a:	4b05      	ldr	r3, [pc, #20]	; (8005990 <std+0x40>)
 800597c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800597e:	4b05      	ldr	r3, [pc, #20]	; (8005994 <std+0x44>)
 8005980:	6224      	str	r4, [r4, #32]
 8005982:	6323      	str	r3, [r4, #48]	; 0x30
 8005984:	bd10      	pop	{r4, pc}
 8005986:	bf00      	nop
 8005988:	08005ded 	.word	0x08005ded
 800598c:	08005e0f 	.word	0x08005e0f
 8005990:	08005e47 	.word	0x08005e47
 8005994:	08005e6b 	.word	0x08005e6b

08005998 <_cleanup_r>:
 8005998:	4901      	ldr	r1, [pc, #4]	; (80059a0 <_cleanup_r+0x8>)
 800599a:	f000 b8af 	b.w	8005afc <_fwalk_reent>
 800599e:	bf00      	nop
 80059a0:	080058d9 	.word	0x080058d9

080059a4 <__sfmoreglue>:
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	2268      	movs	r2, #104	; 0x68
 80059a8:	1e4d      	subs	r5, r1, #1
 80059aa:	4355      	muls	r5, r2
 80059ac:	460e      	mov	r6, r1
 80059ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059b2:	f000 f997 	bl	8005ce4 <_malloc_r>
 80059b6:	4604      	mov	r4, r0
 80059b8:	b140      	cbz	r0, 80059cc <__sfmoreglue+0x28>
 80059ba:	2100      	movs	r1, #0
 80059bc:	e9c0 1600 	strd	r1, r6, [r0]
 80059c0:	300c      	adds	r0, #12
 80059c2:	60a0      	str	r0, [r4, #8]
 80059c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059c8:	f7ff fdc2 	bl	8005550 <memset>
 80059cc:	4620      	mov	r0, r4
 80059ce:	bd70      	pop	{r4, r5, r6, pc}

080059d0 <__sfp_lock_acquire>:
 80059d0:	4801      	ldr	r0, [pc, #4]	; (80059d8 <__sfp_lock_acquire+0x8>)
 80059d2:	f000 b8b3 	b.w	8005b3c <__retarget_lock_acquire_recursive>
 80059d6:	bf00      	nop
 80059d8:	2000032d 	.word	0x2000032d

080059dc <__sfp_lock_release>:
 80059dc:	4801      	ldr	r0, [pc, #4]	; (80059e4 <__sfp_lock_release+0x8>)
 80059de:	f000 b8ae 	b.w	8005b3e <__retarget_lock_release_recursive>
 80059e2:	bf00      	nop
 80059e4:	2000032d 	.word	0x2000032d

080059e8 <__sinit_lock_acquire>:
 80059e8:	4801      	ldr	r0, [pc, #4]	; (80059f0 <__sinit_lock_acquire+0x8>)
 80059ea:	f000 b8a7 	b.w	8005b3c <__retarget_lock_acquire_recursive>
 80059ee:	bf00      	nop
 80059f0:	2000032e 	.word	0x2000032e

080059f4 <__sinit_lock_release>:
 80059f4:	4801      	ldr	r0, [pc, #4]	; (80059fc <__sinit_lock_release+0x8>)
 80059f6:	f000 b8a2 	b.w	8005b3e <__retarget_lock_release_recursive>
 80059fa:	bf00      	nop
 80059fc:	2000032e 	.word	0x2000032e

08005a00 <__sinit>:
 8005a00:	b510      	push	{r4, lr}
 8005a02:	4604      	mov	r4, r0
 8005a04:	f7ff fff0 	bl	80059e8 <__sinit_lock_acquire>
 8005a08:	69a3      	ldr	r3, [r4, #24]
 8005a0a:	b11b      	cbz	r3, 8005a14 <__sinit+0x14>
 8005a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a10:	f7ff bff0 	b.w	80059f4 <__sinit_lock_release>
 8005a14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a18:	6523      	str	r3, [r4, #80]	; 0x50
 8005a1a:	4b13      	ldr	r3, [pc, #76]	; (8005a68 <__sinit+0x68>)
 8005a1c:	4a13      	ldr	r2, [pc, #76]	; (8005a6c <__sinit+0x6c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a22:	42a3      	cmp	r3, r4
 8005a24:	bf04      	itt	eq
 8005a26:	2301      	moveq	r3, #1
 8005a28:	61a3      	streq	r3, [r4, #24]
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f000 f820 	bl	8005a70 <__sfp>
 8005a30:	6060      	str	r0, [r4, #4]
 8005a32:	4620      	mov	r0, r4
 8005a34:	f000 f81c 	bl	8005a70 <__sfp>
 8005a38:	60a0      	str	r0, [r4, #8]
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f000 f818 	bl	8005a70 <__sfp>
 8005a40:	2200      	movs	r2, #0
 8005a42:	60e0      	str	r0, [r4, #12]
 8005a44:	2104      	movs	r1, #4
 8005a46:	6860      	ldr	r0, [r4, #4]
 8005a48:	f7ff ff82 	bl	8005950 <std>
 8005a4c:	68a0      	ldr	r0, [r4, #8]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	2109      	movs	r1, #9
 8005a52:	f7ff ff7d 	bl	8005950 <std>
 8005a56:	68e0      	ldr	r0, [r4, #12]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	2112      	movs	r1, #18
 8005a5c:	f7ff ff78 	bl	8005950 <std>
 8005a60:	2301      	movs	r3, #1
 8005a62:	61a3      	str	r3, [r4, #24]
 8005a64:	e7d2      	b.n	8005a0c <__sinit+0xc>
 8005a66:	bf00      	nop
 8005a68:	0800600c 	.word	0x0800600c
 8005a6c:	08005999 	.word	0x08005999

08005a70 <__sfp>:
 8005a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a72:	4607      	mov	r7, r0
 8005a74:	f7ff ffac 	bl	80059d0 <__sfp_lock_acquire>
 8005a78:	4b1e      	ldr	r3, [pc, #120]	; (8005af4 <__sfp+0x84>)
 8005a7a:	681e      	ldr	r6, [r3, #0]
 8005a7c:	69b3      	ldr	r3, [r6, #24]
 8005a7e:	b913      	cbnz	r3, 8005a86 <__sfp+0x16>
 8005a80:	4630      	mov	r0, r6
 8005a82:	f7ff ffbd 	bl	8005a00 <__sinit>
 8005a86:	3648      	adds	r6, #72	; 0x48
 8005a88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	d503      	bpl.n	8005a98 <__sfp+0x28>
 8005a90:	6833      	ldr	r3, [r6, #0]
 8005a92:	b30b      	cbz	r3, 8005ad8 <__sfp+0x68>
 8005a94:	6836      	ldr	r6, [r6, #0]
 8005a96:	e7f7      	b.n	8005a88 <__sfp+0x18>
 8005a98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a9c:	b9d5      	cbnz	r5, 8005ad4 <__sfp+0x64>
 8005a9e:	4b16      	ldr	r3, [pc, #88]	; (8005af8 <__sfp+0x88>)
 8005aa0:	60e3      	str	r3, [r4, #12]
 8005aa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005aa6:	6665      	str	r5, [r4, #100]	; 0x64
 8005aa8:	f000 f847 	bl	8005b3a <__retarget_lock_init_recursive>
 8005aac:	f7ff ff96 	bl	80059dc <__sfp_lock_release>
 8005ab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ab8:	6025      	str	r5, [r4, #0]
 8005aba:	61a5      	str	r5, [r4, #24]
 8005abc:	2208      	movs	r2, #8
 8005abe:	4629      	mov	r1, r5
 8005ac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ac4:	f7ff fd44 	bl	8005550 <memset>
 8005ac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005acc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ad4:	3468      	adds	r4, #104	; 0x68
 8005ad6:	e7d9      	b.n	8005a8c <__sfp+0x1c>
 8005ad8:	2104      	movs	r1, #4
 8005ada:	4638      	mov	r0, r7
 8005adc:	f7ff ff62 	bl	80059a4 <__sfmoreglue>
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	6030      	str	r0, [r6, #0]
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d1d5      	bne.n	8005a94 <__sfp+0x24>
 8005ae8:	f7ff ff78 	bl	80059dc <__sfp_lock_release>
 8005aec:	230c      	movs	r3, #12
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	e7ee      	b.n	8005ad0 <__sfp+0x60>
 8005af2:	bf00      	nop
 8005af4:	0800600c 	.word	0x0800600c
 8005af8:	ffff0001 	.word	0xffff0001

08005afc <_fwalk_reent>:
 8005afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b00:	4606      	mov	r6, r0
 8005b02:	4688      	mov	r8, r1
 8005b04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b08:	2700      	movs	r7, #0
 8005b0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b0e:	f1b9 0901 	subs.w	r9, r9, #1
 8005b12:	d505      	bpl.n	8005b20 <_fwalk_reent+0x24>
 8005b14:	6824      	ldr	r4, [r4, #0]
 8005b16:	2c00      	cmp	r4, #0
 8005b18:	d1f7      	bne.n	8005b0a <_fwalk_reent+0xe>
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b20:	89ab      	ldrh	r3, [r5, #12]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d907      	bls.n	8005b36 <_fwalk_reent+0x3a>
 8005b26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	d003      	beq.n	8005b36 <_fwalk_reent+0x3a>
 8005b2e:	4629      	mov	r1, r5
 8005b30:	4630      	mov	r0, r6
 8005b32:	47c0      	blx	r8
 8005b34:	4307      	orrs	r7, r0
 8005b36:	3568      	adds	r5, #104	; 0x68
 8005b38:	e7e9      	b.n	8005b0e <_fwalk_reent+0x12>

08005b3a <__retarget_lock_init_recursive>:
 8005b3a:	4770      	bx	lr

08005b3c <__retarget_lock_acquire_recursive>:
 8005b3c:	4770      	bx	lr

08005b3e <__retarget_lock_release_recursive>:
 8005b3e:	4770      	bx	lr

08005b40 <__swhatbuf_r>:
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	460e      	mov	r6, r1
 8005b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b48:	2900      	cmp	r1, #0
 8005b4a:	b096      	sub	sp, #88	; 0x58
 8005b4c:	4614      	mov	r4, r2
 8005b4e:	461d      	mov	r5, r3
 8005b50:	da08      	bge.n	8005b64 <__swhatbuf_r+0x24>
 8005b52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	602a      	str	r2, [r5, #0]
 8005b5a:	061a      	lsls	r2, r3, #24
 8005b5c:	d410      	bmi.n	8005b80 <__swhatbuf_r+0x40>
 8005b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b62:	e00e      	b.n	8005b82 <__swhatbuf_r+0x42>
 8005b64:	466a      	mov	r2, sp
 8005b66:	f000 f9a7 	bl	8005eb8 <_fstat_r>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	dbf1      	blt.n	8005b52 <__swhatbuf_r+0x12>
 8005b6e:	9a01      	ldr	r2, [sp, #4]
 8005b70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b78:	425a      	negs	r2, r3
 8005b7a:	415a      	adcs	r2, r3
 8005b7c:	602a      	str	r2, [r5, #0]
 8005b7e:	e7ee      	b.n	8005b5e <__swhatbuf_r+0x1e>
 8005b80:	2340      	movs	r3, #64	; 0x40
 8005b82:	2000      	movs	r0, #0
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	b016      	add	sp, #88	; 0x58
 8005b88:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b8c <__smakebuf_r>:
 8005b8c:	898b      	ldrh	r3, [r1, #12]
 8005b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b90:	079d      	lsls	r5, r3, #30
 8005b92:	4606      	mov	r6, r0
 8005b94:	460c      	mov	r4, r1
 8005b96:	d507      	bpl.n	8005ba8 <__smakebuf_r+0x1c>
 8005b98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	6123      	str	r3, [r4, #16]
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	6163      	str	r3, [r4, #20]
 8005ba4:	b002      	add	sp, #8
 8005ba6:	bd70      	pop	{r4, r5, r6, pc}
 8005ba8:	ab01      	add	r3, sp, #4
 8005baa:	466a      	mov	r2, sp
 8005bac:	f7ff ffc8 	bl	8005b40 <__swhatbuf_r>
 8005bb0:	9900      	ldr	r1, [sp, #0]
 8005bb2:	4605      	mov	r5, r0
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f000 f895 	bl	8005ce4 <_malloc_r>
 8005bba:	b948      	cbnz	r0, 8005bd0 <__smakebuf_r+0x44>
 8005bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc0:	059a      	lsls	r2, r3, #22
 8005bc2:	d4ef      	bmi.n	8005ba4 <__smakebuf_r+0x18>
 8005bc4:	f023 0303 	bic.w	r3, r3, #3
 8005bc8:	f043 0302 	orr.w	r3, r3, #2
 8005bcc:	81a3      	strh	r3, [r4, #12]
 8005bce:	e7e3      	b.n	8005b98 <__smakebuf_r+0xc>
 8005bd0:	4b0d      	ldr	r3, [pc, #52]	; (8005c08 <__smakebuf_r+0x7c>)
 8005bd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	6020      	str	r0, [r4, #0]
 8005bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	9b00      	ldr	r3, [sp, #0]
 8005be0:	6163      	str	r3, [r4, #20]
 8005be2:	9b01      	ldr	r3, [sp, #4]
 8005be4:	6120      	str	r0, [r4, #16]
 8005be6:	b15b      	cbz	r3, 8005c00 <__smakebuf_r+0x74>
 8005be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bec:	4630      	mov	r0, r6
 8005bee:	f000 f975 	bl	8005edc <_isatty_r>
 8005bf2:	b128      	cbz	r0, 8005c00 <__smakebuf_r+0x74>
 8005bf4:	89a3      	ldrh	r3, [r4, #12]
 8005bf6:	f023 0303 	bic.w	r3, r3, #3
 8005bfa:	f043 0301 	orr.w	r3, r3, #1
 8005bfe:	81a3      	strh	r3, [r4, #12]
 8005c00:	89a0      	ldrh	r0, [r4, #12]
 8005c02:	4305      	orrs	r5, r0
 8005c04:	81a5      	strh	r5, [r4, #12]
 8005c06:	e7cd      	b.n	8005ba4 <__smakebuf_r+0x18>
 8005c08:	08005999 	.word	0x08005999

08005c0c <_free_r>:
 8005c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c0e:	2900      	cmp	r1, #0
 8005c10:	d044      	beq.n	8005c9c <_free_r+0x90>
 8005c12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c16:	9001      	str	r0, [sp, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f1a1 0404 	sub.w	r4, r1, #4
 8005c1e:	bfb8      	it	lt
 8005c20:	18e4      	addlt	r4, r4, r3
 8005c22:	f000 f97d 	bl	8005f20 <__malloc_lock>
 8005c26:	4a1e      	ldr	r2, [pc, #120]	; (8005ca0 <_free_r+0x94>)
 8005c28:	9801      	ldr	r0, [sp, #4]
 8005c2a:	6813      	ldr	r3, [r2, #0]
 8005c2c:	b933      	cbnz	r3, 8005c3c <_free_r+0x30>
 8005c2e:	6063      	str	r3, [r4, #4]
 8005c30:	6014      	str	r4, [r2, #0]
 8005c32:	b003      	add	sp, #12
 8005c34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c38:	f000 b978 	b.w	8005f2c <__malloc_unlock>
 8005c3c:	42a3      	cmp	r3, r4
 8005c3e:	d908      	bls.n	8005c52 <_free_r+0x46>
 8005c40:	6825      	ldr	r5, [r4, #0]
 8005c42:	1961      	adds	r1, r4, r5
 8005c44:	428b      	cmp	r3, r1
 8005c46:	bf01      	itttt	eq
 8005c48:	6819      	ldreq	r1, [r3, #0]
 8005c4a:	685b      	ldreq	r3, [r3, #4]
 8005c4c:	1949      	addeq	r1, r1, r5
 8005c4e:	6021      	streq	r1, [r4, #0]
 8005c50:	e7ed      	b.n	8005c2e <_free_r+0x22>
 8005c52:	461a      	mov	r2, r3
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	b10b      	cbz	r3, 8005c5c <_free_r+0x50>
 8005c58:	42a3      	cmp	r3, r4
 8005c5a:	d9fa      	bls.n	8005c52 <_free_r+0x46>
 8005c5c:	6811      	ldr	r1, [r2, #0]
 8005c5e:	1855      	adds	r5, r2, r1
 8005c60:	42a5      	cmp	r5, r4
 8005c62:	d10b      	bne.n	8005c7c <_free_r+0x70>
 8005c64:	6824      	ldr	r4, [r4, #0]
 8005c66:	4421      	add	r1, r4
 8005c68:	1854      	adds	r4, r2, r1
 8005c6a:	42a3      	cmp	r3, r4
 8005c6c:	6011      	str	r1, [r2, #0]
 8005c6e:	d1e0      	bne.n	8005c32 <_free_r+0x26>
 8005c70:	681c      	ldr	r4, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	6053      	str	r3, [r2, #4]
 8005c76:	4421      	add	r1, r4
 8005c78:	6011      	str	r1, [r2, #0]
 8005c7a:	e7da      	b.n	8005c32 <_free_r+0x26>
 8005c7c:	d902      	bls.n	8005c84 <_free_r+0x78>
 8005c7e:	230c      	movs	r3, #12
 8005c80:	6003      	str	r3, [r0, #0]
 8005c82:	e7d6      	b.n	8005c32 <_free_r+0x26>
 8005c84:	6825      	ldr	r5, [r4, #0]
 8005c86:	1961      	adds	r1, r4, r5
 8005c88:	428b      	cmp	r3, r1
 8005c8a:	bf04      	itt	eq
 8005c8c:	6819      	ldreq	r1, [r3, #0]
 8005c8e:	685b      	ldreq	r3, [r3, #4]
 8005c90:	6063      	str	r3, [r4, #4]
 8005c92:	bf04      	itt	eq
 8005c94:	1949      	addeq	r1, r1, r5
 8005c96:	6021      	streq	r1, [r4, #0]
 8005c98:	6054      	str	r4, [r2, #4]
 8005c9a:	e7ca      	b.n	8005c32 <_free_r+0x26>
 8005c9c:	b003      	add	sp, #12
 8005c9e:	bd30      	pop	{r4, r5, pc}
 8005ca0:	20000330 	.word	0x20000330

08005ca4 <sbrk_aligned>:
 8005ca4:	b570      	push	{r4, r5, r6, lr}
 8005ca6:	4e0e      	ldr	r6, [pc, #56]	; (8005ce0 <sbrk_aligned+0x3c>)
 8005ca8:	460c      	mov	r4, r1
 8005caa:	6831      	ldr	r1, [r6, #0]
 8005cac:	4605      	mov	r5, r0
 8005cae:	b911      	cbnz	r1, 8005cb6 <sbrk_aligned+0x12>
 8005cb0:	f000 f88c 	bl	8005dcc <_sbrk_r>
 8005cb4:	6030      	str	r0, [r6, #0]
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	4628      	mov	r0, r5
 8005cba:	f000 f887 	bl	8005dcc <_sbrk_r>
 8005cbe:	1c43      	adds	r3, r0, #1
 8005cc0:	d00a      	beq.n	8005cd8 <sbrk_aligned+0x34>
 8005cc2:	1cc4      	adds	r4, r0, #3
 8005cc4:	f024 0403 	bic.w	r4, r4, #3
 8005cc8:	42a0      	cmp	r0, r4
 8005cca:	d007      	beq.n	8005cdc <sbrk_aligned+0x38>
 8005ccc:	1a21      	subs	r1, r4, r0
 8005cce:	4628      	mov	r0, r5
 8005cd0:	f000 f87c 	bl	8005dcc <_sbrk_r>
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d101      	bne.n	8005cdc <sbrk_aligned+0x38>
 8005cd8:	f04f 34ff 	mov.w	r4, #4294967295
 8005cdc:	4620      	mov	r0, r4
 8005cde:	bd70      	pop	{r4, r5, r6, pc}
 8005ce0:	20000334 	.word	0x20000334

08005ce4 <_malloc_r>:
 8005ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce8:	1ccd      	adds	r5, r1, #3
 8005cea:	f025 0503 	bic.w	r5, r5, #3
 8005cee:	3508      	adds	r5, #8
 8005cf0:	2d0c      	cmp	r5, #12
 8005cf2:	bf38      	it	cc
 8005cf4:	250c      	movcc	r5, #12
 8005cf6:	2d00      	cmp	r5, #0
 8005cf8:	4607      	mov	r7, r0
 8005cfa:	db01      	blt.n	8005d00 <_malloc_r+0x1c>
 8005cfc:	42a9      	cmp	r1, r5
 8005cfe:	d905      	bls.n	8005d0c <_malloc_r+0x28>
 8005d00:	230c      	movs	r3, #12
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	2600      	movs	r6, #0
 8005d06:	4630      	mov	r0, r6
 8005d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d0c:	4e2e      	ldr	r6, [pc, #184]	; (8005dc8 <_malloc_r+0xe4>)
 8005d0e:	f000 f907 	bl	8005f20 <__malloc_lock>
 8005d12:	6833      	ldr	r3, [r6, #0]
 8005d14:	461c      	mov	r4, r3
 8005d16:	bb34      	cbnz	r4, 8005d66 <_malloc_r+0x82>
 8005d18:	4629      	mov	r1, r5
 8005d1a:	4638      	mov	r0, r7
 8005d1c:	f7ff ffc2 	bl	8005ca4 <sbrk_aligned>
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	4604      	mov	r4, r0
 8005d24:	d14d      	bne.n	8005dc2 <_malloc_r+0xde>
 8005d26:	6834      	ldr	r4, [r6, #0]
 8005d28:	4626      	mov	r6, r4
 8005d2a:	2e00      	cmp	r6, #0
 8005d2c:	d140      	bne.n	8005db0 <_malloc_r+0xcc>
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	4631      	mov	r1, r6
 8005d32:	4638      	mov	r0, r7
 8005d34:	eb04 0803 	add.w	r8, r4, r3
 8005d38:	f000 f848 	bl	8005dcc <_sbrk_r>
 8005d3c:	4580      	cmp	r8, r0
 8005d3e:	d13a      	bne.n	8005db6 <_malloc_r+0xd2>
 8005d40:	6821      	ldr	r1, [r4, #0]
 8005d42:	3503      	adds	r5, #3
 8005d44:	1a6d      	subs	r5, r5, r1
 8005d46:	f025 0503 	bic.w	r5, r5, #3
 8005d4a:	3508      	adds	r5, #8
 8005d4c:	2d0c      	cmp	r5, #12
 8005d4e:	bf38      	it	cc
 8005d50:	250c      	movcc	r5, #12
 8005d52:	4629      	mov	r1, r5
 8005d54:	4638      	mov	r0, r7
 8005d56:	f7ff ffa5 	bl	8005ca4 <sbrk_aligned>
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	d02b      	beq.n	8005db6 <_malloc_r+0xd2>
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	442b      	add	r3, r5
 8005d62:	6023      	str	r3, [r4, #0]
 8005d64:	e00e      	b.n	8005d84 <_malloc_r+0xa0>
 8005d66:	6822      	ldr	r2, [r4, #0]
 8005d68:	1b52      	subs	r2, r2, r5
 8005d6a:	d41e      	bmi.n	8005daa <_malloc_r+0xc6>
 8005d6c:	2a0b      	cmp	r2, #11
 8005d6e:	d916      	bls.n	8005d9e <_malloc_r+0xba>
 8005d70:	1961      	adds	r1, r4, r5
 8005d72:	42a3      	cmp	r3, r4
 8005d74:	6025      	str	r5, [r4, #0]
 8005d76:	bf18      	it	ne
 8005d78:	6059      	strne	r1, [r3, #4]
 8005d7a:	6863      	ldr	r3, [r4, #4]
 8005d7c:	bf08      	it	eq
 8005d7e:	6031      	streq	r1, [r6, #0]
 8005d80:	5162      	str	r2, [r4, r5]
 8005d82:	604b      	str	r3, [r1, #4]
 8005d84:	4638      	mov	r0, r7
 8005d86:	f104 060b 	add.w	r6, r4, #11
 8005d8a:	f000 f8cf 	bl	8005f2c <__malloc_unlock>
 8005d8e:	f026 0607 	bic.w	r6, r6, #7
 8005d92:	1d23      	adds	r3, r4, #4
 8005d94:	1af2      	subs	r2, r6, r3
 8005d96:	d0b6      	beq.n	8005d06 <_malloc_r+0x22>
 8005d98:	1b9b      	subs	r3, r3, r6
 8005d9a:	50a3      	str	r3, [r4, r2]
 8005d9c:	e7b3      	b.n	8005d06 <_malloc_r+0x22>
 8005d9e:	6862      	ldr	r2, [r4, #4]
 8005da0:	42a3      	cmp	r3, r4
 8005da2:	bf0c      	ite	eq
 8005da4:	6032      	streq	r2, [r6, #0]
 8005da6:	605a      	strne	r2, [r3, #4]
 8005da8:	e7ec      	b.n	8005d84 <_malloc_r+0xa0>
 8005daa:	4623      	mov	r3, r4
 8005dac:	6864      	ldr	r4, [r4, #4]
 8005dae:	e7b2      	b.n	8005d16 <_malloc_r+0x32>
 8005db0:	4634      	mov	r4, r6
 8005db2:	6876      	ldr	r6, [r6, #4]
 8005db4:	e7b9      	b.n	8005d2a <_malloc_r+0x46>
 8005db6:	230c      	movs	r3, #12
 8005db8:	603b      	str	r3, [r7, #0]
 8005dba:	4638      	mov	r0, r7
 8005dbc:	f000 f8b6 	bl	8005f2c <__malloc_unlock>
 8005dc0:	e7a1      	b.n	8005d06 <_malloc_r+0x22>
 8005dc2:	6025      	str	r5, [r4, #0]
 8005dc4:	e7de      	b.n	8005d84 <_malloc_r+0xa0>
 8005dc6:	bf00      	nop
 8005dc8:	20000330 	.word	0x20000330

08005dcc <_sbrk_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4d06      	ldr	r5, [pc, #24]	; (8005de8 <_sbrk_r+0x1c>)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	602b      	str	r3, [r5, #0]
 8005dd8:	f7fb f9e2 	bl	80011a0 <_sbrk>
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	d102      	bne.n	8005de6 <_sbrk_r+0x1a>
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	b103      	cbz	r3, 8005de6 <_sbrk_r+0x1a>
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	20000338 	.word	0x20000338

08005dec <__sread>:
 8005dec:	b510      	push	{r4, lr}
 8005dee:	460c      	mov	r4, r1
 8005df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005df4:	f000 f8a0 	bl	8005f38 <_read_r>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	bfab      	itete	ge
 8005dfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005dfe:	89a3      	ldrhlt	r3, [r4, #12]
 8005e00:	181b      	addge	r3, r3, r0
 8005e02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e06:	bfac      	ite	ge
 8005e08:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e0a:	81a3      	strhlt	r3, [r4, #12]
 8005e0c:	bd10      	pop	{r4, pc}

08005e0e <__swrite>:
 8005e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e12:	461f      	mov	r7, r3
 8005e14:	898b      	ldrh	r3, [r1, #12]
 8005e16:	05db      	lsls	r3, r3, #23
 8005e18:	4605      	mov	r5, r0
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	4616      	mov	r6, r2
 8005e1e:	d505      	bpl.n	8005e2c <__swrite+0x1e>
 8005e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e24:	2302      	movs	r3, #2
 8005e26:	2200      	movs	r2, #0
 8005e28:	f000 f868 	bl	8005efc <_lseek_r>
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e36:	81a3      	strh	r3, [r4, #12]
 8005e38:	4632      	mov	r2, r6
 8005e3a:	463b      	mov	r3, r7
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e42:	f000 b817 	b.w	8005e74 <_write_r>

08005e46 <__sseek>:
 8005e46:	b510      	push	{r4, lr}
 8005e48:	460c      	mov	r4, r1
 8005e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e4e:	f000 f855 	bl	8005efc <_lseek_r>
 8005e52:	1c43      	adds	r3, r0, #1
 8005e54:	89a3      	ldrh	r3, [r4, #12]
 8005e56:	bf15      	itete	ne
 8005e58:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e62:	81a3      	strheq	r3, [r4, #12]
 8005e64:	bf18      	it	ne
 8005e66:	81a3      	strhne	r3, [r4, #12]
 8005e68:	bd10      	pop	{r4, pc}

08005e6a <__sclose>:
 8005e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e6e:	f000 b813 	b.w	8005e98 <_close_r>
	...

08005e74 <_write_r>:
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	4d07      	ldr	r5, [pc, #28]	; (8005e94 <_write_r+0x20>)
 8005e78:	4604      	mov	r4, r0
 8005e7a:	4608      	mov	r0, r1
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	2200      	movs	r2, #0
 8005e80:	602a      	str	r2, [r5, #0]
 8005e82:	461a      	mov	r2, r3
 8005e84:	f7fa fb22 	bl	80004cc <_write>
 8005e88:	1c43      	adds	r3, r0, #1
 8005e8a:	d102      	bne.n	8005e92 <_write_r+0x1e>
 8005e8c:	682b      	ldr	r3, [r5, #0]
 8005e8e:	b103      	cbz	r3, 8005e92 <_write_r+0x1e>
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	bd38      	pop	{r3, r4, r5, pc}
 8005e94:	20000338 	.word	0x20000338

08005e98 <_close_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4d06      	ldr	r5, [pc, #24]	; (8005eb4 <_close_r+0x1c>)
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	602b      	str	r3, [r5, #0]
 8005ea4:	f7fb f947 	bl	8001136 <_close>
 8005ea8:	1c43      	adds	r3, r0, #1
 8005eaa:	d102      	bne.n	8005eb2 <_close_r+0x1a>
 8005eac:	682b      	ldr	r3, [r5, #0]
 8005eae:	b103      	cbz	r3, 8005eb2 <_close_r+0x1a>
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	bd38      	pop	{r3, r4, r5, pc}
 8005eb4:	20000338 	.word	0x20000338

08005eb8 <_fstat_r>:
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	4d07      	ldr	r5, [pc, #28]	; (8005ed8 <_fstat_r+0x20>)
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	4604      	mov	r4, r0
 8005ec0:	4608      	mov	r0, r1
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	602b      	str	r3, [r5, #0]
 8005ec6:	f7fb f942 	bl	800114e <_fstat>
 8005eca:	1c43      	adds	r3, r0, #1
 8005ecc:	d102      	bne.n	8005ed4 <_fstat_r+0x1c>
 8005ece:	682b      	ldr	r3, [r5, #0]
 8005ed0:	b103      	cbz	r3, 8005ed4 <_fstat_r+0x1c>
 8005ed2:	6023      	str	r3, [r4, #0]
 8005ed4:	bd38      	pop	{r3, r4, r5, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20000338 	.word	0x20000338

08005edc <_isatty_r>:
 8005edc:	b538      	push	{r3, r4, r5, lr}
 8005ede:	4d06      	ldr	r5, [pc, #24]	; (8005ef8 <_isatty_r+0x1c>)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	602b      	str	r3, [r5, #0]
 8005ee8:	f7fb f941 	bl	800116e <_isatty>
 8005eec:	1c43      	adds	r3, r0, #1
 8005eee:	d102      	bne.n	8005ef6 <_isatty_r+0x1a>
 8005ef0:	682b      	ldr	r3, [r5, #0]
 8005ef2:	b103      	cbz	r3, 8005ef6 <_isatty_r+0x1a>
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	bd38      	pop	{r3, r4, r5, pc}
 8005ef8:	20000338 	.word	0x20000338

08005efc <_lseek_r>:
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	4d07      	ldr	r5, [pc, #28]	; (8005f1c <_lseek_r+0x20>)
 8005f00:	4604      	mov	r4, r0
 8005f02:	4608      	mov	r0, r1
 8005f04:	4611      	mov	r1, r2
 8005f06:	2200      	movs	r2, #0
 8005f08:	602a      	str	r2, [r5, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f7fb f93a 	bl	8001184 <_lseek>
 8005f10:	1c43      	adds	r3, r0, #1
 8005f12:	d102      	bne.n	8005f1a <_lseek_r+0x1e>
 8005f14:	682b      	ldr	r3, [r5, #0]
 8005f16:	b103      	cbz	r3, 8005f1a <_lseek_r+0x1e>
 8005f18:	6023      	str	r3, [r4, #0]
 8005f1a:	bd38      	pop	{r3, r4, r5, pc}
 8005f1c:	20000338 	.word	0x20000338

08005f20 <__malloc_lock>:
 8005f20:	4801      	ldr	r0, [pc, #4]	; (8005f28 <__malloc_lock+0x8>)
 8005f22:	f7ff be0b 	b.w	8005b3c <__retarget_lock_acquire_recursive>
 8005f26:	bf00      	nop
 8005f28:	2000032c 	.word	0x2000032c

08005f2c <__malloc_unlock>:
 8005f2c:	4801      	ldr	r0, [pc, #4]	; (8005f34 <__malloc_unlock+0x8>)
 8005f2e:	f7ff be06 	b.w	8005b3e <__retarget_lock_release_recursive>
 8005f32:	bf00      	nop
 8005f34:	2000032c 	.word	0x2000032c

08005f38 <_read_r>:
 8005f38:	b538      	push	{r3, r4, r5, lr}
 8005f3a:	4d07      	ldr	r5, [pc, #28]	; (8005f58 <_read_r+0x20>)
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	4608      	mov	r0, r1
 8005f40:	4611      	mov	r1, r2
 8005f42:	2200      	movs	r2, #0
 8005f44:	602a      	str	r2, [r5, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	f7fb f8d8 	bl	80010fc <_read>
 8005f4c:	1c43      	adds	r3, r0, #1
 8005f4e:	d102      	bne.n	8005f56 <_read_r+0x1e>
 8005f50:	682b      	ldr	r3, [r5, #0]
 8005f52:	b103      	cbz	r3, 8005f56 <_read_r+0x1e>
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	bd38      	pop	{r3, r4, r5, pc}
 8005f58:	20000338 	.word	0x20000338

08005f5c <_init>:
 8005f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5e:	bf00      	nop
 8005f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f62:	bc08      	pop	{r3}
 8005f64:	469e      	mov	lr, r3
 8005f66:	4770      	bx	lr

08005f68 <_fini>:
 8005f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6a:	bf00      	nop
 8005f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6e:	bc08      	pop	{r3}
 8005f70:	469e      	mov	lr, r3
 8005f72:	4770      	bx	lr
