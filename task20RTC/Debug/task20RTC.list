
task20RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080070d0  080070d0  000170d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007368  08007368  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007368  08007368  00017368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007370  08007370  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007370  08007370  00017370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007374  08007374  00017374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000007c  080073f4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  080073f4  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016fe8  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c92  00000000  00000000  00037094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  00039d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001220  00000000  00000000  0003b070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a6a  00000000  00000000  0003c290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a13  00000000  00000000  00064cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6ef7  00000000  00000000  0007c70d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00173604  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c98  00000000  00000000  00173654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070b8 	.word	0x080070b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080070b8 	.word	0x080070b8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <printTime>:
#include <stdio.h>

extern I2C_HandleTypeDef hi2c1;
uint8_t readBuff[7];
void printTime(CALENDAR* mytime)
{
 80005a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a6:	b093      	sub	sp, #76	; 0x4c
 80005a8:	af0a      	add	r7, sp, #40	; 0x28
 80005aa:	61f8      	str	r0, [r7, #28]

  HAL_I2C_Mem_Read(&hi2c1, 208, 0, 1, readBuff, 7, 0xff);
 80005ac:	23ff      	movs	r3, #255	; 0xff
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2307      	movs	r3, #7
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	4b4a      	ldr	r3, [pc, #296]	; (80006e0 <printTime+0x13c>)
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2301      	movs	r3, #1
 80005ba:	2200      	movs	r2, #0
 80005bc:	21d0      	movs	r1, #208	; 0xd0
 80005be:	4849      	ldr	r0, [pc, #292]	; (80006e4 <printTime+0x140>)
 80005c0:	f001 fb82 	bl	8001cc8 <HAL_I2C_Mem_Read>
  mytime->seconds = (readBuff[0] & 15);
 80005c4:	4b46      	ldr	r3, [pc, #280]	; (80006e0 <printTime+0x13c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	f003 020f 	and.w	r2, r3, #15
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	601a      	str	r2, [r3, #0]
  mytime->seconds10 = (readBuff[0] >> 4);
 80005d0:	4b43      	ldr	r3, [pc, #268]	; (80006e0 <printTime+0x13c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	091b      	lsrs	r3, r3, #4
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	461a      	mov	r2, r3
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	605a      	str	r2, [r3, #4]
  mytime->minutes = (readBuff[1] & 15);
 80005de:	4b40      	ldr	r3, [pc, #256]	; (80006e0 <printTime+0x13c>)
 80005e0:	785b      	ldrb	r3, [r3, #1]
 80005e2:	f003 020f 	and.w	r2, r3, #15
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	609a      	str	r2, [r3, #8]
  mytime->minutes10 = (readBuff[1] >>4);
 80005ea:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <printTime+0x13c>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	091b      	lsrs	r3, r3, #4
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	60da      	str	r2, [r3, #12]
  mytime->hours = (readBuff[2] & 15);
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <printTime+0x13c>)
 80005fa:	789b      	ldrb	r3, [r3, #2]
 80005fc:	f003 020f 	and.w	r2, r3, #15
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	611a      	str	r2, [r3, #16]
  mytime->hours10 = (readBuff[2] >> 4);
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <printTime+0x13c>)
 8000606:	789b      	ldrb	r3, [r3, #2]
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	b2db      	uxtb	r3, r3
 800060c:	461a      	mov	r2, r3
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	615a      	str	r2, [r3, #20]
  mytime->days = readBuff[3];
 8000612:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <printTime+0x13c>)
 8000614:	78db      	ldrb	r3, [r3, #3]
 8000616:	461a      	mov	r2, r3
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	619a      	str	r2, [r3, #24]
  mytime->date = (readBuff[4] & 15);
 800061c:	4b30      	ldr	r3, [pc, #192]	; (80006e0 <printTime+0x13c>)
 800061e:	791b      	ldrb	r3, [r3, #4]
 8000620:	f003 020f 	and.w	r2, r3, #15
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	61da      	str	r2, [r3, #28]
  mytime->date10 = (readBuff[4] >> 4);
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <printTime+0x13c>)
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	091b      	lsrs	r3, r3, #4
 800062e:	b2db      	uxtb	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	621a      	str	r2, [r3, #32]
  mytime->month = (readBuff[5] & 15);
 8000636:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <printTime+0x13c>)
 8000638:	795b      	ldrb	r3, [r3, #5]
 800063a:	f003 020f 	and.w	r2, r3, #15
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	625a      	str	r2, [r3, #36]	; 0x24
  mytime->month10 = (readBuff[5] >> 4);
 8000642:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <printTime+0x13c>)
 8000644:	795b      	ldrb	r3, [r3, #5]
 8000646:	091b      	lsrs	r3, r3, #4
 8000648:	b2db      	uxtb	r3, r3
 800064a:	461a      	mov	r2, r3
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	629a      	str	r2, [r3, #40]	; 0x28
  mytime->year = (readBuff[6] & 15);
 8000650:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <printTime+0x13c>)
 8000652:	799b      	ldrb	r3, [r3, #6]
 8000654:	f003 020f 	and.w	r2, r3, #15
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
  mytime->year10 = (readBuff[6] >> 4);
 800065c:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <printTime+0x13c>)
 800065e:	799b      	ldrb	r3, [r3, #6]
 8000660:	091b      	lsrs	r3, r3, #4
 8000662:	b2db      	uxtb	r3, r3
 8000664:	461a      	mov	r2, r3
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	631a      	str	r2, [r3, #48]	; 0x30

  printf("year month date day hour min sec \n\r");
 800066a:	481f      	ldr	r0, [pc, #124]	; (80006e8 <printTime+0x144>)
 800066c:	f005 f81e 	bl	80056ac <iprintf>
  printf("20%d%d:%d%d:%d%d:%d:%d%d:%d%d:%d%d \n\r" ,mytime->year10, mytime->year, mytime->month10, mytime->month, mytime->date10, mytime->date, mytime->days, mytime->hours10, mytime->hours, mytime->minutes10, mytime->minutes, mytime->seconds10, mytime->seconds);
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	61bb      	str	r3, [r7, #24]
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800067a:	617a      	str	r2, [r7, #20]
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000680:	6138      	str	r0, [r7, #16]
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000686:	69fa      	ldr	r2, [r7, #28]
 8000688:	6a12      	ldr	r2, [r2, #32]
 800068a:	69f9      	ldr	r1, [r7, #28]
 800068c:	69c9      	ldr	r1, [r1, #28]
 800068e:	69f8      	ldr	r0, [r7, #28]
 8000690:	6980      	ldr	r0, [r0, #24]
 8000692:	69fc      	ldr	r4, [r7, #28]
 8000694:	6964      	ldr	r4, [r4, #20]
 8000696:	60fc      	str	r4, [r7, #12]
 8000698:	69fd      	ldr	r5, [r7, #28]
 800069a:	692d      	ldr	r5, [r5, #16]
 800069c:	69fe      	ldr	r6, [r7, #28]
 800069e:	68f6      	ldr	r6, [r6, #12]
 80006a0:	69fc      	ldr	r4, [r7, #28]
 80006a2:	68a4      	ldr	r4, [r4, #8]
 80006a4:	60bc      	str	r4, [r7, #8]
 80006a6:	69fc      	ldr	r4, [r7, #28]
 80006a8:	6864      	ldr	r4, [r4, #4]
 80006aa:	607c      	str	r4, [r7, #4]
 80006ac:	69fc      	ldr	r4, [r7, #28]
 80006ae:	6824      	ldr	r4, [r4, #0]
 80006b0:	9409      	str	r4, [sp, #36]	; 0x24
 80006b2:	687c      	ldr	r4, [r7, #4]
 80006b4:	9408      	str	r4, [sp, #32]
 80006b6:	68bc      	ldr	r4, [r7, #8]
 80006b8:	9407      	str	r4, [sp, #28]
 80006ba:	9606      	str	r6, [sp, #24]
 80006bc:	9505      	str	r5, [sp, #20]
 80006be:	68fc      	ldr	r4, [r7, #12]
 80006c0:	9404      	str	r4, [sp, #16]
 80006c2:	9003      	str	r0, [sp, #12]
 80006c4:	9102      	str	r1, [sp, #8]
 80006c6:	9201      	str	r2, [sp, #4]
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	697a      	ldr	r2, [r7, #20]
 80006ce:	69b9      	ldr	r1, [r7, #24]
 80006d0:	4806      	ldr	r0, [pc, #24]	; (80006ec <printTime+0x148>)
 80006d2:	f004 ffeb 	bl	80056ac <iprintf>

}
 80006d6:	bf00      	nop
 80006d8:	3724      	adds	r7, #36	; 0x24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000098 	.word	0x20000098
 80006e4:	20000110 	.word	0x20000110
 80006e8:	080070d0 	.word	0x080070d0
 80006ec:	080070f4 	.word	0x080070f4

080006f0 <DecToBin>:

int DecToBin (int dec)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	int right=  dec % 10;
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <DecToBin+0x48>)
 80006fc:	fb83 1302 	smull	r1, r3, r3, r2
 8000700:	1099      	asrs	r1, r3, #2
 8000702:	17d3      	asrs	r3, r2, #31
 8000704:	1ac9      	subs	r1, r1, r3
 8000706:	460b      	mov	r3, r1
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	440b      	add	r3, r1
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	60fb      	str	r3, [r7, #12]
	int left= dec / 10;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a08      	ldr	r2, [pc, #32]	; (8000738 <DecToBin+0x48>)
 8000716:	fb82 1203 	smull	r1, r2, r2, r3
 800071a:	1092      	asrs	r2, r2, #2
 800071c:	17db      	asrs	r3, r3, #31
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	60bb      	str	r3, [r7, #8]

	return (left<<4| right) ;
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	011a      	lsls	r2, r3, #4
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	4313      	orrs	r3, r2
}
 800072a:	4618      	mov	r0, r3
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	66666667 	.word	0x66666667

0800073c <commTask>:
uint8_t cmdbuffer[MAX_BUFFER_LENGTH];
int cmdcount = 0;
int cmdprint = 0;

int commTask()
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8000742:	1db9      	adds	r1, r7, #6
 8000744:	230a      	movs	r3, #10
 8000746:	2201      	movs	r2, #1
 8000748:	4836      	ldr	r0, [pc, #216]	; (8000824 <commTask+0xe8>)
 800074a:	f003 fe95 	bl	8004478 <HAL_UART_Receive>
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d020      	beq.n	800079a <commTask+0x5e>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 8000758:	4b32      	ldr	r3, [pc, #200]	; (8000824 <commTask+0xe8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 0308 	and.w	r3, r3, #8
 8000762:	2b00      	cmp	r3, #0
 8000764:	d011      	beq.n	800078a <commTask+0x4e>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000766:	4b2f      	ldr	r3, [pc, #188]	; (8000824 <commTask+0xe8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2208      	movs	r2, #8
 800076c:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 800076e:	e00c      	b.n	800078a <commTask+0x4e>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000770:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <commTask+0xec>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	1c5a      	adds	r2, r3, #1
 8000776:	492c      	ldr	r1, [pc, #176]	; (8000828 <commTask+0xec>)
 8000778:	600a      	str	r2, [r1, #0]
 800077a:	4a2c      	ldr	r2, [pc, #176]	; (800082c <commTask+0xf0>)
 800077c:	1899      	adds	r1, r3, r2
 800077e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000782:	2201      	movs	r2, #1
 8000784:	4827      	ldr	r0, [pc, #156]	; (8000824 <commTask+0xe8>)
 8000786:	f003 fde3 	bl	8004350 <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 800078a:	4b27      	ldr	r3, [pc, #156]	; (8000828 <commTask+0xec>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	4b28      	ldr	r3, [pc, #160]	; (8000830 <commTask+0xf4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	429a      	cmp	r2, r3
 8000794:	dbec      	blt.n	8000770 <commTask+0x34>
		}

		return 0;
 8000796:	2300      	movs	r3, #0
 8000798:	e03f      	b.n	800081a <commTask+0xde>
	}

	if (ch != '\r' && ch != '\n')
 800079a:	79bb      	ldrb	r3, [r7, #6]
 800079c:	2b0d      	cmp	r3, #13
 800079e:	d023      	beq.n	80007e8 <commTask+0xac>
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	2b0a      	cmp	r3, #10
 80007a4:	d020      	beq.n	80007e8 <commTask+0xac>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 80007a6:	4b22      	ldr	r3, [pc, #136]	; (8000830 <commTask+0xf4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b63      	cmp	r3, #99	; 0x63
 80007ac:	dd05      	ble.n	80007ba <commTask+0x7e>
		{
			cmdcount = 0;
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <commTask+0xf4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <commTask+0xec>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 80007ba:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <commTask+0xf4>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	491b      	ldr	r1, [pc, #108]	; (8000830 <commTask+0xf4>)
 80007c2:	600a      	str	r2, [r1, #0]
 80007c4:	79b9      	ldrb	r1, [r7, #6]
 80007c6:	4a19      	ldr	r2, [pc, #100]	; (800082c <commTask+0xf0>)
 80007c8:	54d1      	strb	r1, [r2, r3]
		return 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	e025      	b.n	800081a <commTask+0xde>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount)
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <commTask+0xec>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	4914      	ldr	r1, [pc, #80]	; (8000828 <commTask+0xec>)
 80007d6:	600a      	str	r2, [r1, #0]
 80007d8:	4a14      	ldr	r2, [pc, #80]	; (800082c <commTask+0xf0>)
 80007da:	1899      	adds	r1, r3, r2
 80007dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e0:	2201      	movs	r2, #1
 80007e2:	4810      	ldr	r0, [pc, #64]	; (8000824 <commTask+0xe8>)
 80007e4:	f003 fdb4 	bl	8004350 <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <commTask+0xec>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <commTask+0xf4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	dbec      	blt.n	80007ce <commTask+0x92>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 80007f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f8:	2202      	movs	r2, #2
 80007fa:	490e      	ldr	r1, [pc, #56]	; (8000834 <commTask+0xf8>)
 80007fc:	4809      	ldr	r0, [pc, #36]	; (8000824 <commTask+0xe8>)
 80007fe:	f003 fda7 	bl	8004350 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <commTask+0xf4>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a09      	ldr	r2, [pc, #36]	; (800082c <commTask+0xf0>)
 8000808:	2100      	movs	r1, #0
 800080a:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <commTask+0xf4>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <commTask+0xec>)
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
	return 1;
 8000818:	2301      	movs	r3, #1
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200001b0 	.word	0x200001b0
 8000828:	20000108 	.word	0x20000108
 800082c:	200000a0 	.word	0x200000a0
 8000830:	20000104 	.word	0x20000104
 8000834:	0800711c 	.word	0x0800711c

08000838 <handleCommand>:
uint8_t writeBuff[]={0,0,0,1,1,1,1};
uint8_t ledOn[1]={1};
uint8_t ledOff[1]={0};

void handleCommand()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b094      	sub	sp, #80	; 0x50
 800083c:	af06      	add	r7, sp, #24
	int date;
	int month;
	int year;


  int params = sscanf((const char*)cmdbuffer, "%s %d:%d:%d:%d:%d:%d:%d", cmd, &year, &month, &date, &days, &hours, &minutes, &seconds );
 800083e:	1d39      	adds	r1, r7, #4
 8000840:	f107 0220 	add.w	r2, r7, #32
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	9305      	str	r3, [sp, #20]
 800084a:	f107 0318 	add.w	r3, r7, #24
 800084e:	9304      	str	r3, [sp, #16]
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	9303      	str	r3, [sp, #12]
 8000856:	f107 0310 	add.w	r3, r7, #16
 800085a:	9302      	str	r3, [sp, #8]
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	9301      	str	r3, [sp, #4]
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	460b      	mov	r3, r1
 800086a:	4955      	ldr	r1, [pc, #340]	; (80009c0 <handleCommand+0x188>)
 800086c:	4855      	ldr	r0, [pc, #340]	; (80009c4 <handleCommand+0x18c>)
 800086e:	f004 ffab 	bl	80057c8 <siscanf>
 8000872:	6378      	str	r0, [r7, #52]	; 0x34
  if (params == 0){
 8000874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000876:	2b00      	cmp	r3, #0
 8000878:	f000 809e 	beq.w	80009b8 <handleCommand+0x180>
	  return;
  }

  if (strcmp(cmd, "set") == 0){
 800087c:	f107 0320 	add.w	r3, r7, #32
 8000880:	4951      	ldr	r1, [pc, #324]	; (80009c8 <handleCommand+0x190>)
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fca4 	bl	80001d0 <strcmp>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d14b      	bne.n	8000926 <handleCommand+0xee>
	  writeBuff[0]=DecToBin(seconds);
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff2d 	bl	80006f0 <DecToBin>
 8000896:	4603      	mov	r3, r0
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4b4c      	ldr	r3, [pc, #304]	; (80009cc <handleCommand+0x194>)
 800089c:	701a      	strb	r2, [r3, #0]
	  writeBuff[1]=DecToBin(minutes);
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff25 	bl	80006f0 <DecToBin>
 80008a6:	4603      	mov	r3, r0
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b48      	ldr	r3, [pc, #288]	; (80009cc <handleCommand+0x194>)
 80008ac:	705a      	strb	r2, [r3, #1]
	  writeBuff[2]=DecToBin(hours);
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff1d 	bl	80006f0 <DecToBin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b44      	ldr	r3, [pc, #272]	; (80009cc <handleCommand+0x194>)
 80008bc:	709a      	strb	r2, [r3, #2]
	  writeBuff[3]=DecToBin(days);
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff15 	bl	80006f0 <DecToBin>
 80008c6:	4603      	mov	r3, r0
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b40      	ldr	r3, [pc, #256]	; (80009cc <handleCommand+0x194>)
 80008cc:	70da      	strb	r2, [r3, #3]
	  writeBuff[4]=DecToBin(date);
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff0d 	bl	80006f0 <DecToBin>
 80008d6:	4603      	mov	r3, r0
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b3c      	ldr	r3, [pc, #240]	; (80009cc <handleCommand+0x194>)
 80008dc:	711a      	strb	r2, [r3, #4]
	  writeBuff[5]=DecToBin(month);
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff05 	bl	80006f0 <DecToBin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b38      	ldr	r3, [pc, #224]	; (80009cc <handleCommand+0x194>)
 80008ec:	715a      	strb	r2, [r3, #5]
	  writeBuff[6]=DecToBin(year);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fefd 	bl	80006f0 <DecToBin>
 80008f6:	4603      	mov	r3, r0
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b34      	ldr	r3, [pc, #208]	; (80009cc <handleCommand+0x194>)
 80008fc:	719a      	strb	r2, [r3, #6]

	  HAL_I2C_Mem_Write(&hi2c1, 208, 0, 1, writeBuff, 7, 0xff);
 80008fe:	23ff      	movs	r3, #255	; 0xff
 8000900:	9302      	str	r3, [sp, #8]
 8000902:	2307      	movs	r3, #7
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	4b31      	ldr	r3, [pc, #196]	; (80009cc <handleCommand+0x194>)
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	2301      	movs	r3, #1
 800090c:	2200      	movs	r2, #0
 800090e:	21d0      	movs	r1, #208	; 0xd0
 8000910:	482f      	ldr	r0, [pc, #188]	; (80009d0 <handleCommand+0x198>)
 8000912:	f001 f8c5 	bl	8001aa0 <HAL_I2C_Mem_Write>
	  HAL_TIM_Base_Start_IT(&htim6);
 8000916:	482f      	ldr	r0, [pc, #188]	; (80009d4 <handleCommand+0x19c>)
 8000918:	f003 f9a6 	bl	8003c68 <HAL_TIM_Base_Start_IT>
	  __HAL_TIM_SET_COUNTER(&htim6,0);
 800091c:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <handleCommand+0x19c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2200      	movs	r2, #0
 8000922:	625a      	str	r2, [r3, #36]	; 0x24
 8000924:	e049      	b.n	80009ba <handleCommand+0x182>
  }
  else if (strcmp(cmd, "on") == 0){
 8000926:	f107 0320 	add.w	r3, r7, #32
 800092a:	492b      	ldr	r1, [pc, #172]	; (80009d8 <handleCommand+0x1a0>)
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fc4f 	bl	80001d0 <strcmp>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d112      	bne.n	800095e <handleCommand+0x126>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000938:	2201      	movs	r2, #1
 800093a:	2120      	movs	r1, #32
 800093c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000940:	f000 ffe4 	bl	800190c <HAL_GPIO_WritePin>
	  HAL_I2C_Mem_Write(&hi2c1, 208, 16, 1, ledOn, 1, 0xff);
 8000944:	23ff      	movs	r3, #255	; 0xff
 8000946:	9302      	str	r3, [sp, #8]
 8000948:	2301      	movs	r3, #1
 800094a:	9301      	str	r3, [sp, #4]
 800094c:	4b23      	ldr	r3, [pc, #140]	; (80009dc <handleCommand+0x1a4>)
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	2301      	movs	r3, #1
 8000952:	2210      	movs	r2, #16
 8000954:	21d0      	movs	r1, #208	; 0xd0
 8000956:	481e      	ldr	r0, [pc, #120]	; (80009d0 <handleCommand+0x198>)
 8000958:	f001 f8a2 	bl	8001aa0 <HAL_I2C_Mem_Write>
 800095c:	e02d      	b.n	80009ba <handleCommand+0x182>
  }
  else if (strcmp(cmd, "off") == 0){
 800095e:	f107 0320 	add.w	r3, r7, #32
 8000962:	491f      	ldr	r1, [pc, #124]	; (80009e0 <handleCommand+0x1a8>)
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fc33 	bl	80001d0 <strcmp>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d112      	bne.n	8000996 <handleCommand+0x15e>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2120      	movs	r1, #32
 8000974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000978:	f000 ffc8 	bl	800190c <HAL_GPIO_WritePin>
      HAL_I2C_Mem_Write(&hi2c1, 208, 16, 1, ledOff, 1, 0xff);
 800097c:	23ff      	movs	r3, #255	; 0xff
 800097e:	9302      	str	r3, [sp, #8]
 8000980:	2301      	movs	r3, #1
 8000982:	9301      	str	r3, [sp, #4]
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <handleCommand+0x1ac>)
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2301      	movs	r3, #1
 800098a:	2210      	movs	r2, #16
 800098c:	21d0      	movs	r1, #208	; 0xd0
 800098e:	4810      	ldr	r0, [pc, #64]	; (80009d0 <handleCommand+0x198>)
 8000990:	f001 f886 	bl	8001aa0 <HAL_I2C_Mem_Write>
 8000994:	e011      	b.n	80009ba <handleCommand+0x182>
  }
  else if (strcmp(cmd, "stop") == 0){
 8000996:	f107 0320 	add.w	r3, r7, #32
 800099a:	4913      	ldr	r1, [pc, #76]	; (80009e8 <handleCommand+0x1b0>)
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fc17 	bl	80001d0 <strcmp>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d103      	bne.n	80009b0 <handleCommand+0x178>
      HAL_TIM_Base_Stop_IT(&htim6);
 80009a8:	480a      	ldr	r0, [pc, #40]	; (80009d4 <handleCommand+0x19c>)
 80009aa:	f003 f9cd 	bl	8003d48 <HAL_TIM_Base_Stop_IT>
 80009ae:	e004      	b.n	80009ba <handleCommand+0x182>
  }
  else{
	  printf("Invalid command\r\n");
 80009b0:	480e      	ldr	r0, [pc, #56]	; (80009ec <handleCommand+0x1b4>)
 80009b2:	f004 ff01 	bl	80057b8 <puts>
 80009b6:	e000      	b.n	80009ba <handleCommand+0x182>
	  return;
 80009b8:	bf00      	nop
  }
}
 80009ba:	3738      	adds	r7, #56	; 0x38
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	08007120 	.word	0x08007120
 80009c4:	200000a0 	.word	0x200000a0
 80009c8:	08007138 	.word	0x08007138
 80009cc:	20000000 	.word	0x20000000
 80009d0:	20000110 	.word	0x20000110
 80009d4:	20000164 	.word	0x20000164
 80009d8:	0800713c 	.word	0x0800713c
 80009dc:	20000008 	.word	0x20000008
 80009e0:	08007140 	.word	0x08007140
 80009e4:	2000010c 	.word	0x2000010c
 80009e8:	08007144 	.word	0x08007144
 80009ec:	0800714c 	.word	0x0800714c

080009f0 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

///////////////////////////////////////////////////////////////////////////
int _write(int fd, char* ptr, int len)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	f04f 33ff 	mov.w	r3, #4294967295
 8000a04:	68b9      	ldr	r1, [r7, #8]
 8000a06:	4804      	ldr	r0, [pc, #16]	; (8000a18 <_write+0x28>)
 8000a08:	f003 fca2 	bl	8004350 <HAL_UART_Transmit>
	return len;
 8000a0c:	687b      	ldr	r3, [r7, #4]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200001b0 	.word	0x200001b0

08000a1c <HAL_TIM_PeriodElapsedCallback>:

uint8_t ledState[1];
CALENDAR mytime;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	printTime(&mytime);
 8000a24:	4803      	ldr	r0, [pc, #12]	; (8000a34 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000a26:	f7ff fdbd 	bl	80005a4 <printTime>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000238 	.word	0x20000238

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3e:	f000 fbaf 	bl	80011a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a42:	f000 f829 	bl	8000a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a46:	f000 f921 	bl	8000c8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a4a:	f000 f8ef 	bl	8000c2c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a4e:	f000 f875 	bl	8000b3c <MX_I2C1_Init>
  MX_TIM6_Init();
 8000a52:	f000 f8b3 	bl	8000bbc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Mem_Read(&hi2c1, 208, 16, 1, ledState, 1, 0xff);
 8000a56:	23ff      	movs	r3, #255	; 0xff
 8000a58:	9302      	str	r3, [sp, #8]
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	9301      	str	r3, [sp, #4]
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <main+0x58>)
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	2301      	movs	r3, #1
 8000a64:	2210      	movs	r2, #16
 8000a66:	21d0      	movs	r1, #208	; 0xd0
 8000a68:	480a      	ldr	r0, [pc, #40]	; (8000a94 <main+0x5c>)
 8000a6a:	f001 f92d 	bl	8001cc8 <HAL_I2C_Mem_Read>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, ledState[0]);
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <main+0x58>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	2120      	movs	r1, #32
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f000 ff47 	bl	800190c <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
   if (commTask()){
 8000a7e:	f7ff fe5d 	bl	800073c <commTask>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d0fa      	beq.n	8000a7e <main+0x46>
	    handleCommand();
 8000a88:	f7ff fed6 	bl	8000838 <handleCommand>
   if (commTask()){
 8000a8c:	e7f7      	b.n	8000a7e <main+0x46>
 8000a8e:	bf00      	nop
 8000a90:	20000234 	.word	0x20000234
 8000a94:	20000110 	.word	0x20000110

08000a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b096      	sub	sp, #88	; 0x58
 8000a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	2244      	movs	r2, #68	; 0x44
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f004 fdf8 	bl	800569c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aac:	463b      	mov	r3, r7
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000aba:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000abe:	f001 fd69 	bl	8002594 <HAL_PWREx_ControlVoltageScaling>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ac8:	f000 f94e 	bl	8000d68 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000acc:	2302      	movs	r3, #2
 8000ace:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad6:	2310      	movs	r3, #16
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ada:	2302      	movs	r3, #2
 8000adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ae6:	230a      	movs	r3, #10
 8000ae8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000aea:	2307      	movs	r3, #7
 8000aec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 fda0 	bl	8002640 <HAL_RCC_OscConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b06:	f000 f92f 	bl	8000d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2104      	movs	r1, #4
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 f968 	bl	8002df8 <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b2e:	f000 f91b 	bl	8000d68 <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3758      	adds	r7, #88	; 0x58
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b42:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <MX_I2C1_Init+0x78>)
 8000b44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b48:	4a1b      	ldr	r2, [pc, #108]	; (8000bb8 <MX_I2C1_Init+0x7c>)
 8000b4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b76:	480e      	ldr	r0, [pc, #56]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b78:	f000 ff03 	bl	8001982 <HAL_I2C_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b82:	f000 f8f1 	bl	8000d68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b86:	2100      	movs	r1, #0
 8000b88:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b8a:	f001 fc5d 	bl	8002448 <HAL_I2CEx_ConfigAnalogFilter>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b94:	f000 f8e8 	bl	8000d68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b9c:	f001 fc9f 	bl	80024de <HAL_I2CEx_ConfigDigitalFilter>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ba6:	f000 f8df 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000110 	.word	0x20000110
 8000bb4:	40005400 	.word	0x40005400
 8000bb8:	10909cec 	.word	0x10909cec

08000bbc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <MX_TIM6_Init+0x68>)
 8000bce:	4a16      	ldr	r2, [pc, #88]	; (8000c28 <MX_TIM6_Init+0x6c>)
 8000bd0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_TIM6_Init+0x68>)
 8000bd4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bd8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_TIM6_Init+0x68>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_TIM6_Init+0x68>)
 8000be2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000be6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_TIM6_Init+0x68>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bee:	480d      	ldr	r0, [pc, #52]	; (8000c24 <MX_TIM6_Init+0x68>)
 8000bf0:	f002 ffe2 	bl	8003bb8 <HAL_TIM_Base_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000bfa:	f000 f8b5 	bl	8000d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4806      	ldr	r0, [pc, #24]	; (8000c24 <MX_TIM6_Init+0x68>)
 8000c0c:	f003 faac 	bl	8004168 <HAL_TIMEx_MasterConfigSynchronization>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000c16:	f000 f8a7 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000164 	.word	0x20000164
 8000c28:	40001000 	.word	0x40001000

08000c2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c32:	4a15      	ldr	r2, [pc, #84]	; (8000c88 <MX_USART2_UART_Init+0x5c>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c70:	f003 fb20 	bl	80042b4 <HAL_UART_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c7a:	f000 f875 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200001b0 	.word	0x200001b0
 8000c88:	40004400 	.word	0x40004400

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <MX_GPIO_Init+0xd4>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	4a2e      	ldr	r2, [pc, #184]	; (8000d60 <MX_GPIO_Init+0xd4>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cae:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <MX_GPIO_Init+0xd4>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cba:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <MX_GPIO_Init+0xd4>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	4a28      	ldr	r2, [pc, #160]	; (8000d60 <MX_GPIO_Init+0xd4>)
 8000cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc6:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <MX_GPIO_Init+0xd4>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4b23      	ldr	r3, [pc, #140]	; (8000d60 <MX_GPIO_Init+0xd4>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	4a22      	ldr	r2, [pc, #136]	; (8000d60 <MX_GPIO_Init+0xd4>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cde:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <MX_GPIO_Init+0xd4>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <MX_GPIO_Init+0xd4>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	4a1c      	ldr	r2, [pc, #112]	; (8000d60 <MX_GPIO_Init+0xd4>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_GPIO_Init+0xd4>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2160      	movs	r1, #96	; 0x60
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0a:	f000 fdff 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d14:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	480f      	ldr	r0, [pc, #60]	; (8000d64 <MX_GPIO_Init+0xd8>)
 8000d26:	f000 fc47 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD1_Pin;
 8000d2a:	2360      	movs	r3, #96	; 0x60
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f000 fc38 	bl	80015b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2028      	movs	r0, #40	; 0x28
 8000d4e:	f000 fb7e 	bl	800144e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d52:	2028      	movs	r0, #40	; 0x28
 8000d54:	f000 fb97 	bl	8001486 <HAL_NVIC_EnableIRQ>

}
 8000d58:	bf00      	nop
 8000d5a:	3728      	adds	r7, #40	; 0x28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40021000 	.word	0x40021000
 8000d64:	48000800 	.word	0x48000800

08000d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6c:	b672      	cpsid	i
}
 8000d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <Error_Handler+0x8>
	...

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <HAL_MspInit+0x44>)
 8000d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d7e:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <HAL_MspInit+0x44>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6613      	str	r3, [r2, #96]	; 0x60
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <HAL_MspInit+0x44>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_MspInit+0x44>)
 8000d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d96:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <HAL_MspInit+0x44>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_MspInit+0x44>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000

08000dbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b0ac      	sub	sp, #176	; 0xb0
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2288      	movs	r2, #136	; 0x88
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f004 fc5d 	bl	800569c <memset>
  if(hi2c->Instance==I2C1)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <HAL_I2C_MspInit+0xb0>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d13b      	bne.n	8000e64 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000dec:	2340      	movs	r3, #64	; 0x40
 8000dee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f002 fa21 	bl	8003240 <HAL_RCCEx_PeriphCLKConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e04:	f7ff ffb0 	bl	8000d68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <HAL_I2C_MspInit+0xb4>)
 8000e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0c:	4a18      	ldr	r2, [pc, #96]	; (8000e70 <HAL_I2C_MspInit+0xb4>)
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <HAL_I2C_MspInit+0xb4>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e28:	2312      	movs	r3, #18
 8000e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e44:	4619      	mov	r1, r3
 8000e46:	480b      	ldr	r0, [pc, #44]	; (8000e74 <HAL_I2C_MspInit+0xb8>)
 8000e48:	f000 fbb6 	bl	80015b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_I2C_MspInit+0xb4>)
 8000e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_I2C_MspInit+0xb4>)
 8000e52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e56:	6593      	str	r3, [r2, #88]	; 0x58
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_I2C_MspInit+0xb4>)
 8000e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e64:	bf00      	nop
 8000e66:	37b0      	adds	r7, #176	; 0xb0
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40005400 	.word	0x40005400
 8000e70:	40021000 	.word	0x40021000
 8000e74:	48000400 	.word	0x48000400

08000e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <HAL_TIM_Base_MspInit+0x44>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d113      	bne.n	8000eb2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <HAL_TIM_Base_MspInit+0x48>)
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8e:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <HAL_TIM_Base_MspInit+0x48>)
 8000e90:	f043 0310 	orr.w	r3, r3, #16
 8000e94:	6593      	str	r3, [r2, #88]	; 0x58
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_TIM_Base_MspInit+0x48>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	f003 0310 	and.w	r3, r3, #16
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2036      	movs	r0, #54	; 0x36
 8000ea8:	f000 fad1 	bl	800144e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000eac:	2036      	movs	r0, #54	; 0x36
 8000eae:	f000 faea 	bl	8001486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40001000 	.word	0x40001000
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b0ac      	sub	sp, #176	; 0xb0
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2288      	movs	r2, #136	; 0x88
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f004 fbd9 	bl	800569c <memset>
  if(huart->Instance==USART2)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a25      	ldr	r2, [pc, #148]	; (8000f84 <HAL_UART_MspInit+0xc0>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d143      	bne.n	8000f7c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4618      	mov	r0, r3
 8000f02:	f002 f99d 	bl	8003240 <HAL_RCCEx_PeriphCLKConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f0c:	f7ff ff2c 	bl	8000d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f10:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <HAL_UART_MspInit+0xc4>)
 8000f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f14:	4a1c      	ldr	r2, [pc, #112]	; (8000f88 <HAL_UART_MspInit+0xc4>)
 8000f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <HAL_UART_MspInit+0xc4>)
 8000f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <HAL_UART_MspInit+0xc4>)
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2c:	4a16      	ldr	r2, [pc, #88]	; (8000f88 <HAL_UART_MspInit+0xc4>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <HAL_UART_MspInit+0xc4>)
 8000f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f40:	230c      	movs	r3, #12
 8000f42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f62:	4619      	mov	r1, r3
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f68:	f000 fb26 	bl	80015b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2026      	movs	r0, #38	; 0x26
 8000f72:	f000 fa6c 	bl	800144e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f76:	2026      	movs	r0, #38	; 0x26
 8000f78:	f000 fa85 	bl	8001486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f7c:	bf00      	nop
 8000f7e:	37b0      	adds	r7, #176	; 0xb0
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40004400 	.word	0x40004400
 8000f88:	40021000 	.word	0x40021000

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <NMI_Handler+0x4>

08000f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <MemManage_Handler+0x4>

08000f9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd8:	f000 f93e 	bl	8001258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <USART2_IRQHandler+0x10>)
 8000fe6:	f003 fb19 	bl	800461c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200001b0 	.word	0x200001b0

08000ff4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ff8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ffc:	f000 fc9e 	bl	800193c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <TIM6_DAC_IRQHandler+0x10>)
 800100a:	f002 fecc 	bl	8003da6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000164 	.word	0x20000164

08001018 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	e00a      	b.n	8001040 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800102a:	f3af 8000 	nop.w
 800102e:	4601      	mov	r1, r0
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	60ba      	str	r2, [r7, #8]
 8001036:	b2ca      	uxtb	r2, r1
 8001038:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	dbf0      	blt.n	800102a <_read+0x12>
	}

return len;
 8001048:	687b      	ldr	r3, [r7, #4]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
	return -1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800107a:	605a      	str	r2, [r3, #4]
	return 0;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <_isatty>:

int _isatty(int file)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
	return 1;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
	return 0;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <_sbrk+0x5c>)
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <_sbrk+0x60>)
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <_sbrk+0x64>)
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <_sbrk+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ec:	f004 faac 	bl	8005648 <__errno>
 80010f0:	4603      	mov	r3, r0
 80010f2:	220c      	movs	r2, #12
 80010f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e009      	b.n	8001110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <_sbrk+0x64>)
 800110c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20018000 	.word	0x20018000
 800111c:	00000400 	.word	0x00000400
 8001120:	2000026c 	.word	0x2000026c
 8001124:	20000288 	.word	0x20000288

08001128 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <SystemInit+0x20>)
 800112e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <SystemInit+0x20>)
 8001134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800114c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001184 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001150:	f7ff ffea 	bl	8001128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001154:	480c      	ldr	r0, [pc, #48]	; (8001188 <LoopForever+0x6>)
  ldr r1, =_edata
 8001156:	490d      	ldr	r1, [pc, #52]	; (800118c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001158:	4a0d      	ldr	r2, [pc, #52]	; (8001190 <LoopForever+0xe>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <LoopForever+0x12>)
  ldr r4, =_ebss
 800116c:	4c0a      	ldr	r4, [pc, #40]	; (8001198 <LoopForever+0x16>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800117a:	f004 fa6b 	bl	8005654 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800117e:	f7ff fc5b 	bl	8000a38 <main>

08001182 <LoopForever>:

LoopForever:
    b LoopForever
 8001182:	e7fe      	b.n	8001182 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001184:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800118c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001190:	08007378 	.word	0x08007378
  ldr r2, =_sbss
 8001194:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001198:	20000284 	.word	0x20000284

0800119c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC1_2_IRQHandler>
	...

080011a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <HAL_Init+0x3c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <HAL_Init+0x3c>)
 80011b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b6:	2003      	movs	r0, #3
 80011b8:	f000 f93e 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011bc:	2000      	movs	r0, #0
 80011be:	f000 f80f 	bl	80011e0 <HAL_InitTick>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	e001      	b.n	80011d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ce:	f7ff fdd1 	bl	8000d74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011d2:	79fb      	ldrb	r3, [r7, #7]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40022000 	.word	0x40022000

080011e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_InitTick+0x6c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d023      	beq.n	800123c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <HAL_InitTick+0x70>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b14      	ldr	r3, [pc, #80]	; (800124c <HAL_InitTick+0x6c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001202:	fbb3 f3f1 	udiv	r3, r3, r1
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f949 	bl	80014a2 <HAL_SYSTICK_Config>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10f      	bne.n	8001236 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d809      	bhi.n	8001230 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f000 f913 	bl	800144e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001228:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <HAL_InitTick+0x74>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e007      	b.n	8001240 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e004      	b.n	8001240 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	73fb      	strb	r3, [r7, #15]
 800123a:	e001      	b.n	8001240 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001240:	7bfb      	ldrb	r3, [r7, #15]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000014 	.word	0x20000014
 8001250:	2000000c 	.word	0x2000000c
 8001254:	20000010 	.word	0x20000010

08001258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x20>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_IncTick+0x24>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <HAL_IncTick+0x24>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000014 	.word	0x20000014
 800127c:	20000270 	.word	0x20000270

08001280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <HAL_GetTick+0x14>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000270 	.word	0x20000270

08001298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b4:	4013      	ands	r3, r2
 80012b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ca:	4a04      	ldr	r2, [pc, #16]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	60d3      	str	r3, [r2, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <__NVIC_GetPriorityGrouping+0x18>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	f003 0307 	and.w	r3, r3, #7
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	2b00      	cmp	r3, #0
 800130c:	db0b      	blt.n	8001326 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f003 021f 	and.w	r2, r3, #31
 8001314:	4907      	ldr	r1, [pc, #28]	; (8001334 <__NVIC_EnableIRQ+0x38>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	095b      	lsrs	r3, r3, #5
 800131c:	2001      	movs	r0, #1
 800131e:	fa00 f202 	lsl.w	r2, r0, r2
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000e100 	.word	0xe000e100

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	; (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001404:	d301      	bcc.n	800140a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001406:	2301      	movs	r3, #1
 8001408:	e00f      	b.n	800142a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <SysTick_Config+0x40>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001412:	210f      	movs	r1, #15
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f7ff ff8e 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <SysTick_Config+0x40>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SysTick_Config+0x40>)
 8001424:	2207      	movs	r2, #7
 8001426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff29 	bl	8001298 <__NVIC_SetPriorityGrouping>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001460:	f7ff ff3e 	bl	80012e0 <__NVIC_GetPriorityGrouping>
 8001464:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f7ff ff8e 	bl	800138c <NVIC_EncodePriority>
 8001470:	4602      	mov	r2, r0
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff5d 	bl	8001338 <__NVIC_SetPriority>
}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff31 	bl	80012fc <__NVIC_EnableIRQ>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffa2 	bl	80013f4 <SysTick_Config>
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b085      	sub	sp, #20
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d008      	beq.n	80014e4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2204      	movs	r2, #4
 80014d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e022      	b.n	800152a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 020e 	bic.w	r2, r2, #14
 80014f2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0201 	bic.w	r2, r2, #1
 8001502:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001508:	f003 021c 	and.w	r2, r3, #28
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	2101      	movs	r1, #1
 8001512:	fa01 f202 	lsl.w	r2, r1, r2
 8001516:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001528:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800152a:	4618      	mov	r0, r3
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d005      	beq.n	800155a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2204      	movs	r2, #4
 8001552:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	e029      	b.n	80015ae <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 020e 	bic.w	r2, r2, #14
 8001568:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0201 	bic.w	r2, r2, #1
 8001578:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f003 021c 	and.w	r2, r3, #28
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	2101      	movs	r1, #1
 8001588:	fa01 f202 	lsl.w	r2, r1, r2
 800158c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	4798      	blx	r3
    }
  }
  return status;
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c6:	e17f      	b.n	80018c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	2101      	movs	r1, #1
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	fa01 f303 	lsl.w	r3, r1, r3
 80015d4:	4013      	ands	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8171 	beq.w	80018c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d005      	beq.n	80015f8 <HAL_GPIO_Init+0x40>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d130      	bne.n	800165a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2203      	movs	r2, #3
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800162e:	2201      	movs	r2, #1
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	091b      	lsrs	r3, r3, #4
 8001644:	f003 0201 	and.w	r2, r3, #1
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	2b03      	cmp	r3, #3
 8001664:	d118      	bne.n	8001698 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800166c:	2201      	movs	r2, #1
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	08db      	lsrs	r3, r3, #3
 8001682:	f003 0201 	and.w	r2, r3, #1
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d017      	beq.n	80016d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	2203      	movs	r2, #3
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d123      	bne.n	8001728 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	08da      	lsrs	r2, r3, #3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3208      	adds	r2, #8
 80016e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	220f      	movs	r2, #15
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	691a      	ldr	r2, [r3, #16]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	08da      	lsrs	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3208      	adds	r2, #8
 8001722:	6939      	ldr	r1, [r7, #16]
 8001724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	2203      	movs	r2, #3
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0203 	and.w	r2, r3, #3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 80ac 	beq.w	80018c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176a:	4b5f      	ldr	r3, [pc, #380]	; (80018e8 <HAL_GPIO_Init+0x330>)
 800176c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176e:	4a5e      	ldr	r2, [pc, #376]	; (80018e8 <HAL_GPIO_Init+0x330>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6613      	str	r3, [r2, #96]	; 0x60
 8001776:	4b5c      	ldr	r3, [pc, #368]	; (80018e8 <HAL_GPIO_Init+0x330>)
 8001778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001782:	4a5a      	ldr	r2, [pc, #360]	; (80018ec <HAL_GPIO_Init+0x334>)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	3302      	adds	r3, #2
 800178a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	220f      	movs	r2, #15
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017ac:	d025      	beq.n	80017fa <HAL_GPIO_Init+0x242>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4f      	ldr	r2, [pc, #316]	; (80018f0 <HAL_GPIO_Init+0x338>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d01f      	beq.n	80017f6 <HAL_GPIO_Init+0x23e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4e      	ldr	r2, [pc, #312]	; (80018f4 <HAL_GPIO_Init+0x33c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d019      	beq.n	80017f2 <HAL_GPIO_Init+0x23a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4d      	ldr	r2, [pc, #308]	; (80018f8 <HAL_GPIO_Init+0x340>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d013      	beq.n	80017ee <HAL_GPIO_Init+0x236>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4c      	ldr	r2, [pc, #304]	; (80018fc <HAL_GPIO_Init+0x344>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d00d      	beq.n	80017ea <HAL_GPIO_Init+0x232>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4b      	ldr	r2, [pc, #300]	; (8001900 <HAL_GPIO_Init+0x348>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d007      	beq.n	80017e6 <HAL_GPIO_Init+0x22e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4a      	ldr	r2, [pc, #296]	; (8001904 <HAL_GPIO_Init+0x34c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d101      	bne.n	80017e2 <HAL_GPIO_Init+0x22a>
 80017de:	2306      	movs	r3, #6
 80017e0:	e00c      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017e2:	2307      	movs	r3, #7
 80017e4:	e00a      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017e6:	2305      	movs	r3, #5
 80017e8:	e008      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017ea:	2304      	movs	r3, #4
 80017ec:	e006      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017ee:	2303      	movs	r3, #3
 80017f0:	e004      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017f2:	2302      	movs	r3, #2
 80017f4:	e002      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017fa:	2300      	movs	r3, #0
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	f002 0203 	and.w	r2, r2, #3
 8001802:	0092      	lsls	r2, r2, #2
 8001804:	4093      	lsls	r3, r2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800180c:	4937      	ldr	r1, [pc, #220]	; (80018ec <HAL_GPIO_Init+0x334>)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	3302      	adds	r3, #2
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800181a:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <HAL_GPIO_Init+0x350>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800183e:	4a32      	ldr	r2, [pc, #200]	; (8001908 <HAL_GPIO_Init+0x350>)
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001844:	4b30      	ldr	r3, [pc, #192]	; (8001908 <HAL_GPIO_Init+0x350>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001868:	4a27      	ldr	r2, [pc, #156]	; (8001908 <HAL_GPIO_Init+0x350>)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800186e:	4b26      	ldr	r3, [pc, #152]	; (8001908 <HAL_GPIO_Init+0x350>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001892:	4a1d      	ldr	r2, [pc, #116]	; (8001908 <HAL_GPIO_Init+0x350>)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_GPIO_Init+0x350>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018bc:	4a12      	ldr	r2, [pc, #72]	; (8001908 <HAL_GPIO_Init+0x350>)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa22 f303 	lsr.w	r3, r2, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f47f ae78 	bne.w	80015c8 <HAL_GPIO_Init+0x10>
  }
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	371c      	adds	r7, #28
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010000 	.word	0x40010000
 80018f0:	48000400 	.word	0x48000400
 80018f4:	48000800 	.word	0x48000800
 80018f8:	48000c00 	.word	0x48000c00
 80018fc:	48001000 	.word	0x48001000
 8001900:	48001400 	.word	0x48001400
 8001904:	48001800 	.word	0x48001800
 8001908:	40010400 	.word	0x40010400

0800190c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	807b      	strh	r3, [r7, #2]
 8001918:	4613      	mov	r3, r2
 800191a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800191c:	787b      	ldrb	r3, [r7, #1]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001922:	887a      	ldrh	r2, [r7, #2]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001928:	e002      	b.n	8001930 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	4013      	ands	r3, r2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d006      	beq.n	8001960 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	4618      	mov	r0, r3
 800195c:	f000 f806 	bl	800196c <HAL_GPIO_EXTI_Callback>
  }
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40010400 	.word	0x40010400

0800196c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e081      	b.n	8001a98 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d106      	bne.n	80019ae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff fa07 	bl	8000dbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2224      	movs	r2, #36	; 0x24
 80019b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0201 	bic.w	r2, r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d107      	bne.n	80019fc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	e006      	b.n	8001a0a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a08:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d104      	bne.n	8001a1c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a1a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a2e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a3e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691a      	ldr	r2, [r3, #16]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69d9      	ldr	r1, [r3, #28]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1a      	ldr	r2, [r3, #32]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f042 0201 	orr.w	r2, r2, #1
 8001a78:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2220      	movs	r2, #32
 8001a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	4608      	mov	r0, r1
 8001aaa:	4611      	mov	r1, r2
 8001aac:	461a      	mov	r2, r3
 8001aae:	4603      	mov	r3, r0
 8001ab0:	817b      	strh	r3, [r7, #10]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	813b      	strh	r3, [r7, #8]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b20      	cmp	r3, #32
 8001ac4:	f040 80f9 	bne.w	8001cba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <HAL_I2C_Mem_Write+0x34>
 8001ace:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d105      	bne.n	8001ae0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ada:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0ed      	b.n	8001cbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_I2C_Mem_Write+0x4e>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e0e6      	b.n	8001cbc <HAL_I2C_Mem_Write+0x21c>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001af6:	f7ff fbc3 	bl	8001280 <HAL_GetTick>
 8001afa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2319      	movs	r3, #25
 8001b02:	2201      	movs	r2, #1
 8001b04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 fac3 	bl	8002094 <I2C_WaitOnFlagUntilTimeout>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0d1      	b.n	8001cbc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2221      	movs	r2, #33	; 0x21
 8001b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2240      	movs	r2, #64	; 0x40
 8001b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a3a      	ldr	r2, [r7, #32]
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b40:	88f8      	ldrh	r0, [r7, #6]
 8001b42:	893a      	ldrh	r2, [r7, #8]
 8001b44:	8979      	ldrh	r1, [r7, #10]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	4603      	mov	r3, r0
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 f9d3 	bl	8001efc <I2C_RequestMemoryWrite>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0a9      	b.n	8001cbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2bff      	cmp	r3, #255	; 0xff
 8001b70:	d90e      	bls.n	8001b90 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	22ff      	movs	r2, #255	; 0xff
 8001b76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	8979      	ldrh	r1, [r7, #10]
 8001b80:	2300      	movs	r3, #0
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 fc2b 	bl	80023e4 <I2C_TransferConfig>
 8001b8e:	e00f      	b.n	8001bb0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	8979      	ldrh	r1, [r7, #10]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 fc1a 	bl	80023e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 faad 	bl	8002114 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e07b      	b.n	8001cbc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d034      	beq.n	8001c68 <HAL_I2C_Mem_Write+0x1c8>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d130      	bne.n	8001c68 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2180      	movs	r1, #128	; 0x80
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 fa3f 	bl	8002094 <I2C_WaitOnFlagUntilTimeout>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e04d      	b.n	8001cbc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2bff      	cmp	r3, #255	; 0xff
 8001c28:	d90e      	bls.n	8001c48 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	22ff      	movs	r2, #255	; 0xff
 8001c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	8979      	ldrh	r1, [r7, #10]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 fbcf 	bl	80023e4 <I2C_TransferConfig>
 8001c46:	e00f      	b.n	8001c68 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	8979      	ldrh	r1, [r7, #10]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 fbbe 	bl	80023e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d19e      	bne.n	8001bb0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 fa8c 	bl	8002194 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e01a      	b.n	8001cbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_I2C_Mem_Write+0x224>)
 8001c9a:	400b      	ands	r3, r1
 8001c9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e000      	b.n	8001cbc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001cba:	2302      	movs	r3, #2
  }
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	fe00e800 	.word	0xfe00e800

08001cc8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	4608      	mov	r0, r1
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	817b      	strh	r3, [r7, #10]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	813b      	strh	r3, [r7, #8]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b20      	cmp	r3, #32
 8001cec:	f040 80fd 	bne.w	8001eea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <HAL_I2C_Mem_Read+0x34>
 8001cf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d105      	bne.n	8001d08 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0f1      	b.n	8001eec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_I2C_Mem_Read+0x4e>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e0ea      	b.n	8001eec <HAL_I2C_Mem_Read+0x224>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d1e:	f7ff faaf 	bl	8001280 <HAL_GetTick>
 8001d22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	2319      	movs	r3, #25
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 f9af 	bl	8002094 <I2C_WaitOnFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0d5      	b.n	8001eec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2222      	movs	r2, #34	; 0x22
 8001d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2240      	movs	r2, #64	; 0x40
 8001d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6a3a      	ldr	r2, [r7, #32]
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d68:	88f8      	ldrh	r0, [r7, #6]
 8001d6a:	893a      	ldrh	r2, [r7, #8]
 8001d6c:	8979      	ldrh	r1, [r7, #10]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	4603      	mov	r3, r0
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f000 f913 	bl	8001fa4 <I2C_RequestMemoryRead>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0ad      	b.n	8001eec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	2bff      	cmp	r3, #255	; 0xff
 8001d98:	d90e      	bls.n	8001db8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	22ff      	movs	r2, #255	; 0xff
 8001d9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	8979      	ldrh	r1, [r7, #10]
 8001da8:	4b52      	ldr	r3, [pc, #328]	; (8001ef4 <HAL_I2C_Mem_Read+0x22c>)
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 fb17 	bl	80023e4 <I2C_TransferConfig>
 8001db6:	e00f      	b.n	8001dd8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	8979      	ldrh	r1, [r7, #10]
 8001dca:	4b4a      	ldr	r3, [pc, #296]	; (8001ef4 <HAL_I2C_Mem_Read+0x22c>)
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 fb06 	bl	80023e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dde:	2200      	movs	r2, #0
 8001de0:	2104      	movs	r1, #4
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f956 	bl	8002094 <I2C_WaitOnFlagUntilTimeout>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e07c      	b.n	8001eec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d034      	beq.n	8001e98 <HAL_I2C_Mem_Read+0x1d0>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d130      	bne.n	8001e98 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2180      	movs	r1, #128	; 0x80
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 f927 	bl	8002094 <I2C_WaitOnFlagUntilTimeout>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e04d      	b.n	8001eec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	2bff      	cmp	r3, #255	; 0xff
 8001e58:	d90e      	bls.n	8001e78 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	22ff      	movs	r2, #255	; 0xff
 8001e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	8979      	ldrh	r1, [r7, #10]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 fab7 	bl	80023e4 <I2C_TransferConfig>
 8001e76:	e00f      	b.n	8001e98 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	8979      	ldrh	r1, [r7, #10]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 faa6 	bl	80023e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d19a      	bne.n	8001dd8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f974 	bl	8002194 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e01a      	b.n	8001eec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_I2C_Mem_Read+0x230>)
 8001eca:	400b      	ands	r3, r1
 8001ecc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001eea:	2302      	movs	r3, #2
  }
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	80002400 	.word	0x80002400
 8001ef8:	fe00e800 	.word	0xfe00e800

08001efc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af02      	add	r7, sp, #8
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	4608      	mov	r0, r1
 8001f06:	4611      	mov	r1, r2
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	817b      	strh	r3, [r7, #10]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	813b      	strh	r3, [r7, #8]
 8001f12:	4613      	mov	r3, r2
 8001f14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	8979      	ldrh	r1, [r7, #10]
 8001f1c:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <I2C_RequestMemoryWrite+0xa4>)
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 fa5d 	bl	80023e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	69b9      	ldr	r1, [r7, #24]
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 f8f0 	bl	8002114 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e02c      	b.n	8001f98 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d105      	bne.n	8001f50 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f44:	893b      	ldrh	r3, [r7, #8]
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	629a      	str	r2, [r3, #40]	; 0x28
 8001f4e:	e015      	b.n	8001f7c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f50:	893b      	ldrh	r3, [r7, #8]
 8001f52:	0a1b      	lsrs	r3, r3, #8
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	69b9      	ldr	r1, [r7, #24]
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 f8d6 	bl	8002114 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e012      	b.n	8001f98 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f72:	893b      	ldrh	r3, [r7, #8]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	2200      	movs	r2, #0
 8001f84:	2180      	movs	r1, #128	; 0x80
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 f884 	bl	8002094 <I2C_WaitOnFlagUntilTimeout>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	80002000 	.word	0x80002000

08001fa4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	4608      	mov	r0, r1
 8001fae:	4611      	mov	r1, r2
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	817b      	strh	r3, [r7, #10]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	813b      	strh	r3, [r7, #8]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	8979      	ldrh	r1, [r7, #10]
 8001fc4:	4b20      	ldr	r3, [pc, #128]	; (8002048 <I2C_RequestMemoryRead+0xa4>)
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2300      	movs	r3, #0
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 fa0a 	bl	80023e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fd0:	69fa      	ldr	r2, [r7, #28]
 8001fd2:	69b9      	ldr	r1, [r7, #24]
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 f89d 	bl	8002114 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e02c      	b.n	800203e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d105      	bne.n	8001ff6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fea:	893b      	ldrh	r3, [r7, #8]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8001ff4:	e015      	b.n	8002022 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ff6:	893b      	ldrh	r3, [r7, #8]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	69b9      	ldr	r1, [r7, #24]
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 f883 	bl	8002114 <I2C_WaitOnTXISFlagUntilTimeout>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e012      	b.n	800203e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002018:	893b      	ldrh	r3, [r7, #8]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	2200      	movs	r2, #0
 800202a:	2140      	movs	r1, #64	; 0x40
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 f831 	bl	8002094 <I2C_WaitOnFlagUntilTimeout>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	80002000 	.word	0x80002000

0800204c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b02      	cmp	r3, #2
 8002060:	d103      	bne.n	800206a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2200      	movs	r2, #0
 8002068:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	d007      	beq.n	8002088 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	699a      	ldr	r2, [r3, #24]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	619a      	str	r2, [r3, #24]
  }
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	4613      	mov	r3, r2
 80020a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020a4:	e022      	b.n	80020ec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ac:	d01e      	beq.n	80020ec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ae:	f7ff f8e7 	bl	8001280 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d302      	bcc.n	80020c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d113      	bne.n	80020ec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c8:	f043 0220 	orr.w	r2, r3, #32
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e00f      	b.n	800210c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699a      	ldr	r2, [r3, #24]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	4013      	ands	r3, r2
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	bf0c      	ite	eq
 80020fc:	2301      	moveq	r3, #1
 80020fe:	2300      	movne	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	461a      	mov	r2, r3
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	429a      	cmp	r2, r3
 8002108:	d0cd      	beq.n	80020a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002120:	e02c      	b.n	800217c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 f870 	bl	800220c <I2C_IsErrorOccurred>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e02a      	b.n	800218c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d01e      	beq.n	800217c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800213e:	f7ff f89f 	bl	8001280 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	429a      	cmp	r2, r3
 800214c:	d302      	bcc.n	8002154 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d113      	bne.n	800217c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002158:	f043 0220 	orr.w	r2, r3, #32
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e007      	b.n	800218c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b02      	cmp	r3, #2
 8002188:	d1cb      	bne.n	8002122 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021a0:	e028      	b.n	80021f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f830 	bl	800220c <I2C_IsErrorOccurred>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e026      	b.n	8002204 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b6:	f7ff f863 	bl	8001280 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d302      	bcc.n	80021cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d113      	bne.n	80021f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	f043 0220 	orr.w	r2, r3, #32
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e007      	b.n	8002204 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b20      	cmp	r3, #32
 8002200:	d1cf      	bne.n	80021a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b00      	cmp	r3, #0
 8002236:	d075      	beq.n	8002324 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2210      	movs	r2, #16
 800223e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002240:	e056      	b.n	80022f0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d052      	beq.n	80022f0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800224a:	f7ff f819 	bl	8001280 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	429a      	cmp	r2, r3
 8002258:	d302      	bcc.n	8002260 <I2C_IsErrorOccurred+0x54>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d147      	bne.n	80022f0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800226a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002272:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800227e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002282:	d12e      	bne.n	80022e2 <I2C_IsErrorOccurred+0xd6>
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800228a:	d02a      	beq.n	80022e2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800228c:	7cfb      	ldrb	r3, [r7, #19]
 800228e:	2b20      	cmp	r3, #32
 8002290:	d027      	beq.n	80022e2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80022a2:	f7fe ffed 	bl	8001280 <HAL_GetTick>
 80022a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022a8:	e01b      	b.n	80022e2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80022aa:	f7fe ffe9 	bl	8001280 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b19      	cmp	r3, #25
 80022b6:	d914      	bls.n	80022e2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022bc:	f043 0220 	orr.w	r2, r3, #32
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d1dc      	bne.n	80022aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f003 0320 	and.w	r3, r3, #32
 80022fa:	2b20      	cmp	r3, #32
 80022fc:	d003      	beq.n	8002306 <I2C_IsErrorOccurred+0xfa>
 80022fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002302:	2b00      	cmp	r3, #0
 8002304:	d09d      	beq.n	8002242 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800230a:	2b00      	cmp	r3, #0
 800230c:	d103      	bne.n	8002316 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2220      	movs	r2, #32
 8002314:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00b      	beq.n	800234e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002346:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00b      	beq.n	8002370 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	f043 0308 	orr.w	r3, r3, #8
 800235e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002368:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800238a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002396:	2b00      	cmp	r3, #0
 8002398:	d01c      	beq.n	80023d4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f7ff fe56 	bl	800204c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6859      	ldr	r1, [r3, #4]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <I2C_IsErrorOccurred+0x1d4>)
 80023ac:	400b      	ands	r3, r1
 80023ae:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	431a      	orrs	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80023d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3728      	adds	r7, #40	; 0x28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	fe00e800 	.word	0xfe00e800

080023e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	460b      	mov	r3, r1
 80023f0:	817b      	strh	r3, [r7, #10]
 80023f2:	4613      	mov	r3, r2
 80023f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023f6:	897b      	ldrh	r3, [r7, #10]
 80023f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023fc:	7a7b      	ldrb	r3, [r7, #9]
 80023fe:	041b      	lsls	r3, r3, #16
 8002400:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002404:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	4313      	orrs	r3, r2
 800240e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002412:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	0d5b      	lsrs	r3, r3, #21
 800241e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <I2C_TransferConfig+0x60>)
 8002424:	430b      	orrs	r3, r1
 8002426:	43db      	mvns	r3, r3
 8002428:	ea02 0103 	and.w	r1, r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	430a      	orrs	r2, r1
 8002434:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002436:	bf00      	nop
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	03ff63ff 	.word	0x03ff63ff

08002448 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b20      	cmp	r3, #32
 800245c:	d138      	bne.n	80024d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002468:	2302      	movs	r3, #2
 800246a:	e032      	b.n	80024d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2224      	movs	r2, #36	; 0x24
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0201 	bic.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800249a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6819      	ldr	r1, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	e000      	b.n	80024d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024d0:	2302      	movs	r3, #2
  }
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024de:	b480      	push	{r7}
 80024e0:	b085      	sub	sp, #20
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b20      	cmp	r3, #32
 80024f2:	d139      	bne.n	8002568 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024fe:	2302      	movs	r3, #2
 8002500:	e033      	b.n	800256a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2224      	movs	r2, #36	; 0x24
 800250e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0201 	bic.w	r2, r2, #1
 8002520:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002530:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	e000      	b.n	800256a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002568:	2302      	movs	r3, #2
  }
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <HAL_PWREx_GetVoltageRange+0x18>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40007000 	.word	0x40007000

08002594 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a2:	d130      	bne.n	8002606 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025a4:	4b23      	ldr	r3, [pc, #140]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025b0:	d038      	beq.n	8002624 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025b2:	4b20      	ldr	r3, [pc, #128]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025ba:	4a1e      	ldr	r2, [pc, #120]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025c2:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2232      	movs	r2, #50	; 0x32
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	4a1b      	ldr	r2, [pc, #108]	; (800263c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	0c9b      	lsrs	r3, r3, #18
 80025d4:	3301      	adds	r3, #1
 80025d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025d8:	e002      	b.n	80025e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	3b01      	subs	r3, #1
 80025de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ec:	d102      	bne.n	80025f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f2      	bne.n	80025da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025f4:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002600:	d110      	bne.n	8002624 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e00f      	b.n	8002626 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800260e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002612:	d007      	beq.n	8002624 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002614:	4b07      	ldr	r3, [pc, #28]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800261c:	4a05      	ldr	r2, [pc, #20]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002622:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40007000 	.word	0x40007000
 8002638:	2000000c 	.word	0x2000000c
 800263c:	431bde83 	.word	0x431bde83

08002640 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e3ca      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002652:	4b97      	ldr	r3, [pc, #604]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800265c:	4b94      	ldr	r3, [pc, #592]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 80e4 	beq.w	800283c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d007      	beq.n	800268a <HAL_RCC_OscConfig+0x4a>
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2b0c      	cmp	r3, #12
 800267e:	f040 808b 	bne.w	8002798 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b01      	cmp	r3, #1
 8002686:	f040 8087 	bne.w	8002798 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800268a:	4b89      	ldr	r3, [pc, #548]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <HAL_RCC_OscConfig+0x62>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e3a2      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1a      	ldr	r2, [r3, #32]
 80026a6:	4b82      	ldr	r3, [pc, #520]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d004      	beq.n	80026bc <HAL_RCC_OscConfig+0x7c>
 80026b2:	4b7f      	ldr	r3, [pc, #508]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ba:	e005      	b.n	80026c8 <HAL_RCC_OscConfig+0x88>
 80026bc:	4b7c      	ldr	r3, [pc, #496]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 80026be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d223      	bcs.n	8002714 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 fd55 	bl	8003180 <RCC_SetFlashLatencyFromMSIRange>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e383      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026e0:	4b73      	ldr	r3, [pc, #460]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a72      	ldr	r2, [pc, #456]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 80026e6:	f043 0308 	orr.w	r3, r3, #8
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b70      	ldr	r3, [pc, #448]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	496d      	ldr	r1, [pc, #436]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026fe:	4b6c      	ldr	r3, [pc, #432]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	4968      	ldr	r1, [pc, #416]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]
 8002712:	e025      	b.n	8002760 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002714:	4b66      	ldr	r3, [pc, #408]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a65      	ldr	r2, [pc, #404]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 800271a:	f043 0308 	orr.w	r3, r3, #8
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	4b63      	ldr	r3, [pc, #396]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4960      	ldr	r1, [pc, #384]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002732:	4b5f      	ldr	r3, [pc, #380]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	021b      	lsls	r3, r3, #8
 8002740:	495b      	ldr	r1, [pc, #364]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d109      	bne.n	8002760 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fd15 	bl	8003180 <RCC_SetFlashLatencyFromMSIRange>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e343      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002760:	f000 fc4a 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 8002764:	4602      	mov	r2, r0
 8002766:	4b52      	ldr	r3, [pc, #328]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	091b      	lsrs	r3, r3, #4
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	4950      	ldr	r1, [pc, #320]	; (80028b4 <HAL_RCC_OscConfig+0x274>)
 8002772:	5ccb      	ldrb	r3, [r1, r3]
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
 800277c:	4a4e      	ldr	r2, [pc, #312]	; (80028b8 <HAL_RCC_OscConfig+0x278>)
 800277e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002780:	4b4e      	ldr	r3, [pc, #312]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe fd2b 	bl	80011e0 <HAL_InitTick>
 800278a:	4603      	mov	r3, r0
 800278c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d052      	beq.n	800283a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	e327      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d032      	beq.n	8002806 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027a0:	4b43      	ldr	r3, [pc, #268]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a42      	ldr	r2, [pc, #264]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027ac:	f7fe fd68 	bl	8001280 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027b4:	f7fe fd64 	bl	8001280 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e310      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027c6:	4b3a      	ldr	r3, [pc, #232]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027d2:	4b37      	ldr	r3, [pc, #220]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a36      	ldr	r2, [pc, #216]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 80027d8:	f043 0308 	orr.w	r3, r3, #8
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	4b34      	ldr	r3, [pc, #208]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	4931      	ldr	r1, [pc, #196]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027f0:	4b2f      	ldr	r3, [pc, #188]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	021b      	lsls	r3, r3, #8
 80027fe:	492c      	ldr	r1, [pc, #176]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
 8002804:	e01a      	b.n	800283c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002806:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a29      	ldr	r2, [pc, #164]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002812:	f7fe fd35 	bl	8001280 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800281a:	f7fe fd31 	bl	8001280 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e2dd      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800282c:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f0      	bne.n	800281a <HAL_RCC_OscConfig+0x1da>
 8002838:	e000      	b.n	800283c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800283a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d074      	beq.n	8002932 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2b08      	cmp	r3, #8
 800284c:	d005      	beq.n	800285a <HAL_RCC_OscConfig+0x21a>
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	2b0c      	cmp	r3, #12
 8002852:	d10e      	bne.n	8002872 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2b03      	cmp	r3, #3
 8002858:	d10b      	bne.n	8002872 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d064      	beq.n	8002930 <HAL_RCC_OscConfig+0x2f0>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d160      	bne.n	8002930 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e2ba      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287a:	d106      	bne.n	800288a <HAL_RCC_OscConfig+0x24a>
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a0b      	ldr	r2, [pc, #44]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 8002882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	e026      	b.n	80028d8 <HAL_RCC_OscConfig+0x298>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002892:	d115      	bne.n	80028c0 <HAL_RCC_OscConfig+0x280>
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a05      	ldr	r2, [pc, #20]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 800289a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a02      	ldr	r2, [pc, #8]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 80028a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	e014      	b.n	80028d8 <HAL_RCC_OscConfig+0x298>
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000
 80028b4:	0800716c 	.word	0x0800716c
 80028b8:	2000000c 	.word	0x2000000c
 80028bc:	20000010 	.word	0x20000010
 80028c0:	4ba0      	ldr	r3, [pc, #640]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a9f      	ldr	r2, [pc, #636]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 80028c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b9d      	ldr	r3, [pc, #628]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a9c      	ldr	r2, [pc, #624]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 80028d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d013      	beq.n	8002908 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe fcce 	bl	8001280 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e8:	f7fe fcca 	bl	8001280 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e276      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028fa:	4b92      	ldr	r3, [pc, #584]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x2a8>
 8002906:	e014      	b.n	8002932 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fe fcba 	bl	8001280 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002910:	f7fe fcb6 	bl	8001280 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	; 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e262      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002922:	4b88      	ldr	r3, [pc, #544]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x2d0>
 800292e:	e000      	b.n	8002932 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d060      	beq.n	8002a00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	2b04      	cmp	r3, #4
 8002942:	d005      	beq.n	8002950 <HAL_RCC_OscConfig+0x310>
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b0c      	cmp	r3, #12
 8002948:	d119      	bne.n	800297e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d116      	bne.n	800297e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002950:	4b7c      	ldr	r3, [pc, #496]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_OscConfig+0x328>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e23f      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002968:	4b76      	ldr	r3, [pc, #472]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	4973      	ldr	r1, [pc, #460]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800297c:	e040      	b.n	8002a00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d023      	beq.n	80029ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002986:	4b6f      	ldr	r3, [pc, #444]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6e      	ldr	r2, [pc, #440]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 800298c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002992:	f7fe fc75 	bl	8001280 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299a:	f7fe fc71 	bl	8001280 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e21d      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029ac:	4b65      	ldr	r3, [pc, #404]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b8:	4b62      	ldr	r3, [pc, #392]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	061b      	lsls	r3, r3, #24
 80029c6:	495f      	ldr	r1, [pc, #380]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]
 80029cc:	e018      	b.n	8002a00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ce:	4b5d      	ldr	r3, [pc, #372]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a5c      	ldr	r2, [pc, #368]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 80029d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7fe fc51 	bl	8001280 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e2:	f7fe fc4d 	bl	8001280 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e1f9      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029f4:	4b53      	ldr	r3, [pc, #332]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f0      	bne.n	80029e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d03c      	beq.n	8002a86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01c      	beq.n	8002a4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a14:	4b4b      	ldr	r3, [pc, #300]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 8002a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a1a:	4a4a      	ldr	r2, [pc, #296]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a24:	f7fe fc2c 	bl	8001280 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a2c:	f7fe fc28 	bl	8001280 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e1d4      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a3e:	4b41      	ldr	r3, [pc, #260]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 8002a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0ef      	beq.n	8002a2c <HAL_RCC_OscConfig+0x3ec>
 8002a4c:	e01b      	b.n	8002a86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a4e:	4b3d      	ldr	r3, [pc, #244]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 8002a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a54:	4a3b      	ldr	r2, [pc, #236]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5e:	f7fe fc0f 	bl	8001280 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a66:	f7fe fc0b 	bl	8001280 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e1b7      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a78:	4b32      	ldr	r3, [pc, #200]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 8002a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1ef      	bne.n	8002a66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80a6 	beq.w	8002be0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a94:	2300      	movs	r3, #0
 8002a96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a98:	4b2a      	ldr	r3, [pc, #168]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10d      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa4:	4b27      	ldr	r3, [pc, #156]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa8:	4a26      	ldr	r2, [pc, #152]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 8002aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aae:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab0:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002abc:	2301      	movs	r3, #1
 8002abe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac0:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <HAL_RCC_OscConfig+0x508>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d118      	bne.n	8002afe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002acc:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <HAL_RCC_OscConfig+0x508>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1d      	ldr	r2, [pc, #116]	; (8002b48 <HAL_RCC_OscConfig+0x508>)
 8002ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad8:	f7fe fbd2 	bl	8001280 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae0:	f7fe fbce 	bl	8001280 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e17a      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002af2:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <HAL_RCC_OscConfig+0x508>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d108      	bne.n	8002b18 <HAL_RCC_OscConfig+0x4d8>
 8002b06:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b16:	e029      	b.n	8002b6c <HAL_RCC_OscConfig+0x52c>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b05      	cmp	r3, #5
 8002b1e:	d115      	bne.n	8002b4c <HAL_RCC_OscConfig+0x50c>
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b26:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 8002b28:	f043 0304 	orr.w	r3, r3, #4
 8002b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b36:	4a03      	ldr	r2, [pc, #12]	; (8002b44 <HAL_RCC_OscConfig+0x504>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b40:	e014      	b.n	8002b6c <HAL_RCC_OscConfig+0x52c>
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40007000 	.word	0x40007000
 8002b4c:	4b9c      	ldr	r3, [pc, #624]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b52:	4a9b      	ldr	r2, [pc, #620]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b5c:	4b98      	ldr	r3, [pc, #608]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b62:	4a97      	ldr	r2, [pc, #604]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002b64:	f023 0304 	bic.w	r3, r3, #4
 8002b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d016      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b74:	f7fe fb84 	bl	8001280 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7c:	f7fe fb80 	bl	8001280 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e12a      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b92:	4b8b      	ldr	r3, [pc, #556]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ed      	beq.n	8002b7c <HAL_RCC_OscConfig+0x53c>
 8002ba0:	e015      	b.n	8002bce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fb6d 	bl	8001280 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ba8:	e00a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002baa:	f7fe fb69 	bl	8001280 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e113      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bc0:	4b7f      	ldr	r3, [pc, #508]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1ed      	bne.n	8002baa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bce:	7ffb      	ldrb	r3, [r7, #31]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d105      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd4:	4b7a      	ldr	r3, [pc, #488]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	4a79      	ldr	r2, [pc, #484]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bde:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80fe 	beq.w	8002de6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	f040 80d0 	bne.w	8002d94 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bf4:	4b72      	ldr	r3, [pc, #456]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f003 0203 	and.w	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d130      	bne.n	8002c6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	3b01      	subs	r3, #1
 8002c14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d127      	bne.n	8002c6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c24:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d11f      	bne.n	8002c6a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c34:	2a07      	cmp	r2, #7
 8002c36:	bf14      	ite	ne
 8002c38:	2201      	movne	r2, #1
 8002c3a:	2200      	moveq	r2, #0
 8002c3c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d113      	bne.n	8002c6a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4c:	085b      	lsrs	r3, r3, #1
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d109      	bne.n	8002c6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	085b      	lsrs	r3, r3, #1
 8002c62:	3b01      	subs	r3, #1
 8002c64:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d06e      	beq.n	8002d48 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	2b0c      	cmp	r3, #12
 8002c6e:	d069      	beq.n	8002d44 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c70:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d105      	bne.n	8002c88 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c7c:	4b50      	ldr	r3, [pc, #320]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0ad      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c8c:	4b4c      	ldr	r3, [pc, #304]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a4b      	ldr	r2, [pc, #300]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002c92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c96:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c98:	f7fe faf2 	bl	8001280 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca0:	f7fe faee 	bl	8001280 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e09a      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb2:	4b43      	ldr	r3, [pc, #268]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cbe:	4b40      	ldr	r3, [pc, #256]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	4b40      	ldr	r3, [pc, #256]	; (8002dc4 <HAL_RCC_OscConfig+0x784>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cce:	3a01      	subs	r2, #1
 8002cd0:	0112      	lsls	r2, r2, #4
 8002cd2:	4311      	orrs	r1, r2
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cd8:	0212      	lsls	r2, r2, #8
 8002cda:	4311      	orrs	r1, r2
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ce0:	0852      	lsrs	r2, r2, #1
 8002ce2:	3a01      	subs	r2, #1
 8002ce4:	0552      	lsls	r2, r2, #21
 8002ce6:	4311      	orrs	r1, r2
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cec:	0852      	lsrs	r2, r2, #1
 8002cee:	3a01      	subs	r2, #1
 8002cf0:	0652      	lsls	r2, r2, #25
 8002cf2:	4311      	orrs	r1, r2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cf8:	0912      	lsrs	r2, r2, #4
 8002cfa:	0452      	lsls	r2, r2, #17
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	4930      	ldr	r1, [pc, #192]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d04:	4b2e      	ldr	r3, [pc, #184]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a2d      	ldr	r2, [pc, #180]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d10:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4a2a      	ldr	r2, [pc, #168]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d1c:	f7fe fab0 	bl	8001280 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d24:	f7fe faac 	bl	8001280 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e058      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d36:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d42:	e050      	b.n	8002de6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e04f      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d48:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d148      	bne.n	8002de6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d54:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a19      	ldr	r2, [pc, #100]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d60:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4a16      	ldr	r2, [pc, #88]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d6c:	f7fe fa88 	bl	8001280 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d74:	f7fe fa84 	bl	8001280 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e030      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d86:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x734>
 8002d92:	e028      	b.n	8002de6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2b0c      	cmp	r3, #12
 8002d98:	d023      	beq.n	8002de2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a08      	ldr	r2, [pc, #32]	; (8002dc0 <HAL_RCC_OscConfig+0x780>)
 8002da0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da6:	f7fe fa6b 	bl	8001280 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dac:	e00c      	b.n	8002dc8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dae:	f7fe fa67 	bl	8001280 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d905      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e013      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc8:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <HAL_RCC_OscConfig+0x7b0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1ec      	bne.n	8002dae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_RCC_OscConfig+0x7b0>)
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	4905      	ldr	r1, [pc, #20]	; (8002df0 <HAL_RCC_OscConfig+0x7b0>)
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <HAL_RCC_OscConfig+0x7b4>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60cb      	str	r3, [r1, #12]
 8002de0:	e001      	b.n	8002de6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3720      	adds	r7, #32
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	feeefffc 	.word	0xfeeefffc

08002df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0e7      	b.n	8002fdc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b75      	ldr	r3, [pc, #468]	; (8002fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d910      	bls.n	8002e3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1a:	4b72      	ldr	r3, [pc, #456]	; (8002fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 0207 	bic.w	r2, r3, #7
 8002e22:	4970      	ldr	r1, [pc, #448]	; (8002fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2a:	4b6e      	ldr	r3, [pc, #440]	; (8002fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0cf      	b.n	8002fdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d010      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	4b66      	ldr	r3, [pc, #408]	; (8002fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d908      	bls.n	8002e6a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e58:	4b63      	ldr	r3, [pc, #396]	; (8002fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	4960      	ldr	r1, [pc, #384]	; (8002fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d04c      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d107      	bne.n	8002e8e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e7e:	4b5a      	ldr	r3, [pc, #360]	; (8002fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d121      	bne.n	8002ece <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e0a6      	b.n	8002fdc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d107      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e96:	4b54      	ldr	r3, [pc, #336]	; (8002fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d115      	bne.n	8002ece <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e09a      	b.n	8002fdc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d107      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eae:	4b4e      	ldr	r3, [pc, #312]	; (8002fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e08e      	b.n	8002fdc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ebe:	4b4a      	ldr	r3, [pc, #296]	; (8002fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e086      	b.n	8002fdc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ece:	4b46      	ldr	r3, [pc, #280]	; (8002fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f023 0203 	bic.w	r2, r3, #3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4943      	ldr	r1, [pc, #268]	; (8002fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee0:	f7fe f9ce 	bl	8001280 <HAL_GetTick>
 8002ee4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee6:	e00a      	b.n	8002efe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee8:	f7fe f9ca 	bl	8001280 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e06e      	b.n	8002fdc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efe:	4b3a      	ldr	r3, [pc, #232]	; (8002fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 020c 	and.w	r2, r3, #12
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d1eb      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d010      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	4b31      	ldr	r3, [pc, #196]	; (8002fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d208      	bcs.n	8002f3e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f2c:	4b2e      	ldr	r3, [pc, #184]	; (8002fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	492b      	ldr	r1, [pc, #172]	; (8002fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f3e:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d210      	bcs.n	8002f6e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4c:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f023 0207 	bic.w	r2, r3, #7
 8002f54:	4923      	ldr	r1, [pc, #140]	; (8002fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5c:	4b21      	ldr	r3, [pc, #132]	; (8002fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e036      	b.n	8002fdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d008      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	4918      	ldr	r1, [pc, #96]	; (8002fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d009      	beq.n	8002fac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f98:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4910      	ldr	r1, [pc, #64]	; (8002fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fac:	f000 f824 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	490b      	ldr	r1, [pc, #44]	; (8002fec <HAL_RCC_ClockConfig+0x1f4>)
 8002fbe:	5ccb      	ldrb	r3, [r1, r3]
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc8:	4a09      	ldr	r2, [pc, #36]	; (8002ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8002fca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fcc:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <HAL_RCC_ClockConfig+0x1fc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fe f905 	bl	80011e0 <HAL_InitTick>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002fda:	7afb      	ldrb	r3, [r7, #11]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40022000 	.word	0x40022000
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	0800716c 	.word	0x0800716c
 8002ff0:	2000000c 	.word	0x2000000c
 8002ff4:	20000010 	.word	0x20000010

08002ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b089      	sub	sp, #36	; 0x24
 8002ffc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	2300      	movs	r3, #0
 8003004:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003006:	4b3e      	ldr	r3, [pc, #248]	; (8003100 <HAL_RCC_GetSysClockFreq+0x108>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003010:	4b3b      	ldr	r3, [pc, #236]	; (8003100 <HAL_RCC_GetSysClockFreq+0x108>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <HAL_RCC_GetSysClockFreq+0x34>
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	2b0c      	cmp	r3, #12
 8003024:	d121      	bne.n	800306a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d11e      	bne.n	800306a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800302c:	4b34      	ldr	r3, [pc, #208]	; (8003100 <HAL_RCC_GetSysClockFreq+0x108>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d107      	bne.n	8003048 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003038:	4b31      	ldr	r3, [pc, #196]	; (8003100 <HAL_RCC_GetSysClockFreq+0x108>)
 800303a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800303e:	0a1b      	lsrs	r3, r3, #8
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	e005      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003048:	4b2d      	ldr	r3, [pc, #180]	; (8003100 <HAL_RCC_GetSysClockFreq+0x108>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003054:	4a2b      	ldr	r2, [pc, #172]	; (8003104 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10d      	bne.n	8003080 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003068:	e00a      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	2b04      	cmp	r3, #4
 800306e:	d102      	bne.n	8003076 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003070:	4b25      	ldr	r3, [pc, #148]	; (8003108 <HAL_RCC_GetSysClockFreq+0x110>)
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	e004      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	2b08      	cmp	r3, #8
 800307a:	d101      	bne.n	8003080 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800307c:	4b23      	ldr	r3, [pc, #140]	; (800310c <HAL_RCC_GetSysClockFreq+0x114>)
 800307e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	2b0c      	cmp	r3, #12
 8003084:	d134      	bne.n	80030f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003086:	4b1e      	ldr	r3, [pc, #120]	; (8003100 <HAL_RCC_GetSysClockFreq+0x108>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d003      	beq.n	800309e <HAL_RCC_GetSysClockFreq+0xa6>
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d003      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0xac>
 800309c:	e005      	b.n	80030aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800309e:	4b1a      	ldr	r3, [pc, #104]	; (8003108 <HAL_RCC_GetSysClockFreq+0x110>)
 80030a0:	617b      	str	r3, [r7, #20]
      break;
 80030a2:	e005      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030a4:	4b19      	ldr	r3, [pc, #100]	; (800310c <HAL_RCC_GetSysClockFreq+0x114>)
 80030a6:	617b      	str	r3, [r7, #20]
      break;
 80030a8:	e002      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	617b      	str	r3, [r7, #20]
      break;
 80030ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030b0:	4b13      	ldr	r3, [pc, #76]	; (8003100 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	3301      	adds	r3, #1
 80030bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030be:	4b10      	ldr	r3, [pc, #64]	; (8003100 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	fb03 f202 	mul.w	r2, r3, r2
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030d6:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <HAL_RCC_GetSysClockFreq+0x108>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	0e5b      	lsrs	r3, r3, #25
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	3301      	adds	r3, #1
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030f0:	69bb      	ldr	r3, [r7, #24]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3724      	adds	r7, #36	; 0x24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40021000 	.word	0x40021000
 8003104:	08007184 	.word	0x08007184
 8003108:	00f42400 	.word	0x00f42400
 800310c:	007a1200 	.word	0x007a1200

08003110 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <HAL_RCC_GetHCLKFreq+0x14>)
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	2000000c 	.word	0x2000000c

08003128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800312c:	f7ff fff0 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003130:	4602      	mov	r2, r0
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	4904      	ldr	r1, [pc, #16]	; (8003150 <HAL_RCC_GetPCLK1Freq+0x28>)
 800313e:	5ccb      	ldrb	r3, [r1, r3]
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003148:	4618      	mov	r0, r3
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000
 8003150:	0800717c 	.word	0x0800717c

08003154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003158:	f7ff ffda 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	0adb      	lsrs	r3, r3, #11
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4904      	ldr	r1, [pc, #16]	; (800317c <HAL_RCC_GetPCLK2Freq+0x28>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003174:	4618      	mov	r0, r3
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000
 800317c:	0800717c 	.word	0x0800717c

08003180 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003188:	2300      	movs	r3, #0
 800318a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800318c:	4b2a      	ldr	r3, [pc, #168]	; (8003238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003198:	f7ff f9ee 	bl	8002578 <HAL_PWREx_GetVoltageRange>
 800319c:	6178      	str	r0, [r7, #20]
 800319e:	e014      	b.n	80031ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031a0:	4b25      	ldr	r3, [pc, #148]	; (8003238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a4:	4a24      	ldr	r2, [pc, #144]	; (8003238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031aa:	6593      	str	r3, [r2, #88]	; 0x58
 80031ac:	4b22      	ldr	r3, [pc, #136]	; (8003238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031b8:	f7ff f9de 	bl	8002578 <HAL_PWREx_GetVoltageRange>
 80031bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031be:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c2:	4a1d      	ldr	r2, [pc, #116]	; (8003238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d0:	d10b      	bne.n	80031ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b80      	cmp	r3, #128	; 0x80
 80031d6:	d919      	bls.n	800320c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2ba0      	cmp	r3, #160	; 0xa0
 80031dc:	d902      	bls.n	80031e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031de:	2302      	movs	r3, #2
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	e013      	b.n	800320c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031e4:	2301      	movs	r3, #1
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	e010      	b.n	800320c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b80      	cmp	r3, #128	; 0x80
 80031ee:	d902      	bls.n	80031f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031f0:	2303      	movs	r3, #3
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	e00a      	b.n	800320c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b80      	cmp	r3, #128	; 0x80
 80031fa:	d102      	bne.n	8003202 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031fc:	2302      	movs	r3, #2
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	e004      	b.n	800320c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b70      	cmp	r3, #112	; 0x70
 8003206:	d101      	bne.n	800320c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003208:	2301      	movs	r3, #1
 800320a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800320c:	4b0b      	ldr	r3, [pc, #44]	; (800323c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f023 0207 	bic.w	r2, r3, #7
 8003214:	4909      	ldr	r1, [pc, #36]	; (800323c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800321c:	4b07      	ldr	r3, [pc, #28]	; (800323c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	429a      	cmp	r2, r3
 8003228:	d001      	beq.n	800322e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40021000 	.word	0x40021000
 800323c:	40022000 	.word	0x40022000

08003240 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003248:	2300      	movs	r3, #0
 800324a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800324c:	2300      	movs	r3, #0
 800324e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003258:	2b00      	cmp	r3, #0
 800325a:	d041      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003260:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003264:	d02a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003266:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800326a:	d824      	bhi.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800326c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003270:	d008      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003272:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003276:	d81e      	bhi.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800327c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003280:	d010      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003282:	e018      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003284:	4b86      	ldr	r3, [pc, #536]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4a85      	ldr	r2, [pc, #532]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003290:	e015      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3304      	adds	r3, #4
 8003296:	2100      	movs	r1, #0
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fabb 	bl	8003814 <RCCEx_PLLSAI1_Config>
 800329e:	4603      	mov	r3, r0
 80032a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032a2:	e00c      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3320      	adds	r3, #32
 80032a8:	2100      	movs	r1, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fba6 	bl	80039fc <RCCEx_PLLSAI2_Config>
 80032b0:	4603      	mov	r3, r0
 80032b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032b4:	e003      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	74fb      	strb	r3, [r7, #19]
      break;
 80032ba:	e000      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80032bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032be:	7cfb      	ldrb	r3, [r7, #19]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10b      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032c4:	4b76      	ldr	r3, [pc, #472]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032d2:	4973      	ldr	r1, [pc, #460]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032da:	e001      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032dc:	7cfb      	ldrb	r3, [r7, #19]
 80032de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d041      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032f4:	d02a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032fa:	d824      	bhi.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003300:	d008      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003306:	d81e      	bhi.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800330c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003310:	d010      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003312:	e018      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003314:	4b62      	ldr	r3, [pc, #392]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	4a61      	ldr	r2, [pc, #388]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003320:	e015      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3304      	adds	r3, #4
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fa73 	bl	8003814 <RCCEx_PLLSAI1_Config>
 800332e:	4603      	mov	r3, r0
 8003330:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003332:	e00c      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3320      	adds	r3, #32
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fb5e 	bl	80039fc <RCCEx_PLLSAI2_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003344:	e003      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	74fb      	strb	r3, [r7, #19]
      break;
 800334a:	e000      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800334c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800334e:	7cfb      	ldrb	r3, [r7, #19]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10b      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003354:	4b52      	ldr	r3, [pc, #328]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003362:	494f      	ldr	r1, [pc, #316]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800336a:	e001      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80a0 	beq.w	80034be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800337e:	2300      	movs	r3, #0
 8003380:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003382:	4b47      	ldr	r3, [pc, #284]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003392:	2300      	movs	r3, #0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00d      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003398:	4b41      	ldr	r3, [pc, #260]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339c:	4a40      	ldr	r2, [pc, #256]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a2:	6593      	str	r3, [r2, #88]	; 0x58
 80033a4:	4b3e      	ldr	r3, [pc, #248]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b0:	2301      	movs	r3, #1
 80033b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033b4:	4b3b      	ldr	r3, [pc, #236]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a3a      	ldr	r2, [pc, #232]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033c0:	f7fd ff5e 	bl	8001280 <HAL_GetTick>
 80033c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033c6:	e009      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c8:	f7fd ff5a 	bl	8001280 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d902      	bls.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	74fb      	strb	r3, [r7, #19]
        break;
 80033da:	e005      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033dc:	4b31      	ldr	r3, [pc, #196]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0ef      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d15c      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033ee:	4b2c      	ldr	r3, [pc, #176]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01f      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	429a      	cmp	r2, r3
 800340a:	d019      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800340c:	4b24      	ldr	r3, [pc, #144]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003416:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003418:	4b21      	ldr	r3, [pc, #132]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341e:	4a20      	ldr	r2, [pc, #128]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003428:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342e:	4a1c      	ldr	r2, [pc, #112]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003438:	4a19      	ldr	r2, [pc, #100]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d016      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344a:	f7fd ff19 	bl	8001280 <HAL_GetTick>
 800344e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003450:	e00b      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003452:	f7fd ff15 	bl	8001280 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003460:	4293      	cmp	r3, r2
 8003462:	d902      	bls.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	74fb      	strb	r3, [r7, #19]
            break;
 8003468:	e006      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346a:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ec      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003478:	7cfb      	ldrb	r3, [r7, #19]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10c      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800347e:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003484:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800348e:	4904      	ldr	r1, [pc, #16]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003496:	e009      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003498:	7cfb      	ldrb	r3, [r7, #19]
 800349a:	74bb      	strb	r3, [r7, #18]
 800349c:	e006      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ac:	7c7b      	ldrb	r3, [r7, #17]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d105      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b2:	4b9e      	ldr	r3, [pc, #632]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b6:	4a9d      	ldr	r2, [pc, #628]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034ca:	4b98      	ldr	r3, [pc, #608]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d0:	f023 0203 	bic.w	r2, r3, #3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d8:	4994      	ldr	r1, [pc, #592]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034ec:	4b8f      	ldr	r3, [pc, #572]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f2:	f023 020c 	bic.w	r2, r3, #12
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fa:	498c      	ldr	r1, [pc, #560]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800350e:	4b87      	ldr	r3, [pc, #540]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003514:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	4983      	ldr	r1, [pc, #524]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003530:	4b7e      	ldr	r3, [pc, #504]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	497b      	ldr	r1, [pc, #492]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003552:	4b76      	ldr	r3, [pc, #472]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003558:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003560:	4972      	ldr	r1, [pc, #456]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003574:	4b6d      	ldr	r3, [pc, #436]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003582:	496a      	ldr	r1, [pc, #424]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003596:	4b65      	ldr	r3, [pc, #404]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a4:	4961      	ldr	r1, [pc, #388]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035b8:	4b5c      	ldr	r3, [pc, #368]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c6:	4959      	ldr	r1, [pc, #356]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035da:	4b54      	ldr	r3, [pc, #336]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e8:	4950      	ldr	r1, [pc, #320]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035fc:	4b4b      	ldr	r3, [pc, #300]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360a:	4948      	ldr	r1, [pc, #288]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800361e:	4b43      	ldr	r3, [pc, #268]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362c:	493f      	ldr	r1, [pc, #252]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d028      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003640:	4b3a      	ldr	r3, [pc, #232]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003646:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800364e:	4937      	ldr	r1, [pc, #220]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800365a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800365e:	d106      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003660:	4b32      	ldr	r3, [pc, #200]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a31      	ldr	r2, [pc, #196]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800366a:	60d3      	str	r3, [r2, #12]
 800366c:	e011      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003672:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003676:	d10c      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	2101      	movs	r1, #1
 800367e:	4618      	mov	r0, r3
 8003680:	f000 f8c8 	bl	8003814 <RCCEx_PLLSAI1_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003688:	7cfb      	ldrb	r3, [r7, #19]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800368e:	7cfb      	ldrb	r3, [r7, #19]
 8003690:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d028      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800369e:	4b23      	ldr	r3, [pc, #140]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ac:	491f      	ldr	r1, [pc, #124]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036bc:	d106      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036be:	4b1b      	ldr	r3, [pc, #108]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	4a1a      	ldr	r2, [pc, #104]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036c8:	60d3      	str	r3, [r2, #12]
 80036ca:	e011      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3304      	adds	r3, #4
 80036da:	2101      	movs	r1, #1
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 f899 	bl	8003814 <RCCEx_PLLSAI1_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036e6:	7cfb      	ldrb	r3, [r7, #19]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d02b      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003702:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370a:	4908      	ldr	r1, [pc, #32]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800371a:	d109      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4a02      	ldr	r2, [pc, #8]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003726:	60d3      	str	r3, [r2, #12]
 8003728:	e014      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800372a:	bf00      	nop
 800372c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003734:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003738:	d10c      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3304      	adds	r3, #4
 800373e:	2101      	movs	r1, #1
 8003740:	4618      	mov	r0, r3
 8003742:	f000 f867 	bl	8003814 <RCCEx_PLLSAI1_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800374a:	7cfb      	ldrb	r3, [r7, #19]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003750:	7cfb      	ldrb	r3, [r7, #19]
 8003752:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d02f      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003760:	4b2b      	ldr	r3, [pc, #172]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800376e:	4928      	ldr	r1, [pc, #160]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800377a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800377e:	d10d      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3304      	adds	r3, #4
 8003784:	2102      	movs	r1, #2
 8003786:	4618      	mov	r0, r3
 8003788:	f000 f844 	bl	8003814 <RCCEx_PLLSAI1_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003790:	7cfb      	ldrb	r3, [r7, #19]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d014      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003796:	7cfb      	ldrb	r3, [r7, #19]
 8003798:	74bb      	strb	r3, [r7, #18]
 800379a:	e011      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037a4:	d10c      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3320      	adds	r3, #32
 80037aa:	2102      	movs	r1, #2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 f925 	bl	80039fc <RCCEx_PLLSAI2_Config>
 80037b2:	4603      	mov	r3, r0
 80037b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037b6:	7cfb      	ldrb	r3, [r7, #19]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037cc:	4b10      	ldr	r3, [pc, #64]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037da:	490d      	ldr	r1, [pc, #52]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00b      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037ee:	4b08      	ldr	r3, [pc, #32]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037fe:	4904      	ldr	r1, [pc, #16]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003806:	7cbb      	ldrb	r3, [r7, #18]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40021000 	.word	0x40021000

08003814 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003822:	4b75      	ldr	r3, [pc, #468]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d018      	beq.n	8003860 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800382e:	4b72      	ldr	r3, [pc, #456]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f003 0203 	and.w	r2, r3, #3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d10d      	bne.n	800385a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
       ||
 8003842:	2b00      	cmp	r3, #0
 8003844:	d009      	beq.n	800385a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003846:	4b6c      	ldr	r3, [pc, #432]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
       ||
 8003856:	429a      	cmp	r2, r3
 8003858:	d047      	beq.n	80038ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
 800385e:	e044      	b.n	80038ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b03      	cmp	r3, #3
 8003866:	d018      	beq.n	800389a <RCCEx_PLLSAI1_Config+0x86>
 8003868:	2b03      	cmp	r3, #3
 800386a:	d825      	bhi.n	80038b8 <RCCEx_PLLSAI1_Config+0xa4>
 800386c:	2b01      	cmp	r3, #1
 800386e:	d002      	beq.n	8003876 <RCCEx_PLLSAI1_Config+0x62>
 8003870:	2b02      	cmp	r3, #2
 8003872:	d009      	beq.n	8003888 <RCCEx_PLLSAI1_Config+0x74>
 8003874:	e020      	b.n	80038b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003876:	4b60      	ldr	r3, [pc, #384]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d11d      	bne.n	80038be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003886:	e01a      	b.n	80038be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003888:	4b5b      	ldr	r3, [pc, #364]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003890:	2b00      	cmp	r3, #0
 8003892:	d116      	bne.n	80038c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003898:	e013      	b.n	80038c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800389a:	4b57      	ldr	r3, [pc, #348]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10f      	bne.n	80038c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038a6:	4b54      	ldr	r3, [pc, #336]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038b6:	e006      	b.n	80038c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
      break;
 80038bc:	e004      	b.n	80038c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038be:	bf00      	nop
 80038c0:	e002      	b.n	80038c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10d      	bne.n	80038ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038ce:	4b4a      	ldr	r3, [pc, #296]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6819      	ldr	r1, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	3b01      	subs	r3, #1
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	430b      	orrs	r3, r1
 80038e4:	4944      	ldr	r1, [pc, #272]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d17d      	bne.n	80039ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038f0:	4b41      	ldr	r3, [pc, #260]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a40      	ldr	r2, [pc, #256]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038fc:	f7fd fcc0 	bl	8001280 <HAL_GetTick>
 8003900:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003902:	e009      	b.n	8003918 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003904:	f7fd fcbc 	bl	8001280 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d902      	bls.n	8003918 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	73fb      	strb	r3, [r7, #15]
        break;
 8003916:	e005      	b.n	8003924 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003918:	4b37      	ldr	r3, [pc, #220]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1ef      	bne.n	8003904 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d160      	bne.n	80039ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d111      	bne.n	8003954 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003930:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6892      	ldr	r2, [r2, #8]
 8003940:	0211      	lsls	r1, r2, #8
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	68d2      	ldr	r2, [r2, #12]
 8003946:	0912      	lsrs	r2, r2, #4
 8003948:	0452      	lsls	r2, r2, #17
 800394a:	430a      	orrs	r2, r1
 800394c:	492a      	ldr	r1, [pc, #168]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394e:	4313      	orrs	r3, r2
 8003950:	610b      	str	r3, [r1, #16]
 8003952:	e027      	b.n	80039a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d112      	bne.n	8003980 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800395a:	4b27      	ldr	r3, [pc, #156]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003962:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6892      	ldr	r2, [r2, #8]
 800396a:	0211      	lsls	r1, r2, #8
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6912      	ldr	r2, [r2, #16]
 8003970:	0852      	lsrs	r2, r2, #1
 8003972:	3a01      	subs	r2, #1
 8003974:	0552      	lsls	r2, r2, #21
 8003976:	430a      	orrs	r2, r1
 8003978:	491f      	ldr	r1, [pc, #124]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397a:	4313      	orrs	r3, r2
 800397c:	610b      	str	r3, [r1, #16]
 800397e:	e011      	b.n	80039a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003980:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003988:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6892      	ldr	r2, [r2, #8]
 8003990:	0211      	lsls	r1, r2, #8
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6952      	ldr	r2, [r2, #20]
 8003996:	0852      	lsrs	r2, r2, #1
 8003998:	3a01      	subs	r2, #1
 800399a:	0652      	lsls	r2, r2, #25
 800399c:	430a      	orrs	r2, r1
 800399e:	4916      	ldr	r1, [pc, #88]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039a4:	4b14      	ldr	r3, [pc, #80]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a13      	ldr	r2, [pc, #76]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b0:	f7fd fc66 	bl	8001280 <HAL_GetTick>
 80039b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039b6:	e009      	b.n	80039cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039b8:	f7fd fc62 	bl	8001280 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d902      	bls.n	80039cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	73fb      	strb	r3, [r7, #15]
          break;
 80039ca:	e005      	b.n	80039d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0ef      	beq.n	80039b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	4904      	ldr	r1, [pc, #16]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000

080039fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a0a:	4b6a      	ldr	r3, [pc, #424]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d018      	beq.n	8003a48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a16:	4b67      	ldr	r3, [pc, #412]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f003 0203 	and.w	r2, r3, #3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d10d      	bne.n	8003a42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
       ||
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a2e:	4b61      	ldr	r3, [pc, #388]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	091b      	lsrs	r3, r3, #4
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d047      	beq.n	8003ad2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
 8003a46:	e044      	b.n	8003ad2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d018      	beq.n	8003a82 <RCCEx_PLLSAI2_Config+0x86>
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d825      	bhi.n	8003aa0 <RCCEx_PLLSAI2_Config+0xa4>
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d002      	beq.n	8003a5e <RCCEx_PLLSAI2_Config+0x62>
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d009      	beq.n	8003a70 <RCCEx_PLLSAI2_Config+0x74>
 8003a5c:	e020      	b.n	8003aa0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a5e:	4b55      	ldr	r3, [pc, #340]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d11d      	bne.n	8003aa6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a6e:	e01a      	b.n	8003aa6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a70:	4b50      	ldr	r3, [pc, #320]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d116      	bne.n	8003aaa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a80:	e013      	b.n	8003aaa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a82:	4b4c      	ldr	r3, [pc, #304]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10f      	bne.n	8003aae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a8e:	4b49      	ldr	r3, [pc, #292]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a9e:	e006      	b.n	8003aae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa4:	e004      	b.n	8003ab0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e002      	b.n	8003ab0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003aae:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10d      	bne.n	8003ad2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ab6:	4b3f      	ldr	r3, [pc, #252]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6819      	ldr	r1, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	430b      	orrs	r3, r1
 8003acc:	4939      	ldr	r1, [pc, #228]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d167      	bne.n	8003ba8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ad8:	4b36      	ldr	r3, [pc, #216]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a35      	ldr	r2, [pc, #212]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae4:	f7fd fbcc 	bl	8001280 <HAL_GetTick>
 8003ae8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aea:	e009      	b.n	8003b00 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003aec:	f7fd fbc8 	bl	8001280 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d902      	bls.n	8003b00 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	73fb      	strb	r3, [r7, #15]
        break;
 8003afe:	e005      	b.n	8003b0c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b00:	4b2c      	ldr	r3, [pc, #176]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ef      	bne.n	8003aec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d14a      	bne.n	8003ba8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d111      	bne.n	8003b3c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b18:	4b26      	ldr	r3, [pc, #152]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6892      	ldr	r2, [r2, #8]
 8003b28:	0211      	lsls	r1, r2, #8
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68d2      	ldr	r2, [r2, #12]
 8003b2e:	0912      	lsrs	r2, r2, #4
 8003b30:	0452      	lsls	r2, r2, #17
 8003b32:	430a      	orrs	r2, r1
 8003b34:	491f      	ldr	r1, [pc, #124]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	614b      	str	r3, [r1, #20]
 8003b3a:	e011      	b.n	8003b60 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b3c:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6892      	ldr	r2, [r2, #8]
 8003b4c:	0211      	lsls	r1, r2, #8
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6912      	ldr	r2, [r2, #16]
 8003b52:	0852      	lsrs	r2, r2, #1
 8003b54:	3a01      	subs	r2, #1
 8003b56:	0652      	lsls	r2, r2, #25
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	4916      	ldr	r1, [pc, #88]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b60:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a13      	ldr	r2, [pc, #76]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6c:	f7fd fb88 	bl	8001280 <HAL_GetTick>
 8003b70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b72:	e009      	b.n	8003b88 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b74:	f7fd fb84 	bl	8001280 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d902      	bls.n	8003b88 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	73fb      	strb	r3, [r7, #15]
          break;
 8003b86:	e005      	b.n	8003b94 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b88:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0ef      	beq.n	8003b74 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	4904      	ldr	r1, [pc, #16]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e049      	b.n	8003c5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd f94a 	bl	8000e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	f000 fa1c 	bl	8004034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d001      	beq.n	8003c80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e04f      	b.n	8003d20 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a23      	ldr	r2, [pc, #140]	; (8003d2c <HAL_TIM_Base_Start_IT+0xc4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01d      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x76>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003caa:	d018      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x76>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1f      	ldr	r2, [pc, #124]	; (8003d30 <HAL_TIM_Base_Start_IT+0xc8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x76>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1e      	ldr	r2, [pc, #120]	; (8003d34 <HAL_TIM_Base_Start_IT+0xcc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00e      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x76>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a1c      	ldr	r2, [pc, #112]	; (8003d38 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d009      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x76>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1b      	ldr	r2, [pc, #108]	; (8003d3c <HAL_TIM_Base_Start_IT+0xd4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d004      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x76>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a19      	ldr	r2, [pc, #100]	; (8003d40 <HAL_TIM_Base_Start_IT+0xd8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d115      	bne.n	8003d0a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b06      	cmp	r3, #6
 8003cee:	d015      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0xb4>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf6:	d011      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d08:	e008      	b.n	8003d1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0201 	orr.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	e000      	b.n	8003d1e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40000400 	.word	0x40000400
 8003d34:	40000800 	.word	0x40000800
 8003d38:	40000c00 	.word	0x40000c00
 8003d3c:	40013400 	.word	0x40013400
 8003d40:	40014000 	.word	0x40014000
 8003d44:	00010007 	.word	0x00010007

08003d48 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0201 	bic.w	r2, r2, #1
 8003d5e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6a1a      	ldr	r2, [r3, #32]
 8003d66:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10f      	bne.n	8003d90 <HAL_TIM_Base_Stop_IT+0x48>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6a1a      	ldr	r2, [r3, #32]
 8003d76:	f240 4344 	movw	r3, #1092	; 0x444
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d107      	bne.n	8003d90 <HAL_TIM_Base_Stop_IT+0x48>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0201 	bic.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d122      	bne.n	8003e02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d11b      	bne.n	8003e02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f06f 0202 	mvn.w	r2, #2
 8003dd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f003 0303 	and.w	r3, r3, #3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f905 	bl	8003ff8 <HAL_TIM_IC_CaptureCallback>
 8003dee:	e005      	b.n	8003dfc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f8f7 	bl	8003fe4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f908 	bl	800400c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d122      	bne.n	8003e56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d11b      	bne.n	8003e56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f06f 0204 	mvn.w	r2, #4
 8003e26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f8db 	bl	8003ff8 <HAL_TIM_IC_CaptureCallback>
 8003e42:	e005      	b.n	8003e50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f8cd 	bl	8003fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f8de 	bl	800400c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d122      	bne.n	8003eaa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d11b      	bne.n	8003eaa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f06f 0208 	mvn.w	r2, #8
 8003e7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2204      	movs	r2, #4
 8003e80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f8b1 	bl	8003ff8 <HAL_TIM_IC_CaptureCallback>
 8003e96:	e005      	b.n	8003ea4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f8a3 	bl	8003fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f8b4 	bl	800400c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	2b10      	cmp	r3, #16
 8003eb6:	d122      	bne.n	8003efe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2b10      	cmp	r3, #16
 8003ec4:	d11b      	bne.n	8003efe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f06f 0210 	mvn.w	r2, #16
 8003ece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2208      	movs	r2, #8
 8003ed4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f887 	bl	8003ff8 <HAL_TIM_IC_CaptureCallback>
 8003eea:	e005      	b.n	8003ef8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f879 	bl	8003fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f88a 	bl	800400c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d10e      	bne.n	8003f2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d107      	bne.n	8003f2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f06f 0201 	mvn.w	r2, #1
 8003f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7fc fd79 	bl	8000a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f34:	2b80      	cmp	r3, #128	; 0x80
 8003f36:	d10e      	bne.n	8003f56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	2b80      	cmp	r3, #128	; 0x80
 8003f44:	d107      	bne.n	8003f56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f99b 	bl	800428c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f64:	d10e      	bne.n	8003f84 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f70:	2b80      	cmp	r3, #128	; 0x80
 8003f72:	d107      	bne.n	8003f84 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f98e 	bl	80042a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8e:	2b40      	cmp	r3, #64	; 0x40
 8003f90:	d10e      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	d107      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f838 	bl	8004020 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b20      	cmp	r3, #32
 8003fbc:	d10e      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d107      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0220 	mvn.w	r2, #32
 8003fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f94e 	bl	8004278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fdc:	bf00      	nop
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a40      	ldr	r2, [pc, #256]	; (8004148 <TIM_Base_SetConfig+0x114>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d013      	beq.n	8004074 <TIM_Base_SetConfig+0x40>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004052:	d00f      	beq.n	8004074 <TIM_Base_SetConfig+0x40>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a3d      	ldr	r2, [pc, #244]	; (800414c <TIM_Base_SetConfig+0x118>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d00b      	beq.n	8004074 <TIM_Base_SetConfig+0x40>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a3c      	ldr	r2, [pc, #240]	; (8004150 <TIM_Base_SetConfig+0x11c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d007      	beq.n	8004074 <TIM_Base_SetConfig+0x40>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a3b      	ldr	r2, [pc, #236]	; (8004154 <TIM_Base_SetConfig+0x120>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d003      	beq.n	8004074 <TIM_Base_SetConfig+0x40>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a3a      	ldr	r2, [pc, #232]	; (8004158 <TIM_Base_SetConfig+0x124>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d108      	bne.n	8004086 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a2f      	ldr	r2, [pc, #188]	; (8004148 <TIM_Base_SetConfig+0x114>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d01f      	beq.n	80040ce <TIM_Base_SetConfig+0x9a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004094:	d01b      	beq.n	80040ce <TIM_Base_SetConfig+0x9a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a2c      	ldr	r2, [pc, #176]	; (800414c <TIM_Base_SetConfig+0x118>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d017      	beq.n	80040ce <TIM_Base_SetConfig+0x9a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a2b      	ldr	r2, [pc, #172]	; (8004150 <TIM_Base_SetConfig+0x11c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d013      	beq.n	80040ce <TIM_Base_SetConfig+0x9a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a2a      	ldr	r2, [pc, #168]	; (8004154 <TIM_Base_SetConfig+0x120>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d00f      	beq.n	80040ce <TIM_Base_SetConfig+0x9a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a29      	ldr	r2, [pc, #164]	; (8004158 <TIM_Base_SetConfig+0x124>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00b      	beq.n	80040ce <TIM_Base_SetConfig+0x9a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a28      	ldr	r2, [pc, #160]	; (800415c <TIM_Base_SetConfig+0x128>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d007      	beq.n	80040ce <TIM_Base_SetConfig+0x9a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a27      	ldr	r2, [pc, #156]	; (8004160 <TIM_Base_SetConfig+0x12c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d003      	beq.n	80040ce <TIM_Base_SetConfig+0x9a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a26      	ldr	r2, [pc, #152]	; (8004164 <TIM_Base_SetConfig+0x130>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d108      	bne.n	80040e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a10      	ldr	r2, [pc, #64]	; (8004148 <TIM_Base_SetConfig+0x114>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00f      	beq.n	800412c <TIM_Base_SetConfig+0xf8>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a12      	ldr	r2, [pc, #72]	; (8004158 <TIM_Base_SetConfig+0x124>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00b      	beq.n	800412c <TIM_Base_SetConfig+0xf8>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a11      	ldr	r2, [pc, #68]	; (800415c <TIM_Base_SetConfig+0x128>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d007      	beq.n	800412c <TIM_Base_SetConfig+0xf8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a10      	ldr	r2, [pc, #64]	; (8004160 <TIM_Base_SetConfig+0x12c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d003      	beq.n	800412c <TIM_Base_SetConfig+0xf8>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a0f      	ldr	r2, [pc, #60]	; (8004164 <TIM_Base_SetConfig+0x130>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d103      	bne.n	8004134 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	615a      	str	r2, [r3, #20]
}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40000400 	.word	0x40000400
 8004150:	40000800 	.word	0x40000800
 8004154:	40000c00 	.word	0x40000c00
 8004158:	40013400 	.word	0x40013400
 800415c:	40014000 	.word	0x40014000
 8004160:	40014400 	.word	0x40014400
 8004164:	40014800 	.word	0x40014800

08004168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800417c:	2302      	movs	r3, #2
 800417e:	e068      	b.n	8004252 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a2e      	ldr	r2, [pc, #184]	; (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d004      	beq.n	80041b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a2d      	ldr	r2, [pc, #180]	; (8004264 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d108      	bne.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80041ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1e      	ldr	r2, [pc, #120]	; (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01d      	beq.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f2:	d018      	beq.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1b      	ldr	r2, [pc, #108]	; (8004268 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1a      	ldr	r2, [pc, #104]	; (800426c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00e      	beq.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a18      	ldr	r2, [pc, #96]	; (8004270 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d009      	beq.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a13      	ldr	r2, [pc, #76]	; (8004264 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a14      	ldr	r2, [pc, #80]	; (8004274 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d10c      	bne.n	8004240 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800422c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	4313      	orrs	r3, r2
 8004236:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40012c00 	.word	0x40012c00
 8004264:	40013400 	.word	0x40013400
 8004268:	40000400 	.word	0x40000400
 800426c:	40000800 	.word	0x40000800
 8004270:	40000c00 	.word	0x40000c00
 8004274:	40014000 	.word	0x40014000

08004278 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e040      	b.n	8004348 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fc fdf4 	bl	8000ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2224      	movs	r2, #36	; 0x24
 80042e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0201 	bic.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fc94 	bl	8004c20 <UART_SetConfig>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e022      	b.n	8004348 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 ff40 	bl	8005190 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800431e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800432e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 ffc7 	bl	80052d4 <UART_CheckIdleState>
 8004346:	4603      	mov	r3, r0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08a      	sub	sp, #40	; 0x28
 8004354:	af02      	add	r7, sp, #8
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	4613      	mov	r3, r2
 800435e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004364:	2b20      	cmp	r3, #32
 8004366:	f040 8082 	bne.w	800446e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_UART_Transmit+0x26>
 8004370:	88fb      	ldrh	r3, [r7, #6]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e07a      	b.n	8004470 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_UART_Transmit+0x38>
 8004384:	2302      	movs	r3, #2
 8004386:	e073      	b.n	8004470 <HAL_UART_Transmit+0x120>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2221      	movs	r2, #33	; 0x21
 800439c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800439e:	f7fc ff6f 	bl	8001280 <HAL_GetTick>
 80043a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	88fa      	ldrh	r2, [r7, #6]
 80043a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	88fa      	ldrh	r2, [r7, #6]
 80043b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043bc:	d108      	bne.n	80043d0 <HAL_UART_Transmit+0x80>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d104      	bne.n	80043d0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	e003      	b.n	80043d8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80043e0:	e02d      	b.n	800443e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2200      	movs	r2, #0
 80043ea:	2180      	movs	r1, #128	; 0x80
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 ffba 	bl	8005366 <UART_WaitOnFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e039      	b.n	8004470 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10b      	bne.n	800441a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	881a      	ldrh	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800440e:	b292      	uxth	r2, r2
 8004410:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	3302      	adds	r3, #2
 8004416:	61bb      	str	r3, [r7, #24]
 8004418:	e008      	b.n	800442c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	781a      	ldrb	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	b292      	uxth	r2, r2
 8004424:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	3301      	adds	r3, #1
 800442a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1cb      	bne.n	80043e2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2200      	movs	r2, #0
 8004452:	2140      	movs	r1, #64	; 0x40
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 ff86 	bl	8005366 <UART_WaitOnFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e005      	b.n	8004470 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	e000      	b.n	8004470 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800446e:	2302      	movs	r3, #2
  }
}
 8004470:	4618      	mov	r0, r3
 8004472:	3720      	adds	r7, #32
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b08a      	sub	sp, #40	; 0x28
 800447c:	af02      	add	r7, sp, #8
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	4613      	mov	r3, r2
 8004486:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800448c:	2b20      	cmp	r3, #32
 800448e:	f040 80bf 	bne.w	8004610 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <HAL_UART_Receive+0x26>
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e0b7      	b.n	8004612 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_UART_Receive+0x38>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e0b0      	b.n	8004612 <HAL_UART_Receive+0x19a>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2222      	movs	r2, #34	; 0x22
 80044c4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044cc:	f7fc fed8 	bl	8001280 <HAL_GetTick>
 80044d0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	88fa      	ldrh	r2, [r7, #6]
 80044d6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	88fa      	ldrh	r2, [r7, #6]
 80044de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ea:	d10e      	bne.n	800450a <HAL_UART_Receive+0x92>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d105      	bne.n	8004500 <HAL_UART_Receive+0x88>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80044fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044fe:	e02d      	b.n	800455c <HAL_UART_Receive+0xe4>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	22ff      	movs	r2, #255	; 0xff
 8004504:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004508:	e028      	b.n	800455c <HAL_UART_Receive+0xe4>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10d      	bne.n	800452e <HAL_UART_Receive+0xb6>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d104      	bne.n	8004524 <HAL_UART_Receive+0xac>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	22ff      	movs	r2, #255	; 0xff
 800451e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004522:	e01b      	b.n	800455c <HAL_UART_Receive+0xe4>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	227f      	movs	r2, #127	; 0x7f
 8004528:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800452c:	e016      	b.n	800455c <HAL_UART_Receive+0xe4>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004536:	d10d      	bne.n	8004554 <HAL_UART_Receive+0xdc>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <HAL_UART_Receive+0xd2>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	227f      	movs	r2, #127	; 0x7f
 8004544:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004548:	e008      	b.n	800455c <HAL_UART_Receive+0xe4>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	223f      	movs	r2, #63	; 0x3f
 800454e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004552:	e003      	b.n	800455c <HAL_UART_Receive+0xe4>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004562:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456c:	d108      	bne.n	8004580 <HAL_UART_Receive+0x108>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d104      	bne.n	8004580 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	e003      	b.n	8004588 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004590:	e033      	b.n	80045fa <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2200      	movs	r2, #0
 800459a:	2120      	movs	r1, #32
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fee2 	bl	8005366 <UART_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e032      	b.n	8004612 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10c      	bne.n	80045cc <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	8a7b      	ldrh	r3, [r7, #18]
 80045bc:	4013      	ands	r3, r2
 80045be:	b29a      	uxth	r2, r3
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	3302      	adds	r3, #2
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	e00d      	b.n	80045e8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	8a7b      	ldrh	r3, [r7, #18]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	4013      	ands	r3, r2
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	3301      	adds	r3, #1
 80045e6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1c5      	bne.n	8004592 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2220      	movs	r2, #32
 800460a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	e000      	b.n	8004612 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004610:	2302      	movs	r3, #2
  }
}
 8004612:	4618      	mov	r0, r3
 8004614:	3720      	adds	r7, #32
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b0ba      	sub	sp, #232	; 0xe8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004642:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004646:	f640 030f 	movw	r3, #2063	; 0x80f
 800464a:	4013      	ands	r3, r2
 800464c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d115      	bne.n	8004684 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00f      	beq.n	8004684 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 82a6 	beq.w	8004bc6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	4798      	blx	r3
      }
      return;
 8004682:	e2a0      	b.n	8004bc6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004684:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 8117 	beq.w	80048bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800468e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800469a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800469e:	4b85      	ldr	r3, [pc, #532]	; (80048b4 <HAL_UART_IRQHandler+0x298>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 810a 	beq.w	80048bc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d011      	beq.n	80046d8 <HAL_UART_IRQHandler+0xbc>
 80046b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00b      	beq.n	80046d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2201      	movs	r2, #1
 80046c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ce:	f043 0201 	orr.w	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d011      	beq.n	8004708 <HAL_UART_IRQHandler+0xec>
 80046e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00b      	beq.n	8004708 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2202      	movs	r2, #2
 80046f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046fe:	f043 0204 	orr.w	r2, r3, #4
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d011      	beq.n	8004738 <HAL_UART_IRQHandler+0x11c>
 8004714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00b      	beq.n	8004738 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2204      	movs	r2, #4
 8004726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800472e:	f043 0202 	orr.w	r2, r3, #2
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b00      	cmp	r3, #0
 8004742:	d017      	beq.n	8004774 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b00      	cmp	r3, #0
 800474e:	d105      	bne.n	800475c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004754:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00b      	beq.n	8004774 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2208      	movs	r2, #8
 8004762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800476a:	f043 0208 	orr.w	r2, r3, #8
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800477c:	2b00      	cmp	r3, #0
 800477e:	d012      	beq.n	80047a6 <HAL_UART_IRQHandler+0x18a>
 8004780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004784:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00c      	beq.n	80047a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004794:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800479c:	f043 0220 	orr.w	r2, r3, #32
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 820c 	beq.w	8004bca <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00d      	beq.n	80047da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d007      	beq.n	80047da <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ee:	2b40      	cmp	r3, #64	; 0x40
 80047f0:	d005      	beq.n	80047fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d04f      	beq.n	800489e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fe75 	bl	80054ee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480e:	2b40      	cmp	r3, #64	; 0x40
 8004810:	d141      	bne.n	8004896 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3308      	adds	r3, #8
 8004818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004820:	e853 3f00 	ldrex	r3, [r3]
 8004824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800482c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004830:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3308      	adds	r3, #8
 800483a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800483e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004842:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800484a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800484e:	e841 2300 	strex	r3, r2, [r1]
 8004852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004856:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1d9      	bne.n	8004812 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	2b00      	cmp	r3, #0
 8004864:	d013      	beq.n	800488e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486a:	4a13      	ldr	r2, [pc, #76]	; (80048b8 <HAL_UART_IRQHandler+0x29c>)
 800486c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004872:	4618      	mov	r0, r3
 8004874:	f7fc fe5f 	bl	8001536 <HAL_DMA_Abort_IT>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d017      	beq.n	80048ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004888:	4610      	mov	r0, r2
 800488a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800488c:	e00f      	b.n	80048ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f9b0 	bl	8004bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004894:	e00b      	b.n	80048ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f9ac 	bl	8004bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800489c:	e007      	b.n	80048ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f9a8 	bl	8004bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80048ac:	e18d      	b.n	8004bca <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ae:	bf00      	nop
    return;
 80048b0:	e18b      	b.n	8004bca <HAL_UART_IRQHandler+0x5ae>
 80048b2:	bf00      	nop
 80048b4:	04000120 	.word	0x04000120
 80048b8:	080055b5 	.word	0x080055b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	f040 8146 	bne.w	8004b52 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 813f 	beq.w	8004b52 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 8138 	beq.w	8004b52 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2210      	movs	r2, #16
 80048e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f4:	2b40      	cmp	r3, #64	; 0x40
 80048f6:	f040 80b4 	bne.w	8004a62 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004906:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 815f 	beq.w	8004bce <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800491a:	429a      	cmp	r2, r3
 800491c:	f080 8157 	bcs.w	8004bce <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004926:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b00      	cmp	r3, #0
 8004938:	f040 8085 	bne.w	8004a46 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004950:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004958:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	461a      	mov	r2, r3
 8004962:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004966:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800496a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004972:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004976:	e841 2300 	strex	r3, r2, [r1]
 800497a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800497e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1da      	bne.n	800493c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3308      	adds	r3, #8
 800498c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004996:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3308      	adds	r3, #8
 80049a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1e1      	bne.n	8004986 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3308      	adds	r3, #8
 80049c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3308      	adds	r3, #8
 80049e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e3      	bne.n	80049c2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2220      	movs	r2, #32
 80049fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a0e:	e853 3f00 	ldrex	r3, [r3]
 8004a12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a16:	f023 0310 	bic.w	r3, r3, #16
 8004a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a28:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a2a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e4      	bne.n	8004a06 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fc fd3a 	bl	80014ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	4619      	mov	r1, r3
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f8d4 	bl	8004c08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a60:	e0b5      	b.n	8004bce <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 80a7 	beq.w	8004bd2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004a84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 80a2 	beq.w	8004bd2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a96:	e853 3f00 	ldrex	r3, [r3]
 8004a9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004aa2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ab6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e4      	bne.n	8004a8e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3308      	adds	r3, #8
 8004aca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	f023 0301 	bic.w	r3, r3, #1
 8004ada:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3308      	adds	r3, #8
 8004ae4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ae8:	633a      	str	r2, [r7, #48]	; 0x30
 8004aea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e3      	bne.n	8004ac4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	e853 3f00 	ldrex	r3, [r3]
 8004b1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f023 0310 	bic.w	r3, r3, #16
 8004b22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b30:	61fb      	str	r3, [r7, #28]
 8004b32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	69b9      	ldr	r1, [r7, #24]
 8004b36:	69fa      	ldr	r2, [r7, #28]
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e4      	bne.n	8004b0e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b48:	4619      	mov	r1, r3
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f85c 	bl	8004c08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b50:	e03f      	b.n	8004bd2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00e      	beq.n	8004b7c <HAL_UART_IRQHandler+0x560>
 8004b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d008      	beq.n	8004b7c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fd5d 	bl	8005634 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b7a:	e02d      	b.n	8004bd8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00e      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d008      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01c      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	4798      	blx	r3
    }
    return;
 8004ba4:	e017      	b.n	8004bd6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d012      	beq.n	8004bd8 <HAL_UART_IRQHandler+0x5bc>
 8004bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00c      	beq.n	8004bd8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fd0e 	bl	80055e0 <UART_EndTransmit_IT>
    return;
 8004bc4:	e008      	b.n	8004bd8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004bc6:	bf00      	nop
 8004bc8:	e006      	b.n	8004bd8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004bca:	bf00      	nop
 8004bcc:	e004      	b.n	8004bd8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004bce:	bf00      	nop
 8004bd0:	e002      	b.n	8004bd8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004bd2:	bf00      	nop
 8004bd4:	e000      	b.n	8004bd8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004bd6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004bd8:	37e8      	adds	r7, #232	; 0xe8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop

08004be0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c24:	b08a      	sub	sp, #40	; 0x28
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	4ba4      	ldr	r3, [pc, #656]	; (8004ee0 <UART_SetConfig+0x2c0>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	6812      	ldr	r2, [r2, #0]
 8004c56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c58:	430b      	orrs	r3, r1
 8004c5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a99      	ldr	r2, [pc, #612]	; (8004ee4 <UART_SetConfig+0x2c4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d004      	beq.n	8004c8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a90      	ldr	r2, [pc, #576]	; (8004ee8 <UART_SetConfig+0x2c8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d126      	bne.n	8004cf8 <UART_SetConfig+0xd8>
 8004caa:	4b90      	ldr	r3, [pc, #576]	; (8004eec <UART_SetConfig+0x2cc>)
 8004cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb0:	f003 0303 	and.w	r3, r3, #3
 8004cb4:	2b03      	cmp	r3, #3
 8004cb6:	d81b      	bhi.n	8004cf0 <UART_SetConfig+0xd0>
 8004cb8:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <UART_SetConfig+0xa0>)
 8004cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbe:	bf00      	nop
 8004cc0:	08004cd1 	.word	0x08004cd1
 8004cc4:	08004ce1 	.word	0x08004ce1
 8004cc8:	08004cd9 	.word	0x08004cd9
 8004ccc:	08004ce9 	.word	0x08004ce9
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd6:	e116      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cde:	e112      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004ce0:	2304      	movs	r3, #4
 8004ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce6:	e10e      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004ce8:	2308      	movs	r3, #8
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cee:	e10a      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004cf0:	2310      	movs	r3, #16
 8004cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf6:	e106      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a7c      	ldr	r2, [pc, #496]	; (8004ef0 <UART_SetConfig+0x2d0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d138      	bne.n	8004d74 <UART_SetConfig+0x154>
 8004d02:	4b7a      	ldr	r3, [pc, #488]	; (8004eec <UART_SetConfig+0x2cc>)
 8004d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d08:	f003 030c 	and.w	r3, r3, #12
 8004d0c:	2b0c      	cmp	r3, #12
 8004d0e:	d82d      	bhi.n	8004d6c <UART_SetConfig+0x14c>
 8004d10:	a201      	add	r2, pc, #4	; (adr r2, 8004d18 <UART_SetConfig+0xf8>)
 8004d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d16:	bf00      	nop
 8004d18:	08004d4d 	.word	0x08004d4d
 8004d1c:	08004d6d 	.word	0x08004d6d
 8004d20:	08004d6d 	.word	0x08004d6d
 8004d24:	08004d6d 	.word	0x08004d6d
 8004d28:	08004d5d 	.word	0x08004d5d
 8004d2c:	08004d6d 	.word	0x08004d6d
 8004d30:	08004d6d 	.word	0x08004d6d
 8004d34:	08004d6d 	.word	0x08004d6d
 8004d38:	08004d55 	.word	0x08004d55
 8004d3c:	08004d6d 	.word	0x08004d6d
 8004d40:	08004d6d 	.word	0x08004d6d
 8004d44:	08004d6d 	.word	0x08004d6d
 8004d48:	08004d65 	.word	0x08004d65
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d52:	e0d8      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004d54:	2302      	movs	r3, #2
 8004d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5a:	e0d4      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d62:	e0d0      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004d64:	2308      	movs	r3, #8
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6a:	e0cc      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d72:	e0c8      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a5e      	ldr	r2, [pc, #376]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d125      	bne.n	8004dca <UART_SetConfig+0x1aa>
 8004d7e:	4b5b      	ldr	r3, [pc, #364]	; (8004eec <UART_SetConfig+0x2cc>)
 8004d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d88:	2b30      	cmp	r3, #48	; 0x30
 8004d8a:	d016      	beq.n	8004dba <UART_SetConfig+0x19a>
 8004d8c:	2b30      	cmp	r3, #48	; 0x30
 8004d8e:	d818      	bhi.n	8004dc2 <UART_SetConfig+0x1a2>
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	d00a      	beq.n	8004daa <UART_SetConfig+0x18a>
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d814      	bhi.n	8004dc2 <UART_SetConfig+0x1a2>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <UART_SetConfig+0x182>
 8004d9c:	2b10      	cmp	r3, #16
 8004d9e:	d008      	beq.n	8004db2 <UART_SetConfig+0x192>
 8004da0:	e00f      	b.n	8004dc2 <UART_SetConfig+0x1a2>
 8004da2:	2300      	movs	r3, #0
 8004da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da8:	e0ad      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004daa:	2302      	movs	r3, #2
 8004dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db0:	e0a9      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004db2:	2304      	movs	r3, #4
 8004db4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db8:	e0a5      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004dba:	2308      	movs	r3, #8
 8004dbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc0:	e0a1      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004dc2:	2310      	movs	r3, #16
 8004dc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc8:	e09d      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a4a      	ldr	r2, [pc, #296]	; (8004ef8 <UART_SetConfig+0x2d8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d125      	bne.n	8004e20 <UART_SetConfig+0x200>
 8004dd4:	4b45      	ldr	r3, [pc, #276]	; (8004eec <UART_SetConfig+0x2cc>)
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dde:	2bc0      	cmp	r3, #192	; 0xc0
 8004de0:	d016      	beq.n	8004e10 <UART_SetConfig+0x1f0>
 8004de2:	2bc0      	cmp	r3, #192	; 0xc0
 8004de4:	d818      	bhi.n	8004e18 <UART_SetConfig+0x1f8>
 8004de6:	2b80      	cmp	r3, #128	; 0x80
 8004de8:	d00a      	beq.n	8004e00 <UART_SetConfig+0x1e0>
 8004dea:	2b80      	cmp	r3, #128	; 0x80
 8004dec:	d814      	bhi.n	8004e18 <UART_SetConfig+0x1f8>
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <UART_SetConfig+0x1d8>
 8004df2:	2b40      	cmp	r3, #64	; 0x40
 8004df4:	d008      	beq.n	8004e08 <UART_SetConfig+0x1e8>
 8004df6:	e00f      	b.n	8004e18 <UART_SetConfig+0x1f8>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfe:	e082      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004e00:	2302      	movs	r3, #2
 8004e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e06:	e07e      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004e08:	2304      	movs	r3, #4
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0e:	e07a      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004e10:	2308      	movs	r3, #8
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e16:	e076      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004e18:	2310      	movs	r3, #16
 8004e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e1e:	e072      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a35      	ldr	r2, [pc, #212]	; (8004efc <UART_SetConfig+0x2dc>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d12a      	bne.n	8004e80 <UART_SetConfig+0x260>
 8004e2a:	4b30      	ldr	r3, [pc, #192]	; (8004eec <UART_SetConfig+0x2cc>)
 8004e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e38:	d01a      	beq.n	8004e70 <UART_SetConfig+0x250>
 8004e3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e3e:	d81b      	bhi.n	8004e78 <UART_SetConfig+0x258>
 8004e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e44:	d00c      	beq.n	8004e60 <UART_SetConfig+0x240>
 8004e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e4a:	d815      	bhi.n	8004e78 <UART_SetConfig+0x258>
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <UART_SetConfig+0x238>
 8004e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e54:	d008      	beq.n	8004e68 <UART_SetConfig+0x248>
 8004e56:	e00f      	b.n	8004e78 <UART_SetConfig+0x258>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5e:	e052      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004e60:	2302      	movs	r3, #2
 8004e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e66:	e04e      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004e68:	2304      	movs	r3, #4
 8004e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6e:	e04a      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004e70:	2308      	movs	r3, #8
 8004e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e76:	e046      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004e78:	2310      	movs	r3, #16
 8004e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e7e:	e042      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a17      	ldr	r2, [pc, #92]	; (8004ee4 <UART_SetConfig+0x2c4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d13a      	bne.n	8004f00 <UART_SetConfig+0x2e0>
 8004e8a:	4b18      	ldr	r3, [pc, #96]	; (8004eec <UART_SetConfig+0x2cc>)
 8004e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e98:	d01a      	beq.n	8004ed0 <UART_SetConfig+0x2b0>
 8004e9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e9e:	d81b      	bhi.n	8004ed8 <UART_SetConfig+0x2b8>
 8004ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ea4:	d00c      	beq.n	8004ec0 <UART_SetConfig+0x2a0>
 8004ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eaa:	d815      	bhi.n	8004ed8 <UART_SetConfig+0x2b8>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <UART_SetConfig+0x298>
 8004eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb4:	d008      	beq.n	8004ec8 <UART_SetConfig+0x2a8>
 8004eb6:	e00f      	b.n	8004ed8 <UART_SetConfig+0x2b8>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ebe:	e022      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ec6:	e01e      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004ec8:	2304      	movs	r3, #4
 8004eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ece:	e01a      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004ed0:	2308      	movs	r3, #8
 8004ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ed6:	e016      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004ed8:	2310      	movs	r3, #16
 8004eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ede:	e012      	b.n	8004f06 <UART_SetConfig+0x2e6>
 8004ee0:	efff69f3 	.word	0xefff69f3
 8004ee4:	40008000 	.word	0x40008000
 8004ee8:	40013800 	.word	0x40013800
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	40004400 	.word	0x40004400
 8004ef4:	40004800 	.word	0x40004800
 8004ef8:	40004c00 	.word	0x40004c00
 8004efc:	40005000 	.word	0x40005000
 8004f00:	2310      	movs	r3, #16
 8004f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a9f      	ldr	r2, [pc, #636]	; (8005188 <UART_SetConfig+0x568>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d17a      	bne.n	8005006 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d824      	bhi.n	8004f62 <UART_SetConfig+0x342>
 8004f18:	a201      	add	r2, pc, #4	; (adr r2, 8004f20 <UART_SetConfig+0x300>)
 8004f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1e:	bf00      	nop
 8004f20:	08004f45 	.word	0x08004f45
 8004f24:	08004f63 	.word	0x08004f63
 8004f28:	08004f4d 	.word	0x08004f4d
 8004f2c:	08004f63 	.word	0x08004f63
 8004f30:	08004f53 	.word	0x08004f53
 8004f34:	08004f63 	.word	0x08004f63
 8004f38:	08004f63 	.word	0x08004f63
 8004f3c:	08004f63 	.word	0x08004f63
 8004f40:	08004f5b 	.word	0x08004f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f44:	f7fe f8f0 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 8004f48:	61f8      	str	r0, [r7, #28]
        break;
 8004f4a:	e010      	b.n	8004f6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f4c:	4b8f      	ldr	r3, [pc, #572]	; (800518c <UART_SetConfig+0x56c>)
 8004f4e:	61fb      	str	r3, [r7, #28]
        break;
 8004f50:	e00d      	b.n	8004f6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f52:	f7fe f851 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 8004f56:	61f8      	str	r0, [r7, #28]
        break;
 8004f58:	e009      	b.n	8004f6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f5e:	61fb      	str	r3, [r7, #28]
        break;
 8004f60:	e005      	b.n	8004f6e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 80fb 	beq.w	800516c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	4413      	add	r3, r2
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d305      	bcc.n	8004f92 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f8c:	69fa      	ldr	r2, [r7, #28]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d903      	bls.n	8004f9a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f98:	e0e8      	b.n	800516c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	461c      	mov	r4, r3
 8004fa0:	4615      	mov	r5, r2
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	f04f 0300 	mov.w	r3, #0
 8004faa:	022b      	lsls	r3, r5, #8
 8004fac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004fb0:	0222      	lsls	r2, r4, #8
 8004fb2:	68f9      	ldr	r1, [r7, #12]
 8004fb4:	6849      	ldr	r1, [r1, #4]
 8004fb6:	0849      	lsrs	r1, r1, #1
 8004fb8:	2000      	movs	r0, #0
 8004fba:	4688      	mov	r8, r1
 8004fbc:	4681      	mov	r9, r0
 8004fbe:	eb12 0a08 	adds.w	sl, r2, r8
 8004fc2:	eb43 0b09 	adc.w	fp, r3, r9
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	603b      	str	r3, [r7, #0]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fd4:	4650      	mov	r0, sl
 8004fd6:	4659      	mov	r1, fp
 8004fd8:	f7fb f962 	bl	80002a0 <__aeabi_uldivmod>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fea:	d308      	bcc.n	8004ffe <UART_SetConfig+0x3de>
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ff2:	d204      	bcs.n	8004ffe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	60da      	str	r2, [r3, #12]
 8004ffc:	e0b6      	b.n	800516c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005004:	e0b2      	b.n	800516c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800500e:	d15e      	bne.n	80050ce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005010:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005014:	2b08      	cmp	r3, #8
 8005016:	d828      	bhi.n	800506a <UART_SetConfig+0x44a>
 8005018:	a201      	add	r2, pc, #4	; (adr r2, 8005020 <UART_SetConfig+0x400>)
 800501a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501e:	bf00      	nop
 8005020:	08005045 	.word	0x08005045
 8005024:	0800504d 	.word	0x0800504d
 8005028:	08005055 	.word	0x08005055
 800502c:	0800506b 	.word	0x0800506b
 8005030:	0800505b 	.word	0x0800505b
 8005034:	0800506b 	.word	0x0800506b
 8005038:	0800506b 	.word	0x0800506b
 800503c:	0800506b 	.word	0x0800506b
 8005040:	08005063 	.word	0x08005063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005044:	f7fe f870 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 8005048:	61f8      	str	r0, [r7, #28]
        break;
 800504a:	e014      	b.n	8005076 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800504c:	f7fe f882 	bl	8003154 <HAL_RCC_GetPCLK2Freq>
 8005050:	61f8      	str	r0, [r7, #28]
        break;
 8005052:	e010      	b.n	8005076 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005054:	4b4d      	ldr	r3, [pc, #308]	; (800518c <UART_SetConfig+0x56c>)
 8005056:	61fb      	str	r3, [r7, #28]
        break;
 8005058:	e00d      	b.n	8005076 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800505a:	f7fd ffcd 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 800505e:	61f8      	str	r0, [r7, #28]
        break;
 8005060:	e009      	b.n	8005076 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005066:	61fb      	str	r3, [r7, #28]
        break;
 8005068:	e005      	b.n	8005076 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005074:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d077      	beq.n	800516c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	005a      	lsls	r2, r3, #1
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	085b      	lsrs	r3, r3, #1
 8005086:	441a      	add	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005090:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	2b0f      	cmp	r3, #15
 8005096:	d916      	bls.n	80050c6 <UART_SetConfig+0x4a6>
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800509e:	d212      	bcs.n	80050c6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	f023 030f 	bic.w	r3, r3, #15
 80050a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	085b      	lsrs	r3, r3, #1
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	8afb      	ldrh	r3, [r7, #22]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	8afa      	ldrh	r2, [r7, #22]
 80050c2:	60da      	str	r2, [r3, #12]
 80050c4:	e052      	b.n	800516c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050cc:	e04e      	b.n	800516c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d827      	bhi.n	8005126 <UART_SetConfig+0x506>
 80050d6:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <UART_SetConfig+0x4bc>)
 80050d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050dc:	08005101 	.word	0x08005101
 80050e0:	08005109 	.word	0x08005109
 80050e4:	08005111 	.word	0x08005111
 80050e8:	08005127 	.word	0x08005127
 80050ec:	08005117 	.word	0x08005117
 80050f0:	08005127 	.word	0x08005127
 80050f4:	08005127 	.word	0x08005127
 80050f8:	08005127 	.word	0x08005127
 80050fc:	0800511f 	.word	0x0800511f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005100:	f7fe f812 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 8005104:	61f8      	str	r0, [r7, #28]
        break;
 8005106:	e014      	b.n	8005132 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005108:	f7fe f824 	bl	8003154 <HAL_RCC_GetPCLK2Freq>
 800510c:	61f8      	str	r0, [r7, #28]
        break;
 800510e:	e010      	b.n	8005132 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005110:	4b1e      	ldr	r3, [pc, #120]	; (800518c <UART_SetConfig+0x56c>)
 8005112:	61fb      	str	r3, [r7, #28]
        break;
 8005114:	e00d      	b.n	8005132 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005116:	f7fd ff6f 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 800511a:	61f8      	str	r0, [r7, #28]
        break;
 800511c:	e009      	b.n	8005132 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800511e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005122:	61fb      	str	r3, [r7, #28]
        break;
 8005124:	e005      	b.n	8005132 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005130:	bf00      	nop
    }

    if (pclk != 0U)
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d019      	beq.n	800516c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	085a      	lsrs	r2, r3, #1
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	441a      	add	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	fbb2 f3f3 	udiv	r3, r2, r3
 800514a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	2b0f      	cmp	r3, #15
 8005150:	d909      	bls.n	8005166 <UART_SetConfig+0x546>
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005158:	d205      	bcs.n	8005166 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60da      	str	r2, [r3, #12]
 8005164:	e002      	b.n	800516c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005178:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800517c:	4618      	mov	r0, r3
 800517e:	3728      	adds	r7, #40	; 0x28
 8005180:	46bd      	mov	sp, r7
 8005182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005186:	bf00      	nop
 8005188:	40008000 	.word	0x40008000
 800518c:	00f42400 	.word	0x00f42400

08005190 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	f003 0308 	and.w	r3, r3, #8
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00a      	beq.n	8005242 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01a      	beq.n	80052a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800528e:	d10a      	bne.n	80052a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	605a      	str	r2, [r3, #4]
  }
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af02      	add	r7, sp, #8
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052e4:	f7fb ffcc 	bl	8001280 <HAL_GetTick>
 80052e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0308 	and.w	r3, r3, #8
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d10e      	bne.n	8005316 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f82d 	bl	8005366 <UART_WaitOnFlagUntilTimeout>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e023      	b.n	800535e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b04      	cmp	r3, #4
 8005322:	d10e      	bne.n	8005342 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005324:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f817 	bl	8005366 <UART_WaitOnFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e00d      	b.n	800535e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2220      	movs	r2, #32
 8005346:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b09c      	sub	sp, #112	; 0x70
 800536a:	af00      	add	r7, sp, #0
 800536c:	60f8      	str	r0, [r7, #12]
 800536e:	60b9      	str	r1, [r7, #8]
 8005370:	603b      	str	r3, [r7, #0]
 8005372:	4613      	mov	r3, r2
 8005374:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005376:	e0a5      	b.n	80054c4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800537a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537e:	f000 80a1 	beq.w	80054c4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005382:	f7fb ff7d 	bl	8001280 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800538e:	429a      	cmp	r2, r3
 8005390:	d302      	bcc.n	8005398 <UART_WaitOnFlagUntilTimeout+0x32>
 8005392:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005394:	2b00      	cmp	r3, #0
 8005396:	d13e      	bne.n	8005416 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80053a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053ac:	667b      	str	r3, [r7, #100]	; 0x64
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053b8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e6      	bne.n	8005398 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3308      	adds	r3, #8
 80053d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053dc:	f023 0301 	bic.w	r3, r3, #1
 80053e0:	663b      	str	r3, [r7, #96]	; 0x60
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3308      	adds	r3, #8
 80053e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80053ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e5      	bne.n	80053ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2220      	movs	r2, #32
 8005402:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2220      	movs	r2, #32
 8005408:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e067      	b.n	80054e6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d04f      	beq.n	80054c4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800542e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005432:	d147      	bne.n	80054c4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800543c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005446:	e853 3f00 	ldrex	r3, [r3]
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005452:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	461a      	mov	r2, r3
 800545a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800545c:	637b      	str	r3, [r7, #52]	; 0x34
 800545e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005460:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005464:	e841 2300 	strex	r3, r2, [r1]
 8005468:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1e6      	bne.n	800543e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3308      	adds	r3, #8
 8005476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	e853 3f00 	ldrex	r3, [r3]
 800547e:	613b      	str	r3, [r7, #16]
   return(result);
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f023 0301 	bic.w	r3, r3, #1
 8005486:	66bb      	str	r3, [r7, #104]	; 0x68
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3308      	adds	r3, #8
 800548e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005490:	623a      	str	r2, [r7, #32]
 8005492:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005494:	69f9      	ldr	r1, [r7, #28]
 8005496:	6a3a      	ldr	r2, [r7, #32]
 8005498:	e841 2300 	strex	r3, r2, [r1]
 800549c:	61bb      	str	r3, [r7, #24]
   return(result);
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1e5      	bne.n	8005470 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2220      	movs	r2, #32
 80054a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2220      	movs	r2, #32
 80054ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e010      	b.n	80054e6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	69da      	ldr	r2, [r3, #28]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	4013      	ands	r3, r2
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	bf0c      	ite	eq
 80054d4:	2301      	moveq	r3, #1
 80054d6:	2300      	movne	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	79fb      	ldrb	r3, [r7, #7]
 80054de:	429a      	cmp	r2, r3
 80054e0:	f43f af4a 	beq.w	8005378 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3770      	adds	r7, #112	; 0x70
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b095      	sub	sp, #84	; 0x54
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fe:	e853 3f00 	ldrex	r3, [r3]
 8005502:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800550a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	461a      	mov	r2, r3
 8005512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005514:	643b      	str	r3, [r7, #64]	; 0x40
 8005516:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005518:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800551a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800551c:	e841 2300 	strex	r3, r2, [r1]
 8005520:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1e6      	bne.n	80054f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3308      	adds	r3, #8
 800552e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	61fb      	str	r3, [r7, #28]
   return(result);
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	f023 0301 	bic.w	r3, r3, #1
 800553e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3308      	adds	r3, #8
 8005546:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005548:	62fa      	str	r2, [r7, #44]	; 0x2c
 800554a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800554e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e5      	bne.n	8005528 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005560:	2b01      	cmp	r3, #1
 8005562:	d118      	bne.n	8005596 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	60bb      	str	r3, [r7, #8]
   return(result);
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f023 0310 	bic.w	r3, r3, #16
 8005578:	647b      	str	r3, [r7, #68]	; 0x44
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005582:	61bb      	str	r3, [r7, #24]
 8005584:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	6979      	ldr	r1, [r7, #20]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	613b      	str	r3, [r7, #16]
   return(result);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e6      	bne.n	8005564 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80055a8:	bf00      	nop
 80055aa:	3754      	adds	r7, #84	; 0x54
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f7ff fb0e 	bl	8004bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b088      	sub	sp, #32
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	e853 3f00 	ldrex	r3, [r3]
 80055f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055fc:	61fb      	str	r3, [r7, #28]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	61bb      	str	r3, [r7, #24]
 8005608:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560a:	6979      	ldr	r1, [r7, #20]
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	e841 2300 	strex	r3, r2, [r1]
 8005612:	613b      	str	r3, [r7, #16]
   return(result);
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e6      	bne.n	80055e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff fada 	bl	8004be0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800562c:	bf00      	nop
 800562e:	3720      	adds	r7, #32
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <__errno>:
 8005648:	4b01      	ldr	r3, [pc, #4]	; (8005650 <__errno+0x8>)
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	20000018 	.word	0x20000018

08005654 <__libc_init_array>:
 8005654:	b570      	push	{r4, r5, r6, lr}
 8005656:	4d0d      	ldr	r5, [pc, #52]	; (800568c <__libc_init_array+0x38>)
 8005658:	4c0d      	ldr	r4, [pc, #52]	; (8005690 <__libc_init_array+0x3c>)
 800565a:	1b64      	subs	r4, r4, r5
 800565c:	10a4      	asrs	r4, r4, #2
 800565e:	2600      	movs	r6, #0
 8005660:	42a6      	cmp	r6, r4
 8005662:	d109      	bne.n	8005678 <__libc_init_array+0x24>
 8005664:	4d0b      	ldr	r5, [pc, #44]	; (8005694 <__libc_init_array+0x40>)
 8005666:	4c0c      	ldr	r4, [pc, #48]	; (8005698 <__libc_init_array+0x44>)
 8005668:	f001 fd26 	bl	80070b8 <_init>
 800566c:	1b64      	subs	r4, r4, r5
 800566e:	10a4      	asrs	r4, r4, #2
 8005670:	2600      	movs	r6, #0
 8005672:	42a6      	cmp	r6, r4
 8005674:	d105      	bne.n	8005682 <__libc_init_array+0x2e>
 8005676:	bd70      	pop	{r4, r5, r6, pc}
 8005678:	f855 3b04 	ldr.w	r3, [r5], #4
 800567c:	4798      	blx	r3
 800567e:	3601      	adds	r6, #1
 8005680:	e7ee      	b.n	8005660 <__libc_init_array+0xc>
 8005682:	f855 3b04 	ldr.w	r3, [r5], #4
 8005686:	4798      	blx	r3
 8005688:	3601      	adds	r6, #1
 800568a:	e7f2      	b.n	8005672 <__libc_init_array+0x1e>
 800568c:	08007370 	.word	0x08007370
 8005690:	08007370 	.word	0x08007370
 8005694:	08007370 	.word	0x08007370
 8005698:	08007374 	.word	0x08007374

0800569c <memset>:
 800569c:	4402      	add	r2, r0
 800569e:	4603      	mov	r3, r0
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d100      	bne.n	80056a6 <memset+0xa>
 80056a4:	4770      	bx	lr
 80056a6:	f803 1b01 	strb.w	r1, [r3], #1
 80056aa:	e7f9      	b.n	80056a0 <memset+0x4>

080056ac <iprintf>:
 80056ac:	b40f      	push	{r0, r1, r2, r3}
 80056ae:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <iprintf+0x2c>)
 80056b0:	b513      	push	{r0, r1, r4, lr}
 80056b2:	681c      	ldr	r4, [r3, #0]
 80056b4:	b124      	cbz	r4, 80056c0 <iprintf+0x14>
 80056b6:	69a3      	ldr	r3, [r4, #24]
 80056b8:	b913      	cbnz	r3, 80056c0 <iprintf+0x14>
 80056ba:	4620      	mov	r0, r4
 80056bc:	f000 faf2 	bl	8005ca4 <__sinit>
 80056c0:	ab05      	add	r3, sp, #20
 80056c2:	9a04      	ldr	r2, [sp, #16]
 80056c4:	68a1      	ldr	r1, [r4, #8]
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	4620      	mov	r0, r4
 80056ca:	f000 fedf 	bl	800648c <_vfiprintf_r>
 80056ce:	b002      	add	sp, #8
 80056d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d4:	b004      	add	sp, #16
 80056d6:	4770      	bx	lr
 80056d8:	20000018 	.word	0x20000018

080056dc <_puts_r>:
 80056dc:	b570      	push	{r4, r5, r6, lr}
 80056de:	460e      	mov	r6, r1
 80056e0:	4605      	mov	r5, r0
 80056e2:	b118      	cbz	r0, 80056ec <_puts_r+0x10>
 80056e4:	6983      	ldr	r3, [r0, #24]
 80056e6:	b90b      	cbnz	r3, 80056ec <_puts_r+0x10>
 80056e8:	f000 fadc 	bl	8005ca4 <__sinit>
 80056ec:	69ab      	ldr	r3, [r5, #24]
 80056ee:	68ac      	ldr	r4, [r5, #8]
 80056f0:	b913      	cbnz	r3, 80056f8 <_puts_r+0x1c>
 80056f2:	4628      	mov	r0, r5
 80056f4:	f000 fad6 	bl	8005ca4 <__sinit>
 80056f8:	4b2c      	ldr	r3, [pc, #176]	; (80057ac <_puts_r+0xd0>)
 80056fa:	429c      	cmp	r4, r3
 80056fc:	d120      	bne.n	8005740 <_puts_r+0x64>
 80056fe:	686c      	ldr	r4, [r5, #4]
 8005700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005702:	07db      	lsls	r3, r3, #31
 8005704:	d405      	bmi.n	8005712 <_puts_r+0x36>
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	0598      	lsls	r0, r3, #22
 800570a:	d402      	bmi.n	8005712 <_puts_r+0x36>
 800570c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800570e:	f000 fb67 	bl	8005de0 <__retarget_lock_acquire_recursive>
 8005712:	89a3      	ldrh	r3, [r4, #12]
 8005714:	0719      	lsls	r1, r3, #28
 8005716:	d51d      	bpl.n	8005754 <_puts_r+0x78>
 8005718:	6923      	ldr	r3, [r4, #16]
 800571a:	b1db      	cbz	r3, 8005754 <_puts_r+0x78>
 800571c:	3e01      	subs	r6, #1
 800571e:	68a3      	ldr	r3, [r4, #8]
 8005720:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005724:	3b01      	subs	r3, #1
 8005726:	60a3      	str	r3, [r4, #8]
 8005728:	bb39      	cbnz	r1, 800577a <_puts_r+0x9e>
 800572a:	2b00      	cmp	r3, #0
 800572c:	da38      	bge.n	80057a0 <_puts_r+0xc4>
 800572e:	4622      	mov	r2, r4
 8005730:	210a      	movs	r1, #10
 8005732:	4628      	mov	r0, r5
 8005734:	f000 f8ba 	bl	80058ac <__swbuf_r>
 8005738:	3001      	adds	r0, #1
 800573a:	d011      	beq.n	8005760 <_puts_r+0x84>
 800573c:	250a      	movs	r5, #10
 800573e:	e011      	b.n	8005764 <_puts_r+0x88>
 8005740:	4b1b      	ldr	r3, [pc, #108]	; (80057b0 <_puts_r+0xd4>)
 8005742:	429c      	cmp	r4, r3
 8005744:	d101      	bne.n	800574a <_puts_r+0x6e>
 8005746:	68ac      	ldr	r4, [r5, #8]
 8005748:	e7da      	b.n	8005700 <_puts_r+0x24>
 800574a:	4b1a      	ldr	r3, [pc, #104]	; (80057b4 <_puts_r+0xd8>)
 800574c:	429c      	cmp	r4, r3
 800574e:	bf08      	it	eq
 8005750:	68ec      	ldreq	r4, [r5, #12]
 8005752:	e7d5      	b.n	8005700 <_puts_r+0x24>
 8005754:	4621      	mov	r1, r4
 8005756:	4628      	mov	r0, r5
 8005758:	f000 f90c 	bl	8005974 <__swsetup_r>
 800575c:	2800      	cmp	r0, #0
 800575e:	d0dd      	beq.n	800571c <_puts_r+0x40>
 8005760:	f04f 35ff 	mov.w	r5, #4294967295
 8005764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005766:	07da      	lsls	r2, r3, #31
 8005768:	d405      	bmi.n	8005776 <_puts_r+0x9a>
 800576a:	89a3      	ldrh	r3, [r4, #12]
 800576c:	059b      	lsls	r3, r3, #22
 800576e:	d402      	bmi.n	8005776 <_puts_r+0x9a>
 8005770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005772:	f000 fb36 	bl	8005de2 <__retarget_lock_release_recursive>
 8005776:	4628      	mov	r0, r5
 8005778:	bd70      	pop	{r4, r5, r6, pc}
 800577a:	2b00      	cmp	r3, #0
 800577c:	da04      	bge.n	8005788 <_puts_r+0xac>
 800577e:	69a2      	ldr	r2, [r4, #24]
 8005780:	429a      	cmp	r2, r3
 8005782:	dc06      	bgt.n	8005792 <_puts_r+0xb6>
 8005784:	290a      	cmp	r1, #10
 8005786:	d004      	beq.n	8005792 <_puts_r+0xb6>
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	6022      	str	r2, [r4, #0]
 800578e:	7019      	strb	r1, [r3, #0]
 8005790:	e7c5      	b.n	800571e <_puts_r+0x42>
 8005792:	4622      	mov	r2, r4
 8005794:	4628      	mov	r0, r5
 8005796:	f000 f889 	bl	80058ac <__swbuf_r>
 800579a:	3001      	adds	r0, #1
 800579c:	d1bf      	bne.n	800571e <_puts_r+0x42>
 800579e:	e7df      	b.n	8005760 <_puts_r+0x84>
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	250a      	movs	r5, #10
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	6022      	str	r2, [r4, #0]
 80057a8:	701d      	strb	r5, [r3, #0]
 80057aa:	e7db      	b.n	8005764 <_puts_r+0x88>
 80057ac:	080071d8 	.word	0x080071d8
 80057b0:	080071f8 	.word	0x080071f8
 80057b4:	080071b8 	.word	0x080071b8

080057b8 <puts>:
 80057b8:	4b02      	ldr	r3, [pc, #8]	; (80057c4 <puts+0xc>)
 80057ba:	4601      	mov	r1, r0
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	f7ff bf8d 	b.w	80056dc <_puts_r>
 80057c2:	bf00      	nop
 80057c4:	20000018 	.word	0x20000018

080057c8 <siscanf>:
 80057c8:	b40e      	push	{r1, r2, r3}
 80057ca:	b510      	push	{r4, lr}
 80057cc:	b09f      	sub	sp, #124	; 0x7c
 80057ce:	ac21      	add	r4, sp, #132	; 0x84
 80057d0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80057d4:	f854 2b04 	ldr.w	r2, [r4], #4
 80057d8:	9201      	str	r2, [sp, #4]
 80057da:	f8ad 101c 	strh.w	r1, [sp, #28]
 80057de:	9004      	str	r0, [sp, #16]
 80057e0:	9008      	str	r0, [sp, #32]
 80057e2:	f7fa fcff 	bl	80001e4 <strlen>
 80057e6:	4b0c      	ldr	r3, [pc, #48]	; (8005818 <siscanf+0x50>)
 80057e8:	9005      	str	r0, [sp, #20]
 80057ea:	9009      	str	r0, [sp, #36]	; 0x24
 80057ec:	930d      	str	r3, [sp, #52]	; 0x34
 80057ee:	480b      	ldr	r0, [pc, #44]	; (800581c <siscanf+0x54>)
 80057f0:	9a01      	ldr	r2, [sp, #4]
 80057f2:	6800      	ldr	r0, [r0, #0]
 80057f4:	9403      	str	r4, [sp, #12]
 80057f6:	2300      	movs	r3, #0
 80057f8:	9311      	str	r3, [sp, #68]	; 0x44
 80057fa:	9316      	str	r3, [sp, #88]	; 0x58
 80057fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005800:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005804:	a904      	add	r1, sp, #16
 8005806:	4623      	mov	r3, r4
 8005808:	f000 fc9e 	bl	8006148 <__ssvfiscanf_r>
 800580c:	b01f      	add	sp, #124	; 0x7c
 800580e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005812:	b003      	add	sp, #12
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	08005843 	.word	0x08005843
 800581c:	20000018 	.word	0x20000018

08005820 <__sread>:
 8005820:	b510      	push	{r4, lr}
 8005822:	460c      	mov	r4, r1
 8005824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005828:	f001 fa46 	bl	8006cb8 <_read_r>
 800582c:	2800      	cmp	r0, #0
 800582e:	bfab      	itete	ge
 8005830:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005832:	89a3      	ldrhlt	r3, [r4, #12]
 8005834:	181b      	addge	r3, r3, r0
 8005836:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800583a:	bfac      	ite	ge
 800583c:	6563      	strge	r3, [r4, #84]	; 0x54
 800583e:	81a3      	strhlt	r3, [r4, #12]
 8005840:	bd10      	pop	{r4, pc}

08005842 <__seofread>:
 8005842:	2000      	movs	r0, #0
 8005844:	4770      	bx	lr

08005846 <__swrite>:
 8005846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800584a:	461f      	mov	r7, r3
 800584c:	898b      	ldrh	r3, [r1, #12]
 800584e:	05db      	lsls	r3, r3, #23
 8005850:	4605      	mov	r5, r0
 8005852:	460c      	mov	r4, r1
 8005854:	4616      	mov	r6, r2
 8005856:	d505      	bpl.n	8005864 <__swrite+0x1e>
 8005858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800585c:	2302      	movs	r3, #2
 800585e:	2200      	movs	r2, #0
 8005860:	f000 fac0 	bl	8005de4 <_lseek_r>
 8005864:	89a3      	ldrh	r3, [r4, #12]
 8005866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800586a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800586e:	81a3      	strh	r3, [r4, #12]
 8005870:	4632      	mov	r2, r6
 8005872:	463b      	mov	r3, r7
 8005874:	4628      	mov	r0, r5
 8005876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800587a:	f000 b869 	b.w	8005950 <_write_r>

0800587e <__sseek>:
 800587e:	b510      	push	{r4, lr}
 8005880:	460c      	mov	r4, r1
 8005882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005886:	f000 faad 	bl	8005de4 <_lseek_r>
 800588a:	1c43      	adds	r3, r0, #1
 800588c:	89a3      	ldrh	r3, [r4, #12]
 800588e:	bf15      	itete	ne
 8005890:	6560      	strne	r0, [r4, #84]	; 0x54
 8005892:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005896:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800589a:	81a3      	strheq	r3, [r4, #12]
 800589c:	bf18      	it	ne
 800589e:	81a3      	strhne	r3, [r4, #12]
 80058a0:	bd10      	pop	{r4, pc}

080058a2 <__sclose>:
 80058a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a6:	f000 b8d3 	b.w	8005a50 <_close_r>
	...

080058ac <__swbuf_r>:
 80058ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ae:	460e      	mov	r6, r1
 80058b0:	4614      	mov	r4, r2
 80058b2:	4605      	mov	r5, r0
 80058b4:	b118      	cbz	r0, 80058be <__swbuf_r+0x12>
 80058b6:	6983      	ldr	r3, [r0, #24]
 80058b8:	b90b      	cbnz	r3, 80058be <__swbuf_r+0x12>
 80058ba:	f000 f9f3 	bl	8005ca4 <__sinit>
 80058be:	4b21      	ldr	r3, [pc, #132]	; (8005944 <__swbuf_r+0x98>)
 80058c0:	429c      	cmp	r4, r3
 80058c2:	d12b      	bne.n	800591c <__swbuf_r+0x70>
 80058c4:	686c      	ldr	r4, [r5, #4]
 80058c6:	69a3      	ldr	r3, [r4, #24]
 80058c8:	60a3      	str	r3, [r4, #8]
 80058ca:	89a3      	ldrh	r3, [r4, #12]
 80058cc:	071a      	lsls	r2, r3, #28
 80058ce:	d52f      	bpl.n	8005930 <__swbuf_r+0x84>
 80058d0:	6923      	ldr	r3, [r4, #16]
 80058d2:	b36b      	cbz	r3, 8005930 <__swbuf_r+0x84>
 80058d4:	6923      	ldr	r3, [r4, #16]
 80058d6:	6820      	ldr	r0, [r4, #0]
 80058d8:	1ac0      	subs	r0, r0, r3
 80058da:	6963      	ldr	r3, [r4, #20]
 80058dc:	b2f6      	uxtb	r6, r6
 80058de:	4283      	cmp	r3, r0
 80058e0:	4637      	mov	r7, r6
 80058e2:	dc04      	bgt.n	80058ee <__swbuf_r+0x42>
 80058e4:	4621      	mov	r1, r4
 80058e6:	4628      	mov	r0, r5
 80058e8:	f000 f948 	bl	8005b7c <_fflush_r>
 80058ec:	bb30      	cbnz	r0, 800593c <__swbuf_r+0x90>
 80058ee:	68a3      	ldr	r3, [r4, #8]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	60a3      	str	r3, [r4, #8]
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	6022      	str	r2, [r4, #0]
 80058fa:	701e      	strb	r6, [r3, #0]
 80058fc:	6963      	ldr	r3, [r4, #20]
 80058fe:	3001      	adds	r0, #1
 8005900:	4283      	cmp	r3, r0
 8005902:	d004      	beq.n	800590e <__swbuf_r+0x62>
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	07db      	lsls	r3, r3, #31
 8005908:	d506      	bpl.n	8005918 <__swbuf_r+0x6c>
 800590a:	2e0a      	cmp	r6, #10
 800590c:	d104      	bne.n	8005918 <__swbuf_r+0x6c>
 800590e:	4621      	mov	r1, r4
 8005910:	4628      	mov	r0, r5
 8005912:	f000 f933 	bl	8005b7c <_fflush_r>
 8005916:	b988      	cbnz	r0, 800593c <__swbuf_r+0x90>
 8005918:	4638      	mov	r0, r7
 800591a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800591c:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <__swbuf_r+0x9c>)
 800591e:	429c      	cmp	r4, r3
 8005920:	d101      	bne.n	8005926 <__swbuf_r+0x7a>
 8005922:	68ac      	ldr	r4, [r5, #8]
 8005924:	e7cf      	b.n	80058c6 <__swbuf_r+0x1a>
 8005926:	4b09      	ldr	r3, [pc, #36]	; (800594c <__swbuf_r+0xa0>)
 8005928:	429c      	cmp	r4, r3
 800592a:	bf08      	it	eq
 800592c:	68ec      	ldreq	r4, [r5, #12]
 800592e:	e7ca      	b.n	80058c6 <__swbuf_r+0x1a>
 8005930:	4621      	mov	r1, r4
 8005932:	4628      	mov	r0, r5
 8005934:	f000 f81e 	bl	8005974 <__swsetup_r>
 8005938:	2800      	cmp	r0, #0
 800593a:	d0cb      	beq.n	80058d4 <__swbuf_r+0x28>
 800593c:	f04f 37ff 	mov.w	r7, #4294967295
 8005940:	e7ea      	b.n	8005918 <__swbuf_r+0x6c>
 8005942:	bf00      	nop
 8005944:	080071d8 	.word	0x080071d8
 8005948:	080071f8 	.word	0x080071f8
 800594c:	080071b8 	.word	0x080071b8

08005950 <_write_r>:
 8005950:	b538      	push	{r3, r4, r5, lr}
 8005952:	4d07      	ldr	r5, [pc, #28]	; (8005970 <_write_r+0x20>)
 8005954:	4604      	mov	r4, r0
 8005956:	4608      	mov	r0, r1
 8005958:	4611      	mov	r1, r2
 800595a:	2200      	movs	r2, #0
 800595c:	602a      	str	r2, [r5, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	f7fb f846 	bl	80009f0 <_write>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d102      	bne.n	800596e <_write_r+0x1e>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	b103      	cbz	r3, 800596e <_write_r+0x1e>
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	20000280 	.word	0x20000280

08005974 <__swsetup_r>:
 8005974:	4b32      	ldr	r3, [pc, #200]	; (8005a40 <__swsetup_r+0xcc>)
 8005976:	b570      	push	{r4, r5, r6, lr}
 8005978:	681d      	ldr	r5, [r3, #0]
 800597a:	4606      	mov	r6, r0
 800597c:	460c      	mov	r4, r1
 800597e:	b125      	cbz	r5, 800598a <__swsetup_r+0x16>
 8005980:	69ab      	ldr	r3, [r5, #24]
 8005982:	b913      	cbnz	r3, 800598a <__swsetup_r+0x16>
 8005984:	4628      	mov	r0, r5
 8005986:	f000 f98d 	bl	8005ca4 <__sinit>
 800598a:	4b2e      	ldr	r3, [pc, #184]	; (8005a44 <__swsetup_r+0xd0>)
 800598c:	429c      	cmp	r4, r3
 800598e:	d10f      	bne.n	80059b0 <__swsetup_r+0x3c>
 8005990:	686c      	ldr	r4, [r5, #4]
 8005992:	89a3      	ldrh	r3, [r4, #12]
 8005994:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005998:	0719      	lsls	r1, r3, #28
 800599a:	d42c      	bmi.n	80059f6 <__swsetup_r+0x82>
 800599c:	06dd      	lsls	r5, r3, #27
 800599e:	d411      	bmi.n	80059c4 <__swsetup_r+0x50>
 80059a0:	2309      	movs	r3, #9
 80059a2:	6033      	str	r3, [r6, #0]
 80059a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059a8:	81a3      	strh	r3, [r4, #12]
 80059aa:	f04f 30ff 	mov.w	r0, #4294967295
 80059ae:	e03e      	b.n	8005a2e <__swsetup_r+0xba>
 80059b0:	4b25      	ldr	r3, [pc, #148]	; (8005a48 <__swsetup_r+0xd4>)
 80059b2:	429c      	cmp	r4, r3
 80059b4:	d101      	bne.n	80059ba <__swsetup_r+0x46>
 80059b6:	68ac      	ldr	r4, [r5, #8]
 80059b8:	e7eb      	b.n	8005992 <__swsetup_r+0x1e>
 80059ba:	4b24      	ldr	r3, [pc, #144]	; (8005a4c <__swsetup_r+0xd8>)
 80059bc:	429c      	cmp	r4, r3
 80059be:	bf08      	it	eq
 80059c0:	68ec      	ldreq	r4, [r5, #12]
 80059c2:	e7e6      	b.n	8005992 <__swsetup_r+0x1e>
 80059c4:	0758      	lsls	r0, r3, #29
 80059c6:	d512      	bpl.n	80059ee <__swsetup_r+0x7a>
 80059c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059ca:	b141      	cbz	r1, 80059de <__swsetup_r+0x6a>
 80059cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059d0:	4299      	cmp	r1, r3
 80059d2:	d002      	beq.n	80059da <__swsetup_r+0x66>
 80059d4:	4630      	mov	r0, r6
 80059d6:	f000 fa7d 	bl	8005ed4 <_free_r>
 80059da:	2300      	movs	r3, #0
 80059dc:	6363      	str	r3, [r4, #52]	; 0x34
 80059de:	89a3      	ldrh	r3, [r4, #12]
 80059e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059e4:	81a3      	strh	r3, [r4, #12]
 80059e6:	2300      	movs	r3, #0
 80059e8:	6063      	str	r3, [r4, #4]
 80059ea:	6923      	ldr	r3, [r4, #16]
 80059ec:	6023      	str	r3, [r4, #0]
 80059ee:	89a3      	ldrh	r3, [r4, #12]
 80059f0:	f043 0308 	orr.w	r3, r3, #8
 80059f4:	81a3      	strh	r3, [r4, #12]
 80059f6:	6923      	ldr	r3, [r4, #16]
 80059f8:	b94b      	cbnz	r3, 8005a0e <__swsetup_r+0x9a>
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a04:	d003      	beq.n	8005a0e <__swsetup_r+0x9a>
 8005a06:	4621      	mov	r1, r4
 8005a08:	4630      	mov	r0, r6
 8005a0a:	f000 fa23 	bl	8005e54 <__smakebuf_r>
 8005a0e:	89a0      	ldrh	r0, [r4, #12]
 8005a10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a14:	f010 0301 	ands.w	r3, r0, #1
 8005a18:	d00a      	beq.n	8005a30 <__swsetup_r+0xbc>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60a3      	str	r3, [r4, #8]
 8005a1e:	6963      	ldr	r3, [r4, #20]
 8005a20:	425b      	negs	r3, r3
 8005a22:	61a3      	str	r3, [r4, #24]
 8005a24:	6923      	ldr	r3, [r4, #16]
 8005a26:	b943      	cbnz	r3, 8005a3a <__swsetup_r+0xc6>
 8005a28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a2c:	d1ba      	bne.n	80059a4 <__swsetup_r+0x30>
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
 8005a30:	0781      	lsls	r1, r0, #30
 8005a32:	bf58      	it	pl
 8005a34:	6963      	ldrpl	r3, [r4, #20]
 8005a36:	60a3      	str	r3, [r4, #8]
 8005a38:	e7f4      	b.n	8005a24 <__swsetup_r+0xb0>
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	e7f7      	b.n	8005a2e <__swsetup_r+0xba>
 8005a3e:	bf00      	nop
 8005a40:	20000018 	.word	0x20000018
 8005a44:	080071d8 	.word	0x080071d8
 8005a48:	080071f8 	.word	0x080071f8
 8005a4c:	080071b8 	.word	0x080071b8

08005a50 <_close_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4d06      	ldr	r5, [pc, #24]	; (8005a6c <_close_r+0x1c>)
 8005a54:	2300      	movs	r3, #0
 8005a56:	4604      	mov	r4, r0
 8005a58:	4608      	mov	r0, r1
 8005a5a:	602b      	str	r3, [r5, #0]
 8005a5c:	f7fb faf9 	bl	8001052 <_close>
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	d102      	bne.n	8005a6a <_close_r+0x1a>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	b103      	cbz	r3, 8005a6a <_close_r+0x1a>
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	20000280 	.word	0x20000280

08005a70 <__sflush_r>:
 8005a70:	898a      	ldrh	r2, [r1, #12]
 8005a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a76:	4605      	mov	r5, r0
 8005a78:	0710      	lsls	r0, r2, #28
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	d458      	bmi.n	8005b30 <__sflush_r+0xc0>
 8005a7e:	684b      	ldr	r3, [r1, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	dc05      	bgt.n	8005a90 <__sflush_r+0x20>
 8005a84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	dc02      	bgt.n	8005a90 <__sflush_r+0x20>
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a92:	2e00      	cmp	r6, #0
 8005a94:	d0f9      	beq.n	8005a8a <__sflush_r+0x1a>
 8005a96:	2300      	movs	r3, #0
 8005a98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a9c:	682f      	ldr	r7, [r5, #0]
 8005a9e:	602b      	str	r3, [r5, #0]
 8005aa0:	d032      	beq.n	8005b08 <__sflush_r+0x98>
 8005aa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	075a      	lsls	r2, r3, #29
 8005aa8:	d505      	bpl.n	8005ab6 <__sflush_r+0x46>
 8005aaa:	6863      	ldr	r3, [r4, #4]
 8005aac:	1ac0      	subs	r0, r0, r3
 8005aae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ab0:	b10b      	cbz	r3, 8005ab6 <__sflush_r+0x46>
 8005ab2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ab4:	1ac0      	subs	r0, r0, r3
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	4602      	mov	r2, r0
 8005aba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005abc:	6a21      	ldr	r1, [r4, #32]
 8005abe:	4628      	mov	r0, r5
 8005ac0:	47b0      	blx	r6
 8005ac2:	1c43      	adds	r3, r0, #1
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	d106      	bne.n	8005ad6 <__sflush_r+0x66>
 8005ac8:	6829      	ldr	r1, [r5, #0]
 8005aca:	291d      	cmp	r1, #29
 8005acc:	d82c      	bhi.n	8005b28 <__sflush_r+0xb8>
 8005ace:	4a2a      	ldr	r2, [pc, #168]	; (8005b78 <__sflush_r+0x108>)
 8005ad0:	40ca      	lsrs	r2, r1
 8005ad2:	07d6      	lsls	r6, r2, #31
 8005ad4:	d528      	bpl.n	8005b28 <__sflush_r+0xb8>
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	6062      	str	r2, [r4, #4]
 8005ada:	04d9      	lsls	r1, r3, #19
 8005adc:	6922      	ldr	r2, [r4, #16]
 8005ade:	6022      	str	r2, [r4, #0]
 8005ae0:	d504      	bpl.n	8005aec <__sflush_r+0x7c>
 8005ae2:	1c42      	adds	r2, r0, #1
 8005ae4:	d101      	bne.n	8005aea <__sflush_r+0x7a>
 8005ae6:	682b      	ldr	r3, [r5, #0]
 8005ae8:	b903      	cbnz	r3, 8005aec <__sflush_r+0x7c>
 8005aea:	6560      	str	r0, [r4, #84]	; 0x54
 8005aec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aee:	602f      	str	r7, [r5, #0]
 8005af0:	2900      	cmp	r1, #0
 8005af2:	d0ca      	beq.n	8005a8a <__sflush_r+0x1a>
 8005af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005af8:	4299      	cmp	r1, r3
 8005afa:	d002      	beq.n	8005b02 <__sflush_r+0x92>
 8005afc:	4628      	mov	r0, r5
 8005afe:	f000 f9e9 	bl	8005ed4 <_free_r>
 8005b02:	2000      	movs	r0, #0
 8005b04:	6360      	str	r0, [r4, #52]	; 0x34
 8005b06:	e7c1      	b.n	8005a8c <__sflush_r+0x1c>
 8005b08:	6a21      	ldr	r1, [r4, #32]
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	47b0      	blx	r6
 8005b10:	1c41      	adds	r1, r0, #1
 8005b12:	d1c7      	bne.n	8005aa4 <__sflush_r+0x34>
 8005b14:	682b      	ldr	r3, [r5, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0c4      	beq.n	8005aa4 <__sflush_r+0x34>
 8005b1a:	2b1d      	cmp	r3, #29
 8005b1c:	d001      	beq.n	8005b22 <__sflush_r+0xb2>
 8005b1e:	2b16      	cmp	r3, #22
 8005b20:	d101      	bne.n	8005b26 <__sflush_r+0xb6>
 8005b22:	602f      	str	r7, [r5, #0]
 8005b24:	e7b1      	b.n	8005a8a <__sflush_r+0x1a>
 8005b26:	89a3      	ldrh	r3, [r4, #12]
 8005b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b2c:	81a3      	strh	r3, [r4, #12]
 8005b2e:	e7ad      	b.n	8005a8c <__sflush_r+0x1c>
 8005b30:	690f      	ldr	r7, [r1, #16]
 8005b32:	2f00      	cmp	r7, #0
 8005b34:	d0a9      	beq.n	8005a8a <__sflush_r+0x1a>
 8005b36:	0793      	lsls	r3, r2, #30
 8005b38:	680e      	ldr	r6, [r1, #0]
 8005b3a:	bf08      	it	eq
 8005b3c:	694b      	ldreq	r3, [r1, #20]
 8005b3e:	600f      	str	r7, [r1, #0]
 8005b40:	bf18      	it	ne
 8005b42:	2300      	movne	r3, #0
 8005b44:	eba6 0807 	sub.w	r8, r6, r7
 8005b48:	608b      	str	r3, [r1, #8]
 8005b4a:	f1b8 0f00 	cmp.w	r8, #0
 8005b4e:	dd9c      	ble.n	8005a8a <__sflush_r+0x1a>
 8005b50:	6a21      	ldr	r1, [r4, #32]
 8005b52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b54:	4643      	mov	r3, r8
 8005b56:	463a      	mov	r2, r7
 8005b58:	4628      	mov	r0, r5
 8005b5a:	47b0      	blx	r6
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	dc06      	bgt.n	8005b6e <__sflush_r+0xfe>
 8005b60:	89a3      	ldrh	r3, [r4, #12]
 8005b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b66:	81a3      	strh	r3, [r4, #12]
 8005b68:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6c:	e78e      	b.n	8005a8c <__sflush_r+0x1c>
 8005b6e:	4407      	add	r7, r0
 8005b70:	eba8 0800 	sub.w	r8, r8, r0
 8005b74:	e7e9      	b.n	8005b4a <__sflush_r+0xda>
 8005b76:	bf00      	nop
 8005b78:	20400001 	.word	0x20400001

08005b7c <_fflush_r>:
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	690b      	ldr	r3, [r1, #16]
 8005b80:	4605      	mov	r5, r0
 8005b82:	460c      	mov	r4, r1
 8005b84:	b913      	cbnz	r3, 8005b8c <_fflush_r+0x10>
 8005b86:	2500      	movs	r5, #0
 8005b88:	4628      	mov	r0, r5
 8005b8a:	bd38      	pop	{r3, r4, r5, pc}
 8005b8c:	b118      	cbz	r0, 8005b96 <_fflush_r+0x1a>
 8005b8e:	6983      	ldr	r3, [r0, #24]
 8005b90:	b90b      	cbnz	r3, 8005b96 <_fflush_r+0x1a>
 8005b92:	f000 f887 	bl	8005ca4 <__sinit>
 8005b96:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <_fflush_r+0x6c>)
 8005b98:	429c      	cmp	r4, r3
 8005b9a:	d11b      	bne.n	8005bd4 <_fflush_r+0x58>
 8005b9c:	686c      	ldr	r4, [r5, #4]
 8005b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0ef      	beq.n	8005b86 <_fflush_r+0xa>
 8005ba6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ba8:	07d0      	lsls	r0, r2, #31
 8005baa:	d404      	bmi.n	8005bb6 <_fflush_r+0x3a>
 8005bac:	0599      	lsls	r1, r3, #22
 8005bae:	d402      	bmi.n	8005bb6 <_fflush_r+0x3a>
 8005bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bb2:	f000 f915 	bl	8005de0 <__retarget_lock_acquire_recursive>
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	4621      	mov	r1, r4
 8005bba:	f7ff ff59 	bl	8005a70 <__sflush_r>
 8005bbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bc0:	07da      	lsls	r2, r3, #31
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	d4e0      	bmi.n	8005b88 <_fflush_r+0xc>
 8005bc6:	89a3      	ldrh	r3, [r4, #12]
 8005bc8:	059b      	lsls	r3, r3, #22
 8005bca:	d4dd      	bmi.n	8005b88 <_fflush_r+0xc>
 8005bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bce:	f000 f908 	bl	8005de2 <__retarget_lock_release_recursive>
 8005bd2:	e7d9      	b.n	8005b88 <_fflush_r+0xc>
 8005bd4:	4b05      	ldr	r3, [pc, #20]	; (8005bec <_fflush_r+0x70>)
 8005bd6:	429c      	cmp	r4, r3
 8005bd8:	d101      	bne.n	8005bde <_fflush_r+0x62>
 8005bda:	68ac      	ldr	r4, [r5, #8]
 8005bdc:	e7df      	b.n	8005b9e <_fflush_r+0x22>
 8005bde:	4b04      	ldr	r3, [pc, #16]	; (8005bf0 <_fflush_r+0x74>)
 8005be0:	429c      	cmp	r4, r3
 8005be2:	bf08      	it	eq
 8005be4:	68ec      	ldreq	r4, [r5, #12]
 8005be6:	e7da      	b.n	8005b9e <_fflush_r+0x22>
 8005be8:	080071d8 	.word	0x080071d8
 8005bec:	080071f8 	.word	0x080071f8
 8005bf0:	080071b8 	.word	0x080071b8

08005bf4 <std>:
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	b510      	push	{r4, lr}
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8005bfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c02:	6083      	str	r3, [r0, #8]
 8005c04:	8181      	strh	r1, [r0, #12]
 8005c06:	6643      	str	r3, [r0, #100]	; 0x64
 8005c08:	81c2      	strh	r2, [r0, #14]
 8005c0a:	6183      	str	r3, [r0, #24]
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	2208      	movs	r2, #8
 8005c10:	305c      	adds	r0, #92	; 0x5c
 8005c12:	f7ff fd43 	bl	800569c <memset>
 8005c16:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <std+0x38>)
 8005c18:	6263      	str	r3, [r4, #36]	; 0x24
 8005c1a:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <std+0x3c>)
 8005c1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c1e:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <std+0x40>)
 8005c20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c22:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <std+0x44>)
 8005c24:	6224      	str	r4, [r4, #32]
 8005c26:	6323      	str	r3, [r4, #48]	; 0x30
 8005c28:	bd10      	pop	{r4, pc}
 8005c2a:	bf00      	nop
 8005c2c:	08005821 	.word	0x08005821
 8005c30:	08005847 	.word	0x08005847
 8005c34:	0800587f 	.word	0x0800587f
 8005c38:	080058a3 	.word	0x080058a3

08005c3c <_cleanup_r>:
 8005c3c:	4901      	ldr	r1, [pc, #4]	; (8005c44 <_cleanup_r+0x8>)
 8005c3e:	f000 b8af 	b.w	8005da0 <_fwalk_reent>
 8005c42:	bf00      	nop
 8005c44:	08005b7d 	.word	0x08005b7d

08005c48 <__sfmoreglue>:
 8005c48:	b570      	push	{r4, r5, r6, lr}
 8005c4a:	2268      	movs	r2, #104	; 0x68
 8005c4c:	1e4d      	subs	r5, r1, #1
 8005c4e:	4355      	muls	r5, r2
 8005c50:	460e      	mov	r6, r1
 8005c52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c56:	f000 f9a9 	bl	8005fac <_malloc_r>
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	b140      	cbz	r0, 8005c70 <__sfmoreglue+0x28>
 8005c5e:	2100      	movs	r1, #0
 8005c60:	e9c0 1600 	strd	r1, r6, [r0]
 8005c64:	300c      	adds	r0, #12
 8005c66:	60a0      	str	r0, [r4, #8]
 8005c68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c6c:	f7ff fd16 	bl	800569c <memset>
 8005c70:	4620      	mov	r0, r4
 8005c72:	bd70      	pop	{r4, r5, r6, pc}

08005c74 <__sfp_lock_acquire>:
 8005c74:	4801      	ldr	r0, [pc, #4]	; (8005c7c <__sfp_lock_acquire+0x8>)
 8005c76:	f000 b8b3 	b.w	8005de0 <__retarget_lock_acquire_recursive>
 8005c7a:	bf00      	nop
 8005c7c:	20000275 	.word	0x20000275

08005c80 <__sfp_lock_release>:
 8005c80:	4801      	ldr	r0, [pc, #4]	; (8005c88 <__sfp_lock_release+0x8>)
 8005c82:	f000 b8ae 	b.w	8005de2 <__retarget_lock_release_recursive>
 8005c86:	bf00      	nop
 8005c88:	20000275 	.word	0x20000275

08005c8c <__sinit_lock_acquire>:
 8005c8c:	4801      	ldr	r0, [pc, #4]	; (8005c94 <__sinit_lock_acquire+0x8>)
 8005c8e:	f000 b8a7 	b.w	8005de0 <__retarget_lock_acquire_recursive>
 8005c92:	bf00      	nop
 8005c94:	20000276 	.word	0x20000276

08005c98 <__sinit_lock_release>:
 8005c98:	4801      	ldr	r0, [pc, #4]	; (8005ca0 <__sinit_lock_release+0x8>)
 8005c9a:	f000 b8a2 	b.w	8005de2 <__retarget_lock_release_recursive>
 8005c9e:	bf00      	nop
 8005ca0:	20000276 	.word	0x20000276

08005ca4 <__sinit>:
 8005ca4:	b510      	push	{r4, lr}
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	f7ff fff0 	bl	8005c8c <__sinit_lock_acquire>
 8005cac:	69a3      	ldr	r3, [r4, #24]
 8005cae:	b11b      	cbz	r3, 8005cb8 <__sinit+0x14>
 8005cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cb4:	f7ff bff0 	b.w	8005c98 <__sinit_lock_release>
 8005cb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005cbc:	6523      	str	r3, [r4, #80]	; 0x50
 8005cbe:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <__sinit+0x68>)
 8005cc0:	4a13      	ldr	r2, [pc, #76]	; (8005d10 <__sinit+0x6c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005cc6:	42a3      	cmp	r3, r4
 8005cc8:	bf04      	itt	eq
 8005cca:	2301      	moveq	r3, #1
 8005ccc:	61a3      	streq	r3, [r4, #24]
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f000 f820 	bl	8005d14 <__sfp>
 8005cd4:	6060      	str	r0, [r4, #4]
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f000 f81c 	bl	8005d14 <__sfp>
 8005cdc:	60a0      	str	r0, [r4, #8]
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f000 f818 	bl	8005d14 <__sfp>
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	60e0      	str	r0, [r4, #12]
 8005ce8:	2104      	movs	r1, #4
 8005cea:	6860      	ldr	r0, [r4, #4]
 8005cec:	f7ff ff82 	bl	8005bf4 <std>
 8005cf0:	68a0      	ldr	r0, [r4, #8]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	2109      	movs	r1, #9
 8005cf6:	f7ff ff7d 	bl	8005bf4 <std>
 8005cfa:	68e0      	ldr	r0, [r4, #12]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	2112      	movs	r1, #18
 8005d00:	f7ff ff78 	bl	8005bf4 <std>
 8005d04:	2301      	movs	r3, #1
 8005d06:	61a3      	str	r3, [r4, #24]
 8005d08:	e7d2      	b.n	8005cb0 <__sinit+0xc>
 8005d0a:	bf00      	nop
 8005d0c:	080071b4 	.word	0x080071b4
 8005d10:	08005c3d 	.word	0x08005c3d

08005d14 <__sfp>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	4607      	mov	r7, r0
 8005d18:	f7ff ffac 	bl	8005c74 <__sfp_lock_acquire>
 8005d1c:	4b1e      	ldr	r3, [pc, #120]	; (8005d98 <__sfp+0x84>)
 8005d1e:	681e      	ldr	r6, [r3, #0]
 8005d20:	69b3      	ldr	r3, [r6, #24]
 8005d22:	b913      	cbnz	r3, 8005d2a <__sfp+0x16>
 8005d24:	4630      	mov	r0, r6
 8005d26:	f7ff ffbd 	bl	8005ca4 <__sinit>
 8005d2a:	3648      	adds	r6, #72	; 0x48
 8005d2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d30:	3b01      	subs	r3, #1
 8005d32:	d503      	bpl.n	8005d3c <__sfp+0x28>
 8005d34:	6833      	ldr	r3, [r6, #0]
 8005d36:	b30b      	cbz	r3, 8005d7c <__sfp+0x68>
 8005d38:	6836      	ldr	r6, [r6, #0]
 8005d3a:	e7f7      	b.n	8005d2c <__sfp+0x18>
 8005d3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d40:	b9d5      	cbnz	r5, 8005d78 <__sfp+0x64>
 8005d42:	4b16      	ldr	r3, [pc, #88]	; (8005d9c <__sfp+0x88>)
 8005d44:	60e3      	str	r3, [r4, #12]
 8005d46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d4a:	6665      	str	r5, [r4, #100]	; 0x64
 8005d4c:	f000 f847 	bl	8005dde <__retarget_lock_init_recursive>
 8005d50:	f7ff ff96 	bl	8005c80 <__sfp_lock_release>
 8005d54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005d58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005d5c:	6025      	str	r5, [r4, #0]
 8005d5e:	61a5      	str	r5, [r4, #24]
 8005d60:	2208      	movs	r2, #8
 8005d62:	4629      	mov	r1, r5
 8005d64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d68:	f7ff fc98 	bl	800569c <memset>
 8005d6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d74:	4620      	mov	r0, r4
 8005d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d78:	3468      	adds	r4, #104	; 0x68
 8005d7a:	e7d9      	b.n	8005d30 <__sfp+0x1c>
 8005d7c:	2104      	movs	r1, #4
 8005d7e:	4638      	mov	r0, r7
 8005d80:	f7ff ff62 	bl	8005c48 <__sfmoreglue>
 8005d84:	4604      	mov	r4, r0
 8005d86:	6030      	str	r0, [r6, #0]
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d1d5      	bne.n	8005d38 <__sfp+0x24>
 8005d8c:	f7ff ff78 	bl	8005c80 <__sfp_lock_release>
 8005d90:	230c      	movs	r3, #12
 8005d92:	603b      	str	r3, [r7, #0]
 8005d94:	e7ee      	b.n	8005d74 <__sfp+0x60>
 8005d96:	bf00      	nop
 8005d98:	080071b4 	.word	0x080071b4
 8005d9c:	ffff0001 	.word	0xffff0001

08005da0 <_fwalk_reent>:
 8005da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005da4:	4606      	mov	r6, r0
 8005da6:	4688      	mov	r8, r1
 8005da8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005dac:	2700      	movs	r7, #0
 8005dae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005db2:	f1b9 0901 	subs.w	r9, r9, #1
 8005db6:	d505      	bpl.n	8005dc4 <_fwalk_reent+0x24>
 8005db8:	6824      	ldr	r4, [r4, #0]
 8005dba:	2c00      	cmp	r4, #0
 8005dbc:	d1f7      	bne.n	8005dae <_fwalk_reent+0xe>
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dc4:	89ab      	ldrh	r3, [r5, #12]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d907      	bls.n	8005dda <_fwalk_reent+0x3a>
 8005dca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	d003      	beq.n	8005dda <_fwalk_reent+0x3a>
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	47c0      	blx	r8
 8005dd8:	4307      	orrs	r7, r0
 8005dda:	3568      	adds	r5, #104	; 0x68
 8005ddc:	e7e9      	b.n	8005db2 <_fwalk_reent+0x12>

08005dde <__retarget_lock_init_recursive>:
 8005dde:	4770      	bx	lr

08005de0 <__retarget_lock_acquire_recursive>:
 8005de0:	4770      	bx	lr

08005de2 <__retarget_lock_release_recursive>:
 8005de2:	4770      	bx	lr

08005de4 <_lseek_r>:
 8005de4:	b538      	push	{r3, r4, r5, lr}
 8005de6:	4d07      	ldr	r5, [pc, #28]	; (8005e04 <_lseek_r+0x20>)
 8005de8:	4604      	mov	r4, r0
 8005dea:	4608      	mov	r0, r1
 8005dec:	4611      	mov	r1, r2
 8005dee:	2200      	movs	r2, #0
 8005df0:	602a      	str	r2, [r5, #0]
 8005df2:	461a      	mov	r2, r3
 8005df4:	f7fb f954 	bl	80010a0 <_lseek>
 8005df8:	1c43      	adds	r3, r0, #1
 8005dfa:	d102      	bne.n	8005e02 <_lseek_r+0x1e>
 8005dfc:	682b      	ldr	r3, [r5, #0]
 8005dfe:	b103      	cbz	r3, 8005e02 <_lseek_r+0x1e>
 8005e00:	6023      	str	r3, [r4, #0]
 8005e02:	bd38      	pop	{r3, r4, r5, pc}
 8005e04:	20000280 	.word	0x20000280

08005e08 <__swhatbuf_r>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	460e      	mov	r6, r1
 8005e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e10:	2900      	cmp	r1, #0
 8005e12:	b096      	sub	sp, #88	; 0x58
 8005e14:	4614      	mov	r4, r2
 8005e16:	461d      	mov	r5, r3
 8005e18:	da08      	bge.n	8005e2c <__swhatbuf_r+0x24>
 8005e1a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	602a      	str	r2, [r5, #0]
 8005e22:	061a      	lsls	r2, r3, #24
 8005e24:	d410      	bmi.n	8005e48 <__swhatbuf_r+0x40>
 8005e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e2a:	e00e      	b.n	8005e4a <__swhatbuf_r+0x42>
 8005e2c:	466a      	mov	r2, sp
 8005e2e:	f001 f8cf 	bl	8006fd0 <_fstat_r>
 8005e32:	2800      	cmp	r0, #0
 8005e34:	dbf1      	blt.n	8005e1a <__swhatbuf_r+0x12>
 8005e36:	9a01      	ldr	r2, [sp, #4]
 8005e38:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e3c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e40:	425a      	negs	r2, r3
 8005e42:	415a      	adcs	r2, r3
 8005e44:	602a      	str	r2, [r5, #0]
 8005e46:	e7ee      	b.n	8005e26 <__swhatbuf_r+0x1e>
 8005e48:	2340      	movs	r3, #64	; 0x40
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	b016      	add	sp, #88	; 0x58
 8005e50:	bd70      	pop	{r4, r5, r6, pc}
	...

08005e54 <__smakebuf_r>:
 8005e54:	898b      	ldrh	r3, [r1, #12]
 8005e56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e58:	079d      	lsls	r5, r3, #30
 8005e5a:	4606      	mov	r6, r0
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	d507      	bpl.n	8005e70 <__smakebuf_r+0x1c>
 8005e60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	6123      	str	r3, [r4, #16]
 8005e68:	2301      	movs	r3, #1
 8005e6a:	6163      	str	r3, [r4, #20]
 8005e6c:	b002      	add	sp, #8
 8005e6e:	bd70      	pop	{r4, r5, r6, pc}
 8005e70:	ab01      	add	r3, sp, #4
 8005e72:	466a      	mov	r2, sp
 8005e74:	f7ff ffc8 	bl	8005e08 <__swhatbuf_r>
 8005e78:	9900      	ldr	r1, [sp, #0]
 8005e7a:	4605      	mov	r5, r0
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	f000 f895 	bl	8005fac <_malloc_r>
 8005e82:	b948      	cbnz	r0, 8005e98 <__smakebuf_r+0x44>
 8005e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e88:	059a      	lsls	r2, r3, #22
 8005e8a:	d4ef      	bmi.n	8005e6c <__smakebuf_r+0x18>
 8005e8c:	f023 0303 	bic.w	r3, r3, #3
 8005e90:	f043 0302 	orr.w	r3, r3, #2
 8005e94:	81a3      	strh	r3, [r4, #12]
 8005e96:	e7e3      	b.n	8005e60 <__smakebuf_r+0xc>
 8005e98:	4b0d      	ldr	r3, [pc, #52]	; (8005ed0 <__smakebuf_r+0x7c>)
 8005e9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	6020      	str	r0, [r4, #0]
 8005ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea4:	81a3      	strh	r3, [r4, #12]
 8005ea6:	9b00      	ldr	r3, [sp, #0]
 8005ea8:	6163      	str	r3, [r4, #20]
 8005eaa:	9b01      	ldr	r3, [sp, #4]
 8005eac:	6120      	str	r0, [r4, #16]
 8005eae:	b15b      	cbz	r3, 8005ec8 <__smakebuf_r+0x74>
 8005eb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f001 f89d 	bl	8006ff4 <_isatty_r>
 8005eba:	b128      	cbz	r0, 8005ec8 <__smakebuf_r+0x74>
 8005ebc:	89a3      	ldrh	r3, [r4, #12]
 8005ebe:	f023 0303 	bic.w	r3, r3, #3
 8005ec2:	f043 0301 	orr.w	r3, r3, #1
 8005ec6:	81a3      	strh	r3, [r4, #12]
 8005ec8:	89a0      	ldrh	r0, [r4, #12]
 8005eca:	4305      	orrs	r5, r0
 8005ecc:	81a5      	strh	r5, [r4, #12]
 8005ece:	e7cd      	b.n	8005e6c <__smakebuf_r+0x18>
 8005ed0:	08005c3d 	.word	0x08005c3d

08005ed4 <_free_r>:
 8005ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ed6:	2900      	cmp	r1, #0
 8005ed8:	d044      	beq.n	8005f64 <_free_r+0x90>
 8005eda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ede:	9001      	str	r0, [sp, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f1a1 0404 	sub.w	r4, r1, #4
 8005ee6:	bfb8      	it	lt
 8005ee8:	18e4      	addlt	r4, r4, r3
 8005eea:	f001 f8a1 	bl	8007030 <__malloc_lock>
 8005eee:	4a1e      	ldr	r2, [pc, #120]	; (8005f68 <_free_r+0x94>)
 8005ef0:	9801      	ldr	r0, [sp, #4]
 8005ef2:	6813      	ldr	r3, [r2, #0]
 8005ef4:	b933      	cbnz	r3, 8005f04 <_free_r+0x30>
 8005ef6:	6063      	str	r3, [r4, #4]
 8005ef8:	6014      	str	r4, [r2, #0]
 8005efa:	b003      	add	sp, #12
 8005efc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f00:	f001 b89c 	b.w	800703c <__malloc_unlock>
 8005f04:	42a3      	cmp	r3, r4
 8005f06:	d908      	bls.n	8005f1a <_free_r+0x46>
 8005f08:	6825      	ldr	r5, [r4, #0]
 8005f0a:	1961      	adds	r1, r4, r5
 8005f0c:	428b      	cmp	r3, r1
 8005f0e:	bf01      	itttt	eq
 8005f10:	6819      	ldreq	r1, [r3, #0]
 8005f12:	685b      	ldreq	r3, [r3, #4]
 8005f14:	1949      	addeq	r1, r1, r5
 8005f16:	6021      	streq	r1, [r4, #0]
 8005f18:	e7ed      	b.n	8005ef6 <_free_r+0x22>
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	b10b      	cbz	r3, 8005f24 <_free_r+0x50>
 8005f20:	42a3      	cmp	r3, r4
 8005f22:	d9fa      	bls.n	8005f1a <_free_r+0x46>
 8005f24:	6811      	ldr	r1, [r2, #0]
 8005f26:	1855      	adds	r5, r2, r1
 8005f28:	42a5      	cmp	r5, r4
 8005f2a:	d10b      	bne.n	8005f44 <_free_r+0x70>
 8005f2c:	6824      	ldr	r4, [r4, #0]
 8005f2e:	4421      	add	r1, r4
 8005f30:	1854      	adds	r4, r2, r1
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	6011      	str	r1, [r2, #0]
 8005f36:	d1e0      	bne.n	8005efa <_free_r+0x26>
 8005f38:	681c      	ldr	r4, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	6053      	str	r3, [r2, #4]
 8005f3e:	4421      	add	r1, r4
 8005f40:	6011      	str	r1, [r2, #0]
 8005f42:	e7da      	b.n	8005efa <_free_r+0x26>
 8005f44:	d902      	bls.n	8005f4c <_free_r+0x78>
 8005f46:	230c      	movs	r3, #12
 8005f48:	6003      	str	r3, [r0, #0]
 8005f4a:	e7d6      	b.n	8005efa <_free_r+0x26>
 8005f4c:	6825      	ldr	r5, [r4, #0]
 8005f4e:	1961      	adds	r1, r4, r5
 8005f50:	428b      	cmp	r3, r1
 8005f52:	bf04      	itt	eq
 8005f54:	6819      	ldreq	r1, [r3, #0]
 8005f56:	685b      	ldreq	r3, [r3, #4]
 8005f58:	6063      	str	r3, [r4, #4]
 8005f5a:	bf04      	itt	eq
 8005f5c:	1949      	addeq	r1, r1, r5
 8005f5e:	6021      	streq	r1, [r4, #0]
 8005f60:	6054      	str	r4, [r2, #4]
 8005f62:	e7ca      	b.n	8005efa <_free_r+0x26>
 8005f64:	b003      	add	sp, #12
 8005f66:	bd30      	pop	{r4, r5, pc}
 8005f68:	20000278 	.word	0x20000278

08005f6c <sbrk_aligned>:
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	4e0e      	ldr	r6, [pc, #56]	; (8005fa8 <sbrk_aligned+0x3c>)
 8005f70:	460c      	mov	r4, r1
 8005f72:	6831      	ldr	r1, [r6, #0]
 8005f74:	4605      	mov	r5, r0
 8005f76:	b911      	cbnz	r1, 8005f7e <sbrk_aligned+0x12>
 8005f78:	f000 feb0 	bl	8006cdc <_sbrk_r>
 8005f7c:	6030      	str	r0, [r6, #0]
 8005f7e:	4621      	mov	r1, r4
 8005f80:	4628      	mov	r0, r5
 8005f82:	f000 feab 	bl	8006cdc <_sbrk_r>
 8005f86:	1c43      	adds	r3, r0, #1
 8005f88:	d00a      	beq.n	8005fa0 <sbrk_aligned+0x34>
 8005f8a:	1cc4      	adds	r4, r0, #3
 8005f8c:	f024 0403 	bic.w	r4, r4, #3
 8005f90:	42a0      	cmp	r0, r4
 8005f92:	d007      	beq.n	8005fa4 <sbrk_aligned+0x38>
 8005f94:	1a21      	subs	r1, r4, r0
 8005f96:	4628      	mov	r0, r5
 8005f98:	f000 fea0 	bl	8006cdc <_sbrk_r>
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	d101      	bne.n	8005fa4 <sbrk_aligned+0x38>
 8005fa0:	f04f 34ff 	mov.w	r4, #4294967295
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	bd70      	pop	{r4, r5, r6, pc}
 8005fa8:	2000027c 	.word	0x2000027c

08005fac <_malloc_r>:
 8005fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb0:	1ccd      	adds	r5, r1, #3
 8005fb2:	f025 0503 	bic.w	r5, r5, #3
 8005fb6:	3508      	adds	r5, #8
 8005fb8:	2d0c      	cmp	r5, #12
 8005fba:	bf38      	it	cc
 8005fbc:	250c      	movcc	r5, #12
 8005fbe:	2d00      	cmp	r5, #0
 8005fc0:	4607      	mov	r7, r0
 8005fc2:	db01      	blt.n	8005fc8 <_malloc_r+0x1c>
 8005fc4:	42a9      	cmp	r1, r5
 8005fc6:	d905      	bls.n	8005fd4 <_malloc_r+0x28>
 8005fc8:	230c      	movs	r3, #12
 8005fca:	603b      	str	r3, [r7, #0]
 8005fcc:	2600      	movs	r6, #0
 8005fce:	4630      	mov	r0, r6
 8005fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fd4:	4e2e      	ldr	r6, [pc, #184]	; (8006090 <_malloc_r+0xe4>)
 8005fd6:	f001 f82b 	bl	8007030 <__malloc_lock>
 8005fda:	6833      	ldr	r3, [r6, #0]
 8005fdc:	461c      	mov	r4, r3
 8005fde:	bb34      	cbnz	r4, 800602e <_malloc_r+0x82>
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	f7ff ffc2 	bl	8005f6c <sbrk_aligned>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	4604      	mov	r4, r0
 8005fec:	d14d      	bne.n	800608a <_malloc_r+0xde>
 8005fee:	6834      	ldr	r4, [r6, #0]
 8005ff0:	4626      	mov	r6, r4
 8005ff2:	2e00      	cmp	r6, #0
 8005ff4:	d140      	bne.n	8006078 <_malloc_r+0xcc>
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	4631      	mov	r1, r6
 8005ffa:	4638      	mov	r0, r7
 8005ffc:	eb04 0803 	add.w	r8, r4, r3
 8006000:	f000 fe6c 	bl	8006cdc <_sbrk_r>
 8006004:	4580      	cmp	r8, r0
 8006006:	d13a      	bne.n	800607e <_malloc_r+0xd2>
 8006008:	6821      	ldr	r1, [r4, #0]
 800600a:	3503      	adds	r5, #3
 800600c:	1a6d      	subs	r5, r5, r1
 800600e:	f025 0503 	bic.w	r5, r5, #3
 8006012:	3508      	adds	r5, #8
 8006014:	2d0c      	cmp	r5, #12
 8006016:	bf38      	it	cc
 8006018:	250c      	movcc	r5, #12
 800601a:	4629      	mov	r1, r5
 800601c:	4638      	mov	r0, r7
 800601e:	f7ff ffa5 	bl	8005f6c <sbrk_aligned>
 8006022:	3001      	adds	r0, #1
 8006024:	d02b      	beq.n	800607e <_malloc_r+0xd2>
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	442b      	add	r3, r5
 800602a:	6023      	str	r3, [r4, #0]
 800602c:	e00e      	b.n	800604c <_malloc_r+0xa0>
 800602e:	6822      	ldr	r2, [r4, #0]
 8006030:	1b52      	subs	r2, r2, r5
 8006032:	d41e      	bmi.n	8006072 <_malloc_r+0xc6>
 8006034:	2a0b      	cmp	r2, #11
 8006036:	d916      	bls.n	8006066 <_malloc_r+0xba>
 8006038:	1961      	adds	r1, r4, r5
 800603a:	42a3      	cmp	r3, r4
 800603c:	6025      	str	r5, [r4, #0]
 800603e:	bf18      	it	ne
 8006040:	6059      	strne	r1, [r3, #4]
 8006042:	6863      	ldr	r3, [r4, #4]
 8006044:	bf08      	it	eq
 8006046:	6031      	streq	r1, [r6, #0]
 8006048:	5162      	str	r2, [r4, r5]
 800604a:	604b      	str	r3, [r1, #4]
 800604c:	4638      	mov	r0, r7
 800604e:	f104 060b 	add.w	r6, r4, #11
 8006052:	f000 fff3 	bl	800703c <__malloc_unlock>
 8006056:	f026 0607 	bic.w	r6, r6, #7
 800605a:	1d23      	adds	r3, r4, #4
 800605c:	1af2      	subs	r2, r6, r3
 800605e:	d0b6      	beq.n	8005fce <_malloc_r+0x22>
 8006060:	1b9b      	subs	r3, r3, r6
 8006062:	50a3      	str	r3, [r4, r2]
 8006064:	e7b3      	b.n	8005fce <_malloc_r+0x22>
 8006066:	6862      	ldr	r2, [r4, #4]
 8006068:	42a3      	cmp	r3, r4
 800606a:	bf0c      	ite	eq
 800606c:	6032      	streq	r2, [r6, #0]
 800606e:	605a      	strne	r2, [r3, #4]
 8006070:	e7ec      	b.n	800604c <_malloc_r+0xa0>
 8006072:	4623      	mov	r3, r4
 8006074:	6864      	ldr	r4, [r4, #4]
 8006076:	e7b2      	b.n	8005fde <_malloc_r+0x32>
 8006078:	4634      	mov	r4, r6
 800607a:	6876      	ldr	r6, [r6, #4]
 800607c:	e7b9      	b.n	8005ff2 <_malloc_r+0x46>
 800607e:	230c      	movs	r3, #12
 8006080:	603b      	str	r3, [r7, #0]
 8006082:	4638      	mov	r0, r7
 8006084:	f000 ffda 	bl	800703c <__malloc_unlock>
 8006088:	e7a1      	b.n	8005fce <_malloc_r+0x22>
 800608a:	6025      	str	r5, [r4, #0]
 800608c:	e7de      	b.n	800604c <_malloc_r+0xa0>
 800608e:	bf00      	nop
 8006090:	20000278 	.word	0x20000278

08006094 <_sungetc_r>:
 8006094:	b538      	push	{r3, r4, r5, lr}
 8006096:	1c4b      	adds	r3, r1, #1
 8006098:	4614      	mov	r4, r2
 800609a:	d103      	bne.n	80060a4 <_sungetc_r+0x10>
 800609c:	f04f 35ff 	mov.w	r5, #4294967295
 80060a0:	4628      	mov	r0, r5
 80060a2:	bd38      	pop	{r3, r4, r5, pc}
 80060a4:	8993      	ldrh	r3, [r2, #12]
 80060a6:	f023 0320 	bic.w	r3, r3, #32
 80060aa:	8193      	strh	r3, [r2, #12]
 80060ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060ae:	6852      	ldr	r2, [r2, #4]
 80060b0:	b2cd      	uxtb	r5, r1
 80060b2:	b18b      	cbz	r3, 80060d8 <_sungetc_r+0x44>
 80060b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80060b6:	4293      	cmp	r3, r2
 80060b8:	dd08      	ble.n	80060cc <_sungetc_r+0x38>
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	1e5a      	subs	r2, r3, #1
 80060be:	6022      	str	r2, [r4, #0]
 80060c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80060c4:	6863      	ldr	r3, [r4, #4]
 80060c6:	3301      	adds	r3, #1
 80060c8:	6063      	str	r3, [r4, #4]
 80060ca:	e7e9      	b.n	80060a0 <_sungetc_r+0xc>
 80060cc:	4621      	mov	r1, r4
 80060ce:	f000 ff45 	bl	8006f5c <__submore>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d0f1      	beq.n	80060ba <_sungetc_r+0x26>
 80060d6:	e7e1      	b.n	800609c <_sungetc_r+0x8>
 80060d8:	6921      	ldr	r1, [r4, #16]
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	b151      	cbz	r1, 80060f4 <_sungetc_r+0x60>
 80060de:	4299      	cmp	r1, r3
 80060e0:	d208      	bcs.n	80060f4 <_sungetc_r+0x60>
 80060e2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80060e6:	42a9      	cmp	r1, r5
 80060e8:	d104      	bne.n	80060f4 <_sungetc_r+0x60>
 80060ea:	3b01      	subs	r3, #1
 80060ec:	3201      	adds	r2, #1
 80060ee:	6023      	str	r3, [r4, #0]
 80060f0:	6062      	str	r2, [r4, #4]
 80060f2:	e7d5      	b.n	80060a0 <_sungetc_r+0xc>
 80060f4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80060f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060fc:	6363      	str	r3, [r4, #52]	; 0x34
 80060fe:	2303      	movs	r3, #3
 8006100:	63a3      	str	r3, [r4, #56]	; 0x38
 8006102:	4623      	mov	r3, r4
 8006104:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	2301      	movs	r3, #1
 800610c:	e7dc      	b.n	80060c8 <_sungetc_r+0x34>

0800610e <__ssrefill_r>:
 800610e:	b510      	push	{r4, lr}
 8006110:	460c      	mov	r4, r1
 8006112:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006114:	b169      	cbz	r1, 8006132 <__ssrefill_r+0x24>
 8006116:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800611a:	4299      	cmp	r1, r3
 800611c:	d001      	beq.n	8006122 <__ssrefill_r+0x14>
 800611e:	f7ff fed9 	bl	8005ed4 <_free_r>
 8006122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006124:	6063      	str	r3, [r4, #4]
 8006126:	2000      	movs	r0, #0
 8006128:	6360      	str	r0, [r4, #52]	; 0x34
 800612a:	b113      	cbz	r3, 8006132 <__ssrefill_r+0x24>
 800612c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800612e:	6023      	str	r3, [r4, #0]
 8006130:	bd10      	pop	{r4, pc}
 8006132:	6923      	ldr	r3, [r4, #16]
 8006134:	6023      	str	r3, [r4, #0]
 8006136:	2300      	movs	r3, #0
 8006138:	6063      	str	r3, [r4, #4]
 800613a:	89a3      	ldrh	r3, [r4, #12]
 800613c:	f043 0320 	orr.w	r3, r3, #32
 8006140:	81a3      	strh	r3, [r4, #12]
 8006142:	f04f 30ff 	mov.w	r0, #4294967295
 8006146:	e7f3      	b.n	8006130 <__ssrefill_r+0x22>

08006148 <__ssvfiscanf_r>:
 8006148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800614c:	460c      	mov	r4, r1
 800614e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006152:	2100      	movs	r1, #0
 8006154:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006158:	49a6      	ldr	r1, [pc, #664]	; (80063f4 <__ssvfiscanf_r+0x2ac>)
 800615a:	91a0      	str	r1, [sp, #640]	; 0x280
 800615c:	f10d 0804 	add.w	r8, sp, #4
 8006160:	49a5      	ldr	r1, [pc, #660]	; (80063f8 <__ssvfiscanf_r+0x2b0>)
 8006162:	4fa6      	ldr	r7, [pc, #664]	; (80063fc <__ssvfiscanf_r+0x2b4>)
 8006164:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006400 <__ssvfiscanf_r+0x2b8>
 8006168:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800616c:	4606      	mov	r6, r0
 800616e:	91a1      	str	r1, [sp, #644]	; 0x284
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	7813      	ldrb	r3, [r2, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 815a 	beq.w	800642e <__ssvfiscanf_r+0x2e6>
 800617a:	5dd9      	ldrb	r1, [r3, r7]
 800617c:	f011 0108 	ands.w	r1, r1, #8
 8006180:	f102 0501 	add.w	r5, r2, #1
 8006184:	d019      	beq.n	80061ba <__ssvfiscanf_r+0x72>
 8006186:	6863      	ldr	r3, [r4, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	dd0f      	ble.n	80061ac <__ssvfiscanf_r+0x64>
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	781a      	ldrb	r2, [r3, #0]
 8006190:	5cba      	ldrb	r2, [r7, r2]
 8006192:	0712      	lsls	r2, r2, #28
 8006194:	d401      	bmi.n	800619a <__ssvfiscanf_r+0x52>
 8006196:	462a      	mov	r2, r5
 8006198:	e7eb      	b.n	8006172 <__ssvfiscanf_r+0x2a>
 800619a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800619c:	3201      	adds	r2, #1
 800619e:	9245      	str	r2, [sp, #276]	; 0x114
 80061a0:	6862      	ldr	r2, [r4, #4]
 80061a2:	3301      	adds	r3, #1
 80061a4:	3a01      	subs	r2, #1
 80061a6:	6062      	str	r2, [r4, #4]
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	e7ec      	b.n	8006186 <__ssvfiscanf_r+0x3e>
 80061ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80061ae:	4621      	mov	r1, r4
 80061b0:	4630      	mov	r0, r6
 80061b2:	4798      	blx	r3
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d0e9      	beq.n	800618c <__ssvfiscanf_r+0x44>
 80061b8:	e7ed      	b.n	8006196 <__ssvfiscanf_r+0x4e>
 80061ba:	2b25      	cmp	r3, #37	; 0x25
 80061bc:	d012      	beq.n	80061e4 <__ssvfiscanf_r+0x9c>
 80061be:	469a      	mov	sl, r3
 80061c0:	6863      	ldr	r3, [r4, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f340 8091 	ble.w	80062ea <__ssvfiscanf_r+0x1a2>
 80061c8:	6822      	ldr	r2, [r4, #0]
 80061ca:	7813      	ldrb	r3, [r2, #0]
 80061cc:	4553      	cmp	r3, sl
 80061ce:	f040 812e 	bne.w	800642e <__ssvfiscanf_r+0x2e6>
 80061d2:	6863      	ldr	r3, [r4, #4]
 80061d4:	3b01      	subs	r3, #1
 80061d6:	6063      	str	r3, [r4, #4]
 80061d8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80061da:	3201      	adds	r2, #1
 80061dc:	3301      	adds	r3, #1
 80061de:	6022      	str	r2, [r4, #0]
 80061e0:	9345      	str	r3, [sp, #276]	; 0x114
 80061e2:	e7d8      	b.n	8006196 <__ssvfiscanf_r+0x4e>
 80061e4:	9141      	str	r1, [sp, #260]	; 0x104
 80061e6:	9143      	str	r1, [sp, #268]	; 0x10c
 80061e8:	7853      	ldrb	r3, [r2, #1]
 80061ea:	2b2a      	cmp	r3, #42	; 0x2a
 80061ec:	bf02      	ittt	eq
 80061ee:	2310      	moveq	r3, #16
 80061f0:	1c95      	addeq	r5, r2, #2
 80061f2:	9341      	streq	r3, [sp, #260]	; 0x104
 80061f4:	220a      	movs	r2, #10
 80061f6:	46aa      	mov	sl, r5
 80061f8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80061fc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006200:	2b09      	cmp	r3, #9
 8006202:	d91d      	bls.n	8006240 <__ssvfiscanf_r+0xf8>
 8006204:	487e      	ldr	r0, [pc, #504]	; (8006400 <__ssvfiscanf_r+0x2b8>)
 8006206:	2203      	movs	r2, #3
 8006208:	f7f9 fffa 	bl	8000200 <memchr>
 800620c:	b140      	cbz	r0, 8006220 <__ssvfiscanf_r+0xd8>
 800620e:	2301      	movs	r3, #1
 8006210:	eba0 0009 	sub.w	r0, r0, r9
 8006214:	fa03 f000 	lsl.w	r0, r3, r0
 8006218:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800621a:	4318      	orrs	r0, r3
 800621c:	9041      	str	r0, [sp, #260]	; 0x104
 800621e:	4655      	mov	r5, sl
 8006220:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006224:	2b78      	cmp	r3, #120	; 0x78
 8006226:	d806      	bhi.n	8006236 <__ssvfiscanf_r+0xee>
 8006228:	2b57      	cmp	r3, #87	; 0x57
 800622a:	d810      	bhi.n	800624e <__ssvfiscanf_r+0x106>
 800622c:	2b25      	cmp	r3, #37	; 0x25
 800622e:	d0c6      	beq.n	80061be <__ssvfiscanf_r+0x76>
 8006230:	d856      	bhi.n	80062e0 <__ssvfiscanf_r+0x198>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d064      	beq.n	8006300 <__ssvfiscanf_r+0x1b8>
 8006236:	2303      	movs	r3, #3
 8006238:	9347      	str	r3, [sp, #284]	; 0x11c
 800623a:	230a      	movs	r3, #10
 800623c:	9342      	str	r3, [sp, #264]	; 0x108
 800623e:	e071      	b.n	8006324 <__ssvfiscanf_r+0x1dc>
 8006240:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006242:	fb02 1103 	mla	r1, r2, r3, r1
 8006246:	3930      	subs	r1, #48	; 0x30
 8006248:	9143      	str	r1, [sp, #268]	; 0x10c
 800624a:	4655      	mov	r5, sl
 800624c:	e7d3      	b.n	80061f6 <__ssvfiscanf_r+0xae>
 800624e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006252:	2a20      	cmp	r2, #32
 8006254:	d8ef      	bhi.n	8006236 <__ssvfiscanf_r+0xee>
 8006256:	a101      	add	r1, pc, #4	; (adr r1, 800625c <__ssvfiscanf_r+0x114>)
 8006258:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800625c:	0800630f 	.word	0x0800630f
 8006260:	08006237 	.word	0x08006237
 8006264:	08006237 	.word	0x08006237
 8006268:	0800636d 	.word	0x0800636d
 800626c:	08006237 	.word	0x08006237
 8006270:	08006237 	.word	0x08006237
 8006274:	08006237 	.word	0x08006237
 8006278:	08006237 	.word	0x08006237
 800627c:	08006237 	.word	0x08006237
 8006280:	08006237 	.word	0x08006237
 8006284:	08006237 	.word	0x08006237
 8006288:	08006383 	.word	0x08006383
 800628c:	08006359 	.word	0x08006359
 8006290:	080062e7 	.word	0x080062e7
 8006294:	080062e7 	.word	0x080062e7
 8006298:	080062e7 	.word	0x080062e7
 800629c:	08006237 	.word	0x08006237
 80062a0:	0800635d 	.word	0x0800635d
 80062a4:	08006237 	.word	0x08006237
 80062a8:	08006237 	.word	0x08006237
 80062ac:	08006237 	.word	0x08006237
 80062b0:	08006237 	.word	0x08006237
 80062b4:	08006393 	.word	0x08006393
 80062b8:	08006365 	.word	0x08006365
 80062bc:	08006307 	.word	0x08006307
 80062c0:	08006237 	.word	0x08006237
 80062c4:	08006237 	.word	0x08006237
 80062c8:	0800638f 	.word	0x0800638f
 80062cc:	08006237 	.word	0x08006237
 80062d0:	08006359 	.word	0x08006359
 80062d4:	08006237 	.word	0x08006237
 80062d8:	08006237 	.word	0x08006237
 80062dc:	0800630f 	.word	0x0800630f
 80062e0:	3b45      	subs	r3, #69	; 0x45
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d8a7      	bhi.n	8006236 <__ssvfiscanf_r+0xee>
 80062e6:	2305      	movs	r3, #5
 80062e8:	e01b      	b.n	8006322 <__ssvfiscanf_r+0x1da>
 80062ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80062ec:	4621      	mov	r1, r4
 80062ee:	4630      	mov	r0, r6
 80062f0:	4798      	blx	r3
 80062f2:	2800      	cmp	r0, #0
 80062f4:	f43f af68 	beq.w	80061c8 <__ssvfiscanf_r+0x80>
 80062f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80062fa:	2800      	cmp	r0, #0
 80062fc:	f040 808d 	bne.w	800641a <__ssvfiscanf_r+0x2d2>
 8006300:	f04f 30ff 	mov.w	r0, #4294967295
 8006304:	e08f      	b.n	8006426 <__ssvfiscanf_r+0x2de>
 8006306:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006308:	f042 0220 	orr.w	r2, r2, #32
 800630c:	9241      	str	r2, [sp, #260]	; 0x104
 800630e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006314:	9241      	str	r2, [sp, #260]	; 0x104
 8006316:	2210      	movs	r2, #16
 8006318:	2b6f      	cmp	r3, #111	; 0x6f
 800631a:	9242      	str	r2, [sp, #264]	; 0x108
 800631c:	bf34      	ite	cc
 800631e:	2303      	movcc	r3, #3
 8006320:	2304      	movcs	r3, #4
 8006322:	9347      	str	r3, [sp, #284]	; 0x11c
 8006324:	6863      	ldr	r3, [r4, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	dd42      	ble.n	80063b0 <__ssvfiscanf_r+0x268>
 800632a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800632c:	0659      	lsls	r1, r3, #25
 800632e:	d404      	bmi.n	800633a <__ssvfiscanf_r+0x1f2>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	781a      	ldrb	r2, [r3, #0]
 8006334:	5cba      	ldrb	r2, [r7, r2]
 8006336:	0712      	lsls	r2, r2, #28
 8006338:	d441      	bmi.n	80063be <__ssvfiscanf_r+0x276>
 800633a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800633c:	2b02      	cmp	r3, #2
 800633e:	dc50      	bgt.n	80063e2 <__ssvfiscanf_r+0x29a>
 8006340:	466b      	mov	r3, sp
 8006342:	4622      	mov	r2, r4
 8006344:	a941      	add	r1, sp, #260	; 0x104
 8006346:	4630      	mov	r0, r6
 8006348:	f000 fb64 	bl	8006a14 <_scanf_chars>
 800634c:	2801      	cmp	r0, #1
 800634e:	d06e      	beq.n	800642e <__ssvfiscanf_r+0x2e6>
 8006350:	2802      	cmp	r0, #2
 8006352:	f47f af20 	bne.w	8006196 <__ssvfiscanf_r+0x4e>
 8006356:	e7cf      	b.n	80062f8 <__ssvfiscanf_r+0x1b0>
 8006358:	220a      	movs	r2, #10
 800635a:	e7dd      	b.n	8006318 <__ssvfiscanf_r+0x1d0>
 800635c:	2300      	movs	r3, #0
 800635e:	9342      	str	r3, [sp, #264]	; 0x108
 8006360:	2303      	movs	r3, #3
 8006362:	e7de      	b.n	8006322 <__ssvfiscanf_r+0x1da>
 8006364:	2308      	movs	r3, #8
 8006366:	9342      	str	r3, [sp, #264]	; 0x108
 8006368:	2304      	movs	r3, #4
 800636a:	e7da      	b.n	8006322 <__ssvfiscanf_r+0x1da>
 800636c:	4629      	mov	r1, r5
 800636e:	4640      	mov	r0, r8
 8006370:	f000 fcc4 	bl	8006cfc <__sccl>
 8006374:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800637a:	9341      	str	r3, [sp, #260]	; 0x104
 800637c:	4605      	mov	r5, r0
 800637e:	2301      	movs	r3, #1
 8006380:	e7cf      	b.n	8006322 <__ssvfiscanf_r+0x1da>
 8006382:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006388:	9341      	str	r3, [sp, #260]	; 0x104
 800638a:	2300      	movs	r3, #0
 800638c:	e7c9      	b.n	8006322 <__ssvfiscanf_r+0x1da>
 800638e:	2302      	movs	r3, #2
 8006390:	e7c7      	b.n	8006322 <__ssvfiscanf_r+0x1da>
 8006392:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006394:	06c3      	lsls	r3, r0, #27
 8006396:	f53f aefe 	bmi.w	8006196 <__ssvfiscanf_r+0x4e>
 800639a:	9b00      	ldr	r3, [sp, #0]
 800639c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800639e:	1d19      	adds	r1, r3, #4
 80063a0:	9100      	str	r1, [sp, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f010 0f01 	tst.w	r0, #1
 80063a8:	bf14      	ite	ne
 80063aa:	801a      	strhne	r2, [r3, #0]
 80063ac:	601a      	streq	r2, [r3, #0]
 80063ae:	e6f2      	b.n	8006196 <__ssvfiscanf_r+0x4e>
 80063b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80063b2:	4621      	mov	r1, r4
 80063b4:	4630      	mov	r0, r6
 80063b6:	4798      	blx	r3
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d0b6      	beq.n	800632a <__ssvfiscanf_r+0x1e2>
 80063bc:	e79c      	b.n	80062f8 <__ssvfiscanf_r+0x1b0>
 80063be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80063c0:	3201      	adds	r2, #1
 80063c2:	9245      	str	r2, [sp, #276]	; 0x114
 80063c4:	6862      	ldr	r2, [r4, #4]
 80063c6:	3a01      	subs	r2, #1
 80063c8:	2a00      	cmp	r2, #0
 80063ca:	6062      	str	r2, [r4, #4]
 80063cc:	dd02      	ble.n	80063d4 <__ssvfiscanf_r+0x28c>
 80063ce:	3301      	adds	r3, #1
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	e7ad      	b.n	8006330 <__ssvfiscanf_r+0x1e8>
 80063d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80063d6:	4621      	mov	r1, r4
 80063d8:	4630      	mov	r0, r6
 80063da:	4798      	blx	r3
 80063dc:	2800      	cmp	r0, #0
 80063de:	d0a7      	beq.n	8006330 <__ssvfiscanf_r+0x1e8>
 80063e0:	e78a      	b.n	80062f8 <__ssvfiscanf_r+0x1b0>
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	dc0e      	bgt.n	8006404 <__ssvfiscanf_r+0x2bc>
 80063e6:	466b      	mov	r3, sp
 80063e8:	4622      	mov	r2, r4
 80063ea:	a941      	add	r1, sp, #260	; 0x104
 80063ec:	4630      	mov	r0, r6
 80063ee:	f000 fb6b 	bl	8006ac8 <_scanf_i>
 80063f2:	e7ab      	b.n	800634c <__ssvfiscanf_r+0x204>
 80063f4:	08006095 	.word	0x08006095
 80063f8:	0800610f 	.word	0x0800610f
 80063fc:	08007267 	.word	0x08007267
 8006400:	08007218 	.word	0x08007218
 8006404:	4b0b      	ldr	r3, [pc, #44]	; (8006434 <__ssvfiscanf_r+0x2ec>)
 8006406:	2b00      	cmp	r3, #0
 8006408:	f43f aec5 	beq.w	8006196 <__ssvfiscanf_r+0x4e>
 800640c:	466b      	mov	r3, sp
 800640e:	4622      	mov	r2, r4
 8006410:	a941      	add	r1, sp, #260	; 0x104
 8006412:	4630      	mov	r0, r6
 8006414:	f3af 8000 	nop.w
 8006418:	e798      	b.n	800634c <__ssvfiscanf_r+0x204>
 800641a:	89a3      	ldrh	r3, [r4, #12]
 800641c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006420:	bf18      	it	ne
 8006422:	f04f 30ff 	movne.w	r0, #4294967295
 8006426:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800642a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800642e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006430:	e7f9      	b.n	8006426 <__ssvfiscanf_r+0x2de>
 8006432:	bf00      	nop
 8006434:	00000000 	.word	0x00000000

08006438 <__sfputc_r>:
 8006438:	6893      	ldr	r3, [r2, #8]
 800643a:	3b01      	subs	r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	b410      	push	{r4}
 8006440:	6093      	str	r3, [r2, #8]
 8006442:	da08      	bge.n	8006456 <__sfputc_r+0x1e>
 8006444:	6994      	ldr	r4, [r2, #24]
 8006446:	42a3      	cmp	r3, r4
 8006448:	db01      	blt.n	800644e <__sfputc_r+0x16>
 800644a:	290a      	cmp	r1, #10
 800644c:	d103      	bne.n	8006456 <__sfputc_r+0x1e>
 800644e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006452:	f7ff ba2b 	b.w	80058ac <__swbuf_r>
 8006456:	6813      	ldr	r3, [r2, #0]
 8006458:	1c58      	adds	r0, r3, #1
 800645a:	6010      	str	r0, [r2, #0]
 800645c:	7019      	strb	r1, [r3, #0]
 800645e:	4608      	mov	r0, r1
 8006460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006464:	4770      	bx	lr

08006466 <__sfputs_r>:
 8006466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006468:	4606      	mov	r6, r0
 800646a:	460f      	mov	r7, r1
 800646c:	4614      	mov	r4, r2
 800646e:	18d5      	adds	r5, r2, r3
 8006470:	42ac      	cmp	r4, r5
 8006472:	d101      	bne.n	8006478 <__sfputs_r+0x12>
 8006474:	2000      	movs	r0, #0
 8006476:	e007      	b.n	8006488 <__sfputs_r+0x22>
 8006478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800647c:	463a      	mov	r2, r7
 800647e:	4630      	mov	r0, r6
 8006480:	f7ff ffda 	bl	8006438 <__sfputc_r>
 8006484:	1c43      	adds	r3, r0, #1
 8006486:	d1f3      	bne.n	8006470 <__sfputs_r+0xa>
 8006488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800648c <_vfiprintf_r>:
 800648c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006490:	460d      	mov	r5, r1
 8006492:	b09d      	sub	sp, #116	; 0x74
 8006494:	4614      	mov	r4, r2
 8006496:	4698      	mov	r8, r3
 8006498:	4606      	mov	r6, r0
 800649a:	b118      	cbz	r0, 80064a4 <_vfiprintf_r+0x18>
 800649c:	6983      	ldr	r3, [r0, #24]
 800649e:	b90b      	cbnz	r3, 80064a4 <_vfiprintf_r+0x18>
 80064a0:	f7ff fc00 	bl	8005ca4 <__sinit>
 80064a4:	4b89      	ldr	r3, [pc, #548]	; (80066cc <_vfiprintf_r+0x240>)
 80064a6:	429d      	cmp	r5, r3
 80064a8:	d11b      	bne.n	80064e2 <_vfiprintf_r+0x56>
 80064aa:	6875      	ldr	r5, [r6, #4]
 80064ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064ae:	07d9      	lsls	r1, r3, #31
 80064b0:	d405      	bmi.n	80064be <_vfiprintf_r+0x32>
 80064b2:	89ab      	ldrh	r3, [r5, #12]
 80064b4:	059a      	lsls	r2, r3, #22
 80064b6:	d402      	bmi.n	80064be <_vfiprintf_r+0x32>
 80064b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064ba:	f7ff fc91 	bl	8005de0 <__retarget_lock_acquire_recursive>
 80064be:	89ab      	ldrh	r3, [r5, #12]
 80064c0:	071b      	lsls	r3, r3, #28
 80064c2:	d501      	bpl.n	80064c8 <_vfiprintf_r+0x3c>
 80064c4:	692b      	ldr	r3, [r5, #16]
 80064c6:	b9eb      	cbnz	r3, 8006504 <_vfiprintf_r+0x78>
 80064c8:	4629      	mov	r1, r5
 80064ca:	4630      	mov	r0, r6
 80064cc:	f7ff fa52 	bl	8005974 <__swsetup_r>
 80064d0:	b1c0      	cbz	r0, 8006504 <_vfiprintf_r+0x78>
 80064d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064d4:	07dc      	lsls	r4, r3, #31
 80064d6:	d50e      	bpl.n	80064f6 <_vfiprintf_r+0x6a>
 80064d8:	f04f 30ff 	mov.w	r0, #4294967295
 80064dc:	b01d      	add	sp, #116	; 0x74
 80064de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e2:	4b7b      	ldr	r3, [pc, #492]	; (80066d0 <_vfiprintf_r+0x244>)
 80064e4:	429d      	cmp	r5, r3
 80064e6:	d101      	bne.n	80064ec <_vfiprintf_r+0x60>
 80064e8:	68b5      	ldr	r5, [r6, #8]
 80064ea:	e7df      	b.n	80064ac <_vfiprintf_r+0x20>
 80064ec:	4b79      	ldr	r3, [pc, #484]	; (80066d4 <_vfiprintf_r+0x248>)
 80064ee:	429d      	cmp	r5, r3
 80064f0:	bf08      	it	eq
 80064f2:	68f5      	ldreq	r5, [r6, #12]
 80064f4:	e7da      	b.n	80064ac <_vfiprintf_r+0x20>
 80064f6:	89ab      	ldrh	r3, [r5, #12]
 80064f8:	0598      	lsls	r0, r3, #22
 80064fa:	d4ed      	bmi.n	80064d8 <_vfiprintf_r+0x4c>
 80064fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064fe:	f7ff fc70 	bl	8005de2 <__retarget_lock_release_recursive>
 8006502:	e7e9      	b.n	80064d8 <_vfiprintf_r+0x4c>
 8006504:	2300      	movs	r3, #0
 8006506:	9309      	str	r3, [sp, #36]	; 0x24
 8006508:	2320      	movs	r3, #32
 800650a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800650e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006512:	2330      	movs	r3, #48	; 0x30
 8006514:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80066d8 <_vfiprintf_r+0x24c>
 8006518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800651c:	f04f 0901 	mov.w	r9, #1
 8006520:	4623      	mov	r3, r4
 8006522:	469a      	mov	sl, r3
 8006524:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006528:	b10a      	cbz	r2, 800652e <_vfiprintf_r+0xa2>
 800652a:	2a25      	cmp	r2, #37	; 0x25
 800652c:	d1f9      	bne.n	8006522 <_vfiprintf_r+0x96>
 800652e:	ebba 0b04 	subs.w	fp, sl, r4
 8006532:	d00b      	beq.n	800654c <_vfiprintf_r+0xc0>
 8006534:	465b      	mov	r3, fp
 8006536:	4622      	mov	r2, r4
 8006538:	4629      	mov	r1, r5
 800653a:	4630      	mov	r0, r6
 800653c:	f7ff ff93 	bl	8006466 <__sfputs_r>
 8006540:	3001      	adds	r0, #1
 8006542:	f000 80aa 	beq.w	800669a <_vfiprintf_r+0x20e>
 8006546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006548:	445a      	add	r2, fp
 800654a:	9209      	str	r2, [sp, #36]	; 0x24
 800654c:	f89a 3000 	ldrb.w	r3, [sl]
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 80a2 	beq.w	800669a <_vfiprintf_r+0x20e>
 8006556:	2300      	movs	r3, #0
 8006558:	f04f 32ff 	mov.w	r2, #4294967295
 800655c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006560:	f10a 0a01 	add.w	sl, sl, #1
 8006564:	9304      	str	r3, [sp, #16]
 8006566:	9307      	str	r3, [sp, #28]
 8006568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800656c:	931a      	str	r3, [sp, #104]	; 0x68
 800656e:	4654      	mov	r4, sl
 8006570:	2205      	movs	r2, #5
 8006572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006576:	4858      	ldr	r0, [pc, #352]	; (80066d8 <_vfiprintf_r+0x24c>)
 8006578:	f7f9 fe42 	bl	8000200 <memchr>
 800657c:	9a04      	ldr	r2, [sp, #16]
 800657e:	b9d8      	cbnz	r0, 80065b8 <_vfiprintf_r+0x12c>
 8006580:	06d1      	lsls	r1, r2, #27
 8006582:	bf44      	itt	mi
 8006584:	2320      	movmi	r3, #32
 8006586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800658a:	0713      	lsls	r3, r2, #28
 800658c:	bf44      	itt	mi
 800658e:	232b      	movmi	r3, #43	; 0x2b
 8006590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006594:	f89a 3000 	ldrb.w	r3, [sl]
 8006598:	2b2a      	cmp	r3, #42	; 0x2a
 800659a:	d015      	beq.n	80065c8 <_vfiprintf_r+0x13c>
 800659c:	9a07      	ldr	r2, [sp, #28]
 800659e:	4654      	mov	r4, sl
 80065a0:	2000      	movs	r0, #0
 80065a2:	f04f 0c0a 	mov.w	ip, #10
 80065a6:	4621      	mov	r1, r4
 80065a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065ac:	3b30      	subs	r3, #48	; 0x30
 80065ae:	2b09      	cmp	r3, #9
 80065b0:	d94e      	bls.n	8006650 <_vfiprintf_r+0x1c4>
 80065b2:	b1b0      	cbz	r0, 80065e2 <_vfiprintf_r+0x156>
 80065b4:	9207      	str	r2, [sp, #28]
 80065b6:	e014      	b.n	80065e2 <_vfiprintf_r+0x156>
 80065b8:	eba0 0308 	sub.w	r3, r0, r8
 80065bc:	fa09 f303 	lsl.w	r3, r9, r3
 80065c0:	4313      	orrs	r3, r2
 80065c2:	9304      	str	r3, [sp, #16]
 80065c4:	46a2      	mov	sl, r4
 80065c6:	e7d2      	b.n	800656e <_vfiprintf_r+0xe2>
 80065c8:	9b03      	ldr	r3, [sp, #12]
 80065ca:	1d19      	adds	r1, r3, #4
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	9103      	str	r1, [sp, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	bfbb      	ittet	lt
 80065d4:	425b      	neglt	r3, r3
 80065d6:	f042 0202 	orrlt.w	r2, r2, #2
 80065da:	9307      	strge	r3, [sp, #28]
 80065dc:	9307      	strlt	r3, [sp, #28]
 80065de:	bfb8      	it	lt
 80065e0:	9204      	strlt	r2, [sp, #16]
 80065e2:	7823      	ldrb	r3, [r4, #0]
 80065e4:	2b2e      	cmp	r3, #46	; 0x2e
 80065e6:	d10c      	bne.n	8006602 <_vfiprintf_r+0x176>
 80065e8:	7863      	ldrb	r3, [r4, #1]
 80065ea:	2b2a      	cmp	r3, #42	; 0x2a
 80065ec:	d135      	bne.n	800665a <_vfiprintf_r+0x1ce>
 80065ee:	9b03      	ldr	r3, [sp, #12]
 80065f0:	1d1a      	adds	r2, r3, #4
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	9203      	str	r2, [sp, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	bfb8      	it	lt
 80065fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80065fe:	3402      	adds	r4, #2
 8006600:	9305      	str	r3, [sp, #20]
 8006602:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80066e8 <_vfiprintf_r+0x25c>
 8006606:	7821      	ldrb	r1, [r4, #0]
 8006608:	2203      	movs	r2, #3
 800660a:	4650      	mov	r0, sl
 800660c:	f7f9 fdf8 	bl	8000200 <memchr>
 8006610:	b140      	cbz	r0, 8006624 <_vfiprintf_r+0x198>
 8006612:	2340      	movs	r3, #64	; 0x40
 8006614:	eba0 000a 	sub.w	r0, r0, sl
 8006618:	fa03 f000 	lsl.w	r0, r3, r0
 800661c:	9b04      	ldr	r3, [sp, #16]
 800661e:	4303      	orrs	r3, r0
 8006620:	3401      	adds	r4, #1
 8006622:	9304      	str	r3, [sp, #16]
 8006624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006628:	482c      	ldr	r0, [pc, #176]	; (80066dc <_vfiprintf_r+0x250>)
 800662a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800662e:	2206      	movs	r2, #6
 8006630:	f7f9 fde6 	bl	8000200 <memchr>
 8006634:	2800      	cmp	r0, #0
 8006636:	d03f      	beq.n	80066b8 <_vfiprintf_r+0x22c>
 8006638:	4b29      	ldr	r3, [pc, #164]	; (80066e0 <_vfiprintf_r+0x254>)
 800663a:	bb1b      	cbnz	r3, 8006684 <_vfiprintf_r+0x1f8>
 800663c:	9b03      	ldr	r3, [sp, #12]
 800663e:	3307      	adds	r3, #7
 8006640:	f023 0307 	bic.w	r3, r3, #7
 8006644:	3308      	adds	r3, #8
 8006646:	9303      	str	r3, [sp, #12]
 8006648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800664a:	443b      	add	r3, r7
 800664c:	9309      	str	r3, [sp, #36]	; 0x24
 800664e:	e767      	b.n	8006520 <_vfiprintf_r+0x94>
 8006650:	fb0c 3202 	mla	r2, ip, r2, r3
 8006654:	460c      	mov	r4, r1
 8006656:	2001      	movs	r0, #1
 8006658:	e7a5      	b.n	80065a6 <_vfiprintf_r+0x11a>
 800665a:	2300      	movs	r3, #0
 800665c:	3401      	adds	r4, #1
 800665e:	9305      	str	r3, [sp, #20]
 8006660:	4619      	mov	r1, r3
 8006662:	f04f 0c0a 	mov.w	ip, #10
 8006666:	4620      	mov	r0, r4
 8006668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800666c:	3a30      	subs	r2, #48	; 0x30
 800666e:	2a09      	cmp	r2, #9
 8006670:	d903      	bls.n	800667a <_vfiprintf_r+0x1ee>
 8006672:	2b00      	cmp	r3, #0
 8006674:	d0c5      	beq.n	8006602 <_vfiprintf_r+0x176>
 8006676:	9105      	str	r1, [sp, #20]
 8006678:	e7c3      	b.n	8006602 <_vfiprintf_r+0x176>
 800667a:	fb0c 2101 	mla	r1, ip, r1, r2
 800667e:	4604      	mov	r4, r0
 8006680:	2301      	movs	r3, #1
 8006682:	e7f0      	b.n	8006666 <_vfiprintf_r+0x1da>
 8006684:	ab03      	add	r3, sp, #12
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	462a      	mov	r2, r5
 800668a:	4b16      	ldr	r3, [pc, #88]	; (80066e4 <_vfiprintf_r+0x258>)
 800668c:	a904      	add	r1, sp, #16
 800668e:	4630      	mov	r0, r6
 8006690:	f3af 8000 	nop.w
 8006694:	4607      	mov	r7, r0
 8006696:	1c78      	adds	r0, r7, #1
 8006698:	d1d6      	bne.n	8006648 <_vfiprintf_r+0x1bc>
 800669a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800669c:	07d9      	lsls	r1, r3, #31
 800669e:	d405      	bmi.n	80066ac <_vfiprintf_r+0x220>
 80066a0:	89ab      	ldrh	r3, [r5, #12]
 80066a2:	059a      	lsls	r2, r3, #22
 80066a4:	d402      	bmi.n	80066ac <_vfiprintf_r+0x220>
 80066a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066a8:	f7ff fb9b 	bl	8005de2 <__retarget_lock_release_recursive>
 80066ac:	89ab      	ldrh	r3, [r5, #12]
 80066ae:	065b      	lsls	r3, r3, #25
 80066b0:	f53f af12 	bmi.w	80064d8 <_vfiprintf_r+0x4c>
 80066b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066b6:	e711      	b.n	80064dc <_vfiprintf_r+0x50>
 80066b8:	ab03      	add	r3, sp, #12
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	462a      	mov	r2, r5
 80066be:	4b09      	ldr	r3, [pc, #36]	; (80066e4 <_vfiprintf_r+0x258>)
 80066c0:	a904      	add	r1, sp, #16
 80066c2:	4630      	mov	r0, r6
 80066c4:	f000 f880 	bl	80067c8 <_printf_i>
 80066c8:	e7e4      	b.n	8006694 <_vfiprintf_r+0x208>
 80066ca:	bf00      	nop
 80066cc:	080071d8 	.word	0x080071d8
 80066d0:	080071f8 	.word	0x080071f8
 80066d4:	080071b8 	.word	0x080071b8
 80066d8:	0800721c 	.word	0x0800721c
 80066dc:	08007222 	.word	0x08007222
 80066e0:	00000000 	.word	0x00000000
 80066e4:	08006467 	.word	0x08006467
 80066e8:	08007218 	.word	0x08007218

080066ec <_printf_common>:
 80066ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f0:	4616      	mov	r6, r2
 80066f2:	4699      	mov	r9, r3
 80066f4:	688a      	ldr	r2, [r1, #8]
 80066f6:	690b      	ldr	r3, [r1, #16]
 80066f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066fc:	4293      	cmp	r3, r2
 80066fe:	bfb8      	it	lt
 8006700:	4613      	movlt	r3, r2
 8006702:	6033      	str	r3, [r6, #0]
 8006704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006708:	4607      	mov	r7, r0
 800670a:	460c      	mov	r4, r1
 800670c:	b10a      	cbz	r2, 8006712 <_printf_common+0x26>
 800670e:	3301      	adds	r3, #1
 8006710:	6033      	str	r3, [r6, #0]
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	0699      	lsls	r1, r3, #26
 8006716:	bf42      	ittt	mi
 8006718:	6833      	ldrmi	r3, [r6, #0]
 800671a:	3302      	addmi	r3, #2
 800671c:	6033      	strmi	r3, [r6, #0]
 800671e:	6825      	ldr	r5, [r4, #0]
 8006720:	f015 0506 	ands.w	r5, r5, #6
 8006724:	d106      	bne.n	8006734 <_printf_common+0x48>
 8006726:	f104 0a19 	add.w	sl, r4, #25
 800672a:	68e3      	ldr	r3, [r4, #12]
 800672c:	6832      	ldr	r2, [r6, #0]
 800672e:	1a9b      	subs	r3, r3, r2
 8006730:	42ab      	cmp	r3, r5
 8006732:	dc26      	bgt.n	8006782 <_printf_common+0x96>
 8006734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006738:	1e13      	subs	r3, r2, #0
 800673a:	6822      	ldr	r2, [r4, #0]
 800673c:	bf18      	it	ne
 800673e:	2301      	movne	r3, #1
 8006740:	0692      	lsls	r2, r2, #26
 8006742:	d42b      	bmi.n	800679c <_printf_common+0xb0>
 8006744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006748:	4649      	mov	r1, r9
 800674a:	4638      	mov	r0, r7
 800674c:	47c0      	blx	r8
 800674e:	3001      	adds	r0, #1
 8006750:	d01e      	beq.n	8006790 <_printf_common+0xa4>
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	68e5      	ldr	r5, [r4, #12]
 8006756:	6832      	ldr	r2, [r6, #0]
 8006758:	f003 0306 	and.w	r3, r3, #6
 800675c:	2b04      	cmp	r3, #4
 800675e:	bf08      	it	eq
 8006760:	1aad      	subeq	r5, r5, r2
 8006762:	68a3      	ldr	r3, [r4, #8]
 8006764:	6922      	ldr	r2, [r4, #16]
 8006766:	bf0c      	ite	eq
 8006768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800676c:	2500      	movne	r5, #0
 800676e:	4293      	cmp	r3, r2
 8006770:	bfc4      	itt	gt
 8006772:	1a9b      	subgt	r3, r3, r2
 8006774:	18ed      	addgt	r5, r5, r3
 8006776:	2600      	movs	r6, #0
 8006778:	341a      	adds	r4, #26
 800677a:	42b5      	cmp	r5, r6
 800677c:	d11a      	bne.n	80067b4 <_printf_common+0xc8>
 800677e:	2000      	movs	r0, #0
 8006780:	e008      	b.n	8006794 <_printf_common+0xa8>
 8006782:	2301      	movs	r3, #1
 8006784:	4652      	mov	r2, sl
 8006786:	4649      	mov	r1, r9
 8006788:	4638      	mov	r0, r7
 800678a:	47c0      	blx	r8
 800678c:	3001      	adds	r0, #1
 800678e:	d103      	bne.n	8006798 <_printf_common+0xac>
 8006790:	f04f 30ff 	mov.w	r0, #4294967295
 8006794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006798:	3501      	adds	r5, #1
 800679a:	e7c6      	b.n	800672a <_printf_common+0x3e>
 800679c:	18e1      	adds	r1, r4, r3
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	2030      	movs	r0, #48	; 0x30
 80067a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067a6:	4422      	add	r2, r4
 80067a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067b0:	3302      	adds	r3, #2
 80067b2:	e7c7      	b.n	8006744 <_printf_common+0x58>
 80067b4:	2301      	movs	r3, #1
 80067b6:	4622      	mov	r2, r4
 80067b8:	4649      	mov	r1, r9
 80067ba:	4638      	mov	r0, r7
 80067bc:	47c0      	blx	r8
 80067be:	3001      	adds	r0, #1
 80067c0:	d0e6      	beq.n	8006790 <_printf_common+0xa4>
 80067c2:	3601      	adds	r6, #1
 80067c4:	e7d9      	b.n	800677a <_printf_common+0x8e>
	...

080067c8 <_printf_i>:
 80067c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067cc:	7e0f      	ldrb	r7, [r1, #24]
 80067ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067d0:	2f78      	cmp	r7, #120	; 0x78
 80067d2:	4691      	mov	r9, r2
 80067d4:	4680      	mov	r8, r0
 80067d6:	460c      	mov	r4, r1
 80067d8:	469a      	mov	sl, r3
 80067da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067de:	d807      	bhi.n	80067f0 <_printf_i+0x28>
 80067e0:	2f62      	cmp	r7, #98	; 0x62
 80067e2:	d80a      	bhi.n	80067fa <_printf_i+0x32>
 80067e4:	2f00      	cmp	r7, #0
 80067e6:	f000 80d8 	beq.w	800699a <_printf_i+0x1d2>
 80067ea:	2f58      	cmp	r7, #88	; 0x58
 80067ec:	f000 80a3 	beq.w	8006936 <_printf_i+0x16e>
 80067f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067f8:	e03a      	b.n	8006870 <_printf_i+0xa8>
 80067fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067fe:	2b15      	cmp	r3, #21
 8006800:	d8f6      	bhi.n	80067f0 <_printf_i+0x28>
 8006802:	a101      	add	r1, pc, #4	; (adr r1, 8006808 <_printf_i+0x40>)
 8006804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006808:	08006861 	.word	0x08006861
 800680c:	08006875 	.word	0x08006875
 8006810:	080067f1 	.word	0x080067f1
 8006814:	080067f1 	.word	0x080067f1
 8006818:	080067f1 	.word	0x080067f1
 800681c:	080067f1 	.word	0x080067f1
 8006820:	08006875 	.word	0x08006875
 8006824:	080067f1 	.word	0x080067f1
 8006828:	080067f1 	.word	0x080067f1
 800682c:	080067f1 	.word	0x080067f1
 8006830:	080067f1 	.word	0x080067f1
 8006834:	08006981 	.word	0x08006981
 8006838:	080068a5 	.word	0x080068a5
 800683c:	08006963 	.word	0x08006963
 8006840:	080067f1 	.word	0x080067f1
 8006844:	080067f1 	.word	0x080067f1
 8006848:	080069a3 	.word	0x080069a3
 800684c:	080067f1 	.word	0x080067f1
 8006850:	080068a5 	.word	0x080068a5
 8006854:	080067f1 	.word	0x080067f1
 8006858:	080067f1 	.word	0x080067f1
 800685c:	0800696b 	.word	0x0800696b
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	1d1a      	adds	r2, r3, #4
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	602a      	str	r2, [r5, #0]
 8006868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800686c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006870:	2301      	movs	r3, #1
 8006872:	e0a3      	b.n	80069bc <_printf_i+0x1f4>
 8006874:	6820      	ldr	r0, [r4, #0]
 8006876:	6829      	ldr	r1, [r5, #0]
 8006878:	0606      	lsls	r6, r0, #24
 800687a:	f101 0304 	add.w	r3, r1, #4
 800687e:	d50a      	bpl.n	8006896 <_printf_i+0xce>
 8006880:	680e      	ldr	r6, [r1, #0]
 8006882:	602b      	str	r3, [r5, #0]
 8006884:	2e00      	cmp	r6, #0
 8006886:	da03      	bge.n	8006890 <_printf_i+0xc8>
 8006888:	232d      	movs	r3, #45	; 0x2d
 800688a:	4276      	negs	r6, r6
 800688c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006890:	485e      	ldr	r0, [pc, #376]	; (8006a0c <_printf_i+0x244>)
 8006892:	230a      	movs	r3, #10
 8006894:	e019      	b.n	80068ca <_printf_i+0x102>
 8006896:	680e      	ldr	r6, [r1, #0]
 8006898:	602b      	str	r3, [r5, #0]
 800689a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800689e:	bf18      	it	ne
 80068a0:	b236      	sxthne	r6, r6
 80068a2:	e7ef      	b.n	8006884 <_printf_i+0xbc>
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	6820      	ldr	r0, [r4, #0]
 80068a8:	1d19      	adds	r1, r3, #4
 80068aa:	6029      	str	r1, [r5, #0]
 80068ac:	0601      	lsls	r1, r0, #24
 80068ae:	d501      	bpl.n	80068b4 <_printf_i+0xec>
 80068b0:	681e      	ldr	r6, [r3, #0]
 80068b2:	e002      	b.n	80068ba <_printf_i+0xf2>
 80068b4:	0646      	lsls	r6, r0, #25
 80068b6:	d5fb      	bpl.n	80068b0 <_printf_i+0xe8>
 80068b8:	881e      	ldrh	r6, [r3, #0]
 80068ba:	4854      	ldr	r0, [pc, #336]	; (8006a0c <_printf_i+0x244>)
 80068bc:	2f6f      	cmp	r7, #111	; 0x6f
 80068be:	bf0c      	ite	eq
 80068c0:	2308      	moveq	r3, #8
 80068c2:	230a      	movne	r3, #10
 80068c4:	2100      	movs	r1, #0
 80068c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068ca:	6865      	ldr	r5, [r4, #4]
 80068cc:	60a5      	str	r5, [r4, #8]
 80068ce:	2d00      	cmp	r5, #0
 80068d0:	bfa2      	ittt	ge
 80068d2:	6821      	ldrge	r1, [r4, #0]
 80068d4:	f021 0104 	bicge.w	r1, r1, #4
 80068d8:	6021      	strge	r1, [r4, #0]
 80068da:	b90e      	cbnz	r6, 80068e0 <_printf_i+0x118>
 80068dc:	2d00      	cmp	r5, #0
 80068de:	d04d      	beq.n	800697c <_printf_i+0x1b4>
 80068e0:	4615      	mov	r5, r2
 80068e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80068e6:	fb03 6711 	mls	r7, r3, r1, r6
 80068ea:	5dc7      	ldrb	r7, [r0, r7]
 80068ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068f0:	4637      	mov	r7, r6
 80068f2:	42bb      	cmp	r3, r7
 80068f4:	460e      	mov	r6, r1
 80068f6:	d9f4      	bls.n	80068e2 <_printf_i+0x11a>
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d10b      	bne.n	8006914 <_printf_i+0x14c>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	07de      	lsls	r6, r3, #31
 8006900:	d508      	bpl.n	8006914 <_printf_i+0x14c>
 8006902:	6923      	ldr	r3, [r4, #16]
 8006904:	6861      	ldr	r1, [r4, #4]
 8006906:	4299      	cmp	r1, r3
 8006908:	bfde      	ittt	le
 800690a:	2330      	movle	r3, #48	; 0x30
 800690c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006910:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006914:	1b52      	subs	r2, r2, r5
 8006916:	6122      	str	r2, [r4, #16]
 8006918:	f8cd a000 	str.w	sl, [sp]
 800691c:	464b      	mov	r3, r9
 800691e:	aa03      	add	r2, sp, #12
 8006920:	4621      	mov	r1, r4
 8006922:	4640      	mov	r0, r8
 8006924:	f7ff fee2 	bl	80066ec <_printf_common>
 8006928:	3001      	adds	r0, #1
 800692a:	d14c      	bne.n	80069c6 <_printf_i+0x1fe>
 800692c:	f04f 30ff 	mov.w	r0, #4294967295
 8006930:	b004      	add	sp, #16
 8006932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006936:	4835      	ldr	r0, [pc, #212]	; (8006a0c <_printf_i+0x244>)
 8006938:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800693c:	6829      	ldr	r1, [r5, #0]
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	f851 6b04 	ldr.w	r6, [r1], #4
 8006944:	6029      	str	r1, [r5, #0]
 8006946:	061d      	lsls	r5, r3, #24
 8006948:	d514      	bpl.n	8006974 <_printf_i+0x1ac>
 800694a:	07df      	lsls	r7, r3, #31
 800694c:	bf44      	itt	mi
 800694e:	f043 0320 	orrmi.w	r3, r3, #32
 8006952:	6023      	strmi	r3, [r4, #0]
 8006954:	b91e      	cbnz	r6, 800695e <_printf_i+0x196>
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	f023 0320 	bic.w	r3, r3, #32
 800695c:	6023      	str	r3, [r4, #0]
 800695e:	2310      	movs	r3, #16
 8006960:	e7b0      	b.n	80068c4 <_printf_i+0xfc>
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	f043 0320 	orr.w	r3, r3, #32
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	2378      	movs	r3, #120	; 0x78
 800696c:	4828      	ldr	r0, [pc, #160]	; (8006a10 <_printf_i+0x248>)
 800696e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006972:	e7e3      	b.n	800693c <_printf_i+0x174>
 8006974:	0659      	lsls	r1, r3, #25
 8006976:	bf48      	it	mi
 8006978:	b2b6      	uxthmi	r6, r6
 800697a:	e7e6      	b.n	800694a <_printf_i+0x182>
 800697c:	4615      	mov	r5, r2
 800697e:	e7bb      	b.n	80068f8 <_printf_i+0x130>
 8006980:	682b      	ldr	r3, [r5, #0]
 8006982:	6826      	ldr	r6, [r4, #0]
 8006984:	6961      	ldr	r1, [r4, #20]
 8006986:	1d18      	adds	r0, r3, #4
 8006988:	6028      	str	r0, [r5, #0]
 800698a:	0635      	lsls	r5, r6, #24
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	d501      	bpl.n	8006994 <_printf_i+0x1cc>
 8006990:	6019      	str	r1, [r3, #0]
 8006992:	e002      	b.n	800699a <_printf_i+0x1d2>
 8006994:	0670      	lsls	r0, r6, #25
 8006996:	d5fb      	bpl.n	8006990 <_printf_i+0x1c8>
 8006998:	8019      	strh	r1, [r3, #0]
 800699a:	2300      	movs	r3, #0
 800699c:	6123      	str	r3, [r4, #16]
 800699e:	4615      	mov	r5, r2
 80069a0:	e7ba      	b.n	8006918 <_printf_i+0x150>
 80069a2:	682b      	ldr	r3, [r5, #0]
 80069a4:	1d1a      	adds	r2, r3, #4
 80069a6:	602a      	str	r2, [r5, #0]
 80069a8:	681d      	ldr	r5, [r3, #0]
 80069aa:	6862      	ldr	r2, [r4, #4]
 80069ac:	2100      	movs	r1, #0
 80069ae:	4628      	mov	r0, r5
 80069b0:	f7f9 fc26 	bl	8000200 <memchr>
 80069b4:	b108      	cbz	r0, 80069ba <_printf_i+0x1f2>
 80069b6:	1b40      	subs	r0, r0, r5
 80069b8:	6060      	str	r0, [r4, #4]
 80069ba:	6863      	ldr	r3, [r4, #4]
 80069bc:	6123      	str	r3, [r4, #16]
 80069be:	2300      	movs	r3, #0
 80069c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c4:	e7a8      	b.n	8006918 <_printf_i+0x150>
 80069c6:	6923      	ldr	r3, [r4, #16]
 80069c8:	462a      	mov	r2, r5
 80069ca:	4649      	mov	r1, r9
 80069cc:	4640      	mov	r0, r8
 80069ce:	47d0      	blx	sl
 80069d0:	3001      	adds	r0, #1
 80069d2:	d0ab      	beq.n	800692c <_printf_i+0x164>
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	079b      	lsls	r3, r3, #30
 80069d8:	d413      	bmi.n	8006a02 <_printf_i+0x23a>
 80069da:	68e0      	ldr	r0, [r4, #12]
 80069dc:	9b03      	ldr	r3, [sp, #12]
 80069de:	4298      	cmp	r0, r3
 80069e0:	bfb8      	it	lt
 80069e2:	4618      	movlt	r0, r3
 80069e4:	e7a4      	b.n	8006930 <_printf_i+0x168>
 80069e6:	2301      	movs	r3, #1
 80069e8:	4632      	mov	r2, r6
 80069ea:	4649      	mov	r1, r9
 80069ec:	4640      	mov	r0, r8
 80069ee:	47d0      	blx	sl
 80069f0:	3001      	adds	r0, #1
 80069f2:	d09b      	beq.n	800692c <_printf_i+0x164>
 80069f4:	3501      	adds	r5, #1
 80069f6:	68e3      	ldr	r3, [r4, #12]
 80069f8:	9903      	ldr	r1, [sp, #12]
 80069fa:	1a5b      	subs	r3, r3, r1
 80069fc:	42ab      	cmp	r3, r5
 80069fe:	dcf2      	bgt.n	80069e6 <_printf_i+0x21e>
 8006a00:	e7eb      	b.n	80069da <_printf_i+0x212>
 8006a02:	2500      	movs	r5, #0
 8006a04:	f104 0619 	add.w	r6, r4, #25
 8006a08:	e7f5      	b.n	80069f6 <_printf_i+0x22e>
 8006a0a:	bf00      	nop
 8006a0c:	08007229 	.word	0x08007229
 8006a10:	0800723a 	.word	0x0800723a

08006a14 <_scanf_chars>:
 8006a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a18:	4615      	mov	r5, r2
 8006a1a:	688a      	ldr	r2, [r1, #8]
 8006a1c:	4680      	mov	r8, r0
 8006a1e:	460c      	mov	r4, r1
 8006a20:	b932      	cbnz	r2, 8006a30 <_scanf_chars+0x1c>
 8006a22:	698a      	ldr	r2, [r1, #24]
 8006a24:	2a00      	cmp	r2, #0
 8006a26:	bf0c      	ite	eq
 8006a28:	2201      	moveq	r2, #1
 8006a2a:	f04f 32ff 	movne.w	r2, #4294967295
 8006a2e:	608a      	str	r2, [r1, #8]
 8006a30:	6822      	ldr	r2, [r4, #0]
 8006a32:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006ac4 <_scanf_chars+0xb0>
 8006a36:	06d1      	lsls	r1, r2, #27
 8006a38:	bf5f      	itttt	pl
 8006a3a:	681a      	ldrpl	r2, [r3, #0]
 8006a3c:	1d11      	addpl	r1, r2, #4
 8006a3e:	6019      	strpl	r1, [r3, #0]
 8006a40:	6816      	ldrpl	r6, [r2, #0]
 8006a42:	2700      	movs	r7, #0
 8006a44:	69a0      	ldr	r0, [r4, #24]
 8006a46:	b188      	cbz	r0, 8006a6c <_scanf_chars+0x58>
 8006a48:	2801      	cmp	r0, #1
 8006a4a:	d107      	bne.n	8006a5c <_scanf_chars+0x48>
 8006a4c:	682a      	ldr	r2, [r5, #0]
 8006a4e:	7811      	ldrb	r1, [r2, #0]
 8006a50:	6962      	ldr	r2, [r4, #20]
 8006a52:	5c52      	ldrb	r2, [r2, r1]
 8006a54:	b952      	cbnz	r2, 8006a6c <_scanf_chars+0x58>
 8006a56:	2f00      	cmp	r7, #0
 8006a58:	d031      	beq.n	8006abe <_scanf_chars+0xaa>
 8006a5a:	e022      	b.n	8006aa2 <_scanf_chars+0x8e>
 8006a5c:	2802      	cmp	r0, #2
 8006a5e:	d120      	bne.n	8006aa2 <_scanf_chars+0x8e>
 8006a60:	682b      	ldr	r3, [r5, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	f813 3009 	ldrb.w	r3, [r3, r9]
 8006a68:	071b      	lsls	r3, r3, #28
 8006a6a:	d41a      	bmi.n	8006aa2 <_scanf_chars+0x8e>
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	06da      	lsls	r2, r3, #27
 8006a70:	bf5e      	ittt	pl
 8006a72:	682b      	ldrpl	r3, [r5, #0]
 8006a74:	781b      	ldrbpl	r3, [r3, #0]
 8006a76:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006a7a:	682a      	ldr	r2, [r5, #0]
 8006a7c:	686b      	ldr	r3, [r5, #4]
 8006a7e:	3201      	adds	r2, #1
 8006a80:	602a      	str	r2, [r5, #0]
 8006a82:	68a2      	ldr	r2, [r4, #8]
 8006a84:	3b01      	subs	r3, #1
 8006a86:	3a01      	subs	r2, #1
 8006a88:	606b      	str	r3, [r5, #4]
 8006a8a:	3701      	adds	r7, #1
 8006a8c:	60a2      	str	r2, [r4, #8]
 8006a8e:	b142      	cbz	r2, 8006aa2 <_scanf_chars+0x8e>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	dcd7      	bgt.n	8006a44 <_scanf_chars+0x30>
 8006a94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	4798      	blx	r3
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	d0d0      	beq.n	8006a44 <_scanf_chars+0x30>
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	f013 0310 	ands.w	r3, r3, #16
 8006aa8:	d105      	bne.n	8006ab6 <_scanf_chars+0xa2>
 8006aaa:	68e2      	ldr	r2, [r4, #12]
 8006aac:	3201      	adds	r2, #1
 8006aae:	60e2      	str	r2, [r4, #12]
 8006ab0:	69a2      	ldr	r2, [r4, #24]
 8006ab2:	b102      	cbz	r2, 8006ab6 <_scanf_chars+0xa2>
 8006ab4:	7033      	strb	r3, [r6, #0]
 8006ab6:	6923      	ldr	r3, [r4, #16]
 8006ab8:	443b      	add	r3, r7
 8006aba:	6123      	str	r3, [r4, #16]
 8006abc:	2000      	movs	r0, #0
 8006abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ac2:	bf00      	nop
 8006ac4:	08007267 	.word	0x08007267

08006ac8 <_scanf_i>:
 8006ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006acc:	4698      	mov	r8, r3
 8006ace:	4b76      	ldr	r3, [pc, #472]	; (8006ca8 <_scanf_i+0x1e0>)
 8006ad0:	460c      	mov	r4, r1
 8006ad2:	4682      	mov	sl, r0
 8006ad4:	4616      	mov	r6, r2
 8006ad6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ada:	b087      	sub	sp, #28
 8006adc:	ab03      	add	r3, sp, #12
 8006ade:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006ae2:	4b72      	ldr	r3, [pc, #456]	; (8006cac <_scanf_i+0x1e4>)
 8006ae4:	69a1      	ldr	r1, [r4, #24]
 8006ae6:	4a72      	ldr	r2, [pc, #456]	; (8006cb0 <_scanf_i+0x1e8>)
 8006ae8:	2903      	cmp	r1, #3
 8006aea:	bf18      	it	ne
 8006aec:	461a      	movne	r2, r3
 8006aee:	68a3      	ldr	r3, [r4, #8]
 8006af0:	9201      	str	r2, [sp, #4]
 8006af2:	1e5a      	subs	r2, r3, #1
 8006af4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006af8:	bf88      	it	hi
 8006afa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006afe:	4627      	mov	r7, r4
 8006b00:	bf82      	ittt	hi
 8006b02:	eb03 0905 	addhi.w	r9, r3, r5
 8006b06:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006b0a:	60a3      	strhi	r3, [r4, #8]
 8006b0c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006b10:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006b14:	bf98      	it	ls
 8006b16:	f04f 0900 	movls.w	r9, #0
 8006b1a:	6023      	str	r3, [r4, #0]
 8006b1c:	463d      	mov	r5, r7
 8006b1e:	f04f 0b00 	mov.w	fp, #0
 8006b22:	6831      	ldr	r1, [r6, #0]
 8006b24:	ab03      	add	r3, sp, #12
 8006b26:	7809      	ldrb	r1, [r1, #0]
 8006b28:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	f7f9 fb67 	bl	8000200 <memchr>
 8006b32:	b328      	cbz	r0, 8006b80 <_scanf_i+0xb8>
 8006b34:	f1bb 0f01 	cmp.w	fp, #1
 8006b38:	d159      	bne.n	8006bee <_scanf_i+0x126>
 8006b3a:	6862      	ldr	r2, [r4, #4]
 8006b3c:	b92a      	cbnz	r2, 8006b4a <_scanf_i+0x82>
 8006b3e:	6822      	ldr	r2, [r4, #0]
 8006b40:	2308      	movs	r3, #8
 8006b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b46:	6063      	str	r3, [r4, #4]
 8006b48:	6022      	str	r2, [r4, #0]
 8006b4a:	6822      	ldr	r2, [r4, #0]
 8006b4c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006b50:	6022      	str	r2, [r4, #0]
 8006b52:	68a2      	ldr	r2, [r4, #8]
 8006b54:	1e51      	subs	r1, r2, #1
 8006b56:	60a1      	str	r1, [r4, #8]
 8006b58:	b192      	cbz	r2, 8006b80 <_scanf_i+0xb8>
 8006b5a:	6832      	ldr	r2, [r6, #0]
 8006b5c:	1c51      	adds	r1, r2, #1
 8006b5e:	6031      	str	r1, [r6, #0]
 8006b60:	7812      	ldrb	r2, [r2, #0]
 8006b62:	f805 2b01 	strb.w	r2, [r5], #1
 8006b66:	6872      	ldr	r2, [r6, #4]
 8006b68:	3a01      	subs	r2, #1
 8006b6a:	2a00      	cmp	r2, #0
 8006b6c:	6072      	str	r2, [r6, #4]
 8006b6e:	dc07      	bgt.n	8006b80 <_scanf_i+0xb8>
 8006b70:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006b74:	4631      	mov	r1, r6
 8006b76:	4650      	mov	r0, sl
 8006b78:	4790      	blx	r2
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	f040 8085 	bne.w	8006c8a <_scanf_i+0x1c2>
 8006b80:	f10b 0b01 	add.w	fp, fp, #1
 8006b84:	f1bb 0f03 	cmp.w	fp, #3
 8006b88:	d1cb      	bne.n	8006b22 <_scanf_i+0x5a>
 8006b8a:	6863      	ldr	r3, [r4, #4]
 8006b8c:	b90b      	cbnz	r3, 8006b92 <_scanf_i+0xca>
 8006b8e:	230a      	movs	r3, #10
 8006b90:	6063      	str	r3, [r4, #4]
 8006b92:	6863      	ldr	r3, [r4, #4]
 8006b94:	4947      	ldr	r1, [pc, #284]	; (8006cb4 <_scanf_i+0x1ec>)
 8006b96:	6960      	ldr	r0, [r4, #20]
 8006b98:	1ac9      	subs	r1, r1, r3
 8006b9a:	f000 f8af 	bl	8006cfc <__sccl>
 8006b9e:	f04f 0b00 	mov.w	fp, #0
 8006ba2:	68a3      	ldr	r3, [r4, #8]
 8006ba4:	6822      	ldr	r2, [r4, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d03d      	beq.n	8006c26 <_scanf_i+0x15e>
 8006baa:	6831      	ldr	r1, [r6, #0]
 8006bac:	6960      	ldr	r0, [r4, #20]
 8006bae:	f891 c000 	ldrb.w	ip, [r1]
 8006bb2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d035      	beq.n	8006c26 <_scanf_i+0x15e>
 8006bba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006bbe:	d124      	bne.n	8006c0a <_scanf_i+0x142>
 8006bc0:	0510      	lsls	r0, r2, #20
 8006bc2:	d522      	bpl.n	8006c0a <_scanf_i+0x142>
 8006bc4:	f10b 0b01 	add.w	fp, fp, #1
 8006bc8:	f1b9 0f00 	cmp.w	r9, #0
 8006bcc:	d003      	beq.n	8006bd6 <_scanf_i+0x10e>
 8006bce:	3301      	adds	r3, #1
 8006bd0:	f109 39ff 	add.w	r9, r9, #4294967295
 8006bd4:	60a3      	str	r3, [r4, #8]
 8006bd6:	6873      	ldr	r3, [r6, #4]
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	6073      	str	r3, [r6, #4]
 8006bde:	dd1b      	ble.n	8006c18 <_scanf_i+0x150>
 8006be0:	6833      	ldr	r3, [r6, #0]
 8006be2:	3301      	adds	r3, #1
 8006be4:	6033      	str	r3, [r6, #0]
 8006be6:	68a3      	ldr	r3, [r4, #8]
 8006be8:	3b01      	subs	r3, #1
 8006bea:	60a3      	str	r3, [r4, #8]
 8006bec:	e7d9      	b.n	8006ba2 <_scanf_i+0xda>
 8006bee:	f1bb 0f02 	cmp.w	fp, #2
 8006bf2:	d1ae      	bne.n	8006b52 <_scanf_i+0x8a>
 8006bf4:	6822      	ldr	r2, [r4, #0]
 8006bf6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006bfa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006bfe:	d1bf      	bne.n	8006b80 <_scanf_i+0xb8>
 8006c00:	2310      	movs	r3, #16
 8006c02:	6063      	str	r3, [r4, #4]
 8006c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c08:	e7a2      	b.n	8006b50 <_scanf_i+0x88>
 8006c0a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006c0e:	6022      	str	r2, [r4, #0]
 8006c10:	780b      	ldrb	r3, [r1, #0]
 8006c12:	f805 3b01 	strb.w	r3, [r5], #1
 8006c16:	e7de      	b.n	8006bd6 <_scanf_i+0x10e>
 8006c18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006c1c:	4631      	mov	r1, r6
 8006c1e:	4650      	mov	r0, sl
 8006c20:	4798      	blx	r3
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d0df      	beq.n	8006be6 <_scanf_i+0x11e>
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	05db      	lsls	r3, r3, #23
 8006c2a:	d50d      	bpl.n	8006c48 <_scanf_i+0x180>
 8006c2c:	42bd      	cmp	r5, r7
 8006c2e:	d909      	bls.n	8006c44 <_scanf_i+0x17c>
 8006c30:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006c34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c38:	4632      	mov	r2, r6
 8006c3a:	4650      	mov	r0, sl
 8006c3c:	4798      	blx	r3
 8006c3e:	f105 39ff 	add.w	r9, r5, #4294967295
 8006c42:	464d      	mov	r5, r9
 8006c44:	42bd      	cmp	r5, r7
 8006c46:	d02d      	beq.n	8006ca4 <_scanf_i+0x1dc>
 8006c48:	6822      	ldr	r2, [r4, #0]
 8006c4a:	f012 0210 	ands.w	r2, r2, #16
 8006c4e:	d113      	bne.n	8006c78 <_scanf_i+0x1b0>
 8006c50:	702a      	strb	r2, [r5, #0]
 8006c52:	6863      	ldr	r3, [r4, #4]
 8006c54:	9e01      	ldr	r6, [sp, #4]
 8006c56:	4639      	mov	r1, r7
 8006c58:	4650      	mov	r0, sl
 8006c5a:	47b0      	blx	r6
 8006c5c:	6821      	ldr	r1, [r4, #0]
 8006c5e:	f8d8 3000 	ldr.w	r3, [r8]
 8006c62:	f011 0f20 	tst.w	r1, #32
 8006c66:	d013      	beq.n	8006c90 <_scanf_i+0x1c8>
 8006c68:	1d1a      	adds	r2, r3, #4
 8006c6a:	f8c8 2000 	str.w	r2, [r8]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6018      	str	r0, [r3, #0]
 8006c72:	68e3      	ldr	r3, [r4, #12]
 8006c74:	3301      	adds	r3, #1
 8006c76:	60e3      	str	r3, [r4, #12]
 8006c78:	1bed      	subs	r5, r5, r7
 8006c7a:	44ab      	add	fp, r5
 8006c7c:	6925      	ldr	r5, [r4, #16]
 8006c7e:	445d      	add	r5, fp
 8006c80:	6125      	str	r5, [r4, #16]
 8006c82:	2000      	movs	r0, #0
 8006c84:	b007      	add	sp, #28
 8006c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8a:	f04f 0b00 	mov.w	fp, #0
 8006c8e:	e7ca      	b.n	8006c26 <_scanf_i+0x15e>
 8006c90:	1d1a      	adds	r2, r3, #4
 8006c92:	f8c8 2000 	str.w	r2, [r8]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f011 0f01 	tst.w	r1, #1
 8006c9c:	bf14      	ite	ne
 8006c9e:	8018      	strhne	r0, [r3, #0]
 8006ca0:	6018      	streq	r0, [r3, #0]
 8006ca2:	e7e6      	b.n	8006c72 <_scanf_i+0x1aa>
 8006ca4:	2001      	movs	r0, #1
 8006ca6:	e7ed      	b.n	8006c84 <_scanf_i+0x1bc>
 8006ca8:	08007160 	.word	0x08007160
 8006cac:	08006f59 	.word	0x08006f59
 8006cb0:	08006e71 	.word	0x08006e71
 8006cb4:	08007264 	.word	0x08007264

08006cb8 <_read_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4d07      	ldr	r5, [pc, #28]	; (8006cd8 <_read_r+0x20>)
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	4608      	mov	r0, r1
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	602a      	str	r2, [r5, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f7fa f9a6 	bl	8001018 <_read>
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	d102      	bne.n	8006cd6 <_read_r+0x1e>
 8006cd0:	682b      	ldr	r3, [r5, #0]
 8006cd2:	b103      	cbz	r3, 8006cd6 <_read_r+0x1e>
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
 8006cd8:	20000280 	.word	0x20000280

08006cdc <_sbrk_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	4d06      	ldr	r5, [pc, #24]	; (8006cf8 <_sbrk_r+0x1c>)
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	4608      	mov	r0, r1
 8006ce6:	602b      	str	r3, [r5, #0]
 8006ce8:	f7fa f9e8 	bl	80010bc <_sbrk>
 8006cec:	1c43      	adds	r3, r0, #1
 8006cee:	d102      	bne.n	8006cf6 <_sbrk_r+0x1a>
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	b103      	cbz	r3, 8006cf6 <_sbrk_r+0x1a>
 8006cf4:	6023      	str	r3, [r4, #0]
 8006cf6:	bd38      	pop	{r3, r4, r5, pc}
 8006cf8:	20000280 	.word	0x20000280

08006cfc <__sccl>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	780b      	ldrb	r3, [r1, #0]
 8006d00:	4604      	mov	r4, r0
 8006d02:	2b5e      	cmp	r3, #94	; 0x5e
 8006d04:	bf0b      	itete	eq
 8006d06:	784b      	ldrbeq	r3, [r1, #1]
 8006d08:	1c48      	addne	r0, r1, #1
 8006d0a:	1c88      	addeq	r0, r1, #2
 8006d0c:	2200      	movne	r2, #0
 8006d0e:	bf08      	it	eq
 8006d10:	2201      	moveq	r2, #1
 8006d12:	1e61      	subs	r1, r4, #1
 8006d14:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006d18:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006d1c:	42a9      	cmp	r1, r5
 8006d1e:	d1fb      	bne.n	8006d18 <__sccl+0x1c>
 8006d20:	b90b      	cbnz	r3, 8006d26 <__sccl+0x2a>
 8006d22:	3801      	subs	r0, #1
 8006d24:	bd70      	pop	{r4, r5, r6, pc}
 8006d26:	f082 0201 	eor.w	r2, r2, #1
 8006d2a:	54e2      	strb	r2, [r4, r3]
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006d34:	292d      	cmp	r1, #45	; 0x2d
 8006d36:	d006      	beq.n	8006d46 <__sccl+0x4a>
 8006d38:	295d      	cmp	r1, #93	; 0x5d
 8006d3a:	d0f3      	beq.n	8006d24 <__sccl+0x28>
 8006d3c:	b909      	cbnz	r1, 8006d42 <__sccl+0x46>
 8006d3e:	4628      	mov	r0, r5
 8006d40:	e7f0      	b.n	8006d24 <__sccl+0x28>
 8006d42:	460b      	mov	r3, r1
 8006d44:	e7f1      	b.n	8006d2a <__sccl+0x2e>
 8006d46:	786e      	ldrb	r6, [r5, #1]
 8006d48:	2e5d      	cmp	r6, #93	; 0x5d
 8006d4a:	d0fa      	beq.n	8006d42 <__sccl+0x46>
 8006d4c:	42b3      	cmp	r3, r6
 8006d4e:	dcf8      	bgt.n	8006d42 <__sccl+0x46>
 8006d50:	3502      	adds	r5, #2
 8006d52:	4619      	mov	r1, r3
 8006d54:	3101      	adds	r1, #1
 8006d56:	428e      	cmp	r6, r1
 8006d58:	5462      	strb	r2, [r4, r1]
 8006d5a:	dcfb      	bgt.n	8006d54 <__sccl+0x58>
 8006d5c:	1af1      	subs	r1, r6, r3
 8006d5e:	3901      	subs	r1, #1
 8006d60:	1c58      	adds	r0, r3, #1
 8006d62:	42b3      	cmp	r3, r6
 8006d64:	bfa8      	it	ge
 8006d66:	2100      	movge	r1, #0
 8006d68:	1843      	adds	r3, r0, r1
 8006d6a:	e7e0      	b.n	8006d2e <__sccl+0x32>

08006d6c <_strtol_l.constprop.0>:
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d72:	d001      	beq.n	8006d78 <_strtol_l.constprop.0+0xc>
 8006d74:	2b24      	cmp	r3, #36	; 0x24
 8006d76:	d906      	bls.n	8006d86 <_strtol_l.constprop.0+0x1a>
 8006d78:	f7fe fc66 	bl	8005648 <__errno>
 8006d7c:	2316      	movs	r3, #22
 8006d7e:	6003      	str	r3, [r0, #0]
 8006d80:	2000      	movs	r0, #0
 8006d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d86:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006e6c <_strtol_l.constprop.0+0x100>
 8006d8a:	460d      	mov	r5, r1
 8006d8c:	462e      	mov	r6, r5
 8006d8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d92:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006d96:	f017 0708 	ands.w	r7, r7, #8
 8006d9a:	d1f7      	bne.n	8006d8c <_strtol_l.constprop.0+0x20>
 8006d9c:	2c2d      	cmp	r4, #45	; 0x2d
 8006d9e:	d132      	bne.n	8006e06 <_strtol_l.constprop.0+0x9a>
 8006da0:	782c      	ldrb	r4, [r5, #0]
 8006da2:	2701      	movs	r7, #1
 8006da4:	1cb5      	adds	r5, r6, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d05b      	beq.n	8006e62 <_strtol_l.constprop.0+0xf6>
 8006daa:	2b10      	cmp	r3, #16
 8006dac:	d109      	bne.n	8006dc2 <_strtol_l.constprop.0+0x56>
 8006dae:	2c30      	cmp	r4, #48	; 0x30
 8006db0:	d107      	bne.n	8006dc2 <_strtol_l.constprop.0+0x56>
 8006db2:	782c      	ldrb	r4, [r5, #0]
 8006db4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006db8:	2c58      	cmp	r4, #88	; 0x58
 8006dba:	d14d      	bne.n	8006e58 <_strtol_l.constprop.0+0xec>
 8006dbc:	786c      	ldrb	r4, [r5, #1]
 8006dbe:	2310      	movs	r3, #16
 8006dc0:	3502      	adds	r5, #2
 8006dc2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006dc6:	f108 38ff 	add.w	r8, r8, #4294967295
 8006dca:	f04f 0c00 	mov.w	ip, #0
 8006dce:	fbb8 f9f3 	udiv	r9, r8, r3
 8006dd2:	4666      	mov	r6, ip
 8006dd4:	fb03 8a19 	mls	sl, r3, r9, r8
 8006dd8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006ddc:	f1be 0f09 	cmp.w	lr, #9
 8006de0:	d816      	bhi.n	8006e10 <_strtol_l.constprop.0+0xa4>
 8006de2:	4674      	mov	r4, lr
 8006de4:	42a3      	cmp	r3, r4
 8006de6:	dd24      	ble.n	8006e32 <_strtol_l.constprop.0+0xc6>
 8006de8:	f1bc 0f00 	cmp.w	ip, #0
 8006dec:	db1e      	blt.n	8006e2c <_strtol_l.constprop.0+0xc0>
 8006dee:	45b1      	cmp	r9, r6
 8006df0:	d31c      	bcc.n	8006e2c <_strtol_l.constprop.0+0xc0>
 8006df2:	d101      	bne.n	8006df8 <_strtol_l.constprop.0+0x8c>
 8006df4:	45a2      	cmp	sl, r4
 8006df6:	db19      	blt.n	8006e2c <_strtol_l.constprop.0+0xc0>
 8006df8:	fb06 4603 	mla	r6, r6, r3, r4
 8006dfc:	f04f 0c01 	mov.w	ip, #1
 8006e00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e04:	e7e8      	b.n	8006dd8 <_strtol_l.constprop.0+0x6c>
 8006e06:	2c2b      	cmp	r4, #43	; 0x2b
 8006e08:	bf04      	itt	eq
 8006e0a:	782c      	ldrbeq	r4, [r5, #0]
 8006e0c:	1cb5      	addeq	r5, r6, #2
 8006e0e:	e7ca      	b.n	8006da6 <_strtol_l.constprop.0+0x3a>
 8006e10:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006e14:	f1be 0f19 	cmp.w	lr, #25
 8006e18:	d801      	bhi.n	8006e1e <_strtol_l.constprop.0+0xb2>
 8006e1a:	3c37      	subs	r4, #55	; 0x37
 8006e1c:	e7e2      	b.n	8006de4 <_strtol_l.constprop.0+0x78>
 8006e1e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006e22:	f1be 0f19 	cmp.w	lr, #25
 8006e26:	d804      	bhi.n	8006e32 <_strtol_l.constprop.0+0xc6>
 8006e28:	3c57      	subs	r4, #87	; 0x57
 8006e2a:	e7db      	b.n	8006de4 <_strtol_l.constprop.0+0x78>
 8006e2c:	f04f 3cff 	mov.w	ip, #4294967295
 8006e30:	e7e6      	b.n	8006e00 <_strtol_l.constprop.0+0x94>
 8006e32:	f1bc 0f00 	cmp.w	ip, #0
 8006e36:	da05      	bge.n	8006e44 <_strtol_l.constprop.0+0xd8>
 8006e38:	2322      	movs	r3, #34	; 0x22
 8006e3a:	6003      	str	r3, [r0, #0]
 8006e3c:	4646      	mov	r6, r8
 8006e3e:	b942      	cbnz	r2, 8006e52 <_strtol_l.constprop.0+0xe6>
 8006e40:	4630      	mov	r0, r6
 8006e42:	e79e      	b.n	8006d82 <_strtol_l.constprop.0+0x16>
 8006e44:	b107      	cbz	r7, 8006e48 <_strtol_l.constprop.0+0xdc>
 8006e46:	4276      	negs	r6, r6
 8006e48:	2a00      	cmp	r2, #0
 8006e4a:	d0f9      	beq.n	8006e40 <_strtol_l.constprop.0+0xd4>
 8006e4c:	f1bc 0f00 	cmp.w	ip, #0
 8006e50:	d000      	beq.n	8006e54 <_strtol_l.constprop.0+0xe8>
 8006e52:	1e69      	subs	r1, r5, #1
 8006e54:	6011      	str	r1, [r2, #0]
 8006e56:	e7f3      	b.n	8006e40 <_strtol_l.constprop.0+0xd4>
 8006e58:	2430      	movs	r4, #48	; 0x30
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1b1      	bne.n	8006dc2 <_strtol_l.constprop.0+0x56>
 8006e5e:	2308      	movs	r3, #8
 8006e60:	e7af      	b.n	8006dc2 <_strtol_l.constprop.0+0x56>
 8006e62:	2c30      	cmp	r4, #48	; 0x30
 8006e64:	d0a5      	beq.n	8006db2 <_strtol_l.constprop.0+0x46>
 8006e66:	230a      	movs	r3, #10
 8006e68:	e7ab      	b.n	8006dc2 <_strtol_l.constprop.0+0x56>
 8006e6a:	bf00      	nop
 8006e6c:	08007267 	.word	0x08007267

08006e70 <_strtol_r>:
 8006e70:	f7ff bf7c 	b.w	8006d6c <_strtol_l.constprop.0>

08006e74 <_strtoul_l.constprop.0>:
 8006e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e78:	4f36      	ldr	r7, [pc, #216]	; (8006f54 <_strtoul_l.constprop.0+0xe0>)
 8006e7a:	4686      	mov	lr, r0
 8006e7c:	460d      	mov	r5, r1
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e84:	5de6      	ldrb	r6, [r4, r7]
 8006e86:	f016 0608 	ands.w	r6, r6, #8
 8006e8a:	d1f8      	bne.n	8006e7e <_strtoul_l.constprop.0+0xa>
 8006e8c:	2c2d      	cmp	r4, #45	; 0x2d
 8006e8e:	d12f      	bne.n	8006ef0 <_strtoul_l.constprop.0+0x7c>
 8006e90:	782c      	ldrb	r4, [r5, #0]
 8006e92:	2601      	movs	r6, #1
 8006e94:	1c85      	adds	r5, r0, #2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d057      	beq.n	8006f4a <_strtoul_l.constprop.0+0xd6>
 8006e9a:	2b10      	cmp	r3, #16
 8006e9c:	d109      	bne.n	8006eb2 <_strtoul_l.constprop.0+0x3e>
 8006e9e:	2c30      	cmp	r4, #48	; 0x30
 8006ea0:	d107      	bne.n	8006eb2 <_strtoul_l.constprop.0+0x3e>
 8006ea2:	7828      	ldrb	r0, [r5, #0]
 8006ea4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006ea8:	2858      	cmp	r0, #88	; 0x58
 8006eaa:	d149      	bne.n	8006f40 <_strtoul_l.constprop.0+0xcc>
 8006eac:	786c      	ldrb	r4, [r5, #1]
 8006eae:	2310      	movs	r3, #16
 8006eb0:	3502      	adds	r5, #2
 8006eb2:	f04f 38ff 	mov.w	r8, #4294967295
 8006eb6:	2700      	movs	r7, #0
 8006eb8:	fbb8 f8f3 	udiv	r8, r8, r3
 8006ebc:	fb03 f908 	mul.w	r9, r3, r8
 8006ec0:	ea6f 0909 	mvn.w	r9, r9
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006eca:	f1bc 0f09 	cmp.w	ip, #9
 8006ece:	d814      	bhi.n	8006efa <_strtoul_l.constprop.0+0x86>
 8006ed0:	4664      	mov	r4, ip
 8006ed2:	42a3      	cmp	r3, r4
 8006ed4:	dd22      	ble.n	8006f1c <_strtoul_l.constprop.0+0xa8>
 8006ed6:	2f00      	cmp	r7, #0
 8006ed8:	db1d      	blt.n	8006f16 <_strtoul_l.constprop.0+0xa2>
 8006eda:	4580      	cmp	r8, r0
 8006edc:	d31b      	bcc.n	8006f16 <_strtoul_l.constprop.0+0xa2>
 8006ede:	d101      	bne.n	8006ee4 <_strtoul_l.constprop.0+0x70>
 8006ee0:	45a1      	cmp	r9, r4
 8006ee2:	db18      	blt.n	8006f16 <_strtoul_l.constprop.0+0xa2>
 8006ee4:	fb00 4003 	mla	r0, r0, r3, r4
 8006ee8:	2701      	movs	r7, #1
 8006eea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006eee:	e7ea      	b.n	8006ec6 <_strtoul_l.constprop.0+0x52>
 8006ef0:	2c2b      	cmp	r4, #43	; 0x2b
 8006ef2:	bf04      	itt	eq
 8006ef4:	782c      	ldrbeq	r4, [r5, #0]
 8006ef6:	1c85      	addeq	r5, r0, #2
 8006ef8:	e7cd      	b.n	8006e96 <_strtoul_l.constprop.0+0x22>
 8006efa:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006efe:	f1bc 0f19 	cmp.w	ip, #25
 8006f02:	d801      	bhi.n	8006f08 <_strtoul_l.constprop.0+0x94>
 8006f04:	3c37      	subs	r4, #55	; 0x37
 8006f06:	e7e4      	b.n	8006ed2 <_strtoul_l.constprop.0+0x5e>
 8006f08:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006f0c:	f1bc 0f19 	cmp.w	ip, #25
 8006f10:	d804      	bhi.n	8006f1c <_strtoul_l.constprop.0+0xa8>
 8006f12:	3c57      	subs	r4, #87	; 0x57
 8006f14:	e7dd      	b.n	8006ed2 <_strtoul_l.constprop.0+0x5e>
 8006f16:	f04f 37ff 	mov.w	r7, #4294967295
 8006f1a:	e7e6      	b.n	8006eea <_strtoul_l.constprop.0+0x76>
 8006f1c:	2f00      	cmp	r7, #0
 8006f1e:	da07      	bge.n	8006f30 <_strtoul_l.constprop.0+0xbc>
 8006f20:	2322      	movs	r3, #34	; 0x22
 8006f22:	f8ce 3000 	str.w	r3, [lr]
 8006f26:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2a:	b932      	cbnz	r2, 8006f3a <_strtoul_l.constprop.0+0xc6>
 8006f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f30:	b106      	cbz	r6, 8006f34 <_strtoul_l.constprop.0+0xc0>
 8006f32:	4240      	negs	r0, r0
 8006f34:	2a00      	cmp	r2, #0
 8006f36:	d0f9      	beq.n	8006f2c <_strtoul_l.constprop.0+0xb8>
 8006f38:	b107      	cbz	r7, 8006f3c <_strtoul_l.constprop.0+0xc8>
 8006f3a:	1e69      	subs	r1, r5, #1
 8006f3c:	6011      	str	r1, [r2, #0]
 8006f3e:	e7f5      	b.n	8006f2c <_strtoul_l.constprop.0+0xb8>
 8006f40:	2430      	movs	r4, #48	; 0x30
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1b5      	bne.n	8006eb2 <_strtoul_l.constprop.0+0x3e>
 8006f46:	2308      	movs	r3, #8
 8006f48:	e7b3      	b.n	8006eb2 <_strtoul_l.constprop.0+0x3e>
 8006f4a:	2c30      	cmp	r4, #48	; 0x30
 8006f4c:	d0a9      	beq.n	8006ea2 <_strtoul_l.constprop.0+0x2e>
 8006f4e:	230a      	movs	r3, #10
 8006f50:	e7af      	b.n	8006eb2 <_strtoul_l.constprop.0+0x3e>
 8006f52:	bf00      	nop
 8006f54:	08007267 	.word	0x08007267

08006f58 <_strtoul_r>:
 8006f58:	f7ff bf8c 	b.w	8006e74 <_strtoul_l.constprop.0>

08006f5c <__submore>:
 8006f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f60:	460c      	mov	r4, r1
 8006f62:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006f64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f68:	4299      	cmp	r1, r3
 8006f6a:	d11d      	bne.n	8006fa8 <__submore+0x4c>
 8006f6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f70:	f7ff f81c 	bl	8005fac <_malloc_r>
 8006f74:	b918      	cbnz	r0, 8006f7e <__submore+0x22>
 8006f76:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f82:	63a3      	str	r3, [r4, #56]	; 0x38
 8006f84:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006f88:	6360      	str	r0, [r4, #52]	; 0x34
 8006f8a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006f8e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006f92:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006f96:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006f9a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006f9e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006fa2:	6020      	str	r0, [r4, #0]
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	e7e8      	b.n	8006f7a <__submore+0x1e>
 8006fa8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006faa:	0077      	lsls	r7, r6, #1
 8006fac:	463a      	mov	r2, r7
 8006fae:	f000 f84b 	bl	8007048 <_realloc_r>
 8006fb2:	4605      	mov	r5, r0
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	d0de      	beq.n	8006f76 <__submore+0x1a>
 8006fb8:	eb00 0806 	add.w	r8, r0, r6
 8006fbc:	4601      	mov	r1, r0
 8006fbe:	4632      	mov	r2, r6
 8006fc0:	4640      	mov	r0, r8
 8006fc2:	f000 f827 	bl	8007014 <memcpy>
 8006fc6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006fca:	f8c4 8000 	str.w	r8, [r4]
 8006fce:	e7e9      	b.n	8006fa4 <__submore+0x48>

08006fd0 <_fstat_r>:
 8006fd0:	b538      	push	{r3, r4, r5, lr}
 8006fd2:	4d07      	ldr	r5, [pc, #28]	; (8006ff0 <_fstat_r+0x20>)
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	4608      	mov	r0, r1
 8006fda:	4611      	mov	r1, r2
 8006fdc:	602b      	str	r3, [r5, #0]
 8006fde:	f7fa f844 	bl	800106a <_fstat>
 8006fe2:	1c43      	adds	r3, r0, #1
 8006fe4:	d102      	bne.n	8006fec <_fstat_r+0x1c>
 8006fe6:	682b      	ldr	r3, [r5, #0]
 8006fe8:	b103      	cbz	r3, 8006fec <_fstat_r+0x1c>
 8006fea:	6023      	str	r3, [r4, #0]
 8006fec:	bd38      	pop	{r3, r4, r5, pc}
 8006fee:	bf00      	nop
 8006ff0:	20000280 	.word	0x20000280

08006ff4 <_isatty_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4d06      	ldr	r5, [pc, #24]	; (8007010 <_isatty_r+0x1c>)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	4608      	mov	r0, r1
 8006ffe:	602b      	str	r3, [r5, #0]
 8007000:	f7fa f843 	bl	800108a <_isatty>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	d102      	bne.n	800700e <_isatty_r+0x1a>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	b103      	cbz	r3, 800700e <_isatty_r+0x1a>
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	20000280 	.word	0x20000280

08007014 <memcpy>:
 8007014:	440a      	add	r2, r1
 8007016:	4291      	cmp	r1, r2
 8007018:	f100 33ff 	add.w	r3, r0, #4294967295
 800701c:	d100      	bne.n	8007020 <memcpy+0xc>
 800701e:	4770      	bx	lr
 8007020:	b510      	push	{r4, lr}
 8007022:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800702a:	4291      	cmp	r1, r2
 800702c:	d1f9      	bne.n	8007022 <memcpy+0xe>
 800702e:	bd10      	pop	{r4, pc}

08007030 <__malloc_lock>:
 8007030:	4801      	ldr	r0, [pc, #4]	; (8007038 <__malloc_lock+0x8>)
 8007032:	f7fe bed5 	b.w	8005de0 <__retarget_lock_acquire_recursive>
 8007036:	bf00      	nop
 8007038:	20000274 	.word	0x20000274

0800703c <__malloc_unlock>:
 800703c:	4801      	ldr	r0, [pc, #4]	; (8007044 <__malloc_unlock+0x8>)
 800703e:	f7fe bed0 	b.w	8005de2 <__retarget_lock_release_recursive>
 8007042:	bf00      	nop
 8007044:	20000274 	.word	0x20000274

08007048 <_realloc_r>:
 8007048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800704c:	4680      	mov	r8, r0
 800704e:	4614      	mov	r4, r2
 8007050:	460e      	mov	r6, r1
 8007052:	b921      	cbnz	r1, 800705e <_realloc_r+0x16>
 8007054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007058:	4611      	mov	r1, r2
 800705a:	f7fe bfa7 	b.w	8005fac <_malloc_r>
 800705e:	b92a      	cbnz	r2, 800706c <_realloc_r+0x24>
 8007060:	f7fe ff38 	bl	8005ed4 <_free_r>
 8007064:	4625      	mov	r5, r4
 8007066:	4628      	mov	r0, r5
 8007068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800706c:	f000 f81b 	bl	80070a6 <_malloc_usable_size_r>
 8007070:	4284      	cmp	r4, r0
 8007072:	4607      	mov	r7, r0
 8007074:	d802      	bhi.n	800707c <_realloc_r+0x34>
 8007076:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800707a:	d812      	bhi.n	80070a2 <_realloc_r+0x5a>
 800707c:	4621      	mov	r1, r4
 800707e:	4640      	mov	r0, r8
 8007080:	f7fe ff94 	bl	8005fac <_malloc_r>
 8007084:	4605      	mov	r5, r0
 8007086:	2800      	cmp	r0, #0
 8007088:	d0ed      	beq.n	8007066 <_realloc_r+0x1e>
 800708a:	42bc      	cmp	r4, r7
 800708c:	4622      	mov	r2, r4
 800708e:	4631      	mov	r1, r6
 8007090:	bf28      	it	cs
 8007092:	463a      	movcs	r2, r7
 8007094:	f7ff ffbe 	bl	8007014 <memcpy>
 8007098:	4631      	mov	r1, r6
 800709a:	4640      	mov	r0, r8
 800709c:	f7fe ff1a 	bl	8005ed4 <_free_r>
 80070a0:	e7e1      	b.n	8007066 <_realloc_r+0x1e>
 80070a2:	4635      	mov	r5, r6
 80070a4:	e7df      	b.n	8007066 <_realloc_r+0x1e>

080070a6 <_malloc_usable_size_r>:
 80070a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070aa:	1f18      	subs	r0, r3, #4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	bfbc      	itt	lt
 80070b0:	580b      	ldrlt	r3, [r1, r0]
 80070b2:	18c0      	addlt	r0, r0, r3
 80070b4:	4770      	bx	lr
	...

080070b8 <_init>:
 80070b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ba:	bf00      	nop
 80070bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070be:	bc08      	pop	{r3}
 80070c0:	469e      	mov	lr, r3
 80070c2:	4770      	bx	lr

080070c4 <_fini>:
 80070c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c6:	bf00      	nop
 80070c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ca:	bc08      	pop	{r3}
 80070cc:	469e      	mov	lr, r3
 80070ce:	4770      	bx	lr
