
interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800424c  0800424c  0001424c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004340  08004340  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004340  08004340  00014340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004348  08004348  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004348  08004348  00014348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800434c  0800434c  0001434c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  080043c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  080043c0  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2d1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001979  00000000  00000000  0002b371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002ccf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002d660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267fb  00000000  00000000  0002df28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af8d  00000000  00000000  00054723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eacb8  00000000  00000000  0005f6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014a368  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d40  00000000  00000000  0014a3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004234 	.word	0x08004234

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004234 	.word	0x08004234

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <_write>:
/* USER CODE BEGIN 0 */
///////////////////////////////////////////////////////////
// REdirecting printf to UART
//////////////////////////////////////////////////////////
int _write(int fd, char* ptr, int len)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	b29a      	uxth	r2, r3
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
 8000588:	68b9      	ldr	r1, [r7, #8]
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <_write+0x28>)
 800058c:	f002 f996 	bl	80028bc <HAL_UART_Transmit>
	return len;
 8000590:	687b      	ldr	r3, [r7, #4]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000008c 	.word	0x2000008c

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fa8f 	bl	8000ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f821 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f8a1 	bl	80006f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 f86f 	bl	8000694 <MX_USART2_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t  flagButtonPrees;
	  static uint8_t counter = 0;
	  flagButtonPrees = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80005b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ba:	480a      	ldr	r0, [pc, #40]	; (80005e4 <main+0x44>)
 80005bc:	f000 fdbc 	bl	8001138 <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	71fb      	strb	r3, [r7, #7]

	  if(flagButtonPrees == 0)
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1f5      	bne.n	80005b6 <main+0x16>
	  {
		  printf ("countr = %d \n \r ",counter);
 80005ca:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <main+0x48>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	4619      	mov	r1, r3
 80005d0:	4806      	ldr	r0, [pc, #24]	; (80005ec <main+0x4c>)
 80005d2:	f002 fea1 	bl	8003318 <iprintf>
		  counter++;
 80005d6:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <main+0x48>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	3301      	adds	r3, #1
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	4b02      	ldr	r3, [pc, #8]	; (80005e8 <main+0x48>)
 80005e0:	701a      	strb	r2, [r3, #0]
  {
 80005e2:	e7e8      	b.n	80005b6 <main+0x16>
 80005e4:	48000800 	.word	0x48000800
 80005e8:	20000110 	.word	0x20000110
 80005ec:	0800424c 	.word	0x0800424c

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	; 0x58
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2244      	movs	r2, #68	; 0x44
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fe82 	bl	8003308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000612:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000616:	f000 fdf1 	bl	80011fc <HAL_PWREx_ControlVoltageScaling>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000620:	f000 f8d6 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062e:	2310      	movs	r3, #16
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000636:	2302      	movs	r3, #2
 8000638:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063a:	2301      	movs	r3, #1
 800063c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800063e:	230a      	movs	r3, #10
 8000640:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000642:	2307      	movs	r3, #7
 8000644:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fe28 	bl	80012a8 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800065e:	f000 f8b7 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2303      	movs	r3, #3
 8000668:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000676:	463b      	mov	r3, r7
 8000678:	2104      	movs	r1, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f001 f9f0 	bl	8001a60 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000686:	f000 f8a3 	bl	80007d0 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3758      	adds	r7, #88	; 0x58
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_USART2_UART_Init+0x58>)
 800069a:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <MX_USART2_UART_Init+0x5c>)
 800069c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006d8:	f002 f8a2 	bl	8002820 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006e2:	f000 f875 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	2000008c 	.word	0x2000008c
 80006f0:	40004400 	.word	0x40004400

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	4b2f      	ldr	r3, [pc, #188]	; (80007c8 <MX_GPIO_Init+0xd4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a2e      	ldr	r2, [pc, #184]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b2c      	ldr	r3, [pc, #176]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	4a28      	ldr	r2, [pc, #160]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072e:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <MX_GPIO_Init+0xd4>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a22      	ldr	r2, [pc, #136]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a1c      	ldr	r2, [pc, #112]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2120      	movs	r1, #32
 800076e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000772:	f000 fcf9 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800077c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	480f      	ldr	r0, [pc, #60]	; (80007cc <MX_GPIO_Init+0xd8>)
 800078e:	f000 fb29 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000792:	2320      	movs	r3, #32
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f000 fb1a 	bl	8000de4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	2028      	movs	r0, #40	; 0x28
 80007b6:	f000 fade 	bl	8000d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007ba:	2028      	movs	r0, #40	; 0x28
 80007bc:	f000 faf7 	bl	8000dae <HAL_NVIC_EnableIRQ>

}
 80007c0:	bf00      	nop
 80007c2:	3728      	adds	r7, #40	; 0x28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40021000 	.word	0x40021000
 80007cc:	48000800 	.word	0x48000800

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>
	...

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_MspInit+0x44>)
 80007e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <HAL_MspInit+0x44>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6613      	str	r3, [r2, #96]	; 0x60
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <HAL_MspInit+0x44>)
 80007f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <HAL_MspInit+0x44>)
 80007fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_MspInit+0x44>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	6593      	str	r3, [r2, #88]	; 0x58
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_MspInit+0x44>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b0ac      	sub	sp, #176	; 0xb0
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2288      	movs	r2, #136	; 0x88
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f002 fd5f 	bl	8003308 <memset>
  if(huart->Instance==USART2)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <HAL_UART_MspInit+0xb0>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d13b      	bne.n	80008cc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000854:	2302      	movs	r3, #2
 8000856:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000858:	2300      	movs	r3, #0
 800085a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4618      	mov	r0, r3
 8000862:	f001 fb21 	bl	8001ea8 <HAL_RCCEx_PeriphCLKConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800086c:	f7ff ffb0 	bl	80007d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000870:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <HAL_UART_MspInit+0xb4>)
 8000872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000874:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <HAL_UART_MspInit+0xb4>)
 8000876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087a:	6593      	str	r3, [r2, #88]	; 0x58
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <HAL_UART_MspInit+0xb4>)
 800087e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <HAL_UART_MspInit+0xb4>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088c:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <HAL_UART_MspInit+0xb4>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000894:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <HAL_UART_MspInit+0xb4>)
 8000896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008a0:	230c      	movs	r3, #12
 80008a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008b8:	2307      	movs	r3, #7
 80008ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008c2:	4619      	mov	r1, r3
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c8:	f000 fa8c 	bl	8000de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008cc:	bf00      	nop
 80008ce:	37b0      	adds	r7, #176	; 0xb0
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40004400 	.word	0x40004400
 80008d8:	40021000 	.word	0x40021000

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <NMI_Handler+0x4>

080008e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <HardFault_Handler+0x4>

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <MemManage_Handler+0x4>

080008ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000928:	f000 f92a 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000934:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000938:	f000 fc2e 	bl	8001198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	e00a      	b.n	8000968 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000952:	f3af 8000 	nop.w
 8000956:	4601      	mov	r1, r0
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	1c5a      	adds	r2, r3, #1
 800095c:	60ba      	str	r2, [r7, #8]
 800095e:	b2ca      	uxtb	r2, r1
 8000960:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	3301      	adds	r3, #1
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697a      	ldr	r2, [r7, #20]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	429a      	cmp	r2, r3
 800096e:	dbf0      	blt.n	8000952 <_read+0x12>
	}

return len;
 8000970:	687b      	ldr	r3, [r7, #4]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <_close>:
	}
	return len;
}

int _close(int file)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
	return -1;
 8000982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009a2:	605a      	str	r2, [r3, #4]
	return 0;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <_isatty>:

int _isatty(int file)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b083      	sub	sp, #12
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
	return 1;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
	return 0;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009ec:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <_sbrk+0x5c>)
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <_sbrk+0x60>)
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <_sbrk+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d102      	bne.n	8000a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <_sbrk+0x64>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <_sbrk+0x68>)
 8000a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <_sbrk+0x64>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d207      	bcs.n	8000a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a14:	f002 fc4e 	bl	80032b4 <__errno>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	e009      	b.n	8000a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2a:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <_sbrk+0x64>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <_sbrk+0x64>)
 8000a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a36:	68fb      	ldr	r3, [r7, #12]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20018000 	.word	0x20018000
 8000a44:	00000400 	.word	0x00000400
 8000a48:	20000114 	.word	0x20000114
 8000a4c:	20000130 	.word	0x20000130

08000a50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <SystemInit+0x20>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <SystemInit+0x20>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a78:	f7ff ffea 	bl	8000a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7e:	490d      	ldr	r1, [pc, #52]	; (8000ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <LoopForever+0xe>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a94:	4c0a      	ldr	r4, [pc, #40]	; (8000ac0 <LoopForever+0x16>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f002 fc0d 	bl	80032c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aa6:	f7ff fd7b 	bl	80005a0 <main>

08000aaa <LoopForever>:

LoopForever:
    b LoopForever
 8000aaa:	e7fe      	b.n	8000aaa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000aac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ab8:	08004350 	.word	0x08004350
  ldr r2, =_sbss
 8000abc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ac0:	2000012c 	.word	0x2000012c

08000ac4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC1_2_IRQHandler>
	...

08000ac8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <HAL_Init+0x3c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <HAL_Init+0x3c>)
 8000ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000adc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ade:	2003      	movs	r0, #3
 8000ae0:	f000 f93e 	bl	8000d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f000 f80f 	bl	8000b08 <HAL_InitTick>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d002      	beq.n	8000af6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	71fb      	strb	r3, [r7, #7]
 8000af4:	e001      	b.n	8000afa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af6:	f7ff fe71 	bl	80007dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000afa:	79fb      	ldrb	r3, [r7, #7]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40022000 	.word	0x40022000

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b10:	2300      	movs	r3, #0
 8000b12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_InitTick+0x6c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d023      	beq.n	8000b64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <HAL_InitTick+0x70>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_InitTick+0x6c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f949 	bl	8000dca <HAL_SYSTICK_Config>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10f      	bne.n	8000b5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	d809      	bhi.n	8000b58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f000 f913 	bl	8000d76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b50:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <HAL_InitTick+0x74>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	e007      	b.n	8000b68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e004      	b.n	8000b68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	73fb      	strb	r3, [r7, #15]
 8000b62:	e001      	b.n	8000b68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	20000004 	.word	0x20000004

08000b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x24>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_IncTick+0x24>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	20000118 	.word	0x20000118

08000ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <HAL_GetTick+0x14>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000118 	.word	0x20000118

08000bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	60d3      	str	r3, [r2, #12]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <__NVIC_GetPriorityGrouping+0x18>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	f003 0307 	and.w	r3, r3, #7
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	db0b      	blt.n	8000c4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	f003 021f 	and.w	r2, r3, #31
 8000c3c:	4907      	ldr	r1, [pc, #28]	; (8000c5c <__NVIC_EnableIRQ+0x38>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	095b      	lsrs	r3, r3, #5
 8000c44:	2001      	movs	r0, #1
 8000c46:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000e100 	.word	0xe000e100

08000c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	db0a      	blt.n	8000c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	490c      	ldr	r1, [pc, #48]	; (8000cac <__NVIC_SetPriority+0x4c>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	0112      	lsls	r2, r2, #4
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	440b      	add	r3, r1
 8000c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c88:	e00a      	b.n	8000ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4908      	ldr	r1, [pc, #32]	; (8000cb0 <__NVIC_SetPriority+0x50>)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	3b04      	subs	r3, #4
 8000c98:	0112      	lsls	r2, r2, #4
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	761a      	strb	r2, [r3, #24]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000e100 	.word	0xe000e100
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b089      	sub	sp, #36	; 0x24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f1c3 0307 	rsb	r3, r3, #7
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	bf28      	it	cs
 8000cd2:	2304      	movcs	r3, #4
 8000cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	2b06      	cmp	r3, #6
 8000cdc:	d902      	bls.n	8000ce4 <NVIC_EncodePriority+0x30>
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3b03      	subs	r3, #3
 8000ce2:	e000      	b.n	8000ce6 <NVIC_EncodePriority+0x32>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	43d9      	mvns	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	4313      	orrs	r3, r2
         );
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3724      	adds	r7, #36	; 0x24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d2c:	d301      	bcc.n	8000d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00f      	b.n	8000d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <SysTick_Config+0x40>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3a:	210f      	movs	r1, #15
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	f7ff ff8e 	bl	8000c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <SysTick_Config+0x40>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SysTick_Config+0x40>)
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ff29 	bl	8000bc0 <__NVIC_SetPriorityGrouping>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d88:	f7ff ff3e 	bl	8000c08 <__NVIC_GetPriorityGrouping>
 8000d8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	68b9      	ldr	r1, [r7, #8]
 8000d92:	6978      	ldr	r0, [r7, #20]
 8000d94:	f7ff ff8e 	bl	8000cb4 <NVIC_EncodePriority>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff5d 	bl	8000c60 <__NVIC_SetPriority>
}
 8000da6:	bf00      	nop
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff31 	bl	8000c24 <__NVIC_EnableIRQ>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffa2 	bl	8000d1c <SysTick_Config>
 8000dd8:	4603      	mov	r3, r0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df2:	e17f      	b.n	80010f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 8171 	beq.w	80010ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d005      	beq.n	8000e24 <HAL_GPIO_Init+0x40>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d130      	bne.n	8000e86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	f003 0201 	and.w	r2, r3, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d118      	bne.n	8000ec4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	08db      	lsrs	r3, r3, #3
 8000eae:	f003 0201 	and.w	r2, r3, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d017      	beq.n	8000f00 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d123      	bne.n	8000f54 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	08da      	lsrs	r2, r3, #3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3208      	adds	r2, #8
 8000f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	220f      	movs	r2, #15
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	691a      	ldr	r2, [r3, #16]
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	08da      	lsrs	r2, r3, #3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3208      	adds	r2, #8
 8000f4e:	6939      	ldr	r1, [r7, #16]
 8000f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0203 	and.w	r2, r3, #3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 80ac 	beq.w	80010ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	4b5f      	ldr	r3, [pc, #380]	; (8001114 <HAL_GPIO_Init+0x330>)
 8000f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9a:	4a5e      	ldr	r2, [pc, #376]	; (8001114 <HAL_GPIO_Init+0x330>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa2:	4b5c      	ldr	r3, [pc, #368]	; (8001114 <HAL_GPIO_Init+0x330>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fae:	4a5a      	ldr	r2, [pc, #360]	; (8001118 <HAL_GPIO_Init+0x334>)
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	220f      	movs	r2, #15
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fd8:	d025      	beq.n	8001026 <HAL_GPIO_Init+0x242>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4f      	ldr	r2, [pc, #316]	; (800111c <HAL_GPIO_Init+0x338>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d01f      	beq.n	8001022 <HAL_GPIO_Init+0x23e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4e      	ldr	r2, [pc, #312]	; (8001120 <HAL_GPIO_Init+0x33c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d019      	beq.n	800101e <HAL_GPIO_Init+0x23a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4d      	ldr	r2, [pc, #308]	; (8001124 <HAL_GPIO_Init+0x340>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d013      	beq.n	800101a <HAL_GPIO_Init+0x236>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4c      	ldr	r2, [pc, #304]	; (8001128 <HAL_GPIO_Init+0x344>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d00d      	beq.n	8001016 <HAL_GPIO_Init+0x232>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4b      	ldr	r2, [pc, #300]	; (800112c <HAL_GPIO_Init+0x348>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d007      	beq.n	8001012 <HAL_GPIO_Init+0x22e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4a      	ldr	r2, [pc, #296]	; (8001130 <HAL_GPIO_Init+0x34c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d101      	bne.n	800100e <HAL_GPIO_Init+0x22a>
 800100a:	2306      	movs	r3, #6
 800100c:	e00c      	b.n	8001028 <HAL_GPIO_Init+0x244>
 800100e:	2307      	movs	r3, #7
 8001010:	e00a      	b.n	8001028 <HAL_GPIO_Init+0x244>
 8001012:	2305      	movs	r3, #5
 8001014:	e008      	b.n	8001028 <HAL_GPIO_Init+0x244>
 8001016:	2304      	movs	r3, #4
 8001018:	e006      	b.n	8001028 <HAL_GPIO_Init+0x244>
 800101a:	2303      	movs	r3, #3
 800101c:	e004      	b.n	8001028 <HAL_GPIO_Init+0x244>
 800101e:	2302      	movs	r3, #2
 8001020:	e002      	b.n	8001028 <HAL_GPIO_Init+0x244>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <HAL_GPIO_Init+0x244>
 8001026:	2300      	movs	r3, #0
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	f002 0203 	and.w	r2, r2, #3
 800102e:	0092      	lsls	r2, r2, #2
 8001030:	4093      	lsls	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001038:	4937      	ldr	r1, [pc, #220]	; (8001118 <HAL_GPIO_Init+0x334>)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	089b      	lsrs	r3, r3, #2
 800103e:	3302      	adds	r3, #2
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001046:	4b3b      	ldr	r3, [pc, #236]	; (8001134 <HAL_GPIO_Init+0x350>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800106a:	4a32      	ldr	r2, [pc, #200]	; (8001134 <HAL_GPIO_Init+0x350>)
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001070:	4b30      	ldr	r3, [pc, #192]	; (8001134 <HAL_GPIO_Init+0x350>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001094:	4a27      	ldr	r2, [pc, #156]	; (8001134 <HAL_GPIO_Init+0x350>)
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800109a:	4b26      	ldr	r3, [pc, #152]	; (8001134 <HAL_GPIO_Init+0x350>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010be:	4a1d      	ldr	r2, [pc, #116]	; (8001134 <HAL_GPIO_Init+0x350>)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <HAL_GPIO_Init+0x350>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010e8:	4a12      	ldr	r2, [pc, #72]	; (8001134 <HAL_GPIO_Init+0x350>)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3301      	adds	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa22 f303 	lsr.w	r3, r2, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f47f ae78 	bne.w	8000df4 <HAL_GPIO_Init+0x10>
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	40010000 	.word	0x40010000
 800111c:	48000400 	.word	0x48000400
 8001120:	48000800 	.word	0x48000800
 8001124:	48000c00 	.word	0x48000c00
 8001128:	48001000 	.word	0x48001000
 800112c:	48001400 	.word	0x48001400
 8001130:	48001800 	.word	0x48001800
 8001134:	40010400 	.word	0x40010400

08001138 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	887b      	ldrh	r3, [r7, #2]
 800114a:	4013      	ands	r3, r2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001150:	2301      	movs	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	e001      	b.n	800115a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
 8001174:	4613      	mov	r3, r2
 8001176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001178:	787b      	ldrb	r3, [r7, #1]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001184:	e002      	b.n	800118c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a4:	695a      	ldr	r2, [r3, #20]
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d006      	beq.n	80011bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f806 	bl	80011c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40010400 	.word	0x40010400

080011c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40007000 	.word	0x40007000

080011fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800120a:	d130      	bne.n	800126e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800120c:	4b23      	ldr	r3, [pc, #140]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001218:	d038      	beq.n	800128c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800121a:	4b20      	ldr	r3, [pc, #128]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001222:	4a1e      	ldr	r2, [pc, #120]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001224:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001228:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2232      	movs	r2, #50	; 0x32
 8001230:	fb02 f303 	mul.w	r3, r2, r3
 8001234:	4a1b      	ldr	r2, [pc, #108]	; (80012a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	0c9b      	lsrs	r3, r3, #18
 800123c:	3301      	adds	r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001240:	e002      	b.n	8001248 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	3b01      	subs	r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001254:	d102      	bne.n	800125c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f2      	bne.n	8001242 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001268:	d110      	bne.n	800128c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e00f      	b.n	800128e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800127a:	d007      	beq.n	800128c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001284:	4a05      	ldr	r2, [pc, #20]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800128a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40007000 	.word	0x40007000
 80012a0:	20000000 	.word	0x20000000
 80012a4:	431bde83 	.word	0x431bde83

080012a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e3ca      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ba:	4b97      	ldr	r3, [pc, #604]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012c4:	4b94      	ldr	r3, [pc, #592]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 80e4 	beq.w	80014a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d007      	beq.n	80012f2 <HAL_RCC_OscConfig+0x4a>
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	2b0c      	cmp	r3, #12
 80012e6:	f040 808b 	bne.w	8001400 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	f040 8087 	bne.w	8001400 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012f2:	4b89      	ldr	r3, [pc, #548]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d005      	beq.n	800130a <HAL_RCC_OscConfig+0x62>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e3a2      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a1a      	ldr	r2, [r3, #32]
 800130e:	4b82      	ldr	r3, [pc, #520]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d004      	beq.n	8001324 <HAL_RCC_OscConfig+0x7c>
 800131a:	4b7f      	ldr	r3, [pc, #508]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001322:	e005      	b.n	8001330 <HAL_RCC_OscConfig+0x88>
 8001324:	4b7c      	ldr	r3, [pc, #496]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001330:	4293      	cmp	r3, r2
 8001332:	d223      	bcs.n	800137c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fd55 	bl	8001de8 <RCC_SetFlashLatencyFromMSIRange>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e383      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001348:	4b73      	ldr	r3, [pc, #460]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a72      	ldr	r2, [pc, #456]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800134e:	f043 0308 	orr.w	r3, r3, #8
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	4b70      	ldr	r3, [pc, #448]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	496d      	ldr	r1, [pc, #436]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001366:	4b6c      	ldr	r3, [pc, #432]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	4968      	ldr	r1, [pc, #416]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
 800137a:	e025      	b.n	80013c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800137c:	4b66      	ldr	r3, [pc, #408]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a65      	ldr	r2, [pc, #404]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001382:	f043 0308 	orr.w	r3, r3, #8
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b63      	ldr	r3, [pc, #396]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	4960      	ldr	r1, [pc, #384]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800139a:	4b5f      	ldr	r3, [pc, #380]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	495b      	ldr	r1, [pc, #364]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d109      	bne.n	80013c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fd15 	bl	8001de8 <RCC_SetFlashLatencyFromMSIRange>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e343      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013c8:	f000 fc4a 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 80013cc:	4602      	mov	r2, r0
 80013ce:	4b52      	ldr	r3, [pc, #328]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	091b      	lsrs	r3, r3, #4
 80013d4:	f003 030f 	and.w	r3, r3, #15
 80013d8:	4950      	ldr	r1, [pc, #320]	; (800151c <HAL_RCC_OscConfig+0x274>)
 80013da:	5ccb      	ldrb	r3, [r1, r3]
 80013dc:	f003 031f 	and.w	r3, r3, #31
 80013e0:	fa22 f303 	lsr.w	r3, r2, r3
 80013e4:	4a4e      	ldr	r2, [pc, #312]	; (8001520 <HAL_RCC_OscConfig+0x278>)
 80013e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013e8:	4b4e      	ldr	r3, [pc, #312]	; (8001524 <HAL_RCC_OscConfig+0x27c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fb8b 	bl	8000b08 <HAL_InitTick>
 80013f2:	4603      	mov	r3, r0
 80013f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d052      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	e327      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d032      	beq.n	800146e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001408:	4b43      	ldr	r3, [pc, #268]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a42      	ldr	r2, [pc, #264]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001414:	f7ff fbc8 	bl	8000ba8 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800141c:	f7ff fbc4 	bl	8000ba8 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e310      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800142e:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800143a:	4b37      	ldr	r3, [pc, #220]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a36      	ldr	r2, [pc, #216]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b34      	ldr	r3, [pc, #208]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	4931      	ldr	r1, [pc, #196]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001458:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	492c      	ldr	r1, [pc, #176]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
 800146c:	e01a      	b.n	80014a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a29      	ldr	r2, [pc, #164]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001474:	f023 0301 	bic.w	r3, r3, #1
 8001478:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800147a:	f7ff fb95 	bl	8000ba8 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001482:	f7ff fb91 	bl	8000ba8 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e2dd      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001494:	4b20      	ldr	r3, [pc, #128]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f0      	bne.n	8001482 <HAL_RCC_OscConfig+0x1da>
 80014a0:	e000      	b.n	80014a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d074      	beq.n	800159a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d005      	beq.n	80014c2 <HAL_RCC_OscConfig+0x21a>
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	2b0c      	cmp	r3, #12
 80014ba:	d10e      	bne.n	80014da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d10b      	bne.n	80014da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d064      	beq.n	8001598 <HAL_RCC_OscConfig+0x2f0>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d160      	bne.n	8001598 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e2ba      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e2:	d106      	bne.n	80014f2 <HAL_RCC_OscConfig+0x24a>
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80014ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	e026      	b.n	8001540 <HAL_RCC_OscConfig+0x298>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014fa:	d115      	bne.n	8001528 <HAL_RCC_OscConfig+0x280>
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a05      	ldr	r2, [pc, #20]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001502:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a02      	ldr	r2, [pc, #8]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800150e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	e014      	b.n	8001540 <HAL_RCC_OscConfig+0x298>
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000
 800151c:	08004260 	.word	0x08004260
 8001520:	20000000 	.word	0x20000000
 8001524:	20000004 	.word	0x20000004
 8001528:	4ba0      	ldr	r3, [pc, #640]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a9f      	ldr	r2, [pc, #636]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800152e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b9d      	ldr	r3, [pc, #628]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a9c      	ldr	r2, [pc, #624]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800153a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d013      	beq.n	8001570 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001548:	f7ff fb2e 	bl	8000ba8 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001550:	f7ff fb2a 	bl	8000ba8 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	; 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e276      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001562:	4b92      	ldr	r3, [pc, #584]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x2a8>
 800156e:	e014      	b.n	800159a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff fb1a 	bl	8000ba8 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff fb16 	bl	8000ba8 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	; 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e262      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800158a:	4b88      	ldr	r3, [pc, #544]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x2d0>
 8001596:	e000      	b.n	800159a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d060      	beq.n	8001668 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_OscConfig+0x310>
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2b0c      	cmp	r3, #12
 80015b0:	d119      	bne.n	80015e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d116      	bne.n	80015e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b8:	4b7c      	ldr	r3, [pc, #496]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_OscConfig+0x328>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e23f      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d0:	4b76      	ldr	r3, [pc, #472]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	061b      	lsls	r3, r3, #24
 80015de:	4973      	ldr	r1, [pc, #460]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e4:	e040      	b.n	8001668 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d023      	beq.n	8001636 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ee:	4b6f      	ldr	r3, [pc, #444]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a6e      	ldr	r2, [pc, #440]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80015f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fa:	f7ff fad5 	bl	8000ba8 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff fad1 	bl	8000ba8 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e21d      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001614:	4b65      	ldr	r3, [pc, #404]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	4b62      	ldr	r3, [pc, #392]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	061b      	lsls	r3, r3, #24
 800162e:	495f      	ldr	r1, [pc, #380]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
 8001634:	e018      	b.n	8001668 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001636:	4b5d      	ldr	r3, [pc, #372]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a5c      	ldr	r2, [pc, #368]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800163c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff fab1 	bl	8000ba8 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164a:	f7ff faad 	bl	8000ba8 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e1f9      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800165c:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1f0      	bne.n	800164a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b00      	cmp	r3, #0
 8001672:	d03c      	beq.n	80016ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d01c      	beq.n	80016b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167c:	4b4b      	ldr	r3, [pc, #300]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800167e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001682:	4a4a      	ldr	r2, [pc, #296]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168c:	f7ff fa8c 	bl	8000ba8 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff fa88 	bl	8000ba8 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e1d4      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016a6:	4b41      	ldr	r3, [pc, #260]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80016a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0ef      	beq.n	8001694 <HAL_RCC_OscConfig+0x3ec>
 80016b4:	e01b      	b.n	80016ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b6:	4b3d      	ldr	r3, [pc, #244]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80016b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016bc:	4a3b      	ldr	r2, [pc, #236]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c6:	f7ff fa6f 	bl	8000ba8 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ce:	f7ff fa6b 	bl	8000ba8 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e1b7      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016e0:	4b32      	ldr	r3, [pc, #200]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80016e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1ef      	bne.n	80016ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 80a6 	beq.w	8001848 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fc:	2300      	movs	r3, #0
 80016fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001700:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10d      	bne.n	8001728 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170c:	4b27      	ldr	r3, [pc, #156]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	4a26      	ldr	r2, [pc, #152]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001716:	6593      	str	r3, [r2, #88]	; 0x58
 8001718:	4b24      	ldr	r3, [pc, #144]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800171a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001724:	2301      	movs	r3, #1
 8001726:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <HAL_RCC_OscConfig+0x508>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001730:	2b00      	cmp	r3, #0
 8001732:	d118      	bne.n	8001766 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001734:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <HAL_RCC_OscConfig+0x508>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a1d      	ldr	r2, [pc, #116]	; (80017b0 <HAL_RCC_OscConfig+0x508>)
 800173a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001740:	f7ff fa32 	bl	8000ba8 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001748:	f7ff fa2e 	bl	8000ba8 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e17a      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_RCC_OscConfig+0x508>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d108      	bne.n	8001780 <HAL_RCC_OscConfig+0x4d8>
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001774:	4a0d      	ldr	r2, [pc, #52]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800177e:	e029      	b.n	80017d4 <HAL_RCC_OscConfig+0x52c>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b05      	cmp	r3, #5
 8001786:	d115      	bne.n	80017b4 <HAL_RCC_OscConfig+0x50c>
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800178a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178e:	4a07      	ldr	r2, [pc, #28]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179e:	4a03      	ldr	r2, [pc, #12]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017a8:	e014      	b.n	80017d4 <HAL_RCC_OscConfig+0x52c>
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40007000 	.word	0x40007000
 80017b4:	4b9c      	ldr	r3, [pc, #624]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80017b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ba:	4a9b      	ldr	r2, [pc, #620]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c4:	4b98      	ldr	r3, [pc, #608]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ca:	4a97      	ldr	r2, [pc, #604]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80017cc:	f023 0304 	bic.w	r3, r3, #4
 80017d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d016      	beq.n	800180a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017dc:	f7ff f9e4 	bl	8000ba8 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e4:	f7ff f9e0 	bl	8000ba8 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e12a      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017fa:	4b8b      	ldr	r3, [pc, #556]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80017fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0ed      	beq.n	80017e4 <HAL_RCC_OscConfig+0x53c>
 8001808:	e015      	b.n	8001836 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180a:	f7ff f9cd 	bl	8000ba8 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001810:	e00a      	b.n	8001828 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001812:	f7ff f9c9 	bl	8000ba8 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001820:	4293      	cmp	r3, r2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e113      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001828:	4b7f      	ldr	r3, [pc, #508]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 800182a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1ed      	bne.n	8001812 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001836:	7ffb      	ldrb	r3, [r7, #31]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183c:	4b7a      	ldr	r3, [pc, #488]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001840:	4a79      	ldr	r2, [pc, #484]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 8001842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001846:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80fe 	beq.w	8001a4e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	2b02      	cmp	r3, #2
 8001858:	f040 80d0 	bne.w	80019fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800185c:	4b72      	ldr	r3, [pc, #456]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f003 0203 	and.w	r2, r3, #3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	429a      	cmp	r2, r3
 800186e:	d130      	bne.n	80018d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	3b01      	subs	r3, #1
 800187c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800187e:	429a      	cmp	r2, r3
 8001880:	d127      	bne.n	80018d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d11f      	bne.n	80018d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800189c:	2a07      	cmp	r2, #7
 800189e:	bf14      	ite	ne
 80018a0:	2201      	movne	r2, #1
 80018a2:	2200      	moveq	r2, #0
 80018a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d113      	bne.n	80018d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b4:	085b      	lsrs	r3, r3, #1
 80018b6:	3b01      	subs	r3, #1
 80018b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d109      	bne.n	80018d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	085b      	lsrs	r3, r3, #1
 80018ca:	3b01      	subs	r3, #1
 80018cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d06e      	beq.n	80019b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2b0c      	cmp	r3, #12
 80018d6:	d069      	beq.n	80019ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018d8:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d105      	bne.n	80018f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018e4:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0ad      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018f4:	4b4c      	ldr	r3, [pc, #304]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a4b      	ldr	r2, [pc, #300]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80018fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001900:	f7ff f952 	bl	8000ba8 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001908:	f7ff f94e 	bl	8000ba8 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e09a      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800191a:	4b43      	ldr	r3, [pc, #268]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001926:	4b40      	ldr	r3, [pc, #256]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	4b40      	ldr	r3, [pc, #256]	; (8001a2c <HAL_RCC_OscConfig+0x784>)
 800192c:	4013      	ands	r3, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001936:	3a01      	subs	r2, #1
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	4311      	orrs	r1, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001940:	0212      	lsls	r2, r2, #8
 8001942:	4311      	orrs	r1, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001948:	0852      	lsrs	r2, r2, #1
 800194a:	3a01      	subs	r2, #1
 800194c:	0552      	lsls	r2, r2, #21
 800194e:	4311      	orrs	r1, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001954:	0852      	lsrs	r2, r2, #1
 8001956:	3a01      	subs	r2, #1
 8001958:	0652      	lsls	r2, r2, #25
 800195a:	4311      	orrs	r1, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001960:	0912      	lsrs	r2, r2, #4
 8001962:	0452      	lsls	r2, r2, #17
 8001964:	430a      	orrs	r2, r1
 8001966:	4930      	ldr	r1, [pc, #192]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 8001968:	4313      	orrs	r3, r2
 800196a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800196c:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a2d      	ldr	r2, [pc, #180]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 8001972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001976:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001978:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	4a2a      	ldr	r2, [pc, #168]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 800197e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001982:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001984:	f7ff f910 	bl	8000ba8 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff f90c 	bl	8000ba8 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e058      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019aa:	e050      	b.n	8001a4e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e04f      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b0:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d148      	bne.n	8001a4e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019bc:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80019c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019c8:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4a16      	ldr	r2, [pc, #88]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80019ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019d4:	f7ff f8e8 	bl	8000ba8 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff f8e4 	bl	8000ba8 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e030      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x734>
 80019fa:	e028      	b.n	8001a4e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2b0c      	cmp	r3, #12
 8001a00:	d023      	beq.n	8001a4a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 8001a08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0e:	f7ff f8cb 	bl	8000ba8 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a14:	e00c      	b.n	8001a30 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a16:	f7ff f8c7 	bl	8000ba8 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d905      	bls.n	8001a30 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e013      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_RCC_OscConfig+0x7b0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1ec      	bne.n	8001a16 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_RCC_OscConfig+0x7b0>)
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	4905      	ldr	r1, [pc, #20]	; (8001a58 <HAL_RCC_OscConfig+0x7b0>)
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_RCC_OscConfig+0x7b4>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	60cb      	str	r3, [r1, #12]
 8001a48:	e001      	b.n	8001a4e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3720      	adds	r7, #32
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	feeefffc 	.word	0xfeeefffc

08001a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0e7      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a74:	4b75      	ldr	r3, [pc, #468]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d910      	bls.n	8001aa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b72      	ldr	r3, [pc, #456]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 0207 	bic.w	r2, r3, #7
 8001a8a:	4970      	ldr	r1, [pc, #448]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	4b6e      	ldr	r3, [pc, #440]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0cf      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d010      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	4b66      	ldr	r3, [pc, #408]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d908      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4960      	ldr	r1, [pc, #384]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d04c      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae6:	4b5a      	ldr	r3, [pc, #360]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d121      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0a6      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001afe:	4b54      	ldr	r3, [pc, #336]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d115      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e09a      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b16:	4b4e      	ldr	r3, [pc, #312]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e08e      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b26:	4b4a      	ldr	r3, [pc, #296]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e086      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b36:	4b46      	ldr	r3, [pc, #280]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f023 0203 	bic.w	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	4943      	ldr	r1, [pc, #268]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b48:	f7ff f82e 	bl	8000ba8 <HAL_GetTick>
 8001b4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b50:	f7ff f82a 	bl	8000ba8 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e06e      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 020c 	and.w	r2, r3, #12
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d1eb      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d010      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d208      	bcs.n	8001ba6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b94:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	492b      	ldr	r1, [pc, #172]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba6:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d210      	bcs.n	8001bd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f023 0207 	bic.w	r2, r3, #7
 8001bbc:	4923      	ldr	r1, [pc, #140]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e036      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d008      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be2:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	4918      	ldr	r1, [pc, #96]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d009      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4910      	ldr	r1, [pc, #64]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c14:	f000 f824 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	091b      	lsrs	r3, r3, #4
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	490b      	ldr	r1, [pc, #44]	; (8001c54 <HAL_RCC_ClockConfig+0x1f4>)
 8001c26:	5ccb      	ldrb	r3, [r1, r3]
 8001c28:	f003 031f 	and.w	r3, r3, #31
 8001c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c30:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <HAL_RCC_ClockConfig+0x1f8>)
 8001c32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_RCC_ClockConfig+0x1fc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe ff65 	bl	8000b08 <HAL_InitTick>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c42:	7afb      	ldrb	r3, [r7, #11]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40022000 	.word	0x40022000
 8001c50:	40021000 	.word	0x40021000
 8001c54:	08004260 	.word	0x08004260
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000004 	.word	0x20000004

08001c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c6e:	4b3e      	ldr	r3, [pc, #248]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c78:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x34>
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	2b0c      	cmp	r3, #12
 8001c8c:	d121      	bne.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d11e      	bne.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c94:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d107      	bne.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ca0:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	e005      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cbc:	4a2b      	ldr	r2, [pc, #172]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10d      	bne.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d102      	bne.n	8001cde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cd8:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cda:	61bb      	str	r3, [r7, #24]
 8001cdc:	e004      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ce4:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ce6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	2b0c      	cmp	r3, #12
 8001cec:	d134      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cee:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d003      	beq.n	8001d06 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d003      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0xac>
 8001d04:	e005      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d08:	617b      	str	r3, [r7, #20]
      break;
 8001d0a:	e005      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d0e:	617b      	str	r3, [r7, #20]
      break;
 8001d10:	e002      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	617b      	str	r3, [r7, #20]
      break;
 8001d16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	3301      	adds	r3, #1
 8001d24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	0a1b      	lsrs	r3, r3, #8
 8001d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	fb03 f202 	mul.w	r2, r3, r2
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	0e5b      	lsrs	r3, r3, #25
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d58:	69bb      	ldr	r3, [r7, #24]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3724      	adds	r7, #36	; 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	08004278 	.word	0x08004278
 8001d70:	00f42400 	.word	0x00f42400
 8001d74:	007a1200 	.word	0x007a1200

08001d78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000000 	.word	0x20000000

08001d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d94:	f7ff fff0 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	4904      	ldr	r1, [pc, #16]	; (8001db8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000
 8001db8:	08004270 	.word	0x08004270

08001dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dc0:	f7ff ffda 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	0adb      	lsrs	r3, r3, #11
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	4904      	ldr	r1, [pc, #16]	; (8001de4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dd2:	5ccb      	ldrb	r3, [r1, r3]
 8001dd4:	f003 031f 	and.w	r3, r3, #31
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	08004270 	.word	0x08004270

08001de8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001df4:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e00:	f7ff f9ee 	bl	80011e0 <HAL_PWREx_GetVoltageRange>
 8001e04:	6178      	str	r0, [r7, #20]
 8001e06:	e014      	b.n	8001e32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e08:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	4a24      	ldr	r2, [pc, #144]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e12:	6593      	str	r3, [r2, #88]	; 0x58
 8001e14:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e20:	f7ff f9de 	bl	80011e0 <HAL_PWREx_GetVoltageRange>
 8001e24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e26:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	4a1d      	ldr	r2, [pc, #116]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e38:	d10b      	bne.n	8001e52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b80      	cmp	r3, #128	; 0x80
 8001e3e:	d919      	bls.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2ba0      	cmp	r3, #160	; 0xa0
 8001e44:	d902      	bls.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e46:	2302      	movs	r3, #2
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	e013      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	e010      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b80      	cmp	r3, #128	; 0x80
 8001e56:	d902      	bls.n	8001e5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e58:	2303      	movs	r3, #3
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	e00a      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b80      	cmp	r3, #128	; 0x80
 8001e62:	d102      	bne.n	8001e6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e64:	2302      	movs	r3, #2
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	e004      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b70      	cmp	r3, #112	; 0x70
 8001e6e:	d101      	bne.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e70:	2301      	movs	r3, #1
 8001e72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 0207 	bic.w	r2, r3, #7
 8001e7c:	4909      	ldr	r1, [pc, #36]	; (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d001      	beq.n	8001e96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40022000 	.word	0x40022000

08001ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d041      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ec8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ecc:	d02a      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ece:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ed2:	d824      	bhi.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ed4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ed8:	d008      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001eda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ede:	d81e      	bhi.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00a      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee8:	d010      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001eea:	e018      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001eec:	4b86      	ldr	r3, [pc, #536]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4a85      	ldr	r2, [pc, #532]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ef8:	e015      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3304      	adds	r3, #4
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fabb 	bl	800247c <RCCEx_PLLSAI1_Config>
 8001f06:	4603      	mov	r3, r0
 8001f08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f0a:	e00c      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3320      	adds	r3, #32
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 fba6 	bl	8002664 <RCCEx_PLLSAI2_Config>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f1c:	e003      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	74fb      	strb	r3, [r7, #19]
      break;
 8001f22:	e000      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f26:	7cfb      	ldrb	r3, [r7, #19]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10b      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f2c:	4b76      	ldr	r3, [pc, #472]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f3a:	4973      	ldr	r1, [pc, #460]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f42:	e001      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f44:	7cfb      	ldrb	r3, [r7, #19]
 8001f46:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d041      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f5c:	d02a      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f62:	d824      	bhi.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f68:	d008      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f6e:	d81e      	bhi.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00a      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f78:	d010      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f7a:	e018      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f7c:	4b62      	ldr	r3, [pc, #392]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4a61      	ldr	r2, [pc, #388]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f86:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f88:	e015      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fa73 	bl	800247c <RCCEx_PLLSAI1_Config>
 8001f96:	4603      	mov	r3, r0
 8001f98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f9a:	e00c      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3320      	adds	r3, #32
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fb5e 	bl	8002664 <RCCEx_PLLSAI2_Config>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fac:	e003      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fb6:	7cfb      	ldrb	r3, [r7, #19]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10b      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fbc:	4b52      	ldr	r3, [pc, #328]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fca:	494f      	ldr	r1, [pc, #316]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fd2:	e001      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fd4:	7cfb      	ldrb	r3, [r7, #19]
 8001fd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80a0 	beq.w	8002126 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fea:	4b47      	ldr	r3, [pc, #284]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00d      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002000:	4b41      	ldr	r3, [pc, #260]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	4a40      	ldr	r2, [pc, #256]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200a:	6593      	str	r3, [r2, #88]	; 0x58
 800200c:	4b3e      	ldr	r3, [pc, #248]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002018:	2301      	movs	r3, #1
 800201a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800201c:	4b3b      	ldr	r3, [pc, #236]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a3a      	ldr	r2, [pc, #232]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002026:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002028:	f7fe fdbe 	bl	8000ba8 <HAL_GetTick>
 800202c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800202e:	e009      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002030:	f7fe fdba 	bl	8000ba8 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d902      	bls.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	74fb      	strb	r3, [r7, #19]
        break;
 8002042:	e005      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002044:	4b31      	ldr	r3, [pc, #196]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ef      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002050:	7cfb      	ldrb	r3, [r7, #19]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d15c      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002056:	4b2c      	ldr	r3, [pc, #176]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002060:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01f      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	429a      	cmp	r2, r3
 8002072:	d019      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002074:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800207e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002080:	4b21      	ldr	r3, [pc, #132]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002086:	4a20      	ldr	r2, [pc, #128]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002090:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	4a1c      	ldr	r2, [pc, #112]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800209c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020a0:	4a19      	ldr	r2, [pc, #100]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d016      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b2:	f7fe fd79 	bl	8000ba8 <HAL_GetTick>
 80020b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b8:	e00b      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7fe fd75 	bl	8000ba8 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d902      	bls.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	74fb      	strb	r3, [r7, #19]
            break;
 80020d0:	e006      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ec      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020e0:	7cfb      	ldrb	r3, [r7, #19]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10c      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020f6:	4904      	ldr	r1, [pc, #16]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020fe:	e009      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002100:	7cfb      	ldrb	r3, [r7, #19]
 8002102:	74bb      	strb	r3, [r7, #18]
 8002104:	e006      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002110:	7cfb      	ldrb	r3, [r7, #19]
 8002112:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002114:	7c7b      	ldrb	r3, [r7, #17]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d105      	bne.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211a:	4b9e      	ldr	r3, [pc, #632]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211e:	4a9d      	ldr	r2, [pc, #628]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002124:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002132:	4b98      	ldr	r3, [pc, #608]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002138:	f023 0203 	bic.w	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002140:	4994      	ldr	r1, [pc, #592]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002154:	4b8f      	ldr	r3, [pc, #572]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	f023 020c 	bic.w	r2, r3, #12
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002162:	498c      	ldr	r1, [pc, #560]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002176:	4b87      	ldr	r3, [pc, #540]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	4983      	ldr	r1, [pc, #524]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002198:	4b7e      	ldr	r3, [pc, #504]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	497b      	ldr	r1, [pc, #492]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021ba:	4b76      	ldr	r3, [pc, #472]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c8:	4972      	ldr	r1, [pc, #456]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021dc:	4b6d      	ldr	r3, [pc, #436]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ea:	496a      	ldr	r1, [pc, #424]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021fe:	4b65      	ldr	r3, [pc, #404]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002204:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	4961      	ldr	r1, [pc, #388]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002220:	4b5c      	ldr	r3, [pc, #368]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002226:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800222e:	4959      	ldr	r1, [pc, #356]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002242:	4b54      	ldr	r3, [pc, #336]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002248:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002250:	4950      	ldr	r1, [pc, #320]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002264:	4b4b      	ldr	r3, [pc, #300]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002272:	4948      	ldr	r1, [pc, #288]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002286:	4b43      	ldr	r3, [pc, #268]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	493f      	ldr	r1, [pc, #252]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d028      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022a8:	4b3a      	ldr	r3, [pc, #232]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022b6:	4937      	ldr	r1, [pc, #220]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022c6:	d106      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c8:	4b32      	ldr	r3, [pc, #200]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4a31      	ldr	r2, [pc, #196]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022d2:	60d3      	str	r3, [r2, #12]
 80022d4:	e011      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022de:	d10c      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3304      	adds	r3, #4
 80022e4:	2101      	movs	r1, #1
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f8c8 	bl	800247c <RCCEx_PLLSAI1_Config>
 80022ec:	4603      	mov	r3, r0
 80022ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d028      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002306:	4b23      	ldr	r3, [pc, #140]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002314:	491f      	ldr	r1, [pc, #124]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002320:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002324:	d106      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002326:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	4a1a      	ldr	r2, [pc, #104]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002330:	60d3      	str	r3, [r2, #12]
 8002332:	e011      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800233c:	d10c      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3304      	adds	r3, #4
 8002342:	2101      	movs	r1, #1
 8002344:	4618      	mov	r0, r3
 8002346:	f000 f899 	bl	800247c <RCCEx_PLLSAI1_Config>
 800234a:	4603      	mov	r3, r0
 800234c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800234e:	7cfb      	ldrb	r3, [r7, #19]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002354:	7cfb      	ldrb	r3, [r7, #19]
 8002356:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d02b      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002372:	4908      	ldr	r1, [pc, #32]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800237e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002382:	d109      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a02      	ldr	r2, [pc, #8]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800238e:	60d3      	str	r3, [r2, #12]
 8002390:	e014      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023a0:	d10c      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3304      	adds	r3, #4
 80023a6:	2101      	movs	r1, #1
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 f867 	bl	800247c <RCCEx_PLLSAI1_Config>
 80023ae:	4603      	mov	r3, r0
 80023b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023b2:	7cfb      	ldrb	r3, [r7, #19]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d02f      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023c8:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023d6:	4928      	ldr	r1, [pc, #160]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023e6:	d10d      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3304      	adds	r3, #4
 80023ec:	2102      	movs	r1, #2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f844 	bl	800247c <RCCEx_PLLSAI1_Config>
 80023f4:	4603      	mov	r3, r0
 80023f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d014      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023fe:	7cfb      	ldrb	r3, [r7, #19]
 8002400:	74bb      	strb	r3, [r7, #18]
 8002402:	e011      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800240c:	d10c      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3320      	adds	r3, #32
 8002412:	2102      	movs	r1, #2
 8002414:	4618      	mov	r0, r3
 8002416:	f000 f925 	bl	8002664 <RCCEx_PLLSAI2_Config>
 800241a:	4603      	mov	r3, r0
 800241c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800241e:	7cfb      	ldrb	r3, [r7, #19]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002424:	7cfb      	ldrb	r3, [r7, #19]
 8002426:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002434:	4b10      	ldr	r3, [pc, #64]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002442:	490d      	ldr	r1, [pc, #52]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00b      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002466:	4904      	ldr	r1, [pc, #16]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800246e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40021000 	.word	0x40021000

0800247c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800248a:	4b75      	ldr	r3, [pc, #468]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d018      	beq.n	80024c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002496:	4b72      	ldr	r3, [pc, #456]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f003 0203 	and.w	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d10d      	bne.n	80024c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
       ||
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d009      	beq.n	80024c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024ae:	4b6c      	ldr	r3, [pc, #432]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
       ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d047      	beq.n	8002552 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	73fb      	strb	r3, [r7, #15]
 80024c6:	e044      	b.n	8002552 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d018      	beq.n	8002502 <RCCEx_PLLSAI1_Config+0x86>
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d825      	bhi.n	8002520 <RCCEx_PLLSAI1_Config+0xa4>
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d002      	beq.n	80024de <RCCEx_PLLSAI1_Config+0x62>
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d009      	beq.n	80024f0 <RCCEx_PLLSAI1_Config+0x74>
 80024dc:	e020      	b.n	8002520 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024de:	4b60      	ldr	r3, [pc, #384]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d11d      	bne.n	8002526 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ee:	e01a      	b.n	8002526 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024f0:	4b5b      	ldr	r3, [pc, #364]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d116      	bne.n	800252a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002500:	e013      	b.n	800252a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002502:	4b57      	ldr	r3, [pc, #348]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10f      	bne.n	800252e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800250e:	4b54      	ldr	r3, [pc, #336]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800251e:	e006      	b.n	800252e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
      break;
 8002524:	e004      	b.n	8002530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002526:	bf00      	nop
 8002528:	e002      	b.n	8002530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800252a:	bf00      	nop
 800252c:	e000      	b.n	8002530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800252e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10d      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002536:	4b4a      	ldr	r3, [pc, #296]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6819      	ldr	r1, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	3b01      	subs	r3, #1
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	430b      	orrs	r3, r1
 800254c:	4944      	ldr	r1, [pc, #272]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800254e:	4313      	orrs	r3, r2
 8002550:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d17d      	bne.n	8002654 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002558:	4b41      	ldr	r3, [pc, #260]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a40      	ldr	r2, [pc, #256]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002564:	f7fe fb20 	bl	8000ba8 <HAL_GetTick>
 8002568:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800256a:	e009      	b.n	8002580 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800256c:	f7fe fb1c 	bl	8000ba8 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d902      	bls.n	8002580 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	73fb      	strb	r3, [r7, #15]
        break;
 800257e:	e005      	b.n	800258c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002580:	4b37      	ldr	r3, [pc, #220]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1ef      	bne.n	800256c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d160      	bne.n	8002654 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d111      	bne.n	80025bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002598:	4b31      	ldr	r3, [pc, #196]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6892      	ldr	r2, [r2, #8]
 80025a8:	0211      	lsls	r1, r2, #8
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68d2      	ldr	r2, [r2, #12]
 80025ae:	0912      	lsrs	r2, r2, #4
 80025b0:	0452      	lsls	r2, r2, #17
 80025b2:	430a      	orrs	r2, r1
 80025b4:	492a      	ldr	r1, [pc, #168]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	610b      	str	r3, [r1, #16]
 80025ba:	e027      	b.n	800260c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d112      	bne.n	80025e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025c2:	4b27      	ldr	r3, [pc, #156]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6892      	ldr	r2, [r2, #8]
 80025d2:	0211      	lsls	r1, r2, #8
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6912      	ldr	r2, [r2, #16]
 80025d8:	0852      	lsrs	r2, r2, #1
 80025da:	3a01      	subs	r2, #1
 80025dc:	0552      	lsls	r2, r2, #21
 80025de:	430a      	orrs	r2, r1
 80025e0:	491f      	ldr	r1, [pc, #124]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	610b      	str	r3, [r1, #16]
 80025e6:	e011      	b.n	800260c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025e8:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6892      	ldr	r2, [r2, #8]
 80025f8:	0211      	lsls	r1, r2, #8
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6952      	ldr	r2, [r2, #20]
 80025fe:	0852      	lsrs	r2, r2, #1
 8002600:	3a01      	subs	r2, #1
 8002602:	0652      	lsls	r2, r2, #25
 8002604:	430a      	orrs	r2, r1
 8002606:	4916      	ldr	r1, [pc, #88]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002608:	4313      	orrs	r3, r2
 800260a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a13      	ldr	r2, [pc, #76]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002612:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002616:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7fe fac6 	bl	8000ba8 <HAL_GetTick>
 800261c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800261e:	e009      	b.n	8002634 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002620:	f7fe fac2 	bl	8000ba8 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d902      	bls.n	8002634 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	73fb      	strb	r3, [r7, #15]
          break;
 8002632:	e005      	b.n	8002640 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002634:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ef      	beq.n	8002620 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	4904      	ldr	r1, [pc, #16]	; (8002660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002654:	7bfb      	ldrb	r3, [r7, #15]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000

08002664 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002672:	4b6a      	ldr	r3, [pc, #424]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d018      	beq.n	80026b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800267e:	4b67      	ldr	r3, [pc, #412]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f003 0203 	and.w	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d10d      	bne.n	80026aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
       ||
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002696:	4b61      	ldr	r3, [pc, #388]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
       ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d047      	beq.n	800273a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	73fb      	strb	r3, [r7, #15]
 80026ae:	e044      	b.n	800273a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d018      	beq.n	80026ea <RCCEx_PLLSAI2_Config+0x86>
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d825      	bhi.n	8002708 <RCCEx_PLLSAI2_Config+0xa4>
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d002      	beq.n	80026c6 <RCCEx_PLLSAI2_Config+0x62>
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d009      	beq.n	80026d8 <RCCEx_PLLSAI2_Config+0x74>
 80026c4:	e020      	b.n	8002708 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026c6:	4b55      	ldr	r3, [pc, #340]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d11d      	bne.n	800270e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d6:	e01a      	b.n	800270e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026d8:	4b50      	ldr	r3, [pc, #320]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d116      	bne.n	8002712 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e8:	e013      	b.n	8002712 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026ea:	4b4c      	ldr	r3, [pc, #304]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10f      	bne.n	8002716 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026f6:	4b49      	ldr	r3, [pc, #292]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002706:	e006      	b.n	8002716 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
      break;
 800270c:	e004      	b.n	8002718 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800270e:	bf00      	nop
 8002710:	e002      	b.n	8002718 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002712:	bf00      	nop
 8002714:	e000      	b.n	8002718 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002716:	bf00      	nop
    }

    if(status == HAL_OK)
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10d      	bne.n	800273a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800271e:	4b3f      	ldr	r3, [pc, #252]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6819      	ldr	r1, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	3b01      	subs	r3, #1
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	430b      	orrs	r3, r1
 8002734:	4939      	ldr	r1, [pc, #228]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002736:	4313      	orrs	r3, r2
 8002738:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d167      	bne.n	8002810 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002740:	4b36      	ldr	r3, [pc, #216]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a35      	ldr	r2, [pc, #212]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800274c:	f7fe fa2c 	bl	8000ba8 <HAL_GetTick>
 8002750:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002752:	e009      	b.n	8002768 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002754:	f7fe fa28 	bl	8000ba8 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d902      	bls.n	8002768 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	73fb      	strb	r3, [r7, #15]
        break;
 8002766:	e005      	b.n	8002774 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002768:	4b2c      	ldr	r3, [pc, #176]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1ef      	bne.n	8002754 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d14a      	bne.n	8002810 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d111      	bne.n	80027a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002780:	4b26      	ldr	r3, [pc, #152]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6892      	ldr	r2, [r2, #8]
 8002790:	0211      	lsls	r1, r2, #8
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68d2      	ldr	r2, [r2, #12]
 8002796:	0912      	lsrs	r2, r2, #4
 8002798:	0452      	lsls	r2, r2, #17
 800279a:	430a      	orrs	r2, r1
 800279c:	491f      	ldr	r1, [pc, #124]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	614b      	str	r3, [r1, #20]
 80027a2:	e011      	b.n	80027c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027a4:	4b1d      	ldr	r3, [pc, #116]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6892      	ldr	r2, [r2, #8]
 80027b4:	0211      	lsls	r1, r2, #8
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6912      	ldr	r2, [r2, #16]
 80027ba:	0852      	lsrs	r2, r2, #1
 80027bc:	3a01      	subs	r2, #1
 80027be:	0652      	lsls	r2, r2, #25
 80027c0:	430a      	orrs	r2, r1
 80027c2:	4916      	ldr	r1, [pc, #88]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027c8:	4b14      	ldr	r3, [pc, #80]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a13      	ldr	r2, [pc, #76]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7fe f9e8 	bl	8000ba8 <HAL_GetTick>
 80027d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027da:	e009      	b.n	80027f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027dc:	f7fe f9e4 	bl	8000ba8 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d902      	bls.n	80027f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	73fb      	strb	r3, [r7, #15]
          break;
 80027ee:	e005      	b.n	80027fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027f0:	4b0a      	ldr	r3, [pc, #40]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0ef      	beq.n	80027dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d106      	bne.n	8002810 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002804:	695a      	ldr	r2, [r3, #20]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	4904      	ldr	r1, [pc, #16]	; (800281c <RCCEx_PLLSAI2_Config+0x1b8>)
 800280c:	4313      	orrs	r3, r2
 800280e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000

08002820 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e040      	b.n	80028b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fd ffee 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2224      	movs	r2, #36	; 0x24
 800284c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0201 	bic.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f8c0 	bl	80029e4 <UART_SetConfig>
 8002864:	4603      	mov	r3, r0
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e022      	b.n	80028b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fb6c 	bl	8002f54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800288a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800289a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 fbf3 	bl	8003098 <UART_CheckIdleState>
 80028b2:	4603      	mov	r3, r0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08a      	sub	sp, #40	; 0x28
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	4613      	mov	r3, r2
 80028ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028d0:	2b20      	cmp	r3, #32
 80028d2:	f040 8082 	bne.w	80029da <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_UART_Transmit+0x26>
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e07a      	b.n	80029dc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_UART_Transmit+0x38>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e073      	b.n	80029dc <HAL_UART_Transmit+0x120>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2221      	movs	r2, #33	; 0x21
 8002908:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800290a:	f7fe f94d 	bl	8000ba8 <HAL_GetTick>
 800290e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	88fa      	ldrh	r2, [r7, #6]
 8002914:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	88fa      	ldrh	r2, [r7, #6]
 800291c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002928:	d108      	bne.n	800293c <HAL_UART_Transmit+0x80>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d104      	bne.n	800293c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	e003      	b.n	8002944 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002940:	2300      	movs	r3, #0
 8002942:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800294c:	e02d      	b.n	80029aa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2200      	movs	r2, #0
 8002956:	2180      	movs	r1, #128	; 0x80
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 fbe6 	bl	800312a <UART_WaitOnFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e039      	b.n	80029dc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10b      	bne.n	8002986 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	881a      	ldrh	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800297a:	b292      	uxth	r2, r2
 800297c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	3302      	adds	r3, #2
 8002982:	61bb      	str	r3, [r7, #24]
 8002984:	e008      	b.n	8002998 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	781a      	ldrb	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	b292      	uxth	r2, r2
 8002990:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3301      	adds	r3, #1
 8002996:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1cb      	bne.n	800294e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2200      	movs	r2, #0
 80029be:	2140      	movs	r1, #64	; 0x40
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 fbb2 	bl	800312a <UART_WaitOnFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e005      	b.n	80029dc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2220      	movs	r2, #32
 80029d4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e000      	b.n	80029dc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80029da:	2302      	movs	r3, #2
  }
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3720      	adds	r7, #32
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029e8:	b08a      	sub	sp, #40	; 0x28
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	431a      	orrs	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4ba4      	ldr	r3, [pc, #656]	; (8002ca4 <UART_SetConfig+0x2c0>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a99      	ldr	r2, [pc, #612]	; (8002ca8 <UART_SetConfig+0x2c4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d004      	beq.n	8002a50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a60:	430a      	orrs	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a90      	ldr	r2, [pc, #576]	; (8002cac <UART_SetConfig+0x2c8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d126      	bne.n	8002abc <UART_SetConfig+0xd8>
 8002a6e:	4b90      	ldr	r3, [pc, #576]	; (8002cb0 <UART_SetConfig+0x2cc>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d81b      	bhi.n	8002ab4 <UART_SetConfig+0xd0>
 8002a7c:	a201      	add	r2, pc, #4	; (adr r2, 8002a84 <UART_SetConfig+0xa0>)
 8002a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a82:	bf00      	nop
 8002a84:	08002a95 	.word	0x08002a95
 8002a88:	08002aa5 	.word	0x08002aa5
 8002a8c:	08002a9d 	.word	0x08002a9d
 8002a90:	08002aad 	.word	0x08002aad
 8002a94:	2301      	movs	r3, #1
 8002a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a9a:	e116      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aa2:	e112      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aaa:	e10e      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002aac:	2308      	movs	r3, #8
 8002aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ab2:	e10a      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002ab4:	2310      	movs	r3, #16
 8002ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aba:	e106      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a7c      	ldr	r2, [pc, #496]	; (8002cb4 <UART_SetConfig+0x2d0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d138      	bne.n	8002b38 <UART_SetConfig+0x154>
 8002ac6:	4b7a      	ldr	r3, [pc, #488]	; (8002cb0 <UART_SetConfig+0x2cc>)
 8002ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002acc:	f003 030c 	and.w	r3, r3, #12
 8002ad0:	2b0c      	cmp	r3, #12
 8002ad2:	d82d      	bhi.n	8002b30 <UART_SetConfig+0x14c>
 8002ad4:	a201      	add	r2, pc, #4	; (adr r2, 8002adc <UART_SetConfig+0xf8>)
 8002ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ada:	bf00      	nop
 8002adc:	08002b11 	.word	0x08002b11
 8002ae0:	08002b31 	.word	0x08002b31
 8002ae4:	08002b31 	.word	0x08002b31
 8002ae8:	08002b31 	.word	0x08002b31
 8002aec:	08002b21 	.word	0x08002b21
 8002af0:	08002b31 	.word	0x08002b31
 8002af4:	08002b31 	.word	0x08002b31
 8002af8:	08002b31 	.word	0x08002b31
 8002afc:	08002b19 	.word	0x08002b19
 8002b00:	08002b31 	.word	0x08002b31
 8002b04:	08002b31 	.word	0x08002b31
 8002b08:	08002b31 	.word	0x08002b31
 8002b0c:	08002b29 	.word	0x08002b29
 8002b10:	2300      	movs	r3, #0
 8002b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b16:	e0d8      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b1e:	e0d4      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002b20:	2304      	movs	r3, #4
 8002b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b26:	e0d0      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002b28:	2308      	movs	r3, #8
 8002b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b2e:	e0cc      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002b30:	2310      	movs	r3, #16
 8002b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b36:	e0c8      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a5e      	ldr	r2, [pc, #376]	; (8002cb8 <UART_SetConfig+0x2d4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d125      	bne.n	8002b8e <UART_SetConfig+0x1aa>
 8002b42:	4b5b      	ldr	r3, [pc, #364]	; (8002cb0 <UART_SetConfig+0x2cc>)
 8002b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b4c:	2b30      	cmp	r3, #48	; 0x30
 8002b4e:	d016      	beq.n	8002b7e <UART_SetConfig+0x19a>
 8002b50:	2b30      	cmp	r3, #48	; 0x30
 8002b52:	d818      	bhi.n	8002b86 <UART_SetConfig+0x1a2>
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d00a      	beq.n	8002b6e <UART_SetConfig+0x18a>
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d814      	bhi.n	8002b86 <UART_SetConfig+0x1a2>
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <UART_SetConfig+0x182>
 8002b60:	2b10      	cmp	r3, #16
 8002b62:	d008      	beq.n	8002b76 <UART_SetConfig+0x192>
 8002b64:	e00f      	b.n	8002b86 <UART_SetConfig+0x1a2>
 8002b66:	2300      	movs	r3, #0
 8002b68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b6c:	e0ad      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b74:	e0a9      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002b76:	2304      	movs	r3, #4
 8002b78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b7c:	e0a5      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002b7e:	2308      	movs	r3, #8
 8002b80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b84:	e0a1      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002b86:	2310      	movs	r3, #16
 8002b88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b8c:	e09d      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a4a      	ldr	r2, [pc, #296]	; (8002cbc <UART_SetConfig+0x2d8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d125      	bne.n	8002be4 <UART_SetConfig+0x200>
 8002b98:	4b45      	ldr	r3, [pc, #276]	; (8002cb0 <UART_SetConfig+0x2cc>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ba2:	2bc0      	cmp	r3, #192	; 0xc0
 8002ba4:	d016      	beq.n	8002bd4 <UART_SetConfig+0x1f0>
 8002ba6:	2bc0      	cmp	r3, #192	; 0xc0
 8002ba8:	d818      	bhi.n	8002bdc <UART_SetConfig+0x1f8>
 8002baa:	2b80      	cmp	r3, #128	; 0x80
 8002bac:	d00a      	beq.n	8002bc4 <UART_SetConfig+0x1e0>
 8002bae:	2b80      	cmp	r3, #128	; 0x80
 8002bb0:	d814      	bhi.n	8002bdc <UART_SetConfig+0x1f8>
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <UART_SetConfig+0x1d8>
 8002bb6:	2b40      	cmp	r3, #64	; 0x40
 8002bb8:	d008      	beq.n	8002bcc <UART_SetConfig+0x1e8>
 8002bba:	e00f      	b.n	8002bdc <UART_SetConfig+0x1f8>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bc2:	e082      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bca:	e07e      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002bcc:	2304      	movs	r3, #4
 8002bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bd2:	e07a      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002bd4:	2308      	movs	r3, #8
 8002bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bda:	e076      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002bdc:	2310      	movs	r3, #16
 8002bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002be2:	e072      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a35      	ldr	r2, [pc, #212]	; (8002cc0 <UART_SetConfig+0x2dc>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d12a      	bne.n	8002c44 <UART_SetConfig+0x260>
 8002bee:	4b30      	ldr	r3, [pc, #192]	; (8002cb0 <UART_SetConfig+0x2cc>)
 8002bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bfc:	d01a      	beq.n	8002c34 <UART_SetConfig+0x250>
 8002bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c02:	d81b      	bhi.n	8002c3c <UART_SetConfig+0x258>
 8002c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c08:	d00c      	beq.n	8002c24 <UART_SetConfig+0x240>
 8002c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c0e:	d815      	bhi.n	8002c3c <UART_SetConfig+0x258>
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <UART_SetConfig+0x238>
 8002c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c18:	d008      	beq.n	8002c2c <UART_SetConfig+0x248>
 8002c1a:	e00f      	b.n	8002c3c <UART_SetConfig+0x258>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c22:	e052      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002c24:	2302      	movs	r3, #2
 8002c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c2a:	e04e      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c32:	e04a      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002c34:	2308      	movs	r3, #8
 8002c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c3a:	e046      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002c3c:	2310      	movs	r3, #16
 8002c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c42:	e042      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a17      	ldr	r2, [pc, #92]	; (8002ca8 <UART_SetConfig+0x2c4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d13a      	bne.n	8002cc4 <UART_SetConfig+0x2e0>
 8002c4e:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <UART_SetConfig+0x2cc>)
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c5c:	d01a      	beq.n	8002c94 <UART_SetConfig+0x2b0>
 8002c5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c62:	d81b      	bhi.n	8002c9c <UART_SetConfig+0x2b8>
 8002c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c68:	d00c      	beq.n	8002c84 <UART_SetConfig+0x2a0>
 8002c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c6e:	d815      	bhi.n	8002c9c <UART_SetConfig+0x2b8>
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <UART_SetConfig+0x298>
 8002c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c78:	d008      	beq.n	8002c8c <UART_SetConfig+0x2a8>
 8002c7a:	e00f      	b.n	8002c9c <UART_SetConfig+0x2b8>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c82:	e022      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002c84:	2302      	movs	r3, #2
 8002c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c8a:	e01e      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002c8c:	2304      	movs	r3, #4
 8002c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c92:	e01a      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002c94:	2308      	movs	r3, #8
 8002c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c9a:	e016      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002c9c:	2310      	movs	r3, #16
 8002c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ca2:	e012      	b.n	8002cca <UART_SetConfig+0x2e6>
 8002ca4:	efff69f3 	.word	0xefff69f3
 8002ca8:	40008000 	.word	0x40008000
 8002cac:	40013800 	.word	0x40013800
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40004400 	.word	0x40004400
 8002cb8:	40004800 	.word	0x40004800
 8002cbc:	40004c00 	.word	0x40004c00
 8002cc0:	40005000 	.word	0x40005000
 8002cc4:	2310      	movs	r3, #16
 8002cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a9f      	ldr	r2, [pc, #636]	; (8002f4c <UART_SetConfig+0x568>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d17a      	bne.n	8002dca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d824      	bhi.n	8002d26 <UART_SetConfig+0x342>
 8002cdc:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <UART_SetConfig+0x300>)
 8002cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce2:	bf00      	nop
 8002ce4:	08002d09 	.word	0x08002d09
 8002ce8:	08002d27 	.word	0x08002d27
 8002cec:	08002d11 	.word	0x08002d11
 8002cf0:	08002d27 	.word	0x08002d27
 8002cf4:	08002d17 	.word	0x08002d17
 8002cf8:	08002d27 	.word	0x08002d27
 8002cfc:	08002d27 	.word	0x08002d27
 8002d00:	08002d27 	.word	0x08002d27
 8002d04:	08002d1f 	.word	0x08002d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d08:	f7ff f842 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8002d0c:	61f8      	str	r0, [r7, #28]
        break;
 8002d0e:	e010      	b.n	8002d32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d10:	4b8f      	ldr	r3, [pc, #572]	; (8002f50 <UART_SetConfig+0x56c>)
 8002d12:	61fb      	str	r3, [r7, #28]
        break;
 8002d14:	e00d      	b.n	8002d32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d16:	f7fe ffa3 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8002d1a:	61f8      	str	r0, [r7, #28]
        break;
 8002d1c:	e009      	b.n	8002d32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d22:	61fb      	str	r3, [r7, #28]
        break;
 8002d24:	e005      	b.n	8002d32 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002d30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80fb 	beq.w	8002f30 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d305      	bcc.n	8002d56 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d50:	69fa      	ldr	r2, [r7, #28]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d903      	bls.n	8002d5e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002d5c:	e0e8      	b.n	8002f30 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	2200      	movs	r2, #0
 8002d62:	461c      	mov	r4, r3
 8002d64:	4615      	mov	r5, r2
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	022b      	lsls	r3, r5, #8
 8002d70:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002d74:	0222      	lsls	r2, r4, #8
 8002d76:	68f9      	ldr	r1, [r7, #12]
 8002d78:	6849      	ldr	r1, [r1, #4]
 8002d7a:	0849      	lsrs	r1, r1, #1
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	4688      	mov	r8, r1
 8002d80:	4681      	mov	r9, r0
 8002d82:	eb12 0a08 	adds.w	sl, r2, r8
 8002d86:	eb43 0b09 	adc.w	fp, r3, r9
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d98:	4650      	mov	r0, sl
 8002d9a:	4659      	mov	r1, fp
 8002d9c:	f7fd fa68 	bl	8000270 <__aeabi_uldivmod>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4613      	mov	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dae:	d308      	bcc.n	8002dc2 <UART_SetConfig+0x3de>
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002db6:	d204      	bcs.n	8002dc2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	60da      	str	r2, [r3, #12]
 8002dc0:	e0b6      	b.n	8002f30 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002dc8:	e0b2      	b.n	8002f30 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd2:	d15e      	bne.n	8002e92 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d828      	bhi.n	8002e2e <UART_SetConfig+0x44a>
 8002ddc:	a201      	add	r2, pc, #4	; (adr r2, 8002de4 <UART_SetConfig+0x400>)
 8002dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de2:	bf00      	nop
 8002de4:	08002e09 	.word	0x08002e09
 8002de8:	08002e11 	.word	0x08002e11
 8002dec:	08002e19 	.word	0x08002e19
 8002df0:	08002e2f 	.word	0x08002e2f
 8002df4:	08002e1f 	.word	0x08002e1f
 8002df8:	08002e2f 	.word	0x08002e2f
 8002dfc:	08002e2f 	.word	0x08002e2f
 8002e00:	08002e2f 	.word	0x08002e2f
 8002e04:	08002e27 	.word	0x08002e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e08:	f7fe ffc2 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8002e0c:	61f8      	str	r0, [r7, #28]
        break;
 8002e0e:	e014      	b.n	8002e3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e10:	f7fe ffd4 	bl	8001dbc <HAL_RCC_GetPCLK2Freq>
 8002e14:	61f8      	str	r0, [r7, #28]
        break;
 8002e16:	e010      	b.n	8002e3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e18:	4b4d      	ldr	r3, [pc, #308]	; (8002f50 <UART_SetConfig+0x56c>)
 8002e1a:	61fb      	str	r3, [r7, #28]
        break;
 8002e1c:	e00d      	b.n	8002e3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e1e:	f7fe ff1f 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8002e22:	61f8      	str	r0, [r7, #28]
        break;
 8002e24:	e009      	b.n	8002e3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e2a:	61fb      	str	r3, [r7, #28]
        break;
 8002e2c:	e005      	b.n	8002e3a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d077      	beq.n	8002f30 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	005a      	lsls	r2, r3, #1
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	085b      	lsrs	r3, r3, #1
 8002e4a:	441a      	add	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	2b0f      	cmp	r3, #15
 8002e5a:	d916      	bls.n	8002e8a <UART_SetConfig+0x4a6>
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e62:	d212      	bcs.n	8002e8a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	f023 030f 	bic.w	r3, r3, #15
 8002e6c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	085b      	lsrs	r3, r3, #1
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	8afb      	ldrh	r3, [r7, #22]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	8afa      	ldrh	r2, [r7, #22]
 8002e86:	60da      	str	r2, [r3, #12]
 8002e88:	e052      	b.n	8002f30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e90:	e04e      	b.n	8002f30 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d827      	bhi.n	8002eea <UART_SetConfig+0x506>
 8002e9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <UART_SetConfig+0x4bc>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002ec5 	.word	0x08002ec5
 8002ea4:	08002ecd 	.word	0x08002ecd
 8002ea8:	08002ed5 	.word	0x08002ed5
 8002eac:	08002eeb 	.word	0x08002eeb
 8002eb0:	08002edb 	.word	0x08002edb
 8002eb4:	08002eeb 	.word	0x08002eeb
 8002eb8:	08002eeb 	.word	0x08002eeb
 8002ebc:	08002eeb 	.word	0x08002eeb
 8002ec0:	08002ee3 	.word	0x08002ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ec4:	f7fe ff64 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8002ec8:	61f8      	str	r0, [r7, #28]
        break;
 8002eca:	e014      	b.n	8002ef6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ecc:	f7fe ff76 	bl	8001dbc <HAL_RCC_GetPCLK2Freq>
 8002ed0:	61f8      	str	r0, [r7, #28]
        break;
 8002ed2:	e010      	b.n	8002ef6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ed4:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <UART_SetConfig+0x56c>)
 8002ed6:	61fb      	str	r3, [r7, #28]
        break;
 8002ed8:	e00d      	b.n	8002ef6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eda:	f7fe fec1 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8002ede:	61f8      	str	r0, [r7, #28]
        break;
 8002ee0:	e009      	b.n	8002ef6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ee6:	61fb      	str	r3, [r7, #28]
        break;
 8002ee8:	e005      	b.n	8002ef6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002ef4:	bf00      	nop
    }

    if (pclk != 0U)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d019      	beq.n	8002f30 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	085a      	lsrs	r2, r3, #1
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	441a      	add	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2b0f      	cmp	r3, #15
 8002f14:	d909      	bls.n	8002f2a <UART_SetConfig+0x546>
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1c:	d205      	bcs.n	8002f2a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60da      	str	r2, [r3, #12]
 8002f28:	e002      	b.n	8002f30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3728      	adds	r7, #40	; 0x28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40008000 	.word	0x40008000
 8002f50:	00f42400 	.word	0x00f42400

08002f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00a      	beq.n	8002fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	f003 0320 	and.w	r3, r3, #32
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01a      	beq.n	800306a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003052:	d10a      	bne.n	800306a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	605a      	str	r2, [r3, #4]
  }
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af02      	add	r7, sp, #8
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030a8:	f7fd fd7e 	bl	8000ba8 <HAL_GetTick>
 80030ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d10e      	bne.n	80030da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f82d 	bl	800312a <UART_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e023      	b.n	8003122 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d10e      	bne.n	8003106 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f817 	bl	800312a <UART_WaitOnFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e00d      	b.n	8003122 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b09c      	sub	sp, #112	; 0x70
 800312e:	af00      	add	r7, sp, #0
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	603b      	str	r3, [r7, #0]
 8003136:	4613      	mov	r3, r2
 8003138:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800313a:	e0a5      	b.n	8003288 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	f000 80a1 	beq.w	8003288 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003146:	f7fd fd2f 	bl	8000ba8 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003152:	429a      	cmp	r2, r3
 8003154:	d302      	bcc.n	800315c <UART_WaitOnFlagUntilTimeout+0x32>
 8003156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003158:	2b00      	cmp	r3, #0
 800315a:	d13e      	bne.n	80031da <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003164:	e853 3f00 	ldrex	r3, [r3]
 8003168:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800316a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800316c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003170:	667b      	str	r3, [r7, #100]	; 0x64
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800317a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800317c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003180:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003182:	e841 2300 	strex	r3, r2, [r1]
 8003186:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1e6      	bne.n	800315c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3308      	adds	r3, #8
 8003194:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003198:	e853 3f00 	ldrex	r3, [r3]
 800319c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	663b      	str	r3, [r7, #96]	; 0x60
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3308      	adds	r3, #8
 80031ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80031b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80031b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031b6:	e841 2300 	strex	r3, r2, [r1]
 80031ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80031bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1e5      	bne.n	800318e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e067      	b.n	80032aa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d04f      	beq.n	8003288 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f6:	d147      	bne.n	8003288 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003200:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	e853 3f00 	ldrex	r3, [r3]
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003216:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003220:	637b      	str	r3, [r7, #52]	; 0x34
 8003222:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003224:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003226:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003228:	e841 2300 	strex	r3, r2, [r1]
 800322c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800322e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1e6      	bne.n	8003202 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3308      	adds	r3, #8
 800323a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	e853 3f00 	ldrex	r3, [r3]
 8003242:	613b      	str	r3, [r7, #16]
   return(result);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	66bb      	str	r3, [r7, #104]	; 0x68
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3308      	adds	r3, #8
 8003252:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003254:	623a      	str	r2, [r7, #32]
 8003256:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	69f9      	ldr	r1, [r7, #28]
 800325a:	6a3a      	ldr	r2, [r7, #32]
 800325c:	e841 2300 	strex	r3, r2, [r1]
 8003260:	61bb      	str	r3, [r7, #24]
   return(result);
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e5      	bne.n	8003234 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2220      	movs	r2, #32
 8003272:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e010      	b.n	80032aa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69da      	ldr	r2, [r3, #28]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4013      	ands	r3, r2
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	429a      	cmp	r2, r3
 8003296:	bf0c      	ite	eq
 8003298:	2301      	moveq	r3, #1
 800329a:	2300      	movne	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	461a      	mov	r2, r3
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	f43f af4a 	beq.w	800313c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3770      	adds	r7, #112	; 0x70
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <__errno>:
 80032b4:	4b01      	ldr	r3, [pc, #4]	; (80032bc <__errno+0x8>)
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	2000000c 	.word	0x2000000c

080032c0 <__libc_init_array>:
 80032c0:	b570      	push	{r4, r5, r6, lr}
 80032c2:	4d0d      	ldr	r5, [pc, #52]	; (80032f8 <__libc_init_array+0x38>)
 80032c4:	4c0d      	ldr	r4, [pc, #52]	; (80032fc <__libc_init_array+0x3c>)
 80032c6:	1b64      	subs	r4, r4, r5
 80032c8:	10a4      	asrs	r4, r4, #2
 80032ca:	2600      	movs	r6, #0
 80032cc:	42a6      	cmp	r6, r4
 80032ce:	d109      	bne.n	80032e4 <__libc_init_array+0x24>
 80032d0:	4d0b      	ldr	r5, [pc, #44]	; (8003300 <__libc_init_array+0x40>)
 80032d2:	4c0c      	ldr	r4, [pc, #48]	; (8003304 <__libc_init_array+0x44>)
 80032d4:	f000 ffae 	bl	8004234 <_init>
 80032d8:	1b64      	subs	r4, r4, r5
 80032da:	10a4      	asrs	r4, r4, #2
 80032dc:	2600      	movs	r6, #0
 80032de:	42a6      	cmp	r6, r4
 80032e0:	d105      	bne.n	80032ee <__libc_init_array+0x2e>
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
 80032e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e8:	4798      	blx	r3
 80032ea:	3601      	adds	r6, #1
 80032ec:	e7ee      	b.n	80032cc <__libc_init_array+0xc>
 80032ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80032f2:	4798      	blx	r3
 80032f4:	3601      	adds	r6, #1
 80032f6:	e7f2      	b.n	80032de <__libc_init_array+0x1e>
 80032f8:	08004348 	.word	0x08004348
 80032fc:	08004348 	.word	0x08004348
 8003300:	08004348 	.word	0x08004348
 8003304:	0800434c 	.word	0x0800434c

08003308 <memset>:
 8003308:	4402      	add	r2, r0
 800330a:	4603      	mov	r3, r0
 800330c:	4293      	cmp	r3, r2
 800330e:	d100      	bne.n	8003312 <memset+0xa>
 8003310:	4770      	bx	lr
 8003312:	f803 1b01 	strb.w	r1, [r3], #1
 8003316:	e7f9      	b.n	800330c <memset+0x4>

08003318 <iprintf>:
 8003318:	b40f      	push	{r0, r1, r2, r3}
 800331a:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <iprintf+0x2c>)
 800331c:	b513      	push	{r0, r1, r4, lr}
 800331e:	681c      	ldr	r4, [r3, #0]
 8003320:	b124      	cbz	r4, 800332c <iprintf+0x14>
 8003322:	69a3      	ldr	r3, [r4, #24]
 8003324:	b913      	cbnz	r3, 800332c <iprintf+0x14>
 8003326:	4620      	mov	r0, r4
 8003328:	f000 f866 	bl	80033f8 <__sinit>
 800332c:	ab05      	add	r3, sp, #20
 800332e:	9a04      	ldr	r2, [sp, #16]
 8003330:	68a1      	ldr	r1, [r4, #8]
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	4620      	mov	r0, r4
 8003336:	f000 f9bd 	bl	80036b4 <_vfiprintf_r>
 800333a:	b002      	add	sp, #8
 800333c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003340:	b004      	add	sp, #16
 8003342:	4770      	bx	lr
 8003344:	2000000c 	.word	0x2000000c

08003348 <std>:
 8003348:	2300      	movs	r3, #0
 800334a:	b510      	push	{r4, lr}
 800334c:	4604      	mov	r4, r0
 800334e:	e9c0 3300 	strd	r3, r3, [r0]
 8003352:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003356:	6083      	str	r3, [r0, #8]
 8003358:	8181      	strh	r1, [r0, #12]
 800335a:	6643      	str	r3, [r0, #100]	; 0x64
 800335c:	81c2      	strh	r2, [r0, #14]
 800335e:	6183      	str	r3, [r0, #24]
 8003360:	4619      	mov	r1, r3
 8003362:	2208      	movs	r2, #8
 8003364:	305c      	adds	r0, #92	; 0x5c
 8003366:	f7ff ffcf 	bl	8003308 <memset>
 800336a:	4b05      	ldr	r3, [pc, #20]	; (8003380 <std+0x38>)
 800336c:	6263      	str	r3, [r4, #36]	; 0x24
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <std+0x3c>)
 8003370:	62a3      	str	r3, [r4, #40]	; 0x28
 8003372:	4b05      	ldr	r3, [pc, #20]	; (8003388 <std+0x40>)
 8003374:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <std+0x44>)
 8003378:	6224      	str	r4, [r4, #32]
 800337a:	6323      	str	r3, [r4, #48]	; 0x30
 800337c:	bd10      	pop	{r4, pc}
 800337e:	bf00      	nop
 8003380:	08003c5d 	.word	0x08003c5d
 8003384:	08003c7f 	.word	0x08003c7f
 8003388:	08003cb7 	.word	0x08003cb7
 800338c:	08003cdb 	.word	0x08003cdb

08003390 <_cleanup_r>:
 8003390:	4901      	ldr	r1, [pc, #4]	; (8003398 <_cleanup_r+0x8>)
 8003392:	f000 b8af 	b.w	80034f4 <_fwalk_reent>
 8003396:	bf00      	nop
 8003398:	08003fb5 	.word	0x08003fb5

0800339c <__sfmoreglue>:
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	2268      	movs	r2, #104	; 0x68
 80033a0:	1e4d      	subs	r5, r1, #1
 80033a2:	4355      	muls	r5, r2
 80033a4:	460e      	mov	r6, r1
 80033a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80033aa:	f000 f8e5 	bl	8003578 <_malloc_r>
 80033ae:	4604      	mov	r4, r0
 80033b0:	b140      	cbz	r0, 80033c4 <__sfmoreglue+0x28>
 80033b2:	2100      	movs	r1, #0
 80033b4:	e9c0 1600 	strd	r1, r6, [r0]
 80033b8:	300c      	adds	r0, #12
 80033ba:	60a0      	str	r0, [r4, #8]
 80033bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80033c0:	f7ff ffa2 	bl	8003308 <memset>
 80033c4:	4620      	mov	r0, r4
 80033c6:	bd70      	pop	{r4, r5, r6, pc}

080033c8 <__sfp_lock_acquire>:
 80033c8:	4801      	ldr	r0, [pc, #4]	; (80033d0 <__sfp_lock_acquire+0x8>)
 80033ca:	f000 b8b3 	b.w	8003534 <__retarget_lock_acquire_recursive>
 80033ce:	bf00      	nop
 80033d0:	2000011d 	.word	0x2000011d

080033d4 <__sfp_lock_release>:
 80033d4:	4801      	ldr	r0, [pc, #4]	; (80033dc <__sfp_lock_release+0x8>)
 80033d6:	f000 b8ae 	b.w	8003536 <__retarget_lock_release_recursive>
 80033da:	bf00      	nop
 80033dc:	2000011d 	.word	0x2000011d

080033e0 <__sinit_lock_acquire>:
 80033e0:	4801      	ldr	r0, [pc, #4]	; (80033e8 <__sinit_lock_acquire+0x8>)
 80033e2:	f000 b8a7 	b.w	8003534 <__retarget_lock_acquire_recursive>
 80033e6:	bf00      	nop
 80033e8:	2000011e 	.word	0x2000011e

080033ec <__sinit_lock_release>:
 80033ec:	4801      	ldr	r0, [pc, #4]	; (80033f4 <__sinit_lock_release+0x8>)
 80033ee:	f000 b8a2 	b.w	8003536 <__retarget_lock_release_recursive>
 80033f2:	bf00      	nop
 80033f4:	2000011e 	.word	0x2000011e

080033f8 <__sinit>:
 80033f8:	b510      	push	{r4, lr}
 80033fa:	4604      	mov	r4, r0
 80033fc:	f7ff fff0 	bl	80033e0 <__sinit_lock_acquire>
 8003400:	69a3      	ldr	r3, [r4, #24]
 8003402:	b11b      	cbz	r3, 800340c <__sinit+0x14>
 8003404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003408:	f7ff bff0 	b.w	80033ec <__sinit_lock_release>
 800340c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003410:	6523      	str	r3, [r4, #80]	; 0x50
 8003412:	4b13      	ldr	r3, [pc, #76]	; (8003460 <__sinit+0x68>)
 8003414:	4a13      	ldr	r2, [pc, #76]	; (8003464 <__sinit+0x6c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	62a2      	str	r2, [r4, #40]	; 0x28
 800341a:	42a3      	cmp	r3, r4
 800341c:	bf04      	itt	eq
 800341e:	2301      	moveq	r3, #1
 8003420:	61a3      	streq	r3, [r4, #24]
 8003422:	4620      	mov	r0, r4
 8003424:	f000 f820 	bl	8003468 <__sfp>
 8003428:	6060      	str	r0, [r4, #4]
 800342a:	4620      	mov	r0, r4
 800342c:	f000 f81c 	bl	8003468 <__sfp>
 8003430:	60a0      	str	r0, [r4, #8]
 8003432:	4620      	mov	r0, r4
 8003434:	f000 f818 	bl	8003468 <__sfp>
 8003438:	2200      	movs	r2, #0
 800343a:	60e0      	str	r0, [r4, #12]
 800343c:	2104      	movs	r1, #4
 800343e:	6860      	ldr	r0, [r4, #4]
 8003440:	f7ff ff82 	bl	8003348 <std>
 8003444:	68a0      	ldr	r0, [r4, #8]
 8003446:	2201      	movs	r2, #1
 8003448:	2109      	movs	r1, #9
 800344a:	f7ff ff7d 	bl	8003348 <std>
 800344e:	68e0      	ldr	r0, [r4, #12]
 8003450:	2202      	movs	r2, #2
 8003452:	2112      	movs	r1, #18
 8003454:	f7ff ff78 	bl	8003348 <std>
 8003458:	2301      	movs	r3, #1
 800345a:	61a3      	str	r3, [r4, #24]
 800345c:	e7d2      	b.n	8003404 <__sinit+0xc>
 800345e:	bf00      	nop
 8003460:	080042a8 	.word	0x080042a8
 8003464:	08003391 	.word	0x08003391

08003468 <__sfp>:
 8003468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346a:	4607      	mov	r7, r0
 800346c:	f7ff ffac 	bl	80033c8 <__sfp_lock_acquire>
 8003470:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <__sfp+0x84>)
 8003472:	681e      	ldr	r6, [r3, #0]
 8003474:	69b3      	ldr	r3, [r6, #24]
 8003476:	b913      	cbnz	r3, 800347e <__sfp+0x16>
 8003478:	4630      	mov	r0, r6
 800347a:	f7ff ffbd 	bl	80033f8 <__sinit>
 800347e:	3648      	adds	r6, #72	; 0x48
 8003480:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003484:	3b01      	subs	r3, #1
 8003486:	d503      	bpl.n	8003490 <__sfp+0x28>
 8003488:	6833      	ldr	r3, [r6, #0]
 800348a:	b30b      	cbz	r3, 80034d0 <__sfp+0x68>
 800348c:	6836      	ldr	r6, [r6, #0]
 800348e:	e7f7      	b.n	8003480 <__sfp+0x18>
 8003490:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003494:	b9d5      	cbnz	r5, 80034cc <__sfp+0x64>
 8003496:	4b16      	ldr	r3, [pc, #88]	; (80034f0 <__sfp+0x88>)
 8003498:	60e3      	str	r3, [r4, #12]
 800349a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800349e:	6665      	str	r5, [r4, #100]	; 0x64
 80034a0:	f000 f847 	bl	8003532 <__retarget_lock_init_recursive>
 80034a4:	f7ff ff96 	bl	80033d4 <__sfp_lock_release>
 80034a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80034ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80034b0:	6025      	str	r5, [r4, #0]
 80034b2:	61a5      	str	r5, [r4, #24]
 80034b4:	2208      	movs	r2, #8
 80034b6:	4629      	mov	r1, r5
 80034b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80034bc:	f7ff ff24 	bl	8003308 <memset>
 80034c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80034c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80034c8:	4620      	mov	r0, r4
 80034ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034cc:	3468      	adds	r4, #104	; 0x68
 80034ce:	e7d9      	b.n	8003484 <__sfp+0x1c>
 80034d0:	2104      	movs	r1, #4
 80034d2:	4638      	mov	r0, r7
 80034d4:	f7ff ff62 	bl	800339c <__sfmoreglue>
 80034d8:	4604      	mov	r4, r0
 80034da:	6030      	str	r0, [r6, #0]
 80034dc:	2800      	cmp	r0, #0
 80034de:	d1d5      	bne.n	800348c <__sfp+0x24>
 80034e0:	f7ff ff78 	bl	80033d4 <__sfp_lock_release>
 80034e4:	230c      	movs	r3, #12
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	e7ee      	b.n	80034c8 <__sfp+0x60>
 80034ea:	bf00      	nop
 80034ec:	080042a8 	.word	0x080042a8
 80034f0:	ffff0001 	.word	0xffff0001

080034f4 <_fwalk_reent>:
 80034f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034f8:	4606      	mov	r6, r0
 80034fa:	4688      	mov	r8, r1
 80034fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003500:	2700      	movs	r7, #0
 8003502:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003506:	f1b9 0901 	subs.w	r9, r9, #1
 800350a:	d505      	bpl.n	8003518 <_fwalk_reent+0x24>
 800350c:	6824      	ldr	r4, [r4, #0]
 800350e:	2c00      	cmp	r4, #0
 8003510:	d1f7      	bne.n	8003502 <_fwalk_reent+0xe>
 8003512:	4638      	mov	r0, r7
 8003514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003518:	89ab      	ldrh	r3, [r5, #12]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d907      	bls.n	800352e <_fwalk_reent+0x3a>
 800351e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003522:	3301      	adds	r3, #1
 8003524:	d003      	beq.n	800352e <_fwalk_reent+0x3a>
 8003526:	4629      	mov	r1, r5
 8003528:	4630      	mov	r0, r6
 800352a:	47c0      	blx	r8
 800352c:	4307      	orrs	r7, r0
 800352e:	3568      	adds	r5, #104	; 0x68
 8003530:	e7e9      	b.n	8003506 <_fwalk_reent+0x12>

08003532 <__retarget_lock_init_recursive>:
 8003532:	4770      	bx	lr

08003534 <__retarget_lock_acquire_recursive>:
 8003534:	4770      	bx	lr

08003536 <__retarget_lock_release_recursive>:
 8003536:	4770      	bx	lr

08003538 <sbrk_aligned>:
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	4e0e      	ldr	r6, [pc, #56]	; (8003574 <sbrk_aligned+0x3c>)
 800353c:	460c      	mov	r4, r1
 800353e:	6831      	ldr	r1, [r6, #0]
 8003540:	4605      	mov	r5, r0
 8003542:	b911      	cbnz	r1, 800354a <sbrk_aligned+0x12>
 8003544:	f000 fb7a 	bl	8003c3c <_sbrk_r>
 8003548:	6030      	str	r0, [r6, #0]
 800354a:	4621      	mov	r1, r4
 800354c:	4628      	mov	r0, r5
 800354e:	f000 fb75 	bl	8003c3c <_sbrk_r>
 8003552:	1c43      	adds	r3, r0, #1
 8003554:	d00a      	beq.n	800356c <sbrk_aligned+0x34>
 8003556:	1cc4      	adds	r4, r0, #3
 8003558:	f024 0403 	bic.w	r4, r4, #3
 800355c:	42a0      	cmp	r0, r4
 800355e:	d007      	beq.n	8003570 <sbrk_aligned+0x38>
 8003560:	1a21      	subs	r1, r4, r0
 8003562:	4628      	mov	r0, r5
 8003564:	f000 fb6a 	bl	8003c3c <_sbrk_r>
 8003568:	3001      	adds	r0, #1
 800356a:	d101      	bne.n	8003570 <sbrk_aligned+0x38>
 800356c:	f04f 34ff 	mov.w	r4, #4294967295
 8003570:	4620      	mov	r0, r4
 8003572:	bd70      	pop	{r4, r5, r6, pc}
 8003574:	20000124 	.word	0x20000124

08003578 <_malloc_r>:
 8003578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800357c:	1ccd      	adds	r5, r1, #3
 800357e:	f025 0503 	bic.w	r5, r5, #3
 8003582:	3508      	adds	r5, #8
 8003584:	2d0c      	cmp	r5, #12
 8003586:	bf38      	it	cc
 8003588:	250c      	movcc	r5, #12
 800358a:	2d00      	cmp	r5, #0
 800358c:	4607      	mov	r7, r0
 800358e:	db01      	blt.n	8003594 <_malloc_r+0x1c>
 8003590:	42a9      	cmp	r1, r5
 8003592:	d905      	bls.n	80035a0 <_malloc_r+0x28>
 8003594:	230c      	movs	r3, #12
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	2600      	movs	r6, #0
 800359a:	4630      	mov	r0, r6
 800359c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035a0:	4e2e      	ldr	r6, [pc, #184]	; (800365c <_malloc_r+0xe4>)
 80035a2:	f000 fdbb 	bl	800411c <__malloc_lock>
 80035a6:	6833      	ldr	r3, [r6, #0]
 80035a8:	461c      	mov	r4, r3
 80035aa:	bb34      	cbnz	r4, 80035fa <_malloc_r+0x82>
 80035ac:	4629      	mov	r1, r5
 80035ae:	4638      	mov	r0, r7
 80035b0:	f7ff ffc2 	bl	8003538 <sbrk_aligned>
 80035b4:	1c43      	adds	r3, r0, #1
 80035b6:	4604      	mov	r4, r0
 80035b8:	d14d      	bne.n	8003656 <_malloc_r+0xde>
 80035ba:	6834      	ldr	r4, [r6, #0]
 80035bc:	4626      	mov	r6, r4
 80035be:	2e00      	cmp	r6, #0
 80035c0:	d140      	bne.n	8003644 <_malloc_r+0xcc>
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	4631      	mov	r1, r6
 80035c6:	4638      	mov	r0, r7
 80035c8:	eb04 0803 	add.w	r8, r4, r3
 80035cc:	f000 fb36 	bl	8003c3c <_sbrk_r>
 80035d0:	4580      	cmp	r8, r0
 80035d2:	d13a      	bne.n	800364a <_malloc_r+0xd2>
 80035d4:	6821      	ldr	r1, [r4, #0]
 80035d6:	3503      	adds	r5, #3
 80035d8:	1a6d      	subs	r5, r5, r1
 80035da:	f025 0503 	bic.w	r5, r5, #3
 80035de:	3508      	adds	r5, #8
 80035e0:	2d0c      	cmp	r5, #12
 80035e2:	bf38      	it	cc
 80035e4:	250c      	movcc	r5, #12
 80035e6:	4629      	mov	r1, r5
 80035e8:	4638      	mov	r0, r7
 80035ea:	f7ff ffa5 	bl	8003538 <sbrk_aligned>
 80035ee:	3001      	adds	r0, #1
 80035f0:	d02b      	beq.n	800364a <_malloc_r+0xd2>
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	442b      	add	r3, r5
 80035f6:	6023      	str	r3, [r4, #0]
 80035f8:	e00e      	b.n	8003618 <_malloc_r+0xa0>
 80035fa:	6822      	ldr	r2, [r4, #0]
 80035fc:	1b52      	subs	r2, r2, r5
 80035fe:	d41e      	bmi.n	800363e <_malloc_r+0xc6>
 8003600:	2a0b      	cmp	r2, #11
 8003602:	d916      	bls.n	8003632 <_malloc_r+0xba>
 8003604:	1961      	adds	r1, r4, r5
 8003606:	42a3      	cmp	r3, r4
 8003608:	6025      	str	r5, [r4, #0]
 800360a:	bf18      	it	ne
 800360c:	6059      	strne	r1, [r3, #4]
 800360e:	6863      	ldr	r3, [r4, #4]
 8003610:	bf08      	it	eq
 8003612:	6031      	streq	r1, [r6, #0]
 8003614:	5162      	str	r2, [r4, r5]
 8003616:	604b      	str	r3, [r1, #4]
 8003618:	4638      	mov	r0, r7
 800361a:	f104 060b 	add.w	r6, r4, #11
 800361e:	f000 fd83 	bl	8004128 <__malloc_unlock>
 8003622:	f026 0607 	bic.w	r6, r6, #7
 8003626:	1d23      	adds	r3, r4, #4
 8003628:	1af2      	subs	r2, r6, r3
 800362a:	d0b6      	beq.n	800359a <_malloc_r+0x22>
 800362c:	1b9b      	subs	r3, r3, r6
 800362e:	50a3      	str	r3, [r4, r2]
 8003630:	e7b3      	b.n	800359a <_malloc_r+0x22>
 8003632:	6862      	ldr	r2, [r4, #4]
 8003634:	42a3      	cmp	r3, r4
 8003636:	bf0c      	ite	eq
 8003638:	6032      	streq	r2, [r6, #0]
 800363a:	605a      	strne	r2, [r3, #4]
 800363c:	e7ec      	b.n	8003618 <_malloc_r+0xa0>
 800363e:	4623      	mov	r3, r4
 8003640:	6864      	ldr	r4, [r4, #4]
 8003642:	e7b2      	b.n	80035aa <_malloc_r+0x32>
 8003644:	4634      	mov	r4, r6
 8003646:	6876      	ldr	r6, [r6, #4]
 8003648:	e7b9      	b.n	80035be <_malloc_r+0x46>
 800364a:	230c      	movs	r3, #12
 800364c:	603b      	str	r3, [r7, #0]
 800364e:	4638      	mov	r0, r7
 8003650:	f000 fd6a 	bl	8004128 <__malloc_unlock>
 8003654:	e7a1      	b.n	800359a <_malloc_r+0x22>
 8003656:	6025      	str	r5, [r4, #0]
 8003658:	e7de      	b.n	8003618 <_malloc_r+0xa0>
 800365a:	bf00      	nop
 800365c:	20000120 	.word	0x20000120

08003660 <__sfputc_r>:
 8003660:	6893      	ldr	r3, [r2, #8]
 8003662:	3b01      	subs	r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	b410      	push	{r4}
 8003668:	6093      	str	r3, [r2, #8]
 800366a:	da08      	bge.n	800367e <__sfputc_r+0x1e>
 800366c:	6994      	ldr	r4, [r2, #24]
 800366e:	42a3      	cmp	r3, r4
 8003670:	db01      	blt.n	8003676 <__sfputc_r+0x16>
 8003672:	290a      	cmp	r1, #10
 8003674:	d103      	bne.n	800367e <__sfputc_r+0x1e>
 8003676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800367a:	f000 bb33 	b.w	8003ce4 <__swbuf_r>
 800367e:	6813      	ldr	r3, [r2, #0]
 8003680:	1c58      	adds	r0, r3, #1
 8003682:	6010      	str	r0, [r2, #0]
 8003684:	7019      	strb	r1, [r3, #0]
 8003686:	4608      	mov	r0, r1
 8003688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800368c:	4770      	bx	lr

0800368e <__sfputs_r>:
 800368e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003690:	4606      	mov	r6, r0
 8003692:	460f      	mov	r7, r1
 8003694:	4614      	mov	r4, r2
 8003696:	18d5      	adds	r5, r2, r3
 8003698:	42ac      	cmp	r4, r5
 800369a:	d101      	bne.n	80036a0 <__sfputs_r+0x12>
 800369c:	2000      	movs	r0, #0
 800369e:	e007      	b.n	80036b0 <__sfputs_r+0x22>
 80036a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036a4:	463a      	mov	r2, r7
 80036a6:	4630      	mov	r0, r6
 80036a8:	f7ff ffda 	bl	8003660 <__sfputc_r>
 80036ac:	1c43      	adds	r3, r0, #1
 80036ae:	d1f3      	bne.n	8003698 <__sfputs_r+0xa>
 80036b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036b4 <_vfiprintf_r>:
 80036b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b8:	460d      	mov	r5, r1
 80036ba:	b09d      	sub	sp, #116	; 0x74
 80036bc:	4614      	mov	r4, r2
 80036be:	4698      	mov	r8, r3
 80036c0:	4606      	mov	r6, r0
 80036c2:	b118      	cbz	r0, 80036cc <_vfiprintf_r+0x18>
 80036c4:	6983      	ldr	r3, [r0, #24]
 80036c6:	b90b      	cbnz	r3, 80036cc <_vfiprintf_r+0x18>
 80036c8:	f7ff fe96 	bl	80033f8 <__sinit>
 80036cc:	4b89      	ldr	r3, [pc, #548]	; (80038f4 <_vfiprintf_r+0x240>)
 80036ce:	429d      	cmp	r5, r3
 80036d0:	d11b      	bne.n	800370a <_vfiprintf_r+0x56>
 80036d2:	6875      	ldr	r5, [r6, #4]
 80036d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036d6:	07d9      	lsls	r1, r3, #31
 80036d8:	d405      	bmi.n	80036e6 <_vfiprintf_r+0x32>
 80036da:	89ab      	ldrh	r3, [r5, #12]
 80036dc:	059a      	lsls	r2, r3, #22
 80036de:	d402      	bmi.n	80036e6 <_vfiprintf_r+0x32>
 80036e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036e2:	f7ff ff27 	bl	8003534 <__retarget_lock_acquire_recursive>
 80036e6:	89ab      	ldrh	r3, [r5, #12]
 80036e8:	071b      	lsls	r3, r3, #28
 80036ea:	d501      	bpl.n	80036f0 <_vfiprintf_r+0x3c>
 80036ec:	692b      	ldr	r3, [r5, #16]
 80036ee:	b9eb      	cbnz	r3, 800372c <_vfiprintf_r+0x78>
 80036f0:	4629      	mov	r1, r5
 80036f2:	4630      	mov	r0, r6
 80036f4:	f000 fb5a 	bl	8003dac <__swsetup_r>
 80036f8:	b1c0      	cbz	r0, 800372c <_vfiprintf_r+0x78>
 80036fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036fc:	07dc      	lsls	r4, r3, #31
 80036fe:	d50e      	bpl.n	800371e <_vfiprintf_r+0x6a>
 8003700:	f04f 30ff 	mov.w	r0, #4294967295
 8003704:	b01d      	add	sp, #116	; 0x74
 8003706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800370a:	4b7b      	ldr	r3, [pc, #492]	; (80038f8 <_vfiprintf_r+0x244>)
 800370c:	429d      	cmp	r5, r3
 800370e:	d101      	bne.n	8003714 <_vfiprintf_r+0x60>
 8003710:	68b5      	ldr	r5, [r6, #8]
 8003712:	e7df      	b.n	80036d4 <_vfiprintf_r+0x20>
 8003714:	4b79      	ldr	r3, [pc, #484]	; (80038fc <_vfiprintf_r+0x248>)
 8003716:	429d      	cmp	r5, r3
 8003718:	bf08      	it	eq
 800371a:	68f5      	ldreq	r5, [r6, #12]
 800371c:	e7da      	b.n	80036d4 <_vfiprintf_r+0x20>
 800371e:	89ab      	ldrh	r3, [r5, #12]
 8003720:	0598      	lsls	r0, r3, #22
 8003722:	d4ed      	bmi.n	8003700 <_vfiprintf_r+0x4c>
 8003724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003726:	f7ff ff06 	bl	8003536 <__retarget_lock_release_recursive>
 800372a:	e7e9      	b.n	8003700 <_vfiprintf_r+0x4c>
 800372c:	2300      	movs	r3, #0
 800372e:	9309      	str	r3, [sp, #36]	; 0x24
 8003730:	2320      	movs	r3, #32
 8003732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003736:	f8cd 800c 	str.w	r8, [sp, #12]
 800373a:	2330      	movs	r3, #48	; 0x30
 800373c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003900 <_vfiprintf_r+0x24c>
 8003740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003744:	f04f 0901 	mov.w	r9, #1
 8003748:	4623      	mov	r3, r4
 800374a:	469a      	mov	sl, r3
 800374c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003750:	b10a      	cbz	r2, 8003756 <_vfiprintf_r+0xa2>
 8003752:	2a25      	cmp	r2, #37	; 0x25
 8003754:	d1f9      	bne.n	800374a <_vfiprintf_r+0x96>
 8003756:	ebba 0b04 	subs.w	fp, sl, r4
 800375a:	d00b      	beq.n	8003774 <_vfiprintf_r+0xc0>
 800375c:	465b      	mov	r3, fp
 800375e:	4622      	mov	r2, r4
 8003760:	4629      	mov	r1, r5
 8003762:	4630      	mov	r0, r6
 8003764:	f7ff ff93 	bl	800368e <__sfputs_r>
 8003768:	3001      	adds	r0, #1
 800376a:	f000 80aa 	beq.w	80038c2 <_vfiprintf_r+0x20e>
 800376e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003770:	445a      	add	r2, fp
 8003772:	9209      	str	r2, [sp, #36]	; 0x24
 8003774:	f89a 3000 	ldrb.w	r3, [sl]
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80a2 	beq.w	80038c2 <_vfiprintf_r+0x20e>
 800377e:	2300      	movs	r3, #0
 8003780:	f04f 32ff 	mov.w	r2, #4294967295
 8003784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003788:	f10a 0a01 	add.w	sl, sl, #1
 800378c:	9304      	str	r3, [sp, #16]
 800378e:	9307      	str	r3, [sp, #28]
 8003790:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003794:	931a      	str	r3, [sp, #104]	; 0x68
 8003796:	4654      	mov	r4, sl
 8003798:	2205      	movs	r2, #5
 800379a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800379e:	4858      	ldr	r0, [pc, #352]	; (8003900 <_vfiprintf_r+0x24c>)
 80037a0:	f7fc fd16 	bl	80001d0 <memchr>
 80037a4:	9a04      	ldr	r2, [sp, #16]
 80037a6:	b9d8      	cbnz	r0, 80037e0 <_vfiprintf_r+0x12c>
 80037a8:	06d1      	lsls	r1, r2, #27
 80037aa:	bf44      	itt	mi
 80037ac:	2320      	movmi	r3, #32
 80037ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037b2:	0713      	lsls	r3, r2, #28
 80037b4:	bf44      	itt	mi
 80037b6:	232b      	movmi	r3, #43	; 0x2b
 80037b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037bc:	f89a 3000 	ldrb.w	r3, [sl]
 80037c0:	2b2a      	cmp	r3, #42	; 0x2a
 80037c2:	d015      	beq.n	80037f0 <_vfiprintf_r+0x13c>
 80037c4:	9a07      	ldr	r2, [sp, #28]
 80037c6:	4654      	mov	r4, sl
 80037c8:	2000      	movs	r0, #0
 80037ca:	f04f 0c0a 	mov.w	ip, #10
 80037ce:	4621      	mov	r1, r4
 80037d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037d4:	3b30      	subs	r3, #48	; 0x30
 80037d6:	2b09      	cmp	r3, #9
 80037d8:	d94e      	bls.n	8003878 <_vfiprintf_r+0x1c4>
 80037da:	b1b0      	cbz	r0, 800380a <_vfiprintf_r+0x156>
 80037dc:	9207      	str	r2, [sp, #28]
 80037de:	e014      	b.n	800380a <_vfiprintf_r+0x156>
 80037e0:	eba0 0308 	sub.w	r3, r0, r8
 80037e4:	fa09 f303 	lsl.w	r3, r9, r3
 80037e8:	4313      	orrs	r3, r2
 80037ea:	9304      	str	r3, [sp, #16]
 80037ec:	46a2      	mov	sl, r4
 80037ee:	e7d2      	b.n	8003796 <_vfiprintf_r+0xe2>
 80037f0:	9b03      	ldr	r3, [sp, #12]
 80037f2:	1d19      	adds	r1, r3, #4
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	9103      	str	r1, [sp, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	bfbb      	ittet	lt
 80037fc:	425b      	neglt	r3, r3
 80037fe:	f042 0202 	orrlt.w	r2, r2, #2
 8003802:	9307      	strge	r3, [sp, #28]
 8003804:	9307      	strlt	r3, [sp, #28]
 8003806:	bfb8      	it	lt
 8003808:	9204      	strlt	r2, [sp, #16]
 800380a:	7823      	ldrb	r3, [r4, #0]
 800380c:	2b2e      	cmp	r3, #46	; 0x2e
 800380e:	d10c      	bne.n	800382a <_vfiprintf_r+0x176>
 8003810:	7863      	ldrb	r3, [r4, #1]
 8003812:	2b2a      	cmp	r3, #42	; 0x2a
 8003814:	d135      	bne.n	8003882 <_vfiprintf_r+0x1ce>
 8003816:	9b03      	ldr	r3, [sp, #12]
 8003818:	1d1a      	adds	r2, r3, #4
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	9203      	str	r2, [sp, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	bfb8      	it	lt
 8003822:	f04f 33ff 	movlt.w	r3, #4294967295
 8003826:	3402      	adds	r4, #2
 8003828:	9305      	str	r3, [sp, #20]
 800382a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003910 <_vfiprintf_r+0x25c>
 800382e:	7821      	ldrb	r1, [r4, #0]
 8003830:	2203      	movs	r2, #3
 8003832:	4650      	mov	r0, sl
 8003834:	f7fc fccc 	bl	80001d0 <memchr>
 8003838:	b140      	cbz	r0, 800384c <_vfiprintf_r+0x198>
 800383a:	2340      	movs	r3, #64	; 0x40
 800383c:	eba0 000a 	sub.w	r0, r0, sl
 8003840:	fa03 f000 	lsl.w	r0, r3, r0
 8003844:	9b04      	ldr	r3, [sp, #16]
 8003846:	4303      	orrs	r3, r0
 8003848:	3401      	adds	r4, #1
 800384a:	9304      	str	r3, [sp, #16]
 800384c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003850:	482c      	ldr	r0, [pc, #176]	; (8003904 <_vfiprintf_r+0x250>)
 8003852:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003856:	2206      	movs	r2, #6
 8003858:	f7fc fcba 	bl	80001d0 <memchr>
 800385c:	2800      	cmp	r0, #0
 800385e:	d03f      	beq.n	80038e0 <_vfiprintf_r+0x22c>
 8003860:	4b29      	ldr	r3, [pc, #164]	; (8003908 <_vfiprintf_r+0x254>)
 8003862:	bb1b      	cbnz	r3, 80038ac <_vfiprintf_r+0x1f8>
 8003864:	9b03      	ldr	r3, [sp, #12]
 8003866:	3307      	adds	r3, #7
 8003868:	f023 0307 	bic.w	r3, r3, #7
 800386c:	3308      	adds	r3, #8
 800386e:	9303      	str	r3, [sp, #12]
 8003870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003872:	443b      	add	r3, r7
 8003874:	9309      	str	r3, [sp, #36]	; 0x24
 8003876:	e767      	b.n	8003748 <_vfiprintf_r+0x94>
 8003878:	fb0c 3202 	mla	r2, ip, r2, r3
 800387c:	460c      	mov	r4, r1
 800387e:	2001      	movs	r0, #1
 8003880:	e7a5      	b.n	80037ce <_vfiprintf_r+0x11a>
 8003882:	2300      	movs	r3, #0
 8003884:	3401      	adds	r4, #1
 8003886:	9305      	str	r3, [sp, #20]
 8003888:	4619      	mov	r1, r3
 800388a:	f04f 0c0a 	mov.w	ip, #10
 800388e:	4620      	mov	r0, r4
 8003890:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003894:	3a30      	subs	r2, #48	; 0x30
 8003896:	2a09      	cmp	r2, #9
 8003898:	d903      	bls.n	80038a2 <_vfiprintf_r+0x1ee>
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0c5      	beq.n	800382a <_vfiprintf_r+0x176>
 800389e:	9105      	str	r1, [sp, #20]
 80038a0:	e7c3      	b.n	800382a <_vfiprintf_r+0x176>
 80038a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80038a6:	4604      	mov	r4, r0
 80038a8:	2301      	movs	r3, #1
 80038aa:	e7f0      	b.n	800388e <_vfiprintf_r+0x1da>
 80038ac:	ab03      	add	r3, sp, #12
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	462a      	mov	r2, r5
 80038b2:	4b16      	ldr	r3, [pc, #88]	; (800390c <_vfiprintf_r+0x258>)
 80038b4:	a904      	add	r1, sp, #16
 80038b6:	4630      	mov	r0, r6
 80038b8:	f3af 8000 	nop.w
 80038bc:	4607      	mov	r7, r0
 80038be:	1c78      	adds	r0, r7, #1
 80038c0:	d1d6      	bne.n	8003870 <_vfiprintf_r+0x1bc>
 80038c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038c4:	07d9      	lsls	r1, r3, #31
 80038c6:	d405      	bmi.n	80038d4 <_vfiprintf_r+0x220>
 80038c8:	89ab      	ldrh	r3, [r5, #12]
 80038ca:	059a      	lsls	r2, r3, #22
 80038cc:	d402      	bmi.n	80038d4 <_vfiprintf_r+0x220>
 80038ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038d0:	f7ff fe31 	bl	8003536 <__retarget_lock_release_recursive>
 80038d4:	89ab      	ldrh	r3, [r5, #12]
 80038d6:	065b      	lsls	r3, r3, #25
 80038d8:	f53f af12 	bmi.w	8003700 <_vfiprintf_r+0x4c>
 80038dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038de:	e711      	b.n	8003704 <_vfiprintf_r+0x50>
 80038e0:	ab03      	add	r3, sp, #12
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	462a      	mov	r2, r5
 80038e6:	4b09      	ldr	r3, [pc, #36]	; (800390c <_vfiprintf_r+0x258>)
 80038e8:	a904      	add	r1, sp, #16
 80038ea:	4630      	mov	r0, r6
 80038ec:	f000 f880 	bl	80039f0 <_printf_i>
 80038f0:	e7e4      	b.n	80038bc <_vfiprintf_r+0x208>
 80038f2:	bf00      	nop
 80038f4:	080042cc 	.word	0x080042cc
 80038f8:	080042ec 	.word	0x080042ec
 80038fc:	080042ac 	.word	0x080042ac
 8003900:	0800430c 	.word	0x0800430c
 8003904:	08004316 	.word	0x08004316
 8003908:	00000000 	.word	0x00000000
 800390c:	0800368f 	.word	0x0800368f
 8003910:	08004312 	.word	0x08004312

08003914 <_printf_common>:
 8003914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003918:	4616      	mov	r6, r2
 800391a:	4699      	mov	r9, r3
 800391c:	688a      	ldr	r2, [r1, #8]
 800391e:	690b      	ldr	r3, [r1, #16]
 8003920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003924:	4293      	cmp	r3, r2
 8003926:	bfb8      	it	lt
 8003928:	4613      	movlt	r3, r2
 800392a:	6033      	str	r3, [r6, #0]
 800392c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003930:	4607      	mov	r7, r0
 8003932:	460c      	mov	r4, r1
 8003934:	b10a      	cbz	r2, 800393a <_printf_common+0x26>
 8003936:	3301      	adds	r3, #1
 8003938:	6033      	str	r3, [r6, #0]
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	0699      	lsls	r1, r3, #26
 800393e:	bf42      	ittt	mi
 8003940:	6833      	ldrmi	r3, [r6, #0]
 8003942:	3302      	addmi	r3, #2
 8003944:	6033      	strmi	r3, [r6, #0]
 8003946:	6825      	ldr	r5, [r4, #0]
 8003948:	f015 0506 	ands.w	r5, r5, #6
 800394c:	d106      	bne.n	800395c <_printf_common+0x48>
 800394e:	f104 0a19 	add.w	sl, r4, #25
 8003952:	68e3      	ldr	r3, [r4, #12]
 8003954:	6832      	ldr	r2, [r6, #0]
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	42ab      	cmp	r3, r5
 800395a:	dc26      	bgt.n	80039aa <_printf_common+0x96>
 800395c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003960:	1e13      	subs	r3, r2, #0
 8003962:	6822      	ldr	r2, [r4, #0]
 8003964:	bf18      	it	ne
 8003966:	2301      	movne	r3, #1
 8003968:	0692      	lsls	r2, r2, #26
 800396a:	d42b      	bmi.n	80039c4 <_printf_common+0xb0>
 800396c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003970:	4649      	mov	r1, r9
 8003972:	4638      	mov	r0, r7
 8003974:	47c0      	blx	r8
 8003976:	3001      	adds	r0, #1
 8003978:	d01e      	beq.n	80039b8 <_printf_common+0xa4>
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	68e5      	ldr	r5, [r4, #12]
 800397e:	6832      	ldr	r2, [r6, #0]
 8003980:	f003 0306 	and.w	r3, r3, #6
 8003984:	2b04      	cmp	r3, #4
 8003986:	bf08      	it	eq
 8003988:	1aad      	subeq	r5, r5, r2
 800398a:	68a3      	ldr	r3, [r4, #8]
 800398c:	6922      	ldr	r2, [r4, #16]
 800398e:	bf0c      	ite	eq
 8003990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003994:	2500      	movne	r5, #0
 8003996:	4293      	cmp	r3, r2
 8003998:	bfc4      	itt	gt
 800399a:	1a9b      	subgt	r3, r3, r2
 800399c:	18ed      	addgt	r5, r5, r3
 800399e:	2600      	movs	r6, #0
 80039a0:	341a      	adds	r4, #26
 80039a2:	42b5      	cmp	r5, r6
 80039a4:	d11a      	bne.n	80039dc <_printf_common+0xc8>
 80039a6:	2000      	movs	r0, #0
 80039a8:	e008      	b.n	80039bc <_printf_common+0xa8>
 80039aa:	2301      	movs	r3, #1
 80039ac:	4652      	mov	r2, sl
 80039ae:	4649      	mov	r1, r9
 80039b0:	4638      	mov	r0, r7
 80039b2:	47c0      	blx	r8
 80039b4:	3001      	adds	r0, #1
 80039b6:	d103      	bne.n	80039c0 <_printf_common+0xac>
 80039b8:	f04f 30ff 	mov.w	r0, #4294967295
 80039bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039c0:	3501      	adds	r5, #1
 80039c2:	e7c6      	b.n	8003952 <_printf_common+0x3e>
 80039c4:	18e1      	adds	r1, r4, r3
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	2030      	movs	r0, #48	; 0x30
 80039ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039ce:	4422      	add	r2, r4
 80039d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039d8:	3302      	adds	r3, #2
 80039da:	e7c7      	b.n	800396c <_printf_common+0x58>
 80039dc:	2301      	movs	r3, #1
 80039de:	4622      	mov	r2, r4
 80039e0:	4649      	mov	r1, r9
 80039e2:	4638      	mov	r0, r7
 80039e4:	47c0      	blx	r8
 80039e6:	3001      	adds	r0, #1
 80039e8:	d0e6      	beq.n	80039b8 <_printf_common+0xa4>
 80039ea:	3601      	adds	r6, #1
 80039ec:	e7d9      	b.n	80039a2 <_printf_common+0x8e>
	...

080039f0 <_printf_i>:
 80039f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039f4:	7e0f      	ldrb	r7, [r1, #24]
 80039f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039f8:	2f78      	cmp	r7, #120	; 0x78
 80039fa:	4691      	mov	r9, r2
 80039fc:	4680      	mov	r8, r0
 80039fe:	460c      	mov	r4, r1
 8003a00:	469a      	mov	sl, r3
 8003a02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a06:	d807      	bhi.n	8003a18 <_printf_i+0x28>
 8003a08:	2f62      	cmp	r7, #98	; 0x62
 8003a0a:	d80a      	bhi.n	8003a22 <_printf_i+0x32>
 8003a0c:	2f00      	cmp	r7, #0
 8003a0e:	f000 80d8 	beq.w	8003bc2 <_printf_i+0x1d2>
 8003a12:	2f58      	cmp	r7, #88	; 0x58
 8003a14:	f000 80a3 	beq.w	8003b5e <_printf_i+0x16e>
 8003a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a20:	e03a      	b.n	8003a98 <_printf_i+0xa8>
 8003a22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a26:	2b15      	cmp	r3, #21
 8003a28:	d8f6      	bhi.n	8003a18 <_printf_i+0x28>
 8003a2a:	a101      	add	r1, pc, #4	; (adr r1, 8003a30 <_printf_i+0x40>)
 8003a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a30:	08003a89 	.word	0x08003a89
 8003a34:	08003a9d 	.word	0x08003a9d
 8003a38:	08003a19 	.word	0x08003a19
 8003a3c:	08003a19 	.word	0x08003a19
 8003a40:	08003a19 	.word	0x08003a19
 8003a44:	08003a19 	.word	0x08003a19
 8003a48:	08003a9d 	.word	0x08003a9d
 8003a4c:	08003a19 	.word	0x08003a19
 8003a50:	08003a19 	.word	0x08003a19
 8003a54:	08003a19 	.word	0x08003a19
 8003a58:	08003a19 	.word	0x08003a19
 8003a5c:	08003ba9 	.word	0x08003ba9
 8003a60:	08003acd 	.word	0x08003acd
 8003a64:	08003b8b 	.word	0x08003b8b
 8003a68:	08003a19 	.word	0x08003a19
 8003a6c:	08003a19 	.word	0x08003a19
 8003a70:	08003bcb 	.word	0x08003bcb
 8003a74:	08003a19 	.word	0x08003a19
 8003a78:	08003acd 	.word	0x08003acd
 8003a7c:	08003a19 	.word	0x08003a19
 8003a80:	08003a19 	.word	0x08003a19
 8003a84:	08003b93 	.word	0x08003b93
 8003a88:	682b      	ldr	r3, [r5, #0]
 8003a8a:	1d1a      	adds	r2, r3, #4
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	602a      	str	r2, [r5, #0]
 8003a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0a3      	b.n	8003be4 <_printf_i+0x1f4>
 8003a9c:	6820      	ldr	r0, [r4, #0]
 8003a9e:	6829      	ldr	r1, [r5, #0]
 8003aa0:	0606      	lsls	r6, r0, #24
 8003aa2:	f101 0304 	add.w	r3, r1, #4
 8003aa6:	d50a      	bpl.n	8003abe <_printf_i+0xce>
 8003aa8:	680e      	ldr	r6, [r1, #0]
 8003aaa:	602b      	str	r3, [r5, #0]
 8003aac:	2e00      	cmp	r6, #0
 8003aae:	da03      	bge.n	8003ab8 <_printf_i+0xc8>
 8003ab0:	232d      	movs	r3, #45	; 0x2d
 8003ab2:	4276      	negs	r6, r6
 8003ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ab8:	485e      	ldr	r0, [pc, #376]	; (8003c34 <_printf_i+0x244>)
 8003aba:	230a      	movs	r3, #10
 8003abc:	e019      	b.n	8003af2 <_printf_i+0x102>
 8003abe:	680e      	ldr	r6, [r1, #0]
 8003ac0:	602b      	str	r3, [r5, #0]
 8003ac2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ac6:	bf18      	it	ne
 8003ac8:	b236      	sxthne	r6, r6
 8003aca:	e7ef      	b.n	8003aac <_printf_i+0xbc>
 8003acc:	682b      	ldr	r3, [r5, #0]
 8003ace:	6820      	ldr	r0, [r4, #0]
 8003ad0:	1d19      	adds	r1, r3, #4
 8003ad2:	6029      	str	r1, [r5, #0]
 8003ad4:	0601      	lsls	r1, r0, #24
 8003ad6:	d501      	bpl.n	8003adc <_printf_i+0xec>
 8003ad8:	681e      	ldr	r6, [r3, #0]
 8003ada:	e002      	b.n	8003ae2 <_printf_i+0xf2>
 8003adc:	0646      	lsls	r6, r0, #25
 8003ade:	d5fb      	bpl.n	8003ad8 <_printf_i+0xe8>
 8003ae0:	881e      	ldrh	r6, [r3, #0]
 8003ae2:	4854      	ldr	r0, [pc, #336]	; (8003c34 <_printf_i+0x244>)
 8003ae4:	2f6f      	cmp	r7, #111	; 0x6f
 8003ae6:	bf0c      	ite	eq
 8003ae8:	2308      	moveq	r3, #8
 8003aea:	230a      	movne	r3, #10
 8003aec:	2100      	movs	r1, #0
 8003aee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003af2:	6865      	ldr	r5, [r4, #4]
 8003af4:	60a5      	str	r5, [r4, #8]
 8003af6:	2d00      	cmp	r5, #0
 8003af8:	bfa2      	ittt	ge
 8003afa:	6821      	ldrge	r1, [r4, #0]
 8003afc:	f021 0104 	bicge.w	r1, r1, #4
 8003b00:	6021      	strge	r1, [r4, #0]
 8003b02:	b90e      	cbnz	r6, 8003b08 <_printf_i+0x118>
 8003b04:	2d00      	cmp	r5, #0
 8003b06:	d04d      	beq.n	8003ba4 <_printf_i+0x1b4>
 8003b08:	4615      	mov	r5, r2
 8003b0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b0e:	fb03 6711 	mls	r7, r3, r1, r6
 8003b12:	5dc7      	ldrb	r7, [r0, r7]
 8003b14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b18:	4637      	mov	r7, r6
 8003b1a:	42bb      	cmp	r3, r7
 8003b1c:	460e      	mov	r6, r1
 8003b1e:	d9f4      	bls.n	8003b0a <_printf_i+0x11a>
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d10b      	bne.n	8003b3c <_printf_i+0x14c>
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	07de      	lsls	r6, r3, #31
 8003b28:	d508      	bpl.n	8003b3c <_printf_i+0x14c>
 8003b2a:	6923      	ldr	r3, [r4, #16]
 8003b2c:	6861      	ldr	r1, [r4, #4]
 8003b2e:	4299      	cmp	r1, r3
 8003b30:	bfde      	ittt	le
 8003b32:	2330      	movle	r3, #48	; 0x30
 8003b34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b3c:	1b52      	subs	r2, r2, r5
 8003b3e:	6122      	str	r2, [r4, #16]
 8003b40:	f8cd a000 	str.w	sl, [sp]
 8003b44:	464b      	mov	r3, r9
 8003b46:	aa03      	add	r2, sp, #12
 8003b48:	4621      	mov	r1, r4
 8003b4a:	4640      	mov	r0, r8
 8003b4c:	f7ff fee2 	bl	8003914 <_printf_common>
 8003b50:	3001      	adds	r0, #1
 8003b52:	d14c      	bne.n	8003bee <_printf_i+0x1fe>
 8003b54:	f04f 30ff 	mov.w	r0, #4294967295
 8003b58:	b004      	add	sp, #16
 8003b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b5e:	4835      	ldr	r0, [pc, #212]	; (8003c34 <_printf_i+0x244>)
 8003b60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b64:	6829      	ldr	r1, [r5, #0]
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b6c:	6029      	str	r1, [r5, #0]
 8003b6e:	061d      	lsls	r5, r3, #24
 8003b70:	d514      	bpl.n	8003b9c <_printf_i+0x1ac>
 8003b72:	07df      	lsls	r7, r3, #31
 8003b74:	bf44      	itt	mi
 8003b76:	f043 0320 	orrmi.w	r3, r3, #32
 8003b7a:	6023      	strmi	r3, [r4, #0]
 8003b7c:	b91e      	cbnz	r6, 8003b86 <_printf_i+0x196>
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	f023 0320 	bic.w	r3, r3, #32
 8003b84:	6023      	str	r3, [r4, #0]
 8003b86:	2310      	movs	r3, #16
 8003b88:	e7b0      	b.n	8003aec <_printf_i+0xfc>
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	f043 0320 	orr.w	r3, r3, #32
 8003b90:	6023      	str	r3, [r4, #0]
 8003b92:	2378      	movs	r3, #120	; 0x78
 8003b94:	4828      	ldr	r0, [pc, #160]	; (8003c38 <_printf_i+0x248>)
 8003b96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b9a:	e7e3      	b.n	8003b64 <_printf_i+0x174>
 8003b9c:	0659      	lsls	r1, r3, #25
 8003b9e:	bf48      	it	mi
 8003ba0:	b2b6      	uxthmi	r6, r6
 8003ba2:	e7e6      	b.n	8003b72 <_printf_i+0x182>
 8003ba4:	4615      	mov	r5, r2
 8003ba6:	e7bb      	b.n	8003b20 <_printf_i+0x130>
 8003ba8:	682b      	ldr	r3, [r5, #0]
 8003baa:	6826      	ldr	r6, [r4, #0]
 8003bac:	6961      	ldr	r1, [r4, #20]
 8003bae:	1d18      	adds	r0, r3, #4
 8003bb0:	6028      	str	r0, [r5, #0]
 8003bb2:	0635      	lsls	r5, r6, #24
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	d501      	bpl.n	8003bbc <_printf_i+0x1cc>
 8003bb8:	6019      	str	r1, [r3, #0]
 8003bba:	e002      	b.n	8003bc2 <_printf_i+0x1d2>
 8003bbc:	0670      	lsls	r0, r6, #25
 8003bbe:	d5fb      	bpl.n	8003bb8 <_printf_i+0x1c8>
 8003bc0:	8019      	strh	r1, [r3, #0]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	6123      	str	r3, [r4, #16]
 8003bc6:	4615      	mov	r5, r2
 8003bc8:	e7ba      	b.n	8003b40 <_printf_i+0x150>
 8003bca:	682b      	ldr	r3, [r5, #0]
 8003bcc:	1d1a      	adds	r2, r3, #4
 8003bce:	602a      	str	r2, [r5, #0]
 8003bd0:	681d      	ldr	r5, [r3, #0]
 8003bd2:	6862      	ldr	r2, [r4, #4]
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	f7fc fafa 	bl	80001d0 <memchr>
 8003bdc:	b108      	cbz	r0, 8003be2 <_printf_i+0x1f2>
 8003bde:	1b40      	subs	r0, r0, r5
 8003be0:	6060      	str	r0, [r4, #4]
 8003be2:	6863      	ldr	r3, [r4, #4]
 8003be4:	6123      	str	r3, [r4, #16]
 8003be6:	2300      	movs	r3, #0
 8003be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bec:	e7a8      	b.n	8003b40 <_printf_i+0x150>
 8003bee:	6923      	ldr	r3, [r4, #16]
 8003bf0:	462a      	mov	r2, r5
 8003bf2:	4649      	mov	r1, r9
 8003bf4:	4640      	mov	r0, r8
 8003bf6:	47d0      	blx	sl
 8003bf8:	3001      	adds	r0, #1
 8003bfa:	d0ab      	beq.n	8003b54 <_printf_i+0x164>
 8003bfc:	6823      	ldr	r3, [r4, #0]
 8003bfe:	079b      	lsls	r3, r3, #30
 8003c00:	d413      	bmi.n	8003c2a <_printf_i+0x23a>
 8003c02:	68e0      	ldr	r0, [r4, #12]
 8003c04:	9b03      	ldr	r3, [sp, #12]
 8003c06:	4298      	cmp	r0, r3
 8003c08:	bfb8      	it	lt
 8003c0a:	4618      	movlt	r0, r3
 8003c0c:	e7a4      	b.n	8003b58 <_printf_i+0x168>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	4632      	mov	r2, r6
 8003c12:	4649      	mov	r1, r9
 8003c14:	4640      	mov	r0, r8
 8003c16:	47d0      	blx	sl
 8003c18:	3001      	adds	r0, #1
 8003c1a:	d09b      	beq.n	8003b54 <_printf_i+0x164>
 8003c1c:	3501      	adds	r5, #1
 8003c1e:	68e3      	ldr	r3, [r4, #12]
 8003c20:	9903      	ldr	r1, [sp, #12]
 8003c22:	1a5b      	subs	r3, r3, r1
 8003c24:	42ab      	cmp	r3, r5
 8003c26:	dcf2      	bgt.n	8003c0e <_printf_i+0x21e>
 8003c28:	e7eb      	b.n	8003c02 <_printf_i+0x212>
 8003c2a:	2500      	movs	r5, #0
 8003c2c:	f104 0619 	add.w	r6, r4, #25
 8003c30:	e7f5      	b.n	8003c1e <_printf_i+0x22e>
 8003c32:	bf00      	nop
 8003c34:	0800431d 	.word	0x0800431d
 8003c38:	0800432e 	.word	0x0800432e

08003c3c <_sbrk_r>:
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	4d06      	ldr	r5, [pc, #24]	; (8003c58 <_sbrk_r+0x1c>)
 8003c40:	2300      	movs	r3, #0
 8003c42:	4604      	mov	r4, r0
 8003c44:	4608      	mov	r0, r1
 8003c46:	602b      	str	r3, [r5, #0]
 8003c48:	f7fc fecc 	bl	80009e4 <_sbrk>
 8003c4c:	1c43      	adds	r3, r0, #1
 8003c4e:	d102      	bne.n	8003c56 <_sbrk_r+0x1a>
 8003c50:	682b      	ldr	r3, [r5, #0]
 8003c52:	b103      	cbz	r3, 8003c56 <_sbrk_r+0x1a>
 8003c54:	6023      	str	r3, [r4, #0]
 8003c56:	bd38      	pop	{r3, r4, r5, pc}
 8003c58:	20000128 	.word	0x20000128

08003c5c <__sread>:
 8003c5c:	b510      	push	{r4, lr}
 8003c5e:	460c      	mov	r4, r1
 8003c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c64:	f000 fab2 	bl	80041cc <_read_r>
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	bfab      	itete	ge
 8003c6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8003c70:	181b      	addge	r3, r3, r0
 8003c72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c76:	bfac      	ite	ge
 8003c78:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c7a:	81a3      	strhlt	r3, [r4, #12]
 8003c7c:	bd10      	pop	{r4, pc}

08003c7e <__swrite>:
 8003c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c82:	461f      	mov	r7, r3
 8003c84:	898b      	ldrh	r3, [r1, #12]
 8003c86:	05db      	lsls	r3, r3, #23
 8003c88:	4605      	mov	r5, r0
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	4616      	mov	r6, r2
 8003c8e:	d505      	bpl.n	8003c9c <__swrite+0x1e>
 8003c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c94:	2302      	movs	r3, #2
 8003c96:	2200      	movs	r2, #0
 8003c98:	f000 f9c8 	bl	800402c <_lseek_r>
 8003c9c:	89a3      	ldrh	r3, [r4, #12]
 8003c9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ca6:	81a3      	strh	r3, [r4, #12]
 8003ca8:	4632      	mov	r2, r6
 8003caa:	463b      	mov	r3, r7
 8003cac:	4628      	mov	r0, r5
 8003cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cb2:	f000 b869 	b.w	8003d88 <_write_r>

08003cb6 <__sseek>:
 8003cb6:	b510      	push	{r4, lr}
 8003cb8:	460c      	mov	r4, r1
 8003cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cbe:	f000 f9b5 	bl	800402c <_lseek_r>
 8003cc2:	1c43      	adds	r3, r0, #1
 8003cc4:	89a3      	ldrh	r3, [r4, #12]
 8003cc6:	bf15      	itete	ne
 8003cc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003cca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003cce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cd2:	81a3      	strheq	r3, [r4, #12]
 8003cd4:	bf18      	it	ne
 8003cd6:	81a3      	strhne	r3, [r4, #12]
 8003cd8:	bd10      	pop	{r4, pc}

08003cda <__sclose>:
 8003cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cde:	f000 b8d3 	b.w	8003e88 <_close_r>
	...

08003ce4 <__swbuf_r>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	460e      	mov	r6, r1
 8003ce8:	4614      	mov	r4, r2
 8003cea:	4605      	mov	r5, r0
 8003cec:	b118      	cbz	r0, 8003cf6 <__swbuf_r+0x12>
 8003cee:	6983      	ldr	r3, [r0, #24]
 8003cf0:	b90b      	cbnz	r3, 8003cf6 <__swbuf_r+0x12>
 8003cf2:	f7ff fb81 	bl	80033f8 <__sinit>
 8003cf6:	4b21      	ldr	r3, [pc, #132]	; (8003d7c <__swbuf_r+0x98>)
 8003cf8:	429c      	cmp	r4, r3
 8003cfa:	d12b      	bne.n	8003d54 <__swbuf_r+0x70>
 8003cfc:	686c      	ldr	r4, [r5, #4]
 8003cfe:	69a3      	ldr	r3, [r4, #24]
 8003d00:	60a3      	str	r3, [r4, #8]
 8003d02:	89a3      	ldrh	r3, [r4, #12]
 8003d04:	071a      	lsls	r2, r3, #28
 8003d06:	d52f      	bpl.n	8003d68 <__swbuf_r+0x84>
 8003d08:	6923      	ldr	r3, [r4, #16]
 8003d0a:	b36b      	cbz	r3, 8003d68 <__swbuf_r+0x84>
 8003d0c:	6923      	ldr	r3, [r4, #16]
 8003d0e:	6820      	ldr	r0, [r4, #0]
 8003d10:	1ac0      	subs	r0, r0, r3
 8003d12:	6963      	ldr	r3, [r4, #20]
 8003d14:	b2f6      	uxtb	r6, r6
 8003d16:	4283      	cmp	r3, r0
 8003d18:	4637      	mov	r7, r6
 8003d1a:	dc04      	bgt.n	8003d26 <__swbuf_r+0x42>
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	4628      	mov	r0, r5
 8003d20:	f000 f948 	bl	8003fb4 <_fflush_r>
 8003d24:	bb30      	cbnz	r0, 8003d74 <__swbuf_r+0x90>
 8003d26:	68a3      	ldr	r3, [r4, #8]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	60a3      	str	r3, [r4, #8]
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	6022      	str	r2, [r4, #0]
 8003d32:	701e      	strb	r6, [r3, #0]
 8003d34:	6963      	ldr	r3, [r4, #20]
 8003d36:	3001      	adds	r0, #1
 8003d38:	4283      	cmp	r3, r0
 8003d3a:	d004      	beq.n	8003d46 <__swbuf_r+0x62>
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	07db      	lsls	r3, r3, #31
 8003d40:	d506      	bpl.n	8003d50 <__swbuf_r+0x6c>
 8003d42:	2e0a      	cmp	r6, #10
 8003d44:	d104      	bne.n	8003d50 <__swbuf_r+0x6c>
 8003d46:	4621      	mov	r1, r4
 8003d48:	4628      	mov	r0, r5
 8003d4a:	f000 f933 	bl	8003fb4 <_fflush_r>
 8003d4e:	b988      	cbnz	r0, 8003d74 <__swbuf_r+0x90>
 8003d50:	4638      	mov	r0, r7
 8003d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d54:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <__swbuf_r+0x9c>)
 8003d56:	429c      	cmp	r4, r3
 8003d58:	d101      	bne.n	8003d5e <__swbuf_r+0x7a>
 8003d5a:	68ac      	ldr	r4, [r5, #8]
 8003d5c:	e7cf      	b.n	8003cfe <__swbuf_r+0x1a>
 8003d5e:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <__swbuf_r+0xa0>)
 8003d60:	429c      	cmp	r4, r3
 8003d62:	bf08      	it	eq
 8003d64:	68ec      	ldreq	r4, [r5, #12]
 8003d66:	e7ca      	b.n	8003cfe <__swbuf_r+0x1a>
 8003d68:	4621      	mov	r1, r4
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	f000 f81e 	bl	8003dac <__swsetup_r>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d0cb      	beq.n	8003d0c <__swbuf_r+0x28>
 8003d74:	f04f 37ff 	mov.w	r7, #4294967295
 8003d78:	e7ea      	b.n	8003d50 <__swbuf_r+0x6c>
 8003d7a:	bf00      	nop
 8003d7c:	080042cc 	.word	0x080042cc
 8003d80:	080042ec 	.word	0x080042ec
 8003d84:	080042ac 	.word	0x080042ac

08003d88 <_write_r>:
 8003d88:	b538      	push	{r3, r4, r5, lr}
 8003d8a:	4d07      	ldr	r5, [pc, #28]	; (8003da8 <_write_r+0x20>)
 8003d8c:	4604      	mov	r4, r0
 8003d8e:	4608      	mov	r0, r1
 8003d90:	4611      	mov	r1, r2
 8003d92:	2200      	movs	r2, #0
 8003d94:	602a      	str	r2, [r5, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	f7fc fbec 	bl	8000574 <_write>
 8003d9c:	1c43      	adds	r3, r0, #1
 8003d9e:	d102      	bne.n	8003da6 <_write_r+0x1e>
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	b103      	cbz	r3, 8003da6 <_write_r+0x1e>
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	bd38      	pop	{r3, r4, r5, pc}
 8003da8:	20000128 	.word	0x20000128

08003dac <__swsetup_r>:
 8003dac:	4b32      	ldr	r3, [pc, #200]	; (8003e78 <__swsetup_r+0xcc>)
 8003dae:	b570      	push	{r4, r5, r6, lr}
 8003db0:	681d      	ldr	r5, [r3, #0]
 8003db2:	4606      	mov	r6, r0
 8003db4:	460c      	mov	r4, r1
 8003db6:	b125      	cbz	r5, 8003dc2 <__swsetup_r+0x16>
 8003db8:	69ab      	ldr	r3, [r5, #24]
 8003dba:	b913      	cbnz	r3, 8003dc2 <__swsetup_r+0x16>
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f7ff fb1b 	bl	80033f8 <__sinit>
 8003dc2:	4b2e      	ldr	r3, [pc, #184]	; (8003e7c <__swsetup_r+0xd0>)
 8003dc4:	429c      	cmp	r4, r3
 8003dc6:	d10f      	bne.n	8003de8 <__swsetup_r+0x3c>
 8003dc8:	686c      	ldr	r4, [r5, #4]
 8003dca:	89a3      	ldrh	r3, [r4, #12]
 8003dcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003dd0:	0719      	lsls	r1, r3, #28
 8003dd2:	d42c      	bmi.n	8003e2e <__swsetup_r+0x82>
 8003dd4:	06dd      	lsls	r5, r3, #27
 8003dd6:	d411      	bmi.n	8003dfc <__swsetup_r+0x50>
 8003dd8:	2309      	movs	r3, #9
 8003dda:	6033      	str	r3, [r6, #0]
 8003ddc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003de0:	81a3      	strh	r3, [r4, #12]
 8003de2:	f04f 30ff 	mov.w	r0, #4294967295
 8003de6:	e03e      	b.n	8003e66 <__swsetup_r+0xba>
 8003de8:	4b25      	ldr	r3, [pc, #148]	; (8003e80 <__swsetup_r+0xd4>)
 8003dea:	429c      	cmp	r4, r3
 8003dec:	d101      	bne.n	8003df2 <__swsetup_r+0x46>
 8003dee:	68ac      	ldr	r4, [r5, #8]
 8003df0:	e7eb      	b.n	8003dca <__swsetup_r+0x1e>
 8003df2:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <__swsetup_r+0xd8>)
 8003df4:	429c      	cmp	r4, r3
 8003df6:	bf08      	it	eq
 8003df8:	68ec      	ldreq	r4, [r5, #12]
 8003dfa:	e7e6      	b.n	8003dca <__swsetup_r+0x1e>
 8003dfc:	0758      	lsls	r0, r3, #29
 8003dfe:	d512      	bpl.n	8003e26 <__swsetup_r+0x7a>
 8003e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e02:	b141      	cbz	r1, 8003e16 <__swsetup_r+0x6a>
 8003e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e08:	4299      	cmp	r1, r3
 8003e0a:	d002      	beq.n	8003e12 <__swsetup_r+0x66>
 8003e0c:	4630      	mov	r0, r6
 8003e0e:	f000 f991 	bl	8004134 <_free_r>
 8003e12:	2300      	movs	r3, #0
 8003e14:	6363      	str	r3, [r4, #52]	; 0x34
 8003e16:	89a3      	ldrh	r3, [r4, #12]
 8003e18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e1c:	81a3      	strh	r3, [r4, #12]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	6063      	str	r3, [r4, #4]
 8003e22:	6923      	ldr	r3, [r4, #16]
 8003e24:	6023      	str	r3, [r4, #0]
 8003e26:	89a3      	ldrh	r3, [r4, #12]
 8003e28:	f043 0308 	orr.w	r3, r3, #8
 8003e2c:	81a3      	strh	r3, [r4, #12]
 8003e2e:	6923      	ldr	r3, [r4, #16]
 8003e30:	b94b      	cbnz	r3, 8003e46 <__swsetup_r+0x9a>
 8003e32:	89a3      	ldrh	r3, [r4, #12]
 8003e34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e3c:	d003      	beq.n	8003e46 <__swsetup_r+0x9a>
 8003e3e:	4621      	mov	r1, r4
 8003e40:	4630      	mov	r0, r6
 8003e42:	f000 f92b 	bl	800409c <__smakebuf_r>
 8003e46:	89a0      	ldrh	r0, [r4, #12]
 8003e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e4c:	f010 0301 	ands.w	r3, r0, #1
 8003e50:	d00a      	beq.n	8003e68 <__swsetup_r+0xbc>
 8003e52:	2300      	movs	r3, #0
 8003e54:	60a3      	str	r3, [r4, #8]
 8003e56:	6963      	ldr	r3, [r4, #20]
 8003e58:	425b      	negs	r3, r3
 8003e5a:	61a3      	str	r3, [r4, #24]
 8003e5c:	6923      	ldr	r3, [r4, #16]
 8003e5e:	b943      	cbnz	r3, 8003e72 <__swsetup_r+0xc6>
 8003e60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e64:	d1ba      	bne.n	8003ddc <__swsetup_r+0x30>
 8003e66:	bd70      	pop	{r4, r5, r6, pc}
 8003e68:	0781      	lsls	r1, r0, #30
 8003e6a:	bf58      	it	pl
 8003e6c:	6963      	ldrpl	r3, [r4, #20]
 8003e6e:	60a3      	str	r3, [r4, #8]
 8003e70:	e7f4      	b.n	8003e5c <__swsetup_r+0xb0>
 8003e72:	2000      	movs	r0, #0
 8003e74:	e7f7      	b.n	8003e66 <__swsetup_r+0xba>
 8003e76:	bf00      	nop
 8003e78:	2000000c 	.word	0x2000000c
 8003e7c:	080042cc 	.word	0x080042cc
 8003e80:	080042ec 	.word	0x080042ec
 8003e84:	080042ac 	.word	0x080042ac

08003e88 <_close_r>:
 8003e88:	b538      	push	{r3, r4, r5, lr}
 8003e8a:	4d06      	ldr	r5, [pc, #24]	; (8003ea4 <_close_r+0x1c>)
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	4604      	mov	r4, r0
 8003e90:	4608      	mov	r0, r1
 8003e92:	602b      	str	r3, [r5, #0]
 8003e94:	f7fc fd71 	bl	800097a <_close>
 8003e98:	1c43      	adds	r3, r0, #1
 8003e9a:	d102      	bne.n	8003ea2 <_close_r+0x1a>
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	b103      	cbz	r3, 8003ea2 <_close_r+0x1a>
 8003ea0:	6023      	str	r3, [r4, #0]
 8003ea2:	bd38      	pop	{r3, r4, r5, pc}
 8003ea4:	20000128 	.word	0x20000128

08003ea8 <__sflush_r>:
 8003ea8:	898a      	ldrh	r2, [r1, #12]
 8003eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eae:	4605      	mov	r5, r0
 8003eb0:	0710      	lsls	r0, r2, #28
 8003eb2:	460c      	mov	r4, r1
 8003eb4:	d458      	bmi.n	8003f68 <__sflush_r+0xc0>
 8003eb6:	684b      	ldr	r3, [r1, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	dc05      	bgt.n	8003ec8 <__sflush_r+0x20>
 8003ebc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	dc02      	bgt.n	8003ec8 <__sflush_r+0x20>
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ec8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003eca:	2e00      	cmp	r6, #0
 8003ecc:	d0f9      	beq.n	8003ec2 <__sflush_r+0x1a>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ed4:	682f      	ldr	r7, [r5, #0]
 8003ed6:	602b      	str	r3, [r5, #0]
 8003ed8:	d032      	beq.n	8003f40 <__sflush_r+0x98>
 8003eda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003edc:	89a3      	ldrh	r3, [r4, #12]
 8003ede:	075a      	lsls	r2, r3, #29
 8003ee0:	d505      	bpl.n	8003eee <__sflush_r+0x46>
 8003ee2:	6863      	ldr	r3, [r4, #4]
 8003ee4:	1ac0      	subs	r0, r0, r3
 8003ee6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ee8:	b10b      	cbz	r3, 8003eee <__sflush_r+0x46>
 8003eea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003eec:	1ac0      	subs	r0, r0, r3
 8003eee:	2300      	movs	r3, #0
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ef4:	6a21      	ldr	r1, [r4, #32]
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	47b0      	blx	r6
 8003efa:	1c43      	adds	r3, r0, #1
 8003efc:	89a3      	ldrh	r3, [r4, #12]
 8003efe:	d106      	bne.n	8003f0e <__sflush_r+0x66>
 8003f00:	6829      	ldr	r1, [r5, #0]
 8003f02:	291d      	cmp	r1, #29
 8003f04:	d82c      	bhi.n	8003f60 <__sflush_r+0xb8>
 8003f06:	4a2a      	ldr	r2, [pc, #168]	; (8003fb0 <__sflush_r+0x108>)
 8003f08:	40ca      	lsrs	r2, r1
 8003f0a:	07d6      	lsls	r6, r2, #31
 8003f0c:	d528      	bpl.n	8003f60 <__sflush_r+0xb8>
 8003f0e:	2200      	movs	r2, #0
 8003f10:	6062      	str	r2, [r4, #4]
 8003f12:	04d9      	lsls	r1, r3, #19
 8003f14:	6922      	ldr	r2, [r4, #16]
 8003f16:	6022      	str	r2, [r4, #0]
 8003f18:	d504      	bpl.n	8003f24 <__sflush_r+0x7c>
 8003f1a:	1c42      	adds	r2, r0, #1
 8003f1c:	d101      	bne.n	8003f22 <__sflush_r+0x7a>
 8003f1e:	682b      	ldr	r3, [r5, #0]
 8003f20:	b903      	cbnz	r3, 8003f24 <__sflush_r+0x7c>
 8003f22:	6560      	str	r0, [r4, #84]	; 0x54
 8003f24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f26:	602f      	str	r7, [r5, #0]
 8003f28:	2900      	cmp	r1, #0
 8003f2a:	d0ca      	beq.n	8003ec2 <__sflush_r+0x1a>
 8003f2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f30:	4299      	cmp	r1, r3
 8003f32:	d002      	beq.n	8003f3a <__sflush_r+0x92>
 8003f34:	4628      	mov	r0, r5
 8003f36:	f000 f8fd 	bl	8004134 <_free_r>
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	6360      	str	r0, [r4, #52]	; 0x34
 8003f3e:	e7c1      	b.n	8003ec4 <__sflush_r+0x1c>
 8003f40:	6a21      	ldr	r1, [r4, #32]
 8003f42:	2301      	movs	r3, #1
 8003f44:	4628      	mov	r0, r5
 8003f46:	47b0      	blx	r6
 8003f48:	1c41      	adds	r1, r0, #1
 8003f4a:	d1c7      	bne.n	8003edc <__sflush_r+0x34>
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0c4      	beq.n	8003edc <__sflush_r+0x34>
 8003f52:	2b1d      	cmp	r3, #29
 8003f54:	d001      	beq.n	8003f5a <__sflush_r+0xb2>
 8003f56:	2b16      	cmp	r3, #22
 8003f58:	d101      	bne.n	8003f5e <__sflush_r+0xb6>
 8003f5a:	602f      	str	r7, [r5, #0]
 8003f5c:	e7b1      	b.n	8003ec2 <__sflush_r+0x1a>
 8003f5e:	89a3      	ldrh	r3, [r4, #12]
 8003f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f64:	81a3      	strh	r3, [r4, #12]
 8003f66:	e7ad      	b.n	8003ec4 <__sflush_r+0x1c>
 8003f68:	690f      	ldr	r7, [r1, #16]
 8003f6a:	2f00      	cmp	r7, #0
 8003f6c:	d0a9      	beq.n	8003ec2 <__sflush_r+0x1a>
 8003f6e:	0793      	lsls	r3, r2, #30
 8003f70:	680e      	ldr	r6, [r1, #0]
 8003f72:	bf08      	it	eq
 8003f74:	694b      	ldreq	r3, [r1, #20]
 8003f76:	600f      	str	r7, [r1, #0]
 8003f78:	bf18      	it	ne
 8003f7a:	2300      	movne	r3, #0
 8003f7c:	eba6 0807 	sub.w	r8, r6, r7
 8003f80:	608b      	str	r3, [r1, #8]
 8003f82:	f1b8 0f00 	cmp.w	r8, #0
 8003f86:	dd9c      	ble.n	8003ec2 <__sflush_r+0x1a>
 8003f88:	6a21      	ldr	r1, [r4, #32]
 8003f8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f8c:	4643      	mov	r3, r8
 8003f8e:	463a      	mov	r2, r7
 8003f90:	4628      	mov	r0, r5
 8003f92:	47b0      	blx	r6
 8003f94:	2800      	cmp	r0, #0
 8003f96:	dc06      	bgt.n	8003fa6 <__sflush_r+0xfe>
 8003f98:	89a3      	ldrh	r3, [r4, #12]
 8003f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f9e:	81a3      	strh	r3, [r4, #12]
 8003fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa4:	e78e      	b.n	8003ec4 <__sflush_r+0x1c>
 8003fa6:	4407      	add	r7, r0
 8003fa8:	eba8 0800 	sub.w	r8, r8, r0
 8003fac:	e7e9      	b.n	8003f82 <__sflush_r+0xda>
 8003fae:	bf00      	nop
 8003fb0:	20400001 	.word	0x20400001

08003fb4 <_fflush_r>:
 8003fb4:	b538      	push	{r3, r4, r5, lr}
 8003fb6:	690b      	ldr	r3, [r1, #16]
 8003fb8:	4605      	mov	r5, r0
 8003fba:	460c      	mov	r4, r1
 8003fbc:	b913      	cbnz	r3, 8003fc4 <_fflush_r+0x10>
 8003fbe:	2500      	movs	r5, #0
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
 8003fc4:	b118      	cbz	r0, 8003fce <_fflush_r+0x1a>
 8003fc6:	6983      	ldr	r3, [r0, #24]
 8003fc8:	b90b      	cbnz	r3, 8003fce <_fflush_r+0x1a>
 8003fca:	f7ff fa15 	bl	80033f8 <__sinit>
 8003fce:	4b14      	ldr	r3, [pc, #80]	; (8004020 <_fflush_r+0x6c>)
 8003fd0:	429c      	cmp	r4, r3
 8003fd2:	d11b      	bne.n	800400c <_fflush_r+0x58>
 8003fd4:	686c      	ldr	r4, [r5, #4]
 8003fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0ef      	beq.n	8003fbe <_fflush_r+0xa>
 8003fde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003fe0:	07d0      	lsls	r0, r2, #31
 8003fe2:	d404      	bmi.n	8003fee <_fflush_r+0x3a>
 8003fe4:	0599      	lsls	r1, r3, #22
 8003fe6:	d402      	bmi.n	8003fee <_fflush_r+0x3a>
 8003fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fea:	f7ff faa3 	bl	8003534 <__retarget_lock_acquire_recursive>
 8003fee:	4628      	mov	r0, r5
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	f7ff ff59 	bl	8003ea8 <__sflush_r>
 8003ff6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ff8:	07da      	lsls	r2, r3, #31
 8003ffa:	4605      	mov	r5, r0
 8003ffc:	d4e0      	bmi.n	8003fc0 <_fflush_r+0xc>
 8003ffe:	89a3      	ldrh	r3, [r4, #12]
 8004000:	059b      	lsls	r3, r3, #22
 8004002:	d4dd      	bmi.n	8003fc0 <_fflush_r+0xc>
 8004004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004006:	f7ff fa96 	bl	8003536 <__retarget_lock_release_recursive>
 800400a:	e7d9      	b.n	8003fc0 <_fflush_r+0xc>
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <_fflush_r+0x70>)
 800400e:	429c      	cmp	r4, r3
 8004010:	d101      	bne.n	8004016 <_fflush_r+0x62>
 8004012:	68ac      	ldr	r4, [r5, #8]
 8004014:	e7df      	b.n	8003fd6 <_fflush_r+0x22>
 8004016:	4b04      	ldr	r3, [pc, #16]	; (8004028 <_fflush_r+0x74>)
 8004018:	429c      	cmp	r4, r3
 800401a:	bf08      	it	eq
 800401c:	68ec      	ldreq	r4, [r5, #12]
 800401e:	e7da      	b.n	8003fd6 <_fflush_r+0x22>
 8004020:	080042cc 	.word	0x080042cc
 8004024:	080042ec 	.word	0x080042ec
 8004028:	080042ac 	.word	0x080042ac

0800402c <_lseek_r>:
 800402c:	b538      	push	{r3, r4, r5, lr}
 800402e:	4d07      	ldr	r5, [pc, #28]	; (800404c <_lseek_r+0x20>)
 8004030:	4604      	mov	r4, r0
 8004032:	4608      	mov	r0, r1
 8004034:	4611      	mov	r1, r2
 8004036:	2200      	movs	r2, #0
 8004038:	602a      	str	r2, [r5, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	f7fc fcc4 	bl	80009c8 <_lseek>
 8004040:	1c43      	adds	r3, r0, #1
 8004042:	d102      	bne.n	800404a <_lseek_r+0x1e>
 8004044:	682b      	ldr	r3, [r5, #0]
 8004046:	b103      	cbz	r3, 800404a <_lseek_r+0x1e>
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	bd38      	pop	{r3, r4, r5, pc}
 800404c:	20000128 	.word	0x20000128

08004050 <__swhatbuf_r>:
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	460e      	mov	r6, r1
 8004054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004058:	2900      	cmp	r1, #0
 800405a:	b096      	sub	sp, #88	; 0x58
 800405c:	4614      	mov	r4, r2
 800405e:	461d      	mov	r5, r3
 8004060:	da08      	bge.n	8004074 <__swhatbuf_r+0x24>
 8004062:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	602a      	str	r2, [r5, #0]
 800406a:	061a      	lsls	r2, r3, #24
 800406c:	d410      	bmi.n	8004090 <__swhatbuf_r+0x40>
 800406e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004072:	e00e      	b.n	8004092 <__swhatbuf_r+0x42>
 8004074:	466a      	mov	r2, sp
 8004076:	f000 f8bb 	bl	80041f0 <_fstat_r>
 800407a:	2800      	cmp	r0, #0
 800407c:	dbf1      	blt.n	8004062 <__swhatbuf_r+0x12>
 800407e:	9a01      	ldr	r2, [sp, #4]
 8004080:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004084:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004088:	425a      	negs	r2, r3
 800408a:	415a      	adcs	r2, r3
 800408c:	602a      	str	r2, [r5, #0]
 800408e:	e7ee      	b.n	800406e <__swhatbuf_r+0x1e>
 8004090:	2340      	movs	r3, #64	; 0x40
 8004092:	2000      	movs	r0, #0
 8004094:	6023      	str	r3, [r4, #0]
 8004096:	b016      	add	sp, #88	; 0x58
 8004098:	bd70      	pop	{r4, r5, r6, pc}
	...

0800409c <__smakebuf_r>:
 800409c:	898b      	ldrh	r3, [r1, #12]
 800409e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80040a0:	079d      	lsls	r5, r3, #30
 80040a2:	4606      	mov	r6, r0
 80040a4:	460c      	mov	r4, r1
 80040a6:	d507      	bpl.n	80040b8 <__smakebuf_r+0x1c>
 80040a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80040ac:	6023      	str	r3, [r4, #0]
 80040ae:	6123      	str	r3, [r4, #16]
 80040b0:	2301      	movs	r3, #1
 80040b2:	6163      	str	r3, [r4, #20]
 80040b4:	b002      	add	sp, #8
 80040b6:	bd70      	pop	{r4, r5, r6, pc}
 80040b8:	ab01      	add	r3, sp, #4
 80040ba:	466a      	mov	r2, sp
 80040bc:	f7ff ffc8 	bl	8004050 <__swhatbuf_r>
 80040c0:	9900      	ldr	r1, [sp, #0]
 80040c2:	4605      	mov	r5, r0
 80040c4:	4630      	mov	r0, r6
 80040c6:	f7ff fa57 	bl	8003578 <_malloc_r>
 80040ca:	b948      	cbnz	r0, 80040e0 <__smakebuf_r+0x44>
 80040cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040d0:	059a      	lsls	r2, r3, #22
 80040d2:	d4ef      	bmi.n	80040b4 <__smakebuf_r+0x18>
 80040d4:	f023 0303 	bic.w	r3, r3, #3
 80040d8:	f043 0302 	orr.w	r3, r3, #2
 80040dc:	81a3      	strh	r3, [r4, #12]
 80040de:	e7e3      	b.n	80040a8 <__smakebuf_r+0xc>
 80040e0:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <__smakebuf_r+0x7c>)
 80040e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80040e4:	89a3      	ldrh	r3, [r4, #12]
 80040e6:	6020      	str	r0, [r4, #0]
 80040e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ec:	81a3      	strh	r3, [r4, #12]
 80040ee:	9b00      	ldr	r3, [sp, #0]
 80040f0:	6163      	str	r3, [r4, #20]
 80040f2:	9b01      	ldr	r3, [sp, #4]
 80040f4:	6120      	str	r0, [r4, #16]
 80040f6:	b15b      	cbz	r3, 8004110 <__smakebuf_r+0x74>
 80040f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040fc:	4630      	mov	r0, r6
 80040fe:	f000 f889 	bl	8004214 <_isatty_r>
 8004102:	b128      	cbz	r0, 8004110 <__smakebuf_r+0x74>
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	f023 0303 	bic.w	r3, r3, #3
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	81a3      	strh	r3, [r4, #12]
 8004110:	89a0      	ldrh	r0, [r4, #12]
 8004112:	4305      	orrs	r5, r0
 8004114:	81a5      	strh	r5, [r4, #12]
 8004116:	e7cd      	b.n	80040b4 <__smakebuf_r+0x18>
 8004118:	08003391 	.word	0x08003391

0800411c <__malloc_lock>:
 800411c:	4801      	ldr	r0, [pc, #4]	; (8004124 <__malloc_lock+0x8>)
 800411e:	f7ff ba09 	b.w	8003534 <__retarget_lock_acquire_recursive>
 8004122:	bf00      	nop
 8004124:	2000011c 	.word	0x2000011c

08004128 <__malloc_unlock>:
 8004128:	4801      	ldr	r0, [pc, #4]	; (8004130 <__malloc_unlock+0x8>)
 800412a:	f7ff ba04 	b.w	8003536 <__retarget_lock_release_recursive>
 800412e:	bf00      	nop
 8004130:	2000011c 	.word	0x2000011c

08004134 <_free_r>:
 8004134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004136:	2900      	cmp	r1, #0
 8004138:	d044      	beq.n	80041c4 <_free_r+0x90>
 800413a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800413e:	9001      	str	r0, [sp, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	f1a1 0404 	sub.w	r4, r1, #4
 8004146:	bfb8      	it	lt
 8004148:	18e4      	addlt	r4, r4, r3
 800414a:	f7ff ffe7 	bl	800411c <__malloc_lock>
 800414e:	4a1e      	ldr	r2, [pc, #120]	; (80041c8 <_free_r+0x94>)
 8004150:	9801      	ldr	r0, [sp, #4]
 8004152:	6813      	ldr	r3, [r2, #0]
 8004154:	b933      	cbnz	r3, 8004164 <_free_r+0x30>
 8004156:	6063      	str	r3, [r4, #4]
 8004158:	6014      	str	r4, [r2, #0]
 800415a:	b003      	add	sp, #12
 800415c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004160:	f7ff bfe2 	b.w	8004128 <__malloc_unlock>
 8004164:	42a3      	cmp	r3, r4
 8004166:	d908      	bls.n	800417a <_free_r+0x46>
 8004168:	6825      	ldr	r5, [r4, #0]
 800416a:	1961      	adds	r1, r4, r5
 800416c:	428b      	cmp	r3, r1
 800416e:	bf01      	itttt	eq
 8004170:	6819      	ldreq	r1, [r3, #0]
 8004172:	685b      	ldreq	r3, [r3, #4]
 8004174:	1949      	addeq	r1, r1, r5
 8004176:	6021      	streq	r1, [r4, #0]
 8004178:	e7ed      	b.n	8004156 <_free_r+0x22>
 800417a:	461a      	mov	r2, r3
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	b10b      	cbz	r3, 8004184 <_free_r+0x50>
 8004180:	42a3      	cmp	r3, r4
 8004182:	d9fa      	bls.n	800417a <_free_r+0x46>
 8004184:	6811      	ldr	r1, [r2, #0]
 8004186:	1855      	adds	r5, r2, r1
 8004188:	42a5      	cmp	r5, r4
 800418a:	d10b      	bne.n	80041a4 <_free_r+0x70>
 800418c:	6824      	ldr	r4, [r4, #0]
 800418e:	4421      	add	r1, r4
 8004190:	1854      	adds	r4, r2, r1
 8004192:	42a3      	cmp	r3, r4
 8004194:	6011      	str	r1, [r2, #0]
 8004196:	d1e0      	bne.n	800415a <_free_r+0x26>
 8004198:	681c      	ldr	r4, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	6053      	str	r3, [r2, #4]
 800419e:	4421      	add	r1, r4
 80041a0:	6011      	str	r1, [r2, #0]
 80041a2:	e7da      	b.n	800415a <_free_r+0x26>
 80041a4:	d902      	bls.n	80041ac <_free_r+0x78>
 80041a6:	230c      	movs	r3, #12
 80041a8:	6003      	str	r3, [r0, #0]
 80041aa:	e7d6      	b.n	800415a <_free_r+0x26>
 80041ac:	6825      	ldr	r5, [r4, #0]
 80041ae:	1961      	adds	r1, r4, r5
 80041b0:	428b      	cmp	r3, r1
 80041b2:	bf04      	itt	eq
 80041b4:	6819      	ldreq	r1, [r3, #0]
 80041b6:	685b      	ldreq	r3, [r3, #4]
 80041b8:	6063      	str	r3, [r4, #4]
 80041ba:	bf04      	itt	eq
 80041bc:	1949      	addeq	r1, r1, r5
 80041be:	6021      	streq	r1, [r4, #0]
 80041c0:	6054      	str	r4, [r2, #4]
 80041c2:	e7ca      	b.n	800415a <_free_r+0x26>
 80041c4:	b003      	add	sp, #12
 80041c6:	bd30      	pop	{r4, r5, pc}
 80041c8:	20000120 	.word	0x20000120

080041cc <_read_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4d07      	ldr	r5, [pc, #28]	; (80041ec <_read_r+0x20>)
 80041d0:	4604      	mov	r4, r0
 80041d2:	4608      	mov	r0, r1
 80041d4:	4611      	mov	r1, r2
 80041d6:	2200      	movs	r2, #0
 80041d8:	602a      	str	r2, [r5, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	f7fc fbb0 	bl	8000940 <_read>
 80041e0:	1c43      	adds	r3, r0, #1
 80041e2:	d102      	bne.n	80041ea <_read_r+0x1e>
 80041e4:	682b      	ldr	r3, [r5, #0]
 80041e6:	b103      	cbz	r3, 80041ea <_read_r+0x1e>
 80041e8:	6023      	str	r3, [r4, #0]
 80041ea:	bd38      	pop	{r3, r4, r5, pc}
 80041ec:	20000128 	.word	0x20000128

080041f0 <_fstat_r>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	4d07      	ldr	r5, [pc, #28]	; (8004210 <_fstat_r+0x20>)
 80041f4:	2300      	movs	r3, #0
 80041f6:	4604      	mov	r4, r0
 80041f8:	4608      	mov	r0, r1
 80041fa:	4611      	mov	r1, r2
 80041fc:	602b      	str	r3, [r5, #0]
 80041fe:	f7fc fbc8 	bl	8000992 <_fstat>
 8004202:	1c43      	adds	r3, r0, #1
 8004204:	d102      	bne.n	800420c <_fstat_r+0x1c>
 8004206:	682b      	ldr	r3, [r5, #0]
 8004208:	b103      	cbz	r3, 800420c <_fstat_r+0x1c>
 800420a:	6023      	str	r3, [r4, #0]
 800420c:	bd38      	pop	{r3, r4, r5, pc}
 800420e:	bf00      	nop
 8004210:	20000128 	.word	0x20000128

08004214 <_isatty_r>:
 8004214:	b538      	push	{r3, r4, r5, lr}
 8004216:	4d06      	ldr	r5, [pc, #24]	; (8004230 <_isatty_r+0x1c>)
 8004218:	2300      	movs	r3, #0
 800421a:	4604      	mov	r4, r0
 800421c:	4608      	mov	r0, r1
 800421e:	602b      	str	r3, [r5, #0]
 8004220:	f7fc fbc7 	bl	80009b2 <_isatty>
 8004224:	1c43      	adds	r3, r0, #1
 8004226:	d102      	bne.n	800422e <_isatty_r+0x1a>
 8004228:	682b      	ldr	r3, [r5, #0]
 800422a:	b103      	cbz	r3, 800422e <_isatty_r+0x1a>
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	bd38      	pop	{r3, r4, r5, pc}
 8004230:	20000128 	.word	0x20000128

08004234 <_init>:
 8004234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004236:	bf00      	nop
 8004238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423a:	bc08      	pop	{r3}
 800423c:	469e      	mov	lr, r3
 800423e:	4770      	bx	lr

08004240 <_fini>:
 8004240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004242:	bf00      	nop
 8004244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004246:	bc08      	pop	{r3}
 8004248:	469e      	mov	lr, r3
 800424a:	4770      	bx	lr
