
task11Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004234  08004234  00014234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004334  08004334  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004334  08004334  00014334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800433c  0800433c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800433c  0800433c  0001433c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004340  08004340  00014340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  080043b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  080043b4  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b24e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a70  00000000  00000000  0002b2ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002cd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002d710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d35  00000000  00000000  0002e008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b782  00000000  00000000  00054d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eadbd  00000000  00000000  000604bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b27c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e04  00000000  00000000  0014b2cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800421c 	.word	0x0800421c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800421c 	.word	0x0800421c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <RingBuffer_Init>:
static uint8_t RingBuffer[SIZE_OF_RING]= {0};
static uint8_t  tail;
static uint8_t  head;

void RingBuffer_Init()
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  tail = 0;
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <RingBuffer_Init+0x28>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
  head= 0;
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <RingBuffer_Init+0x2c>)
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
  RingBuffer[tail] = 0;
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <RingBuffer_Init+0x28>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	461a      	mov	r2, r3
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <RingBuffer_Init+0x30>)
 800058c:	2100      	movs	r1, #0
 800058e:	5499      	strb	r1, [r3, r2]
} 
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	200000a0 	.word	0x200000a0
 80005a0:	200000a1 	.word	0x200000a1
 80005a4:	2000008c 	.word	0x2000008c

080005a8 <RingBuffer_IsEmpty>:


int RingBuffer_IsEmpty()
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  if(tail == head)
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <RingBuffer_IsEmpty+0x20>)
 80005ae:	781a      	ldrb	r2, [r3, #0]
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <RingBuffer_IsEmpty+0x24>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d101      	bne.n	80005bc <RingBuffer_IsEmpty+0x14>
  {
	  return 1;
 80005b8:	2301      	movs	r3, #1
 80005ba:	e000      	b.n	80005be <RingBuffer_IsEmpty+0x16>
  }
  return 0;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	200000a0 	.word	0x200000a0
 80005cc:	200000a1 	.word	0x200000a1

080005d0 <RingBuffer_IsFull>:

int RingBuffer_IsFull()
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
   if((tail +1) == head )
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <RingBuffer_IsFull+0x24>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <RingBuffer_IsFull+0x28>)
 80005dc:	7812      	ldrb	r2, [r2, #0]
 80005de:	4293      	cmp	r3, r2
 80005e0:	d101      	bne.n	80005e6 <RingBuffer_IsFull+0x16>
	 {
	  return 1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	e000      	b.n	80005e8 <RingBuffer_IsFull+0x18>
	 }
	  return 0;
 80005e6:	2300      	movs	r3, #0
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200000a0 	.word	0x200000a0
 80005f8:	200000a1 	.word	0x200000a1

080005fc <RingBuffer_FreeSpace>:

int RingBuffer_FreeSpace()
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
	uint8_t free;
	if (tail > head)
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <RingBuffer_FreeSpace+0x58>)
 8000604:	781a      	ldrb	r2, [r3, #0]
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <RingBuffer_FreeSpace+0x5c>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	429a      	cmp	r2, r3
 800060c:	d906      	bls.n	800061c <RingBuffer_FreeSpace+0x20>
	{
		free=tail-head;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <RingBuffer_FreeSpace+0x58>)
 8000610:	781a      	ldrb	r2, [r3, #0]
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <RingBuffer_FreeSpace+0x5c>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	71fb      	strb	r3, [r7, #7]
 800061a:	e014      	b.n	8000646 <RingBuffer_FreeSpace+0x4a>
	}

	else if (tail < head)
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <RingBuffer_FreeSpace+0x58>)
 800061e:	781a      	ldrb	r2, [r3, #0]
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <RingBuffer_FreeSpace+0x5c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	429a      	cmp	r2, r3
 8000626:	d206      	bcs.n	8000636 <RingBuffer_FreeSpace+0x3a>
	{
	  free= head-tail;
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <RingBuffer_FreeSpace+0x5c>)
 800062a:	781a      	ldrb	r2, [r3, #0]
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <RingBuffer_FreeSpace+0x58>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	e007      	b.n	8000646 <RingBuffer_FreeSpace+0x4a>
	}

	else if (tail == head)
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <RingBuffer_FreeSpace+0x58>)
 8000638:	781a      	ldrb	r2, [r3, #0]
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <RingBuffer_FreeSpace+0x5c>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	429a      	cmp	r2, r3
 8000640:	d101      	bne.n	8000646 <RingBuffer_FreeSpace+0x4a>
	{
	  free = SIZE_OF_RING;
 8000642:	2314      	movs	r3, #20
 8000644:	71fb      	strb	r3, [r7, #7]
	}

	return free;
 8000646:	79fb      	ldrb	r3, [r7, #7]
}
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	200000a0 	.word	0x200000a0
 8000658:	200000a1 	.word	0x200000a1

0800065c <_write>:

/////////////////////////////////////////////////////////////////////////
// REdirecting printf to UART
/////////////////////////////////////////////////////////////////////////
int _write(int fd, char* ptr, int len)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	b29a      	uxth	r2, r3
 800066c:	f04f 33ff 	mov.w	r3, #4294967295
 8000670:	68b9      	ldr	r1, [r7, #8]
 8000672:	4804      	ldr	r0, [pc, #16]	; (8000684 <_write+0x28>)
 8000674:	f002 f916 	bl	80028a4 <HAL_UART_Transmit>
    return len;
 8000678:	687b      	ldr	r3, [r7, #4]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200000a4 	.word	0x200000a4

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f000 fa77 	bl	8000b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f819 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f000 f899 	bl	80007cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800069a:	f000 f867 	bl	800076c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

    RingBuffer_Init();
 800069e:	f7ff ff69 	bl	8000574 <RingBuffer_Init>
    int empty= RingBuffer_IsEmpty();
 80006a2:	f7ff ff81 	bl	80005a8 <RingBuffer_IsEmpty>
 80006a6:	60f8      	str	r0, [r7, #12]
    int full= RingBuffer_IsFull();
 80006a8:	f7ff ff92 	bl	80005d0 <RingBuffer_IsFull>
 80006ac:	60b8      	str	r0, [r7, #8]
    int free= RingBuffer_FreeSpace();
 80006ae:	f7ff ffa5 	bl	80005fc <RingBuffer_FreeSpace>
 80006b2:	6078      	str	r0, [r7, #4]
    printf("empty=%d\n\r full=%d\n\r free=%d\n\r", empty , full, free);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	68f9      	ldr	r1, [r7, #12]
 80006ba:	4802      	ldr	r0, [pc, #8]	; (80006c4 <main+0x3c>)
 80006bc:	f002 fe20 	bl	8003300 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <main+0x38>
 80006c2:	bf00      	nop
 80006c4:	08004234 	.word	0x08004234

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b096      	sub	sp, #88	; 0x58
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2244      	movs	r2, #68	; 0x44
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fe0a 	bl	80032f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	463b      	mov	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ee:	f000 fd79 	bl	80011e4 <HAL_PWREx_ControlVoltageScaling>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006f8:	f000 f8ce 	bl	8000898 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000704:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000706:	2310      	movs	r3, #16
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070e:	2302      	movs	r3, #2
 8000710:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000712:	2301      	movs	r3, #1
 8000714:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000716:	230a      	movs	r3, #10
 8000718:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800071a:	2307      	movs	r3, #7
 800071c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000722:	2302      	movs	r3, #2
 8000724:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fdb0 	bl	8001290 <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000736:	f000 f8af 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	230f      	movs	r3, #15
 800073c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2303      	movs	r3, #3
 8000740:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	2104      	movs	r1, #4
 8000752:	4618      	mov	r0, r3
 8000754:	f001 f978 	bl	8001a48 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800075e:	f000 f89b 	bl	8000898 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3758      	adds	r7, #88	; 0x58
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000772:	4a15      	ldr	r2, [pc, #84]	; (80007c8 <MX_USART2_UART_Init+0x5c>)
 8000774:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800077c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 80007b0:	f002 f82a 	bl	8002808 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ba:	f000 f86d 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000a4 	.word	0x200000a4
 80007c8:	40004400 	.word	0x40004400

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <MX_GPIO_Init+0xc4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a2a      	ldr	r2, [pc, #168]	; (8000890 <MX_GPIO_Init+0xc4>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b28      	ldr	r3, [pc, #160]	; (8000890 <MX_GPIO_Init+0xc4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	4b25      	ldr	r3, [pc, #148]	; (8000890 <MX_GPIO_Init+0xc4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a24      	ldr	r2, [pc, #144]	; (8000890 <MX_GPIO_Init+0xc4>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <MX_GPIO_Init+0xc4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_GPIO_Init+0xc4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a1e      	ldr	r2, [pc, #120]	; (8000890 <MX_GPIO_Init+0xc4>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <MX_GPIO_Init+0xc4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_GPIO_Init+0xc4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a18      	ldr	r2, [pc, #96]	; (8000890 <MX_GPIO_Init+0xc4>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_GPIO_Init+0xc4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f000 fca5 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000854:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	480b      	ldr	r0, [pc, #44]	; (8000894 <MX_GPIO_Init+0xc8>)
 8000866:	f000 faed 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800086a:	2320      	movs	r3, #32
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000884:	f000 fade 	bl	8000e44 <HAL_GPIO_Init>

}
 8000888:	bf00      	nop
 800088a:	3728      	adds	r7, #40	; 0x28
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40021000 	.word	0x40021000
 8000894:	48000800 	.word	0x48000800

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <Error_Handler+0x8>
	...

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <HAL_MspInit+0x44>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ae:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <HAL_MspInit+0x44>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6613      	str	r3, [r2, #96]	; 0x60
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <HAL_MspInit+0x44>)
 80008b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_MspInit+0x44>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_MspInit+0x44>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	6593      	str	r3, [r2, #88]	; 0x58
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_MspInit+0x44>)
 80008d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0ac      	sub	sp, #176	; 0xb0
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2288      	movs	r2, #136	; 0x88
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f002 fcef 	bl	80032f0 <memset>
  if(huart->Instance==USART2)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a21      	ldr	r2, [pc, #132]	; (800099c <HAL_UART_MspInit+0xb0>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d13b      	bne.n	8000994 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800091c:	2302      	movs	r3, #2
 800091e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000920:	2300      	movs	r3, #0
 8000922:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4618      	mov	r0, r3
 800092a:	f001 fab1 	bl	8001e90 <HAL_RCCEx_PeriphCLKConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000934:	f7ff ffb0 	bl	8000898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000938:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <HAL_UART_MspInit+0xb4>)
 800093a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093c:	4a18      	ldr	r2, [pc, #96]	; (80009a0 <HAL_UART_MspInit+0xb4>)
 800093e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000942:	6593      	str	r3, [r2, #88]	; 0x58
 8000944:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <HAL_UART_MspInit+0xb4>)
 8000946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <HAL_UART_MspInit+0xb4>)
 8000952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000954:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <HAL_UART_MspInit+0xb4>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095c:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_UART_MspInit+0xb4>)
 800095e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000968:	230c      	movs	r3, #12
 800096a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000980:	2307      	movs	r3, #7
 8000982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800098a:	4619      	mov	r1, r3
 800098c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000990:	f000 fa58 	bl	8000e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000994:	bf00      	nop
 8000996:	37b0      	adds	r7, #176	; 0xb0
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40004400 	.word	0x40004400
 80009a0:	40021000 	.word	0x40021000

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler+0x4>

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <MemManage_Handler+0x4>

080009b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 f922 	bl	8000c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	e00a      	b.n	8000a20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a0a:	f3af 8000 	nop.w
 8000a0e:	4601      	mov	r1, r0
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	60ba      	str	r2, [r7, #8]
 8000a16:	b2ca      	uxtb	r2, r1
 8000a18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dbf0      	blt.n	8000a0a <_read+0x12>
	}

return len;
 8000a28:	687b      	ldr	r3, [r7, #4]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
	return -1;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <_isatty>:

int _isatty(int file)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
	return 1;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa4:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <_sbrk+0x5c>)
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <_sbrk+0x60>)
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <_sbrk+0x64>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <_sbrk+0x68>)
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d207      	bcs.n	8000adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000acc:	f002 fbe6 	bl	800329c <__errno>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	e009      	b.n	8000af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <_sbrk+0x64>)
 8000aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20018000 	.word	0x20018000
 8000afc:	00000400 	.word	0x00000400
 8000b00:	20000128 	.word	0x20000128
 8000b04:	20000140 	.word	0x20000140

08000b08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <SystemInit+0x20>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <SystemInit+0x20>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b30:	f7ff ffea 	bl	8000b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b36:	490d      	ldr	r1, [pc, #52]	; (8000b6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <LoopForever+0xe>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b4c:	4c0a      	ldr	r4, [pc, #40]	; (8000b78 <LoopForever+0x16>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f002 fba5 	bl	80032a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b5e:	f7ff fd93 	bl	8000688 <main>

08000b62 <LoopForever>:

LoopForever:
    b LoopForever
 8000b62:	e7fe      	b.n	8000b62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b70:	08004344 	.word	0x08004344
  ldr r2, =_sbss
 8000b74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b78:	20000140 	.word	0x20000140

08000b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC1_2_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_Init+0x3c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <HAL_Init+0x3c>)
 8000b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b96:	2003      	movs	r0, #3
 8000b98:	f000 f920 	bl	8000ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f000 f80f 	bl	8000bc0 <HAL_InitTick>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d002      	beq.n	8000bae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	e001      	b.n	8000bb2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bae:	f7ff fe79 	bl	80008a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40022000 	.word	0x40022000

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <HAL_InitTick+0x6c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d023      	beq.n	8000c1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <HAL_InitTick+0x70>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_InitTick+0x6c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f91d 	bl	8000e2a <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d10f      	bne.n	8000c16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b0f      	cmp	r3, #15
 8000bfa:	d809      	bhi.n	8000c10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f000 f8f5 	bl	8000df2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_InitTick+0x74>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	e007      	b.n	8000c20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	73fb      	strb	r3, [r7, #15]
 8000c14:	e004      	b.n	8000c20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	73fb      	strb	r3, [r7, #15]
 8000c1a:	e001      	b.n	8000c20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000000 	.word	0x20000000
 8000c34:	20000004 	.word	0x20000004

08000c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x20>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x24>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_IncTick+0x24>)
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	2000012c 	.word	0x2000012c

08000c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <HAL_GetTick+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	2000012c 	.word	0x2000012c

08000c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000caa:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	60d3      	str	r3, [r2, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	f003 0307 	and.w	r3, r3, #7
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	db0a      	blt.n	8000d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	490c      	ldr	r1, [pc, #48]	; (8000d28 <__NVIC_SetPriority+0x4c>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	0112      	lsls	r2, r2, #4
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	440b      	add	r3, r1
 8000d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d04:	e00a      	b.n	8000d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4908      	ldr	r1, [pc, #32]	; (8000d2c <__NVIC_SetPriority+0x50>)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	f003 030f 	and.w	r3, r3, #15
 8000d12:	3b04      	subs	r3, #4
 8000d14:	0112      	lsls	r2, r2, #4
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	440b      	add	r3, r1
 8000d1a:	761a      	strb	r2, [r3, #24]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000e100 	.word	0xe000e100
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	; 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f1c3 0307 	rsb	r3, r3, #7
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	bf28      	it	cs
 8000d4e:	2304      	movcs	r3, #4
 8000d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3304      	adds	r3, #4
 8000d56:	2b06      	cmp	r3, #6
 8000d58:	d902      	bls.n	8000d60 <NVIC_EncodePriority+0x30>
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3b03      	subs	r3, #3
 8000d5e:	e000      	b.n	8000d62 <NVIC_EncodePriority+0x32>
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	f04f 32ff 	mov.w	r2, #4294967295
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	401a      	ands	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d78:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d82:	43d9      	mvns	r1, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	4313      	orrs	r3, r2
         );
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3724      	adds	r7, #36	; 0x24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da8:	d301      	bcc.n	8000dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00f      	b.n	8000dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <SysTick_Config+0x40>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db6:	210f      	movs	r1, #15
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f7ff ff8e 	bl	8000cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <SysTick_Config+0x40>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <SysTick_Config+0x40>)
 8000dc8:	2207      	movs	r2, #7
 8000dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	e000e010 	.word	0xe000e010

08000ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff ff47 	bl	8000c78 <__NVIC_SetPriorityGrouping>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e04:	f7ff ff5c 	bl	8000cc0 <__NVIC_GetPriorityGrouping>
 8000e08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	6978      	ldr	r0, [r7, #20]
 8000e10:	f7ff ff8e 	bl	8000d30 <NVIC_EncodePriority>
 8000e14:	4602      	mov	r2, r0
 8000e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff5d 	bl	8000cdc <__NVIC_SetPriority>
}
 8000e22:	bf00      	nop
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ffb0 	bl	8000d98 <SysTick_Config>
 8000e38:	4603      	mov	r3, r0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e52:	e17f      	b.n	8001154 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	2101      	movs	r1, #1
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e60:	4013      	ands	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 8171 	beq.w	800114e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d005      	beq.n	8000e84 <HAL_GPIO_Init+0x40>
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d130      	bne.n	8000ee6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	2203      	movs	r2, #3
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	68da      	ldr	r2, [r3, #12]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eba:	2201      	movs	r2, #1
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	091b      	lsrs	r3, r3, #4
 8000ed0:	f003 0201 	and.w	r2, r3, #1
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d118      	bne.n	8000f24 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ef8:	2201      	movs	r2, #1
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	08db      	lsrs	r3, r3, #3
 8000f0e:	f003 0201 	and.w	r2, r3, #1
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d017      	beq.n	8000f60 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d123      	bne.n	8000fb4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	08da      	lsrs	r2, r3, #3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3208      	adds	r2, #8
 8000f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	691a      	ldr	r2, [r3, #16]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3208      	adds	r2, #8
 8000fae:	6939      	ldr	r1, [r7, #16]
 8000fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0203 	and.w	r2, r3, #3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 80ac 	beq.w	800114e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4b5f      	ldr	r3, [pc, #380]	; (8001174 <HAL_GPIO_Init+0x330>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffa:	4a5e      	ldr	r2, [pc, #376]	; (8001174 <HAL_GPIO_Init+0x330>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6613      	str	r3, [r2, #96]	; 0x60
 8001002:	4b5c      	ldr	r3, [pc, #368]	; (8001174 <HAL_GPIO_Init+0x330>)
 8001004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800100e:	4a5a      	ldr	r2, [pc, #360]	; (8001178 <HAL_GPIO_Init+0x334>)
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	3302      	adds	r3, #2
 8001016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	220f      	movs	r2, #15
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001038:	d025      	beq.n	8001086 <HAL_GPIO_Init+0x242>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4f      	ldr	r2, [pc, #316]	; (800117c <HAL_GPIO_Init+0x338>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d01f      	beq.n	8001082 <HAL_GPIO_Init+0x23e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4e      	ldr	r2, [pc, #312]	; (8001180 <HAL_GPIO_Init+0x33c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d019      	beq.n	800107e <HAL_GPIO_Init+0x23a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4d      	ldr	r2, [pc, #308]	; (8001184 <HAL_GPIO_Init+0x340>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0x236>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4c      	ldr	r2, [pc, #304]	; (8001188 <HAL_GPIO_Init+0x344>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d00d      	beq.n	8001076 <HAL_GPIO_Init+0x232>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4b      	ldr	r2, [pc, #300]	; (800118c <HAL_GPIO_Init+0x348>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d007      	beq.n	8001072 <HAL_GPIO_Init+0x22e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4a      	ldr	r2, [pc, #296]	; (8001190 <HAL_GPIO_Init+0x34c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_GPIO_Init+0x22a>
 800106a:	2306      	movs	r3, #6
 800106c:	e00c      	b.n	8001088 <HAL_GPIO_Init+0x244>
 800106e:	2307      	movs	r3, #7
 8001070:	e00a      	b.n	8001088 <HAL_GPIO_Init+0x244>
 8001072:	2305      	movs	r3, #5
 8001074:	e008      	b.n	8001088 <HAL_GPIO_Init+0x244>
 8001076:	2304      	movs	r3, #4
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x244>
 800107a:	2303      	movs	r3, #3
 800107c:	e004      	b.n	8001088 <HAL_GPIO_Init+0x244>
 800107e:	2302      	movs	r3, #2
 8001080:	e002      	b.n	8001088 <HAL_GPIO_Init+0x244>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_GPIO_Init+0x244>
 8001086:	2300      	movs	r3, #0
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	f002 0203 	and.w	r2, r2, #3
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	4093      	lsls	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001098:	4937      	ldr	r1, [pc, #220]	; (8001178 <HAL_GPIO_Init+0x334>)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3302      	adds	r3, #2
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010a6:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <HAL_GPIO_Init+0x350>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010ca:	4a32      	ldr	r2, [pc, #200]	; (8001194 <HAL_GPIO_Init+0x350>)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010d0:	4b30      	ldr	r3, [pc, #192]	; (8001194 <HAL_GPIO_Init+0x350>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010f4:	4a27      	ldr	r2, [pc, #156]	; (8001194 <HAL_GPIO_Init+0x350>)
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010fa:	4b26      	ldr	r3, [pc, #152]	; (8001194 <HAL_GPIO_Init+0x350>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800111e:	4a1d      	ldr	r2, [pc, #116]	; (8001194 <HAL_GPIO_Init+0x350>)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <HAL_GPIO_Init+0x350>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	43db      	mvns	r3, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001148:	4a12      	ldr	r2, [pc, #72]	; (8001194 <HAL_GPIO_Init+0x350>)
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa22 f303 	lsr.w	r3, r2, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	f47f ae78 	bne.w	8000e54 <HAL_GPIO_Init+0x10>
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	371c      	adds	r7, #28
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000
 8001178:	40010000 	.word	0x40010000
 800117c:	48000400 	.word	0x48000400
 8001180:	48000800 	.word	0x48000800
 8001184:	48000c00 	.word	0x48000c00
 8001188:	48001000 	.word	0x48001000
 800118c:	48001400 	.word	0x48001400
 8001190:	48001800 	.word	0x48001800
 8001194:	40010400 	.word	0x40010400

08001198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
 80011a4:	4613      	mov	r3, r2
 80011a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a8:	787b      	ldrb	r3, [r7, #1]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ae:	887a      	ldrh	r2, [r7, #2]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011b4:	e002      	b.n	80011bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40007000 	.word	0x40007000

080011e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011f2:	d130      	bne.n	8001256 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f4:	4b23      	ldr	r3, [pc, #140]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001200:	d038      	beq.n	8001274 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800120a:	4a1e      	ldr	r2, [pc, #120]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001210:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001212:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2232      	movs	r2, #50	; 0x32
 8001218:	fb02 f303 	mul.w	r3, r2, r3
 800121c:	4a1b      	ldr	r2, [pc, #108]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800121e:	fba2 2303 	umull	r2, r3, r2, r3
 8001222:	0c9b      	lsrs	r3, r3, #18
 8001224:	3301      	adds	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001228:	e002      	b.n	8001230 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3b01      	subs	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800123c:	d102      	bne.n	8001244 <HAL_PWREx_ControlVoltageScaling+0x60>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f2      	bne.n	800122a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800124c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001250:	d110      	bne.n	8001274 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e00f      	b.n	8001276 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800125e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001262:	d007      	beq.n	8001274 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800126c:	4a05      	ldr	r2, [pc, #20]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001272:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40007000 	.word	0x40007000
 8001288:	20000000 	.word	0x20000000
 800128c:	431bde83 	.word	0x431bde83

08001290 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e3ca      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012a2:	4b97      	ldr	r3, [pc, #604]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ac:	4b94      	ldr	r3, [pc, #592]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 80e4 	beq.w	800148c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d007      	beq.n	80012da <HAL_RCC_OscConfig+0x4a>
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	2b0c      	cmp	r3, #12
 80012ce:	f040 808b 	bne.w	80013e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	f040 8087 	bne.w	80013e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012da:	4b89      	ldr	r3, [pc, #548]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <HAL_RCC_OscConfig+0x62>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e3a2      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1a      	ldr	r2, [r3, #32]
 80012f6:	4b82      	ldr	r3, [pc, #520]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d004      	beq.n	800130c <HAL_RCC_OscConfig+0x7c>
 8001302:	4b7f      	ldr	r3, [pc, #508]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800130a:	e005      	b.n	8001318 <HAL_RCC_OscConfig+0x88>
 800130c:	4b7c      	ldr	r3, [pc, #496]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 800130e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001318:	4293      	cmp	r3, r2
 800131a:	d223      	bcs.n	8001364 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	4618      	mov	r0, r3
 8001322:	f000 fd55 	bl	8001dd0 <RCC_SetFlashLatencyFromMSIRange>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e383      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001330:	4b73      	ldr	r3, [pc, #460]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a72      	ldr	r2, [pc, #456]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 8001336:	f043 0308 	orr.w	r3, r3, #8
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b70      	ldr	r3, [pc, #448]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	496d      	ldr	r1, [pc, #436]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 800134a:	4313      	orrs	r3, r2
 800134c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800134e:	4b6c      	ldr	r3, [pc, #432]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	4968      	ldr	r1, [pc, #416]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 800135e:	4313      	orrs	r3, r2
 8001360:	604b      	str	r3, [r1, #4]
 8001362:	e025      	b.n	80013b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001364:	4b66      	ldr	r3, [pc, #408]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a65      	ldr	r2, [pc, #404]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 800136a:	f043 0308 	orr.w	r3, r3, #8
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b63      	ldr	r3, [pc, #396]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4960      	ldr	r1, [pc, #384]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001382:	4b5f      	ldr	r3, [pc, #380]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	495b      	ldr	r1, [pc, #364]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 8001392:	4313      	orrs	r3, r2
 8001394:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d109      	bne.n	80013b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fd15 	bl	8001dd0 <RCC_SetFlashLatencyFromMSIRange>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e343      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013b0:	f000 fc4a 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 80013b4:	4602      	mov	r2, r0
 80013b6:	4b52      	ldr	r3, [pc, #328]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	f003 030f 	and.w	r3, r3, #15
 80013c0:	4950      	ldr	r1, [pc, #320]	; (8001504 <HAL_RCC_OscConfig+0x274>)
 80013c2:	5ccb      	ldrb	r3, [r1, r3]
 80013c4:	f003 031f 	and.w	r3, r3, #31
 80013c8:	fa22 f303 	lsr.w	r3, r2, r3
 80013cc:	4a4e      	ldr	r2, [pc, #312]	; (8001508 <HAL_RCC_OscConfig+0x278>)
 80013ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013d0:	4b4e      	ldr	r3, [pc, #312]	; (800150c <HAL_RCC_OscConfig+0x27c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fbf3 	bl	8000bc0 <HAL_InitTick>
 80013da:	4603      	mov	r3, r0
 80013dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d052      	beq.n	800148a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	e327      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d032      	beq.n	8001456 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013f0:	4b43      	ldr	r3, [pc, #268]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a42      	ldr	r2, [pc, #264]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fc30 	bl	8000c60 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001404:	f7ff fc2c 	bl	8000c60 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e310      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001416:	4b3a      	ldr	r3, [pc, #232]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001422:	4b37      	ldr	r3, [pc, #220]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a36      	ldr	r2, [pc, #216]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 8001428:	f043 0308 	orr.w	r3, r3, #8
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b34      	ldr	r3, [pc, #208]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	4931      	ldr	r1, [pc, #196]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001440:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	492c      	ldr	r1, [pc, #176]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
 8001454:	e01a      	b.n	800148c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001456:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a29      	ldr	r2, [pc, #164]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 800145c:	f023 0301 	bic.w	r3, r3, #1
 8001460:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001462:	f7ff fbfd 	bl	8000c60 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800146a:	f7ff fbf9 	bl	8000c60 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e2dd      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800147c:	4b20      	ldr	r3, [pc, #128]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f0      	bne.n	800146a <HAL_RCC_OscConfig+0x1da>
 8001488:	e000      	b.n	800148c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800148a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b00      	cmp	r3, #0
 8001496:	d074      	beq.n	8001582 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	2b08      	cmp	r3, #8
 800149c:	d005      	beq.n	80014aa <HAL_RCC_OscConfig+0x21a>
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2b0c      	cmp	r3, #12
 80014a2:	d10e      	bne.n	80014c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d10b      	bne.n	80014c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d064      	beq.n	8001580 <HAL_RCC_OscConfig+0x2f0>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d160      	bne.n	8001580 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e2ba      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ca:	d106      	bne.n	80014da <HAL_RCC_OscConfig+0x24a>
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 80014d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	e026      	b.n	8001528 <HAL_RCC_OscConfig+0x298>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014e2:	d115      	bne.n	8001510 <HAL_RCC_OscConfig+0x280>
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a05      	ldr	r2, [pc, #20]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 80014ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a02      	ldr	r2, [pc, #8]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 80014f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	e014      	b.n	8001528 <HAL_RCC_OscConfig+0x298>
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000
 8001504:	08004254 	.word	0x08004254
 8001508:	20000000 	.word	0x20000000
 800150c:	20000004 	.word	0x20000004
 8001510:	4ba0      	ldr	r3, [pc, #640]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a9f      	ldr	r2, [pc, #636]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 8001516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b9d      	ldr	r3, [pc, #628]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a9c      	ldr	r2, [pc, #624]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 8001522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d013      	beq.n	8001558 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff fb96 	bl	8000c60 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fb92 	bl	8000c60 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	; 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e276      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800154a:	4b92      	ldr	r3, [pc, #584]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0x2a8>
 8001556:	e014      	b.n	8001582 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fb82 	bl	8000c60 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fb7e 	bl	8000c60 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	; 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e262      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001572:	4b88      	ldr	r3, [pc, #544]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x2d0>
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d060      	beq.n	8001650 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2b04      	cmp	r3, #4
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_OscConfig+0x310>
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2b0c      	cmp	r3, #12
 8001598:	d119      	bne.n	80015ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d116      	bne.n	80015ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a0:	4b7c      	ldr	r3, [pc, #496]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_OscConfig+0x328>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e23f      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b8:	4b76      	ldr	r3, [pc, #472]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	061b      	lsls	r3, r3, #24
 80015c6:	4973      	ldr	r1, [pc, #460]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015cc:	e040      	b.n	8001650 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d023      	beq.n	800161e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d6:	4b6f      	ldr	r3, [pc, #444]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a6e      	ldr	r2, [pc, #440]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 80015dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff fb3d 	bl	8000c60 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ea:	f7ff fb39 	bl	8000c60 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e21d      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015fc:	4b65      	ldr	r3, [pc, #404]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001608:	4b62      	ldr	r3, [pc, #392]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	061b      	lsls	r3, r3, #24
 8001616:	495f      	ldr	r1, [pc, #380]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 8001618:	4313      	orrs	r3, r2
 800161a:	604b      	str	r3, [r1, #4]
 800161c:	e018      	b.n	8001650 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161e:	4b5d      	ldr	r3, [pc, #372]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a5c      	ldr	r2, [pc, #368]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 8001624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162a:	f7ff fb19 	bl	8000c60 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff fb15 	bl	8000c60 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e1f9      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001644:	4b53      	ldr	r3, [pc, #332]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f0      	bne.n	8001632 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b00      	cmp	r3, #0
 800165a:	d03c      	beq.n	80016d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d01c      	beq.n	800169e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001664:	4b4b      	ldr	r3, [pc, #300]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 8001666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166a:	4a4a      	ldr	r2, [pc, #296]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001674:	f7ff faf4 	bl	8000c60 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167c:	f7ff faf0 	bl	8000c60 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e1d4      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800168e:	4b41      	ldr	r3, [pc, #260]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 8001690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0ef      	beq.n	800167c <HAL_RCC_OscConfig+0x3ec>
 800169c:	e01b      	b.n	80016d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800169e:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 80016a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a4:	4a3b      	ldr	r2, [pc, #236]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 80016a6:	f023 0301 	bic.w	r3, r3, #1
 80016aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ae:	f7ff fad7 	bl	8000c60 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b6:	f7ff fad3 	bl	8000c60 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e1b7      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c8:	4b32      	ldr	r3, [pc, #200]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 80016ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1ef      	bne.n	80016b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80a6 	beq.w	8001830 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016e8:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10d      	bne.n	8001710 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 80016f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f8:	4a26      	ldr	r2, [pc, #152]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 80016fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001700:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800170c:	2301      	movs	r3, #1
 800170e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001710:	4b21      	ldr	r3, [pc, #132]	; (8001798 <HAL_RCC_OscConfig+0x508>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001718:	2b00      	cmp	r3, #0
 800171a:	d118      	bne.n	800174e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <HAL_RCC_OscConfig+0x508>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a1d      	ldr	r2, [pc, #116]	; (8001798 <HAL_RCC_OscConfig+0x508>)
 8001722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001726:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001728:	f7ff fa9a 	bl	8000c60 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001730:	f7ff fa96 	bl	8000c60 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e17a      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_RCC_OscConfig+0x508>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d108      	bne.n	8001768 <HAL_RCC_OscConfig+0x4d8>
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 8001758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800175c:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001766:	e029      	b.n	80017bc <HAL_RCC_OscConfig+0x52c>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b05      	cmp	r3, #5
 800176e:	d115      	bne.n	800179c <HAL_RCC_OscConfig+0x50c>
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 8001772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001776:	4a07      	ldr	r2, [pc, #28]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 8001782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001786:	4a03      	ldr	r2, [pc, #12]	; (8001794 <HAL_RCC_OscConfig+0x504>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001790:	e014      	b.n	80017bc <HAL_RCC_OscConfig+0x52c>
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	40007000 	.word	0x40007000
 800179c:	4b9c      	ldr	r3, [pc, #624]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 800179e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a2:	4a9b      	ldr	r2, [pc, #620]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 80017a4:	f023 0301 	bic.w	r3, r3, #1
 80017a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ac:	4b98      	ldr	r3, [pc, #608]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 80017ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b2:	4a97      	ldr	r2, [pc, #604]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 80017b4:	f023 0304 	bic.w	r3, r3, #4
 80017b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d016      	beq.n	80017f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff fa4c 	bl	8000c60 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ca:	e00a      	b.n	80017e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017cc:	f7ff fa48 	bl	8000c60 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e12a      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e2:	4b8b      	ldr	r3, [pc, #556]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 80017e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0ed      	beq.n	80017cc <HAL_RCC_OscConfig+0x53c>
 80017f0:	e015      	b.n	800181e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f2:	f7ff fa35 	bl	8000c60 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017f8:	e00a      	b.n	8001810 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fa:	f7ff fa31 	bl	8000c60 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	f241 3288 	movw	r2, #5000	; 0x1388
 8001808:	4293      	cmp	r3, r2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e113      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001810:	4b7f      	ldr	r3, [pc, #508]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 8001812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1ed      	bne.n	80017fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800181e:	7ffb      	ldrb	r3, [r7, #31]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d105      	bne.n	8001830 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001824:	4b7a      	ldr	r3, [pc, #488]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 8001826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001828:	4a79      	ldr	r2, [pc, #484]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 800182a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800182e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 80fe 	beq.w	8001a36 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	2b02      	cmp	r3, #2
 8001840:	f040 80d0 	bne.w	80019e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001844:	4b72      	ldr	r3, [pc, #456]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f003 0203 	and.w	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	429a      	cmp	r2, r3
 8001856:	d130      	bne.n	80018ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	3b01      	subs	r3, #1
 8001864:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001866:	429a      	cmp	r2, r3
 8001868:	d127      	bne.n	80018ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001874:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001876:	429a      	cmp	r2, r3
 8001878:	d11f      	bne.n	80018ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001884:	2a07      	cmp	r2, #7
 8001886:	bf14      	ite	ne
 8001888:	2201      	movne	r2, #1
 800188a:	2200      	moveq	r2, #0
 800188c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800188e:	4293      	cmp	r3, r2
 8001890:	d113      	bne.n	80018ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800189c:	085b      	lsrs	r3, r3, #1
 800189e:	3b01      	subs	r3, #1
 80018a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d109      	bne.n	80018ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	085b      	lsrs	r3, r3, #1
 80018b2:	3b01      	subs	r3, #1
 80018b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d06e      	beq.n	8001998 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b0c      	cmp	r3, #12
 80018be:	d069      	beq.n	8001994 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018c0:	4b53      	ldr	r3, [pc, #332]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d105      	bne.n	80018d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018cc:	4b50      	ldr	r3, [pc, #320]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0ad      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018dc:	4b4c      	ldr	r3, [pc, #304]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a4b      	ldr	r2, [pc, #300]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 80018e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018e8:	f7ff f9ba 	bl	8000c60 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f0:	f7ff f9b6 	bl	8000c60 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e09a      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001902:	4b43      	ldr	r3, [pc, #268]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800190e:	4b40      	ldr	r3, [pc, #256]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	4b40      	ldr	r3, [pc, #256]	; (8001a14 <HAL_RCC_OscConfig+0x784>)
 8001914:	4013      	ands	r3, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800191e:	3a01      	subs	r2, #1
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	4311      	orrs	r1, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001928:	0212      	lsls	r2, r2, #8
 800192a:	4311      	orrs	r1, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001930:	0852      	lsrs	r2, r2, #1
 8001932:	3a01      	subs	r2, #1
 8001934:	0552      	lsls	r2, r2, #21
 8001936:	4311      	orrs	r1, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800193c:	0852      	lsrs	r2, r2, #1
 800193e:	3a01      	subs	r2, #1
 8001940:	0652      	lsls	r2, r2, #25
 8001942:	4311      	orrs	r1, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001948:	0912      	lsrs	r2, r2, #4
 800194a:	0452      	lsls	r2, r2, #17
 800194c:	430a      	orrs	r2, r1
 800194e:	4930      	ldr	r1, [pc, #192]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 8001950:	4313      	orrs	r3, r2
 8001952:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001954:	4b2e      	ldr	r3, [pc, #184]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a2d      	ldr	r2, [pc, #180]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 800195a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800195e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001960:	4b2b      	ldr	r3, [pc, #172]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	4a2a      	ldr	r2, [pc, #168]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 8001966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800196a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800196c:	f7ff f978 	bl	8000c60 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff f974 	bl	8000c60 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e058      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001986:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001992:	e050      	b.n	8001a36 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e04f      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d148      	bne.n	8001a36 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a19      	ldr	r2, [pc, #100]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 80019aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	4a16      	ldr	r2, [pc, #88]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 80019b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019bc:	f7ff f950 	bl	8000c60 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c4:	f7ff f94c 	bl	8000c60 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e030      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x734>
 80019e2:	e028      	b.n	8001a36 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	2b0c      	cmp	r3, #12
 80019e8:	d023      	beq.n	8001a32 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <HAL_RCC_OscConfig+0x780>)
 80019f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f6:	f7ff f933 	bl	8000c60 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019fc:	e00c      	b.n	8001a18 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fe:	f7ff f92f 	bl	8000c60 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d905      	bls.n	8001a18 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e013      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
 8001a10:	40021000 	.word	0x40021000
 8001a14:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_RCC_OscConfig+0x7b0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1ec      	bne.n	80019fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_RCC_OscConfig+0x7b0>)
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	4905      	ldr	r1, [pc, #20]	; (8001a40 <HAL_RCC_OscConfig+0x7b0>)
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_RCC_OscConfig+0x7b4>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60cb      	str	r3, [r1, #12]
 8001a30:	e001      	b.n	8001a36 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3720      	adds	r7, #32
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000
 8001a44:	feeefffc 	.word	0xfeeefffc

08001a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0e7      	b.n	8001c2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a5c:	4b75      	ldr	r3, [pc, #468]	; (8001c34 <HAL_RCC_ClockConfig+0x1ec>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d910      	bls.n	8001a8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6a:	4b72      	ldr	r3, [pc, #456]	; (8001c34 <HAL_RCC_ClockConfig+0x1ec>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 0207 	bic.w	r2, r3, #7
 8001a72:	4970      	ldr	r1, [pc, #448]	; (8001c34 <HAL_RCC_ClockConfig+0x1ec>)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7a:	4b6e      	ldr	r3, [pc, #440]	; (8001c34 <HAL_RCC_ClockConfig+0x1ec>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0cf      	b.n	8001c2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d010      	beq.n	8001aba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	4b66      	ldr	r3, [pc, #408]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d908      	bls.n	8001aba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa8:	4b63      	ldr	r3, [pc, #396]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	4960      	ldr	r1, [pc, #384]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d04c      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d107      	bne.n	8001ade <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ace:	4b5a      	ldr	r3, [pc, #360]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d121      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e0a6      	b.n	8001c2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ae6:	4b54      	ldr	r3, [pc, #336]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d115      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e09a      	b.n	8001c2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001afe:	4b4e      	ldr	r3, [pc, #312]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e08e      	b.n	8001c2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b0e:	4b4a      	ldr	r3, [pc, #296]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e086      	b.n	8001c2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b1e:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f023 0203 	bic.w	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4943      	ldr	r1, [pc, #268]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b30:	f7ff f896 	bl	8000c60 <HAL_GetTick>
 8001b34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b38:	f7ff f892 	bl	8000c60 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e06e      	b.n	8001c2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	4b3a      	ldr	r3, [pc, #232]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 020c 	and.w	r2, r3, #12
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d1eb      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d010      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	4b31      	ldr	r3, [pc, #196]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d208      	bcs.n	8001b8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7c:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	492b      	ldr	r1, [pc, #172]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b8e:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <HAL_RCC_ClockConfig+0x1ec>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d210      	bcs.n	8001bbe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9c:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <HAL_RCC_ClockConfig+0x1ec>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f023 0207 	bic.w	r2, r3, #7
 8001ba4:	4923      	ldr	r1, [pc, #140]	; (8001c34 <HAL_RCC_ClockConfig+0x1ec>)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bac:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <HAL_RCC_ClockConfig+0x1ec>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d001      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e036      	b.n	8001c2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d008      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bca:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	4918      	ldr	r1, [pc, #96]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d009      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	4910      	ldr	r1, [pc, #64]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bfc:	f000 f824 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8001c00:	4602      	mov	r2, r0
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	f003 030f 	and.w	r3, r3, #15
 8001c0c:	490b      	ldr	r1, [pc, #44]	; (8001c3c <HAL_RCC_ClockConfig+0x1f4>)
 8001c0e:	5ccb      	ldrb	r3, [r1, r3]
 8001c10:	f003 031f 	and.w	r3, r3, #31
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
 8001c18:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <HAL_RCC_ClockConfig+0x1f8>)
 8001c1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_RCC_ClockConfig+0x1fc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe ffcd 	bl	8000bc0 <HAL_InitTick>
 8001c26:	4603      	mov	r3, r0
 8001c28:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c2a:	7afb      	ldrb	r3, [r7, #11]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40022000 	.word	0x40022000
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	08004254 	.word	0x08004254
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000004 	.word	0x20000004

08001c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c56:	4b3e      	ldr	r3, [pc, #248]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c60:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0x34>
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	2b0c      	cmp	r3, #12
 8001c74:	d121      	bne.n	8001cba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d11e      	bne.n	8001cba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c7c:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d107      	bne.n	8001c98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c88:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	e005      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c98:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ca4:	4a2b      	ldr	r2, [pc, #172]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10d      	bne.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d102      	bne.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	e004      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ccc:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x114>)
 8001cce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d134      	bne.n	8001d40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d003      	beq.n	8001cee <HAL_RCC_GetSysClockFreq+0xa6>
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d003      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xac>
 8001cec:	e005      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cee:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cf0:	617b      	str	r3, [r7, #20]
      break;
 8001cf2:	e005      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cf4:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x114>)
 8001cf6:	617b      	str	r3, [r7, #20]
      break;
 8001cf8:	e002      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	617b      	str	r3, [r7, #20]
      break;
 8001cfe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	fb03 f202 	mul.w	r2, r3, r2
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	0e5b      	lsrs	r3, r3, #25
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	3301      	adds	r3, #1
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d40:	69bb      	ldr	r3, [r7, #24]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3724      	adds	r7, #36	; 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	0800426c 	.word	0x0800426c
 8001d58:	00f42400 	.word	0x00f42400
 8001d5c:	007a1200 	.word	0x007a1200

08001d60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000000 	.word	0x20000000

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d7c:	f7ff fff0 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4904      	ldr	r1, [pc, #16]	; (8001da0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	08004264 	.word	0x08004264

08001da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001da8:	f7ff ffda 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	0adb      	lsrs	r3, r3, #11
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	4904      	ldr	r1, [pc, #16]	; (8001dcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dba:	5ccb      	ldrb	r3, [r1, r3]
 8001dbc:	f003 031f 	and.w	r3, r3, #31
 8001dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	08004264 	.word	0x08004264

08001dd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dd8:	2300      	movs	r3, #0
 8001dda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ddc:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001de8:	f7ff f9ee 	bl	80011c8 <HAL_PWREx_GetVoltageRange>
 8001dec:	6178      	str	r0, [r7, #20]
 8001dee:	e014      	b.n	8001e1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df4:	4a24      	ldr	r2, [pc, #144]	; (8001e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8001dfc:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e08:	f7ff f9de 	bl	80011c8 <HAL_PWREx_GetVoltageRange>
 8001e0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e0e:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	4a1d      	ldr	r2, [pc, #116]	; (8001e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e20:	d10b      	bne.n	8001e3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b80      	cmp	r3, #128	; 0x80
 8001e26:	d919      	bls.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2ba0      	cmp	r3, #160	; 0xa0
 8001e2c:	d902      	bls.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e2e:	2302      	movs	r3, #2
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	e013      	b.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e34:	2301      	movs	r3, #1
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	e010      	b.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b80      	cmp	r3, #128	; 0x80
 8001e3e:	d902      	bls.n	8001e46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e40:	2303      	movs	r3, #3
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	e00a      	b.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b80      	cmp	r3, #128	; 0x80
 8001e4a:	d102      	bne.n	8001e52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	e004      	b.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b70      	cmp	r3, #112	; 0x70
 8001e56:	d101      	bne.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e58:	2301      	movs	r3, #1
 8001e5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f023 0207 	bic.w	r2, r3, #7
 8001e64:	4909      	ldr	r1, [pc, #36]	; (8001e8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e6c:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d001      	beq.n	8001e7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40022000 	.word	0x40022000

08001e90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e98:	2300      	movs	r3, #0
 8001e9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d041      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001eb4:	d02a      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001eb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001eba:	d824      	bhi.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ebc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ec0:	d008      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ec2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ec6:	d81e      	bhi.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00a      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ed0:	d010      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001ed2:	e018      	b.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ed4:	4b86      	ldr	r3, [pc, #536]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4a85      	ldr	r2, [pc, #532]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ede:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ee0:	e015      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fabb 	bl	8002464 <RCCEx_PLLSAI1_Config>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ef2:	e00c      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3320      	adds	r3, #32
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fba6 	bl	800264c <RCCEx_PLLSAI2_Config>
 8001f00:	4603      	mov	r3, r0
 8001f02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f04:	e003      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	74fb      	strb	r3, [r7, #19]
      break;
 8001f0a:	e000      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f0e:	7cfb      	ldrb	r3, [r7, #19]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10b      	bne.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f14:	4b76      	ldr	r3, [pc, #472]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f22:	4973      	ldr	r1, [pc, #460]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f2a:	e001      	b.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f2c:	7cfb      	ldrb	r3, [r7, #19]
 8001f2e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d041      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f44:	d02a      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f4a:	d824      	bhi.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f50:	d008      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f56:	d81e      	bhi.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00a      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f60:	d010      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f62:	e018      	b.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f64:	4b62      	ldr	r3, [pc, #392]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4a61      	ldr	r2, [pc, #388]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f70:	e015      	b.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3304      	adds	r3, #4
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fa73 	bl	8002464 <RCCEx_PLLSAI1_Config>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f82:	e00c      	b.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3320      	adds	r3, #32
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 fb5e 	bl	800264c <RCCEx_PLLSAI2_Config>
 8001f90:	4603      	mov	r3, r0
 8001f92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f94:	e003      	b.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	74fb      	strb	r3, [r7, #19]
      break;
 8001f9a:	e000      	b.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f9e:	7cfb      	ldrb	r3, [r7, #19]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10b      	bne.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fa4:	4b52      	ldr	r3, [pc, #328]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001faa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fb2:	494f      	ldr	r1, [pc, #316]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fba:	e001      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fbc:	7cfb      	ldrb	r3, [r7, #19]
 8001fbe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80a0 	beq.w	800210e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fd2:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00d      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe8:	4b41      	ldr	r3, [pc, #260]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fec:	4a40      	ldr	r2, [pc, #256]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff4:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002000:	2301      	movs	r3, #1
 8002002:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002004:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a3a      	ldr	r2, [pc, #232]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800200a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002010:	f7fe fe26 	bl	8000c60 <HAL_GetTick>
 8002014:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002016:	e009      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002018:	f7fe fe22 	bl	8000c60 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d902      	bls.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	74fb      	strb	r3, [r7, #19]
        break;
 800202a:	e005      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800202c:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0ef      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002038:	7cfb      	ldrb	r3, [r7, #19]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d15c      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800203e:	4b2c      	ldr	r3, [pc, #176]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002048:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d01f      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	429a      	cmp	r2, r3
 800205a:	d019      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800205c:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002066:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002068:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206e:	4a20      	ldr	r2, [pc, #128]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002078:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	4a1c      	ldr	r2, [pc, #112]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002088:	4a19      	ldr	r2, [pc, #100]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d016      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209a:	f7fe fde1 	bl	8000c60 <HAL_GetTick>
 800209e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a0:	e00b      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f7fe fddd 	bl	8000c60 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d902      	bls.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	74fb      	strb	r3, [r7, #19]
            break;
 80020b8:	e006      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ba:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0ec      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020c8:	7cfb      	ldrb	r3, [r7, #19]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020de:	4904      	ldr	r1, [pc, #16]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020e6:	e009      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020e8:	7cfb      	ldrb	r3, [r7, #19]
 80020ea:	74bb      	strb	r3, [r7, #18]
 80020ec:	e006      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020f8:	7cfb      	ldrb	r3, [r7, #19]
 80020fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020fc:	7c7b      	ldrb	r3, [r7, #17]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d105      	bne.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002102:	4b9e      	ldr	r3, [pc, #632]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002106:	4a9d      	ldr	r2, [pc, #628]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800210c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800211a:	4b98      	ldr	r3, [pc, #608]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002120:	f023 0203 	bic.w	r2, r3, #3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002128:	4994      	ldr	r1, [pc, #592]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00a      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800213c:	4b8f      	ldr	r3, [pc, #572]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	f023 020c 	bic.w	r2, r3, #12
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214a:	498c      	ldr	r1, [pc, #560]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00a      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800215e:	4b87      	ldr	r3, [pc, #540]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002164:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	4983      	ldr	r1, [pc, #524]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002180:	4b7e      	ldr	r3, [pc, #504]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	497b      	ldr	r1, [pc, #492]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021a2:	4b76      	ldr	r3, [pc, #472]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b0:	4972      	ldr	r1, [pc, #456]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0320 	and.w	r3, r3, #32
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00a      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021c4:	4b6d      	ldr	r3, [pc, #436]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	496a      	ldr	r1, [pc, #424]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021e6:	4b65      	ldr	r3, [pc, #404]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	4961      	ldr	r1, [pc, #388]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00a      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002208:	4b5c      	ldr	r3, [pc, #368]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002216:	4959      	ldr	r1, [pc, #356]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800222a:	4b54      	ldr	r3, [pc, #336]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002230:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002238:	4950      	ldr	r1, [pc, #320]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800224c:	4b4b      	ldr	r3, [pc, #300]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002252:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225a:	4948      	ldr	r1, [pc, #288]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800226e:	4b43      	ldr	r3, [pc, #268]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002274:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227c:	493f      	ldr	r1, [pc, #252]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d028      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002290:	4b3a      	ldr	r3, [pc, #232]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800229e:	4937      	ldr	r1, [pc, #220]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ae:	d106      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b0:	4b32      	ldr	r3, [pc, #200]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a31      	ldr	r2, [pc, #196]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ba:	60d3      	str	r3, [r2, #12]
 80022bc:	e011      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022c6:	d10c      	bne.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3304      	adds	r3, #4
 80022cc:	2101      	movs	r1, #1
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f8c8 	bl	8002464 <RCCEx_PLLSAI1_Config>
 80022d4:	4603      	mov	r3, r0
 80022d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022d8:	7cfb      	ldrb	r3, [r7, #19]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80022de:	7cfb      	ldrb	r3, [r7, #19]
 80022e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d028      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022ee:	4b23      	ldr	r3, [pc, #140]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fc:	491f      	ldr	r1, [pc, #124]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800230c:	d106      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800230e:	4b1b      	ldr	r3, [pc, #108]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	4a1a      	ldr	r2, [pc, #104]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002314:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002318:	60d3      	str	r3, [r2, #12]
 800231a:	e011      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002320:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002324:	d10c      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3304      	adds	r3, #4
 800232a:	2101      	movs	r1, #1
 800232c:	4618      	mov	r0, r3
 800232e:	f000 f899 	bl	8002464 <RCCEx_PLLSAI1_Config>
 8002332:	4603      	mov	r3, r0
 8002334:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002336:	7cfb      	ldrb	r3, [r7, #19]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d02b      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002352:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800235a:	4908      	ldr	r1, [pc, #32]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002366:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800236a:	d109      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4a02      	ldr	r2, [pc, #8]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002376:	60d3      	str	r3, [r2, #12]
 8002378:	e014      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800237a:	bf00      	nop
 800237c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002384:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002388:	d10c      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3304      	adds	r3, #4
 800238e:	2101      	movs	r1, #1
 8002390:	4618      	mov	r0, r3
 8002392:	f000 f867 	bl	8002464 <RCCEx_PLLSAI1_Config>
 8002396:	4603      	mov	r3, r0
 8002398:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800239a:	7cfb      	ldrb	r3, [r7, #19]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d02f      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023b0:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023be:	4928      	ldr	r1, [pc, #160]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023ce:	d10d      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3304      	adds	r3, #4
 80023d4:	2102      	movs	r1, #2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 f844 	bl	8002464 <RCCEx_PLLSAI1_Config>
 80023dc:	4603      	mov	r3, r0
 80023de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d014      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023e6:	7cfb      	ldrb	r3, [r7, #19]
 80023e8:	74bb      	strb	r3, [r7, #18]
 80023ea:	e011      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023f4:	d10c      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3320      	adds	r3, #32
 80023fa:	2102      	movs	r1, #2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 f925 	bl	800264c <RCCEx_PLLSAI2_Config>
 8002402:	4603      	mov	r3, r0
 8002404:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002406:	7cfb      	ldrb	r3, [r7, #19]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800240c:	7cfb      	ldrb	r3, [r7, #19]
 800240e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800241c:	4b10      	ldr	r3, [pc, #64]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002422:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800242a:	490d      	ldr	r1, [pc, #52]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00b      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002444:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800244e:	4904      	ldr	r1, [pc, #16]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002456:	7cbb      	ldrb	r3, [r7, #18]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021000 	.word	0x40021000

08002464 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002472:	4b75      	ldr	r3, [pc, #468]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d018      	beq.n	80024b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800247e:	4b72      	ldr	r3, [pc, #456]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f003 0203 	and.w	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d10d      	bne.n	80024aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
       ||
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002496:	4b6c      	ldr	r3, [pc, #432]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
       ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d047      	beq.n	800253a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
 80024ae:	e044      	b.n	800253a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d018      	beq.n	80024ea <RCCEx_PLLSAI1_Config+0x86>
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d825      	bhi.n	8002508 <RCCEx_PLLSAI1_Config+0xa4>
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d002      	beq.n	80024c6 <RCCEx_PLLSAI1_Config+0x62>
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d009      	beq.n	80024d8 <RCCEx_PLLSAI1_Config+0x74>
 80024c4:	e020      	b.n	8002508 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024c6:	4b60      	ldr	r3, [pc, #384]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d11d      	bne.n	800250e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d6:	e01a      	b.n	800250e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024d8:	4b5b      	ldr	r3, [pc, #364]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d116      	bne.n	8002512 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e8:	e013      	b.n	8002512 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024ea:	4b57      	ldr	r3, [pc, #348]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10f      	bne.n	8002516 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024f6:	4b54      	ldr	r3, [pc, #336]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002506:	e006      	b.n	8002516 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
      break;
 800250c:	e004      	b.n	8002518 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800250e:	bf00      	nop
 8002510:	e002      	b.n	8002518 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002512:	bf00      	nop
 8002514:	e000      	b.n	8002518 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002516:	bf00      	nop
    }

    if(status == HAL_OK)
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10d      	bne.n	800253a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800251e:	4b4a      	ldr	r3, [pc, #296]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6819      	ldr	r1, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	430b      	orrs	r3, r1
 8002534:	4944      	ldr	r1, [pc, #272]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002536:	4313      	orrs	r3, r2
 8002538:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d17d      	bne.n	800263c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002540:	4b41      	ldr	r3, [pc, #260]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a40      	ldr	r2, [pc, #256]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002546:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800254a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800254c:	f7fe fb88 	bl	8000c60 <HAL_GetTick>
 8002550:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002552:	e009      	b.n	8002568 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002554:	f7fe fb84 	bl	8000c60 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d902      	bls.n	8002568 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	73fb      	strb	r3, [r7, #15]
        break;
 8002566:	e005      	b.n	8002574 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002568:	4b37      	ldr	r3, [pc, #220]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1ef      	bne.n	8002554 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d160      	bne.n	800263c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d111      	bne.n	80025a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002580:	4b31      	ldr	r3, [pc, #196]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6892      	ldr	r2, [r2, #8]
 8002590:	0211      	lsls	r1, r2, #8
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68d2      	ldr	r2, [r2, #12]
 8002596:	0912      	lsrs	r2, r2, #4
 8002598:	0452      	lsls	r2, r2, #17
 800259a:	430a      	orrs	r2, r1
 800259c:	492a      	ldr	r1, [pc, #168]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	610b      	str	r3, [r1, #16]
 80025a2:	e027      	b.n	80025f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d112      	bne.n	80025d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025aa:	4b27      	ldr	r3, [pc, #156]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6892      	ldr	r2, [r2, #8]
 80025ba:	0211      	lsls	r1, r2, #8
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6912      	ldr	r2, [r2, #16]
 80025c0:	0852      	lsrs	r2, r2, #1
 80025c2:	3a01      	subs	r2, #1
 80025c4:	0552      	lsls	r2, r2, #21
 80025c6:	430a      	orrs	r2, r1
 80025c8:	491f      	ldr	r1, [pc, #124]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	610b      	str	r3, [r1, #16]
 80025ce:	e011      	b.n	80025f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6892      	ldr	r2, [r2, #8]
 80025e0:	0211      	lsls	r1, r2, #8
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6952      	ldr	r2, [r2, #20]
 80025e6:	0852      	lsrs	r2, r2, #1
 80025e8:	3a01      	subs	r2, #1
 80025ea:	0652      	lsls	r2, r2, #25
 80025ec:	430a      	orrs	r2, r1
 80025ee:	4916      	ldr	r1, [pc, #88]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025f4:	4b14      	ldr	r3, [pc, #80]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a13      	ldr	r2, [pc, #76]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7fe fb2e 	bl	8000c60 <HAL_GetTick>
 8002604:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002606:	e009      	b.n	800261c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002608:	f7fe fb2a 	bl	8000c60 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d902      	bls.n	800261c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	73fb      	strb	r3, [r7, #15]
          break;
 800261a:	e005      	b.n	8002628 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0ef      	beq.n	8002608 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d106      	bne.n	800263c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	4904      	ldr	r1, [pc, #16]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000

0800264c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800265a:	4b6a      	ldr	r3, [pc, #424]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d018      	beq.n	8002698 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002666:	4b67      	ldr	r3, [pc, #412]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f003 0203 	and.w	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d10d      	bne.n	8002692 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
       ||
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800267e:	4b61      	ldr	r3, [pc, #388]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	091b      	lsrs	r3, r3, #4
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
       ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d047      	beq.n	8002722 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
 8002696:	e044      	b.n	8002722 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d018      	beq.n	80026d2 <RCCEx_PLLSAI2_Config+0x86>
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d825      	bhi.n	80026f0 <RCCEx_PLLSAI2_Config+0xa4>
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d002      	beq.n	80026ae <RCCEx_PLLSAI2_Config+0x62>
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d009      	beq.n	80026c0 <RCCEx_PLLSAI2_Config+0x74>
 80026ac:	e020      	b.n	80026f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026ae:	4b55      	ldr	r3, [pc, #340]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d11d      	bne.n	80026f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026be:	e01a      	b.n	80026f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026c0:	4b50      	ldr	r3, [pc, #320]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d116      	bne.n	80026fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d0:	e013      	b.n	80026fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026d2:	4b4c      	ldr	r3, [pc, #304]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10f      	bne.n	80026fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026de:	4b49      	ldr	r3, [pc, #292]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026ee:	e006      	b.n	80026fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
      break;
 80026f4:	e004      	b.n	8002700 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026f6:	bf00      	nop
 80026f8:	e002      	b.n	8002700 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026fa:	bf00      	nop
 80026fc:	e000      	b.n	8002700 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10d      	bne.n	8002722 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002706:	4b3f      	ldr	r3, [pc, #252]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6819      	ldr	r1, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	3b01      	subs	r3, #1
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	430b      	orrs	r3, r1
 800271c:	4939      	ldr	r1, [pc, #228]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271e:	4313      	orrs	r3, r2
 8002720:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d167      	bne.n	80027f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002728:	4b36      	ldr	r3, [pc, #216]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a35      	ldr	r2, [pc, #212]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002732:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002734:	f7fe fa94 	bl	8000c60 <HAL_GetTick>
 8002738:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800273a:	e009      	b.n	8002750 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800273c:	f7fe fa90 	bl	8000c60 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d902      	bls.n	8002750 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	73fb      	strb	r3, [r7, #15]
        break;
 800274e:	e005      	b.n	800275c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002750:	4b2c      	ldr	r3, [pc, #176]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1ef      	bne.n	800273c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d14a      	bne.n	80027f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d111      	bne.n	800278c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002768:	4b26      	ldr	r3, [pc, #152]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6892      	ldr	r2, [r2, #8]
 8002778:	0211      	lsls	r1, r2, #8
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68d2      	ldr	r2, [r2, #12]
 800277e:	0912      	lsrs	r2, r2, #4
 8002780:	0452      	lsls	r2, r2, #17
 8002782:	430a      	orrs	r2, r1
 8002784:	491f      	ldr	r1, [pc, #124]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002786:	4313      	orrs	r3, r2
 8002788:	614b      	str	r3, [r1, #20]
 800278a:	e011      	b.n	80027b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002794:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6892      	ldr	r2, [r2, #8]
 800279c:	0211      	lsls	r1, r2, #8
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6912      	ldr	r2, [r2, #16]
 80027a2:	0852      	lsrs	r2, r2, #1
 80027a4:	3a01      	subs	r2, #1
 80027a6:	0652      	lsls	r2, r2, #25
 80027a8:	430a      	orrs	r2, r1
 80027aa:	4916      	ldr	r1, [pc, #88]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a13      	ldr	r2, [pc, #76]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7fe fa50 	bl	8000c60 <HAL_GetTick>
 80027c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027c2:	e009      	b.n	80027d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027c4:	f7fe fa4c 	bl	8000c60 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d902      	bls.n	80027d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	73fb      	strb	r3, [r7, #15]
          break;
 80027d6:	e005      	b.n	80027e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027d8:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0ef      	beq.n	80027c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	4904      	ldr	r1, [pc, #16]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000

08002808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e040      	b.n	800289c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe f85e 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2224      	movs	r2, #36	; 0x24
 8002834:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0201 	bic.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f8c0 	bl	80029cc <UART_SetConfig>
 800284c:	4603      	mov	r3, r0
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e022      	b.n	800289c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fb6c 	bl	8002f3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fbf3 	bl	8003080 <UART_CheckIdleState>
 800289a:	4603      	mov	r3, r0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08a      	sub	sp, #40	; 0x28
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	4613      	mov	r3, r2
 80028b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	f040 8082 	bne.w	80029c2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <HAL_UART_Transmit+0x26>
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e07a      	b.n	80029c4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_UART_Transmit+0x38>
 80028d8:	2302      	movs	r3, #2
 80028da:	e073      	b.n	80029c4 <HAL_UART_Transmit+0x120>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2221      	movs	r2, #33	; 0x21
 80028f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028f2:	f7fe f9b5 	bl	8000c60 <HAL_GetTick>
 80028f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	88fa      	ldrh	r2, [r7, #6]
 80028fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	88fa      	ldrh	r2, [r7, #6]
 8002904:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002910:	d108      	bne.n	8002924 <HAL_UART_Transmit+0x80>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d104      	bne.n	8002924 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	61bb      	str	r3, [r7, #24]
 8002922:	e003      	b.n	800292c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002928:	2300      	movs	r3, #0
 800292a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002934:	e02d      	b.n	8002992 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2200      	movs	r2, #0
 800293e:	2180      	movs	r1, #128	; 0x80
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fbe6 	bl	8003112 <UART_WaitOnFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e039      	b.n	80029c4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10b      	bne.n	800296e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	881a      	ldrh	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002962:	b292      	uxth	r2, r2
 8002964:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	3302      	adds	r3, #2
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	e008      	b.n	8002980 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	781a      	ldrb	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	b292      	uxth	r2, r2
 8002978:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3301      	adds	r3, #1
 800297e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1cb      	bne.n	8002936 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2200      	movs	r2, #0
 80029a6:	2140      	movs	r1, #64	; 0x40
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 fbb2 	bl	8003112 <UART_WaitOnFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e005      	b.n	80029c4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e000      	b.n	80029c4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80029c2:	2302      	movs	r3, #2
  }
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3720      	adds	r7, #32
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d0:	b08a      	sub	sp, #40	; 0x28
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	431a      	orrs	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	4ba4      	ldr	r3, [pc, #656]	; (8002c8c <UART_SetConfig+0x2c0>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a04:	430b      	orrs	r3, r1
 8002a06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a99      	ldr	r2, [pc, #612]	; (8002c90 <UART_SetConfig+0x2c4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d004      	beq.n	8002a38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a34:	4313      	orrs	r3, r2
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a90      	ldr	r2, [pc, #576]	; (8002c94 <UART_SetConfig+0x2c8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d126      	bne.n	8002aa4 <UART_SetConfig+0xd8>
 8002a56:	4b90      	ldr	r3, [pc, #576]	; (8002c98 <UART_SetConfig+0x2cc>)
 8002a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d81b      	bhi.n	8002a9c <UART_SetConfig+0xd0>
 8002a64:	a201      	add	r2, pc, #4	; (adr r2, 8002a6c <UART_SetConfig+0xa0>)
 8002a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6a:	bf00      	nop
 8002a6c:	08002a7d 	.word	0x08002a7d
 8002a70:	08002a8d 	.word	0x08002a8d
 8002a74:	08002a85 	.word	0x08002a85
 8002a78:	08002a95 	.word	0x08002a95
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a82:	e116      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002a84:	2302      	movs	r3, #2
 8002a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a8a:	e112      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a92:	e10e      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002a94:	2308      	movs	r3, #8
 8002a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a9a:	e10a      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002a9c:	2310      	movs	r3, #16
 8002a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aa2:	e106      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a7c      	ldr	r2, [pc, #496]	; (8002c9c <UART_SetConfig+0x2d0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d138      	bne.n	8002b20 <UART_SetConfig+0x154>
 8002aae:	4b7a      	ldr	r3, [pc, #488]	; (8002c98 <UART_SetConfig+0x2cc>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab4:	f003 030c 	and.w	r3, r3, #12
 8002ab8:	2b0c      	cmp	r3, #12
 8002aba:	d82d      	bhi.n	8002b18 <UART_SetConfig+0x14c>
 8002abc:	a201      	add	r2, pc, #4	; (adr r2, 8002ac4 <UART_SetConfig+0xf8>)
 8002abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac2:	bf00      	nop
 8002ac4:	08002af9 	.word	0x08002af9
 8002ac8:	08002b19 	.word	0x08002b19
 8002acc:	08002b19 	.word	0x08002b19
 8002ad0:	08002b19 	.word	0x08002b19
 8002ad4:	08002b09 	.word	0x08002b09
 8002ad8:	08002b19 	.word	0x08002b19
 8002adc:	08002b19 	.word	0x08002b19
 8002ae0:	08002b19 	.word	0x08002b19
 8002ae4:	08002b01 	.word	0x08002b01
 8002ae8:	08002b19 	.word	0x08002b19
 8002aec:	08002b19 	.word	0x08002b19
 8002af0:	08002b19 	.word	0x08002b19
 8002af4:	08002b11 	.word	0x08002b11
 8002af8:	2300      	movs	r3, #0
 8002afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002afe:	e0d8      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002b00:	2302      	movs	r3, #2
 8002b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b06:	e0d4      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002b08:	2304      	movs	r3, #4
 8002b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b0e:	e0d0      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002b10:	2308      	movs	r3, #8
 8002b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b16:	e0cc      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002b18:	2310      	movs	r3, #16
 8002b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b1e:	e0c8      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a5e      	ldr	r2, [pc, #376]	; (8002ca0 <UART_SetConfig+0x2d4>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d125      	bne.n	8002b76 <UART_SetConfig+0x1aa>
 8002b2a:	4b5b      	ldr	r3, [pc, #364]	; (8002c98 <UART_SetConfig+0x2cc>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b34:	2b30      	cmp	r3, #48	; 0x30
 8002b36:	d016      	beq.n	8002b66 <UART_SetConfig+0x19a>
 8002b38:	2b30      	cmp	r3, #48	; 0x30
 8002b3a:	d818      	bhi.n	8002b6e <UART_SetConfig+0x1a2>
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d00a      	beq.n	8002b56 <UART_SetConfig+0x18a>
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	d814      	bhi.n	8002b6e <UART_SetConfig+0x1a2>
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <UART_SetConfig+0x182>
 8002b48:	2b10      	cmp	r3, #16
 8002b4a:	d008      	beq.n	8002b5e <UART_SetConfig+0x192>
 8002b4c:	e00f      	b.n	8002b6e <UART_SetConfig+0x1a2>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b54:	e0ad      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002b56:	2302      	movs	r3, #2
 8002b58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b5c:	e0a9      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002b5e:	2304      	movs	r3, #4
 8002b60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b64:	e0a5      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002b66:	2308      	movs	r3, #8
 8002b68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b6c:	e0a1      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002b6e:	2310      	movs	r3, #16
 8002b70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b74:	e09d      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a4a      	ldr	r2, [pc, #296]	; (8002ca4 <UART_SetConfig+0x2d8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d125      	bne.n	8002bcc <UART_SetConfig+0x200>
 8002b80:	4b45      	ldr	r3, [pc, #276]	; (8002c98 <UART_SetConfig+0x2cc>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b8a:	2bc0      	cmp	r3, #192	; 0xc0
 8002b8c:	d016      	beq.n	8002bbc <UART_SetConfig+0x1f0>
 8002b8e:	2bc0      	cmp	r3, #192	; 0xc0
 8002b90:	d818      	bhi.n	8002bc4 <UART_SetConfig+0x1f8>
 8002b92:	2b80      	cmp	r3, #128	; 0x80
 8002b94:	d00a      	beq.n	8002bac <UART_SetConfig+0x1e0>
 8002b96:	2b80      	cmp	r3, #128	; 0x80
 8002b98:	d814      	bhi.n	8002bc4 <UART_SetConfig+0x1f8>
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <UART_SetConfig+0x1d8>
 8002b9e:	2b40      	cmp	r3, #64	; 0x40
 8002ba0:	d008      	beq.n	8002bb4 <UART_SetConfig+0x1e8>
 8002ba2:	e00f      	b.n	8002bc4 <UART_SetConfig+0x1f8>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002baa:	e082      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002bac:	2302      	movs	r3, #2
 8002bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bb2:	e07e      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bba:	e07a      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002bbc:	2308      	movs	r3, #8
 8002bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bc2:	e076      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002bc4:	2310      	movs	r3, #16
 8002bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bca:	e072      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a35      	ldr	r2, [pc, #212]	; (8002ca8 <UART_SetConfig+0x2dc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d12a      	bne.n	8002c2c <UART_SetConfig+0x260>
 8002bd6:	4b30      	ldr	r3, [pc, #192]	; (8002c98 <UART_SetConfig+0x2cc>)
 8002bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002be4:	d01a      	beq.n	8002c1c <UART_SetConfig+0x250>
 8002be6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bea:	d81b      	bhi.n	8002c24 <UART_SetConfig+0x258>
 8002bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf0:	d00c      	beq.n	8002c0c <UART_SetConfig+0x240>
 8002bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf6:	d815      	bhi.n	8002c24 <UART_SetConfig+0x258>
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <UART_SetConfig+0x238>
 8002bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c00:	d008      	beq.n	8002c14 <UART_SetConfig+0x248>
 8002c02:	e00f      	b.n	8002c24 <UART_SetConfig+0x258>
 8002c04:	2300      	movs	r3, #0
 8002c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c0a:	e052      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c12:	e04e      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002c14:	2304      	movs	r3, #4
 8002c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c1a:	e04a      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002c1c:	2308      	movs	r3, #8
 8002c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c22:	e046      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002c24:	2310      	movs	r3, #16
 8002c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c2a:	e042      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a17      	ldr	r2, [pc, #92]	; (8002c90 <UART_SetConfig+0x2c4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d13a      	bne.n	8002cac <UART_SetConfig+0x2e0>
 8002c36:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <UART_SetConfig+0x2cc>)
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c44:	d01a      	beq.n	8002c7c <UART_SetConfig+0x2b0>
 8002c46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c4a:	d81b      	bhi.n	8002c84 <UART_SetConfig+0x2b8>
 8002c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c50:	d00c      	beq.n	8002c6c <UART_SetConfig+0x2a0>
 8002c52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c56:	d815      	bhi.n	8002c84 <UART_SetConfig+0x2b8>
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <UART_SetConfig+0x298>
 8002c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c60:	d008      	beq.n	8002c74 <UART_SetConfig+0x2a8>
 8002c62:	e00f      	b.n	8002c84 <UART_SetConfig+0x2b8>
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c6a:	e022      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c72:	e01e      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002c74:	2304      	movs	r3, #4
 8002c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c7a:	e01a      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c82:	e016      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002c84:	2310      	movs	r3, #16
 8002c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c8a:	e012      	b.n	8002cb2 <UART_SetConfig+0x2e6>
 8002c8c:	efff69f3 	.word	0xefff69f3
 8002c90:	40008000 	.word	0x40008000
 8002c94:	40013800 	.word	0x40013800
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40004400 	.word	0x40004400
 8002ca0:	40004800 	.word	0x40004800
 8002ca4:	40004c00 	.word	0x40004c00
 8002ca8:	40005000 	.word	0x40005000
 8002cac:	2310      	movs	r3, #16
 8002cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a9f      	ldr	r2, [pc, #636]	; (8002f34 <UART_SetConfig+0x568>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d17a      	bne.n	8002db2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d824      	bhi.n	8002d0e <UART_SetConfig+0x342>
 8002cc4:	a201      	add	r2, pc, #4	; (adr r2, 8002ccc <UART_SetConfig+0x300>)
 8002cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cca:	bf00      	nop
 8002ccc:	08002cf1 	.word	0x08002cf1
 8002cd0:	08002d0f 	.word	0x08002d0f
 8002cd4:	08002cf9 	.word	0x08002cf9
 8002cd8:	08002d0f 	.word	0x08002d0f
 8002cdc:	08002cff 	.word	0x08002cff
 8002ce0:	08002d0f 	.word	0x08002d0f
 8002ce4:	08002d0f 	.word	0x08002d0f
 8002ce8:	08002d0f 	.word	0x08002d0f
 8002cec:	08002d07 	.word	0x08002d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cf0:	f7ff f842 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002cf4:	61f8      	str	r0, [r7, #28]
        break;
 8002cf6:	e010      	b.n	8002d1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cf8:	4b8f      	ldr	r3, [pc, #572]	; (8002f38 <UART_SetConfig+0x56c>)
 8002cfa:	61fb      	str	r3, [r7, #28]
        break;
 8002cfc:	e00d      	b.n	8002d1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cfe:	f7fe ffa3 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8002d02:	61f8      	str	r0, [r7, #28]
        break;
 8002d04:	e009      	b.n	8002d1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d0a:	61fb      	str	r3, [r7, #28]
        break;
 8002d0c:	e005      	b.n	8002d1a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002d18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80fb 	beq.w	8002f18 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d305      	bcc.n	8002d3e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d903      	bls.n	8002d46 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002d44:	e0e8      	b.n	8002f18 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	461c      	mov	r4, r3
 8002d4c:	4615      	mov	r5, r2
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	022b      	lsls	r3, r5, #8
 8002d58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002d5c:	0222      	lsls	r2, r4, #8
 8002d5e:	68f9      	ldr	r1, [r7, #12]
 8002d60:	6849      	ldr	r1, [r1, #4]
 8002d62:	0849      	lsrs	r1, r1, #1
 8002d64:	2000      	movs	r0, #0
 8002d66:	4688      	mov	r8, r1
 8002d68:	4681      	mov	r9, r0
 8002d6a:	eb12 0a08 	adds.w	sl, r2, r8
 8002d6e:	eb43 0b09 	adc.w	fp, r3, r9
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	603b      	str	r3, [r7, #0]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d80:	4650      	mov	r0, sl
 8002d82:	4659      	mov	r1, fp
 8002d84:	f7fd fa74 	bl	8000270 <__aeabi_uldivmod>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d96:	d308      	bcc.n	8002daa <UART_SetConfig+0x3de>
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d9e:	d204      	bcs.n	8002daa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	60da      	str	r2, [r3, #12]
 8002da8:	e0b6      	b.n	8002f18 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002db0:	e0b2      	b.n	8002f18 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dba:	d15e      	bne.n	8002e7a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002dbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d828      	bhi.n	8002e16 <UART_SetConfig+0x44a>
 8002dc4:	a201      	add	r2, pc, #4	; (adr r2, 8002dcc <UART_SetConfig+0x400>)
 8002dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dca:	bf00      	nop
 8002dcc:	08002df1 	.word	0x08002df1
 8002dd0:	08002df9 	.word	0x08002df9
 8002dd4:	08002e01 	.word	0x08002e01
 8002dd8:	08002e17 	.word	0x08002e17
 8002ddc:	08002e07 	.word	0x08002e07
 8002de0:	08002e17 	.word	0x08002e17
 8002de4:	08002e17 	.word	0x08002e17
 8002de8:	08002e17 	.word	0x08002e17
 8002dec:	08002e0f 	.word	0x08002e0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002df0:	f7fe ffc2 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002df4:	61f8      	str	r0, [r7, #28]
        break;
 8002df6:	e014      	b.n	8002e22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002df8:	f7fe ffd4 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
 8002dfc:	61f8      	str	r0, [r7, #28]
        break;
 8002dfe:	e010      	b.n	8002e22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e00:	4b4d      	ldr	r3, [pc, #308]	; (8002f38 <UART_SetConfig+0x56c>)
 8002e02:	61fb      	str	r3, [r7, #28]
        break;
 8002e04:	e00d      	b.n	8002e22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e06:	f7fe ff1f 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8002e0a:	61f8      	str	r0, [r7, #28]
        break;
 8002e0c:	e009      	b.n	8002e22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e12:	61fb      	str	r3, [r7, #28]
        break;
 8002e14:	e005      	b.n	8002e22 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d077      	beq.n	8002f18 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	005a      	lsls	r2, r3, #1
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	085b      	lsrs	r3, r3, #1
 8002e32:	441a      	add	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	2b0f      	cmp	r3, #15
 8002e42:	d916      	bls.n	8002e72 <UART_SetConfig+0x4a6>
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e4a:	d212      	bcs.n	8002e72 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	f023 030f 	bic.w	r3, r3, #15
 8002e54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	085b      	lsrs	r3, r3, #1
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	8afb      	ldrh	r3, [r7, #22]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	8afa      	ldrh	r2, [r7, #22]
 8002e6e:	60da      	str	r2, [r3, #12]
 8002e70:	e052      	b.n	8002f18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e78:	e04e      	b.n	8002f18 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d827      	bhi.n	8002ed2 <UART_SetConfig+0x506>
 8002e82:	a201      	add	r2, pc, #4	; (adr r2, 8002e88 <UART_SetConfig+0x4bc>)
 8002e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e88:	08002ead 	.word	0x08002ead
 8002e8c:	08002eb5 	.word	0x08002eb5
 8002e90:	08002ebd 	.word	0x08002ebd
 8002e94:	08002ed3 	.word	0x08002ed3
 8002e98:	08002ec3 	.word	0x08002ec3
 8002e9c:	08002ed3 	.word	0x08002ed3
 8002ea0:	08002ed3 	.word	0x08002ed3
 8002ea4:	08002ed3 	.word	0x08002ed3
 8002ea8:	08002ecb 	.word	0x08002ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eac:	f7fe ff64 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002eb0:	61f8      	str	r0, [r7, #28]
        break;
 8002eb2:	e014      	b.n	8002ede <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002eb4:	f7fe ff76 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
 8002eb8:	61f8      	str	r0, [r7, #28]
        break;
 8002eba:	e010      	b.n	8002ede <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <UART_SetConfig+0x56c>)
 8002ebe:	61fb      	str	r3, [r7, #28]
        break;
 8002ec0:	e00d      	b.n	8002ede <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ec2:	f7fe fec1 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8002ec6:	61f8      	str	r0, [r7, #28]
        break;
 8002ec8:	e009      	b.n	8002ede <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ece:	61fb      	str	r3, [r7, #28]
        break;
 8002ed0:	e005      	b.n	8002ede <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002edc:	bf00      	nop
    }

    if (pclk != 0U)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d019      	beq.n	8002f18 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	085a      	lsrs	r2, r3, #1
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	441a      	add	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	2b0f      	cmp	r3, #15
 8002efc:	d909      	bls.n	8002f12 <UART_SetConfig+0x546>
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f04:	d205      	bcs.n	8002f12 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60da      	str	r2, [r3, #12]
 8002f10:	e002      	b.n	8002f18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3728      	adds	r7, #40	; 0x28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f32:	bf00      	nop
 8002f34:	40008000 	.word	0x40008000
 8002f38:	00f42400 	.word	0x00f42400

08002f3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00a      	beq.n	8002fee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01a      	beq.n	8003052 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800303a:	d10a      	bne.n	8003052 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	605a      	str	r2, [r3, #4]
  }
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af02      	add	r7, sp, #8
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003090:	f7fd fde6 	bl	8000c60 <HAL_GetTick>
 8003094:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d10e      	bne.n	80030c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f82d 	bl	8003112 <UART_WaitOnFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e023      	b.n	800310a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d10e      	bne.n	80030ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f817 	bl	8003112 <UART_WaitOnFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e00d      	b.n	800310a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2220      	movs	r2, #32
 80030f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b09c      	sub	sp, #112	; 0x70
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	603b      	str	r3, [r7, #0]
 800311e:	4613      	mov	r3, r2
 8003120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003122:	e0a5      	b.n	8003270 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312a:	f000 80a1 	beq.w	8003270 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312e:	f7fd fd97 	bl	8000c60 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800313a:	429a      	cmp	r2, r3
 800313c:	d302      	bcc.n	8003144 <UART_WaitOnFlagUntilTimeout+0x32>
 800313e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003140:	2b00      	cmp	r3, #0
 8003142:	d13e      	bne.n	80031c2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800314c:	e853 3f00 	ldrex	r3, [r3]
 8003150:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003154:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003158:	667b      	str	r3, [r7, #100]	; 0x64
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003162:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003164:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003166:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003168:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800316a:	e841 2300 	strex	r3, r2, [r1]
 800316e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e6      	bne.n	8003144 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3308      	adds	r3, #8
 800317c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003180:	e853 3f00 	ldrex	r3, [r3]
 8003184:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003188:	f023 0301 	bic.w	r3, r3, #1
 800318c:	663b      	str	r3, [r7, #96]	; 0x60
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3308      	adds	r3, #8
 8003194:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003196:	64ba      	str	r2, [r7, #72]	; 0x48
 8003198:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800319c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800319e:	e841 2300 	strex	r3, r2, [r1]
 80031a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80031a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e5      	bne.n	8003176 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e067      	b.n	8003292 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d04f      	beq.n	8003270 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031de:	d147      	bne.n	8003270 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031e8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f2:	e853 3f00 	ldrex	r3, [r3]
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003208:	637b      	str	r3, [r7, #52]	; 0x34
 800320a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800320e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003210:	e841 2300 	strex	r3, r2, [r1]
 8003214:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1e6      	bne.n	80031ea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3308      	adds	r3, #8
 8003222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	e853 3f00 	ldrex	r3, [r3]
 800322a:	613b      	str	r3, [r7, #16]
   return(result);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f023 0301 	bic.w	r3, r3, #1
 8003232:	66bb      	str	r3, [r7, #104]	; 0x68
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3308      	adds	r3, #8
 800323a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800323c:	623a      	str	r2, [r7, #32]
 800323e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003240:	69f9      	ldr	r1, [r7, #28]
 8003242:	6a3a      	ldr	r2, [r7, #32]
 8003244:	e841 2300 	strex	r3, r2, [r1]
 8003248:	61bb      	str	r3, [r7, #24]
   return(result);
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e5      	bne.n	800321c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2220      	movs	r2, #32
 8003260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e010      	b.n	8003292 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	69da      	ldr	r2, [r3, #28]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	4013      	ands	r3, r2
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	429a      	cmp	r2, r3
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	429a      	cmp	r2, r3
 800328c:	f43f af4a 	beq.w	8003124 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3770      	adds	r7, #112	; 0x70
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <__errno>:
 800329c:	4b01      	ldr	r3, [pc, #4]	; (80032a4 <__errno+0x8>)
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	2000000c 	.word	0x2000000c

080032a8 <__libc_init_array>:
 80032a8:	b570      	push	{r4, r5, r6, lr}
 80032aa:	4d0d      	ldr	r5, [pc, #52]	; (80032e0 <__libc_init_array+0x38>)
 80032ac:	4c0d      	ldr	r4, [pc, #52]	; (80032e4 <__libc_init_array+0x3c>)
 80032ae:	1b64      	subs	r4, r4, r5
 80032b0:	10a4      	asrs	r4, r4, #2
 80032b2:	2600      	movs	r6, #0
 80032b4:	42a6      	cmp	r6, r4
 80032b6:	d109      	bne.n	80032cc <__libc_init_array+0x24>
 80032b8:	4d0b      	ldr	r5, [pc, #44]	; (80032e8 <__libc_init_array+0x40>)
 80032ba:	4c0c      	ldr	r4, [pc, #48]	; (80032ec <__libc_init_array+0x44>)
 80032bc:	f000 ffae 	bl	800421c <_init>
 80032c0:	1b64      	subs	r4, r4, r5
 80032c2:	10a4      	asrs	r4, r4, #2
 80032c4:	2600      	movs	r6, #0
 80032c6:	42a6      	cmp	r6, r4
 80032c8:	d105      	bne.n	80032d6 <__libc_init_array+0x2e>
 80032ca:	bd70      	pop	{r4, r5, r6, pc}
 80032cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d0:	4798      	blx	r3
 80032d2:	3601      	adds	r6, #1
 80032d4:	e7ee      	b.n	80032b4 <__libc_init_array+0xc>
 80032d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032da:	4798      	blx	r3
 80032dc:	3601      	adds	r6, #1
 80032de:	e7f2      	b.n	80032c6 <__libc_init_array+0x1e>
 80032e0:	0800433c 	.word	0x0800433c
 80032e4:	0800433c 	.word	0x0800433c
 80032e8:	0800433c 	.word	0x0800433c
 80032ec:	08004340 	.word	0x08004340

080032f0 <memset>:
 80032f0:	4402      	add	r2, r0
 80032f2:	4603      	mov	r3, r0
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d100      	bne.n	80032fa <memset+0xa>
 80032f8:	4770      	bx	lr
 80032fa:	f803 1b01 	strb.w	r1, [r3], #1
 80032fe:	e7f9      	b.n	80032f4 <memset+0x4>

08003300 <iprintf>:
 8003300:	b40f      	push	{r0, r1, r2, r3}
 8003302:	4b0a      	ldr	r3, [pc, #40]	; (800332c <iprintf+0x2c>)
 8003304:	b513      	push	{r0, r1, r4, lr}
 8003306:	681c      	ldr	r4, [r3, #0]
 8003308:	b124      	cbz	r4, 8003314 <iprintf+0x14>
 800330a:	69a3      	ldr	r3, [r4, #24]
 800330c:	b913      	cbnz	r3, 8003314 <iprintf+0x14>
 800330e:	4620      	mov	r0, r4
 8003310:	f000 f866 	bl	80033e0 <__sinit>
 8003314:	ab05      	add	r3, sp, #20
 8003316:	9a04      	ldr	r2, [sp, #16]
 8003318:	68a1      	ldr	r1, [r4, #8]
 800331a:	9301      	str	r3, [sp, #4]
 800331c:	4620      	mov	r0, r4
 800331e:	f000 f9bd 	bl	800369c <_vfiprintf_r>
 8003322:	b002      	add	sp, #8
 8003324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003328:	b004      	add	sp, #16
 800332a:	4770      	bx	lr
 800332c:	2000000c 	.word	0x2000000c

08003330 <std>:
 8003330:	2300      	movs	r3, #0
 8003332:	b510      	push	{r4, lr}
 8003334:	4604      	mov	r4, r0
 8003336:	e9c0 3300 	strd	r3, r3, [r0]
 800333a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800333e:	6083      	str	r3, [r0, #8]
 8003340:	8181      	strh	r1, [r0, #12]
 8003342:	6643      	str	r3, [r0, #100]	; 0x64
 8003344:	81c2      	strh	r2, [r0, #14]
 8003346:	6183      	str	r3, [r0, #24]
 8003348:	4619      	mov	r1, r3
 800334a:	2208      	movs	r2, #8
 800334c:	305c      	adds	r0, #92	; 0x5c
 800334e:	f7ff ffcf 	bl	80032f0 <memset>
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <std+0x38>)
 8003354:	6263      	str	r3, [r4, #36]	; 0x24
 8003356:	4b05      	ldr	r3, [pc, #20]	; (800336c <std+0x3c>)
 8003358:	62a3      	str	r3, [r4, #40]	; 0x28
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <std+0x40>)
 800335c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800335e:	4b05      	ldr	r3, [pc, #20]	; (8003374 <std+0x44>)
 8003360:	6224      	str	r4, [r4, #32]
 8003362:	6323      	str	r3, [r4, #48]	; 0x30
 8003364:	bd10      	pop	{r4, pc}
 8003366:	bf00      	nop
 8003368:	08003c45 	.word	0x08003c45
 800336c:	08003c67 	.word	0x08003c67
 8003370:	08003c9f 	.word	0x08003c9f
 8003374:	08003cc3 	.word	0x08003cc3

08003378 <_cleanup_r>:
 8003378:	4901      	ldr	r1, [pc, #4]	; (8003380 <_cleanup_r+0x8>)
 800337a:	f000 b8af 	b.w	80034dc <_fwalk_reent>
 800337e:	bf00      	nop
 8003380:	08003f9d 	.word	0x08003f9d

08003384 <__sfmoreglue>:
 8003384:	b570      	push	{r4, r5, r6, lr}
 8003386:	2268      	movs	r2, #104	; 0x68
 8003388:	1e4d      	subs	r5, r1, #1
 800338a:	4355      	muls	r5, r2
 800338c:	460e      	mov	r6, r1
 800338e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003392:	f000 f8e5 	bl	8003560 <_malloc_r>
 8003396:	4604      	mov	r4, r0
 8003398:	b140      	cbz	r0, 80033ac <__sfmoreglue+0x28>
 800339a:	2100      	movs	r1, #0
 800339c:	e9c0 1600 	strd	r1, r6, [r0]
 80033a0:	300c      	adds	r0, #12
 80033a2:	60a0      	str	r0, [r4, #8]
 80033a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80033a8:	f7ff ffa2 	bl	80032f0 <memset>
 80033ac:	4620      	mov	r0, r4
 80033ae:	bd70      	pop	{r4, r5, r6, pc}

080033b0 <__sfp_lock_acquire>:
 80033b0:	4801      	ldr	r0, [pc, #4]	; (80033b8 <__sfp_lock_acquire+0x8>)
 80033b2:	f000 b8b3 	b.w	800351c <__retarget_lock_acquire_recursive>
 80033b6:	bf00      	nop
 80033b8:	20000131 	.word	0x20000131

080033bc <__sfp_lock_release>:
 80033bc:	4801      	ldr	r0, [pc, #4]	; (80033c4 <__sfp_lock_release+0x8>)
 80033be:	f000 b8ae 	b.w	800351e <__retarget_lock_release_recursive>
 80033c2:	bf00      	nop
 80033c4:	20000131 	.word	0x20000131

080033c8 <__sinit_lock_acquire>:
 80033c8:	4801      	ldr	r0, [pc, #4]	; (80033d0 <__sinit_lock_acquire+0x8>)
 80033ca:	f000 b8a7 	b.w	800351c <__retarget_lock_acquire_recursive>
 80033ce:	bf00      	nop
 80033d0:	20000132 	.word	0x20000132

080033d4 <__sinit_lock_release>:
 80033d4:	4801      	ldr	r0, [pc, #4]	; (80033dc <__sinit_lock_release+0x8>)
 80033d6:	f000 b8a2 	b.w	800351e <__retarget_lock_release_recursive>
 80033da:	bf00      	nop
 80033dc:	20000132 	.word	0x20000132

080033e0 <__sinit>:
 80033e0:	b510      	push	{r4, lr}
 80033e2:	4604      	mov	r4, r0
 80033e4:	f7ff fff0 	bl	80033c8 <__sinit_lock_acquire>
 80033e8:	69a3      	ldr	r3, [r4, #24]
 80033ea:	b11b      	cbz	r3, 80033f4 <__sinit+0x14>
 80033ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033f0:	f7ff bff0 	b.w	80033d4 <__sinit_lock_release>
 80033f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80033f8:	6523      	str	r3, [r4, #80]	; 0x50
 80033fa:	4b13      	ldr	r3, [pc, #76]	; (8003448 <__sinit+0x68>)
 80033fc:	4a13      	ldr	r2, [pc, #76]	; (800344c <__sinit+0x6c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	62a2      	str	r2, [r4, #40]	; 0x28
 8003402:	42a3      	cmp	r3, r4
 8003404:	bf04      	itt	eq
 8003406:	2301      	moveq	r3, #1
 8003408:	61a3      	streq	r3, [r4, #24]
 800340a:	4620      	mov	r0, r4
 800340c:	f000 f820 	bl	8003450 <__sfp>
 8003410:	6060      	str	r0, [r4, #4]
 8003412:	4620      	mov	r0, r4
 8003414:	f000 f81c 	bl	8003450 <__sfp>
 8003418:	60a0      	str	r0, [r4, #8]
 800341a:	4620      	mov	r0, r4
 800341c:	f000 f818 	bl	8003450 <__sfp>
 8003420:	2200      	movs	r2, #0
 8003422:	60e0      	str	r0, [r4, #12]
 8003424:	2104      	movs	r1, #4
 8003426:	6860      	ldr	r0, [r4, #4]
 8003428:	f7ff ff82 	bl	8003330 <std>
 800342c:	68a0      	ldr	r0, [r4, #8]
 800342e:	2201      	movs	r2, #1
 8003430:	2109      	movs	r1, #9
 8003432:	f7ff ff7d 	bl	8003330 <std>
 8003436:	68e0      	ldr	r0, [r4, #12]
 8003438:	2202      	movs	r2, #2
 800343a:	2112      	movs	r1, #18
 800343c:	f7ff ff78 	bl	8003330 <std>
 8003440:	2301      	movs	r3, #1
 8003442:	61a3      	str	r3, [r4, #24]
 8003444:	e7d2      	b.n	80033ec <__sinit+0xc>
 8003446:	bf00      	nop
 8003448:	0800429c 	.word	0x0800429c
 800344c:	08003379 	.word	0x08003379

08003450 <__sfp>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	4607      	mov	r7, r0
 8003454:	f7ff ffac 	bl	80033b0 <__sfp_lock_acquire>
 8003458:	4b1e      	ldr	r3, [pc, #120]	; (80034d4 <__sfp+0x84>)
 800345a:	681e      	ldr	r6, [r3, #0]
 800345c:	69b3      	ldr	r3, [r6, #24]
 800345e:	b913      	cbnz	r3, 8003466 <__sfp+0x16>
 8003460:	4630      	mov	r0, r6
 8003462:	f7ff ffbd 	bl	80033e0 <__sinit>
 8003466:	3648      	adds	r6, #72	; 0x48
 8003468:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800346c:	3b01      	subs	r3, #1
 800346e:	d503      	bpl.n	8003478 <__sfp+0x28>
 8003470:	6833      	ldr	r3, [r6, #0]
 8003472:	b30b      	cbz	r3, 80034b8 <__sfp+0x68>
 8003474:	6836      	ldr	r6, [r6, #0]
 8003476:	e7f7      	b.n	8003468 <__sfp+0x18>
 8003478:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800347c:	b9d5      	cbnz	r5, 80034b4 <__sfp+0x64>
 800347e:	4b16      	ldr	r3, [pc, #88]	; (80034d8 <__sfp+0x88>)
 8003480:	60e3      	str	r3, [r4, #12]
 8003482:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003486:	6665      	str	r5, [r4, #100]	; 0x64
 8003488:	f000 f847 	bl	800351a <__retarget_lock_init_recursive>
 800348c:	f7ff ff96 	bl	80033bc <__sfp_lock_release>
 8003490:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003494:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003498:	6025      	str	r5, [r4, #0]
 800349a:	61a5      	str	r5, [r4, #24]
 800349c:	2208      	movs	r2, #8
 800349e:	4629      	mov	r1, r5
 80034a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80034a4:	f7ff ff24 	bl	80032f0 <memset>
 80034a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80034ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80034b0:	4620      	mov	r0, r4
 80034b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034b4:	3468      	adds	r4, #104	; 0x68
 80034b6:	e7d9      	b.n	800346c <__sfp+0x1c>
 80034b8:	2104      	movs	r1, #4
 80034ba:	4638      	mov	r0, r7
 80034bc:	f7ff ff62 	bl	8003384 <__sfmoreglue>
 80034c0:	4604      	mov	r4, r0
 80034c2:	6030      	str	r0, [r6, #0]
 80034c4:	2800      	cmp	r0, #0
 80034c6:	d1d5      	bne.n	8003474 <__sfp+0x24>
 80034c8:	f7ff ff78 	bl	80033bc <__sfp_lock_release>
 80034cc:	230c      	movs	r3, #12
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	e7ee      	b.n	80034b0 <__sfp+0x60>
 80034d2:	bf00      	nop
 80034d4:	0800429c 	.word	0x0800429c
 80034d8:	ffff0001 	.word	0xffff0001

080034dc <_fwalk_reent>:
 80034dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034e0:	4606      	mov	r6, r0
 80034e2:	4688      	mov	r8, r1
 80034e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80034e8:	2700      	movs	r7, #0
 80034ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034ee:	f1b9 0901 	subs.w	r9, r9, #1
 80034f2:	d505      	bpl.n	8003500 <_fwalk_reent+0x24>
 80034f4:	6824      	ldr	r4, [r4, #0]
 80034f6:	2c00      	cmp	r4, #0
 80034f8:	d1f7      	bne.n	80034ea <_fwalk_reent+0xe>
 80034fa:	4638      	mov	r0, r7
 80034fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003500:	89ab      	ldrh	r3, [r5, #12]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d907      	bls.n	8003516 <_fwalk_reent+0x3a>
 8003506:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800350a:	3301      	adds	r3, #1
 800350c:	d003      	beq.n	8003516 <_fwalk_reent+0x3a>
 800350e:	4629      	mov	r1, r5
 8003510:	4630      	mov	r0, r6
 8003512:	47c0      	blx	r8
 8003514:	4307      	orrs	r7, r0
 8003516:	3568      	adds	r5, #104	; 0x68
 8003518:	e7e9      	b.n	80034ee <_fwalk_reent+0x12>

0800351a <__retarget_lock_init_recursive>:
 800351a:	4770      	bx	lr

0800351c <__retarget_lock_acquire_recursive>:
 800351c:	4770      	bx	lr

0800351e <__retarget_lock_release_recursive>:
 800351e:	4770      	bx	lr

08003520 <sbrk_aligned>:
 8003520:	b570      	push	{r4, r5, r6, lr}
 8003522:	4e0e      	ldr	r6, [pc, #56]	; (800355c <sbrk_aligned+0x3c>)
 8003524:	460c      	mov	r4, r1
 8003526:	6831      	ldr	r1, [r6, #0]
 8003528:	4605      	mov	r5, r0
 800352a:	b911      	cbnz	r1, 8003532 <sbrk_aligned+0x12>
 800352c:	f000 fb7a 	bl	8003c24 <_sbrk_r>
 8003530:	6030      	str	r0, [r6, #0]
 8003532:	4621      	mov	r1, r4
 8003534:	4628      	mov	r0, r5
 8003536:	f000 fb75 	bl	8003c24 <_sbrk_r>
 800353a:	1c43      	adds	r3, r0, #1
 800353c:	d00a      	beq.n	8003554 <sbrk_aligned+0x34>
 800353e:	1cc4      	adds	r4, r0, #3
 8003540:	f024 0403 	bic.w	r4, r4, #3
 8003544:	42a0      	cmp	r0, r4
 8003546:	d007      	beq.n	8003558 <sbrk_aligned+0x38>
 8003548:	1a21      	subs	r1, r4, r0
 800354a:	4628      	mov	r0, r5
 800354c:	f000 fb6a 	bl	8003c24 <_sbrk_r>
 8003550:	3001      	adds	r0, #1
 8003552:	d101      	bne.n	8003558 <sbrk_aligned+0x38>
 8003554:	f04f 34ff 	mov.w	r4, #4294967295
 8003558:	4620      	mov	r0, r4
 800355a:	bd70      	pop	{r4, r5, r6, pc}
 800355c:	20000138 	.word	0x20000138

08003560 <_malloc_r>:
 8003560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003564:	1ccd      	adds	r5, r1, #3
 8003566:	f025 0503 	bic.w	r5, r5, #3
 800356a:	3508      	adds	r5, #8
 800356c:	2d0c      	cmp	r5, #12
 800356e:	bf38      	it	cc
 8003570:	250c      	movcc	r5, #12
 8003572:	2d00      	cmp	r5, #0
 8003574:	4607      	mov	r7, r0
 8003576:	db01      	blt.n	800357c <_malloc_r+0x1c>
 8003578:	42a9      	cmp	r1, r5
 800357a:	d905      	bls.n	8003588 <_malloc_r+0x28>
 800357c:	230c      	movs	r3, #12
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	2600      	movs	r6, #0
 8003582:	4630      	mov	r0, r6
 8003584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003588:	4e2e      	ldr	r6, [pc, #184]	; (8003644 <_malloc_r+0xe4>)
 800358a:	f000 fdbb 	bl	8004104 <__malloc_lock>
 800358e:	6833      	ldr	r3, [r6, #0]
 8003590:	461c      	mov	r4, r3
 8003592:	bb34      	cbnz	r4, 80035e2 <_malloc_r+0x82>
 8003594:	4629      	mov	r1, r5
 8003596:	4638      	mov	r0, r7
 8003598:	f7ff ffc2 	bl	8003520 <sbrk_aligned>
 800359c:	1c43      	adds	r3, r0, #1
 800359e:	4604      	mov	r4, r0
 80035a0:	d14d      	bne.n	800363e <_malloc_r+0xde>
 80035a2:	6834      	ldr	r4, [r6, #0]
 80035a4:	4626      	mov	r6, r4
 80035a6:	2e00      	cmp	r6, #0
 80035a8:	d140      	bne.n	800362c <_malloc_r+0xcc>
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	4631      	mov	r1, r6
 80035ae:	4638      	mov	r0, r7
 80035b0:	eb04 0803 	add.w	r8, r4, r3
 80035b4:	f000 fb36 	bl	8003c24 <_sbrk_r>
 80035b8:	4580      	cmp	r8, r0
 80035ba:	d13a      	bne.n	8003632 <_malloc_r+0xd2>
 80035bc:	6821      	ldr	r1, [r4, #0]
 80035be:	3503      	adds	r5, #3
 80035c0:	1a6d      	subs	r5, r5, r1
 80035c2:	f025 0503 	bic.w	r5, r5, #3
 80035c6:	3508      	adds	r5, #8
 80035c8:	2d0c      	cmp	r5, #12
 80035ca:	bf38      	it	cc
 80035cc:	250c      	movcc	r5, #12
 80035ce:	4629      	mov	r1, r5
 80035d0:	4638      	mov	r0, r7
 80035d2:	f7ff ffa5 	bl	8003520 <sbrk_aligned>
 80035d6:	3001      	adds	r0, #1
 80035d8:	d02b      	beq.n	8003632 <_malloc_r+0xd2>
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	442b      	add	r3, r5
 80035de:	6023      	str	r3, [r4, #0]
 80035e0:	e00e      	b.n	8003600 <_malloc_r+0xa0>
 80035e2:	6822      	ldr	r2, [r4, #0]
 80035e4:	1b52      	subs	r2, r2, r5
 80035e6:	d41e      	bmi.n	8003626 <_malloc_r+0xc6>
 80035e8:	2a0b      	cmp	r2, #11
 80035ea:	d916      	bls.n	800361a <_malloc_r+0xba>
 80035ec:	1961      	adds	r1, r4, r5
 80035ee:	42a3      	cmp	r3, r4
 80035f0:	6025      	str	r5, [r4, #0]
 80035f2:	bf18      	it	ne
 80035f4:	6059      	strne	r1, [r3, #4]
 80035f6:	6863      	ldr	r3, [r4, #4]
 80035f8:	bf08      	it	eq
 80035fa:	6031      	streq	r1, [r6, #0]
 80035fc:	5162      	str	r2, [r4, r5]
 80035fe:	604b      	str	r3, [r1, #4]
 8003600:	4638      	mov	r0, r7
 8003602:	f104 060b 	add.w	r6, r4, #11
 8003606:	f000 fd83 	bl	8004110 <__malloc_unlock>
 800360a:	f026 0607 	bic.w	r6, r6, #7
 800360e:	1d23      	adds	r3, r4, #4
 8003610:	1af2      	subs	r2, r6, r3
 8003612:	d0b6      	beq.n	8003582 <_malloc_r+0x22>
 8003614:	1b9b      	subs	r3, r3, r6
 8003616:	50a3      	str	r3, [r4, r2]
 8003618:	e7b3      	b.n	8003582 <_malloc_r+0x22>
 800361a:	6862      	ldr	r2, [r4, #4]
 800361c:	42a3      	cmp	r3, r4
 800361e:	bf0c      	ite	eq
 8003620:	6032      	streq	r2, [r6, #0]
 8003622:	605a      	strne	r2, [r3, #4]
 8003624:	e7ec      	b.n	8003600 <_malloc_r+0xa0>
 8003626:	4623      	mov	r3, r4
 8003628:	6864      	ldr	r4, [r4, #4]
 800362a:	e7b2      	b.n	8003592 <_malloc_r+0x32>
 800362c:	4634      	mov	r4, r6
 800362e:	6876      	ldr	r6, [r6, #4]
 8003630:	e7b9      	b.n	80035a6 <_malloc_r+0x46>
 8003632:	230c      	movs	r3, #12
 8003634:	603b      	str	r3, [r7, #0]
 8003636:	4638      	mov	r0, r7
 8003638:	f000 fd6a 	bl	8004110 <__malloc_unlock>
 800363c:	e7a1      	b.n	8003582 <_malloc_r+0x22>
 800363e:	6025      	str	r5, [r4, #0]
 8003640:	e7de      	b.n	8003600 <_malloc_r+0xa0>
 8003642:	bf00      	nop
 8003644:	20000134 	.word	0x20000134

08003648 <__sfputc_r>:
 8003648:	6893      	ldr	r3, [r2, #8]
 800364a:	3b01      	subs	r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	b410      	push	{r4}
 8003650:	6093      	str	r3, [r2, #8]
 8003652:	da08      	bge.n	8003666 <__sfputc_r+0x1e>
 8003654:	6994      	ldr	r4, [r2, #24]
 8003656:	42a3      	cmp	r3, r4
 8003658:	db01      	blt.n	800365e <__sfputc_r+0x16>
 800365a:	290a      	cmp	r1, #10
 800365c:	d103      	bne.n	8003666 <__sfputc_r+0x1e>
 800365e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003662:	f000 bb33 	b.w	8003ccc <__swbuf_r>
 8003666:	6813      	ldr	r3, [r2, #0]
 8003668:	1c58      	adds	r0, r3, #1
 800366a:	6010      	str	r0, [r2, #0]
 800366c:	7019      	strb	r1, [r3, #0]
 800366e:	4608      	mov	r0, r1
 8003670:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003674:	4770      	bx	lr

08003676 <__sfputs_r>:
 8003676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003678:	4606      	mov	r6, r0
 800367a:	460f      	mov	r7, r1
 800367c:	4614      	mov	r4, r2
 800367e:	18d5      	adds	r5, r2, r3
 8003680:	42ac      	cmp	r4, r5
 8003682:	d101      	bne.n	8003688 <__sfputs_r+0x12>
 8003684:	2000      	movs	r0, #0
 8003686:	e007      	b.n	8003698 <__sfputs_r+0x22>
 8003688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800368c:	463a      	mov	r2, r7
 800368e:	4630      	mov	r0, r6
 8003690:	f7ff ffda 	bl	8003648 <__sfputc_r>
 8003694:	1c43      	adds	r3, r0, #1
 8003696:	d1f3      	bne.n	8003680 <__sfputs_r+0xa>
 8003698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800369c <_vfiprintf_r>:
 800369c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a0:	460d      	mov	r5, r1
 80036a2:	b09d      	sub	sp, #116	; 0x74
 80036a4:	4614      	mov	r4, r2
 80036a6:	4698      	mov	r8, r3
 80036a8:	4606      	mov	r6, r0
 80036aa:	b118      	cbz	r0, 80036b4 <_vfiprintf_r+0x18>
 80036ac:	6983      	ldr	r3, [r0, #24]
 80036ae:	b90b      	cbnz	r3, 80036b4 <_vfiprintf_r+0x18>
 80036b0:	f7ff fe96 	bl	80033e0 <__sinit>
 80036b4:	4b89      	ldr	r3, [pc, #548]	; (80038dc <_vfiprintf_r+0x240>)
 80036b6:	429d      	cmp	r5, r3
 80036b8:	d11b      	bne.n	80036f2 <_vfiprintf_r+0x56>
 80036ba:	6875      	ldr	r5, [r6, #4]
 80036bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036be:	07d9      	lsls	r1, r3, #31
 80036c0:	d405      	bmi.n	80036ce <_vfiprintf_r+0x32>
 80036c2:	89ab      	ldrh	r3, [r5, #12]
 80036c4:	059a      	lsls	r2, r3, #22
 80036c6:	d402      	bmi.n	80036ce <_vfiprintf_r+0x32>
 80036c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036ca:	f7ff ff27 	bl	800351c <__retarget_lock_acquire_recursive>
 80036ce:	89ab      	ldrh	r3, [r5, #12]
 80036d0:	071b      	lsls	r3, r3, #28
 80036d2:	d501      	bpl.n	80036d8 <_vfiprintf_r+0x3c>
 80036d4:	692b      	ldr	r3, [r5, #16]
 80036d6:	b9eb      	cbnz	r3, 8003714 <_vfiprintf_r+0x78>
 80036d8:	4629      	mov	r1, r5
 80036da:	4630      	mov	r0, r6
 80036dc:	f000 fb5a 	bl	8003d94 <__swsetup_r>
 80036e0:	b1c0      	cbz	r0, 8003714 <_vfiprintf_r+0x78>
 80036e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036e4:	07dc      	lsls	r4, r3, #31
 80036e6:	d50e      	bpl.n	8003706 <_vfiprintf_r+0x6a>
 80036e8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ec:	b01d      	add	sp, #116	; 0x74
 80036ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036f2:	4b7b      	ldr	r3, [pc, #492]	; (80038e0 <_vfiprintf_r+0x244>)
 80036f4:	429d      	cmp	r5, r3
 80036f6:	d101      	bne.n	80036fc <_vfiprintf_r+0x60>
 80036f8:	68b5      	ldr	r5, [r6, #8]
 80036fa:	e7df      	b.n	80036bc <_vfiprintf_r+0x20>
 80036fc:	4b79      	ldr	r3, [pc, #484]	; (80038e4 <_vfiprintf_r+0x248>)
 80036fe:	429d      	cmp	r5, r3
 8003700:	bf08      	it	eq
 8003702:	68f5      	ldreq	r5, [r6, #12]
 8003704:	e7da      	b.n	80036bc <_vfiprintf_r+0x20>
 8003706:	89ab      	ldrh	r3, [r5, #12]
 8003708:	0598      	lsls	r0, r3, #22
 800370a:	d4ed      	bmi.n	80036e8 <_vfiprintf_r+0x4c>
 800370c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800370e:	f7ff ff06 	bl	800351e <__retarget_lock_release_recursive>
 8003712:	e7e9      	b.n	80036e8 <_vfiprintf_r+0x4c>
 8003714:	2300      	movs	r3, #0
 8003716:	9309      	str	r3, [sp, #36]	; 0x24
 8003718:	2320      	movs	r3, #32
 800371a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800371e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003722:	2330      	movs	r3, #48	; 0x30
 8003724:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80038e8 <_vfiprintf_r+0x24c>
 8003728:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800372c:	f04f 0901 	mov.w	r9, #1
 8003730:	4623      	mov	r3, r4
 8003732:	469a      	mov	sl, r3
 8003734:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003738:	b10a      	cbz	r2, 800373e <_vfiprintf_r+0xa2>
 800373a:	2a25      	cmp	r2, #37	; 0x25
 800373c:	d1f9      	bne.n	8003732 <_vfiprintf_r+0x96>
 800373e:	ebba 0b04 	subs.w	fp, sl, r4
 8003742:	d00b      	beq.n	800375c <_vfiprintf_r+0xc0>
 8003744:	465b      	mov	r3, fp
 8003746:	4622      	mov	r2, r4
 8003748:	4629      	mov	r1, r5
 800374a:	4630      	mov	r0, r6
 800374c:	f7ff ff93 	bl	8003676 <__sfputs_r>
 8003750:	3001      	adds	r0, #1
 8003752:	f000 80aa 	beq.w	80038aa <_vfiprintf_r+0x20e>
 8003756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003758:	445a      	add	r2, fp
 800375a:	9209      	str	r2, [sp, #36]	; 0x24
 800375c:	f89a 3000 	ldrb.w	r3, [sl]
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80a2 	beq.w	80038aa <_vfiprintf_r+0x20e>
 8003766:	2300      	movs	r3, #0
 8003768:	f04f 32ff 	mov.w	r2, #4294967295
 800376c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003770:	f10a 0a01 	add.w	sl, sl, #1
 8003774:	9304      	str	r3, [sp, #16]
 8003776:	9307      	str	r3, [sp, #28]
 8003778:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800377c:	931a      	str	r3, [sp, #104]	; 0x68
 800377e:	4654      	mov	r4, sl
 8003780:	2205      	movs	r2, #5
 8003782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003786:	4858      	ldr	r0, [pc, #352]	; (80038e8 <_vfiprintf_r+0x24c>)
 8003788:	f7fc fd22 	bl	80001d0 <memchr>
 800378c:	9a04      	ldr	r2, [sp, #16]
 800378e:	b9d8      	cbnz	r0, 80037c8 <_vfiprintf_r+0x12c>
 8003790:	06d1      	lsls	r1, r2, #27
 8003792:	bf44      	itt	mi
 8003794:	2320      	movmi	r3, #32
 8003796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800379a:	0713      	lsls	r3, r2, #28
 800379c:	bf44      	itt	mi
 800379e:	232b      	movmi	r3, #43	; 0x2b
 80037a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037a4:	f89a 3000 	ldrb.w	r3, [sl]
 80037a8:	2b2a      	cmp	r3, #42	; 0x2a
 80037aa:	d015      	beq.n	80037d8 <_vfiprintf_r+0x13c>
 80037ac:	9a07      	ldr	r2, [sp, #28]
 80037ae:	4654      	mov	r4, sl
 80037b0:	2000      	movs	r0, #0
 80037b2:	f04f 0c0a 	mov.w	ip, #10
 80037b6:	4621      	mov	r1, r4
 80037b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037bc:	3b30      	subs	r3, #48	; 0x30
 80037be:	2b09      	cmp	r3, #9
 80037c0:	d94e      	bls.n	8003860 <_vfiprintf_r+0x1c4>
 80037c2:	b1b0      	cbz	r0, 80037f2 <_vfiprintf_r+0x156>
 80037c4:	9207      	str	r2, [sp, #28]
 80037c6:	e014      	b.n	80037f2 <_vfiprintf_r+0x156>
 80037c8:	eba0 0308 	sub.w	r3, r0, r8
 80037cc:	fa09 f303 	lsl.w	r3, r9, r3
 80037d0:	4313      	orrs	r3, r2
 80037d2:	9304      	str	r3, [sp, #16]
 80037d4:	46a2      	mov	sl, r4
 80037d6:	e7d2      	b.n	800377e <_vfiprintf_r+0xe2>
 80037d8:	9b03      	ldr	r3, [sp, #12]
 80037da:	1d19      	adds	r1, r3, #4
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	9103      	str	r1, [sp, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bfbb      	ittet	lt
 80037e4:	425b      	neglt	r3, r3
 80037e6:	f042 0202 	orrlt.w	r2, r2, #2
 80037ea:	9307      	strge	r3, [sp, #28]
 80037ec:	9307      	strlt	r3, [sp, #28]
 80037ee:	bfb8      	it	lt
 80037f0:	9204      	strlt	r2, [sp, #16]
 80037f2:	7823      	ldrb	r3, [r4, #0]
 80037f4:	2b2e      	cmp	r3, #46	; 0x2e
 80037f6:	d10c      	bne.n	8003812 <_vfiprintf_r+0x176>
 80037f8:	7863      	ldrb	r3, [r4, #1]
 80037fa:	2b2a      	cmp	r3, #42	; 0x2a
 80037fc:	d135      	bne.n	800386a <_vfiprintf_r+0x1ce>
 80037fe:	9b03      	ldr	r3, [sp, #12]
 8003800:	1d1a      	adds	r2, r3, #4
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	9203      	str	r2, [sp, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	bfb8      	it	lt
 800380a:	f04f 33ff 	movlt.w	r3, #4294967295
 800380e:	3402      	adds	r4, #2
 8003810:	9305      	str	r3, [sp, #20]
 8003812:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80038f8 <_vfiprintf_r+0x25c>
 8003816:	7821      	ldrb	r1, [r4, #0]
 8003818:	2203      	movs	r2, #3
 800381a:	4650      	mov	r0, sl
 800381c:	f7fc fcd8 	bl	80001d0 <memchr>
 8003820:	b140      	cbz	r0, 8003834 <_vfiprintf_r+0x198>
 8003822:	2340      	movs	r3, #64	; 0x40
 8003824:	eba0 000a 	sub.w	r0, r0, sl
 8003828:	fa03 f000 	lsl.w	r0, r3, r0
 800382c:	9b04      	ldr	r3, [sp, #16]
 800382e:	4303      	orrs	r3, r0
 8003830:	3401      	adds	r4, #1
 8003832:	9304      	str	r3, [sp, #16]
 8003834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003838:	482c      	ldr	r0, [pc, #176]	; (80038ec <_vfiprintf_r+0x250>)
 800383a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800383e:	2206      	movs	r2, #6
 8003840:	f7fc fcc6 	bl	80001d0 <memchr>
 8003844:	2800      	cmp	r0, #0
 8003846:	d03f      	beq.n	80038c8 <_vfiprintf_r+0x22c>
 8003848:	4b29      	ldr	r3, [pc, #164]	; (80038f0 <_vfiprintf_r+0x254>)
 800384a:	bb1b      	cbnz	r3, 8003894 <_vfiprintf_r+0x1f8>
 800384c:	9b03      	ldr	r3, [sp, #12]
 800384e:	3307      	adds	r3, #7
 8003850:	f023 0307 	bic.w	r3, r3, #7
 8003854:	3308      	adds	r3, #8
 8003856:	9303      	str	r3, [sp, #12]
 8003858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800385a:	443b      	add	r3, r7
 800385c:	9309      	str	r3, [sp, #36]	; 0x24
 800385e:	e767      	b.n	8003730 <_vfiprintf_r+0x94>
 8003860:	fb0c 3202 	mla	r2, ip, r2, r3
 8003864:	460c      	mov	r4, r1
 8003866:	2001      	movs	r0, #1
 8003868:	e7a5      	b.n	80037b6 <_vfiprintf_r+0x11a>
 800386a:	2300      	movs	r3, #0
 800386c:	3401      	adds	r4, #1
 800386e:	9305      	str	r3, [sp, #20]
 8003870:	4619      	mov	r1, r3
 8003872:	f04f 0c0a 	mov.w	ip, #10
 8003876:	4620      	mov	r0, r4
 8003878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800387c:	3a30      	subs	r2, #48	; 0x30
 800387e:	2a09      	cmp	r2, #9
 8003880:	d903      	bls.n	800388a <_vfiprintf_r+0x1ee>
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0c5      	beq.n	8003812 <_vfiprintf_r+0x176>
 8003886:	9105      	str	r1, [sp, #20]
 8003888:	e7c3      	b.n	8003812 <_vfiprintf_r+0x176>
 800388a:	fb0c 2101 	mla	r1, ip, r1, r2
 800388e:	4604      	mov	r4, r0
 8003890:	2301      	movs	r3, #1
 8003892:	e7f0      	b.n	8003876 <_vfiprintf_r+0x1da>
 8003894:	ab03      	add	r3, sp, #12
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	462a      	mov	r2, r5
 800389a:	4b16      	ldr	r3, [pc, #88]	; (80038f4 <_vfiprintf_r+0x258>)
 800389c:	a904      	add	r1, sp, #16
 800389e:	4630      	mov	r0, r6
 80038a0:	f3af 8000 	nop.w
 80038a4:	4607      	mov	r7, r0
 80038a6:	1c78      	adds	r0, r7, #1
 80038a8:	d1d6      	bne.n	8003858 <_vfiprintf_r+0x1bc>
 80038aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038ac:	07d9      	lsls	r1, r3, #31
 80038ae:	d405      	bmi.n	80038bc <_vfiprintf_r+0x220>
 80038b0:	89ab      	ldrh	r3, [r5, #12]
 80038b2:	059a      	lsls	r2, r3, #22
 80038b4:	d402      	bmi.n	80038bc <_vfiprintf_r+0x220>
 80038b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038b8:	f7ff fe31 	bl	800351e <__retarget_lock_release_recursive>
 80038bc:	89ab      	ldrh	r3, [r5, #12]
 80038be:	065b      	lsls	r3, r3, #25
 80038c0:	f53f af12 	bmi.w	80036e8 <_vfiprintf_r+0x4c>
 80038c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038c6:	e711      	b.n	80036ec <_vfiprintf_r+0x50>
 80038c8:	ab03      	add	r3, sp, #12
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	462a      	mov	r2, r5
 80038ce:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <_vfiprintf_r+0x258>)
 80038d0:	a904      	add	r1, sp, #16
 80038d2:	4630      	mov	r0, r6
 80038d4:	f000 f880 	bl	80039d8 <_printf_i>
 80038d8:	e7e4      	b.n	80038a4 <_vfiprintf_r+0x208>
 80038da:	bf00      	nop
 80038dc:	080042c0 	.word	0x080042c0
 80038e0:	080042e0 	.word	0x080042e0
 80038e4:	080042a0 	.word	0x080042a0
 80038e8:	08004300 	.word	0x08004300
 80038ec:	0800430a 	.word	0x0800430a
 80038f0:	00000000 	.word	0x00000000
 80038f4:	08003677 	.word	0x08003677
 80038f8:	08004306 	.word	0x08004306

080038fc <_printf_common>:
 80038fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003900:	4616      	mov	r6, r2
 8003902:	4699      	mov	r9, r3
 8003904:	688a      	ldr	r2, [r1, #8]
 8003906:	690b      	ldr	r3, [r1, #16]
 8003908:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800390c:	4293      	cmp	r3, r2
 800390e:	bfb8      	it	lt
 8003910:	4613      	movlt	r3, r2
 8003912:	6033      	str	r3, [r6, #0]
 8003914:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003918:	4607      	mov	r7, r0
 800391a:	460c      	mov	r4, r1
 800391c:	b10a      	cbz	r2, 8003922 <_printf_common+0x26>
 800391e:	3301      	adds	r3, #1
 8003920:	6033      	str	r3, [r6, #0]
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	0699      	lsls	r1, r3, #26
 8003926:	bf42      	ittt	mi
 8003928:	6833      	ldrmi	r3, [r6, #0]
 800392a:	3302      	addmi	r3, #2
 800392c:	6033      	strmi	r3, [r6, #0]
 800392e:	6825      	ldr	r5, [r4, #0]
 8003930:	f015 0506 	ands.w	r5, r5, #6
 8003934:	d106      	bne.n	8003944 <_printf_common+0x48>
 8003936:	f104 0a19 	add.w	sl, r4, #25
 800393a:	68e3      	ldr	r3, [r4, #12]
 800393c:	6832      	ldr	r2, [r6, #0]
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	42ab      	cmp	r3, r5
 8003942:	dc26      	bgt.n	8003992 <_printf_common+0x96>
 8003944:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003948:	1e13      	subs	r3, r2, #0
 800394a:	6822      	ldr	r2, [r4, #0]
 800394c:	bf18      	it	ne
 800394e:	2301      	movne	r3, #1
 8003950:	0692      	lsls	r2, r2, #26
 8003952:	d42b      	bmi.n	80039ac <_printf_common+0xb0>
 8003954:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003958:	4649      	mov	r1, r9
 800395a:	4638      	mov	r0, r7
 800395c:	47c0      	blx	r8
 800395e:	3001      	adds	r0, #1
 8003960:	d01e      	beq.n	80039a0 <_printf_common+0xa4>
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	68e5      	ldr	r5, [r4, #12]
 8003966:	6832      	ldr	r2, [r6, #0]
 8003968:	f003 0306 	and.w	r3, r3, #6
 800396c:	2b04      	cmp	r3, #4
 800396e:	bf08      	it	eq
 8003970:	1aad      	subeq	r5, r5, r2
 8003972:	68a3      	ldr	r3, [r4, #8]
 8003974:	6922      	ldr	r2, [r4, #16]
 8003976:	bf0c      	ite	eq
 8003978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800397c:	2500      	movne	r5, #0
 800397e:	4293      	cmp	r3, r2
 8003980:	bfc4      	itt	gt
 8003982:	1a9b      	subgt	r3, r3, r2
 8003984:	18ed      	addgt	r5, r5, r3
 8003986:	2600      	movs	r6, #0
 8003988:	341a      	adds	r4, #26
 800398a:	42b5      	cmp	r5, r6
 800398c:	d11a      	bne.n	80039c4 <_printf_common+0xc8>
 800398e:	2000      	movs	r0, #0
 8003990:	e008      	b.n	80039a4 <_printf_common+0xa8>
 8003992:	2301      	movs	r3, #1
 8003994:	4652      	mov	r2, sl
 8003996:	4649      	mov	r1, r9
 8003998:	4638      	mov	r0, r7
 800399a:	47c0      	blx	r8
 800399c:	3001      	adds	r0, #1
 800399e:	d103      	bne.n	80039a8 <_printf_common+0xac>
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295
 80039a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a8:	3501      	adds	r5, #1
 80039aa:	e7c6      	b.n	800393a <_printf_common+0x3e>
 80039ac:	18e1      	adds	r1, r4, r3
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	2030      	movs	r0, #48	; 0x30
 80039b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039b6:	4422      	add	r2, r4
 80039b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039c0:	3302      	adds	r3, #2
 80039c2:	e7c7      	b.n	8003954 <_printf_common+0x58>
 80039c4:	2301      	movs	r3, #1
 80039c6:	4622      	mov	r2, r4
 80039c8:	4649      	mov	r1, r9
 80039ca:	4638      	mov	r0, r7
 80039cc:	47c0      	blx	r8
 80039ce:	3001      	adds	r0, #1
 80039d0:	d0e6      	beq.n	80039a0 <_printf_common+0xa4>
 80039d2:	3601      	adds	r6, #1
 80039d4:	e7d9      	b.n	800398a <_printf_common+0x8e>
	...

080039d8 <_printf_i>:
 80039d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039dc:	7e0f      	ldrb	r7, [r1, #24]
 80039de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039e0:	2f78      	cmp	r7, #120	; 0x78
 80039e2:	4691      	mov	r9, r2
 80039e4:	4680      	mov	r8, r0
 80039e6:	460c      	mov	r4, r1
 80039e8:	469a      	mov	sl, r3
 80039ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039ee:	d807      	bhi.n	8003a00 <_printf_i+0x28>
 80039f0:	2f62      	cmp	r7, #98	; 0x62
 80039f2:	d80a      	bhi.n	8003a0a <_printf_i+0x32>
 80039f4:	2f00      	cmp	r7, #0
 80039f6:	f000 80d8 	beq.w	8003baa <_printf_i+0x1d2>
 80039fa:	2f58      	cmp	r7, #88	; 0x58
 80039fc:	f000 80a3 	beq.w	8003b46 <_printf_i+0x16e>
 8003a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a08:	e03a      	b.n	8003a80 <_printf_i+0xa8>
 8003a0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a0e:	2b15      	cmp	r3, #21
 8003a10:	d8f6      	bhi.n	8003a00 <_printf_i+0x28>
 8003a12:	a101      	add	r1, pc, #4	; (adr r1, 8003a18 <_printf_i+0x40>)
 8003a14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a18:	08003a71 	.word	0x08003a71
 8003a1c:	08003a85 	.word	0x08003a85
 8003a20:	08003a01 	.word	0x08003a01
 8003a24:	08003a01 	.word	0x08003a01
 8003a28:	08003a01 	.word	0x08003a01
 8003a2c:	08003a01 	.word	0x08003a01
 8003a30:	08003a85 	.word	0x08003a85
 8003a34:	08003a01 	.word	0x08003a01
 8003a38:	08003a01 	.word	0x08003a01
 8003a3c:	08003a01 	.word	0x08003a01
 8003a40:	08003a01 	.word	0x08003a01
 8003a44:	08003b91 	.word	0x08003b91
 8003a48:	08003ab5 	.word	0x08003ab5
 8003a4c:	08003b73 	.word	0x08003b73
 8003a50:	08003a01 	.word	0x08003a01
 8003a54:	08003a01 	.word	0x08003a01
 8003a58:	08003bb3 	.word	0x08003bb3
 8003a5c:	08003a01 	.word	0x08003a01
 8003a60:	08003ab5 	.word	0x08003ab5
 8003a64:	08003a01 	.word	0x08003a01
 8003a68:	08003a01 	.word	0x08003a01
 8003a6c:	08003b7b 	.word	0x08003b7b
 8003a70:	682b      	ldr	r3, [r5, #0]
 8003a72:	1d1a      	adds	r2, r3, #4
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	602a      	str	r2, [r5, #0]
 8003a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0a3      	b.n	8003bcc <_printf_i+0x1f4>
 8003a84:	6820      	ldr	r0, [r4, #0]
 8003a86:	6829      	ldr	r1, [r5, #0]
 8003a88:	0606      	lsls	r6, r0, #24
 8003a8a:	f101 0304 	add.w	r3, r1, #4
 8003a8e:	d50a      	bpl.n	8003aa6 <_printf_i+0xce>
 8003a90:	680e      	ldr	r6, [r1, #0]
 8003a92:	602b      	str	r3, [r5, #0]
 8003a94:	2e00      	cmp	r6, #0
 8003a96:	da03      	bge.n	8003aa0 <_printf_i+0xc8>
 8003a98:	232d      	movs	r3, #45	; 0x2d
 8003a9a:	4276      	negs	r6, r6
 8003a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aa0:	485e      	ldr	r0, [pc, #376]	; (8003c1c <_printf_i+0x244>)
 8003aa2:	230a      	movs	r3, #10
 8003aa4:	e019      	b.n	8003ada <_printf_i+0x102>
 8003aa6:	680e      	ldr	r6, [r1, #0]
 8003aa8:	602b      	str	r3, [r5, #0]
 8003aaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003aae:	bf18      	it	ne
 8003ab0:	b236      	sxthne	r6, r6
 8003ab2:	e7ef      	b.n	8003a94 <_printf_i+0xbc>
 8003ab4:	682b      	ldr	r3, [r5, #0]
 8003ab6:	6820      	ldr	r0, [r4, #0]
 8003ab8:	1d19      	adds	r1, r3, #4
 8003aba:	6029      	str	r1, [r5, #0]
 8003abc:	0601      	lsls	r1, r0, #24
 8003abe:	d501      	bpl.n	8003ac4 <_printf_i+0xec>
 8003ac0:	681e      	ldr	r6, [r3, #0]
 8003ac2:	e002      	b.n	8003aca <_printf_i+0xf2>
 8003ac4:	0646      	lsls	r6, r0, #25
 8003ac6:	d5fb      	bpl.n	8003ac0 <_printf_i+0xe8>
 8003ac8:	881e      	ldrh	r6, [r3, #0]
 8003aca:	4854      	ldr	r0, [pc, #336]	; (8003c1c <_printf_i+0x244>)
 8003acc:	2f6f      	cmp	r7, #111	; 0x6f
 8003ace:	bf0c      	ite	eq
 8003ad0:	2308      	moveq	r3, #8
 8003ad2:	230a      	movne	r3, #10
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ada:	6865      	ldr	r5, [r4, #4]
 8003adc:	60a5      	str	r5, [r4, #8]
 8003ade:	2d00      	cmp	r5, #0
 8003ae0:	bfa2      	ittt	ge
 8003ae2:	6821      	ldrge	r1, [r4, #0]
 8003ae4:	f021 0104 	bicge.w	r1, r1, #4
 8003ae8:	6021      	strge	r1, [r4, #0]
 8003aea:	b90e      	cbnz	r6, 8003af0 <_printf_i+0x118>
 8003aec:	2d00      	cmp	r5, #0
 8003aee:	d04d      	beq.n	8003b8c <_printf_i+0x1b4>
 8003af0:	4615      	mov	r5, r2
 8003af2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003af6:	fb03 6711 	mls	r7, r3, r1, r6
 8003afa:	5dc7      	ldrb	r7, [r0, r7]
 8003afc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b00:	4637      	mov	r7, r6
 8003b02:	42bb      	cmp	r3, r7
 8003b04:	460e      	mov	r6, r1
 8003b06:	d9f4      	bls.n	8003af2 <_printf_i+0x11a>
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d10b      	bne.n	8003b24 <_printf_i+0x14c>
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	07de      	lsls	r6, r3, #31
 8003b10:	d508      	bpl.n	8003b24 <_printf_i+0x14c>
 8003b12:	6923      	ldr	r3, [r4, #16]
 8003b14:	6861      	ldr	r1, [r4, #4]
 8003b16:	4299      	cmp	r1, r3
 8003b18:	bfde      	ittt	le
 8003b1a:	2330      	movle	r3, #48	; 0x30
 8003b1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b24:	1b52      	subs	r2, r2, r5
 8003b26:	6122      	str	r2, [r4, #16]
 8003b28:	f8cd a000 	str.w	sl, [sp]
 8003b2c:	464b      	mov	r3, r9
 8003b2e:	aa03      	add	r2, sp, #12
 8003b30:	4621      	mov	r1, r4
 8003b32:	4640      	mov	r0, r8
 8003b34:	f7ff fee2 	bl	80038fc <_printf_common>
 8003b38:	3001      	adds	r0, #1
 8003b3a:	d14c      	bne.n	8003bd6 <_printf_i+0x1fe>
 8003b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b40:	b004      	add	sp, #16
 8003b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b46:	4835      	ldr	r0, [pc, #212]	; (8003c1c <_printf_i+0x244>)
 8003b48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b4c:	6829      	ldr	r1, [r5, #0]
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b54:	6029      	str	r1, [r5, #0]
 8003b56:	061d      	lsls	r5, r3, #24
 8003b58:	d514      	bpl.n	8003b84 <_printf_i+0x1ac>
 8003b5a:	07df      	lsls	r7, r3, #31
 8003b5c:	bf44      	itt	mi
 8003b5e:	f043 0320 	orrmi.w	r3, r3, #32
 8003b62:	6023      	strmi	r3, [r4, #0]
 8003b64:	b91e      	cbnz	r6, 8003b6e <_printf_i+0x196>
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	f023 0320 	bic.w	r3, r3, #32
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	2310      	movs	r3, #16
 8003b70:	e7b0      	b.n	8003ad4 <_printf_i+0xfc>
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	f043 0320 	orr.w	r3, r3, #32
 8003b78:	6023      	str	r3, [r4, #0]
 8003b7a:	2378      	movs	r3, #120	; 0x78
 8003b7c:	4828      	ldr	r0, [pc, #160]	; (8003c20 <_printf_i+0x248>)
 8003b7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b82:	e7e3      	b.n	8003b4c <_printf_i+0x174>
 8003b84:	0659      	lsls	r1, r3, #25
 8003b86:	bf48      	it	mi
 8003b88:	b2b6      	uxthmi	r6, r6
 8003b8a:	e7e6      	b.n	8003b5a <_printf_i+0x182>
 8003b8c:	4615      	mov	r5, r2
 8003b8e:	e7bb      	b.n	8003b08 <_printf_i+0x130>
 8003b90:	682b      	ldr	r3, [r5, #0]
 8003b92:	6826      	ldr	r6, [r4, #0]
 8003b94:	6961      	ldr	r1, [r4, #20]
 8003b96:	1d18      	adds	r0, r3, #4
 8003b98:	6028      	str	r0, [r5, #0]
 8003b9a:	0635      	lsls	r5, r6, #24
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	d501      	bpl.n	8003ba4 <_printf_i+0x1cc>
 8003ba0:	6019      	str	r1, [r3, #0]
 8003ba2:	e002      	b.n	8003baa <_printf_i+0x1d2>
 8003ba4:	0670      	lsls	r0, r6, #25
 8003ba6:	d5fb      	bpl.n	8003ba0 <_printf_i+0x1c8>
 8003ba8:	8019      	strh	r1, [r3, #0]
 8003baa:	2300      	movs	r3, #0
 8003bac:	6123      	str	r3, [r4, #16]
 8003bae:	4615      	mov	r5, r2
 8003bb0:	e7ba      	b.n	8003b28 <_printf_i+0x150>
 8003bb2:	682b      	ldr	r3, [r5, #0]
 8003bb4:	1d1a      	adds	r2, r3, #4
 8003bb6:	602a      	str	r2, [r5, #0]
 8003bb8:	681d      	ldr	r5, [r3, #0]
 8003bba:	6862      	ldr	r2, [r4, #4]
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	f7fc fb06 	bl	80001d0 <memchr>
 8003bc4:	b108      	cbz	r0, 8003bca <_printf_i+0x1f2>
 8003bc6:	1b40      	subs	r0, r0, r5
 8003bc8:	6060      	str	r0, [r4, #4]
 8003bca:	6863      	ldr	r3, [r4, #4]
 8003bcc:	6123      	str	r3, [r4, #16]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bd4:	e7a8      	b.n	8003b28 <_printf_i+0x150>
 8003bd6:	6923      	ldr	r3, [r4, #16]
 8003bd8:	462a      	mov	r2, r5
 8003bda:	4649      	mov	r1, r9
 8003bdc:	4640      	mov	r0, r8
 8003bde:	47d0      	blx	sl
 8003be0:	3001      	adds	r0, #1
 8003be2:	d0ab      	beq.n	8003b3c <_printf_i+0x164>
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	079b      	lsls	r3, r3, #30
 8003be8:	d413      	bmi.n	8003c12 <_printf_i+0x23a>
 8003bea:	68e0      	ldr	r0, [r4, #12]
 8003bec:	9b03      	ldr	r3, [sp, #12]
 8003bee:	4298      	cmp	r0, r3
 8003bf0:	bfb8      	it	lt
 8003bf2:	4618      	movlt	r0, r3
 8003bf4:	e7a4      	b.n	8003b40 <_printf_i+0x168>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	4632      	mov	r2, r6
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	4640      	mov	r0, r8
 8003bfe:	47d0      	blx	sl
 8003c00:	3001      	adds	r0, #1
 8003c02:	d09b      	beq.n	8003b3c <_printf_i+0x164>
 8003c04:	3501      	adds	r5, #1
 8003c06:	68e3      	ldr	r3, [r4, #12]
 8003c08:	9903      	ldr	r1, [sp, #12]
 8003c0a:	1a5b      	subs	r3, r3, r1
 8003c0c:	42ab      	cmp	r3, r5
 8003c0e:	dcf2      	bgt.n	8003bf6 <_printf_i+0x21e>
 8003c10:	e7eb      	b.n	8003bea <_printf_i+0x212>
 8003c12:	2500      	movs	r5, #0
 8003c14:	f104 0619 	add.w	r6, r4, #25
 8003c18:	e7f5      	b.n	8003c06 <_printf_i+0x22e>
 8003c1a:	bf00      	nop
 8003c1c:	08004311 	.word	0x08004311
 8003c20:	08004322 	.word	0x08004322

08003c24 <_sbrk_r>:
 8003c24:	b538      	push	{r3, r4, r5, lr}
 8003c26:	4d06      	ldr	r5, [pc, #24]	; (8003c40 <_sbrk_r+0x1c>)
 8003c28:	2300      	movs	r3, #0
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	4608      	mov	r0, r1
 8003c2e:	602b      	str	r3, [r5, #0]
 8003c30:	f7fc ff34 	bl	8000a9c <_sbrk>
 8003c34:	1c43      	adds	r3, r0, #1
 8003c36:	d102      	bne.n	8003c3e <_sbrk_r+0x1a>
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	b103      	cbz	r3, 8003c3e <_sbrk_r+0x1a>
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	bd38      	pop	{r3, r4, r5, pc}
 8003c40:	2000013c 	.word	0x2000013c

08003c44 <__sread>:
 8003c44:	b510      	push	{r4, lr}
 8003c46:	460c      	mov	r4, r1
 8003c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c4c:	f000 fab2 	bl	80041b4 <_read_r>
 8003c50:	2800      	cmp	r0, #0
 8003c52:	bfab      	itete	ge
 8003c54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c56:	89a3      	ldrhlt	r3, [r4, #12]
 8003c58:	181b      	addge	r3, r3, r0
 8003c5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c5e:	bfac      	ite	ge
 8003c60:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c62:	81a3      	strhlt	r3, [r4, #12]
 8003c64:	bd10      	pop	{r4, pc}

08003c66 <__swrite>:
 8003c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c6a:	461f      	mov	r7, r3
 8003c6c:	898b      	ldrh	r3, [r1, #12]
 8003c6e:	05db      	lsls	r3, r3, #23
 8003c70:	4605      	mov	r5, r0
 8003c72:	460c      	mov	r4, r1
 8003c74:	4616      	mov	r6, r2
 8003c76:	d505      	bpl.n	8003c84 <__swrite+0x1e>
 8003c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f000 f9c8 	bl	8004014 <_lseek_r>
 8003c84:	89a3      	ldrh	r3, [r4, #12]
 8003c86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c8e:	81a3      	strh	r3, [r4, #12]
 8003c90:	4632      	mov	r2, r6
 8003c92:	463b      	mov	r3, r7
 8003c94:	4628      	mov	r0, r5
 8003c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c9a:	f000 b869 	b.w	8003d70 <_write_r>

08003c9e <__sseek>:
 8003c9e:	b510      	push	{r4, lr}
 8003ca0:	460c      	mov	r4, r1
 8003ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ca6:	f000 f9b5 	bl	8004014 <_lseek_r>
 8003caa:	1c43      	adds	r3, r0, #1
 8003cac:	89a3      	ldrh	r3, [r4, #12]
 8003cae:	bf15      	itete	ne
 8003cb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003cb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003cb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cba:	81a3      	strheq	r3, [r4, #12]
 8003cbc:	bf18      	it	ne
 8003cbe:	81a3      	strhne	r3, [r4, #12]
 8003cc0:	bd10      	pop	{r4, pc}

08003cc2 <__sclose>:
 8003cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cc6:	f000 b8d3 	b.w	8003e70 <_close_r>
	...

08003ccc <__swbuf_r>:
 8003ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cce:	460e      	mov	r6, r1
 8003cd0:	4614      	mov	r4, r2
 8003cd2:	4605      	mov	r5, r0
 8003cd4:	b118      	cbz	r0, 8003cde <__swbuf_r+0x12>
 8003cd6:	6983      	ldr	r3, [r0, #24]
 8003cd8:	b90b      	cbnz	r3, 8003cde <__swbuf_r+0x12>
 8003cda:	f7ff fb81 	bl	80033e0 <__sinit>
 8003cde:	4b21      	ldr	r3, [pc, #132]	; (8003d64 <__swbuf_r+0x98>)
 8003ce0:	429c      	cmp	r4, r3
 8003ce2:	d12b      	bne.n	8003d3c <__swbuf_r+0x70>
 8003ce4:	686c      	ldr	r4, [r5, #4]
 8003ce6:	69a3      	ldr	r3, [r4, #24]
 8003ce8:	60a3      	str	r3, [r4, #8]
 8003cea:	89a3      	ldrh	r3, [r4, #12]
 8003cec:	071a      	lsls	r2, r3, #28
 8003cee:	d52f      	bpl.n	8003d50 <__swbuf_r+0x84>
 8003cf0:	6923      	ldr	r3, [r4, #16]
 8003cf2:	b36b      	cbz	r3, 8003d50 <__swbuf_r+0x84>
 8003cf4:	6923      	ldr	r3, [r4, #16]
 8003cf6:	6820      	ldr	r0, [r4, #0]
 8003cf8:	1ac0      	subs	r0, r0, r3
 8003cfa:	6963      	ldr	r3, [r4, #20]
 8003cfc:	b2f6      	uxtb	r6, r6
 8003cfe:	4283      	cmp	r3, r0
 8003d00:	4637      	mov	r7, r6
 8003d02:	dc04      	bgt.n	8003d0e <__swbuf_r+0x42>
 8003d04:	4621      	mov	r1, r4
 8003d06:	4628      	mov	r0, r5
 8003d08:	f000 f948 	bl	8003f9c <_fflush_r>
 8003d0c:	bb30      	cbnz	r0, 8003d5c <__swbuf_r+0x90>
 8003d0e:	68a3      	ldr	r3, [r4, #8]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	60a3      	str	r3, [r4, #8]
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	6022      	str	r2, [r4, #0]
 8003d1a:	701e      	strb	r6, [r3, #0]
 8003d1c:	6963      	ldr	r3, [r4, #20]
 8003d1e:	3001      	adds	r0, #1
 8003d20:	4283      	cmp	r3, r0
 8003d22:	d004      	beq.n	8003d2e <__swbuf_r+0x62>
 8003d24:	89a3      	ldrh	r3, [r4, #12]
 8003d26:	07db      	lsls	r3, r3, #31
 8003d28:	d506      	bpl.n	8003d38 <__swbuf_r+0x6c>
 8003d2a:	2e0a      	cmp	r6, #10
 8003d2c:	d104      	bne.n	8003d38 <__swbuf_r+0x6c>
 8003d2e:	4621      	mov	r1, r4
 8003d30:	4628      	mov	r0, r5
 8003d32:	f000 f933 	bl	8003f9c <_fflush_r>
 8003d36:	b988      	cbnz	r0, 8003d5c <__swbuf_r+0x90>
 8003d38:	4638      	mov	r0, r7
 8003d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d3c:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <__swbuf_r+0x9c>)
 8003d3e:	429c      	cmp	r4, r3
 8003d40:	d101      	bne.n	8003d46 <__swbuf_r+0x7a>
 8003d42:	68ac      	ldr	r4, [r5, #8]
 8003d44:	e7cf      	b.n	8003ce6 <__swbuf_r+0x1a>
 8003d46:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <__swbuf_r+0xa0>)
 8003d48:	429c      	cmp	r4, r3
 8003d4a:	bf08      	it	eq
 8003d4c:	68ec      	ldreq	r4, [r5, #12]
 8003d4e:	e7ca      	b.n	8003ce6 <__swbuf_r+0x1a>
 8003d50:	4621      	mov	r1, r4
 8003d52:	4628      	mov	r0, r5
 8003d54:	f000 f81e 	bl	8003d94 <__swsetup_r>
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	d0cb      	beq.n	8003cf4 <__swbuf_r+0x28>
 8003d5c:	f04f 37ff 	mov.w	r7, #4294967295
 8003d60:	e7ea      	b.n	8003d38 <__swbuf_r+0x6c>
 8003d62:	bf00      	nop
 8003d64:	080042c0 	.word	0x080042c0
 8003d68:	080042e0 	.word	0x080042e0
 8003d6c:	080042a0 	.word	0x080042a0

08003d70 <_write_r>:
 8003d70:	b538      	push	{r3, r4, r5, lr}
 8003d72:	4d07      	ldr	r5, [pc, #28]	; (8003d90 <_write_r+0x20>)
 8003d74:	4604      	mov	r4, r0
 8003d76:	4608      	mov	r0, r1
 8003d78:	4611      	mov	r1, r2
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	602a      	str	r2, [r5, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f7fc fc6c 	bl	800065c <_write>
 8003d84:	1c43      	adds	r3, r0, #1
 8003d86:	d102      	bne.n	8003d8e <_write_r+0x1e>
 8003d88:	682b      	ldr	r3, [r5, #0]
 8003d8a:	b103      	cbz	r3, 8003d8e <_write_r+0x1e>
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	bd38      	pop	{r3, r4, r5, pc}
 8003d90:	2000013c 	.word	0x2000013c

08003d94 <__swsetup_r>:
 8003d94:	4b32      	ldr	r3, [pc, #200]	; (8003e60 <__swsetup_r+0xcc>)
 8003d96:	b570      	push	{r4, r5, r6, lr}
 8003d98:	681d      	ldr	r5, [r3, #0]
 8003d9a:	4606      	mov	r6, r0
 8003d9c:	460c      	mov	r4, r1
 8003d9e:	b125      	cbz	r5, 8003daa <__swsetup_r+0x16>
 8003da0:	69ab      	ldr	r3, [r5, #24]
 8003da2:	b913      	cbnz	r3, 8003daa <__swsetup_r+0x16>
 8003da4:	4628      	mov	r0, r5
 8003da6:	f7ff fb1b 	bl	80033e0 <__sinit>
 8003daa:	4b2e      	ldr	r3, [pc, #184]	; (8003e64 <__swsetup_r+0xd0>)
 8003dac:	429c      	cmp	r4, r3
 8003dae:	d10f      	bne.n	8003dd0 <__swsetup_r+0x3c>
 8003db0:	686c      	ldr	r4, [r5, #4]
 8003db2:	89a3      	ldrh	r3, [r4, #12]
 8003db4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003db8:	0719      	lsls	r1, r3, #28
 8003dba:	d42c      	bmi.n	8003e16 <__swsetup_r+0x82>
 8003dbc:	06dd      	lsls	r5, r3, #27
 8003dbe:	d411      	bmi.n	8003de4 <__swsetup_r+0x50>
 8003dc0:	2309      	movs	r3, #9
 8003dc2:	6033      	str	r3, [r6, #0]
 8003dc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003dc8:	81a3      	strh	r3, [r4, #12]
 8003dca:	f04f 30ff 	mov.w	r0, #4294967295
 8003dce:	e03e      	b.n	8003e4e <__swsetup_r+0xba>
 8003dd0:	4b25      	ldr	r3, [pc, #148]	; (8003e68 <__swsetup_r+0xd4>)
 8003dd2:	429c      	cmp	r4, r3
 8003dd4:	d101      	bne.n	8003dda <__swsetup_r+0x46>
 8003dd6:	68ac      	ldr	r4, [r5, #8]
 8003dd8:	e7eb      	b.n	8003db2 <__swsetup_r+0x1e>
 8003dda:	4b24      	ldr	r3, [pc, #144]	; (8003e6c <__swsetup_r+0xd8>)
 8003ddc:	429c      	cmp	r4, r3
 8003dde:	bf08      	it	eq
 8003de0:	68ec      	ldreq	r4, [r5, #12]
 8003de2:	e7e6      	b.n	8003db2 <__swsetup_r+0x1e>
 8003de4:	0758      	lsls	r0, r3, #29
 8003de6:	d512      	bpl.n	8003e0e <__swsetup_r+0x7a>
 8003de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dea:	b141      	cbz	r1, 8003dfe <__swsetup_r+0x6a>
 8003dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003df0:	4299      	cmp	r1, r3
 8003df2:	d002      	beq.n	8003dfa <__swsetup_r+0x66>
 8003df4:	4630      	mov	r0, r6
 8003df6:	f000 f991 	bl	800411c <_free_r>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	6363      	str	r3, [r4, #52]	; 0x34
 8003dfe:	89a3      	ldrh	r3, [r4, #12]
 8003e00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e04:	81a3      	strh	r3, [r4, #12]
 8003e06:	2300      	movs	r3, #0
 8003e08:	6063      	str	r3, [r4, #4]
 8003e0a:	6923      	ldr	r3, [r4, #16]
 8003e0c:	6023      	str	r3, [r4, #0]
 8003e0e:	89a3      	ldrh	r3, [r4, #12]
 8003e10:	f043 0308 	orr.w	r3, r3, #8
 8003e14:	81a3      	strh	r3, [r4, #12]
 8003e16:	6923      	ldr	r3, [r4, #16]
 8003e18:	b94b      	cbnz	r3, 8003e2e <__swsetup_r+0x9a>
 8003e1a:	89a3      	ldrh	r3, [r4, #12]
 8003e1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e24:	d003      	beq.n	8003e2e <__swsetup_r+0x9a>
 8003e26:	4621      	mov	r1, r4
 8003e28:	4630      	mov	r0, r6
 8003e2a:	f000 f92b 	bl	8004084 <__smakebuf_r>
 8003e2e:	89a0      	ldrh	r0, [r4, #12]
 8003e30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e34:	f010 0301 	ands.w	r3, r0, #1
 8003e38:	d00a      	beq.n	8003e50 <__swsetup_r+0xbc>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60a3      	str	r3, [r4, #8]
 8003e3e:	6963      	ldr	r3, [r4, #20]
 8003e40:	425b      	negs	r3, r3
 8003e42:	61a3      	str	r3, [r4, #24]
 8003e44:	6923      	ldr	r3, [r4, #16]
 8003e46:	b943      	cbnz	r3, 8003e5a <__swsetup_r+0xc6>
 8003e48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e4c:	d1ba      	bne.n	8003dc4 <__swsetup_r+0x30>
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}
 8003e50:	0781      	lsls	r1, r0, #30
 8003e52:	bf58      	it	pl
 8003e54:	6963      	ldrpl	r3, [r4, #20]
 8003e56:	60a3      	str	r3, [r4, #8]
 8003e58:	e7f4      	b.n	8003e44 <__swsetup_r+0xb0>
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	e7f7      	b.n	8003e4e <__swsetup_r+0xba>
 8003e5e:	bf00      	nop
 8003e60:	2000000c 	.word	0x2000000c
 8003e64:	080042c0 	.word	0x080042c0
 8003e68:	080042e0 	.word	0x080042e0
 8003e6c:	080042a0 	.word	0x080042a0

08003e70 <_close_r>:
 8003e70:	b538      	push	{r3, r4, r5, lr}
 8003e72:	4d06      	ldr	r5, [pc, #24]	; (8003e8c <_close_r+0x1c>)
 8003e74:	2300      	movs	r3, #0
 8003e76:	4604      	mov	r4, r0
 8003e78:	4608      	mov	r0, r1
 8003e7a:	602b      	str	r3, [r5, #0]
 8003e7c:	f7fc fdd9 	bl	8000a32 <_close>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	d102      	bne.n	8003e8a <_close_r+0x1a>
 8003e84:	682b      	ldr	r3, [r5, #0]
 8003e86:	b103      	cbz	r3, 8003e8a <_close_r+0x1a>
 8003e88:	6023      	str	r3, [r4, #0]
 8003e8a:	bd38      	pop	{r3, r4, r5, pc}
 8003e8c:	2000013c 	.word	0x2000013c

08003e90 <__sflush_r>:
 8003e90:	898a      	ldrh	r2, [r1, #12]
 8003e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e96:	4605      	mov	r5, r0
 8003e98:	0710      	lsls	r0, r2, #28
 8003e9a:	460c      	mov	r4, r1
 8003e9c:	d458      	bmi.n	8003f50 <__sflush_r+0xc0>
 8003e9e:	684b      	ldr	r3, [r1, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	dc05      	bgt.n	8003eb0 <__sflush_r+0x20>
 8003ea4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	dc02      	bgt.n	8003eb0 <__sflush_r+0x20>
 8003eaa:	2000      	movs	r0, #0
 8003eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003eb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003eb2:	2e00      	cmp	r6, #0
 8003eb4:	d0f9      	beq.n	8003eaa <__sflush_r+0x1a>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ebc:	682f      	ldr	r7, [r5, #0]
 8003ebe:	602b      	str	r3, [r5, #0]
 8003ec0:	d032      	beq.n	8003f28 <__sflush_r+0x98>
 8003ec2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ec4:	89a3      	ldrh	r3, [r4, #12]
 8003ec6:	075a      	lsls	r2, r3, #29
 8003ec8:	d505      	bpl.n	8003ed6 <__sflush_r+0x46>
 8003eca:	6863      	ldr	r3, [r4, #4]
 8003ecc:	1ac0      	subs	r0, r0, r3
 8003ece:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ed0:	b10b      	cbz	r3, 8003ed6 <__sflush_r+0x46>
 8003ed2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ed4:	1ac0      	subs	r0, r0, r3
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	4602      	mov	r2, r0
 8003eda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003edc:	6a21      	ldr	r1, [r4, #32]
 8003ede:	4628      	mov	r0, r5
 8003ee0:	47b0      	blx	r6
 8003ee2:	1c43      	adds	r3, r0, #1
 8003ee4:	89a3      	ldrh	r3, [r4, #12]
 8003ee6:	d106      	bne.n	8003ef6 <__sflush_r+0x66>
 8003ee8:	6829      	ldr	r1, [r5, #0]
 8003eea:	291d      	cmp	r1, #29
 8003eec:	d82c      	bhi.n	8003f48 <__sflush_r+0xb8>
 8003eee:	4a2a      	ldr	r2, [pc, #168]	; (8003f98 <__sflush_r+0x108>)
 8003ef0:	40ca      	lsrs	r2, r1
 8003ef2:	07d6      	lsls	r6, r2, #31
 8003ef4:	d528      	bpl.n	8003f48 <__sflush_r+0xb8>
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	6062      	str	r2, [r4, #4]
 8003efa:	04d9      	lsls	r1, r3, #19
 8003efc:	6922      	ldr	r2, [r4, #16]
 8003efe:	6022      	str	r2, [r4, #0]
 8003f00:	d504      	bpl.n	8003f0c <__sflush_r+0x7c>
 8003f02:	1c42      	adds	r2, r0, #1
 8003f04:	d101      	bne.n	8003f0a <__sflush_r+0x7a>
 8003f06:	682b      	ldr	r3, [r5, #0]
 8003f08:	b903      	cbnz	r3, 8003f0c <__sflush_r+0x7c>
 8003f0a:	6560      	str	r0, [r4, #84]	; 0x54
 8003f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f0e:	602f      	str	r7, [r5, #0]
 8003f10:	2900      	cmp	r1, #0
 8003f12:	d0ca      	beq.n	8003eaa <__sflush_r+0x1a>
 8003f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f18:	4299      	cmp	r1, r3
 8003f1a:	d002      	beq.n	8003f22 <__sflush_r+0x92>
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	f000 f8fd 	bl	800411c <_free_r>
 8003f22:	2000      	movs	r0, #0
 8003f24:	6360      	str	r0, [r4, #52]	; 0x34
 8003f26:	e7c1      	b.n	8003eac <__sflush_r+0x1c>
 8003f28:	6a21      	ldr	r1, [r4, #32]
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	47b0      	blx	r6
 8003f30:	1c41      	adds	r1, r0, #1
 8003f32:	d1c7      	bne.n	8003ec4 <__sflush_r+0x34>
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0c4      	beq.n	8003ec4 <__sflush_r+0x34>
 8003f3a:	2b1d      	cmp	r3, #29
 8003f3c:	d001      	beq.n	8003f42 <__sflush_r+0xb2>
 8003f3e:	2b16      	cmp	r3, #22
 8003f40:	d101      	bne.n	8003f46 <__sflush_r+0xb6>
 8003f42:	602f      	str	r7, [r5, #0]
 8003f44:	e7b1      	b.n	8003eaa <__sflush_r+0x1a>
 8003f46:	89a3      	ldrh	r3, [r4, #12]
 8003f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f4c:	81a3      	strh	r3, [r4, #12]
 8003f4e:	e7ad      	b.n	8003eac <__sflush_r+0x1c>
 8003f50:	690f      	ldr	r7, [r1, #16]
 8003f52:	2f00      	cmp	r7, #0
 8003f54:	d0a9      	beq.n	8003eaa <__sflush_r+0x1a>
 8003f56:	0793      	lsls	r3, r2, #30
 8003f58:	680e      	ldr	r6, [r1, #0]
 8003f5a:	bf08      	it	eq
 8003f5c:	694b      	ldreq	r3, [r1, #20]
 8003f5e:	600f      	str	r7, [r1, #0]
 8003f60:	bf18      	it	ne
 8003f62:	2300      	movne	r3, #0
 8003f64:	eba6 0807 	sub.w	r8, r6, r7
 8003f68:	608b      	str	r3, [r1, #8]
 8003f6a:	f1b8 0f00 	cmp.w	r8, #0
 8003f6e:	dd9c      	ble.n	8003eaa <__sflush_r+0x1a>
 8003f70:	6a21      	ldr	r1, [r4, #32]
 8003f72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f74:	4643      	mov	r3, r8
 8003f76:	463a      	mov	r2, r7
 8003f78:	4628      	mov	r0, r5
 8003f7a:	47b0      	blx	r6
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	dc06      	bgt.n	8003f8e <__sflush_r+0xfe>
 8003f80:	89a3      	ldrh	r3, [r4, #12]
 8003f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f86:	81a3      	strh	r3, [r4, #12]
 8003f88:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8c:	e78e      	b.n	8003eac <__sflush_r+0x1c>
 8003f8e:	4407      	add	r7, r0
 8003f90:	eba8 0800 	sub.w	r8, r8, r0
 8003f94:	e7e9      	b.n	8003f6a <__sflush_r+0xda>
 8003f96:	bf00      	nop
 8003f98:	20400001 	.word	0x20400001

08003f9c <_fflush_r>:
 8003f9c:	b538      	push	{r3, r4, r5, lr}
 8003f9e:	690b      	ldr	r3, [r1, #16]
 8003fa0:	4605      	mov	r5, r0
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	b913      	cbnz	r3, 8003fac <_fflush_r+0x10>
 8003fa6:	2500      	movs	r5, #0
 8003fa8:	4628      	mov	r0, r5
 8003faa:	bd38      	pop	{r3, r4, r5, pc}
 8003fac:	b118      	cbz	r0, 8003fb6 <_fflush_r+0x1a>
 8003fae:	6983      	ldr	r3, [r0, #24]
 8003fb0:	b90b      	cbnz	r3, 8003fb6 <_fflush_r+0x1a>
 8003fb2:	f7ff fa15 	bl	80033e0 <__sinit>
 8003fb6:	4b14      	ldr	r3, [pc, #80]	; (8004008 <_fflush_r+0x6c>)
 8003fb8:	429c      	cmp	r4, r3
 8003fba:	d11b      	bne.n	8003ff4 <_fflush_r+0x58>
 8003fbc:	686c      	ldr	r4, [r5, #4]
 8003fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0ef      	beq.n	8003fa6 <_fflush_r+0xa>
 8003fc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003fc8:	07d0      	lsls	r0, r2, #31
 8003fca:	d404      	bmi.n	8003fd6 <_fflush_r+0x3a>
 8003fcc:	0599      	lsls	r1, r3, #22
 8003fce:	d402      	bmi.n	8003fd6 <_fflush_r+0x3a>
 8003fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fd2:	f7ff faa3 	bl	800351c <__retarget_lock_acquire_recursive>
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	4621      	mov	r1, r4
 8003fda:	f7ff ff59 	bl	8003e90 <__sflush_r>
 8003fde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fe0:	07da      	lsls	r2, r3, #31
 8003fe2:	4605      	mov	r5, r0
 8003fe4:	d4e0      	bmi.n	8003fa8 <_fflush_r+0xc>
 8003fe6:	89a3      	ldrh	r3, [r4, #12]
 8003fe8:	059b      	lsls	r3, r3, #22
 8003fea:	d4dd      	bmi.n	8003fa8 <_fflush_r+0xc>
 8003fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fee:	f7ff fa96 	bl	800351e <__retarget_lock_release_recursive>
 8003ff2:	e7d9      	b.n	8003fa8 <_fflush_r+0xc>
 8003ff4:	4b05      	ldr	r3, [pc, #20]	; (800400c <_fflush_r+0x70>)
 8003ff6:	429c      	cmp	r4, r3
 8003ff8:	d101      	bne.n	8003ffe <_fflush_r+0x62>
 8003ffa:	68ac      	ldr	r4, [r5, #8]
 8003ffc:	e7df      	b.n	8003fbe <_fflush_r+0x22>
 8003ffe:	4b04      	ldr	r3, [pc, #16]	; (8004010 <_fflush_r+0x74>)
 8004000:	429c      	cmp	r4, r3
 8004002:	bf08      	it	eq
 8004004:	68ec      	ldreq	r4, [r5, #12]
 8004006:	e7da      	b.n	8003fbe <_fflush_r+0x22>
 8004008:	080042c0 	.word	0x080042c0
 800400c:	080042e0 	.word	0x080042e0
 8004010:	080042a0 	.word	0x080042a0

08004014 <_lseek_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	4d07      	ldr	r5, [pc, #28]	; (8004034 <_lseek_r+0x20>)
 8004018:	4604      	mov	r4, r0
 800401a:	4608      	mov	r0, r1
 800401c:	4611      	mov	r1, r2
 800401e:	2200      	movs	r2, #0
 8004020:	602a      	str	r2, [r5, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	f7fc fd2c 	bl	8000a80 <_lseek>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	d102      	bne.n	8004032 <_lseek_r+0x1e>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	b103      	cbz	r3, 8004032 <_lseek_r+0x1e>
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	bd38      	pop	{r3, r4, r5, pc}
 8004034:	2000013c 	.word	0x2000013c

08004038 <__swhatbuf_r>:
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	460e      	mov	r6, r1
 800403c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004040:	2900      	cmp	r1, #0
 8004042:	b096      	sub	sp, #88	; 0x58
 8004044:	4614      	mov	r4, r2
 8004046:	461d      	mov	r5, r3
 8004048:	da08      	bge.n	800405c <__swhatbuf_r+0x24>
 800404a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	602a      	str	r2, [r5, #0]
 8004052:	061a      	lsls	r2, r3, #24
 8004054:	d410      	bmi.n	8004078 <__swhatbuf_r+0x40>
 8004056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800405a:	e00e      	b.n	800407a <__swhatbuf_r+0x42>
 800405c:	466a      	mov	r2, sp
 800405e:	f000 f8bb 	bl	80041d8 <_fstat_r>
 8004062:	2800      	cmp	r0, #0
 8004064:	dbf1      	blt.n	800404a <__swhatbuf_r+0x12>
 8004066:	9a01      	ldr	r2, [sp, #4]
 8004068:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800406c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004070:	425a      	negs	r2, r3
 8004072:	415a      	adcs	r2, r3
 8004074:	602a      	str	r2, [r5, #0]
 8004076:	e7ee      	b.n	8004056 <__swhatbuf_r+0x1e>
 8004078:	2340      	movs	r3, #64	; 0x40
 800407a:	2000      	movs	r0, #0
 800407c:	6023      	str	r3, [r4, #0]
 800407e:	b016      	add	sp, #88	; 0x58
 8004080:	bd70      	pop	{r4, r5, r6, pc}
	...

08004084 <__smakebuf_r>:
 8004084:	898b      	ldrh	r3, [r1, #12]
 8004086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004088:	079d      	lsls	r5, r3, #30
 800408a:	4606      	mov	r6, r0
 800408c:	460c      	mov	r4, r1
 800408e:	d507      	bpl.n	80040a0 <__smakebuf_r+0x1c>
 8004090:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004094:	6023      	str	r3, [r4, #0]
 8004096:	6123      	str	r3, [r4, #16]
 8004098:	2301      	movs	r3, #1
 800409a:	6163      	str	r3, [r4, #20]
 800409c:	b002      	add	sp, #8
 800409e:	bd70      	pop	{r4, r5, r6, pc}
 80040a0:	ab01      	add	r3, sp, #4
 80040a2:	466a      	mov	r2, sp
 80040a4:	f7ff ffc8 	bl	8004038 <__swhatbuf_r>
 80040a8:	9900      	ldr	r1, [sp, #0]
 80040aa:	4605      	mov	r5, r0
 80040ac:	4630      	mov	r0, r6
 80040ae:	f7ff fa57 	bl	8003560 <_malloc_r>
 80040b2:	b948      	cbnz	r0, 80040c8 <__smakebuf_r+0x44>
 80040b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040b8:	059a      	lsls	r2, r3, #22
 80040ba:	d4ef      	bmi.n	800409c <__smakebuf_r+0x18>
 80040bc:	f023 0303 	bic.w	r3, r3, #3
 80040c0:	f043 0302 	orr.w	r3, r3, #2
 80040c4:	81a3      	strh	r3, [r4, #12]
 80040c6:	e7e3      	b.n	8004090 <__smakebuf_r+0xc>
 80040c8:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <__smakebuf_r+0x7c>)
 80040ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80040cc:	89a3      	ldrh	r3, [r4, #12]
 80040ce:	6020      	str	r0, [r4, #0]
 80040d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d4:	81a3      	strh	r3, [r4, #12]
 80040d6:	9b00      	ldr	r3, [sp, #0]
 80040d8:	6163      	str	r3, [r4, #20]
 80040da:	9b01      	ldr	r3, [sp, #4]
 80040dc:	6120      	str	r0, [r4, #16]
 80040de:	b15b      	cbz	r3, 80040f8 <__smakebuf_r+0x74>
 80040e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040e4:	4630      	mov	r0, r6
 80040e6:	f000 f889 	bl	80041fc <_isatty_r>
 80040ea:	b128      	cbz	r0, 80040f8 <__smakebuf_r+0x74>
 80040ec:	89a3      	ldrh	r3, [r4, #12]
 80040ee:	f023 0303 	bic.w	r3, r3, #3
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	81a3      	strh	r3, [r4, #12]
 80040f8:	89a0      	ldrh	r0, [r4, #12]
 80040fa:	4305      	orrs	r5, r0
 80040fc:	81a5      	strh	r5, [r4, #12]
 80040fe:	e7cd      	b.n	800409c <__smakebuf_r+0x18>
 8004100:	08003379 	.word	0x08003379

08004104 <__malloc_lock>:
 8004104:	4801      	ldr	r0, [pc, #4]	; (800410c <__malloc_lock+0x8>)
 8004106:	f7ff ba09 	b.w	800351c <__retarget_lock_acquire_recursive>
 800410a:	bf00      	nop
 800410c:	20000130 	.word	0x20000130

08004110 <__malloc_unlock>:
 8004110:	4801      	ldr	r0, [pc, #4]	; (8004118 <__malloc_unlock+0x8>)
 8004112:	f7ff ba04 	b.w	800351e <__retarget_lock_release_recursive>
 8004116:	bf00      	nop
 8004118:	20000130 	.word	0x20000130

0800411c <_free_r>:
 800411c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800411e:	2900      	cmp	r1, #0
 8004120:	d044      	beq.n	80041ac <_free_r+0x90>
 8004122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004126:	9001      	str	r0, [sp, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	f1a1 0404 	sub.w	r4, r1, #4
 800412e:	bfb8      	it	lt
 8004130:	18e4      	addlt	r4, r4, r3
 8004132:	f7ff ffe7 	bl	8004104 <__malloc_lock>
 8004136:	4a1e      	ldr	r2, [pc, #120]	; (80041b0 <_free_r+0x94>)
 8004138:	9801      	ldr	r0, [sp, #4]
 800413a:	6813      	ldr	r3, [r2, #0]
 800413c:	b933      	cbnz	r3, 800414c <_free_r+0x30>
 800413e:	6063      	str	r3, [r4, #4]
 8004140:	6014      	str	r4, [r2, #0]
 8004142:	b003      	add	sp, #12
 8004144:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004148:	f7ff bfe2 	b.w	8004110 <__malloc_unlock>
 800414c:	42a3      	cmp	r3, r4
 800414e:	d908      	bls.n	8004162 <_free_r+0x46>
 8004150:	6825      	ldr	r5, [r4, #0]
 8004152:	1961      	adds	r1, r4, r5
 8004154:	428b      	cmp	r3, r1
 8004156:	bf01      	itttt	eq
 8004158:	6819      	ldreq	r1, [r3, #0]
 800415a:	685b      	ldreq	r3, [r3, #4]
 800415c:	1949      	addeq	r1, r1, r5
 800415e:	6021      	streq	r1, [r4, #0]
 8004160:	e7ed      	b.n	800413e <_free_r+0x22>
 8004162:	461a      	mov	r2, r3
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	b10b      	cbz	r3, 800416c <_free_r+0x50>
 8004168:	42a3      	cmp	r3, r4
 800416a:	d9fa      	bls.n	8004162 <_free_r+0x46>
 800416c:	6811      	ldr	r1, [r2, #0]
 800416e:	1855      	adds	r5, r2, r1
 8004170:	42a5      	cmp	r5, r4
 8004172:	d10b      	bne.n	800418c <_free_r+0x70>
 8004174:	6824      	ldr	r4, [r4, #0]
 8004176:	4421      	add	r1, r4
 8004178:	1854      	adds	r4, r2, r1
 800417a:	42a3      	cmp	r3, r4
 800417c:	6011      	str	r1, [r2, #0]
 800417e:	d1e0      	bne.n	8004142 <_free_r+0x26>
 8004180:	681c      	ldr	r4, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	6053      	str	r3, [r2, #4]
 8004186:	4421      	add	r1, r4
 8004188:	6011      	str	r1, [r2, #0]
 800418a:	e7da      	b.n	8004142 <_free_r+0x26>
 800418c:	d902      	bls.n	8004194 <_free_r+0x78>
 800418e:	230c      	movs	r3, #12
 8004190:	6003      	str	r3, [r0, #0]
 8004192:	e7d6      	b.n	8004142 <_free_r+0x26>
 8004194:	6825      	ldr	r5, [r4, #0]
 8004196:	1961      	adds	r1, r4, r5
 8004198:	428b      	cmp	r3, r1
 800419a:	bf04      	itt	eq
 800419c:	6819      	ldreq	r1, [r3, #0]
 800419e:	685b      	ldreq	r3, [r3, #4]
 80041a0:	6063      	str	r3, [r4, #4]
 80041a2:	bf04      	itt	eq
 80041a4:	1949      	addeq	r1, r1, r5
 80041a6:	6021      	streq	r1, [r4, #0]
 80041a8:	6054      	str	r4, [r2, #4]
 80041aa:	e7ca      	b.n	8004142 <_free_r+0x26>
 80041ac:	b003      	add	sp, #12
 80041ae:	bd30      	pop	{r4, r5, pc}
 80041b0:	20000134 	.word	0x20000134

080041b4 <_read_r>:
 80041b4:	b538      	push	{r3, r4, r5, lr}
 80041b6:	4d07      	ldr	r5, [pc, #28]	; (80041d4 <_read_r+0x20>)
 80041b8:	4604      	mov	r4, r0
 80041ba:	4608      	mov	r0, r1
 80041bc:	4611      	mov	r1, r2
 80041be:	2200      	movs	r2, #0
 80041c0:	602a      	str	r2, [r5, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	f7fc fc18 	bl	80009f8 <_read>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	d102      	bne.n	80041d2 <_read_r+0x1e>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	b103      	cbz	r3, 80041d2 <_read_r+0x1e>
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	2000013c 	.word	0x2000013c

080041d8 <_fstat_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	4d07      	ldr	r5, [pc, #28]	; (80041f8 <_fstat_r+0x20>)
 80041dc:	2300      	movs	r3, #0
 80041de:	4604      	mov	r4, r0
 80041e0:	4608      	mov	r0, r1
 80041e2:	4611      	mov	r1, r2
 80041e4:	602b      	str	r3, [r5, #0]
 80041e6:	f7fc fc30 	bl	8000a4a <_fstat>
 80041ea:	1c43      	adds	r3, r0, #1
 80041ec:	d102      	bne.n	80041f4 <_fstat_r+0x1c>
 80041ee:	682b      	ldr	r3, [r5, #0]
 80041f0:	b103      	cbz	r3, 80041f4 <_fstat_r+0x1c>
 80041f2:	6023      	str	r3, [r4, #0]
 80041f4:	bd38      	pop	{r3, r4, r5, pc}
 80041f6:	bf00      	nop
 80041f8:	2000013c 	.word	0x2000013c

080041fc <_isatty_r>:
 80041fc:	b538      	push	{r3, r4, r5, lr}
 80041fe:	4d06      	ldr	r5, [pc, #24]	; (8004218 <_isatty_r+0x1c>)
 8004200:	2300      	movs	r3, #0
 8004202:	4604      	mov	r4, r0
 8004204:	4608      	mov	r0, r1
 8004206:	602b      	str	r3, [r5, #0]
 8004208:	f7fc fc2f 	bl	8000a6a <_isatty>
 800420c:	1c43      	adds	r3, r0, #1
 800420e:	d102      	bne.n	8004216 <_isatty_r+0x1a>
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	b103      	cbz	r3, 8004216 <_isatty_r+0x1a>
 8004214:	6023      	str	r3, [r4, #0]
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	2000013c 	.word	0x2000013c

0800421c <_init>:
 800421c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421e:	bf00      	nop
 8004220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004222:	bc08      	pop	{r3}
 8004224:	469e      	mov	lr, r3
 8004226:	4770      	bx	lr

08004228 <_fini>:
 8004228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422a:	bf00      	nop
 800422c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800422e:	bc08      	pop	{r3}
 8004230:	469e      	mov	lr, r3
 8004232:	4770      	bx	lr
