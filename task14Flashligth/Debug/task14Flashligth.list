
task14Flashligth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005258  08005258  00015258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005374  08005374  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005374  08005374  00015374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800537c  0800537c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005380  08005380  00015380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  080053f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080053f4  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d5e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002634  00000000  00000000  00032dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00035438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00036480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002767b  00000000  00000000  000373d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ee8  00000000  00000000  0005ea4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5e23  00000000  00000000  00071933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00167756  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba0  00000000  00000000  001677a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005240 	.word	0x08005240

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005240 	.word	0x08005240

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <LedOff>:
#include <ledControl1.h>

extern TIM_HandleTypeDef htim6;
void LedOff()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 8000578:	4805      	ldr	r0, [pc, #20]	; (8000590 <LedOff+0x1c>)
 800057a:	f002 fae8 	bl	8002b4e <HAL_TIM_Base_Stop_IT>
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2120      	movs	r1, #32
 8000582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000586:	f000 ff3b 	bl	8001400 <HAL_GPIO_WritePin>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	2000008c 	.word	0x2000008c

08000594 <LedOnFull>:

void LedOnFull()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <LedOnFull+0x1c>)
 800059a:	f002 fad8 	bl	8002b4e <HAL_TIM_Base_Stop_IT>
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 800059e:	2201      	movs	r2, #1
 80005a0:	2120      	movs	r1, #32
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f000 ff2b 	bl	8001400 <HAL_GPIO_WritePin>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	2000008c 	.word	0x2000008c

080005b4 <_write>:
/* USER CODE BEGIN 0 */


////////////////////////////////////////////////////////////////////////
int _write(int fd, char* ptr, int len)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
 80005c8:	68b9      	ldr	r1, [r7, #8]
 80005ca:	4804      	ldr	r0, [pc, #16]	; (80005dc <_write+0x28>)
 80005cc:	f002 fdce 	bl	800316c <HAL_UART_Transmit>
	return len;
 80005d0:	687b      	ldr	r3, [r7, #4]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200000d8 	.word	0x200000d8

080005e0 <HAL_GPIO_EXTI_Callback>:
StateButon stateB1 = NO_BUTON;
uint16_t TickOnB1 = 0;
uint16_t TickOffB1 = 0;
uint16_t DelayTick = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]

    if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0)
 80005ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ee:	481d      	ldr	r0, [pc, #116]	; (8000664 <HAL_GPIO_EXTI_Callback+0x84>)
 80005f0:	f000 feee 	bl	80013d0 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d105      	bne.n	8000606 <HAL_GPIO_EXTI_Callback+0x26>
    {
       TickOnB1=HAL_GetTick();
 80005fa:	f000 fba3 	bl	8000d44 <HAL_GetTick>
 80005fe:	4603      	mov	r3, r0
 8000600:	b29a      	uxth	r2, r3
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <HAL_GPIO_EXTI_Callback+0x88>)
 8000604:	801a      	strh	r2, [r3, #0]
    }

    if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1)
 8000606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060a:	4816      	ldr	r0, [pc, #88]	; (8000664 <HAL_GPIO_EXTI_Callback+0x84>)
 800060c:	f000 fee0 	bl	80013d0 <HAL_GPIO_ReadPin>
 8000610:	4603      	mov	r3, r0
 8000612:	2b01      	cmp	r3, #1
 8000614:	d105      	bne.n	8000622 <HAL_GPIO_EXTI_Callback+0x42>
    {
       TickOffB1=HAL_GetTick();
 8000616:	f000 fb95 	bl	8000d44 <HAL_GetTick>
 800061a:	4603      	mov	r3, r0
 800061c:	b29a      	uxth	r2, r3
 800061e:	4b13      	ldr	r3, [pc, #76]	; (800066c <HAL_GPIO_EXTI_Callback+0x8c>)
 8000620:	801a      	strh	r2, [r3, #0]
    }
    DelayTick=TickOffB1-TickOnB1;
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_GPIO_EXTI_Callback+0x8c>)
 8000624:	881a      	ldrh	r2, [r3, #0]
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <HAL_GPIO_EXTI_Callback+0x88>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	b29a      	uxth	r2, r3
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <HAL_GPIO_EXTI_Callback+0x90>)
 8000630:	801a      	strh	r2, [r3, #0]

    if(DelayTick > 500)
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <HAL_GPIO_EXTI_Callback+0x90>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800063a:	d902      	bls.n	8000642 <HAL_GPIO_EXTI_Callback+0x62>
    {
    	LedOnFull();
 800063c:	f7ff ffaa 	bl	8000594 <LedOnFull>
 8000640:	e006      	b.n	8000650 <HAL_GPIO_EXTI_Callback+0x70>
    }
    else if(DelayTick <= 500)
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <HAL_GPIO_EXTI_Callback+0x90>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800064a:	d801      	bhi.n	8000650 <HAL_GPIO_EXTI_Callback+0x70>
    {
    	LedOff();
 800064c:	f7ff ff92 	bl	8000574 <LedOff>
    }
    printf("d=%d\r\n", DelayTick);
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <HAL_GPIO_EXTI_Callback+0x90>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	4619      	mov	r1, r3
 8000656:	4807      	ldr	r0, [pc, #28]	; (8000674 <HAL_GPIO_EXTI_Callback+0x94>)
 8000658:	f003 fe64 	bl	8004324 <iprintf>


}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	48000800 	.word	0x48000800
 8000668:	2000015c 	.word	0x2000015c
 800066c:	2000015e 	.word	0x2000015e
 8000670:	20000160 	.word	0x20000160
 8000674:	08005258 	.word	0x08005258

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f000 faf2 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f80a 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f000 f8c2 	bl	800080c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000688:	f000 f890 	bl	80007ac <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800068c:	f000 f856 	bl	800073c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000690:	2036      	movs	r0, #54	; 0x36
 8000692:	f000 fc5a 	bl	8000f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000696:	e7fe      	b.n	8000696 <main+0x1e>

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b096      	sub	sp, #88	; 0x58
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	2244      	movs	r2, #68	; 0x44
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 fe34 	bl	8004314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	463b      	mov	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006be:	f000 fedd 	bl	800147c <HAL_PWREx_ControlVoltageScaling>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c8:	f000 f90e 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006cc:	2302      	movs	r3, #2
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d6:	2310      	movs	r3, #16
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006de:	2302      	movs	r3, #2
 80006e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006e2:	2301      	movs	r3, #1
 80006e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006e6:	230a      	movs	r3, #10
 80006e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ea:	2307      	movs	r3, #7
 80006ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 ff14 	bl	8001528 <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000706:	f000 f8ef 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2303      	movs	r3, #3
 8000710:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800071e:	463b      	mov	r3, r7
 8000720:	2104      	movs	r1, #4
 8000722:	4618      	mov	r0, r3
 8000724:	f001 fadc 	bl	8001ce0 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800072e:	f000 f8db 	bl	80008e8 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3758      	adds	r7, #88	; 0x58
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_TIM6_Init+0x68>)
 800074e:	4a16      	ldr	r2, [pc, #88]	; (80007a8 <MX_TIM6_Init+0x6c>)
 8000750:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_TIM6_Init+0x68>)
 8000754:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000758:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_TIM6_Init+0x68>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8000760:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_TIM6_Init+0x68>)
 8000762:	f241 3287 	movw	r2, #4999	; 0x1387
 8000766:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_TIM6_Init+0x68>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <MX_TIM6_Init+0x68>)
 8000770:	f002 f996 	bl	8002aa0 <HAL_TIM_Base_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800077a:	f000 f8b5 	bl	80008e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	4619      	mov	r1, r3
 800078a:	4806      	ldr	r0, [pc, #24]	; (80007a4 <MX_TIM6_Init+0x68>)
 800078c:	f002 fbfa 	bl	8002f84 <HAL_TIMEx_MasterConfigSynchronization>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000796:	f000 f8a7 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	2000008c 	.word	0x2000008c
 80007a8:	40001000 	.word	0x40001000

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	; (8000808 <MX_USART2_UART_Init+0x5c>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007f0:	f002 fc6e 	bl	80030d0 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007fa:	f000 f875 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000d8 	.word	0x200000d8
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a2e      	ldr	r2, [pc, #184]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <MX_GPIO_Init+0xd4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a28      	ldr	r2, [pc, #160]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a22      	ldr	r2, [pc, #136]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_GPIO_Init+0xd4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2120      	movs	r1, #32
 8000886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088a:	f000 fdb9 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000894:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	480f      	ldr	r0, [pc, #60]	; (80008e4 <MX_GPIO_Init+0xd8>)
 80008a6:	f000 fbe9 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008aa:	2320      	movs	r3, #32
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c4:	f000 fbda 	bl	800107c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2100      	movs	r1, #0
 80008cc:	2028      	movs	r0, #40	; 0x28
 80008ce:	f000 fb20 	bl	8000f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008d2:	2028      	movs	r0, #40	; 0x28
 80008d4:	f000 fb39 	bl	8000f4a <HAL_NVIC_EnableIRQ>

}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40021000 	.word	0x40021000
 80008e4:	48000800 	.word	0x48000800

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <HAL_MspInit+0x44>)
 80008fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <HAL_MspInit+0x44>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6613      	str	r3, [r2, #96]	; 0x60
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_MspInit+0x44>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_MspInit+0x44>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <HAL_MspInit+0x44>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091c:	6593      	str	r3, [r2, #88]	; 0x58
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_MspInit+0x44>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000

0800093c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <HAL_TIM_Base_MspInit+0x44>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d113      	bne.n	8000976 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <HAL_TIM_Base_MspInit+0x48>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000952:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <HAL_TIM_Base_MspInit+0x48>)
 8000954:	f043 0310 	orr.w	r3, r3, #16
 8000958:	6593      	str	r3, [r2, #88]	; 0x58
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_TIM_Base_MspInit+0x48>)
 800095c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095e:	f003 0310 	and.w	r3, r3, #16
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	2036      	movs	r0, #54	; 0x36
 800096c:	f000 fad1 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000970:	2036      	movs	r0, #54	; 0x36
 8000972:	f000 faea 	bl	8000f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40001000 	.word	0x40001000
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b0ac      	sub	sp, #176	; 0xb0
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2288      	movs	r2, #136	; 0x88
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f003 fcb3 	bl	8004314 <memset>
  if(huart->Instance==USART2)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a25      	ldr	r2, [pc, #148]	; (8000a48 <HAL_UART_MspInit+0xc0>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d143      	bne.n	8000a40 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009bc:	2300      	movs	r3, #0
 80009be:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 fbaf 	bl	8002128 <HAL_RCCEx_PeriphCLKConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009d0:	f7ff ff8a 	bl	80008e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <HAL_UART_MspInit+0xc4>)
 80009d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d8:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <HAL_UART_MspInit+0xc4>)
 80009da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009de:	6593      	str	r3, [r2, #88]	; 0x58
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <HAL_UART_MspInit+0xc4>)
 80009e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <HAL_UART_MspInit+0xc4>)
 80009ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f0:	4a16      	ldr	r2, [pc, #88]	; (8000a4c <HAL_UART_MspInit+0xc4>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_UART_MspInit+0xc4>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a04:	230c      	movs	r3, #12
 8000a06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a26:	4619      	mov	r1, r3
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2c:	f000 fb26 	bl	800107c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	2026      	movs	r0, #38	; 0x26
 8000a36:	f000 fa6c 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a3a:	2026      	movs	r0, #38	; 0x26
 8000a3c:	f000 fa85 	bl	8000f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a40:	bf00      	nop
 8000a42:	37b0      	adds	r7, #176	; 0xb0
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40004400 	.word	0x40004400
 8000a4c:	40021000 	.word	0x40021000

08000a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <NMI_Handler+0x4>

08000a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <HardFault_Handler+0x4>

08000a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <MemManage_Handler+0x4>

08000a62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <BusFault_Handler+0x4>

08000a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <UsageFault_Handler+0x4>

08000a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9c:	f000 f93e 	bl	8000d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aa8:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <USART2_IRQHandler+0x10>)
 8000aaa:	f002 fbf3 	bl	8003294 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200000d8 	.word	0x200000d8

08000ab8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000abc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ac0:	f000 fcb6 	bl	8001430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <TIM6_DAC_IRQHandler+0x10>)
 8000ace:	f002 f86d 	bl	8002bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000008c 	.word	0x2000008c

08000adc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	e00a      	b.n	8000b04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000aee:	f3af 8000 	nop.w
 8000af2:	4601      	mov	r1, r0
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	60ba      	str	r2, [r7, #8]
 8000afa:	b2ca      	uxtb	r2, r1
 8000afc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	3301      	adds	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697a      	ldr	r2, [r7, #20]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	dbf0      	blt.n	8000aee <_read+0x12>
	}

return len;
 8000b0c:	687b      	ldr	r3, [r7, #4]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b3e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <_isatty>:

int _isatty(int file)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
	return 1;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <_sbrk+0x5c>)
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <_sbrk+0x60>)
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <_sbrk+0x64>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <_sbrk+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d207      	bcs.n	8000bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb0:	f003 fb86 	bl	80042c0 <__errno>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbe:	e009      	b.n	8000bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <_sbrk+0x64>)
 8000bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20018000 	.word	0x20018000
 8000be0:	00000400 	.word	0x00000400
 8000be4:	20000164 	.word	0x20000164
 8000be8:	20000180 	.word	0x20000180

08000bec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <SystemInit+0x20>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <SystemInit+0x20>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c14:	f7ff ffea 	bl	8000bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c18:	480c      	ldr	r0, [pc, #48]	; (8000c4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c1a:	490d      	ldr	r1, [pc, #52]	; (8000c50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <LoopForever+0xe>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c20:	e002      	b.n	8000c28 <LoopCopyDataInit>

08000c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c26:	3304      	adds	r3, #4

08000c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c2c:	d3f9      	bcc.n	8000c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c30:	4c0a      	ldr	r4, [pc, #40]	; (8000c5c <LoopForever+0x16>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c34:	e001      	b.n	8000c3a <LoopFillZerobss>

08000c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c38:	3204      	adds	r2, #4

08000c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c3c:	d3fb      	bcc.n	8000c36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f003 fb45 	bl	80042cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c42:	f7ff fd19 	bl	8000678 <main>

08000c46 <LoopForever>:

LoopForever:
    b LoopForever
 8000c46:	e7fe      	b.n	8000c46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c48:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c54:	08005384 	.word	0x08005384
  ldr r2, =_sbss
 8000c58:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c5c:	2000017c 	.word	0x2000017c

08000c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC1_2_IRQHandler>
	...

08000c64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <HAL_Init+0x3c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <HAL_Init+0x3c>)
 8000c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7a:	2003      	movs	r0, #3
 8000c7c:	f000 f93e 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c80:	2000      	movs	r0, #0
 8000c82:	f000 f80f 	bl	8000ca4 <HAL_InitTick>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d002      	beq.n	8000c92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	71fb      	strb	r3, [r7, #7]
 8000c90:	e001      	b.n	8000c96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c92:	f7ff fe2f 	bl	80008f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c96:	79fb      	ldrb	r3, [r7, #7]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40022000 	.word	0x40022000

08000ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <HAL_InitTick+0x6c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d023      	beq.n	8000d00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <HAL_InitTick+0x70>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <HAL_InitTick+0x6c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f949 	bl	8000f66 <HAL_SYSTICK_Config>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d10f      	bne.n	8000cfa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b0f      	cmp	r3, #15
 8000cde:	d809      	bhi.n	8000cf4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	f000 f913 	bl	8000f12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cec:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <HAL_InitTick+0x74>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	e007      	b.n	8000d04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	e004      	b.n	8000d04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	e001      	b.n	8000d04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000000 	.word	0x20000000
 8000d18:	20000004 	.word	0x20000004

08000d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x20>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x24>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <HAL_IncTick+0x24>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000168 	.word	0x20000168

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <HAL_GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000168 	.word	0x20000168

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db0b      	blt.n	8000dea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	4907      	ldr	r1, [pc, #28]	; (8000df8 <__NVIC_EnableIRQ+0x38>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000e100 	.word	0xe000e100

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	; (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	; (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff8e 	bl	8000dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff29 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff3e 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff8e 	bl	8000e50 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5d 	bl	8000dfc <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff31 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffa2 	bl	8000eb8 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b085      	sub	sp, #20
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d008      	beq.n	8000fa8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2204      	movs	r2, #4
 8000f9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e022      	b.n	8000fee <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 020e 	bic.w	r2, r2, #14
 8000fb6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0201 	bic.w	r2, r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fcc:	f003 021c 	and.w	r2, r3, #28
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fda:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d005      	beq.n	800101e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2204      	movs	r2, #4
 8001016:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e029      	b.n	8001072 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f022 020e 	bic.w	r2, r2, #14
 800102c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0201 	bic.w	r2, r2, #1
 800103c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f003 021c 	and.w	r2, r3, #28
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	2101      	movs	r1, #1
 800104c:	fa01 f202 	lsl.w	r2, r1, r2
 8001050:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	4798      	blx	r3
    }
  }
  return status;
 8001072:	7bfb      	ldrb	r3, [r7, #15]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108a:	e17f      	b.n	800138c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	2101      	movs	r1, #1
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	fa01 f303 	lsl.w	r3, r1, r3
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 8171 	beq.w	8001386 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d005      	beq.n	80010bc <HAL_GPIO_Init+0x40>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d130      	bne.n	800111e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010f2:	2201      	movs	r2, #1
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	f003 0201 	and.w	r2, r3, #1
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b03      	cmp	r3, #3
 8001128:	d118      	bne.n	800115c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001130:	2201      	movs	r2, #1
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	08db      	lsrs	r3, r3, #3
 8001146:	f003 0201 	and.w	r2, r3, #1
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b03      	cmp	r3, #3
 8001166:	d017      	beq.n	8001198 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d123      	bne.n	80011ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	08da      	lsrs	r2, r3, #3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3208      	adds	r2, #8
 80011ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	691a      	ldr	r2, [r3, #16]
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	08da      	lsrs	r2, r3, #3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3208      	adds	r2, #8
 80011e6:	6939      	ldr	r1, [r7, #16]
 80011e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0203 	and.w	r2, r3, #3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 80ac 	beq.w	8001386 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	4b5f      	ldr	r3, [pc, #380]	; (80013ac <HAL_GPIO_Init+0x330>)
 8001230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001232:	4a5e      	ldr	r2, [pc, #376]	; (80013ac <HAL_GPIO_Init+0x330>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6613      	str	r3, [r2, #96]	; 0x60
 800123a:	4b5c      	ldr	r3, [pc, #368]	; (80013ac <HAL_GPIO_Init+0x330>)
 800123c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001246:	4a5a      	ldr	r2, [pc, #360]	; (80013b0 <HAL_GPIO_Init+0x334>)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001252:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	220f      	movs	r2, #15
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001270:	d025      	beq.n	80012be <HAL_GPIO_Init+0x242>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4f      	ldr	r2, [pc, #316]	; (80013b4 <HAL_GPIO_Init+0x338>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d01f      	beq.n	80012ba <HAL_GPIO_Init+0x23e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4e      	ldr	r2, [pc, #312]	; (80013b8 <HAL_GPIO_Init+0x33c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d019      	beq.n	80012b6 <HAL_GPIO_Init+0x23a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4d      	ldr	r2, [pc, #308]	; (80013bc <HAL_GPIO_Init+0x340>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d013      	beq.n	80012b2 <HAL_GPIO_Init+0x236>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4c      	ldr	r2, [pc, #304]	; (80013c0 <HAL_GPIO_Init+0x344>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d00d      	beq.n	80012ae <HAL_GPIO_Init+0x232>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4b      	ldr	r2, [pc, #300]	; (80013c4 <HAL_GPIO_Init+0x348>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d007      	beq.n	80012aa <HAL_GPIO_Init+0x22e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4a      	ldr	r2, [pc, #296]	; (80013c8 <HAL_GPIO_Init+0x34c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d101      	bne.n	80012a6 <HAL_GPIO_Init+0x22a>
 80012a2:	2306      	movs	r3, #6
 80012a4:	e00c      	b.n	80012c0 <HAL_GPIO_Init+0x244>
 80012a6:	2307      	movs	r3, #7
 80012a8:	e00a      	b.n	80012c0 <HAL_GPIO_Init+0x244>
 80012aa:	2305      	movs	r3, #5
 80012ac:	e008      	b.n	80012c0 <HAL_GPIO_Init+0x244>
 80012ae:	2304      	movs	r3, #4
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x244>
 80012b2:	2303      	movs	r3, #3
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x244>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x244>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x244>
 80012be:	2300      	movs	r3, #0
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	f002 0203 	and.w	r2, r2, #3
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	4093      	lsls	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012d0:	4937      	ldr	r1, [pc, #220]	; (80013b0 <HAL_GPIO_Init+0x334>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012de:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <HAL_GPIO_Init+0x350>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001302:	4a32      	ldr	r2, [pc, #200]	; (80013cc <HAL_GPIO_Init+0x350>)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001308:	4b30      	ldr	r3, [pc, #192]	; (80013cc <HAL_GPIO_Init+0x350>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800132c:	4a27      	ldr	r2, [pc, #156]	; (80013cc <HAL_GPIO_Init+0x350>)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <HAL_GPIO_Init+0x350>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001356:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <HAL_GPIO_Init+0x350>)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_GPIO_Init+0x350>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	43db      	mvns	r3, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001380:	4a12      	ldr	r2, [pc, #72]	; (80013cc <HAL_GPIO_Init+0x350>)
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3301      	adds	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa22 f303 	lsr.w	r3, r2, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	f47f ae78 	bne.w	800108c <HAL_GPIO_Init+0x10>
  }
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	371c      	adds	r7, #28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40010000 	.word	0x40010000
 80013b4:	48000400 	.word	0x48000400
 80013b8:	48000800 	.word	0x48000800
 80013bc:	48000c00 	.word	0x48000c00
 80013c0:	48001000 	.word	0x48001000
 80013c4:	48001400 	.word	0x48001400
 80013c8:	48001800 	.word	0x48001800
 80013cc:	40010400 	.word	0x40010400

080013d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013e8:	2301      	movs	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	e001      	b.n	80013f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
 800140c:	4613      	mov	r3, r2
 800140e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001410:	787b      	ldrb	r3, [r7, #1]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001416:	887a      	ldrh	r2, [r7, #2]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800141c:	e002      	b.n	8001424 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800143c:	695a      	ldr	r2, [r3, #20]
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	4013      	ands	r3, r2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d006      	beq.n	8001454 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001446:	4a05      	ldr	r2, [pc, #20]	; (800145c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f8c6 	bl	80005e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40010400 	.word	0x40010400

08001460 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <HAL_PWREx_GetVoltageRange+0x18>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40007000 	.word	0x40007000

0800147c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800148a:	d130      	bne.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800148c:	4b23      	ldr	r3, [pc, #140]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001498:	d038      	beq.n	800150c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800149a:	4b20      	ldr	r3, [pc, #128]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014a2:	4a1e      	ldr	r2, [pc, #120]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014aa:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2232      	movs	r2, #50	; 0x32
 80014b0:	fb02 f303 	mul.w	r3, r2, r3
 80014b4:	4a1b      	ldr	r2, [pc, #108]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	0c9b      	lsrs	r3, r3, #18
 80014bc:	3301      	adds	r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c0:	e002      	b.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d4:	d102      	bne.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f2      	bne.n	80014c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e8:	d110      	bne.n	800150c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e00f      	b.n	800150e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014fa:	d007      	beq.n	800150c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001504:	4a05      	ldr	r2, [pc, #20]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800150a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40007000 	.word	0x40007000
 8001520:	20000000 	.word	0x20000000
 8001524:	431bde83 	.word	0x431bde83

08001528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e3ca      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800153a:	4b97      	ldr	r3, [pc, #604]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001544:	4b94      	ldr	r3, [pc, #592]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0310 	and.w	r3, r3, #16
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 80e4 	beq.w	8001724 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <HAL_RCC_OscConfig+0x4a>
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2b0c      	cmp	r3, #12
 8001566:	f040 808b 	bne.w	8001680 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2b01      	cmp	r3, #1
 800156e:	f040 8087 	bne.w	8001680 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001572:	4b89      	ldr	r3, [pc, #548]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <HAL_RCC_OscConfig+0x62>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e3a2      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a1a      	ldr	r2, [r3, #32]
 800158e:	4b82      	ldr	r3, [pc, #520]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d004      	beq.n	80015a4 <HAL_RCC_OscConfig+0x7c>
 800159a:	4b7f      	ldr	r3, [pc, #508]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015a2:	e005      	b.n	80015b0 <HAL_RCC_OscConfig+0x88>
 80015a4:	4b7c      	ldr	r3, [pc, #496]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015aa:	091b      	lsrs	r3, r3, #4
 80015ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d223      	bcs.n	80015fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fd55 	bl	8002068 <RCC_SetFlashLatencyFromMSIRange>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e383      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c8:	4b73      	ldr	r3, [pc, #460]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a72      	ldr	r2, [pc, #456]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015ce:	f043 0308 	orr.w	r3, r3, #8
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b70      	ldr	r3, [pc, #448]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	496d      	ldr	r1, [pc, #436]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e6:	4b6c      	ldr	r3, [pc, #432]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	4968      	ldr	r1, [pc, #416]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
 80015fa:	e025      	b.n	8001648 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015fc:	4b66      	ldr	r3, [pc, #408]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a65      	ldr	r2, [pc, #404]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001602:	f043 0308 	orr.w	r3, r3, #8
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b63      	ldr	r3, [pc, #396]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4960      	ldr	r1, [pc, #384]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800161a:	4b5f      	ldr	r3, [pc, #380]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	495b      	ldr	r1, [pc, #364]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d109      	bne.n	8001648 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4618      	mov	r0, r3
 800163a:	f000 fd15 	bl	8002068 <RCC_SetFlashLatencyFromMSIRange>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e343      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001648:	f000 fc4a 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 800164c:	4602      	mov	r2, r0
 800164e:	4b52      	ldr	r3, [pc, #328]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	4950      	ldr	r1, [pc, #320]	; (800179c <HAL_RCC_OscConfig+0x274>)
 800165a:	5ccb      	ldrb	r3, [r1, r3]
 800165c:	f003 031f 	and.w	r3, r3, #31
 8001660:	fa22 f303 	lsr.w	r3, r2, r3
 8001664:	4a4e      	ldr	r2, [pc, #312]	; (80017a0 <HAL_RCC_OscConfig+0x278>)
 8001666:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001668:	4b4e      	ldr	r3, [pc, #312]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fb19 	bl	8000ca4 <HAL_InitTick>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d052      	beq.n	8001722 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	e327      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d032      	beq.n	80016ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001688:	4b43      	ldr	r3, [pc, #268]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a42      	ldr	r2, [pc, #264]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001694:	f7ff fb56 	bl	8000d44 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800169c:	f7ff fb52 	bl	8000d44 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e310      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016ae:	4b3a      	ldr	r3, [pc, #232]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ba:	4b37      	ldr	r3, [pc, #220]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a36      	ldr	r2, [pc, #216]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016c0:	f043 0308 	orr.w	r3, r3, #8
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	4b34      	ldr	r3, [pc, #208]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	4931      	ldr	r1, [pc, #196]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016d8:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	492c      	ldr	r1, [pc, #176]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]
 80016ec:	e01a      	b.n	8001724 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016ee:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a29      	ldr	r2, [pc, #164]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016f4:	f023 0301 	bic.w	r3, r3, #1
 80016f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016fa:	f7ff fb23 	bl	8000d44 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001702:	f7ff fb1f 	bl	8000d44 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e2dd      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f0      	bne.n	8001702 <HAL_RCC_OscConfig+0x1da>
 8001720:	e000      	b.n	8001724 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001722:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b00      	cmp	r3, #0
 800172e:	d074      	beq.n	800181a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2b08      	cmp	r3, #8
 8001734:	d005      	beq.n	8001742 <HAL_RCC_OscConfig+0x21a>
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	2b0c      	cmp	r3, #12
 800173a:	d10e      	bne.n	800175a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d10b      	bne.n	800175a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d064      	beq.n	8001818 <HAL_RCC_OscConfig+0x2f0>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d160      	bne.n	8001818 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e2ba      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x24a>
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800176a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	e026      	b.n	80017c0 <HAL_RCC_OscConfig+0x298>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800177a:	d115      	bne.n	80017a8 <HAL_RCC_OscConfig+0x280>
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a05      	ldr	r2, [pc, #20]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001782:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a02      	ldr	r2, [pc, #8]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800178e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	e014      	b.n	80017c0 <HAL_RCC_OscConfig+0x298>
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	08005294 	.word	0x08005294
 80017a0:	20000000 	.word	0x20000000
 80017a4:	20000004 	.word	0x20000004
 80017a8:	4ba0      	ldr	r3, [pc, #640]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a9f      	ldr	r2, [pc, #636]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b9d      	ldr	r3, [pc, #628]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a9c      	ldr	r2, [pc, #624]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d013      	beq.n	80017f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff fabc 	bl	8000d44 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff fab8 	bl	8000d44 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	; 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e276      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e2:	4b92      	ldr	r3, [pc, #584]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x2a8>
 80017ee:	e014      	b.n	800181a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff faa8 	bl	8000d44 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff faa4 	bl	8000d44 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	; 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e262      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800180a:	4b88      	ldr	r3, [pc, #544]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x2d0>
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d060      	beq.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	2b04      	cmp	r3, #4
 800182a:	d005      	beq.n	8001838 <HAL_RCC_OscConfig+0x310>
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2b0c      	cmp	r3, #12
 8001830:	d119      	bne.n	8001866 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d116      	bne.n	8001866 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001838:	4b7c      	ldr	r3, [pc, #496]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_OscConfig+0x328>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e23f      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001850:	4b76      	ldr	r3, [pc, #472]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	061b      	lsls	r3, r3, #24
 800185e:	4973      	ldr	r1, [pc, #460]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001864:	e040      	b.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d023      	beq.n	80018b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800186e:	4b6f      	ldr	r3, [pc, #444]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a6e      	ldr	r2, [pc, #440]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fa63 	bl	8000d44 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff fa5f 	bl	8000d44 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e21d      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001894:	4b65      	ldr	r3, [pc, #404]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a0:	4b62      	ldr	r3, [pc, #392]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	061b      	lsls	r3, r3, #24
 80018ae:	495f      	ldr	r1, [pc, #380]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
 80018b4:	e018      	b.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b6:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a5c      	ldr	r2, [pc, #368]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7ff fa3f 	bl	8000d44 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff fa3b 	bl	8000d44 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e1f9      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018dc:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f0      	bne.n	80018ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d03c      	beq.n	800196e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d01c      	beq.n	8001936 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fc:	4b4b      	ldr	r3, [pc, #300]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001902:	4a4a      	ldr	r2, [pc, #296]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190c:	f7ff fa1a 	bl	8000d44 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001914:	f7ff fa16 	bl	8000d44 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e1d4      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001926:	4b41      	ldr	r3, [pc, #260]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0ef      	beq.n	8001914 <HAL_RCC_OscConfig+0x3ec>
 8001934:	e01b      	b.n	800196e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001936:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193c:	4a3b      	ldr	r2, [pc, #236]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001946:	f7ff f9fd 	bl	8000d44 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194e:	f7ff f9f9 	bl	8000d44 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e1b7      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001960:	4b32      	ldr	r3, [pc, #200]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ef      	bne.n	800194e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80a6 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001980:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10d      	bne.n	80019a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 800198e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001990:	4a26      	ldr	r2, [pc, #152]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001996:	6593      	str	r3, [r2, #88]	; 0x58
 8001998:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a4:	2301      	movs	r3, #1
 80019a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a8:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d118      	bne.n	80019e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1d      	ldr	r2, [pc, #116]	; (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c0:	f7ff f9c0 	bl	8000d44 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c8:	f7ff f9bc 	bl	8000d44 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e17a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d108      	bne.n	8001a00 <HAL_RCC_OscConfig+0x4d8>
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80019f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f4:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019fe:	e029      	b.n	8001a54 <HAL_RCC_OscConfig+0x52c>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b05      	cmp	r3, #5
 8001a06:	d115      	bne.n	8001a34 <HAL_RCC_OscConfig+0x50c>
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0e:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1e:	4a03      	ldr	r2, [pc, #12]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a28:	e014      	b.n	8001a54 <HAL_RCC_OscConfig+0x52c>
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40007000 	.word	0x40007000
 8001a34:	4b9c      	ldr	r3, [pc, #624]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3a:	4a9b      	ldr	r2, [pc, #620]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a44:	4b98      	ldr	r3, [pc, #608]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4a:	4a97      	ldr	r2, [pc, #604]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001a4c:	f023 0304 	bic.w	r3, r3, #4
 8001a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d016      	beq.n	8001a8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff f972 	bl	8000d44 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f7ff f96e 	bl	8000d44 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e12a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a7a:	4b8b      	ldr	r3, [pc, #556]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0ed      	beq.n	8001a64 <HAL_RCC_OscConfig+0x53c>
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f95b 	bl	8000d44 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7ff f957 	bl	8000d44 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e113      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aa8:	4b7f      	ldr	r3, [pc, #508]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1ed      	bne.n	8001a92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ab6:	7ffb      	ldrb	r3, [r7, #31]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d105      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abc:	4b7a      	ldr	r3, [pc, #488]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	4a79      	ldr	r2, [pc, #484]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80fe 	beq.w	8001cce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	f040 80d0 	bne.w	8001c7c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001adc:	4b72      	ldr	r3, [pc, #456]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f003 0203 	and.w	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d130      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	3b01      	subs	r3, #1
 8001afc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d127      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d11f      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b1c:	2a07      	cmp	r2, #7
 8001b1e:	bf14      	ite	ne
 8001b20:	2201      	movne	r2, #1
 8001b22:	2200      	moveq	r2, #0
 8001b24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d113      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b34:	085b      	lsrs	r3, r3, #1
 8001b36:	3b01      	subs	r3, #1
 8001b38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d109      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	085b      	lsrs	r3, r3, #1
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d06e      	beq.n	8001c30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	2b0c      	cmp	r3, #12
 8001b56:	d069      	beq.n	8001c2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b58:	4b53      	ldr	r3, [pc, #332]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d105      	bne.n	8001b70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b64:	4b50      	ldr	r3, [pc, #320]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0ad      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b74:	4b4c      	ldr	r3, [pc, #304]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a4b      	ldr	r2, [pc, #300]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001b7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b80:	f7ff f8e0 	bl	8000d44 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff f8dc 	bl	8000d44 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e09a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b9a:	4b43      	ldr	r3, [pc, #268]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba6:	4b40      	ldr	r3, [pc, #256]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	4b40      	ldr	r3, [pc, #256]	; (8001cac <HAL_RCC_OscConfig+0x784>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bb6:	3a01      	subs	r2, #1
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	4311      	orrs	r1, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bc0:	0212      	lsls	r2, r2, #8
 8001bc2:	4311      	orrs	r1, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bc8:	0852      	lsrs	r2, r2, #1
 8001bca:	3a01      	subs	r2, #1
 8001bcc:	0552      	lsls	r2, r2, #21
 8001bce:	4311      	orrs	r1, r2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bd4:	0852      	lsrs	r2, r2, #1
 8001bd6:	3a01      	subs	r2, #1
 8001bd8:	0652      	lsls	r2, r2, #25
 8001bda:	4311      	orrs	r1, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001be0:	0912      	lsrs	r2, r2, #4
 8001be2:	0452      	lsls	r2, r2, #17
 8001be4:	430a      	orrs	r2, r1
 8001be6:	4930      	ldr	r1, [pc, #192]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bec:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a2d      	ldr	r2, [pc, #180]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4a2a      	ldr	r2, [pc, #168]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c04:	f7ff f89e 	bl	8000d44 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7ff f89a 	bl	8000d44 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e058      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1e:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c2a:	e050      	b.n	8001cce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e04f      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d148      	bne.n	8001cce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c48:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4a16      	ldr	r2, [pc, #88]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c54:	f7ff f876 	bl	8000d44 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff f872 	bl	8000d44 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e030      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0x734>
 8001c7a:	e028      	b.n	8001cce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d023      	beq.n	8001cca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7ff f859 	bl	8000d44 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c94:	e00c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c96:	f7ff f855 	bl	8000d44 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d905      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e013      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_RCC_OscConfig+0x7b0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1ec      	bne.n	8001c96 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_RCC_OscConfig+0x7b0>)
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	4905      	ldr	r1, [pc, #20]	; (8001cd8 <HAL_RCC_OscConfig+0x7b0>)
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_RCC_OscConfig+0x7b4>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60cb      	str	r3, [r1, #12]
 8001cc8:	e001      	b.n	8001cce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3720      	adds	r7, #32
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	feeefffc 	.word	0xfeeefffc

08001ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0e7      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b75      	ldr	r3, [pc, #468]	; (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d910      	bls.n	8001d24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b72      	ldr	r3, [pc, #456]	; (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 0207 	bic.w	r2, r3, #7
 8001d0a:	4970      	ldr	r1, [pc, #448]	; (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b6e      	ldr	r3, [pc, #440]	; (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0cf      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d010      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	4b66      	ldr	r3, [pc, #408]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d908      	bls.n	8001d52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d40:	4b63      	ldr	r3, [pc, #396]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	4960      	ldr	r1, [pc, #384]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d04c      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d66:	4b5a      	ldr	r3, [pc, #360]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d121      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0a6      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7e:	4b54      	ldr	r3, [pc, #336]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d115      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e09a      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d96:	4b4e      	ldr	r3, [pc, #312]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e08e      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da6:	4b4a      	ldr	r3, [pc, #296]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e086      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001db6:	4b46      	ldr	r3, [pc, #280]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f023 0203 	bic.w	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	4943      	ldr	r1, [pc, #268]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dc8:	f7fe ffbc 	bl	8000d44 <HAL_GetTick>
 8001dcc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd0:	f7fe ffb8 	bl	8000d44 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e06e      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	4b3a      	ldr	r3, [pc, #232]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 020c 	and.w	r2, r3, #12
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d1eb      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d010      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d208      	bcs.n	8001e26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e14:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	492b      	ldr	r1, [pc, #172]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e26:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d210      	bcs.n	8001e56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e34:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 0207 	bic.w	r2, r3, #7
 8001e3c:	4923      	ldr	r1, [pc, #140]	; (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e44:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e036      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d008      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e62:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	4918      	ldr	r1, [pc, #96]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d009      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4910      	ldr	r1, [pc, #64]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e94:	f000 f824 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	490b      	ldr	r1, [pc, #44]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f4>)
 8001ea6:	5ccb      	ldrb	r3, [r1, r3]
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb0:	4a09      	ldr	r2, [pc, #36]	; (8001ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_RCC_ClockConfig+0x1fc>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fef3 	bl	8000ca4 <HAL_InitTick>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ec2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40022000 	.word	0x40022000
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	08005294 	.word	0x08005294
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	20000004 	.word	0x20000004

08001ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	; 0x24
 8001ee4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eee:	4b3e      	ldr	r3, [pc, #248]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ef8:	4b3b      	ldr	r3, [pc, #236]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x34>
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	d121      	bne.n	8001f52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d11e      	bne.n	8001f52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f14:	4b34      	ldr	r3, [pc, #208]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f20:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	e005      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f30:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f3c:	4a2b      	ldr	r2, [pc, #172]	; (8001fec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10d      	bne.n	8001f68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d102      	bne.n	8001f5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f58:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	e004      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d101      	bne.n	8001f68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f64:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	d134      	bne.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d003      	beq.n	8001f86 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d003      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0xac>
 8001f84:	e005      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f86:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f88:	617b      	str	r3, [r7, #20]
      break;
 8001f8a:	e005      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f8c:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f8e:	617b      	str	r3, [r7, #20]
      break;
 8001f90:	e002      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	617b      	str	r3, [r7, #20]
      break;
 8001f96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	0a1b      	lsrs	r3, r3, #8
 8001fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	fb03 f202 	mul.w	r2, r3, r2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	0e5b      	lsrs	r3, r3, #25
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	3301      	adds	r3, #1
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fd8:	69bb      	ldr	r3, [r7, #24]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	; 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	080052ac 	.word	0x080052ac
 8001ff0:	00f42400 	.word	0x00f42400
 8001ff4:	007a1200 	.word	0x007a1200

08001ff8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <HAL_RCC_GetHCLKFreq+0x14>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	20000000 	.word	0x20000000

08002010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002014:	f7ff fff0 	bl	8001ff8 <HAL_RCC_GetHCLKFreq>
 8002018:	4602      	mov	r2, r0
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_RCC_GetPCLK1Freq+0x24>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	0a1b      	lsrs	r3, r3, #8
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	4904      	ldr	r1, [pc, #16]	; (8002038 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002026:	5ccb      	ldrb	r3, [r1, r3]
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002030:	4618      	mov	r0, r3
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40021000 	.word	0x40021000
 8002038:	080052a4 	.word	0x080052a4

0800203c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002040:	f7ff ffda 	bl	8001ff8 <HAL_RCC_GetHCLKFreq>
 8002044:	4602      	mov	r2, r0
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	0adb      	lsrs	r3, r3, #11
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	4904      	ldr	r1, [pc, #16]	; (8002064 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002052:	5ccb      	ldrb	r3, [r1, r3]
 8002054:	f003 031f 	and.w	r3, r3, #31
 8002058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800205c:	4618      	mov	r0, r3
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000
 8002064:	080052a4 	.word	0x080052a4

08002068 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002074:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002080:	f7ff f9ee 	bl	8001460 <HAL_PWREx_GetVoltageRange>
 8002084:	6178      	str	r0, [r7, #20]
 8002086:	e014      	b.n	80020b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002088:	4b25      	ldr	r3, [pc, #148]	; (8002120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	4a24      	ldr	r2, [pc, #144]	; (8002120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800208e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002092:	6593      	str	r3, [r2, #88]	; 0x58
 8002094:	4b22      	ldr	r3, [pc, #136]	; (8002120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020a0:	f7ff f9de 	bl	8001460 <HAL_PWREx_GetVoltageRange>
 80020a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020a6:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	4a1d      	ldr	r2, [pc, #116]	; (8002120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b8:	d10b      	bne.n	80020d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b80      	cmp	r3, #128	; 0x80
 80020be:	d919      	bls.n	80020f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2ba0      	cmp	r3, #160	; 0xa0
 80020c4:	d902      	bls.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020c6:	2302      	movs	r3, #2
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	e013      	b.n	80020f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020cc:	2301      	movs	r3, #1
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	e010      	b.n	80020f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b80      	cmp	r3, #128	; 0x80
 80020d6:	d902      	bls.n	80020de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020d8:	2303      	movs	r3, #3
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	e00a      	b.n	80020f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b80      	cmp	r3, #128	; 0x80
 80020e2:	d102      	bne.n	80020ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020e4:	2302      	movs	r3, #2
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	e004      	b.n	80020f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b70      	cmp	r3, #112	; 0x70
 80020ee:	d101      	bne.n	80020f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020f0:	2301      	movs	r3, #1
 80020f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f023 0207 	bic.w	r2, r3, #7
 80020fc:	4909      	ldr	r1, [pc, #36]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	429a      	cmp	r2, r3
 8002110:	d001      	beq.n	8002116 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000
 8002124:	40022000 	.word	0x40022000

08002128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002130:	2300      	movs	r3, #0
 8002132:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002134:	2300      	movs	r3, #0
 8002136:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002140:	2b00      	cmp	r3, #0
 8002142:	d041      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002148:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800214c:	d02a      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800214e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002152:	d824      	bhi.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002154:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002158:	d008      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800215a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800215e:	d81e      	bhi.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002164:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002168:	d010      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800216a:	e018      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800216c:	4b86      	ldr	r3, [pc, #536]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4a85      	ldr	r2, [pc, #532]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002176:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002178:	e015      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3304      	adds	r3, #4
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f000 fabb 	bl	80026fc <RCCEx_PLLSAI1_Config>
 8002186:	4603      	mov	r3, r0
 8002188:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800218a:	e00c      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3320      	adds	r3, #32
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fba6 	bl	80028e4 <RCCEx_PLLSAI2_Config>
 8002198:	4603      	mov	r3, r0
 800219a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800219c:	e003      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	74fb      	strb	r3, [r7, #19]
      break;
 80021a2:	e000      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021a6:	7cfb      	ldrb	r3, [r7, #19]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10b      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021ac:	4b76      	ldr	r3, [pc, #472]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ba:	4973      	ldr	r1, [pc, #460]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021c2:	e001      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021c4:	7cfb      	ldrb	r3, [r7, #19]
 80021c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d041      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021dc:	d02a      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80021de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021e2:	d824      	bhi.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021e8:	d008      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021ee:	d81e      	bhi.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80021f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f8:	d010      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021fa:	e018      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021fc:	4b62      	ldr	r3, [pc, #392]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a61      	ldr	r2, [pc, #388]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002206:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002208:	e015      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3304      	adds	r3, #4
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f000 fa73 	bl	80026fc <RCCEx_PLLSAI1_Config>
 8002216:	4603      	mov	r3, r0
 8002218:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800221a:	e00c      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3320      	adds	r3, #32
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fb5e 	bl	80028e4 <RCCEx_PLLSAI2_Config>
 8002228:	4603      	mov	r3, r0
 800222a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800222c:	e003      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	74fb      	strb	r3, [r7, #19]
      break;
 8002232:	e000      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002236:	7cfb      	ldrb	r3, [r7, #19]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10b      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800223c:	4b52      	ldr	r3, [pc, #328]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800224a:	494f      	ldr	r1, [pc, #316]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002252:	e001      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80a0 	beq.w	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800226a:	4b47      	ldr	r3, [pc, #284]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800227a:	2300      	movs	r3, #0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00d      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002280:	4b41      	ldr	r3, [pc, #260]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002284:	4a40      	ldr	r2, [pc, #256]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228a:	6593      	str	r3, [r2, #88]	; 0x58
 800228c:	4b3e      	ldr	r3, [pc, #248]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002298:	2301      	movs	r3, #1
 800229a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800229c:	4b3b      	ldr	r3, [pc, #236]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a3a      	ldr	r2, [pc, #232]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022a8:	f7fe fd4c 	bl	8000d44 <HAL_GetTick>
 80022ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022ae:	e009      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b0:	f7fe fd48 	bl	8000d44 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d902      	bls.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	74fb      	strb	r3, [r7, #19]
        break;
 80022c2:	e005      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022c4:	4b31      	ldr	r3, [pc, #196]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0ef      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80022d0:	7cfb      	ldrb	r3, [r7, #19]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d15c      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022d6:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01f      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d019      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022f4:	4b24      	ldr	r3, [pc, #144]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002300:	4b21      	ldr	r3, [pc, #132]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002306:	4a20      	ldr	r2, [pc, #128]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002310:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002316:	4a1c      	ldr	r2, [pc, #112]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002320:	4a19      	ldr	r2, [pc, #100]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d016      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7fe fd07 	bl	8000d44 <HAL_GetTick>
 8002336:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002338:	e00b      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7fe fd03 	bl	8000d44 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	f241 3288 	movw	r2, #5000	; 0x1388
 8002348:	4293      	cmp	r3, r2
 800234a:	d902      	bls.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	74fb      	strb	r3, [r7, #19]
            break;
 8002350:	e006      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0ec      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10c      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002376:	4904      	ldr	r1, [pc, #16]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800237e:	e009      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	74bb      	strb	r3, [r7, #18]
 8002384:	e006      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000
 800238c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002394:	7c7b      	ldrb	r3, [r7, #17]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d105      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239a:	4b9e      	ldr	r3, [pc, #632]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239e:	4a9d      	ldr	r2, [pc, #628]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00a      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023b2:	4b98      	ldr	r3, [pc, #608]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b8:	f023 0203 	bic.w	r2, r3, #3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c0:	4994      	ldr	r1, [pc, #592]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00a      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023d4:	4b8f      	ldr	r3, [pc, #572]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	f023 020c 	bic.w	r2, r3, #12
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e2:	498c      	ldr	r1, [pc, #560]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00a      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023f6:	4b87      	ldr	r3, [pc, #540]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	4983      	ldr	r1, [pc, #524]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00a      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002418:	4b7e      	ldr	r3, [pc, #504]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	497b      	ldr	r1, [pc, #492]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002428:	4313      	orrs	r3, r2
 800242a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00a      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800243a:	4b76      	ldr	r3, [pc, #472]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002448:	4972      	ldr	r1, [pc, #456]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800245c:	4b6d      	ldr	r3, [pc, #436]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246a:	496a      	ldr	r1, [pc, #424]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800247e:	4b65      	ldr	r3, [pc, #404]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002484:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248c:	4961      	ldr	r1, [pc, #388]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024a0:	4b5c      	ldr	r3, [pc, #368]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ae:	4959      	ldr	r1, [pc, #356]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024c2:	4b54      	ldr	r3, [pc, #336]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d0:	4950      	ldr	r1, [pc, #320]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00a      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024e4:	4b4b      	ldr	r3, [pc, #300]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f2:	4948      	ldr	r1, [pc, #288]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002506:	4b43      	ldr	r3, [pc, #268]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002514:	493f      	ldr	r1, [pc, #252]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d028      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002528:	4b3a      	ldr	r3, [pc, #232]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002536:	4937      	ldr	r1, [pc, #220]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002546:	d106      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002548:	4b32      	ldr	r3, [pc, #200]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4a31      	ldr	r2, [pc, #196]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002552:	60d3      	str	r3, [r2, #12]
 8002554:	e011      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800255a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800255e:	d10c      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3304      	adds	r3, #4
 8002564:	2101      	movs	r1, #1
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f8c8 	bl	80026fc <RCCEx_PLLSAI1_Config>
 800256c:	4603      	mov	r3, r0
 800256e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002576:	7cfb      	ldrb	r3, [r7, #19]
 8002578:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d028      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002586:	4b23      	ldr	r3, [pc, #140]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002594:	491f      	ldr	r1, [pc, #124]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025a4:	d106      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025a6:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	4a1a      	ldr	r2, [pc, #104]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b0:	60d3      	str	r3, [r2, #12]
 80025b2:	e011      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025bc:	d10c      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3304      	adds	r3, #4
 80025c2:	2101      	movs	r1, #1
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 f899 	bl	80026fc <RCCEx_PLLSAI1_Config>
 80025ca:	4603      	mov	r3, r0
 80025cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025ce:	7cfb      	ldrb	r3, [r7, #19]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80025d4:	7cfb      	ldrb	r3, [r7, #19]
 80025d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d02b      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f2:	4908      	ldr	r1, [pc, #32]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002602:	d109      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4a02      	ldr	r2, [pc, #8]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800260e:	60d3      	str	r3, [r2, #12]
 8002610:	e014      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002620:	d10c      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3304      	adds	r3, #4
 8002626:	2101      	movs	r1, #1
 8002628:	4618      	mov	r0, r3
 800262a:	f000 f867 	bl	80026fc <RCCEx_PLLSAI1_Config>
 800262e:	4603      	mov	r3, r0
 8002630:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002638:	7cfb      	ldrb	r3, [r7, #19]
 800263a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d02f      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002648:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002656:	4928      	ldr	r1, [pc, #160]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002662:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002666:	d10d      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3304      	adds	r3, #4
 800266c:	2102      	movs	r1, #2
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f844 	bl	80026fc <RCCEx_PLLSAI1_Config>
 8002674:	4603      	mov	r3, r0
 8002676:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d014      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	74bb      	strb	r3, [r7, #18]
 8002682:	e011      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800268c:	d10c      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3320      	adds	r3, #32
 8002692:	2102      	movs	r1, #2
 8002694:	4618      	mov	r0, r3
 8002696:	f000 f925 	bl	80028e4 <RCCEx_PLLSAI2_Config>
 800269a:	4603      	mov	r3, r0
 800269c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800269e:	7cfb      	ldrb	r3, [r7, #19]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026a4:	7cfb      	ldrb	r3, [r7, #19]
 80026a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026b4:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026c2:	490d      	ldr	r1, [pc, #52]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00b      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026e6:	4904      	ldr	r1, [pc, #16]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000

080026fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800270a:	4b75      	ldr	r3, [pc, #468]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d018      	beq.n	8002748 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002716:	4b72      	ldr	r3, [pc, #456]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 0203 	and.w	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d10d      	bne.n	8002742 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
       ||
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800272e:	4b6c      	ldr	r3, [pc, #432]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
       ||
 800273e:	429a      	cmp	r2, r3
 8002740:	d047      	beq.n	80027d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
 8002746:	e044      	b.n	80027d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b03      	cmp	r3, #3
 800274e:	d018      	beq.n	8002782 <RCCEx_PLLSAI1_Config+0x86>
 8002750:	2b03      	cmp	r3, #3
 8002752:	d825      	bhi.n	80027a0 <RCCEx_PLLSAI1_Config+0xa4>
 8002754:	2b01      	cmp	r3, #1
 8002756:	d002      	beq.n	800275e <RCCEx_PLLSAI1_Config+0x62>
 8002758:	2b02      	cmp	r3, #2
 800275a:	d009      	beq.n	8002770 <RCCEx_PLLSAI1_Config+0x74>
 800275c:	e020      	b.n	80027a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800275e:	4b60      	ldr	r3, [pc, #384]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d11d      	bne.n	80027a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276e:	e01a      	b.n	80027a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002770:	4b5b      	ldr	r3, [pc, #364]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002778:	2b00      	cmp	r3, #0
 800277a:	d116      	bne.n	80027aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002780:	e013      	b.n	80027aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002782:	4b57      	ldr	r3, [pc, #348]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10f      	bne.n	80027ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800278e:	4b54      	ldr	r3, [pc, #336]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800279e:	e006      	b.n	80027ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
      break;
 80027a4:	e004      	b.n	80027b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027a6:	bf00      	nop
 80027a8:	e002      	b.n	80027b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027aa:	bf00      	nop
 80027ac:	e000      	b.n	80027b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10d      	bne.n	80027d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027b6:	4b4a      	ldr	r3, [pc, #296]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6819      	ldr	r1, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	430b      	orrs	r3, r1
 80027cc:	4944      	ldr	r1, [pc, #272]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d17d      	bne.n	80028d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027d8:	4b41      	ldr	r3, [pc, #260]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a40      	ldr	r2, [pc, #256]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e4:	f7fe faae 	bl	8000d44 <HAL_GetTick>
 80027e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027ea:	e009      	b.n	8002800 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027ec:	f7fe faaa 	bl	8000d44 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d902      	bls.n	8002800 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	73fb      	strb	r3, [r7, #15]
        break;
 80027fe:	e005      	b.n	800280c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002800:	4b37      	ldr	r3, [pc, #220]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1ef      	bne.n	80027ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d160      	bne.n	80028d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d111      	bne.n	800283c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002818:	4b31      	ldr	r3, [pc, #196]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6892      	ldr	r2, [r2, #8]
 8002828:	0211      	lsls	r1, r2, #8
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68d2      	ldr	r2, [r2, #12]
 800282e:	0912      	lsrs	r2, r2, #4
 8002830:	0452      	lsls	r2, r2, #17
 8002832:	430a      	orrs	r2, r1
 8002834:	492a      	ldr	r1, [pc, #168]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002836:	4313      	orrs	r3, r2
 8002838:	610b      	str	r3, [r1, #16]
 800283a:	e027      	b.n	800288c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d112      	bne.n	8002868 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002842:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800284a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6892      	ldr	r2, [r2, #8]
 8002852:	0211      	lsls	r1, r2, #8
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6912      	ldr	r2, [r2, #16]
 8002858:	0852      	lsrs	r2, r2, #1
 800285a:	3a01      	subs	r2, #1
 800285c:	0552      	lsls	r2, r2, #21
 800285e:	430a      	orrs	r2, r1
 8002860:	491f      	ldr	r1, [pc, #124]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	610b      	str	r3, [r1, #16]
 8002866:	e011      	b.n	800288c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002868:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002870:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6892      	ldr	r2, [r2, #8]
 8002878:	0211      	lsls	r1, r2, #8
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6952      	ldr	r2, [r2, #20]
 800287e:	0852      	lsrs	r2, r2, #1
 8002880:	3a01      	subs	r2, #1
 8002882:	0652      	lsls	r2, r2, #25
 8002884:	430a      	orrs	r2, r1
 8002886:	4916      	ldr	r1, [pc, #88]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002888:	4313      	orrs	r3, r2
 800288a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800288c:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a13      	ldr	r2, [pc, #76]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002892:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002896:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002898:	f7fe fa54 	bl	8000d44 <HAL_GetTick>
 800289c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800289e:	e009      	b.n	80028b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028a0:	f7fe fa50 	bl	8000d44 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d902      	bls.n	80028b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	73fb      	strb	r3, [r7, #15]
          break;
 80028b2:	e005      	b.n	80028c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0ef      	beq.n	80028a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	4904      	ldr	r1, [pc, #16]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000

080028e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028f2:	4b6a      	ldr	r3, [pc, #424]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d018      	beq.n	8002930 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028fe:	4b67      	ldr	r3, [pc, #412]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f003 0203 	and.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d10d      	bne.n	800292a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
       ||
 8002912:	2b00      	cmp	r3, #0
 8002914:	d009      	beq.n	800292a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002916:	4b61      	ldr	r3, [pc, #388]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
       ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d047      	beq.n	80029ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
 800292e:	e044      	b.n	80029ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d018      	beq.n	800296a <RCCEx_PLLSAI2_Config+0x86>
 8002938:	2b03      	cmp	r3, #3
 800293a:	d825      	bhi.n	8002988 <RCCEx_PLLSAI2_Config+0xa4>
 800293c:	2b01      	cmp	r3, #1
 800293e:	d002      	beq.n	8002946 <RCCEx_PLLSAI2_Config+0x62>
 8002940:	2b02      	cmp	r3, #2
 8002942:	d009      	beq.n	8002958 <RCCEx_PLLSAI2_Config+0x74>
 8002944:	e020      	b.n	8002988 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002946:	4b55      	ldr	r3, [pc, #340]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d11d      	bne.n	800298e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002956:	e01a      	b.n	800298e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002958:	4b50      	ldr	r3, [pc, #320]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002960:	2b00      	cmp	r3, #0
 8002962:	d116      	bne.n	8002992 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002968:	e013      	b.n	8002992 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800296a:	4b4c      	ldr	r3, [pc, #304]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10f      	bne.n	8002996 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002976:	4b49      	ldr	r3, [pc, #292]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d109      	bne.n	8002996 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002986:	e006      	b.n	8002996 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
      break;
 800298c:	e004      	b.n	8002998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800298e:	bf00      	nop
 8002990:	e002      	b.n	8002998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002992:	bf00      	nop
 8002994:	e000      	b.n	8002998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002996:	bf00      	nop
    }

    if(status == HAL_OK)
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10d      	bne.n	80029ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800299e:	4b3f      	ldr	r3, [pc, #252]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6819      	ldr	r1, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	430b      	orrs	r3, r1
 80029b4:	4939      	ldr	r1, [pc, #228]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d167      	bne.n	8002a90 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029c0:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a35      	ldr	r2, [pc, #212]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029cc:	f7fe f9ba 	bl	8000d44 <HAL_GetTick>
 80029d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029d2:	e009      	b.n	80029e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029d4:	f7fe f9b6 	bl	8000d44 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d902      	bls.n	80029e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	73fb      	strb	r3, [r7, #15]
        break;
 80029e6:	e005      	b.n	80029f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029e8:	4b2c      	ldr	r3, [pc, #176]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1ef      	bne.n	80029d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d14a      	bne.n	8002a90 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d111      	bne.n	8002a24 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a00:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6892      	ldr	r2, [r2, #8]
 8002a10:	0211      	lsls	r1, r2, #8
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68d2      	ldr	r2, [r2, #12]
 8002a16:	0912      	lsrs	r2, r2, #4
 8002a18:	0452      	lsls	r2, r2, #17
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	491f      	ldr	r1, [pc, #124]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	614b      	str	r3, [r1, #20]
 8002a22:	e011      	b.n	8002a48 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6892      	ldr	r2, [r2, #8]
 8002a34:	0211      	lsls	r1, r2, #8
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6912      	ldr	r2, [r2, #16]
 8002a3a:	0852      	lsrs	r2, r2, #1
 8002a3c:	3a01      	subs	r2, #1
 8002a3e:	0652      	lsls	r2, r2, #25
 8002a40:	430a      	orrs	r2, r1
 8002a42:	4916      	ldr	r1, [pc, #88]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a48:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a13      	ldr	r2, [pc, #76]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a54:	f7fe f976 	bl	8000d44 <HAL_GetTick>
 8002a58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a5a:	e009      	b.n	8002a70 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a5c:	f7fe f972 	bl	8000d44 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d902      	bls.n	8002a70 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a6e:	e005      	b.n	8002a7c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0ef      	beq.n	8002a5c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	4904      	ldr	r1, [pc, #16]	; (8002a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e049      	b.n	8002b46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fd ff38 	bl	800093c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3304      	adds	r3, #4
 8002adc:	4619      	mov	r1, r3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f000 f9b6 	bl	8002e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0201 	bic.w	r2, r2, #1
 8002b64:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6a1a      	ldr	r2, [r3, #32]
 8002b6c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10f      	bne.n	8002b96 <HAL_TIM_Base_Stop_IT+0x48>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6a1a      	ldr	r2, [r3, #32]
 8002b7c:	f240 4344 	movw	r3, #1092	; 0x444
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d107      	bne.n	8002b96 <HAL_TIM_Base_Stop_IT+0x48>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0201 	bic.w	r2, r2, #1
 8002b94:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d122      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d11b      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0202 	mvn.w	r2, #2
 8002bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f90f 	bl	8002e12 <HAL_TIM_IC_CaptureCallback>
 8002bf4:	e005      	b.n	8002c02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f901 	bl	8002dfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f912 	bl	8002e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d122      	bne.n	8002c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d11b      	bne.n	8002c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0204 	mvn.w	r2, #4
 8002c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2202      	movs	r2, #2
 8002c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f8e5 	bl	8002e12 <HAL_TIM_IC_CaptureCallback>
 8002c48:	e005      	b.n	8002c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f8d7 	bl	8002dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f8e8 	bl	8002e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d122      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d11b      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0208 	mvn.w	r2, #8
 8002c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2204      	movs	r2, #4
 8002c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f8bb 	bl	8002e12 <HAL_TIM_IC_CaptureCallback>
 8002c9c:	e005      	b.n	8002caa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f8ad 	bl	8002dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f8be 	bl	8002e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 0310 	and.w	r3, r3, #16
 8002cba:	2b10      	cmp	r3, #16
 8002cbc:	d122      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b10      	cmp	r3, #16
 8002cca:	d11b      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0210 	mvn.w	r2, #16
 8002cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2208      	movs	r2, #8
 8002cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f891 	bl	8002e12 <HAL_TIM_IC_CaptureCallback>
 8002cf0:	e005      	b.n	8002cfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f883 	bl	8002dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f894 	bl	8002e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d10e      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d107      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0201 	mvn.w	r2, #1
 8002d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f85d 	bl	8002dea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3a:	2b80      	cmp	r3, #128	; 0x80
 8002d3c:	d10e      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d48:	2b80      	cmp	r3, #128	; 0x80
 8002d4a:	d107      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f9a6 	bl	80030a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d6a:	d10e      	bne.n	8002d8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d76:	2b80      	cmp	r3, #128	; 0x80
 8002d78:	d107      	bne.n	8002d8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f999 	bl	80030bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d94:	2b40      	cmp	r3, #64	; 0x40
 8002d96:	d10e      	bne.n	8002db6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da2:	2b40      	cmp	r3, #64	; 0x40
 8002da4:	d107      	bne.n	8002db6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f842 	bl	8002e3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d10e      	bne.n	8002de2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d107      	bne.n	8002de2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f06f 0220 	mvn.w	r2, #32
 8002dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f959 	bl	8003094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a40      	ldr	r2, [pc, #256]	; (8002f64 <TIM_Base_SetConfig+0x114>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d013      	beq.n	8002e90 <TIM_Base_SetConfig+0x40>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e6e:	d00f      	beq.n	8002e90 <TIM_Base_SetConfig+0x40>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a3d      	ldr	r2, [pc, #244]	; (8002f68 <TIM_Base_SetConfig+0x118>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00b      	beq.n	8002e90 <TIM_Base_SetConfig+0x40>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a3c      	ldr	r2, [pc, #240]	; (8002f6c <TIM_Base_SetConfig+0x11c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d007      	beq.n	8002e90 <TIM_Base_SetConfig+0x40>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a3b      	ldr	r2, [pc, #236]	; (8002f70 <TIM_Base_SetConfig+0x120>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d003      	beq.n	8002e90 <TIM_Base_SetConfig+0x40>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a3a      	ldr	r2, [pc, #232]	; (8002f74 <TIM_Base_SetConfig+0x124>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d108      	bne.n	8002ea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a2f      	ldr	r2, [pc, #188]	; (8002f64 <TIM_Base_SetConfig+0x114>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d01f      	beq.n	8002eea <TIM_Base_SetConfig+0x9a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb0:	d01b      	beq.n	8002eea <TIM_Base_SetConfig+0x9a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a2c      	ldr	r2, [pc, #176]	; (8002f68 <TIM_Base_SetConfig+0x118>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d017      	beq.n	8002eea <TIM_Base_SetConfig+0x9a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a2b      	ldr	r2, [pc, #172]	; (8002f6c <TIM_Base_SetConfig+0x11c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d013      	beq.n	8002eea <TIM_Base_SetConfig+0x9a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a2a      	ldr	r2, [pc, #168]	; (8002f70 <TIM_Base_SetConfig+0x120>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00f      	beq.n	8002eea <TIM_Base_SetConfig+0x9a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a29      	ldr	r2, [pc, #164]	; (8002f74 <TIM_Base_SetConfig+0x124>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00b      	beq.n	8002eea <TIM_Base_SetConfig+0x9a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a28      	ldr	r2, [pc, #160]	; (8002f78 <TIM_Base_SetConfig+0x128>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d007      	beq.n	8002eea <TIM_Base_SetConfig+0x9a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a27      	ldr	r2, [pc, #156]	; (8002f7c <TIM_Base_SetConfig+0x12c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d003      	beq.n	8002eea <TIM_Base_SetConfig+0x9a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a26      	ldr	r2, [pc, #152]	; (8002f80 <TIM_Base_SetConfig+0x130>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d108      	bne.n	8002efc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a10      	ldr	r2, [pc, #64]	; (8002f64 <TIM_Base_SetConfig+0x114>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00f      	beq.n	8002f48 <TIM_Base_SetConfig+0xf8>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a12      	ldr	r2, [pc, #72]	; (8002f74 <TIM_Base_SetConfig+0x124>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00b      	beq.n	8002f48 <TIM_Base_SetConfig+0xf8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a11      	ldr	r2, [pc, #68]	; (8002f78 <TIM_Base_SetConfig+0x128>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d007      	beq.n	8002f48 <TIM_Base_SetConfig+0xf8>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a10      	ldr	r2, [pc, #64]	; (8002f7c <TIM_Base_SetConfig+0x12c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d003      	beq.n	8002f48 <TIM_Base_SetConfig+0xf8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a0f      	ldr	r2, [pc, #60]	; (8002f80 <TIM_Base_SetConfig+0x130>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d103      	bne.n	8002f50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	615a      	str	r2, [r3, #20]
}
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40000400 	.word	0x40000400
 8002f6c:	40000800 	.word	0x40000800
 8002f70:	40000c00 	.word	0x40000c00
 8002f74:	40013400 	.word	0x40013400
 8002f78:	40014000 	.word	0x40014000
 8002f7c:	40014400 	.word	0x40014400
 8002f80:	40014800 	.word	0x40014800

08002f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e068      	b.n	800306e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a2e      	ldr	r2, [pc, #184]	; (800307c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d004      	beq.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a2d      	ldr	r2, [pc, #180]	; (8003080 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d108      	bne.n	8002fe2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002fd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1e      	ldr	r2, [pc, #120]	; (800307c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d01d      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300e:	d018      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a1b      	ldr	r2, [pc, #108]	; (8003084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a1a      	ldr	r2, [pc, #104]	; (8003088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00e      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a18      	ldr	r2, [pc, #96]	; (800308c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d009      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a13      	ldr	r2, [pc, #76]	; (8003080 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d004      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a14      	ldr	r2, [pc, #80]	; (8003090 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10c      	bne.n	800305c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003048:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	4313      	orrs	r3, r2
 8003052:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40012c00 	.word	0x40012c00
 8003080:	40013400 	.word	0x40013400
 8003084:	40000400 	.word	0x40000400
 8003088:	40000800 	.word	0x40000800
 800308c:	40000c00 	.word	0x40000c00
 8003090:	40014000 	.word	0x40014000

08003094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e040      	b.n	8003164 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fd fc48 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2224      	movs	r2, #36	; 0x24
 80030fc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0201 	bic.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fbc2 	bl	8003898 <UART_SetConfig>
 8003114:	4603      	mov	r3, r0
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e022      	b.n	8003164 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fe6e 	bl	8003e08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800313a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800314a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fef5 	bl	8003f4c <UART_CheckIdleState>
 8003162:	4603      	mov	r3, r0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	; 0x28
 8003170:	af02      	add	r7, sp, #8
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003180:	2b20      	cmp	r3, #32
 8003182:	f040 8082 	bne.w	800328a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <HAL_UART_Transmit+0x26>
 800318c:	88fb      	ldrh	r3, [r7, #6]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e07a      	b.n	800328c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_UART_Transmit+0x38>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e073      	b.n	800328c <HAL_UART_Transmit+0x120>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2221      	movs	r2, #33	; 0x21
 80031b8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031ba:	f7fd fdc3 	bl	8000d44 <HAL_GetTick>
 80031be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	88fa      	ldrh	r2, [r7, #6]
 80031c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	88fa      	ldrh	r2, [r7, #6]
 80031cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d8:	d108      	bne.n	80031ec <HAL_UART_Transmit+0x80>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d104      	bne.n	80031ec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	e003      	b.n	80031f4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80031fc:	e02d      	b.n	800325a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2200      	movs	r2, #0
 8003206:	2180      	movs	r1, #128	; 0x80
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 fee8 	bl	8003fde <UART_WaitOnFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e039      	b.n	800328c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10b      	bne.n	8003236 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	881a      	ldrh	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800322a:	b292      	uxth	r2, r2
 800322c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	3302      	adds	r3, #2
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	e008      	b.n	8003248 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	781a      	ldrb	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	b292      	uxth	r2, r2
 8003240:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	3301      	adds	r3, #1
 8003246:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800324e:	b29b      	uxth	r3, r3
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1cb      	bne.n	80031fe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2200      	movs	r2, #0
 800326e:	2140      	movs	r1, #64	; 0x40
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 feb4 	bl	8003fde <UART_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e005      	b.n	800328c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	e000      	b.n	800328c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800328a:	2302      	movs	r3, #2
  }
}
 800328c:	4618      	mov	r0, r3
 800328e:	3720      	adds	r7, #32
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b0ba      	sub	sp, #232	; 0xe8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80032be:	f640 030f 	movw	r3, #2063	; 0x80f
 80032c2:	4013      	ands	r3, r2
 80032c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80032c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d115      	bne.n	80032fc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00f      	beq.n	80032fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d009      	beq.n	80032fc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 82a6 	beq.w	800383e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	4798      	blx	r3
      }
      return;
 80032fa:	e2a0      	b.n	800383e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80032fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 8117 	beq.w	8003534 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003312:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003316:	4b85      	ldr	r3, [pc, #532]	; (800352c <HAL_UART_IRQHandler+0x298>)
 8003318:	4013      	ands	r3, r2
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 810a 	beq.w	8003534 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d011      	beq.n	8003350 <HAL_UART_IRQHandler+0xbc>
 800332c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00b      	beq.n	8003350 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2201      	movs	r2, #1
 800333e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d011      	beq.n	8003380 <HAL_UART_IRQHandler+0xec>
 800335c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00b      	beq.n	8003380 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2202      	movs	r2, #2
 800336e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003376:	f043 0204 	orr.w	r2, r3, #4
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d011      	beq.n	80033b0 <HAL_UART_IRQHandler+0x11c>
 800338c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00b      	beq.n	80033b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2204      	movs	r2, #4
 800339e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033a6:	f043 0202 	orr.w	r2, r3, #2
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d017      	beq.n	80033ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033c0:	f003 0320 	and.w	r3, r3, #32
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d105      	bne.n	80033d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00b      	beq.n	80033ec <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2208      	movs	r2, #8
 80033da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033e2:	f043 0208 	orr.w	r2, r3, #8
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80033ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d012      	beq.n	800341e <HAL_UART_IRQHandler+0x18a>
 80033f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00c      	beq.n	800341e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800340c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003414:	f043 0220 	orr.w	r2, r3, #32
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 820c 	beq.w	8003842 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800342a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00d      	beq.n	8003452 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800343a:	f003 0320 	and.w	r3, r3, #32
 800343e:	2b00      	cmp	r3, #0
 8003440:	d007      	beq.n	8003452 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003458:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003466:	2b40      	cmp	r3, #64	; 0x40
 8003468:	d005      	beq.n	8003476 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800346a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800346e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003472:	2b00      	cmp	r3, #0
 8003474:	d04f      	beq.n	8003516 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fe75 	bl	8004166 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	d141      	bne.n	800350e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	3308      	adds	r3, #8
 8003490:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003494:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003498:	e853 3f00 	ldrex	r3, [r3]
 800349c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3308      	adds	r3, #8
 80034b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80034b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80034c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80034c6:	e841 2300 	strex	r3, r2, [r1]
 80034ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80034ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1d9      	bne.n	800348a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d013      	beq.n	8003506 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	4a13      	ldr	r2, [pc, #76]	; (8003530 <HAL_UART_IRQHandler+0x29c>)
 80034e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd fd85 	bl	8000ffa <HAL_DMA_Abort_IT>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d017      	beq.n	8003526 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003500:	4610      	mov	r0, r2
 8003502:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003504:	e00f      	b.n	8003526 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f9b0 	bl	800386c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350c:	e00b      	b.n	8003526 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f9ac 	bl	800386c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003514:	e007      	b.n	8003526 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f9a8 	bl	800386c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003524:	e18d      	b.n	8003842 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003526:	bf00      	nop
    return;
 8003528:	e18b      	b.n	8003842 <HAL_UART_IRQHandler+0x5ae>
 800352a:	bf00      	nop
 800352c:	04000120 	.word	0x04000120
 8003530:	0800422d 	.word	0x0800422d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003538:	2b01      	cmp	r3, #1
 800353a:	f040 8146 	bne.w	80037ca <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800353e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003542:	f003 0310 	and.w	r3, r3, #16
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 813f 	beq.w	80037ca <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800354c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 8138 	beq.w	80037ca <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2210      	movs	r2, #16
 8003560:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356c:	2b40      	cmp	r3, #64	; 0x40
 800356e:	f040 80b4 	bne.w	80036da <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800357e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 815f 	beq.w	8003846 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800358e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003592:	429a      	cmp	r2, r3
 8003594:	f080 8157 	bcs.w	8003846 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800359e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f040 8085 	bne.w	80036be <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035c0:	e853 3f00 	ldrex	r3, [r3]
 80035c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80035c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80035de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80035e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80035ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80035ee:	e841 2300 	strex	r3, r2, [r1]
 80035f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80035f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1da      	bne.n	80035b4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3308      	adds	r3, #8
 8003604:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800360e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003610:	f023 0301 	bic.w	r3, r3, #1
 8003614:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3308      	adds	r3, #8
 800361e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003622:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003626:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003628:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800362a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800362e:	e841 2300 	strex	r3, r2, [r1]
 8003632:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1e1      	bne.n	80035fe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3308      	adds	r3, #8
 8003640:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800364a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800364c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003650:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3308      	adds	r3, #8
 800365a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800365e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003660:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003662:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003664:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003666:	e841 2300 	strex	r3, r2, [r1]
 800366a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800366c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1e3      	bne.n	800363a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003686:	e853 3f00 	ldrex	r3, [r3]
 800368a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800368c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800368e:	f023 0310 	bic.w	r3, r3, #16
 8003692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80036a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036a8:	e841 2300 	strex	r3, r2, [r1]
 80036ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1e4      	bne.n	800367e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fd fc60 	bl	8000f7e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	4619      	mov	r1, r3
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f8d4 	bl	8003880 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036d8:	e0b5      	b.n	8003846 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 80a7 	beq.w	800384a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80036fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80a2 	beq.w	800384a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370e:	e853 3f00 	ldrex	r3, [r3]
 8003712:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003716:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800371a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003728:	647b      	str	r3, [r7, #68]	; 0x44
 800372a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800372e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003730:	e841 2300 	strex	r3, r2, [r1]
 8003734:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e4      	bne.n	8003706 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3308      	adds	r3, #8
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	e853 3f00 	ldrex	r3, [r3]
 800374a:	623b      	str	r3, [r7, #32]
   return(result);
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	f023 0301 	bic.w	r3, r3, #1
 8003752:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3308      	adds	r3, #8
 800375c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003760:	633a      	str	r2, [r7, #48]	; 0x30
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e3      	bne.n	800373c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	e853 3f00 	ldrex	r3, [r3]
 8003792:	60fb      	str	r3, [r7, #12]
   return(result);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0310 	bic.w	r3, r3, #16
 800379a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ac:	69b9      	ldr	r1, [r7, #24]
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	e841 2300 	strex	r3, r2, [r1]
 80037b4:	617b      	str	r3, [r7, #20]
   return(result);
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1e4      	bne.n	8003786 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037c0:	4619      	mov	r1, r3
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f85c 	bl	8003880 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037c8:	e03f      	b.n	800384a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00e      	beq.n	80037f4 <HAL_UART_IRQHandler+0x560>
 80037d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d008      	beq.n	80037f4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fd5d 	bl	80042ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037f2:	e02d      	b.n	8003850 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00e      	beq.n	800381e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01c      	beq.n	800384e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	4798      	blx	r3
    }
    return;
 800381c:	e017      	b.n	800384e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800381e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d012      	beq.n	8003850 <HAL_UART_IRQHandler+0x5bc>
 800382a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800382e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00c      	beq.n	8003850 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fd0e 	bl	8004258 <UART_EndTransmit_IT>
    return;
 800383c:	e008      	b.n	8003850 <HAL_UART_IRQHandler+0x5bc>
      return;
 800383e:	bf00      	nop
 8003840:	e006      	b.n	8003850 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003842:	bf00      	nop
 8003844:	e004      	b.n	8003850 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003846:	bf00      	nop
 8003848:	e002      	b.n	8003850 <HAL_UART_IRQHandler+0x5bc>
      return;
 800384a:	bf00      	nop
 800384c:	e000      	b.n	8003850 <HAL_UART_IRQHandler+0x5bc>
    return;
 800384e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003850:	37e8      	adds	r7, #232	; 0xe8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop

08003858 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800389c:	b08a      	sub	sp, #40	; 0x28
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	431a      	orrs	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	4313      	orrs	r3, r2
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	4ba4      	ldr	r3, [pc, #656]	; (8003b58 <UART_SetConfig+0x2c0>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038d0:	430b      	orrs	r3, r1
 80038d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a99      	ldr	r2, [pc, #612]	; (8003b5c <UART_SetConfig+0x2c4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d004      	beq.n	8003904 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003900:	4313      	orrs	r3, r2
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003914:	430a      	orrs	r2, r1
 8003916:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a90      	ldr	r2, [pc, #576]	; (8003b60 <UART_SetConfig+0x2c8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d126      	bne.n	8003970 <UART_SetConfig+0xd8>
 8003922:	4b90      	ldr	r3, [pc, #576]	; (8003b64 <UART_SetConfig+0x2cc>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	2b03      	cmp	r3, #3
 800392e:	d81b      	bhi.n	8003968 <UART_SetConfig+0xd0>
 8003930:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <UART_SetConfig+0xa0>)
 8003932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003936:	bf00      	nop
 8003938:	08003949 	.word	0x08003949
 800393c:	08003959 	.word	0x08003959
 8003940:	08003951 	.word	0x08003951
 8003944:	08003961 	.word	0x08003961
 8003948:	2301      	movs	r3, #1
 800394a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800394e:	e116      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003950:	2302      	movs	r3, #2
 8003952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003956:	e112      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003958:	2304      	movs	r3, #4
 800395a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800395e:	e10e      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003960:	2308      	movs	r3, #8
 8003962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003966:	e10a      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003968:	2310      	movs	r3, #16
 800396a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800396e:	e106      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a7c      	ldr	r2, [pc, #496]	; (8003b68 <UART_SetConfig+0x2d0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d138      	bne.n	80039ec <UART_SetConfig+0x154>
 800397a:	4b7a      	ldr	r3, [pc, #488]	; (8003b64 <UART_SetConfig+0x2cc>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003980:	f003 030c 	and.w	r3, r3, #12
 8003984:	2b0c      	cmp	r3, #12
 8003986:	d82d      	bhi.n	80039e4 <UART_SetConfig+0x14c>
 8003988:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <UART_SetConfig+0xf8>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039c5 	.word	0x080039c5
 8003994:	080039e5 	.word	0x080039e5
 8003998:	080039e5 	.word	0x080039e5
 800399c:	080039e5 	.word	0x080039e5
 80039a0:	080039d5 	.word	0x080039d5
 80039a4:	080039e5 	.word	0x080039e5
 80039a8:	080039e5 	.word	0x080039e5
 80039ac:	080039e5 	.word	0x080039e5
 80039b0:	080039cd 	.word	0x080039cd
 80039b4:	080039e5 	.word	0x080039e5
 80039b8:	080039e5 	.word	0x080039e5
 80039bc:	080039e5 	.word	0x080039e5
 80039c0:	080039dd 	.word	0x080039dd
 80039c4:	2300      	movs	r3, #0
 80039c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ca:	e0d8      	b.n	8003b7e <UART_SetConfig+0x2e6>
 80039cc:	2302      	movs	r3, #2
 80039ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d2:	e0d4      	b.n	8003b7e <UART_SetConfig+0x2e6>
 80039d4:	2304      	movs	r3, #4
 80039d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039da:	e0d0      	b.n	8003b7e <UART_SetConfig+0x2e6>
 80039dc:	2308      	movs	r3, #8
 80039de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e2:	e0cc      	b.n	8003b7e <UART_SetConfig+0x2e6>
 80039e4:	2310      	movs	r3, #16
 80039e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ea:	e0c8      	b.n	8003b7e <UART_SetConfig+0x2e6>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a5e      	ldr	r2, [pc, #376]	; (8003b6c <UART_SetConfig+0x2d4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d125      	bne.n	8003a42 <UART_SetConfig+0x1aa>
 80039f6:	4b5b      	ldr	r3, [pc, #364]	; (8003b64 <UART_SetConfig+0x2cc>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a00:	2b30      	cmp	r3, #48	; 0x30
 8003a02:	d016      	beq.n	8003a32 <UART_SetConfig+0x19a>
 8003a04:	2b30      	cmp	r3, #48	; 0x30
 8003a06:	d818      	bhi.n	8003a3a <UART_SetConfig+0x1a2>
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d00a      	beq.n	8003a22 <UART_SetConfig+0x18a>
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d814      	bhi.n	8003a3a <UART_SetConfig+0x1a2>
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <UART_SetConfig+0x182>
 8003a14:	2b10      	cmp	r3, #16
 8003a16:	d008      	beq.n	8003a2a <UART_SetConfig+0x192>
 8003a18:	e00f      	b.n	8003a3a <UART_SetConfig+0x1a2>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a20:	e0ad      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003a22:	2302      	movs	r3, #2
 8003a24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a28:	e0a9      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003a2a:	2304      	movs	r3, #4
 8003a2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a30:	e0a5      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003a32:	2308      	movs	r3, #8
 8003a34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a38:	e0a1      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003a3a:	2310      	movs	r3, #16
 8003a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a40:	e09d      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a4a      	ldr	r2, [pc, #296]	; (8003b70 <UART_SetConfig+0x2d8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d125      	bne.n	8003a98 <UART_SetConfig+0x200>
 8003a4c:	4b45      	ldr	r3, [pc, #276]	; (8003b64 <UART_SetConfig+0x2cc>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a56:	2bc0      	cmp	r3, #192	; 0xc0
 8003a58:	d016      	beq.n	8003a88 <UART_SetConfig+0x1f0>
 8003a5a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a5c:	d818      	bhi.n	8003a90 <UART_SetConfig+0x1f8>
 8003a5e:	2b80      	cmp	r3, #128	; 0x80
 8003a60:	d00a      	beq.n	8003a78 <UART_SetConfig+0x1e0>
 8003a62:	2b80      	cmp	r3, #128	; 0x80
 8003a64:	d814      	bhi.n	8003a90 <UART_SetConfig+0x1f8>
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <UART_SetConfig+0x1d8>
 8003a6a:	2b40      	cmp	r3, #64	; 0x40
 8003a6c:	d008      	beq.n	8003a80 <UART_SetConfig+0x1e8>
 8003a6e:	e00f      	b.n	8003a90 <UART_SetConfig+0x1f8>
 8003a70:	2300      	movs	r3, #0
 8003a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a76:	e082      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7e:	e07e      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003a80:	2304      	movs	r3, #4
 8003a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a86:	e07a      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003a88:	2308      	movs	r3, #8
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8e:	e076      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003a90:	2310      	movs	r3, #16
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a96:	e072      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a35      	ldr	r2, [pc, #212]	; (8003b74 <UART_SetConfig+0x2dc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d12a      	bne.n	8003af8 <UART_SetConfig+0x260>
 8003aa2:	4b30      	ldr	r3, [pc, #192]	; (8003b64 <UART_SetConfig+0x2cc>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ab0:	d01a      	beq.n	8003ae8 <UART_SetConfig+0x250>
 8003ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ab6:	d81b      	bhi.n	8003af0 <UART_SetConfig+0x258>
 8003ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003abc:	d00c      	beq.n	8003ad8 <UART_SetConfig+0x240>
 8003abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac2:	d815      	bhi.n	8003af0 <UART_SetConfig+0x258>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <UART_SetConfig+0x238>
 8003ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003acc:	d008      	beq.n	8003ae0 <UART_SetConfig+0x248>
 8003ace:	e00f      	b.n	8003af0 <UART_SetConfig+0x258>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad6:	e052      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ade:	e04e      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003ae0:	2304      	movs	r3, #4
 8003ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae6:	e04a      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003ae8:	2308      	movs	r3, #8
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aee:	e046      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003af0:	2310      	movs	r3, #16
 8003af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af6:	e042      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a17      	ldr	r2, [pc, #92]	; (8003b5c <UART_SetConfig+0x2c4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d13a      	bne.n	8003b78 <UART_SetConfig+0x2e0>
 8003b02:	4b18      	ldr	r3, [pc, #96]	; (8003b64 <UART_SetConfig+0x2cc>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b10:	d01a      	beq.n	8003b48 <UART_SetConfig+0x2b0>
 8003b12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b16:	d81b      	bhi.n	8003b50 <UART_SetConfig+0x2b8>
 8003b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b1c:	d00c      	beq.n	8003b38 <UART_SetConfig+0x2a0>
 8003b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b22:	d815      	bhi.n	8003b50 <UART_SetConfig+0x2b8>
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <UART_SetConfig+0x298>
 8003b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2c:	d008      	beq.n	8003b40 <UART_SetConfig+0x2a8>
 8003b2e:	e00f      	b.n	8003b50 <UART_SetConfig+0x2b8>
 8003b30:	2300      	movs	r3, #0
 8003b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b36:	e022      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b3e:	e01e      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003b40:	2304      	movs	r3, #4
 8003b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b46:	e01a      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003b48:	2308      	movs	r3, #8
 8003b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4e:	e016      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003b50:	2310      	movs	r3, #16
 8003b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b56:	e012      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003b58:	efff69f3 	.word	0xefff69f3
 8003b5c:	40008000 	.word	0x40008000
 8003b60:	40013800 	.word	0x40013800
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40004400 	.word	0x40004400
 8003b6c:	40004800 	.word	0x40004800
 8003b70:	40004c00 	.word	0x40004c00
 8003b74:	40005000 	.word	0x40005000
 8003b78:	2310      	movs	r3, #16
 8003b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a9f      	ldr	r2, [pc, #636]	; (8003e00 <UART_SetConfig+0x568>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d17a      	bne.n	8003c7e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d824      	bhi.n	8003bda <UART_SetConfig+0x342>
 8003b90:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <UART_SetConfig+0x300>)
 8003b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003bbd 	.word	0x08003bbd
 8003b9c:	08003bdb 	.word	0x08003bdb
 8003ba0:	08003bc5 	.word	0x08003bc5
 8003ba4:	08003bdb 	.word	0x08003bdb
 8003ba8:	08003bcb 	.word	0x08003bcb
 8003bac:	08003bdb 	.word	0x08003bdb
 8003bb0:	08003bdb 	.word	0x08003bdb
 8003bb4:	08003bdb 	.word	0x08003bdb
 8003bb8:	08003bd3 	.word	0x08003bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bbc:	f7fe fa28 	bl	8002010 <HAL_RCC_GetPCLK1Freq>
 8003bc0:	61f8      	str	r0, [r7, #28]
        break;
 8003bc2:	e010      	b.n	8003be6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bc4:	4b8f      	ldr	r3, [pc, #572]	; (8003e04 <UART_SetConfig+0x56c>)
 8003bc6:	61fb      	str	r3, [r7, #28]
        break;
 8003bc8:	e00d      	b.n	8003be6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bca:	f7fe f989 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8003bce:	61f8      	str	r0, [r7, #28]
        break;
 8003bd0:	e009      	b.n	8003be6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd6:	61fb      	str	r3, [r7, #28]
        break;
 8003bd8:	e005      	b.n	8003be6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003be4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80fb 	beq.w	8003de4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d305      	bcc.n	8003c0a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c04:	69fa      	ldr	r2, [r7, #28]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d903      	bls.n	8003c12 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c10:	e0e8      	b.n	8003de4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	2200      	movs	r2, #0
 8003c16:	461c      	mov	r4, r3
 8003c18:	4615      	mov	r5, r2
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	022b      	lsls	r3, r5, #8
 8003c24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c28:	0222      	lsls	r2, r4, #8
 8003c2a:	68f9      	ldr	r1, [r7, #12]
 8003c2c:	6849      	ldr	r1, [r1, #4]
 8003c2e:	0849      	lsrs	r1, r1, #1
 8003c30:	2000      	movs	r0, #0
 8003c32:	4688      	mov	r8, r1
 8003c34:	4681      	mov	r9, r0
 8003c36:	eb12 0a08 	adds.w	sl, r2, r8
 8003c3a:	eb43 0b09 	adc.w	fp, r3, r9
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	603b      	str	r3, [r7, #0]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c4c:	4650      	mov	r0, sl
 8003c4e:	4659      	mov	r1, fp
 8003c50:	f7fc fb0e 	bl	8000270 <__aeabi_uldivmod>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4613      	mov	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c62:	d308      	bcc.n	8003c76 <UART_SetConfig+0x3de>
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c6a:	d204      	bcs.n	8003c76 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	60da      	str	r2, [r3, #12]
 8003c74:	e0b6      	b.n	8003de4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c7c:	e0b2      	b.n	8003de4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c86:	d15e      	bne.n	8003d46 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003c88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d828      	bhi.n	8003ce2 <UART_SetConfig+0x44a>
 8003c90:	a201      	add	r2, pc, #4	; (adr r2, 8003c98 <UART_SetConfig+0x400>)
 8003c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c96:	bf00      	nop
 8003c98:	08003cbd 	.word	0x08003cbd
 8003c9c:	08003cc5 	.word	0x08003cc5
 8003ca0:	08003ccd 	.word	0x08003ccd
 8003ca4:	08003ce3 	.word	0x08003ce3
 8003ca8:	08003cd3 	.word	0x08003cd3
 8003cac:	08003ce3 	.word	0x08003ce3
 8003cb0:	08003ce3 	.word	0x08003ce3
 8003cb4:	08003ce3 	.word	0x08003ce3
 8003cb8:	08003cdb 	.word	0x08003cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cbc:	f7fe f9a8 	bl	8002010 <HAL_RCC_GetPCLK1Freq>
 8003cc0:	61f8      	str	r0, [r7, #28]
        break;
 8003cc2:	e014      	b.n	8003cee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cc4:	f7fe f9ba 	bl	800203c <HAL_RCC_GetPCLK2Freq>
 8003cc8:	61f8      	str	r0, [r7, #28]
        break;
 8003cca:	e010      	b.n	8003cee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ccc:	4b4d      	ldr	r3, [pc, #308]	; (8003e04 <UART_SetConfig+0x56c>)
 8003cce:	61fb      	str	r3, [r7, #28]
        break;
 8003cd0:	e00d      	b.n	8003cee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cd2:	f7fe f905 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8003cd6:	61f8      	str	r0, [r7, #28]
        break;
 8003cd8:	e009      	b.n	8003cee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cde:	61fb      	str	r3, [r7, #28]
        break;
 8003ce0:	e005      	b.n	8003cee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d077      	beq.n	8003de4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	005a      	lsls	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	441a      	add	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d08:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b0f      	cmp	r3, #15
 8003d0e:	d916      	bls.n	8003d3e <UART_SetConfig+0x4a6>
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d16:	d212      	bcs.n	8003d3e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	f023 030f 	bic.w	r3, r3, #15
 8003d20:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	8afb      	ldrh	r3, [r7, #22]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	8afa      	ldrh	r2, [r7, #22]
 8003d3a:	60da      	str	r2, [r3, #12]
 8003d3c:	e052      	b.n	8003de4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d44:	e04e      	b.n	8003de4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d827      	bhi.n	8003d9e <UART_SetConfig+0x506>
 8003d4e:	a201      	add	r2, pc, #4	; (adr r2, 8003d54 <UART_SetConfig+0x4bc>)
 8003d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d54:	08003d79 	.word	0x08003d79
 8003d58:	08003d81 	.word	0x08003d81
 8003d5c:	08003d89 	.word	0x08003d89
 8003d60:	08003d9f 	.word	0x08003d9f
 8003d64:	08003d8f 	.word	0x08003d8f
 8003d68:	08003d9f 	.word	0x08003d9f
 8003d6c:	08003d9f 	.word	0x08003d9f
 8003d70:	08003d9f 	.word	0x08003d9f
 8003d74:	08003d97 	.word	0x08003d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d78:	f7fe f94a 	bl	8002010 <HAL_RCC_GetPCLK1Freq>
 8003d7c:	61f8      	str	r0, [r7, #28]
        break;
 8003d7e:	e014      	b.n	8003daa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d80:	f7fe f95c 	bl	800203c <HAL_RCC_GetPCLK2Freq>
 8003d84:	61f8      	str	r0, [r7, #28]
        break;
 8003d86:	e010      	b.n	8003daa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d88:	4b1e      	ldr	r3, [pc, #120]	; (8003e04 <UART_SetConfig+0x56c>)
 8003d8a:	61fb      	str	r3, [r7, #28]
        break;
 8003d8c:	e00d      	b.n	8003daa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d8e:	f7fe f8a7 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8003d92:	61f8      	str	r0, [r7, #28]
        break;
 8003d94:	e009      	b.n	8003daa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d9a:	61fb      	str	r3, [r7, #28]
        break;
 8003d9c:	e005      	b.n	8003daa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003da8:	bf00      	nop
    }

    if (pclk != 0U)
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d019      	beq.n	8003de4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	085a      	lsrs	r2, r3, #1
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	441a      	add	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b0f      	cmp	r3, #15
 8003dc8:	d909      	bls.n	8003dde <UART_SetConfig+0x546>
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd0:	d205      	bcs.n	8003dde <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60da      	str	r2, [r3, #12]
 8003ddc:	e002      	b.n	8003de4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003df0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3728      	adds	r7, #40	; 0x28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dfe:	bf00      	nop
 8003e00:	40008000 	.word	0x40008000
 8003e04:	00f42400 	.word	0x00f42400

08003e08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01a      	beq.n	8003f1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f06:	d10a      	bne.n	8003f1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	605a      	str	r2, [r3, #4]
  }
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f5c:	f7fc fef2 	bl	8000d44 <HAL_GetTick>
 8003f60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d10e      	bne.n	8003f8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f82d 	bl	8003fde <UART_WaitOnFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e023      	b.n	8003fd6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d10e      	bne.n	8003fba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f817 	bl	8003fde <UART_WaitOnFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e00d      	b.n	8003fd6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b09c      	sub	sp, #112	; 0x70
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	4613      	mov	r3, r2
 8003fec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fee:	e0a5      	b.n	800413c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff6:	f000 80a1 	beq.w	800413c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ffa:	f7fc fea3 	bl	8000d44 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004006:	429a      	cmp	r2, r3
 8004008:	d302      	bcc.n	8004010 <UART_WaitOnFlagUntilTimeout+0x32>
 800400a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800400c:	2b00      	cmp	r3, #0
 800400e:	d13e      	bne.n	800408e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004018:	e853 3f00 	ldrex	r3, [r3]
 800401c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800401e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004020:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004024:	667b      	str	r3, [r7, #100]	; 0x64
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800402e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004030:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004032:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004034:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004036:	e841 2300 	strex	r3, r2, [r1]
 800403a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800403c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1e6      	bne.n	8004010 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3308      	adds	r3, #8
 8004048:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800404c:	e853 3f00 	ldrex	r3, [r3]
 8004050:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004054:	f023 0301 	bic.w	r3, r3, #1
 8004058:	663b      	str	r3, [r7, #96]	; 0x60
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3308      	adds	r3, #8
 8004060:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004062:	64ba      	str	r2, [r7, #72]	; 0x48
 8004064:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004066:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800406a:	e841 2300 	strex	r3, r2, [r1]
 800406e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1e5      	bne.n	8004042 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2220      	movs	r2, #32
 800407a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2220      	movs	r2, #32
 8004080:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e067      	b.n	800415e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d04f      	beq.n	800413c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040aa:	d147      	bne.n	800413c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040b4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040be:	e853 3f00 	ldrex	r3, [r3]
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d4:	637b      	str	r3, [r7, #52]	; 0x34
 80040d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040dc:	e841 2300 	strex	r3, r2, [r1]
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e6      	bne.n	80040b6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3308      	adds	r3, #8
 80040ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	e853 3f00 	ldrex	r3, [r3]
 80040f6:	613b      	str	r3, [r7, #16]
   return(result);
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f023 0301 	bic.w	r3, r3, #1
 80040fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3308      	adds	r3, #8
 8004106:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004108:	623a      	str	r2, [r7, #32]
 800410a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410c:	69f9      	ldr	r1, [r7, #28]
 800410e:	6a3a      	ldr	r2, [r7, #32]
 8004110:	e841 2300 	strex	r3, r2, [r1]
 8004114:	61bb      	str	r3, [r7, #24]
   return(result);
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1e5      	bne.n	80040e8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2220      	movs	r2, #32
 8004126:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2220      	movs	r2, #32
 800412c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e010      	b.n	800415e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69da      	ldr	r2, [r3, #28]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	4013      	ands	r3, r2
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	429a      	cmp	r2, r3
 800414a:	bf0c      	ite	eq
 800414c:	2301      	moveq	r3, #1
 800414e:	2300      	movne	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	461a      	mov	r2, r3
 8004154:	79fb      	ldrb	r3, [r7, #7]
 8004156:	429a      	cmp	r2, r3
 8004158:	f43f af4a 	beq.w	8003ff0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3770      	adds	r7, #112	; 0x70
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004166:	b480      	push	{r7}
 8004168:	b095      	sub	sp, #84	; 0x54
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004176:	e853 3f00 	ldrex	r3, [r3]
 800417a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800417c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	461a      	mov	r2, r3
 800418a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800418c:	643b      	str	r3, [r7, #64]	; 0x40
 800418e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800419a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e6      	bne.n	800416e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3308      	adds	r3, #8
 80041a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	e853 3f00 	ldrex	r3, [r3]
 80041ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f023 0301 	bic.w	r3, r3, #1
 80041b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3308      	adds	r3, #8
 80041be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c8:	e841 2300 	strex	r3, r2, [r1]
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e5      	bne.n	80041a0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d118      	bne.n	800420e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f023 0310 	bic.w	r3, r3, #16
 80041f0:	647b      	str	r3, [r7, #68]	; 0x44
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041fa:	61bb      	str	r3, [r7, #24]
 80041fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fe:	6979      	ldr	r1, [r7, #20]
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	e841 2300 	strex	r3, r2, [r1]
 8004206:	613b      	str	r3, [r7, #16]
   return(result);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1e6      	bne.n	80041dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004220:	bf00      	nop
 8004222:	3754      	adds	r7, #84	; 0x54
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004238:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7ff fb0e 	bl	800386c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004250:	bf00      	nop
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	60bb      	str	r3, [r7, #8]
   return(result);
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004274:	61fb      	str	r3, [r7, #28]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	61bb      	str	r3, [r7, #24]
 8004280:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	6979      	ldr	r1, [r7, #20]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	613b      	str	r3, [r7, #16]
   return(result);
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e6      	bne.n	8004260 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2220      	movs	r2, #32
 8004296:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff fada 	bl	8003858 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042a4:	bf00      	nop
 80042a6:	3720      	adds	r7, #32
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <__errno>:
 80042c0:	4b01      	ldr	r3, [pc, #4]	; (80042c8 <__errno+0x8>)
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	2000000c 	.word	0x2000000c

080042cc <__libc_init_array>:
 80042cc:	b570      	push	{r4, r5, r6, lr}
 80042ce:	4d0d      	ldr	r5, [pc, #52]	; (8004304 <__libc_init_array+0x38>)
 80042d0:	4c0d      	ldr	r4, [pc, #52]	; (8004308 <__libc_init_array+0x3c>)
 80042d2:	1b64      	subs	r4, r4, r5
 80042d4:	10a4      	asrs	r4, r4, #2
 80042d6:	2600      	movs	r6, #0
 80042d8:	42a6      	cmp	r6, r4
 80042da:	d109      	bne.n	80042f0 <__libc_init_array+0x24>
 80042dc:	4d0b      	ldr	r5, [pc, #44]	; (800430c <__libc_init_array+0x40>)
 80042de:	4c0c      	ldr	r4, [pc, #48]	; (8004310 <__libc_init_array+0x44>)
 80042e0:	f000 ffae 	bl	8005240 <_init>
 80042e4:	1b64      	subs	r4, r4, r5
 80042e6:	10a4      	asrs	r4, r4, #2
 80042e8:	2600      	movs	r6, #0
 80042ea:	42a6      	cmp	r6, r4
 80042ec:	d105      	bne.n	80042fa <__libc_init_array+0x2e>
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042f4:	4798      	blx	r3
 80042f6:	3601      	adds	r6, #1
 80042f8:	e7ee      	b.n	80042d8 <__libc_init_array+0xc>
 80042fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80042fe:	4798      	blx	r3
 8004300:	3601      	adds	r6, #1
 8004302:	e7f2      	b.n	80042ea <__libc_init_array+0x1e>
 8004304:	0800537c 	.word	0x0800537c
 8004308:	0800537c 	.word	0x0800537c
 800430c:	0800537c 	.word	0x0800537c
 8004310:	08005380 	.word	0x08005380

08004314 <memset>:
 8004314:	4402      	add	r2, r0
 8004316:	4603      	mov	r3, r0
 8004318:	4293      	cmp	r3, r2
 800431a:	d100      	bne.n	800431e <memset+0xa>
 800431c:	4770      	bx	lr
 800431e:	f803 1b01 	strb.w	r1, [r3], #1
 8004322:	e7f9      	b.n	8004318 <memset+0x4>

08004324 <iprintf>:
 8004324:	b40f      	push	{r0, r1, r2, r3}
 8004326:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <iprintf+0x2c>)
 8004328:	b513      	push	{r0, r1, r4, lr}
 800432a:	681c      	ldr	r4, [r3, #0]
 800432c:	b124      	cbz	r4, 8004338 <iprintf+0x14>
 800432e:	69a3      	ldr	r3, [r4, #24]
 8004330:	b913      	cbnz	r3, 8004338 <iprintf+0x14>
 8004332:	4620      	mov	r0, r4
 8004334:	f000 fa4e 	bl	80047d4 <__sinit>
 8004338:	ab05      	add	r3, sp, #20
 800433a:	9a04      	ldr	r2, [sp, #16]
 800433c:	68a1      	ldr	r1, [r4, #8]
 800433e:	9301      	str	r3, [sp, #4]
 8004340:	4620      	mov	r0, r4
 8004342:	f000 fc69 	bl	8004c18 <_vfiprintf_r>
 8004346:	b002      	add	sp, #8
 8004348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800434c:	b004      	add	sp, #16
 800434e:	4770      	bx	lr
 8004350:	2000000c 	.word	0x2000000c

08004354 <__sread>:
 8004354:	b510      	push	{r4, lr}
 8004356:	460c      	mov	r4, r1
 8004358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800435c:	f000 ff20 	bl	80051a0 <_read_r>
 8004360:	2800      	cmp	r0, #0
 8004362:	bfab      	itete	ge
 8004364:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004366:	89a3      	ldrhlt	r3, [r4, #12]
 8004368:	181b      	addge	r3, r3, r0
 800436a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800436e:	bfac      	ite	ge
 8004370:	6563      	strge	r3, [r4, #84]	; 0x54
 8004372:	81a3      	strhlt	r3, [r4, #12]
 8004374:	bd10      	pop	{r4, pc}

08004376 <__swrite>:
 8004376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800437a:	461f      	mov	r7, r3
 800437c:	898b      	ldrh	r3, [r1, #12]
 800437e:	05db      	lsls	r3, r3, #23
 8004380:	4605      	mov	r5, r0
 8004382:	460c      	mov	r4, r1
 8004384:	4616      	mov	r6, r2
 8004386:	d505      	bpl.n	8004394 <__swrite+0x1e>
 8004388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800438c:	2302      	movs	r3, #2
 800438e:	2200      	movs	r2, #0
 8004390:	f000 fac0 	bl	8004914 <_lseek_r>
 8004394:	89a3      	ldrh	r3, [r4, #12]
 8004396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800439a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800439e:	81a3      	strh	r3, [r4, #12]
 80043a0:	4632      	mov	r2, r6
 80043a2:	463b      	mov	r3, r7
 80043a4:	4628      	mov	r0, r5
 80043a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043aa:	f000 b869 	b.w	8004480 <_write_r>

080043ae <__sseek>:
 80043ae:	b510      	push	{r4, lr}
 80043b0:	460c      	mov	r4, r1
 80043b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b6:	f000 faad 	bl	8004914 <_lseek_r>
 80043ba:	1c43      	adds	r3, r0, #1
 80043bc:	89a3      	ldrh	r3, [r4, #12]
 80043be:	bf15      	itete	ne
 80043c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80043c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043ca:	81a3      	strheq	r3, [r4, #12]
 80043cc:	bf18      	it	ne
 80043ce:	81a3      	strhne	r3, [r4, #12]
 80043d0:	bd10      	pop	{r4, pc}

080043d2 <__sclose>:
 80043d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d6:	f000 b8d3 	b.w	8004580 <_close_r>
	...

080043dc <__swbuf_r>:
 80043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043de:	460e      	mov	r6, r1
 80043e0:	4614      	mov	r4, r2
 80043e2:	4605      	mov	r5, r0
 80043e4:	b118      	cbz	r0, 80043ee <__swbuf_r+0x12>
 80043e6:	6983      	ldr	r3, [r0, #24]
 80043e8:	b90b      	cbnz	r3, 80043ee <__swbuf_r+0x12>
 80043ea:	f000 f9f3 	bl	80047d4 <__sinit>
 80043ee:	4b21      	ldr	r3, [pc, #132]	; (8004474 <__swbuf_r+0x98>)
 80043f0:	429c      	cmp	r4, r3
 80043f2:	d12b      	bne.n	800444c <__swbuf_r+0x70>
 80043f4:	686c      	ldr	r4, [r5, #4]
 80043f6:	69a3      	ldr	r3, [r4, #24]
 80043f8:	60a3      	str	r3, [r4, #8]
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	071a      	lsls	r2, r3, #28
 80043fe:	d52f      	bpl.n	8004460 <__swbuf_r+0x84>
 8004400:	6923      	ldr	r3, [r4, #16]
 8004402:	b36b      	cbz	r3, 8004460 <__swbuf_r+0x84>
 8004404:	6923      	ldr	r3, [r4, #16]
 8004406:	6820      	ldr	r0, [r4, #0]
 8004408:	1ac0      	subs	r0, r0, r3
 800440a:	6963      	ldr	r3, [r4, #20]
 800440c:	b2f6      	uxtb	r6, r6
 800440e:	4283      	cmp	r3, r0
 8004410:	4637      	mov	r7, r6
 8004412:	dc04      	bgt.n	800441e <__swbuf_r+0x42>
 8004414:	4621      	mov	r1, r4
 8004416:	4628      	mov	r0, r5
 8004418:	f000 f948 	bl	80046ac <_fflush_r>
 800441c:	bb30      	cbnz	r0, 800446c <__swbuf_r+0x90>
 800441e:	68a3      	ldr	r3, [r4, #8]
 8004420:	3b01      	subs	r3, #1
 8004422:	60a3      	str	r3, [r4, #8]
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	6022      	str	r2, [r4, #0]
 800442a:	701e      	strb	r6, [r3, #0]
 800442c:	6963      	ldr	r3, [r4, #20]
 800442e:	3001      	adds	r0, #1
 8004430:	4283      	cmp	r3, r0
 8004432:	d004      	beq.n	800443e <__swbuf_r+0x62>
 8004434:	89a3      	ldrh	r3, [r4, #12]
 8004436:	07db      	lsls	r3, r3, #31
 8004438:	d506      	bpl.n	8004448 <__swbuf_r+0x6c>
 800443a:	2e0a      	cmp	r6, #10
 800443c:	d104      	bne.n	8004448 <__swbuf_r+0x6c>
 800443e:	4621      	mov	r1, r4
 8004440:	4628      	mov	r0, r5
 8004442:	f000 f933 	bl	80046ac <_fflush_r>
 8004446:	b988      	cbnz	r0, 800446c <__swbuf_r+0x90>
 8004448:	4638      	mov	r0, r7
 800444a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800444c:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <__swbuf_r+0x9c>)
 800444e:	429c      	cmp	r4, r3
 8004450:	d101      	bne.n	8004456 <__swbuf_r+0x7a>
 8004452:	68ac      	ldr	r4, [r5, #8]
 8004454:	e7cf      	b.n	80043f6 <__swbuf_r+0x1a>
 8004456:	4b09      	ldr	r3, [pc, #36]	; (800447c <__swbuf_r+0xa0>)
 8004458:	429c      	cmp	r4, r3
 800445a:	bf08      	it	eq
 800445c:	68ec      	ldreq	r4, [r5, #12]
 800445e:	e7ca      	b.n	80043f6 <__swbuf_r+0x1a>
 8004460:	4621      	mov	r1, r4
 8004462:	4628      	mov	r0, r5
 8004464:	f000 f81e 	bl	80044a4 <__swsetup_r>
 8004468:	2800      	cmp	r0, #0
 800446a:	d0cb      	beq.n	8004404 <__swbuf_r+0x28>
 800446c:	f04f 37ff 	mov.w	r7, #4294967295
 8004470:	e7ea      	b.n	8004448 <__swbuf_r+0x6c>
 8004472:	bf00      	nop
 8004474:	08005300 	.word	0x08005300
 8004478:	08005320 	.word	0x08005320
 800447c:	080052e0 	.word	0x080052e0

08004480 <_write_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	4d07      	ldr	r5, [pc, #28]	; (80044a0 <_write_r+0x20>)
 8004484:	4604      	mov	r4, r0
 8004486:	4608      	mov	r0, r1
 8004488:	4611      	mov	r1, r2
 800448a:	2200      	movs	r2, #0
 800448c:	602a      	str	r2, [r5, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	f7fc f890 	bl	80005b4 <_write>
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	d102      	bne.n	800449e <_write_r+0x1e>
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	b103      	cbz	r3, 800449e <_write_r+0x1e>
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	bd38      	pop	{r3, r4, r5, pc}
 80044a0:	20000178 	.word	0x20000178

080044a4 <__swsetup_r>:
 80044a4:	4b32      	ldr	r3, [pc, #200]	; (8004570 <__swsetup_r+0xcc>)
 80044a6:	b570      	push	{r4, r5, r6, lr}
 80044a8:	681d      	ldr	r5, [r3, #0]
 80044aa:	4606      	mov	r6, r0
 80044ac:	460c      	mov	r4, r1
 80044ae:	b125      	cbz	r5, 80044ba <__swsetup_r+0x16>
 80044b0:	69ab      	ldr	r3, [r5, #24]
 80044b2:	b913      	cbnz	r3, 80044ba <__swsetup_r+0x16>
 80044b4:	4628      	mov	r0, r5
 80044b6:	f000 f98d 	bl	80047d4 <__sinit>
 80044ba:	4b2e      	ldr	r3, [pc, #184]	; (8004574 <__swsetup_r+0xd0>)
 80044bc:	429c      	cmp	r4, r3
 80044be:	d10f      	bne.n	80044e0 <__swsetup_r+0x3c>
 80044c0:	686c      	ldr	r4, [r5, #4]
 80044c2:	89a3      	ldrh	r3, [r4, #12]
 80044c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044c8:	0719      	lsls	r1, r3, #28
 80044ca:	d42c      	bmi.n	8004526 <__swsetup_r+0x82>
 80044cc:	06dd      	lsls	r5, r3, #27
 80044ce:	d411      	bmi.n	80044f4 <__swsetup_r+0x50>
 80044d0:	2309      	movs	r3, #9
 80044d2:	6033      	str	r3, [r6, #0]
 80044d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80044d8:	81a3      	strh	r3, [r4, #12]
 80044da:	f04f 30ff 	mov.w	r0, #4294967295
 80044de:	e03e      	b.n	800455e <__swsetup_r+0xba>
 80044e0:	4b25      	ldr	r3, [pc, #148]	; (8004578 <__swsetup_r+0xd4>)
 80044e2:	429c      	cmp	r4, r3
 80044e4:	d101      	bne.n	80044ea <__swsetup_r+0x46>
 80044e6:	68ac      	ldr	r4, [r5, #8]
 80044e8:	e7eb      	b.n	80044c2 <__swsetup_r+0x1e>
 80044ea:	4b24      	ldr	r3, [pc, #144]	; (800457c <__swsetup_r+0xd8>)
 80044ec:	429c      	cmp	r4, r3
 80044ee:	bf08      	it	eq
 80044f0:	68ec      	ldreq	r4, [r5, #12]
 80044f2:	e7e6      	b.n	80044c2 <__swsetup_r+0x1e>
 80044f4:	0758      	lsls	r0, r3, #29
 80044f6:	d512      	bpl.n	800451e <__swsetup_r+0x7a>
 80044f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044fa:	b141      	cbz	r1, 800450e <__swsetup_r+0x6a>
 80044fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004500:	4299      	cmp	r1, r3
 8004502:	d002      	beq.n	800450a <__swsetup_r+0x66>
 8004504:	4630      	mov	r0, r6
 8004506:	f000 fa7d 	bl	8004a04 <_free_r>
 800450a:	2300      	movs	r3, #0
 800450c:	6363      	str	r3, [r4, #52]	; 0x34
 800450e:	89a3      	ldrh	r3, [r4, #12]
 8004510:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004514:	81a3      	strh	r3, [r4, #12]
 8004516:	2300      	movs	r3, #0
 8004518:	6063      	str	r3, [r4, #4]
 800451a:	6923      	ldr	r3, [r4, #16]
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	89a3      	ldrh	r3, [r4, #12]
 8004520:	f043 0308 	orr.w	r3, r3, #8
 8004524:	81a3      	strh	r3, [r4, #12]
 8004526:	6923      	ldr	r3, [r4, #16]
 8004528:	b94b      	cbnz	r3, 800453e <__swsetup_r+0x9a>
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004534:	d003      	beq.n	800453e <__swsetup_r+0x9a>
 8004536:	4621      	mov	r1, r4
 8004538:	4630      	mov	r0, r6
 800453a:	f000 fa23 	bl	8004984 <__smakebuf_r>
 800453e:	89a0      	ldrh	r0, [r4, #12]
 8004540:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004544:	f010 0301 	ands.w	r3, r0, #1
 8004548:	d00a      	beq.n	8004560 <__swsetup_r+0xbc>
 800454a:	2300      	movs	r3, #0
 800454c:	60a3      	str	r3, [r4, #8]
 800454e:	6963      	ldr	r3, [r4, #20]
 8004550:	425b      	negs	r3, r3
 8004552:	61a3      	str	r3, [r4, #24]
 8004554:	6923      	ldr	r3, [r4, #16]
 8004556:	b943      	cbnz	r3, 800456a <__swsetup_r+0xc6>
 8004558:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800455c:	d1ba      	bne.n	80044d4 <__swsetup_r+0x30>
 800455e:	bd70      	pop	{r4, r5, r6, pc}
 8004560:	0781      	lsls	r1, r0, #30
 8004562:	bf58      	it	pl
 8004564:	6963      	ldrpl	r3, [r4, #20]
 8004566:	60a3      	str	r3, [r4, #8]
 8004568:	e7f4      	b.n	8004554 <__swsetup_r+0xb0>
 800456a:	2000      	movs	r0, #0
 800456c:	e7f7      	b.n	800455e <__swsetup_r+0xba>
 800456e:	bf00      	nop
 8004570:	2000000c 	.word	0x2000000c
 8004574:	08005300 	.word	0x08005300
 8004578:	08005320 	.word	0x08005320
 800457c:	080052e0 	.word	0x080052e0

08004580 <_close_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4d06      	ldr	r5, [pc, #24]	; (800459c <_close_r+0x1c>)
 8004584:	2300      	movs	r3, #0
 8004586:	4604      	mov	r4, r0
 8004588:	4608      	mov	r0, r1
 800458a:	602b      	str	r3, [r5, #0]
 800458c:	f7fc fac3 	bl	8000b16 <_close>
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	d102      	bne.n	800459a <_close_r+0x1a>
 8004594:	682b      	ldr	r3, [r5, #0]
 8004596:	b103      	cbz	r3, 800459a <_close_r+0x1a>
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	bd38      	pop	{r3, r4, r5, pc}
 800459c:	20000178 	.word	0x20000178

080045a0 <__sflush_r>:
 80045a0:	898a      	ldrh	r2, [r1, #12]
 80045a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a6:	4605      	mov	r5, r0
 80045a8:	0710      	lsls	r0, r2, #28
 80045aa:	460c      	mov	r4, r1
 80045ac:	d458      	bmi.n	8004660 <__sflush_r+0xc0>
 80045ae:	684b      	ldr	r3, [r1, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	dc05      	bgt.n	80045c0 <__sflush_r+0x20>
 80045b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	dc02      	bgt.n	80045c0 <__sflush_r+0x20>
 80045ba:	2000      	movs	r0, #0
 80045bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045c2:	2e00      	cmp	r6, #0
 80045c4:	d0f9      	beq.n	80045ba <__sflush_r+0x1a>
 80045c6:	2300      	movs	r3, #0
 80045c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045cc:	682f      	ldr	r7, [r5, #0]
 80045ce:	602b      	str	r3, [r5, #0]
 80045d0:	d032      	beq.n	8004638 <__sflush_r+0x98>
 80045d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045d4:	89a3      	ldrh	r3, [r4, #12]
 80045d6:	075a      	lsls	r2, r3, #29
 80045d8:	d505      	bpl.n	80045e6 <__sflush_r+0x46>
 80045da:	6863      	ldr	r3, [r4, #4]
 80045dc:	1ac0      	subs	r0, r0, r3
 80045de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045e0:	b10b      	cbz	r3, 80045e6 <__sflush_r+0x46>
 80045e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045e4:	1ac0      	subs	r0, r0, r3
 80045e6:	2300      	movs	r3, #0
 80045e8:	4602      	mov	r2, r0
 80045ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045ec:	6a21      	ldr	r1, [r4, #32]
 80045ee:	4628      	mov	r0, r5
 80045f0:	47b0      	blx	r6
 80045f2:	1c43      	adds	r3, r0, #1
 80045f4:	89a3      	ldrh	r3, [r4, #12]
 80045f6:	d106      	bne.n	8004606 <__sflush_r+0x66>
 80045f8:	6829      	ldr	r1, [r5, #0]
 80045fa:	291d      	cmp	r1, #29
 80045fc:	d82c      	bhi.n	8004658 <__sflush_r+0xb8>
 80045fe:	4a2a      	ldr	r2, [pc, #168]	; (80046a8 <__sflush_r+0x108>)
 8004600:	40ca      	lsrs	r2, r1
 8004602:	07d6      	lsls	r6, r2, #31
 8004604:	d528      	bpl.n	8004658 <__sflush_r+0xb8>
 8004606:	2200      	movs	r2, #0
 8004608:	6062      	str	r2, [r4, #4]
 800460a:	04d9      	lsls	r1, r3, #19
 800460c:	6922      	ldr	r2, [r4, #16]
 800460e:	6022      	str	r2, [r4, #0]
 8004610:	d504      	bpl.n	800461c <__sflush_r+0x7c>
 8004612:	1c42      	adds	r2, r0, #1
 8004614:	d101      	bne.n	800461a <__sflush_r+0x7a>
 8004616:	682b      	ldr	r3, [r5, #0]
 8004618:	b903      	cbnz	r3, 800461c <__sflush_r+0x7c>
 800461a:	6560      	str	r0, [r4, #84]	; 0x54
 800461c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800461e:	602f      	str	r7, [r5, #0]
 8004620:	2900      	cmp	r1, #0
 8004622:	d0ca      	beq.n	80045ba <__sflush_r+0x1a>
 8004624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004628:	4299      	cmp	r1, r3
 800462a:	d002      	beq.n	8004632 <__sflush_r+0x92>
 800462c:	4628      	mov	r0, r5
 800462e:	f000 f9e9 	bl	8004a04 <_free_r>
 8004632:	2000      	movs	r0, #0
 8004634:	6360      	str	r0, [r4, #52]	; 0x34
 8004636:	e7c1      	b.n	80045bc <__sflush_r+0x1c>
 8004638:	6a21      	ldr	r1, [r4, #32]
 800463a:	2301      	movs	r3, #1
 800463c:	4628      	mov	r0, r5
 800463e:	47b0      	blx	r6
 8004640:	1c41      	adds	r1, r0, #1
 8004642:	d1c7      	bne.n	80045d4 <__sflush_r+0x34>
 8004644:	682b      	ldr	r3, [r5, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0c4      	beq.n	80045d4 <__sflush_r+0x34>
 800464a:	2b1d      	cmp	r3, #29
 800464c:	d001      	beq.n	8004652 <__sflush_r+0xb2>
 800464e:	2b16      	cmp	r3, #22
 8004650:	d101      	bne.n	8004656 <__sflush_r+0xb6>
 8004652:	602f      	str	r7, [r5, #0]
 8004654:	e7b1      	b.n	80045ba <__sflush_r+0x1a>
 8004656:	89a3      	ldrh	r3, [r4, #12]
 8004658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800465c:	81a3      	strh	r3, [r4, #12]
 800465e:	e7ad      	b.n	80045bc <__sflush_r+0x1c>
 8004660:	690f      	ldr	r7, [r1, #16]
 8004662:	2f00      	cmp	r7, #0
 8004664:	d0a9      	beq.n	80045ba <__sflush_r+0x1a>
 8004666:	0793      	lsls	r3, r2, #30
 8004668:	680e      	ldr	r6, [r1, #0]
 800466a:	bf08      	it	eq
 800466c:	694b      	ldreq	r3, [r1, #20]
 800466e:	600f      	str	r7, [r1, #0]
 8004670:	bf18      	it	ne
 8004672:	2300      	movne	r3, #0
 8004674:	eba6 0807 	sub.w	r8, r6, r7
 8004678:	608b      	str	r3, [r1, #8]
 800467a:	f1b8 0f00 	cmp.w	r8, #0
 800467e:	dd9c      	ble.n	80045ba <__sflush_r+0x1a>
 8004680:	6a21      	ldr	r1, [r4, #32]
 8004682:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004684:	4643      	mov	r3, r8
 8004686:	463a      	mov	r2, r7
 8004688:	4628      	mov	r0, r5
 800468a:	47b0      	blx	r6
 800468c:	2800      	cmp	r0, #0
 800468e:	dc06      	bgt.n	800469e <__sflush_r+0xfe>
 8004690:	89a3      	ldrh	r3, [r4, #12]
 8004692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004696:	81a3      	strh	r3, [r4, #12]
 8004698:	f04f 30ff 	mov.w	r0, #4294967295
 800469c:	e78e      	b.n	80045bc <__sflush_r+0x1c>
 800469e:	4407      	add	r7, r0
 80046a0:	eba8 0800 	sub.w	r8, r8, r0
 80046a4:	e7e9      	b.n	800467a <__sflush_r+0xda>
 80046a6:	bf00      	nop
 80046a8:	20400001 	.word	0x20400001

080046ac <_fflush_r>:
 80046ac:	b538      	push	{r3, r4, r5, lr}
 80046ae:	690b      	ldr	r3, [r1, #16]
 80046b0:	4605      	mov	r5, r0
 80046b2:	460c      	mov	r4, r1
 80046b4:	b913      	cbnz	r3, 80046bc <_fflush_r+0x10>
 80046b6:	2500      	movs	r5, #0
 80046b8:	4628      	mov	r0, r5
 80046ba:	bd38      	pop	{r3, r4, r5, pc}
 80046bc:	b118      	cbz	r0, 80046c6 <_fflush_r+0x1a>
 80046be:	6983      	ldr	r3, [r0, #24]
 80046c0:	b90b      	cbnz	r3, 80046c6 <_fflush_r+0x1a>
 80046c2:	f000 f887 	bl	80047d4 <__sinit>
 80046c6:	4b14      	ldr	r3, [pc, #80]	; (8004718 <_fflush_r+0x6c>)
 80046c8:	429c      	cmp	r4, r3
 80046ca:	d11b      	bne.n	8004704 <_fflush_r+0x58>
 80046cc:	686c      	ldr	r4, [r5, #4]
 80046ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0ef      	beq.n	80046b6 <_fflush_r+0xa>
 80046d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046d8:	07d0      	lsls	r0, r2, #31
 80046da:	d404      	bmi.n	80046e6 <_fflush_r+0x3a>
 80046dc:	0599      	lsls	r1, r3, #22
 80046de:	d402      	bmi.n	80046e6 <_fflush_r+0x3a>
 80046e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046e2:	f000 f915 	bl	8004910 <__retarget_lock_acquire_recursive>
 80046e6:	4628      	mov	r0, r5
 80046e8:	4621      	mov	r1, r4
 80046ea:	f7ff ff59 	bl	80045a0 <__sflush_r>
 80046ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046f0:	07da      	lsls	r2, r3, #31
 80046f2:	4605      	mov	r5, r0
 80046f4:	d4e0      	bmi.n	80046b8 <_fflush_r+0xc>
 80046f6:	89a3      	ldrh	r3, [r4, #12]
 80046f8:	059b      	lsls	r3, r3, #22
 80046fa:	d4dd      	bmi.n	80046b8 <_fflush_r+0xc>
 80046fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046fe:	f000 f908 	bl	8004912 <__retarget_lock_release_recursive>
 8004702:	e7d9      	b.n	80046b8 <_fflush_r+0xc>
 8004704:	4b05      	ldr	r3, [pc, #20]	; (800471c <_fflush_r+0x70>)
 8004706:	429c      	cmp	r4, r3
 8004708:	d101      	bne.n	800470e <_fflush_r+0x62>
 800470a:	68ac      	ldr	r4, [r5, #8]
 800470c:	e7df      	b.n	80046ce <_fflush_r+0x22>
 800470e:	4b04      	ldr	r3, [pc, #16]	; (8004720 <_fflush_r+0x74>)
 8004710:	429c      	cmp	r4, r3
 8004712:	bf08      	it	eq
 8004714:	68ec      	ldreq	r4, [r5, #12]
 8004716:	e7da      	b.n	80046ce <_fflush_r+0x22>
 8004718:	08005300 	.word	0x08005300
 800471c:	08005320 	.word	0x08005320
 8004720:	080052e0 	.word	0x080052e0

08004724 <std>:
 8004724:	2300      	movs	r3, #0
 8004726:	b510      	push	{r4, lr}
 8004728:	4604      	mov	r4, r0
 800472a:	e9c0 3300 	strd	r3, r3, [r0]
 800472e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004732:	6083      	str	r3, [r0, #8]
 8004734:	8181      	strh	r1, [r0, #12]
 8004736:	6643      	str	r3, [r0, #100]	; 0x64
 8004738:	81c2      	strh	r2, [r0, #14]
 800473a:	6183      	str	r3, [r0, #24]
 800473c:	4619      	mov	r1, r3
 800473e:	2208      	movs	r2, #8
 8004740:	305c      	adds	r0, #92	; 0x5c
 8004742:	f7ff fde7 	bl	8004314 <memset>
 8004746:	4b05      	ldr	r3, [pc, #20]	; (800475c <std+0x38>)
 8004748:	6263      	str	r3, [r4, #36]	; 0x24
 800474a:	4b05      	ldr	r3, [pc, #20]	; (8004760 <std+0x3c>)
 800474c:	62a3      	str	r3, [r4, #40]	; 0x28
 800474e:	4b05      	ldr	r3, [pc, #20]	; (8004764 <std+0x40>)
 8004750:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004752:	4b05      	ldr	r3, [pc, #20]	; (8004768 <std+0x44>)
 8004754:	6224      	str	r4, [r4, #32]
 8004756:	6323      	str	r3, [r4, #48]	; 0x30
 8004758:	bd10      	pop	{r4, pc}
 800475a:	bf00      	nop
 800475c:	08004355 	.word	0x08004355
 8004760:	08004377 	.word	0x08004377
 8004764:	080043af 	.word	0x080043af
 8004768:	080043d3 	.word	0x080043d3

0800476c <_cleanup_r>:
 800476c:	4901      	ldr	r1, [pc, #4]	; (8004774 <_cleanup_r+0x8>)
 800476e:	f000 b8af 	b.w	80048d0 <_fwalk_reent>
 8004772:	bf00      	nop
 8004774:	080046ad 	.word	0x080046ad

08004778 <__sfmoreglue>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	2268      	movs	r2, #104	; 0x68
 800477c:	1e4d      	subs	r5, r1, #1
 800477e:	4355      	muls	r5, r2
 8004780:	460e      	mov	r6, r1
 8004782:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004786:	f000 f9a9 	bl	8004adc <_malloc_r>
 800478a:	4604      	mov	r4, r0
 800478c:	b140      	cbz	r0, 80047a0 <__sfmoreglue+0x28>
 800478e:	2100      	movs	r1, #0
 8004790:	e9c0 1600 	strd	r1, r6, [r0]
 8004794:	300c      	adds	r0, #12
 8004796:	60a0      	str	r0, [r4, #8]
 8004798:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800479c:	f7ff fdba 	bl	8004314 <memset>
 80047a0:	4620      	mov	r0, r4
 80047a2:	bd70      	pop	{r4, r5, r6, pc}

080047a4 <__sfp_lock_acquire>:
 80047a4:	4801      	ldr	r0, [pc, #4]	; (80047ac <__sfp_lock_acquire+0x8>)
 80047a6:	f000 b8b3 	b.w	8004910 <__retarget_lock_acquire_recursive>
 80047aa:	bf00      	nop
 80047ac:	2000016d 	.word	0x2000016d

080047b0 <__sfp_lock_release>:
 80047b0:	4801      	ldr	r0, [pc, #4]	; (80047b8 <__sfp_lock_release+0x8>)
 80047b2:	f000 b8ae 	b.w	8004912 <__retarget_lock_release_recursive>
 80047b6:	bf00      	nop
 80047b8:	2000016d 	.word	0x2000016d

080047bc <__sinit_lock_acquire>:
 80047bc:	4801      	ldr	r0, [pc, #4]	; (80047c4 <__sinit_lock_acquire+0x8>)
 80047be:	f000 b8a7 	b.w	8004910 <__retarget_lock_acquire_recursive>
 80047c2:	bf00      	nop
 80047c4:	2000016e 	.word	0x2000016e

080047c8 <__sinit_lock_release>:
 80047c8:	4801      	ldr	r0, [pc, #4]	; (80047d0 <__sinit_lock_release+0x8>)
 80047ca:	f000 b8a2 	b.w	8004912 <__retarget_lock_release_recursive>
 80047ce:	bf00      	nop
 80047d0:	2000016e 	.word	0x2000016e

080047d4 <__sinit>:
 80047d4:	b510      	push	{r4, lr}
 80047d6:	4604      	mov	r4, r0
 80047d8:	f7ff fff0 	bl	80047bc <__sinit_lock_acquire>
 80047dc:	69a3      	ldr	r3, [r4, #24]
 80047de:	b11b      	cbz	r3, 80047e8 <__sinit+0x14>
 80047e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047e4:	f7ff bff0 	b.w	80047c8 <__sinit_lock_release>
 80047e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80047ec:	6523      	str	r3, [r4, #80]	; 0x50
 80047ee:	4b13      	ldr	r3, [pc, #76]	; (800483c <__sinit+0x68>)
 80047f0:	4a13      	ldr	r2, [pc, #76]	; (8004840 <__sinit+0x6c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80047f6:	42a3      	cmp	r3, r4
 80047f8:	bf04      	itt	eq
 80047fa:	2301      	moveq	r3, #1
 80047fc:	61a3      	streq	r3, [r4, #24]
 80047fe:	4620      	mov	r0, r4
 8004800:	f000 f820 	bl	8004844 <__sfp>
 8004804:	6060      	str	r0, [r4, #4]
 8004806:	4620      	mov	r0, r4
 8004808:	f000 f81c 	bl	8004844 <__sfp>
 800480c:	60a0      	str	r0, [r4, #8]
 800480e:	4620      	mov	r0, r4
 8004810:	f000 f818 	bl	8004844 <__sfp>
 8004814:	2200      	movs	r2, #0
 8004816:	60e0      	str	r0, [r4, #12]
 8004818:	2104      	movs	r1, #4
 800481a:	6860      	ldr	r0, [r4, #4]
 800481c:	f7ff ff82 	bl	8004724 <std>
 8004820:	68a0      	ldr	r0, [r4, #8]
 8004822:	2201      	movs	r2, #1
 8004824:	2109      	movs	r1, #9
 8004826:	f7ff ff7d 	bl	8004724 <std>
 800482a:	68e0      	ldr	r0, [r4, #12]
 800482c:	2202      	movs	r2, #2
 800482e:	2112      	movs	r1, #18
 8004830:	f7ff ff78 	bl	8004724 <std>
 8004834:	2301      	movs	r3, #1
 8004836:	61a3      	str	r3, [r4, #24]
 8004838:	e7d2      	b.n	80047e0 <__sinit+0xc>
 800483a:	bf00      	nop
 800483c:	080052dc 	.word	0x080052dc
 8004840:	0800476d 	.word	0x0800476d

08004844 <__sfp>:
 8004844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004846:	4607      	mov	r7, r0
 8004848:	f7ff ffac 	bl	80047a4 <__sfp_lock_acquire>
 800484c:	4b1e      	ldr	r3, [pc, #120]	; (80048c8 <__sfp+0x84>)
 800484e:	681e      	ldr	r6, [r3, #0]
 8004850:	69b3      	ldr	r3, [r6, #24]
 8004852:	b913      	cbnz	r3, 800485a <__sfp+0x16>
 8004854:	4630      	mov	r0, r6
 8004856:	f7ff ffbd 	bl	80047d4 <__sinit>
 800485a:	3648      	adds	r6, #72	; 0x48
 800485c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004860:	3b01      	subs	r3, #1
 8004862:	d503      	bpl.n	800486c <__sfp+0x28>
 8004864:	6833      	ldr	r3, [r6, #0]
 8004866:	b30b      	cbz	r3, 80048ac <__sfp+0x68>
 8004868:	6836      	ldr	r6, [r6, #0]
 800486a:	e7f7      	b.n	800485c <__sfp+0x18>
 800486c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004870:	b9d5      	cbnz	r5, 80048a8 <__sfp+0x64>
 8004872:	4b16      	ldr	r3, [pc, #88]	; (80048cc <__sfp+0x88>)
 8004874:	60e3      	str	r3, [r4, #12]
 8004876:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800487a:	6665      	str	r5, [r4, #100]	; 0x64
 800487c:	f000 f847 	bl	800490e <__retarget_lock_init_recursive>
 8004880:	f7ff ff96 	bl	80047b0 <__sfp_lock_release>
 8004884:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004888:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800488c:	6025      	str	r5, [r4, #0]
 800488e:	61a5      	str	r5, [r4, #24]
 8004890:	2208      	movs	r2, #8
 8004892:	4629      	mov	r1, r5
 8004894:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004898:	f7ff fd3c 	bl	8004314 <memset>
 800489c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048a4:	4620      	mov	r0, r4
 80048a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048a8:	3468      	adds	r4, #104	; 0x68
 80048aa:	e7d9      	b.n	8004860 <__sfp+0x1c>
 80048ac:	2104      	movs	r1, #4
 80048ae:	4638      	mov	r0, r7
 80048b0:	f7ff ff62 	bl	8004778 <__sfmoreglue>
 80048b4:	4604      	mov	r4, r0
 80048b6:	6030      	str	r0, [r6, #0]
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d1d5      	bne.n	8004868 <__sfp+0x24>
 80048bc:	f7ff ff78 	bl	80047b0 <__sfp_lock_release>
 80048c0:	230c      	movs	r3, #12
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	e7ee      	b.n	80048a4 <__sfp+0x60>
 80048c6:	bf00      	nop
 80048c8:	080052dc 	.word	0x080052dc
 80048cc:	ffff0001 	.word	0xffff0001

080048d0 <_fwalk_reent>:
 80048d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048d4:	4606      	mov	r6, r0
 80048d6:	4688      	mov	r8, r1
 80048d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048dc:	2700      	movs	r7, #0
 80048de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048e2:	f1b9 0901 	subs.w	r9, r9, #1
 80048e6:	d505      	bpl.n	80048f4 <_fwalk_reent+0x24>
 80048e8:	6824      	ldr	r4, [r4, #0]
 80048ea:	2c00      	cmp	r4, #0
 80048ec:	d1f7      	bne.n	80048de <_fwalk_reent+0xe>
 80048ee:	4638      	mov	r0, r7
 80048f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048f4:	89ab      	ldrh	r3, [r5, #12]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d907      	bls.n	800490a <_fwalk_reent+0x3a>
 80048fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048fe:	3301      	adds	r3, #1
 8004900:	d003      	beq.n	800490a <_fwalk_reent+0x3a>
 8004902:	4629      	mov	r1, r5
 8004904:	4630      	mov	r0, r6
 8004906:	47c0      	blx	r8
 8004908:	4307      	orrs	r7, r0
 800490a:	3568      	adds	r5, #104	; 0x68
 800490c:	e7e9      	b.n	80048e2 <_fwalk_reent+0x12>

0800490e <__retarget_lock_init_recursive>:
 800490e:	4770      	bx	lr

08004910 <__retarget_lock_acquire_recursive>:
 8004910:	4770      	bx	lr

08004912 <__retarget_lock_release_recursive>:
 8004912:	4770      	bx	lr

08004914 <_lseek_r>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	4d07      	ldr	r5, [pc, #28]	; (8004934 <_lseek_r+0x20>)
 8004918:	4604      	mov	r4, r0
 800491a:	4608      	mov	r0, r1
 800491c:	4611      	mov	r1, r2
 800491e:	2200      	movs	r2, #0
 8004920:	602a      	str	r2, [r5, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	f7fc f91e 	bl	8000b64 <_lseek>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	d102      	bne.n	8004932 <_lseek_r+0x1e>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	b103      	cbz	r3, 8004932 <_lseek_r+0x1e>
 8004930:	6023      	str	r3, [r4, #0]
 8004932:	bd38      	pop	{r3, r4, r5, pc}
 8004934:	20000178 	.word	0x20000178

08004938 <__swhatbuf_r>:
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	460e      	mov	r6, r1
 800493c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004940:	2900      	cmp	r1, #0
 8004942:	b096      	sub	sp, #88	; 0x58
 8004944:	4614      	mov	r4, r2
 8004946:	461d      	mov	r5, r3
 8004948:	da08      	bge.n	800495c <__swhatbuf_r+0x24>
 800494a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	602a      	str	r2, [r5, #0]
 8004952:	061a      	lsls	r2, r3, #24
 8004954:	d410      	bmi.n	8004978 <__swhatbuf_r+0x40>
 8004956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800495a:	e00e      	b.n	800497a <__swhatbuf_r+0x42>
 800495c:	466a      	mov	r2, sp
 800495e:	f000 fc41 	bl	80051e4 <_fstat_r>
 8004962:	2800      	cmp	r0, #0
 8004964:	dbf1      	blt.n	800494a <__swhatbuf_r+0x12>
 8004966:	9a01      	ldr	r2, [sp, #4]
 8004968:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800496c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004970:	425a      	negs	r2, r3
 8004972:	415a      	adcs	r2, r3
 8004974:	602a      	str	r2, [r5, #0]
 8004976:	e7ee      	b.n	8004956 <__swhatbuf_r+0x1e>
 8004978:	2340      	movs	r3, #64	; 0x40
 800497a:	2000      	movs	r0, #0
 800497c:	6023      	str	r3, [r4, #0]
 800497e:	b016      	add	sp, #88	; 0x58
 8004980:	bd70      	pop	{r4, r5, r6, pc}
	...

08004984 <__smakebuf_r>:
 8004984:	898b      	ldrh	r3, [r1, #12]
 8004986:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004988:	079d      	lsls	r5, r3, #30
 800498a:	4606      	mov	r6, r0
 800498c:	460c      	mov	r4, r1
 800498e:	d507      	bpl.n	80049a0 <__smakebuf_r+0x1c>
 8004990:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	6123      	str	r3, [r4, #16]
 8004998:	2301      	movs	r3, #1
 800499a:	6163      	str	r3, [r4, #20]
 800499c:	b002      	add	sp, #8
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	ab01      	add	r3, sp, #4
 80049a2:	466a      	mov	r2, sp
 80049a4:	f7ff ffc8 	bl	8004938 <__swhatbuf_r>
 80049a8:	9900      	ldr	r1, [sp, #0]
 80049aa:	4605      	mov	r5, r0
 80049ac:	4630      	mov	r0, r6
 80049ae:	f000 f895 	bl	8004adc <_malloc_r>
 80049b2:	b948      	cbnz	r0, 80049c8 <__smakebuf_r+0x44>
 80049b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049b8:	059a      	lsls	r2, r3, #22
 80049ba:	d4ef      	bmi.n	800499c <__smakebuf_r+0x18>
 80049bc:	f023 0303 	bic.w	r3, r3, #3
 80049c0:	f043 0302 	orr.w	r3, r3, #2
 80049c4:	81a3      	strh	r3, [r4, #12]
 80049c6:	e7e3      	b.n	8004990 <__smakebuf_r+0xc>
 80049c8:	4b0d      	ldr	r3, [pc, #52]	; (8004a00 <__smakebuf_r+0x7c>)
 80049ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	6020      	str	r0, [r4, #0]
 80049d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d4:	81a3      	strh	r3, [r4, #12]
 80049d6:	9b00      	ldr	r3, [sp, #0]
 80049d8:	6163      	str	r3, [r4, #20]
 80049da:	9b01      	ldr	r3, [sp, #4]
 80049dc:	6120      	str	r0, [r4, #16]
 80049de:	b15b      	cbz	r3, 80049f8 <__smakebuf_r+0x74>
 80049e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049e4:	4630      	mov	r0, r6
 80049e6:	f000 fc0f 	bl	8005208 <_isatty_r>
 80049ea:	b128      	cbz	r0, 80049f8 <__smakebuf_r+0x74>
 80049ec:	89a3      	ldrh	r3, [r4, #12]
 80049ee:	f023 0303 	bic.w	r3, r3, #3
 80049f2:	f043 0301 	orr.w	r3, r3, #1
 80049f6:	81a3      	strh	r3, [r4, #12]
 80049f8:	89a0      	ldrh	r0, [r4, #12]
 80049fa:	4305      	orrs	r5, r0
 80049fc:	81a5      	strh	r5, [r4, #12]
 80049fe:	e7cd      	b.n	800499c <__smakebuf_r+0x18>
 8004a00:	0800476d 	.word	0x0800476d

08004a04 <_free_r>:
 8004a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a06:	2900      	cmp	r1, #0
 8004a08:	d044      	beq.n	8004a94 <_free_r+0x90>
 8004a0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a0e:	9001      	str	r0, [sp, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f1a1 0404 	sub.w	r4, r1, #4
 8004a16:	bfb8      	it	lt
 8004a18:	18e4      	addlt	r4, r4, r3
 8004a1a:	f000 fc05 	bl	8005228 <__malloc_lock>
 8004a1e:	4a1e      	ldr	r2, [pc, #120]	; (8004a98 <_free_r+0x94>)
 8004a20:	9801      	ldr	r0, [sp, #4]
 8004a22:	6813      	ldr	r3, [r2, #0]
 8004a24:	b933      	cbnz	r3, 8004a34 <_free_r+0x30>
 8004a26:	6063      	str	r3, [r4, #4]
 8004a28:	6014      	str	r4, [r2, #0]
 8004a2a:	b003      	add	sp, #12
 8004a2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a30:	f000 bc00 	b.w	8005234 <__malloc_unlock>
 8004a34:	42a3      	cmp	r3, r4
 8004a36:	d908      	bls.n	8004a4a <_free_r+0x46>
 8004a38:	6825      	ldr	r5, [r4, #0]
 8004a3a:	1961      	adds	r1, r4, r5
 8004a3c:	428b      	cmp	r3, r1
 8004a3e:	bf01      	itttt	eq
 8004a40:	6819      	ldreq	r1, [r3, #0]
 8004a42:	685b      	ldreq	r3, [r3, #4]
 8004a44:	1949      	addeq	r1, r1, r5
 8004a46:	6021      	streq	r1, [r4, #0]
 8004a48:	e7ed      	b.n	8004a26 <_free_r+0x22>
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	b10b      	cbz	r3, 8004a54 <_free_r+0x50>
 8004a50:	42a3      	cmp	r3, r4
 8004a52:	d9fa      	bls.n	8004a4a <_free_r+0x46>
 8004a54:	6811      	ldr	r1, [r2, #0]
 8004a56:	1855      	adds	r5, r2, r1
 8004a58:	42a5      	cmp	r5, r4
 8004a5a:	d10b      	bne.n	8004a74 <_free_r+0x70>
 8004a5c:	6824      	ldr	r4, [r4, #0]
 8004a5e:	4421      	add	r1, r4
 8004a60:	1854      	adds	r4, r2, r1
 8004a62:	42a3      	cmp	r3, r4
 8004a64:	6011      	str	r1, [r2, #0]
 8004a66:	d1e0      	bne.n	8004a2a <_free_r+0x26>
 8004a68:	681c      	ldr	r4, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	6053      	str	r3, [r2, #4]
 8004a6e:	4421      	add	r1, r4
 8004a70:	6011      	str	r1, [r2, #0]
 8004a72:	e7da      	b.n	8004a2a <_free_r+0x26>
 8004a74:	d902      	bls.n	8004a7c <_free_r+0x78>
 8004a76:	230c      	movs	r3, #12
 8004a78:	6003      	str	r3, [r0, #0]
 8004a7a:	e7d6      	b.n	8004a2a <_free_r+0x26>
 8004a7c:	6825      	ldr	r5, [r4, #0]
 8004a7e:	1961      	adds	r1, r4, r5
 8004a80:	428b      	cmp	r3, r1
 8004a82:	bf04      	itt	eq
 8004a84:	6819      	ldreq	r1, [r3, #0]
 8004a86:	685b      	ldreq	r3, [r3, #4]
 8004a88:	6063      	str	r3, [r4, #4]
 8004a8a:	bf04      	itt	eq
 8004a8c:	1949      	addeq	r1, r1, r5
 8004a8e:	6021      	streq	r1, [r4, #0]
 8004a90:	6054      	str	r4, [r2, #4]
 8004a92:	e7ca      	b.n	8004a2a <_free_r+0x26>
 8004a94:	b003      	add	sp, #12
 8004a96:	bd30      	pop	{r4, r5, pc}
 8004a98:	20000170 	.word	0x20000170

08004a9c <sbrk_aligned>:
 8004a9c:	b570      	push	{r4, r5, r6, lr}
 8004a9e:	4e0e      	ldr	r6, [pc, #56]	; (8004ad8 <sbrk_aligned+0x3c>)
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	6831      	ldr	r1, [r6, #0]
 8004aa4:	4605      	mov	r5, r0
 8004aa6:	b911      	cbnz	r1, 8004aae <sbrk_aligned+0x12>
 8004aa8:	f000 fb8c 	bl	80051c4 <_sbrk_r>
 8004aac:	6030      	str	r0, [r6, #0]
 8004aae:	4621      	mov	r1, r4
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	f000 fb87 	bl	80051c4 <_sbrk_r>
 8004ab6:	1c43      	adds	r3, r0, #1
 8004ab8:	d00a      	beq.n	8004ad0 <sbrk_aligned+0x34>
 8004aba:	1cc4      	adds	r4, r0, #3
 8004abc:	f024 0403 	bic.w	r4, r4, #3
 8004ac0:	42a0      	cmp	r0, r4
 8004ac2:	d007      	beq.n	8004ad4 <sbrk_aligned+0x38>
 8004ac4:	1a21      	subs	r1, r4, r0
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f000 fb7c 	bl	80051c4 <_sbrk_r>
 8004acc:	3001      	adds	r0, #1
 8004ace:	d101      	bne.n	8004ad4 <sbrk_aligned+0x38>
 8004ad0:	f04f 34ff 	mov.w	r4, #4294967295
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}
 8004ad8:	20000174 	.word	0x20000174

08004adc <_malloc_r>:
 8004adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae0:	1ccd      	adds	r5, r1, #3
 8004ae2:	f025 0503 	bic.w	r5, r5, #3
 8004ae6:	3508      	adds	r5, #8
 8004ae8:	2d0c      	cmp	r5, #12
 8004aea:	bf38      	it	cc
 8004aec:	250c      	movcc	r5, #12
 8004aee:	2d00      	cmp	r5, #0
 8004af0:	4607      	mov	r7, r0
 8004af2:	db01      	blt.n	8004af8 <_malloc_r+0x1c>
 8004af4:	42a9      	cmp	r1, r5
 8004af6:	d905      	bls.n	8004b04 <_malloc_r+0x28>
 8004af8:	230c      	movs	r3, #12
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	2600      	movs	r6, #0
 8004afe:	4630      	mov	r0, r6
 8004b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b04:	4e2e      	ldr	r6, [pc, #184]	; (8004bc0 <_malloc_r+0xe4>)
 8004b06:	f000 fb8f 	bl	8005228 <__malloc_lock>
 8004b0a:	6833      	ldr	r3, [r6, #0]
 8004b0c:	461c      	mov	r4, r3
 8004b0e:	bb34      	cbnz	r4, 8004b5e <_malloc_r+0x82>
 8004b10:	4629      	mov	r1, r5
 8004b12:	4638      	mov	r0, r7
 8004b14:	f7ff ffc2 	bl	8004a9c <sbrk_aligned>
 8004b18:	1c43      	adds	r3, r0, #1
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	d14d      	bne.n	8004bba <_malloc_r+0xde>
 8004b1e:	6834      	ldr	r4, [r6, #0]
 8004b20:	4626      	mov	r6, r4
 8004b22:	2e00      	cmp	r6, #0
 8004b24:	d140      	bne.n	8004ba8 <_malloc_r+0xcc>
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	4631      	mov	r1, r6
 8004b2a:	4638      	mov	r0, r7
 8004b2c:	eb04 0803 	add.w	r8, r4, r3
 8004b30:	f000 fb48 	bl	80051c4 <_sbrk_r>
 8004b34:	4580      	cmp	r8, r0
 8004b36:	d13a      	bne.n	8004bae <_malloc_r+0xd2>
 8004b38:	6821      	ldr	r1, [r4, #0]
 8004b3a:	3503      	adds	r5, #3
 8004b3c:	1a6d      	subs	r5, r5, r1
 8004b3e:	f025 0503 	bic.w	r5, r5, #3
 8004b42:	3508      	adds	r5, #8
 8004b44:	2d0c      	cmp	r5, #12
 8004b46:	bf38      	it	cc
 8004b48:	250c      	movcc	r5, #12
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	4638      	mov	r0, r7
 8004b4e:	f7ff ffa5 	bl	8004a9c <sbrk_aligned>
 8004b52:	3001      	adds	r0, #1
 8004b54:	d02b      	beq.n	8004bae <_malloc_r+0xd2>
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	442b      	add	r3, r5
 8004b5a:	6023      	str	r3, [r4, #0]
 8004b5c:	e00e      	b.n	8004b7c <_malloc_r+0xa0>
 8004b5e:	6822      	ldr	r2, [r4, #0]
 8004b60:	1b52      	subs	r2, r2, r5
 8004b62:	d41e      	bmi.n	8004ba2 <_malloc_r+0xc6>
 8004b64:	2a0b      	cmp	r2, #11
 8004b66:	d916      	bls.n	8004b96 <_malloc_r+0xba>
 8004b68:	1961      	adds	r1, r4, r5
 8004b6a:	42a3      	cmp	r3, r4
 8004b6c:	6025      	str	r5, [r4, #0]
 8004b6e:	bf18      	it	ne
 8004b70:	6059      	strne	r1, [r3, #4]
 8004b72:	6863      	ldr	r3, [r4, #4]
 8004b74:	bf08      	it	eq
 8004b76:	6031      	streq	r1, [r6, #0]
 8004b78:	5162      	str	r2, [r4, r5]
 8004b7a:	604b      	str	r3, [r1, #4]
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	f104 060b 	add.w	r6, r4, #11
 8004b82:	f000 fb57 	bl	8005234 <__malloc_unlock>
 8004b86:	f026 0607 	bic.w	r6, r6, #7
 8004b8a:	1d23      	adds	r3, r4, #4
 8004b8c:	1af2      	subs	r2, r6, r3
 8004b8e:	d0b6      	beq.n	8004afe <_malloc_r+0x22>
 8004b90:	1b9b      	subs	r3, r3, r6
 8004b92:	50a3      	str	r3, [r4, r2]
 8004b94:	e7b3      	b.n	8004afe <_malloc_r+0x22>
 8004b96:	6862      	ldr	r2, [r4, #4]
 8004b98:	42a3      	cmp	r3, r4
 8004b9a:	bf0c      	ite	eq
 8004b9c:	6032      	streq	r2, [r6, #0]
 8004b9e:	605a      	strne	r2, [r3, #4]
 8004ba0:	e7ec      	b.n	8004b7c <_malloc_r+0xa0>
 8004ba2:	4623      	mov	r3, r4
 8004ba4:	6864      	ldr	r4, [r4, #4]
 8004ba6:	e7b2      	b.n	8004b0e <_malloc_r+0x32>
 8004ba8:	4634      	mov	r4, r6
 8004baa:	6876      	ldr	r6, [r6, #4]
 8004bac:	e7b9      	b.n	8004b22 <_malloc_r+0x46>
 8004bae:	230c      	movs	r3, #12
 8004bb0:	603b      	str	r3, [r7, #0]
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	f000 fb3e 	bl	8005234 <__malloc_unlock>
 8004bb8:	e7a1      	b.n	8004afe <_malloc_r+0x22>
 8004bba:	6025      	str	r5, [r4, #0]
 8004bbc:	e7de      	b.n	8004b7c <_malloc_r+0xa0>
 8004bbe:	bf00      	nop
 8004bc0:	20000170 	.word	0x20000170

08004bc4 <__sfputc_r>:
 8004bc4:	6893      	ldr	r3, [r2, #8]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	b410      	push	{r4}
 8004bcc:	6093      	str	r3, [r2, #8]
 8004bce:	da08      	bge.n	8004be2 <__sfputc_r+0x1e>
 8004bd0:	6994      	ldr	r4, [r2, #24]
 8004bd2:	42a3      	cmp	r3, r4
 8004bd4:	db01      	blt.n	8004bda <__sfputc_r+0x16>
 8004bd6:	290a      	cmp	r1, #10
 8004bd8:	d103      	bne.n	8004be2 <__sfputc_r+0x1e>
 8004bda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bde:	f7ff bbfd 	b.w	80043dc <__swbuf_r>
 8004be2:	6813      	ldr	r3, [r2, #0]
 8004be4:	1c58      	adds	r0, r3, #1
 8004be6:	6010      	str	r0, [r2, #0]
 8004be8:	7019      	strb	r1, [r3, #0]
 8004bea:	4608      	mov	r0, r1
 8004bec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <__sfputs_r>:
 8004bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf4:	4606      	mov	r6, r0
 8004bf6:	460f      	mov	r7, r1
 8004bf8:	4614      	mov	r4, r2
 8004bfa:	18d5      	adds	r5, r2, r3
 8004bfc:	42ac      	cmp	r4, r5
 8004bfe:	d101      	bne.n	8004c04 <__sfputs_r+0x12>
 8004c00:	2000      	movs	r0, #0
 8004c02:	e007      	b.n	8004c14 <__sfputs_r+0x22>
 8004c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c08:	463a      	mov	r2, r7
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	f7ff ffda 	bl	8004bc4 <__sfputc_r>
 8004c10:	1c43      	adds	r3, r0, #1
 8004c12:	d1f3      	bne.n	8004bfc <__sfputs_r+0xa>
 8004c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c18 <_vfiprintf_r>:
 8004c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1c:	460d      	mov	r5, r1
 8004c1e:	b09d      	sub	sp, #116	; 0x74
 8004c20:	4614      	mov	r4, r2
 8004c22:	4698      	mov	r8, r3
 8004c24:	4606      	mov	r6, r0
 8004c26:	b118      	cbz	r0, 8004c30 <_vfiprintf_r+0x18>
 8004c28:	6983      	ldr	r3, [r0, #24]
 8004c2a:	b90b      	cbnz	r3, 8004c30 <_vfiprintf_r+0x18>
 8004c2c:	f7ff fdd2 	bl	80047d4 <__sinit>
 8004c30:	4b89      	ldr	r3, [pc, #548]	; (8004e58 <_vfiprintf_r+0x240>)
 8004c32:	429d      	cmp	r5, r3
 8004c34:	d11b      	bne.n	8004c6e <_vfiprintf_r+0x56>
 8004c36:	6875      	ldr	r5, [r6, #4]
 8004c38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c3a:	07d9      	lsls	r1, r3, #31
 8004c3c:	d405      	bmi.n	8004c4a <_vfiprintf_r+0x32>
 8004c3e:	89ab      	ldrh	r3, [r5, #12]
 8004c40:	059a      	lsls	r2, r3, #22
 8004c42:	d402      	bmi.n	8004c4a <_vfiprintf_r+0x32>
 8004c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c46:	f7ff fe63 	bl	8004910 <__retarget_lock_acquire_recursive>
 8004c4a:	89ab      	ldrh	r3, [r5, #12]
 8004c4c:	071b      	lsls	r3, r3, #28
 8004c4e:	d501      	bpl.n	8004c54 <_vfiprintf_r+0x3c>
 8004c50:	692b      	ldr	r3, [r5, #16]
 8004c52:	b9eb      	cbnz	r3, 8004c90 <_vfiprintf_r+0x78>
 8004c54:	4629      	mov	r1, r5
 8004c56:	4630      	mov	r0, r6
 8004c58:	f7ff fc24 	bl	80044a4 <__swsetup_r>
 8004c5c:	b1c0      	cbz	r0, 8004c90 <_vfiprintf_r+0x78>
 8004c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c60:	07dc      	lsls	r4, r3, #31
 8004c62:	d50e      	bpl.n	8004c82 <_vfiprintf_r+0x6a>
 8004c64:	f04f 30ff 	mov.w	r0, #4294967295
 8004c68:	b01d      	add	sp, #116	; 0x74
 8004c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c6e:	4b7b      	ldr	r3, [pc, #492]	; (8004e5c <_vfiprintf_r+0x244>)
 8004c70:	429d      	cmp	r5, r3
 8004c72:	d101      	bne.n	8004c78 <_vfiprintf_r+0x60>
 8004c74:	68b5      	ldr	r5, [r6, #8]
 8004c76:	e7df      	b.n	8004c38 <_vfiprintf_r+0x20>
 8004c78:	4b79      	ldr	r3, [pc, #484]	; (8004e60 <_vfiprintf_r+0x248>)
 8004c7a:	429d      	cmp	r5, r3
 8004c7c:	bf08      	it	eq
 8004c7e:	68f5      	ldreq	r5, [r6, #12]
 8004c80:	e7da      	b.n	8004c38 <_vfiprintf_r+0x20>
 8004c82:	89ab      	ldrh	r3, [r5, #12]
 8004c84:	0598      	lsls	r0, r3, #22
 8004c86:	d4ed      	bmi.n	8004c64 <_vfiprintf_r+0x4c>
 8004c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c8a:	f7ff fe42 	bl	8004912 <__retarget_lock_release_recursive>
 8004c8e:	e7e9      	b.n	8004c64 <_vfiprintf_r+0x4c>
 8004c90:	2300      	movs	r3, #0
 8004c92:	9309      	str	r3, [sp, #36]	; 0x24
 8004c94:	2320      	movs	r3, #32
 8004c96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c9e:	2330      	movs	r3, #48	; 0x30
 8004ca0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004e64 <_vfiprintf_r+0x24c>
 8004ca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ca8:	f04f 0901 	mov.w	r9, #1
 8004cac:	4623      	mov	r3, r4
 8004cae:	469a      	mov	sl, r3
 8004cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cb4:	b10a      	cbz	r2, 8004cba <_vfiprintf_r+0xa2>
 8004cb6:	2a25      	cmp	r2, #37	; 0x25
 8004cb8:	d1f9      	bne.n	8004cae <_vfiprintf_r+0x96>
 8004cba:	ebba 0b04 	subs.w	fp, sl, r4
 8004cbe:	d00b      	beq.n	8004cd8 <_vfiprintf_r+0xc0>
 8004cc0:	465b      	mov	r3, fp
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	f7ff ff93 	bl	8004bf2 <__sfputs_r>
 8004ccc:	3001      	adds	r0, #1
 8004cce:	f000 80aa 	beq.w	8004e26 <_vfiprintf_r+0x20e>
 8004cd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cd4:	445a      	add	r2, fp
 8004cd6:	9209      	str	r2, [sp, #36]	; 0x24
 8004cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 80a2 	beq.w	8004e26 <_vfiprintf_r+0x20e>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cec:	f10a 0a01 	add.w	sl, sl, #1
 8004cf0:	9304      	str	r3, [sp, #16]
 8004cf2:	9307      	str	r3, [sp, #28]
 8004cf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cf8:	931a      	str	r3, [sp, #104]	; 0x68
 8004cfa:	4654      	mov	r4, sl
 8004cfc:	2205      	movs	r2, #5
 8004cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d02:	4858      	ldr	r0, [pc, #352]	; (8004e64 <_vfiprintf_r+0x24c>)
 8004d04:	f7fb fa64 	bl	80001d0 <memchr>
 8004d08:	9a04      	ldr	r2, [sp, #16]
 8004d0a:	b9d8      	cbnz	r0, 8004d44 <_vfiprintf_r+0x12c>
 8004d0c:	06d1      	lsls	r1, r2, #27
 8004d0e:	bf44      	itt	mi
 8004d10:	2320      	movmi	r3, #32
 8004d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d16:	0713      	lsls	r3, r2, #28
 8004d18:	bf44      	itt	mi
 8004d1a:	232b      	movmi	r3, #43	; 0x2b
 8004d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d20:	f89a 3000 	ldrb.w	r3, [sl]
 8004d24:	2b2a      	cmp	r3, #42	; 0x2a
 8004d26:	d015      	beq.n	8004d54 <_vfiprintf_r+0x13c>
 8004d28:	9a07      	ldr	r2, [sp, #28]
 8004d2a:	4654      	mov	r4, sl
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	f04f 0c0a 	mov.w	ip, #10
 8004d32:	4621      	mov	r1, r4
 8004d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d38:	3b30      	subs	r3, #48	; 0x30
 8004d3a:	2b09      	cmp	r3, #9
 8004d3c:	d94e      	bls.n	8004ddc <_vfiprintf_r+0x1c4>
 8004d3e:	b1b0      	cbz	r0, 8004d6e <_vfiprintf_r+0x156>
 8004d40:	9207      	str	r2, [sp, #28]
 8004d42:	e014      	b.n	8004d6e <_vfiprintf_r+0x156>
 8004d44:	eba0 0308 	sub.w	r3, r0, r8
 8004d48:	fa09 f303 	lsl.w	r3, r9, r3
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	9304      	str	r3, [sp, #16]
 8004d50:	46a2      	mov	sl, r4
 8004d52:	e7d2      	b.n	8004cfa <_vfiprintf_r+0xe2>
 8004d54:	9b03      	ldr	r3, [sp, #12]
 8004d56:	1d19      	adds	r1, r3, #4
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	9103      	str	r1, [sp, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	bfbb      	ittet	lt
 8004d60:	425b      	neglt	r3, r3
 8004d62:	f042 0202 	orrlt.w	r2, r2, #2
 8004d66:	9307      	strge	r3, [sp, #28]
 8004d68:	9307      	strlt	r3, [sp, #28]
 8004d6a:	bfb8      	it	lt
 8004d6c:	9204      	strlt	r2, [sp, #16]
 8004d6e:	7823      	ldrb	r3, [r4, #0]
 8004d70:	2b2e      	cmp	r3, #46	; 0x2e
 8004d72:	d10c      	bne.n	8004d8e <_vfiprintf_r+0x176>
 8004d74:	7863      	ldrb	r3, [r4, #1]
 8004d76:	2b2a      	cmp	r3, #42	; 0x2a
 8004d78:	d135      	bne.n	8004de6 <_vfiprintf_r+0x1ce>
 8004d7a:	9b03      	ldr	r3, [sp, #12]
 8004d7c:	1d1a      	adds	r2, r3, #4
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	9203      	str	r2, [sp, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bfb8      	it	lt
 8004d86:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d8a:	3402      	adds	r4, #2
 8004d8c:	9305      	str	r3, [sp, #20]
 8004d8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004e74 <_vfiprintf_r+0x25c>
 8004d92:	7821      	ldrb	r1, [r4, #0]
 8004d94:	2203      	movs	r2, #3
 8004d96:	4650      	mov	r0, sl
 8004d98:	f7fb fa1a 	bl	80001d0 <memchr>
 8004d9c:	b140      	cbz	r0, 8004db0 <_vfiprintf_r+0x198>
 8004d9e:	2340      	movs	r3, #64	; 0x40
 8004da0:	eba0 000a 	sub.w	r0, r0, sl
 8004da4:	fa03 f000 	lsl.w	r0, r3, r0
 8004da8:	9b04      	ldr	r3, [sp, #16]
 8004daa:	4303      	orrs	r3, r0
 8004dac:	3401      	adds	r4, #1
 8004dae:	9304      	str	r3, [sp, #16]
 8004db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004db4:	482c      	ldr	r0, [pc, #176]	; (8004e68 <_vfiprintf_r+0x250>)
 8004db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dba:	2206      	movs	r2, #6
 8004dbc:	f7fb fa08 	bl	80001d0 <memchr>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	d03f      	beq.n	8004e44 <_vfiprintf_r+0x22c>
 8004dc4:	4b29      	ldr	r3, [pc, #164]	; (8004e6c <_vfiprintf_r+0x254>)
 8004dc6:	bb1b      	cbnz	r3, 8004e10 <_vfiprintf_r+0x1f8>
 8004dc8:	9b03      	ldr	r3, [sp, #12]
 8004dca:	3307      	adds	r3, #7
 8004dcc:	f023 0307 	bic.w	r3, r3, #7
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	9303      	str	r3, [sp, #12]
 8004dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dd6:	443b      	add	r3, r7
 8004dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8004dda:	e767      	b.n	8004cac <_vfiprintf_r+0x94>
 8004ddc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004de0:	460c      	mov	r4, r1
 8004de2:	2001      	movs	r0, #1
 8004de4:	e7a5      	b.n	8004d32 <_vfiprintf_r+0x11a>
 8004de6:	2300      	movs	r3, #0
 8004de8:	3401      	adds	r4, #1
 8004dea:	9305      	str	r3, [sp, #20]
 8004dec:	4619      	mov	r1, r3
 8004dee:	f04f 0c0a 	mov.w	ip, #10
 8004df2:	4620      	mov	r0, r4
 8004df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004df8:	3a30      	subs	r2, #48	; 0x30
 8004dfa:	2a09      	cmp	r2, #9
 8004dfc:	d903      	bls.n	8004e06 <_vfiprintf_r+0x1ee>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0c5      	beq.n	8004d8e <_vfiprintf_r+0x176>
 8004e02:	9105      	str	r1, [sp, #20]
 8004e04:	e7c3      	b.n	8004d8e <_vfiprintf_r+0x176>
 8004e06:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e7f0      	b.n	8004df2 <_vfiprintf_r+0x1da>
 8004e10:	ab03      	add	r3, sp, #12
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	462a      	mov	r2, r5
 8004e16:	4b16      	ldr	r3, [pc, #88]	; (8004e70 <_vfiprintf_r+0x258>)
 8004e18:	a904      	add	r1, sp, #16
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	f3af 8000 	nop.w
 8004e20:	4607      	mov	r7, r0
 8004e22:	1c78      	adds	r0, r7, #1
 8004e24:	d1d6      	bne.n	8004dd4 <_vfiprintf_r+0x1bc>
 8004e26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e28:	07d9      	lsls	r1, r3, #31
 8004e2a:	d405      	bmi.n	8004e38 <_vfiprintf_r+0x220>
 8004e2c:	89ab      	ldrh	r3, [r5, #12]
 8004e2e:	059a      	lsls	r2, r3, #22
 8004e30:	d402      	bmi.n	8004e38 <_vfiprintf_r+0x220>
 8004e32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e34:	f7ff fd6d 	bl	8004912 <__retarget_lock_release_recursive>
 8004e38:	89ab      	ldrh	r3, [r5, #12]
 8004e3a:	065b      	lsls	r3, r3, #25
 8004e3c:	f53f af12 	bmi.w	8004c64 <_vfiprintf_r+0x4c>
 8004e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e42:	e711      	b.n	8004c68 <_vfiprintf_r+0x50>
 8004e44:	ab03      	add	r3, sp, #12
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	462a      	mov	r2, r5
 8004e4a:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <_vfiprintf_r+0x258>)
 8004e4c:	a904      	add	r1, sp, #16
 8004e4e:	4630      	mov	r0, r6
 8004e50:	f000 f880 	bl	8004f54 <_printf_i>
 8004e54:	e7e4      	b.n	8004e20 <_vfiprintf_r+0x208>
 8004e56:	bf00      	nop
 8004e58:	08005300 	.word	0x08005300
 8004e5c:	08005320 	.word	0x08005320
 8004e60:	080052e0 	.word	0x080052e0
 8004e64:	08005340 	.word	0x08005340
 8004e68:	0800534a 	.word	0x0800534a
 8004e6c:	00000000 	.word	0x00000000
 8004e70:	08004bf3 	.word	0x08004bf3
 8004e74:	08005346 	.word	0x08005346

08004e78 <_printf_common>:
 8004e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e7c:	4616      	mov	r6, r2
 8004e7e:	4699      	mov	r9, r3
 8004e80:	688a      	ldr	r2, [r1, #8]
 8004e82:	690b      	ldr	r3, [r1, #16]
 8004e84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	bfb8      	it	lt
 8004e8c:	4613      	movlt	r3, r2
 8004e8e:	6033      	str	r3, [r6, #0]
 8004e90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e94:	4607      	mov	r7, r0
 8004e96:	460c      	mov	r4, r1
 8004e98:	b10a      	cbz	r2, 8004e9e <_printf_common+0x26>
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	6033      	str	r3, [r6, #0]
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	0699      	lsls	r1, r3, #26
 8004ea2:	bf42      	ittt	mi
 8004ea4:	6833      	ldrmi	r3, [r6, #0]
 8004ea6:	3302      	addmi	r3, #2
 8004ea8:	6033      	strmi	r3, [r6, #0]
 8004eaa:	6825      	ldr	r5, [r4, #0]
 8004eac:	f015 0506 	ands.w	r5, r5, #6
 8004eb0:	d106      	bne.n	8004ec0 <_printf_common+0x48>
 8004eb2:	f104 0a19 	add.w	sl, r4, #25
 8004eb6:	68e3      	ldr	r3, [r4, #12]
 8004eb8:	6832      	ldr	r2, [r6, #0]
 8004eba:	1a9b      	subs	r3, r3, r2
 8004ebc:	42ab      	cmp	r3, r5
 8004ebe:	dc26      	bgt.n	8004f0e <_printf_common+0x96>
 8004ec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ec4:	1e13      	subs	r3, r2, #0
 8004ec6:	6822      	ldr	r2, [r4, #0]
 8004ec8:	bf18      	it	ne
 8004eca:	2301      	movne	r3, #1
 8004ecc:	0692      	lsls	r2, r2, #26
 8004ece:	d42b      	bmi.n	8004f28 <_printf_common+0xb0>
 8004ed0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ed4:	4649      	mov	r1, r9
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	47c0      	blx	r8
 8004eda:	3001      	adds	r0, #1
 8004edc:	d01e      	beq.n	8004f1c <_printf_common+0xa4>
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	68e5      	ldr	r5, [r4, #12]
 8004ee2:	6832      	ldr	r2, [r6, #0]
 8004ee4:	f003 0306 	and.w	r3, r3, #6
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	bf08      	it	eq
 8004eec:	1aad      	subeq	r5, r5, r2
 8004eee:	68a3      	ldr	r3, [r4, #8]
 8004ef0:	6922      	ldr	r2, [r4, #16]
 8004ef2:	bf0c      	ite	eq
 8004ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ef8:	2500      	movne	r5, #0
 8004efa:	4293      	cmp	r3, r2
 8004efc:	bfc4      	itt	gt
 8004efe:	1a9b      	subgt	r3, r3, r2
 8004f00:	18ed      	addgt	r5, r5, r3
 8004f02:	2600      	movs	r6, #0
 8004f04:	341a      	adds	r4, #26
 8004f06:	42b5      	cmp	r5, r6
 8004f08:	d11a      	bne.n	8004f40 <_printf_common+0xc8>
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	e008      	b.n	8004f20 <_printf_common+0xa8>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	4652      	mov	r2, sl
 8004f12:	4649      	mov	r1, r9
 8004f14:	4638      	mov	r0, r7
 8004f16:	47c0      	blx	r8
 8004f18:	3001      	adds	r0, #1
 8004f1a:	d103      	bne.n	8004f24 <_printf_common+0xac>
 8004f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f24:	3501      	adds	r5, #1
 8004f26:	e7c6      	b.n	8004eb6 <_printf_common+0x3e>
 8004f28:	18e1      	adds	r1, r4, r3
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	2030      	movs	r0, #48	; 0x30
 8004f2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f32:	4422      	add	r2, r4
 8004f34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f3c:	3302      	adds	r3, #2
 8004f3e:	e7c7      	b.n	8004ed0 <_printf_common+0x58>
 8004f40:	2301      	movs	r3, #1
 8004f42:	4622      	mov	r2, r4
 8004f44:	4649      	mov	r1, r9
 8004f46:	4638      	mov	r0, r7
 8004f48:	47c0      	blx	r8
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	d0e6      	beq.n	8004f1c <_printf_common+0xa4>
 8004f4e:	3601      	adds	r6, #1
 8004f50:	e7d9      	b.n	8004f06 <_printf_common+0x8e>
	...

08004f54 <_printf_i>:
 8004f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f58:	7e0f      	ldrb	r7, [r1, #24]
 8004f5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f5c:	2f78      	cmp	r7, #120	; 0x78
 8004f5e:	4691      	mov	r9, r2
 8004f60:	4680      	mov	r8, r0
 8004f62:	460c      	mov	r4, r1
 8004f64:	469a      	mov	sl, r3
 8004f66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f6a:	d807      	bhi.n	8004f7c <_printf_i+0x28>
 8004f6c:	2f62      	cmp	r7, #98	; 0x62
 8004f6e:	d80a      	bhi.n	8004f86 <_printf_i+0x32>
 8004f70:	2f00      	cmp	r7, #0
 8004f72:	f000 80d8 	beq.w	8005126 <_printf_i+0x1d2>
 8004f76:	2f58      	cmp	r7, #88	; 0x58
 8004f78:	f000 80a3 	beq.w	80050c2 <_printf_i+0x16e>
 8004f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f84:	e03a      	b.n	8004ffc <_printf_i+0xa8>
 8004f86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f8a:	2b15      	cmp	r3, #21
 8004f8c:	d8f6      	bhi.n	8004f7c <_printf_i+0x28>
 8004f8e:	a101      	add	r1, pc, #4	; (adr r1, 8004f94 <_printf_i+0x40>)
 8004f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f94:	08004fed 	.word	0x08004fed
 8004f98:	08005001 	.word	0x08005001
 8004f9c:	08004f7d 	.word	0x08004f7d
 8004fa0:	08004f7d 	.word	0x08004f7d
 8004fa4:	08004f7d 	.word	0x08004f7d
 8004fa8:	08004f7d 	.word	0x08004f7d
 8004fac:	08005001 	.word	0x08005001
 8004fb0:	08004f7d 	.word	0x08004f7d
 8004fb4:	08004f7d 	.word	0x08004f7d
 8004fb8:	08004f7d 	.word	0x08004f7d
 8004fbc:	08004f7d 	.word	0x08004f7d
 8004fc0:	0800510d 	.word	0x0800510d
 8004fc4:	08005031 	.word	0x08005031
 8004fc8:	080050ef 	.word	0x080050ef
 8004fcc:	08004f7d 	.word	0x08004f7d
 8004fd0:	08004f7d 	.word	0x08004f7d
 8004fd4:	0800512f 	.word	0x0800512f
 8004fd8:	08004f7d 	.word	0x08004f7d
 8004fdc:	08005031 	.word	0x08005031
 8004fe0:	08004f7d 	.word	0x08004f7d
 8004fe4:	08004f7d 	.word	0x08004f7d
 8004fe8:	080050f7 	.word	0x080050f7
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	1d1a      	adds	r2, r3, #4
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	602a      	str	r2, [r5, #0]
 8004ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0a3      	b.n	8005148 <_printf_i+0x1f4>
 8005000:	6820      	ldr	r0, [r4, #0]
 8005002:	6829      	ldr	r1, [r5, #0]
 8005004:	0606      	lsls	r6, r0, #24
 8005006:	f101 0304 	add.w	r3, r1, #4
 800500a:	d50a      	bpl.n	8005022 <_printf_i+0xce>
 800500c:	680e      	ldr	r6, [r1, #0]
 800500e:	602b      	str	r3, [r5, #0]
 8005010:	2e00      	cmp	r6, #0
 8005012:	da03      	bge.n	800501c <_printf_i+0xc8>
 8005014:	232d      	movs	r3, #45	; 0x2d
 8005016:	4276      	negs	r6, r6
 8005018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800501c:	485e      	ldr	r0, [pc, #376]	; (8005198 <_printf_i+0x244>)
 800501e:	230a      	movs	r3, #10
 8005020:	e019      	b.n	8005056 <_printf_i+0x102>
 8005022:	680e      	ldr	r6, [r1, #0]
 8005024:	602b      	str	r3, [r5, #0]
 8005026:	f010 0f40 	tst.w	r0, #64	; 0x40
 800502a:	bf18      	it	ne
 800502c:	b236      	sxthne	r6, r6
 800502e:	e7ef      	b.n	8005010 <_printf_i+0xbc>
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	6820      	ldr	r0, [r4, #0]
 8005034:	1d19      	adds	r1, r3, #4
 8005036:	6029      	str	r1, [r5, #0]
 8005038:	0601      	lsls	r1, r0, #24
 800503a:	d501      	bpl.n	8005040 <_printf_i+0xec>
 800503c:	681e      	ldr	r6, [r3, #0]
 800503e:	e002      	b.n	8005046 <_printf_i+0xf2>
 8005040:	0646      	lsls	r6, r0, #25
 8005042:	d5fb      	bpl.n	800503c <_printf_i+0xe8>
 8005044:	881e      	ldrh	r6, [r3, #0]
 8005046:	4854      	ldr	r0, [pc, #336]	; (8005198 <_printf_i+0x244>)
 8005048:	2f6f      	cmp	r7, #111	; 0x6f
 800504a:	bf0c      	ite	eq
 800504c:	2308      	moveq	r3, #8
 800504e:	230a      	movne	r3, #10
 8005050:	2100      	movs	r1, #0
 8005052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005056:	6865      	ldr	r5, [r4, #4]
 8005058:	60a5      	str	r5, [r4, #8]
 800505a:	2d00      	cmp	r5, #0
 800505c:	bfa2      	ittt	ge
 800505e:	6821      	ldrge	r1, [r4, #0]
 8005060:	f021 0104 	bicge.w	r1, r1, #4
 8005064:	6021      	strge	r1, [r4, #0]
 8005066:	b90e      	cbnz	r6, 800506c <_printf_i+0x118>
 8005068:	2d00      	cmp	r5, #0
 800506a:	d04d      	beq.n	8005108 <_printf_i+0x1b4>
 800506c:	4615      	mov	r5, r2
 800506e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005072:	fb03 6711 	mls	r7, r3, r1, r6
 8005076:	5dc7      	ldrb	r7, [r0, r7]
 8005078:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800507c:	4637      	mov	r7, r6
 800507e:	42bb      	cmp	r3, r7
 8005080:	460e      	mov	r6, r1
 8005082:	d9f4      	bls.n	800506e <_printf_i+0x11a>
 8005084:	2b08      	cmp	r3, #8
 8005086:	d10b      	bne.n	80050a0 <_printf_i+0x14c>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	07de      	lsls	r6, r3, #31
 800508c:	d508      	bpl.n	80050a0 <_printf_i+0x14c>
 800508e:	6923      	ldr	r3, [r4, #16]
 8005090:	6861      	ldr	r1, [r4, #4]
 8005092:	4299      	cmp	r1, r3
 8005094:	bfde      	ittt	le
 8005096:	2330      	movle	r3, #48	; 0x30
 8005098:	f805 3c01 	strble.w	r3, [r5, #-1]
 800509c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050a0:	1b52      	subs	r2, r2, r5
 80050a2:	6122      	str	r2, [r4, #16]
 80050a4:	f8cd a000 	str.w	sl, [sp]
 80050a8:	464b      	mov	r3, r9
 80050aa:	aa03      	add	r2, sp, #12
 80050ac:	4621      	mov	r1, r4
 80050ae:	4640      	mov	r0, r8
 80050b0:	f7ff fee2 	bl	8004e78 <_printf_common>
 80050b4:	3001      	adds	r0, #1
 80050b6:	d14c      	bne.n	8005152 <_printf_i+0x1fe>
 80050b8:	f04f 30ff 	mov.w	r0, #4294967295
 80050bc:	b004      	add	sp, #16
 80050be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c2:	4835      	ldr	r0, [pc, #212]	; (8005198 <_printf_i+0x244>)
 80050c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050c8:	6829      	ldr	r1, [r5, #0]
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80050d0:	6029      	str	r1, [r5, #0]
 80050d2:	061d      	lsls	r5, r3, #24
 80050d4:	d514      	bpl.n	8005100 <_printf_i+0x1ac>
 80050d6:	07df      	lsls	r7, r3, #31
 80050d8:	bf44      	itt	mi
 80050da:	f043 0320 	orrmi.w	r3, r3, #32
 80050de:	6023      	strmi	r3, [r4, #0]
 80050e0:	b91e      	cbnz	r6, 80050ea <_printf_i+0x196>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	f023 0320 	bic.w	r3, r3, #32
 80050e8:	6023      	str	r3, [r4, #0]
 80050ea:	2310      	movs	r3, #16
 80050ec:	e7b0      	b.n	8005050 <_printf_i+0xfc>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	f043 0320 	orr.w	r3, r3, #32
 80050f4:	6023      	str	r3, [r4, #0]
 80050f6:	2378      	movs	r3, #120	; 0x78
 80050f8:	4828      	ldr	r0, [pc, #160]	; (800519c <_printf_i+0x248>)
 80050fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050fe:	e7e3      	b.n	80050c8 <_printf_i+0x174>
 8005100:	0659      	lsls	r1, r3, #25
 8005102:	bf48      	it	mi
 8005104:	b2b6      	uxthmi	r6, r6
 8005106:	e7e6      	b.n	80050d6 <_printf_i+0x182>
 8005108:	4615      	mov	r5, r2
 800510a:	e7bb      	b.n	8005084 <_printf_i+0x130>
 800510c:	682b      	ldr	r3, [r5, #0]
 800510e:	6826      	ldr	r6, [r4, #0]
 8005110:	6961      	ldr	r1, [r4, #20]
 8005112:	1d18      	adds	r0, r3, #4
 8005114:	6028      	str	r0, [r5, #0]
 8005116:	0635      	lsls	r5, r6, #24
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	d501      	bpl.n	8005120 <_printf_i+0x1cc>
 800511c:	6019      	str	r1, [r3, #0]
 800511e:	e002      	b.n	8005126 <_printf_i+0x1d2>
 8005120:	0670      	lsls	r0, r6, #25
 8005122:	d5fb      	bpl.n	800511c <_printf_i+0x1c8>
 8005124:	8019      	strh	r1, [r3, #0]
 8005126:	2300      	movs	r3, #0
 8005128:	6123      	str	r3, [r4, #16]
 800512a:	4615      	mov	r5, r2
 800512c:	e7ba      	b.n	80050a4 <_printf_i+0x150>
 800512e:	682b      	ldr	r3, [r5, #0]
 8005130:	1d1a      	adds	r2, r3, #4
 8005132:	602a      	str	r2, [r5, #0]
 8005134:	681d      	ldr	r5, [r3, #0]
 8005136:	6862      	ldr	r2, [r4, #4]
 8005138:	2100      	movs	r1, #0
 800513a:	4628      	mov	r0, r5
 800513c:	f7fb f848 	bl	80001d0 <memchr>
 8005140:	b108      	cbz	r0, 8005146 <_printf_i+0x1f2>
 8005142:	1b40      	subs	r0, r0, r5
 8005144:	6060      	str	r0, [r4, #4]
 8005146:	6863      	ldr	r3, [r4, #4]
 8005148:	6123      	str	r3, [r4, #16]
 800514a:	2300      	movs	r3, #0
 800514c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005150:	e7a8      	b.n	80050a4 <_printf_i+0x150>
 8005152:	6923      	ldr	r3, [r4, #16]
 8005154:	462a      	mov	r2, r5
 8005156:	4649      	mov	r1, r9
 8005158:	4640      	mov	r0, r8
 800515a:	47d0      	blx	sl
 800515c:	3001      	adds	r0, #1
 800515e:	d0ab      	beq.n	80050b8 <_printf_i+0x164>
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	079b      	lsls	r3, r3, #30
 8005164:	d413      	bmi.n	800518e <_printf_i+0x23a>
 8005166:	68e0      	ldr	r0, [r4, #12]
 8005168:	9b03      	ldr	r3, [sp, #12]
 800516a:	4298      	cmp	r0, r3
 800516c:	bfb8      	it	lt
 800516e:	4618      	movlt	r0, r3
 8005170:	e7a4      	b.n	80050bc <_printf_i+0x168>
 8005172:	2301      	movs	r3, #1
 8005174:	4632      	mov	r2, r6
 8005176:	4649      	mov	r1, r9
 8005178:	4640      	mov	r0, r8
 800517a:	47d0      	blx	sl
 800517c:	3001      	adds	r0, #1
 800517e:	d09b      	beq.n	80050b8 <_printf_i+0x164>
 8005180:	3501      	adds	r5, #1
 8005182:	68e3      	ldr	r3, [r4, #12]
 8005184:	9903      	ldr	r1, [sp, #12]
 8005186:	1a5b      	subs	r3, r3, r1
 8005188:	42ab      	cmp	r3, r5
 800518a:	dcf2      	bgt.n	8005172 <_printf_i+0x21e>
 800518c:	e7eb      	b.n	8005166 <_printf_i+0x212>
 800518e:	2500      	movs	r5, #0
 8005190:	f104 0619 	add.w	r6, r4, #25
 8005194:	e7f5      	b.n	8005182 <_printf_i+0x22e>
 8005196:	bf00      	nop
 8005198:	08005351 	.word	0x08005351
 800519c:	08005362 	.word	0x08005362

080051a0 <_read_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4d07      	ldr	r5, [pc, #28]	; (80051c0 <_read_r+0x20>)
 80051a4:	4604      	mov	r4, r0
 80051a6:	4608      	mov	r0, r1
 80051a8:	4611      	mov	r1, r2
 80051aa:	2200      	movs	r2, #0
 80051ac:	602a      	str	r2, [r5, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	f7fb fc94 	bl	8000adc <_read>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	d102      	bne.n	80051be <_read_r+0x1e>
 80051b8:	682b      	ldr	r3, [r5, #0]
 80051ba:	b103      	cbz	r3, 80051be <_read_r+0x1e>
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	bd38      	pop	{r3, r4, r5, pc}
 80051c0:	20000178 	.word	0x20000178

080051c4 <_sbrk_r>:
 80051c4:	b538      	push	{r3, r4, r5, lr}
 80051c6:	4d06      	ldr	r5, [pc, #24]	; (80051e0 <_sbrk_r+0x1c>)
 80051c8:	2300      	movs	r3, #0
 80051ca:	4604      	mov	r4, r0
 80051cc:	4608      	mov	r0, r1
 80051ce:	602b      	str	r3, [r5, #0]
 80051d0:	f7fb fcd6 	bl	8000b80 <_sbrk>
 80051d4:	1c43      	adds	r3, r0, #1
 80051d6:	d102      	bne.n	80051de <_sbrk_r+0x1a>
 80051d8:	682b      	ldr	r3, [r5, #0]
 80051da:	b103      	cbz	r3, 80051de <_sbrk_r+0x1a>
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	bd38      	pop	{r3, r4, r5, pc}
 80051e0:	20000178 	.word	0x20000178

080051e4 <_fstat_r>:
 80051e4:	b538      	push	{r3, r4, r5, lr}
 80051e6:	4d07      	ldr	r5, [pc, #28]	; (8005204 <_fstat_r+0x20>)
 80051e8:	2300      	movs	r3, #0
 80051ea:	4604      	mov	r4, r0
 80051ec:	4608      	mov	r0, r1
 80051ee:	4611      	mov	r1, r2
 80051f0:	602b      	str	r3, [r5, #0]
 80051f2:	f7fb fc9c 	bl	8000b2e <_fstat>
 80051f6:	1c43      	adds	r3, r0, #1
 80051f8:	d102      	bne.n	8005200 <_fstat_r+0x1c>
 80051fa:	682b      	ldr	r3, [r5, #0]
 80051fc:	b103      	cbz	r3, 8005200 <_fstat_r+0x1c>
 80051fe:	6023      	str	r3, [r4, #0]
 8005200:	bd38      	pop	{r3, r4, r5, pc}
 8005202:	bf00      	nop
 8005204:	20000178 	.word	0x20000178

08005208 <_isatty_r>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	4d06      	ldr	r5, [pc, #24]	; (8005224 <_isatty_r+0x1c>)
 800520c:	2300      	movs	r3, #0
 800520e:	4604      	mov	r4, r0
 8005210:	4608      	mov	r0, r1
 8005212:	602b      	str	r3, [r5, #0]
 8005214:	f7fb fc9b 	bl	8000b4e <_isatty>
 8005218:	1c43      	adds	r3, r0, #1
 800521a:	d102      	bne.n	8005222 <_isatty_r+0x1a>
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	b103      	cbz	r3, 8005222 <_isatty_r+0x1a>
 8005220:	6023      	str	r3, [r4, #0]
 8005222:	bd38      	pop	{r3, r4, r5, pc}
 8005224:	20000178 	.word	0x20000178

08005228 <__malloc_lock>:
 8005228:	4801      	ldr	r0, [pc, #4]	; (8005230 <__malloc_lock+0x8>)
 800522a:	f7ff bb71 	b.w	8004910 <__retarget_lock_acquire_recursive>
 800522e:	bf00      	nop
 8005230:	2000016c 	.word	0x2000016c

08005234 <__malloc_unlock>:
 8005234:	4801      	ldr	r0, [pc, #4]	; (800523c <__malloc_unlock+0x8>)
 8005236:	f7ff bb6c 	b.w	8004912 <__retarget_lock_release_recursive>
 800523a:	bf00      	nop
 800523c:	2000016c 	.word	0x2000016c

08005240 <_init>:
 8005240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005242:	bf00      	nop
 8005244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005246:	bc08      	pop	{r3}
 8005248:	469e      	mov	lr, r3
 800524a:	4770      	bx	lr

0800524c <_fini>:
 800524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524e:	bf00      	nop
 8005250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005252:	bc08      	pop	{r3}
 8005254:	469e      	mov	lr, r3
 8005256:	4770      	bx	lr
